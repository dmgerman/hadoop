begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|CacheManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|Caching
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|CompleteConfiguration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|FactoryBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|configuration
operator|.
name|MutableConfiguration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|expiry
operator|.
name|CreatedExpiryPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|expiry
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|expiry
operator|.
name|ExpiryPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|integration
operator|.
name|CacheLoader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|integration
operator|.
name|CacheLoaderException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|cache
operator|.
name|spi
operator|.
name|CachingProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  *  * The FederationStateStoreFacade is an utility wrapper that provides singleton  * access to the Federation state store. It abstracts out retries and in  * addition, it also implements the caching for various objects.  *  */
end_comment

begin_class
DECL|class|FederationStateStoreFacade
specifier|public
specifier|final
class|class
name|FederationStateStoreFacade
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationStateStoreFacade
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GET_SUBCLUSTERS_CACHEID
specifier|private
specifier|static
specifier|final
name|String
name|GET_SUBCLUSTERS_CACHEID
init|=
literal|"getSubClusters"
decl_stmt|;
DECL|field|GET_POLICIES_CONFIGURATIONS_CACHEID
specifier|private
specifier|static
specifier|final
name|String
name|GET_POLICIES_CONFIGURATIONS_CACHEID
init|=
literal|"getPoliciesConfigurations"
decl_stmt|;
DECL|field|FACADE
specifier|private
specifier|static
specifier|final
name|FederationStateStoreFacade
name|FACADE
init|=
operator|new
name|FederationStateStoreFacade
argument_list|()
decl_stmt|;
DECL|field|stateStore
specifier|private
name|FederationStateStore
name|stateStore
decl_stmt|;
DECL|field|cacheTimeToLive
specifier|private
name|int
name|cacheTimeToLive
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cache
specifier|private
name|Cache
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cache
decl_stmt|;
DECL|method|FederationStateStoreFacade ()
specifier|private
name|FederationStateStoreFacade
parameter_list|()
block|{
name|initializeFacadeInternal
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeFacadeInternal (Configuration config)
specifier|private
name|void
name|initializeFacadeInternal
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
try|try
block|{
name|this
operator|.
name|stateStore
operator|=
operator|(
name|FederationStateStore
operator|)
name|createRetryInstance
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|FEDERATION_STATESTORE_CLIENT_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_STATESTORE_CLIENT_CLASS
argument_list|,
name|FederationStateStore
operator|.
name|class
argument_list|,
name|createRetryPolicy
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to initialize the FederationStateStoreFacade object"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Delete and re-initialize the cache, to force it to use the given    * configuration.    *    * @param store the {@link FederationStateStore} instance to reinitialize with    * @param config the updated configuration to reinitialize with    */
annotation|@
name|VisibleForTesting
DECL|method|reinitialize (FederationStateStore store, Configuration config)
specifier|public
specifier|synchronized
name|void
name|reinitialize
parameter_list|(
name|FederationStateStore
name|store
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|stateStore
operator|=
name|store
expr_stmt|;
name|clearCache
argument_list|()
expr_stmt|;
name|initCache
argument_list|()
expr_stmt|;
block|}
DECL|method|createRetryPolicy (Configuration conf)
specifier|public
specifier|static
name|RetryPolicy
name|createRetryPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Retry settings for StateStore
name|RetryPolicy
name|retryPolicy
init|=
name|RetryPolicies
operator|.
name|exponentialBackoffRetry
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_RETRIES
argument_list|,
name|Integer
operator|.
name|SIZE
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_SLEEPTIME_BASE_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
return|return
name|retryPolicy
return|;
block|}
DECL|method|isCachingEnabled ()
specifier|private
name|boolean
name|isCachingEnabled
parameter_list|()
block|{
return|return
operator|(
name|cacheTimeToLive
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|initCache ()
specifier|private
name|void
name|initCache
parameter_list|()
block|{
comment|// Picking the JCache provider from classpath, need to make sure there's
comment|// no conflict or pick up a specific one in the future
name|cacheTimeToLive
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_CACHE_TIME_TO_LIVE_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_CACHE_TIME_TO_LIVE_SECS
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCachingEnabled
argument_list|()
condition|)
block|{
name|CachingProvider
name|jcacheProvider
init|=
name|Caching
operator|.
name|getCachingProvider
argument_list|()
decl_stmt|;
name|CacheManager
name|jcacheManager
init|=
name|jcacheProvider
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
name|this
operator|.
name|cache
operator|=
name|jcacheManager
operator|.
name|getCache
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cache
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating a JCache Manager with name "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|Duration
name|cacheExpiry
init|=
operator|new
name|Duration
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|cacheTimeToLive
argument_list|)
decl_stmt|;
name|CompleteConfiguration
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|configuration
init|=
operator|new
name|MutableConfiguration
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
operator|.
name|setStoreByValue
argument_list|(
literal|false
argument_list|)
operator|.
name|setReadThrough
argument_list|(
literal|true
argument_list|)
operator|.
name|setExpiryPolicyFactory
argument_list|(
operator|new
name|FactoryBuilder
operator|.
name|SingletonFactory
argument_list|<
name|ExpiryPolicy
argument_list|>
argument_list|(
operator|new
name|CreatedExpiryPolicy
argument_list|(
name|cacheExpiry
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setCacheLoaderFactory
argument_list|(
operator|new
name|FactoryBuilder
operator|.
name|SingletonFactory
argument_list|<
name|CacheLoader
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|(
operator|new
name|CacheLoaderImpl
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|cache
operator|=
name|jcacheManager
operator|.
name|createCache
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|clearCache ()
specifier|private
name|void
name|clearCache
parameter_list|()
block|{
name|CachingProvider
name|jcacheProvider
init|=
name|Caching
operator|.
name|getCachingProvider
argument_list|()
decl_stmt|;
name|CacheManager
name|jcacheManager
init|=
name|jcacheProvider
operator|.
name|getCacheManager
argument_list|()
decl_stmt|;
name|jcacheManager
operator|.
name|destroyCache
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Returns the singleton instance of the FederationStateStoreFacade object.    *    * @return the singleton {@link FederationStateStoreFacade} instance    */
DECL|method|getInstance ()
specifier|public
specifier|static
name|FederationStateStoreFacade
name|getInstance
parameter_list|()
block|{
return|return
name|FACADE
return|;
block|}
comment|/**    * Returns the {@link SubClusterInfo} for the specified {@link SubClusterId}.    *    * @param subClusterId the identifier of the sub-cluster    * @return the sub cluster information    * @throws YarnException if the call to the state store is unsuccessful    */
DECL|method|getSubCluster (final SubClusterId subClusterId)
specifier|public
name|SubClusterInfo
name|getSubCluster
parameter_list|(
specifier|final
name|SubClusterId
name|subClusterId
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|isCachingEnabled
argument_list|()
condition|)
block|{
return|return
name|getSubClusters
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
operator|.
name|getSubClusterInfo
argument_list|()
return|;
block|}
block|}
comment|/**    * Updates the cache with the central {@link FederationStateStore} and returns    * the {@link SubClusterInfo} for the specified {@link SubClusterId}.    *    * @param subClusterId the identifier of the sub-cluster    * @param flushCache flag to indicate if the cache should be flushed or not    * @return the sub cluster information    * @throws YarnException if the call to the state store is unsuccessful    */
DECL|method|getSubCluster (final SubClusterId subClusterId, final boolean flushCache)
specifier|public
name|SubClusterInfo
name|getSubCluster
parameter_list|(
specifier|final
name|SubClusterId
name|subClusterId
parameter_list|,
specifier|final
name|boolean
name|flushCache
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|flushCache
operator|&&
name|isCachingEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing subClusters from cache and rehydrating from store,"
operator|+
literal|" most likely on account of RM failover."
argument_list|)
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|buildGetSubClustersCacheRequest
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|)
return|;
block|}
comment|/**    * Returns the {@link SubClusterInfo} of all active sub cluster(s).    *    * @param filterInactiveSubClusters whether to filter out inactive    *          sub-clusters    * @return the information of all active sub cluster(s)    * @throws YarnException if the call to the state store is unsuccessful    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getSubClusters ( final boolean filterInactiveSubClusters)
specifier|public
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|getSubClusters
parameter_list|(
specifier|final
name|boolean
name|filterInactiveSubClusters
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
if|if
condition|(
name|isCachingEnabled
argument_list|()
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
name|buildGetSubClustersCacheRequest
argument_list|(
name|filterInactiveSubClusters
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|buildSubClusterInfoMap
argument_list|(
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
name|filterInactiveSubClusters
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns the {@link SubClusterPolicyConfiguration} for the specified queue.    *    * @param queue the queue whose policy is required    * @return the corresponding configured policy    * @throws YarnException if the call to the state store is unsuccessful    */
DECL|method|getPolicyConfiguration ( final String queue)
specifier|public
name|SubClusterPolicyConfiguration
name|getPolicyConfiguration
parameter_list|(
specifier|final
name|String
name|queue
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|isCachingEnabled
argument_list|()
condition|)
block|{
return|return
name|getPoliciesConfigurations
argument_list|()
operator|.
name|get
argument_list|(
name|queue
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|stateStore
operator|.
name|getPolicyConfiguration
argument_list|(
name|GetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|)
argument_list|)
operator|.
name|getPolicyConfiguration
argument_list|()
return|;
block|}
block|}
comment|/**    * Get the policies that is represented as    * {@link SubClusterPolicyConfiguration} for all currently active queues in    * the system.    *    * @return the policies for all currently active queues in the system    * @throws YarnException if the call to the state store is unsuccessful    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getPoliciesConfigurations ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
name|getPoliciesConfigurations
parameter_list|()
throws|throws
name|YarnException
block|{
try|try
block|{
if|if
condition|(
name|isCachingEnabled
argument_list|()
condition|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
operator|)
name|cache
operator|.
name|get
argument_list|(
name|buildGetPoliciesConfigurationsCacheRequest
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|buildPolicyConfigMap
argument_list|(
name|stateStore
operator|.
name|getPoliciesConfigurations
argument_list|(
name|GetSubClusterPoliciesConfigurationsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**    * Adds the home {@link SubClusterId} for the specified {@link ApplicationId}.    *    * @param appHomeSubCluster the mapping of the application to it's home    *          sub-cluster    * @return the stored Subcluster from StateStore    * @throws YarnException if the call to the state store is unsuccessful    */
DECL|method|addApplicationHomeSubCluster ( ApplicationHomeSubCluster appHomeSubCluster)
specifier|public
name|SubClusterId
name|addApplicationHomeSubCluster
parameter_list|(
name|ApplicationHomeSubCluster
name|appHomeSubCluster
parameter_list|)
throws|throws
name|YarnException
block|{
name|AddApplicationHomeSubClusterResponse
name|response
init|=
name|stateStore
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appHomeSubCluster
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getHomeSubCluster
argument_list|()
return|;
block|}
comment|/**    * Updates the home {@link SubClusterId} for the specified    * {@link ApplicationId}.    *    * @param appHomeSubCluster the mapping of the application to it's home    *          sub-cluster    * @throws YarnException if the call to the state store is unsuccessful    */
DECL|method|updateApplicationHomeSubCluster ( ApplicationHomeSubCluster appHomeSubCluster)
specifier|public
name|void
name|updateApplicationHomeSubCluster
parameter_list|(
name|ApplicationHomeSubCluster
name|appHomeSubCluster
parameter_list|)
throws|throws
name|YarnException
block|{
name|stateStore
operator|.
name|updateApplicationHomeSubCluster
argument_list|(
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appHomeSubCluster
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**    * Returns the home {@link SubClusterId} for the specified    * {@link ApplicationId}.    *    * @param appId the identifier of the application    * @return the home sub cluster identifier    * @throws YarnException if the call to the state store is unsuccessful    */
DECL|method|getApplicationHomeSubCluster (ApplicationId appId)
specifier|public
name|SubClusterId
name|getApplicationHomeSubCluster
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetApplicationHomeSubClusterResponse
name|response
init|=
name|stateStore
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|GetApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getHomeSubCluster
argument_list|()
return|;
block|}
comment|/**    * Helper method to create instances of Object using the class name defined in    * the configuration object. The instances creates {@link RetryProxy} using    * the specific {@link RetryPolicy}.    *    * @param conf the yarn configuration    * @param configuredClassName the configuration provider key    * @param defaultValue the default implementation for fallback    * @param type the class for which a retry proxy is required    * @param retryPolicy the policy for retrying method call failures    * @return a retry proxy for the specified interface    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createRetryInstance (Configuration conf, String configuredClassName, String defaultValue, Class<T> type, RetryPolicy retryPolicy)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Object
name|createRetryInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|configuredClassName
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|configuredClassName
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clusterResolverClass
init|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|clusterResolverClass
argument_list|)
condition|)
block|{
return|return
name|RetryProxy
operator|.
name|create
argument_list|(
name|type
argument_list|,
operator|(
name|T
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clusterResolverClass
argument_list|,
name|conf
argument_list|)
argument_list|,
name|retryPolicy
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Class: "
operator|+
name|className
operator|+
literal|" not instance of "
operator|+
name|type
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate : "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|buildSubClusterInfoMap ( final GetSubClustersInfoResponse response)
specifier|private
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|buildSubClusterInfoMap
parameter_list|(
specifier|final
name|GetSubClustersInfoResponse
name|response
parameter_list|)
block|{
name|List
argument_list|<
name|SubClusterInfo
argument_list|>
name|subClusters
init|=
name|response
operator|.
name|getSubClusters
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|subClustersMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|subClusters
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SubClusterInfo
name|subCluster
range|:
name|subClusters
control|)
block|{
name|subClustersMap
operator|.
name|put
argument_list|(
name|subCluster
operator|.
name|getSubClusterId
argument_list|()
argument_list|,
name|subCluster
argument_list|)
expr_stmt|;
block|}
return|return
name|subClustersMap
return|;
block|}
DECL|method|buildGetSubClustersCacheRequest ( final boolean filterInactiveSubClusters)
specifier|private
name|Object
name|buildGetSubClustersCacheRequest
parameter_list|(
specifier|final
name|boolean
name|filterInactiveSubClusters
parameter_list|)
block|{
specifier|final
name|String
name|cacheKey
init|=
name|buildCacheKey
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|GET_SUBCLUSTERS_CACHEID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CacheRequest
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
argument_list|>
name|cacheRequest
init|=
operator|new
name|CacheRequest
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
argument_list|>
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|Func
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|invoke
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|GetSubClustersInfoResponse
name|subClusters
init|=
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
name|filterInactiveSubClusters
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|buildSubClusterInfoMap
argument_list|(
name|subClusters
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|cacheRequest
return|;
block|}
DECL|method|buildPolicyConfigMap ( GetSubClusterPoliciesConfigurationsResponse response)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
name|buildPolicyConfigMap
parameter_list|(
name|GetSubClusterPoliciesConfigurationsResponse
name|response
parameter_list|)
block|{
name|List
argument_list|<
name|SubClusterPolicyConfiguration
argument_list|>
name|policyConfigs
init|=
name|response
operator|.
name|getPoliciesConfigs
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
name|queuePolicyConfigs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubClusterPolicyConfiguration
name|policyConfig
range|:
name|policyConfigs
control|)
block|{
name|queuePolicyConfigs
operator|.
name|put
argument_list|(
name|policyConfig
operator|.
name|getQueue
argument_list|()
argument_list|,
name|policyConfig
argument_list|)
expr_stmt|;
block|}
return|return
name|queuePolicyConfigs
return|;
block|}
DECL|method|buildGetPoliciesConfigurationsCacheRequest ()
specifier|private
name|Object
name|buildGetPoliciesConfigurationsCacheRequest
parameter_list|()
block|{
specifier|final
name|String
name|cacheKey
init|=
name|buildCacheKey
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|GET_POLICIES_CONFIGURATIONS_CACHEID
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CacheRequest
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
argument_list|>
name|cacheRequest
init|=
operator|new
name|CacheRequest
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
argument_list|>
argument_list|(
name|cacheKey
argument_list|,
operator|new
name|Func
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
name|invoke
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|GetSubClusterPoliciesConfigurationsResponse
name|policyConfigs
init|=
name|stateStore
operator|.
name|getPoliciesConfigurations
argument_list|(
name|GetSubClusterPoliciesConfigurationsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buildPolicyConfigMap
argument_list|(
name|policyConfigs
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|cacheRequest
return|;
block|}
DECL|method|buildCacheKey (String typeName, String methodName, String argName)
specifier|protected
name|String
name|buildCacheKey
parameter_list|(
name|String
name|typeName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|String
name|argName
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|typeName
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
if|if
condition|(
name|argName
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"::"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|argName
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Internal class that implements the CacheLoader interface that can be    * plugged into the CacheManager to load objects into the cache for specified    * keys.    */
DECL|class|CacheLoaderImpl
specifier|private
specifier|static
class|class
name|CacheLoaderImpl
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|CacheLoader
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|load (K key)
specifier|public
name|V
name|load
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|CacheLoaderException
block|{
try|try
block|{
name|CacheRequest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|query
init|=
operator|(
name|CacheRequest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|key
decl_stmt|;
assert|assert
name|query
operator|!=
literal|null
assert|;
return|return
name|query
operator|.
name|getValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|CacheLoaderException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadAll (Iterable<? extends K> keys)
specifier|public
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|loadAll
parameter_list|(
name|Iterable
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|keys
parameter_list|)
throws|throws
name|CacheLoaderException
block|{
comment|// The FACADE does not use the Cache's getAll API. Hence this is not
comment|// required to be implemented
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Internal class that encapsulates the cache key and a function that returns    * the value for the specified key.    */
DECL|class|CacheRequest
specifier|private
specifier|static
class|class
name|CacheRequest
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|field|key
specifier|private
name|K
name|key
decl_stmt|;
DECL|field|func
specifier|private
name|Func
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|func
decl_stmt|;
DECL|method|CacheRequest (K key, Func<K, V> func)
specifier|public
name|CacheRequest
parameter_list|(
name|K
name|key
parameter_list|,
name|Func
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|func
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|func
operator|=
name|func
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|V
name|getValue
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|func
operator|.
name|invoke
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|key
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|key
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|CacheRequest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|other
init|=
operator|(
name|CacheRequest
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|key
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|key
operator|.
name|equals
argument_list|(
name|other
operator|.
name|key
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Encapsulates a method that has one parameter and returns a value of the    * type specified by the TResult parameter.    */
DECL|interface|Func
specifier|protected
interface|interface
name|Func
parameter_list|<
name|T
parameter_list|,
name|TResult
parameter_list|>
block|{
DECL|method|invoke (T input)
name|TResult
name|invoke
parameter_list|(
name|T
name|input
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

