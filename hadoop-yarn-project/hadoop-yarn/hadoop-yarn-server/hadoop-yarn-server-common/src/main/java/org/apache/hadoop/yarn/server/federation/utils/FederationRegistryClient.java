begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|BindFlags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|api
operator|.
name|RegistryOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|registry
operator|.
name|client
operator|.
name|types
operator|.
name|ServiceRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Helper class that handles reads and writes to Yarn Registry to support UAM HA  * and second attempt.  */
end_comment

begin_class
DECL|class|FederationRegistryClient
specifier|public
class|class
name|FederationRegistryClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationRegistryClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|registry
specifier|private
name|RegistryOperations
name|registry
decl_stmt|;
DECL|field|user
specifier|private
name|UserGroupInformation
name|user
decl_stmt|;
comment|// AppId -> SubClusterId -> UAM token
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
argument_list|>
DECL|field|appSubClusterTokenMap
name|appSubClusterTokenMap
decl_stmt|;
comment|// Structure in registry:<registryBaseDir>/<AppId>/<SubClusterId> -> UAMToken
DECL|field|registryBaseDir
specifier|private
name|String
name|registryBaseDir
decl_stmt|;
DECL|method|FederationRegistryClient (Configuration conf, RegistryOperations registry, UserGroupInformation user)
specifier|public
name|FederationRegistryClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RegistryOperations
name|registry
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|this
operator|.
name|registry
operator|=
name|registry
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|appSubClusterTokenMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|registryBaseDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_REGISTRY_BASE_KEY
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_REGISTRY_BASE_KEY
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using registry {} with base directory: {}"
argument_list|,
name|this
operator|.
name|registry
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
operator|.
name|registryBaseDir
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the list of known applications in the registry.    *    * @return the list of known applications    */
DECL|method|getAllApplications ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|getAllApplications
parameter_list|()
block|{
comment|// Suppress the exception here because it is valid that the entry does not
comment|// exist
name|List
argument_list|<
name|String
argument_list|>
name|applications
init|=
literal|null
decl_stmt|;
try|try
block|{
name|applications
operator|=
name|listDirRegistry
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|getRegistryKey
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception from listDirRegistry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|applications
operator|==
literal|null
condition|)
block|{
comment|// It is valid for listDirRegistry to return null
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
return|return
name|applications
return|;
block|}
comment|/**    * For testing, delete all application records in registry.    */
annotation|@
name|VisibleForTesting
DECL|method|cleanAllApplications ()
specifier|public
specifier|synchronized
name|void
name|cleanAllApplications
parameter_list|()
block|{
try|try
block|{
name|removeKeyRegistry
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|getRegistryKey
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception from removeKeyRegistry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Write/update the UAM token for an application and a sub-cluster.    *    * @param subClusterId sub-cluster id of the token    * @param token the UAM of the application    * @return whether the amrmToken is added or updated to a new value    */
DECL|method|writeAMRMTokenForUAM (ApplicationId appId, String subClusterId, Token<AMRMTokenIdentifier> token)
specifier|public
specifier|synchronized
name|boolean
name|writeAMRMTokenForUAM
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|subClusterId
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
name|subClusterTokenMap
init|=
name|this
operator|.
name|appSubClusterTokenMap
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterTokenMap
operator|==
literal|null
condition|)
block|{
name|subClusterTokenMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|appSubClusterTokenMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|subClusterTokenMap
argument_list|)
expr_stmt|;
block|}
name|boolean
name|update
init|=
operator|!
name|token
operator|.
name|equals
argument_list|(
name|subClusterTokenMap
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|update
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Same amrmToken received from {}, skip writing registry for {}"
argument_list|,
name|subClusterId
argument_list|,
name|appId
argument_list|)
expr_stmt|;
return|return
name|update
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing/Updating amrmToken for {} to registry for {}"
argument_list|,
name|subClusterId
argument_list|,
name|appId
argument_list|)
expr_stmt|;
try|try
block|{
comment|// First, write the token entry
name|writeRegistry
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|getRegistryKey
argument_list|(
name|appId
argument_list|,
name|subClusterId
argument_list|)
argument_list|,
name|token
operator|.
name|encodeToUrlString
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Then update the subClusterTokenMap
name|subClusterTokenMap
operator|.
name|put
argument_list|(
name|subClusterId
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed writing AMRMToken to registry for subcluster "
operator|+
name|subClusterId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|update
return|;
block|}
comment|/**    * Load the information of one application from registry.    *    * @param appId application id    * @return the sub-cluster to UAM token mapping    */
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
DECL|method|loadStateFromRegistry (ApplicationId appId)
name|loadStateFromRegistry
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
name|retMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Suppress the exception here because it is valid that the entry does not
comment|// exist
name|List
argument_list|<
name|String
argument_list|>
name|subclusters
init|=
literal|null
decl_stmt|;
try|try
block|{
name|subclusters
operator|=
name|listDirRegistry
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|getRegistryKey
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception from listDirRegistry"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subclusters
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application {} does not exist in registry"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
return|return
name|retMap
return|;
block|}
comment|// Read the amrmToken for each sub-cluster with an existing UAM
for|for
control|(
name|String
name|scId
range|:
name|subclusters
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading amrmToken for subcluster {} for {}"
argument_list|,
name|scId
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|getRegistryKey
argument_list|(
name|appId
argument_list|,
name|scId
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|tokenString
init|=
name|readRegistry
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|key
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Null string from readRegistry key "
operator|+
name|key
argument_list|)
throw|;
block|}
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|()
decl_stmt|;
name|amrmToken
operator|.
name|decodeFromUrlString
argument_list|(
name|tokenString
argument_list|)
expr_stmt|;
comment|// Clear the service field, as if RM just issued the token
name|amrmToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|()
argument_list|)
expr_stmt|;
name|retMap
operator|.
name|put
argument_list|(
name|scId
argument_list|,
name|amrmToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed reading registry key "
operator|+
name|key
operator|+
literal|", skipping subcluster "
operator|+
name|scId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Override existing map if there
name|this
operator|.
name|appSubClusterTokenMap
operator|.
name|put
argument_list|(
name|appId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
name|retMap
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retMap
return|;
block|}
comment|/**    * Remove an application from registry.    *    * @param appId application id    */
DECL|method|removeAppFromRegistry (ApplicationId appId)
specifier|public
specifier|synchronized
name|void
name|removeAppFromRegistry
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|>
name|subClusterTokenMap
init|=
name|this
operator|.
name|appSubClusterTokenMap
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing all registry entries for {}"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|subClusterTokenMap
operator|==
literal|null
operator|||
name|subClusterTokenMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
comment|// Lastly remove the application directory
name|String
name|key
init|=
name|getRegistryKey
argument_list|(
name|appId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|removeKeyRegistry
argument_list|(
name|this
operator|.
name|registry
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|key
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|subClusterTokenMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed removing registry directory key "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRegistryKey (ApplicationId appId, String fileName)
specifier|private
name|String
name|getRegistryKey
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
if|if
condition|(
name|appId
operator|==
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|registryBaseDir
return|;
block|}
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|registryBaseDir
operator|+
name|appId
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|this
operator|.
name|registryBaseDir
operator|+
name|appId
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|fileName
return|;
block|}
DECL|method|readRegistry (final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final boolean throwIfFails)
specifier|private
name|String
name|readRegistry
parameter_list|(
specifier|final
name|RegistryOperations
name|registryImpl
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|boolean
name|throwIfFails
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Use the ugi loaded with app credentials to access registry
name|String
name|result
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
block|{
try|try
block|{
name|ServiceRecord
name|value
init|=
name|registryImpl
operator|.
name|resolve
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|description
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwIfFails
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Registry resolve key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|throwIfFails
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Registry resolve key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
DECL|method|removeKeyRegistry (final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final boolean recursive, final boolean throwIfFails)
specifier|private
name|void
name|removeKeyRegistry
parameter_list|(
specifier|final
name|RegistryOperations
name|registryImpl
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|,
specifier|final
name|boolean
name|throwIfFails
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// Use the ugi loaded with app credentials to access registry
name|boolean
name|success
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
block|{
try|try
block|{
name|registryImpl
operator|.
name|delete
argument_list|(
name|key
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwIfFails
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Registry remove key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
operator|&&
name|throwIfFails
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Registry remove key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Write registry entry, override if exists.    */
DECL|method|writeRegistry (final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final String value, final boolean throwIfFails)
specifier|private
name|void
name|writeRegistry
parameter_list|(
specifier|final
name|RegistryOperations
name|registryImpl
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|boolean
name|throwIfFails
parameter_list|)
throws|throws
name|YarnException
block|{
specifier|final
name|ServiceRecord
name|recordValue
init|=
operator|new
name|ServiceRecord
argument_list|()
decl_stmt|;
name|recordValue
operator|.
name|description
operator|=
name|value
expr_stmt|;
comment|// Use the ugi loaded with app credentials to access registry
name|boolean
name|success
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|run
parameter_list|()
block|{
try|try
block|{
name|registryImpl
operator|.
name|bind
argument_list|(
name|key
argument_list|,
name|recordValue
argument_list|,
name|BindFlags
operator|.
name|OVERWRITE
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwIfFails
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Registry write key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
operator|&&
name|throwIfFails
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Registry write key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * List the sub directories in the given directory.    */
DECL|method|listDirRegistry (final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final boolean throwIfFails)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|listDirRegistry
parameter_list|(
specifier|final
name|RegistryOperations
name|registryImpl
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|boolean
name|throwIfFails
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|registryImpl
operator|.
name|list
argument_list|(
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|throwIfFails
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Registry list key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|throwIfFails
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Registry list key "
operator|+
name|key
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

