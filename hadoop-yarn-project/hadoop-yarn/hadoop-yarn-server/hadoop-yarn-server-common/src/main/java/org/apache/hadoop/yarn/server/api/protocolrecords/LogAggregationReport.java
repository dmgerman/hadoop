begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api.protocolrecords
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * {@code LogAggregationReport} is a report for log aggregation status  * in one NodeManager of an application.  *<p>  * It includes details such as:  *<ul>  *<li>{@link ApplicationId} of the application.</li>  *<li>{@link LogAggregationStatus}</li>  *<li>Diagnostic information</li>  *</ul>  *  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|LogAggregationReport
specifier|public
specifier|abstract
class|class
name|LogAggregationReport
block|{
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (ApplicationId appId, LogAggregationStatus status, String diagnosticMessage)
specifier|public
specifier|static
name|LogAggregationReport
name|newInstance
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|LogAggregationStatus
name|status
parameter_list|,
name|String
name|diagnosticMessage
parameter_list|)
block|{
name|LogAggregationReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|LogAggregationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setLogAggregationStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDiagnosticMessage
argument_list|(
name|diagnosticMessage
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
comment|/**    * Get the<code>ApplicationId</code> of the application.    * @return<code>ApplicationId</code> of the application    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getApplicationId ()
specifier|public
specifier|abstract
name|ApplicationId
name|getApplicationId
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setApplicationId (ApplicationId appId)
specifier|public
specifier|abstract
name|void
name|setApplicationId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
function_decl|;
comment|/**    * Get the<code>LogAggregationStatus</code>.    * @return<code>LogAggregationStatus</code>    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getLogAggregationStatus ()
specifier|public
specifier|abstract
name|LogAggregationStatus
name|getLogAggregationStatus
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setLogAggregationStatus ( LogAggregationStatus logAggregationStatus)
specifier|public
specifier|abstract
name|void
name|setLogAggregationStatus
parameter_list|(
name|LogAggregationStatus
name|logAggregationStatus
parameter_list|)
function_decl|;
comment|/**    * Get  the<em>diagnositic information</em> of this log aggregation    * @return<em>diagnositic information</em> of this log aggregation    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getDiagnosticMessage ()
specifier|public
specifier|abstract
name|String
name|getDiagnosticMessage
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setDiagnosticMessage (String diagnosticMessage)
specifier|public
specifier|abstract
name|void
name|setDiagnosticMessage
parameter_list|(
name|String
name|diagnosticMessage
parameter_list|)
function_decl|;
block|}
end_class

end_unit

