begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api.protocolrecords.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ContainerProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonServiceProtos
operator|.
name|DistSchedAllocateRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonServiceProtos
operator|.
name|DistSchedAllocateRequestProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|AllocateRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistSchedAllocateRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link DistSchedAllocateRequest} for a distributed  * scheduler to notify about the allocation of containers to the Resource  * Manager.  */
end_comment

begin_class
DECL|class|DistSchedAllocateRequestPBImpl
specifier|public
class|class
name|DistSchedAllocateRequestPBImpl
extends|extends
name|DistSchedAllocateRequest
block|{
DECL|field|builder
specifier|private
name|DistSchedAllocateRequestProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
specifier|private
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|proto
specifier|private
name|DistSchedAllocateRequestProto
name|proto
decl_stmt|;
DECL|field|allocateRequest
specifier|private
name|AllocateRequest
name|allocateRequest
decl_stmt|;
DECL|field|containers
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|containers
decl_stmt|;
DECL|method|DistSchedAllocateRequestPBImpl ()
specifier|public
name|DistSchedAllocateRequestPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|DistSchedAllocateRequestProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|DistSchedAllocateRequestPBImpl (DistSchedAllocateRequestProto proto)
specifier|public
name|DistSchedAllocateRequestPBImpl
parameter_list|(
name|DistSchedAllocateRequestProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|this
operator|.
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllocateRequest ()
specifier|public
name|AllocateRequest
name|getAllocateRequest
parameter_list|()
block|{
name|DistSchedAllocateRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|allocateRequest
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|allocateRequest
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasAllocateRequest
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|allocateRequest
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|allocateRequest
return|;
block|}
annotation|@
name|Override
DECL|method|setAllocateRequest (AllocateRequest pAllocateRequest)
specifier|public
name|void
name|setAllocateRequest
parameter_list|(
name|AllocateRequest
name|pAllocateRequest
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocateRequest
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearAllocateRequest
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|allocateRequest
operator|=
name|pAllocateRequest
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllocatedContainers ()
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|getAllocatedContainers
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|containers
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|containers
return|;
block|}
name|initAllocatedContainers
argument_list|()
expr_stmt|;
return|return
name|containers
return|;
block|}
DECL|method|initAllocatedContainers ()
specifier|private
name|void
name|initAllocatedContainers
parameter_list|()
block|{
name|DistSchedAllocateRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|ContainerProto
argument_list|>
name|list
init|=
name|p
operator|.
name|getAllocatedContainersList
argument_list|()
decl_stmt|;
name|this
operator|.
name|containers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ContainerProto
name|c
range|:
name|list
control|)
block|{
name|this
operator|.
name|containers
operator|.
name|add
argument_list|(
name|convertFromProtoFormat
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setAllocatedContainers (List<Container> pContainers)
specifier|public
name|void
name|setAllocatedContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|pContainers
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|pContainers
operator|==
literal|null
operator|||
name|pContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|containers
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|containers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|clearAllocatedContainers
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|containers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|containers
operator|.
name|addAll
argument_list|(
name|pContainers
argument_list|)
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|DistSchedAllocateRequestProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|DistSchedAllocateRequestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
block|}
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|containers
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|clearAllocatedContainers
argument_list|()
expr_stmt|;
name|Iterable
argument_list|<
name|ContainerProto
argument_list|>
name|iterable
init|=
name|getContainerProtoIterable
argument_list|(
name|this
operator|.
name|containers
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addAllAllocatedContainers
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|allocateRequest
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setAllocateRequest
argument_list|(
operator|(
operator|(
name|AllocateRequestPBImpl
operator|)
name|this
operator|.
name|allocateRequest
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContainerProtoIterable ( final List<Container> newContainersList)
specifier|private
name|Iterable
argument_list|<
name|ContainerProto
argument_list|>
name|getContainerProtoIterable
parameter_list|(
specifier|final
name|List
argument_list|<
name|Container
argument_list|>
name|newContainersList
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|ContainerProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Iterator
argument_list|<
name|ContainerProto
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|ContainerProto
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|Container
argument_list|>
name|iter
init|=
name|newContainersList
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|ContainerProto
name|next
parameter_list|()
block|{
return|return
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
DECL|method|convertFromProtoFormat (ContainerProto p)
specifier|private
name|ContainerPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ContainerProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ContainerPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat (AllocateRequestProto p)
specifier|private
name|AllocateRequestPBImpl
name|convertFromProtoFormat
parameter_list|(
name|AllocateRequestProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|AllocateRequestPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
end_class

end_unit

