begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|annotation
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableGaugeLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|MutableQuantiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|Interns
operator|.
name|info
import|;
end_import

begin_comment
comment|/**  * Metrics for FederationInterceptor Internals.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Metrics
argument_list|(
name|about
operator|=
literal|"Performance and usage metrics for YARN AMRMClientRelayer"
argument_list|,
name|context
operator|=
literal|"fedr"
argument_list|)
DECL|class|AMRMClientRelayerMetrics
specifier|public
specifier|final
class|class
name|AMRMClientRelayerMetrics
implements|implements
name|MetricsSource
block|{
comment|/**    * Easier classification of request types for logging metrics.    */
DECL|enum|RequestType
specifier|public
enum|enum
name|RequestType
block|{
DECL|enumConstant|Guaranteed
DECL|enumConstant|Opportunistic
DECL|enumConstant|Promote
DECL|enumConstant|Demote
name|Guaranteed
block|,
name|Opportunistic
block|,
name|Promote
block|,
name|Demote
block|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|Guaranteed
case|:
return|return
literal|"G"
return|;
case|case
name|Opportunistic
case|:
return|return
literal|"O"
return|;
case|case
name|Promote
case|:
return|return
literal|"P"
return|;
case|case
name|Demote
case|:
return|return
literal|"D"
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
block|}
block|}
DECL|field|isInitialized
specifier|private
specifier|static
name|AtomicBoolean
name|isInitialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|RECORD_INFO
specifier|private
specifier|static
specifier|final
name|MetricsInfo
name|RECORD_INFO
init|=
name|info
argument_list|(
literal|"AMRMClientRelayerMetrics"
argument_list|,
literal|"Metrics for the Yarn AMRMClientRelayer"
argument_list|)
decl_stmt|;
DECL|field|instance
specifier|private
specifier|static
specifier|volatile
name|AMRMClientRelayerMetrics
name|instance
init|=
literal|null
decl_stmt|;
DECL|field|registry
specifier|private
specifier|static
name|MetricsRegistry
name|registry
decl_stmt|;
comment|// The metrics are set up as a map from string (typically sub cluster id) to
comment|// request type (Guaranteed, Opp, Promote, Demote) to the counter.
comment|// The counters are constructed lazily when the first metric entry
comment|// comes in.
comment|// For some metrics, request type is not applicable.
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|RequestType
argument_list|,
name|MutableGaugeLong
argument_list|>
argument_list|>
DECL|field|rmClientPending
name|rmClientPending
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|fulfillLatency
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|RequestType
argument_list|,
name|MutableQuantiles
argument_list|>
argument_list|>
name|fulfillLatency
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|RequestType
argument_list|,
name|MutableGaugeLong
argument_list|>
argument_list|>
DECL|field|requestedQps
name|requestedQps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|RequestType
argument_list|,
name|MutableGaugeLong
argument_list|>
argument_list|>
DECL|field|fulfilledQps
name|fulfilledQps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|rmMasterSlaveSwitch
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableGaugeLong
argument_list|>
name|rmMasterSlaveSwitch
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|heartbeatFailure
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableGaugeLong
argument_list|>
name|heartbeatFailure
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|heartbeatSuccess
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableGaugeLong
argument_list|>
name|heartbeatSuccess
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|heartbeatLatency
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|MutableQuantiles
argument_list|>
name|heartbeatLatency
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Initialize the singleton instance.    *    * @return the singleton    */
DECL|method|getInstance ()
specifier|public
specifier|static
name|AMRMClientRelayerMetrics
name|getInstance
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInitialized
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|AMRMClientRelayerMetrics
operator|.
name|class
init|)
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
name|instance
operator|=
operator|new
name|AMRMClientRelayerMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
operator|.
name|register
argument_list|(
name|RECORD_INFO
operator|.
name|name
argument_list|()
argument_list|,
name|RECORD_INFO
operator|.
name|description
argument_list|()
argument_list|,
name|instance
argument_list|)
expr_stmt|;
name|isInitialized
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|instance
return|;
block|}
DECL|method|AMRMClientRelayerMetrics ()
specifier|private
name|AMRMClientRelayerMetrics
parameter_list|()
block|{
name|registry
operator|=
operator|new
name|MetricsRegistry
argument_list|(
name|RECORD_INFO
argument_list|)
expr_stmt|;
name|registry
operator|.
name|tag
argument_list|(
name|RECORD_INFO
argument_list|,
literal|"AMRMClientRelayer"
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequestType (ExecutionType execType)
specifier|public
specifier|static
name|RequestType
name|getRequestType
parameter_list|(
name|ExecutionType
name|execType
parameter_list|)
block|{
if|if
condition|(
name|execType
operator|==
literal|null
operator|||
name|execType
operator|.
name|equals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
condition|)
block|{
return|return
name|RequestType
operator|.
name|Guaranteed
return|;
block|}
return|return
name|RequestType
operator|.
name|Opportunistic
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPendingMetric (String instanceId, RequestType type)
specifier|protected
name|MutableGaugeLong
name|getPendingMetric
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|rmClientPending
init|)
block|{
if|if
condition|(
operator|!
name|rmClientPending
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|rmClientPending
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|RequestType
argument_list|,
name|MutableGaugeLong
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rmClientPending
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|rmClientPending
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|registry
operator|.
name|newGauge
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|"Pending"
operator|+
name|instanceId
argument_list|,
literal|"Remove pending of "
operator|+
name|type
operator|+
literal|" for "
operator|+
name|instanceId
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rmClientPending
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|incrClientPending (String instanceId, RequestType type, int diff)
specifier|public
name|void
name|incrClientPending
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|,
name|int
name|diff
parameter_list|)
block|{
name|getPendingMetric
argument_list|(
name|instanceId
argument_list|,
name|type
argument_list|)
operator|.
name|incr
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
DECL|method|decrClientPending (String instanceId, RequestType type, int diff)
specifier|public
name|void
name|decrClientPending
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|,
name|int
name|diff
parameter_list|)
block|{
name|getPendingMetric
argument_list|(
name|instanceId
argument_list|,
name|type
argument_list|)
operator|.
name|decr
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setClientPending (String instanceId, RequestType type, int val)
specifier|protected
name|void
name|setClientPending
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|getPendingMetric
argument_list|(
name|instanceId
argument_list|,
name|type
argument_list|)
operator|.
name|set
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFulfillLatencyMetric (String instanceId, RequestType type)
specifier|protected
name|MutableQuantiles
name|getFulfillLatencyMetric
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|fulfillLatency
init|)
block|{
if|if
condition|(
operator|!
name|fulfillLatency
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|fulfillLatency
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|RequestType
argument_list|,
name|MutableQuantiles
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fulfillLatency
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|fulfillLatency
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|registry
operator|.
name|newQuantiles
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|"FulfillLatency"
operator|+
name|instanceId
argument_list|,
literal|"FulfillLatency of "
operator|+
name|type
operator|+
literal|" for "
operator|+
name|instanceId
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fulfillLatency
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|addFulfillLatency (String instanceId, RequestType type, long latency)
specifier|public
name|void
name|addFulfillLatency
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|,
name|long
name|latency
parameter_list|)
block|{
name|getFulfillLatencyMetric
argument_list|(
name|instanceId
argument_list|,
name|type
argument_list|)
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
DECL|method|addFulfillLatency (String instanceId, ContainerUpdateType type, long latency)
specifier|public
name|void
name|addFulfillLatency
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|ContainerUpdateType
name|type
parameter_list|,
name|long
name|latency
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DEMOTE_EXECUTION_TYPE
case|:
name|addFulfillLatency
argument_list|(
name|instanceId
argument_list|,
name|RequestType
operator|.
name|Demote
argument_list|,
name|latency
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROMOTE_EXECUTION_TYPE
case|:
name|addFulfillLatency
argument_list|(
name|instanceId
argument_list|,
name|RequestType
operator|.
name|Promote
argument_list|,
name|latency
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRequestedQPSMetric (String instanceId, RequestType type)
specifier|protected
name|MutableGaugeLong
name|getRequestedQPSMetric
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|requestedQps
init|)
block|{
if|if
condition|(
operator|!
name|requestedQps
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|requestedQps
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|RequestType
argument_list|,
name|MutableGaugeLong
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|requestedQps
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|requestedQps
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|registry
operator|.
name|newGauge
argument_list|(
name|info
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|"RequestedOps"
operator|+
name|instanceId
argument_list|,
literal|"Requested operations of "
operator|+
name|type
operator|+
literal|" for "
operator|+
name|instanceId
argument_list|)
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|requestedQps
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|addRequestedQPS (String instanceId, RequestType type, long numEntries)
specifier|public
name|void
name|addRequestedQPS
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|,
name|long
name|numEntries
parameter_list|)
block|{
name|getRequestedQPSMetric
argument_list|(
name|instanceId
argument_list|,
name|type
argument_list|)
operator|.
name|incr
argument_list|(
name|numEntries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getFulfilledQPSMetric (String instanceId, RequestType type)
specifier|protected
name|MutableGaugeLong
name|getFulfilledQPSMetric
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|fulfilledQps
init|)
block|{
if|if
condition|(
operator|!
name|fulfilledQps
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|fulfilledQps
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|RequestType
argument_list|,
name|MutableGaugeLong
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fulfilledQps
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|fulfilledQps
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|registry
operator|.
name|newGauge
argument_list|(
name|info
argument_list|(
name|type
operator|.
name|toString
argument_list|()
operator|+
literal|"FulfilledOps"
operator|+
name|instanceId
argument_list|,
literal|"Fulfilled operations of "
operator|+
name|type
operator|+
literal|" for "
operator|+
name|instanceId
argument_list|)
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fulfilledQps
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
DECL|method|addFulfilledQPS (String instanceId, RequestType type, long numEntries)
specifier|public
name|void
name|addFulfilledQPS
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|RequestType
name|type
parameter_list|,
name|long
name|numEntries
parameter_list|)
block|{
name|getFulfilledQPSMetric
argument_list|(
name|instanceId
argument_list|,
name|type
argument_list|)
operator|.
name|incr
argument_list|(
name|numEntries
argument_list|)
expr_stmt|;
block|}
DECL|method|addFulfilledQPS (String instanceId, ContainerUpdateType type, long latency)
specifier|public
name|void
name|addFulfilledQPS
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|ContainerUpdateType
name|type
parameter_list|,
name|long
name|latency
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DEMOTE_EXECUTION_TYPE
case|:
name|addFulfilledQPS
argument_list|(
name|instanceId
argument_list|,
name|RequestType
operator|.
name|Demote
argument_list|,
name|latency
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROMOTE_EXECUTION_TYPE
case|:
name|addFulfilledQPS
argument_list|(
name|instanceId
argument_list|,
name|RequestType
operator|.
name|Promote
argument_list|,
name|latency
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|incrClientPending (String scId, ContainerUpdateType type, int diff)
specifier|public
name|void
name|incrClientPending
parameter_list|(
name|String
name|scId
parameter_list|,
name|ContainerUpdateType
name|type
parameter_list|,
name|int
name|diff
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DEMOTE_EXECUTION_TYPE
case|:
name|incrClientPending
argument_list|(
name|scId
argument_list|,
name|RequestType
operator|.
name|Demote
argument_list|,
name|diff
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROMOTE_EXECUTION_TYPE
case|:
name|incrClientPending
argument_list|(
name|scId
argument_list|,
name|RequestType
operator|.
name|Promote
argument_list|,
name|diff
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|decrClientPending (String scId, ContainerUpdateType type, int diff)
specifier|public
name|void
name|decrClientPending
parameter_list|(
name|String
name|scId
parameter_list|,
name|ContainerUpdateType
name|type
parameter_list|,
name|int
name|diff
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DEMOTE_EXECUTION_TYPE
case|:
name|decrClientPending
argument_list|(
name|scId
argument_list|,
name|RequestType
operator|.
name|Demote
argument_list|,
name|diff
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROMOTE_EXECUTION_TYPE
case|:
name|decrClientPending
argument_list|(
name|scId
argument_list|,
name|RequestType
operator|.
name|Promote
argument_list|,
name|diff
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRMMasterSlaveSwitchMetric ( String instanceId)
specifier|protected
name|MutableGaugeLong
name|getRMMasterSlaveSwitchMetric
parameter_list|(
name|String
name|instanceId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|rmMasterSlaveSwitch
init|)
block|{
if|if
condition|(
operator|!
name|rmMasterSlaveSwitch
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|rmMasterSlaveSwitch
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
name|registry
operator|.
name|newGauge
argument_list|(
name|info
argument_list|(
literal|"RMMasterSlaveSwitch"
operator|+
name|instanceId
argument_list|,
literal|"Number of RM master slave switch"
argument_list|)
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rmMasterSlaveSwitch
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
return|;
block|}
DECL|method|incrRMMasterSlaveSwitch (String instanceId)
specifier|public
name|void
name|incrRMMasterSlaveSwitch
parameter_list|(
name|String
name|instanceId
parameter_list|)
block|{
name|getRMMasterSlaveSwitchMetric
argument_list|(
name|instanceId
argument_list|)
operator|.
name|incr
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHeartbeatLatencyMetric (String instanceId)
specifier|protected
name|MutableQuantiles
name|getHeartbeatLatencyMetric
parameter_list|(
name|String
name|instanceId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|heartbeatLatency
init|)
block|{
if|if
condition|(
operator|!
name|heartbeatLatency
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|heartbeatLatency
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
name|registry
operator|.
name|newQuantiles
argument_list|(
literal|"HeartbeatLatency"
operator|+
name|instanceId
argument_list|,
literal|"HeartbeatLatency for "
operator|+
name|instanceId
argument_list|,
literal|"ops"
argument_list|,
literal|"latency"
argument_list|,
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|heartbeatLatency
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHeartbeatFailureMetric ( String instanceId)
specifier|protected
name|MutableGaugeLong
name|getHeartbeatFailureMetric
parameter_list|(
name|String
name|instanceId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|heartbeatFailure
init|)
block|{
if|if
condition|(
operator|!
name|heartbeatFailure
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|heartbeatFailure
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
name|registry
operator|.
name|newGauge
argument_list|(
name|info
argument_list|(
literal|"HeartbeatFailure"
operator|+
name|instanceId
argument_list|,
literal|"Number of Heartbeat Failures"
argument_list|)
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|heartbeatFailure
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
return|;
block|}
DECL|method|addHeartbeatFailure (String instanceId, long latency)
specifier|public
name|void
name|addHeartbeatFailure
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|long
name|latency
parameter_list|)
block|{
name|getHeartbeatFailureMetric
argument_list|(
name|instanceId
argument_list|)
operator|.
name|incr
argument_list|()
expr_stmt|;
name|getHeartbeatLatencyMetric
argument_list|(
name|instanceId
argument_list|)
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHeartbeatSuccessMetric ( String instanceId)
specifier|protected
name|MutableGaugeLong
name|getHeartbeatSuccessMetric
parameter_list|(
name|String
name|instanceId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|heartbeatSuccess
init|)
block|{
if|if
condition|(
operator|!
name|heartbeatSuccess
operator|.
name|containsKey
argument_list|(
name|instanceId
argument_list|)
condition|)
block|{
name|heartbeatSuccess
operator|.
name|put
argument_list|(
name|instanceId
argument_list|,
name|registry
operator|.
name|newGauge
argument_list|(
name|info
argument_list|(
literal|"HeartbeatSuccess"
operator|+
name|instanceId
argument_list|,
literal|"Number of Heartbeat"
argument_list|)
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|heartbeatSuccess
operator|.
name|get
argument_list|(
name|instanceId
argument_list|)
return|;
block|}
DECL|method|addHeartbeatSuccess (String instanceId, long latency)
specifier|public
name|void
name|addHeartbeatSuccess
parameter_list|(
name|String
name|instanceId
parameter_list|,
name|long
name|latency
parameter_list|)
block|{
name|getHeartbeatSuccessMetric
argument_list|(
name|instanceId
argument_list|)
operator|.
name|incr
argument_list|()
expr_stmt|;
name|getHeartbeatLatencyMetric
argument_list|(
name|instanceId
argument_list|)
operator|.
name|add
argument_list|(
name|latency
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetrics (MetricsCollector builder, boolean all)
specifier|public
name|void
name|getMetrics
parameter_list|(
name|MetricsCollector
name|builder
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
name|registry
operator|.
name|snapshot
argument_list|(
name|builder
operator|.
name|addRecord
argument_list|(
name|registry
operator|.
name|info
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

