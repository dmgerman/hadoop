begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|Idempotent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistributedSchedulingAllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistributedSchedulingAllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterDistributedSchedulingAMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  *<p>  * This protocol extends the<code>ApplicationMasterProtocol</code>. It is used  * by the<code>DistributedScheduler</code> running on the NodeManager to wrap  * the request / response objects of the<code>registerApplicationMaster</code>  * and<code>allocate</code> methods of the protocol with additional information  * required to perform distributed scheduling.  *</p>  */
end_comment

begin_interface
DECL|interface|DistributedSchedulingAMProtocol
specifier|public
interface|interface
name|DistributedSchedulingAMProtocol
extends|extends
name|ApplicationMasterProtocol
block|{
comment|/**    *<p>    * Extends the<code>registerApplicationMaster</code> to wrap the response    * with additional metadata.    *</p>    *    * @param request    *          ApplicationMaster registration request    * @return A<code>RegisterDistributedSchedulingAMResponse</code> that    *         contains a standard AM registration response along with additional    *         information required for distributed scheduling    * @throws YarnException YarnException    * @throws IOException IOException    */
annotation|@
name|Public
annotation|@
name|Unstable
annotation|@
name|Idempotent
name|RegisterDistributedSchedulingAMResponse
DECL|method|registerApplicationMasterForDistributedScheduling ( RegisterApplicationMasterRequest request)
name|registerApplicationMasterForDistributedScheduling
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
comment|/**    *<p>    * Extends the<code>allocate</code> to wrap the response with additional    * metadata.    *</p>    *    * @param request    *          ApplicationMaster allocate request    * @return A<code>DistributedSchedulingAllocateResponse</code> that contains    *         a standard AM allocate response along with additional information    *         required for distributed scheduling    * @throws YarnException YarnException    * @throws IOException IOException    */
annotation|@
name|Public
annotation|@
name|Unstable
annotation|@
name|Idempotent
DECL|method|allocateForDistributedScheduling ( DistributedSchedulingAllocateRequest request)
name|DistributedSchedulingAllocateResponse
name|allocateForDistributedScheduling
parameter_list|(
name|DistributedSchedulingAllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
block|}
end_interface

end_unit

