begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.volume.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|InvalidVolumeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * VolumeMetaData defines all valid info for a CSI compatible volume.  */
end_comment

begin_class
DECL|class|VolumeMetaData
specifier|public
class|class
name|VolumeMetaData
block|{
DECL|field|volumeId
specifier|private
name|VolumeId
name|volumeId
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|volumeCapabilityRange
specifier|private
name|VolumeCapabilityRange
name|volumeCapabilityRange
decl_stmt|;
DECL|field|driverName
specifier|private
name|String
name|driverName
decl_stmt|;
DECL|field|mountPoint
specifier|private
name|String
name|mountPoint
decl_stmt|;
DECL|method|setVolumeId (VolumeId volumeId)
specifier|private
name|void
name|setVolumeId
parameter_list|(
name|VolumeId
name|volumeId
parameter_list|)
block|{
name|this
operator|.
name|volumeId
operator|=
name|volumeId
expr_stmt|;
block|}
DECL|method|setVolumeName (String volumeName)
specifier|private
name|void
name|setVolumeName
parameter_list|(
name|String
name|volumeName
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
block|}
DECL|method|setVolumeCapabilityRange (VolumeCapabilityRange capability)
specifier|private
name|void
name|setVolumeCapabilityRange
parameter_list|(
name|VolumeCapabilityRange
name|capability
parameter_list|)
block|{
name|this
operator|.
name|volumeCapabilityRange
operator|=
name|capability
expr_stmt|;
block|}
DECL|method|setDriverName (String driverName)
specifier|private
name|void
name|setDriverName
parameter_list|(
name|String
name|driverName
parameter_list|)
block|{
name|this
operator|.
name|driverName
operator|=
name|driverName
expr_stmt|;
block|}
DECL|method|setMountPoint (String mountPoint)
specifier|private
name|void
name|setMountPoint
parameter_list|(
name|String
name|mountPoint
parameter_list|)
block|{
name|this
operator|.
name|mountPoint
operator|=
name|mountPoint
expr_stmt|;
block|}
DECL|method|isProvisionedVolume ()
specifier|public
name|boolean
name|isProvisionedVolume
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumeId
operator|!=
literal|null
return|;
block|}
DECL|method|getVolumeId ()
specifier|public
name|VolumeId
name|getVolumeId
parameter_list|()
block|{
return|return
name|volumeId
return|;
block|}
DECL|method|getVolumeName ()
specifier|public
name|String
name|getVolumeName
parameter_list|()
block|{
return|return
name|volumeName
return|;
block|}
DECL|method|getVolumeCapabilityRange ()
specifier|public
name|VolumeCapabilityRange
name|getVolumeCapabilityRange
parameter_list|()
block|{
return|return
name|volumeCapabilityRange
return|;
block|}
DECL|method|getDriverName ()
specifier|public
name|String
name|getDriverName
parameter_list|()
block|{
return|return
name|driverName
return|;
block|}
DECL|method|getMountPoint ()
specifier|public
name|String
name|getMountPoint
parameter_list|()
block|{
return|return
name|mountPoint
return|;
block|}
DECL|method|newBuilder ()
specifier|public
specifier|static
name|VolumeSpecBuilder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|VolumeSpecBuilder
argument_list|()
return|;
block|}
DECL|method|fromResource ( ResourceInformation resourceInfo)
specifier|public
specifier|static
name|List
argument_list|<
name|VolumeMetaData
argument_list|>
name|fromResource
parameter_list|(
name|ResourceInformation
name|resourceInfo
parameter_list|)
throws|throws
name|InvalidVolumeException
block|{
name|List
argument_list|<
name|VolumeMetaData
argument_list|>
name|volumeMetaData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resourceInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resourceInfo
operator|.
name|getTags
argument_list|()
operator|!=
literal|null
operator|&&
name|resourceInfo
operator|.
name|getTags
argument_list|()
operator|.
name|contains
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_RESOURCE_TAG
argument_list|)
condition|)
block|{
name|VolumeSpecBuilder
name|builder
init|=
name|VolumeMetaData
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Volume ID
if|if
condition|(
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|)
condition|)
block|{
name|String
name|id
init|=
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|)
decl_stmt|;
name|builder
operator|.
name|volumeId
argument_list|(
operator|new
name|VolumeId
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Volume name
if|if
condition|(
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_NAME
argument_list|)
condition|)
block|{
name|builder
operator|.
name|volumeName
argument_list|(
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// CSI driver name
if|if
condition|(
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|)
condition|)
block|{
name|builder
operator|.
name|driverName
argument_list|(
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Mount path
if|if
condition|(
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|)
condition|)
block|{
name|builder
operator|.
name|mountPoint
argument_list|(
name|resourceInfo
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Volume capability
name|VolumeCapabilityRange
name|volumeCapabilityRange
init|=
name|VolumeCapabilityRange
operator|.
name|newBuilder
argument_list|()
operator|.
name|minCapacity
argument_list|(
name|resourceInfo
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|unit
argument_list|(
name|resourceInfo
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|capability
argument_list|(
name|volumeCapabilityRange
argument_list|)
expr_stmt|;
name|volumeMetaData
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|volumeMetaData
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|JsonObject
name|json
init|=
operator|new
name|JsonObject
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|volumeName
argument_list|)
condition|)
block|{
name|json
operator|.
name|addProperty
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_NAME
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|volumeId
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|addProperty
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|,
name|volumeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|volumeCapabilityRange
operator|!=
literal|null
condition|)
block|{
name|json
operator|.
name|addProperty
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_CAPABILITY
argument_list|,
name|volumeCapabilityRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|driverName
argument_list|)
condition|)
block|{
name|json
operator|.
name|addProperty
argument_list|(
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|,
name|driverName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|mountPoint
argument_list|)
condition|)
block|{
name|json
operator|.
name|addProperty
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|,
name|mountPoint
argument_list|)
expr_stmt|;
block|}
return|return
name|json
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The builder used to build a VolumeMetaData instance.    */
DECL|class|VolumeSpecBuilder
specifier|public
specifier|static
class|class
name|VolumeSpecBuilder
block|{
comment|// @CreateVolumeRequest
comment|// The suggested name for the storage space.
DECL|field|volumeId
specifier|private
name|VolumeId
name|volumeId
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|volumeCapabilityRange
specifier|private
name|VolumeCapabilityRange
name|volumeCapabilityRange
decl_stmt|;
DECL|field|driverName
specifier|private
name|String
name|driverName
decl_stmt|;
DECL|field|mountPoint
specifier|private
name|String
name|mountPoint
decl_stmt|;
DECL|method|volumeId (VolumeId volumeId)
specifier|public
name|VolumeSpecBuilder
name|volumeId
parameter_list|(
name|VolumeId
name|volumeId
parameter_list|)
block|{
name|this
operator|.
name|volumeId
operator|=
name|volumeId
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|volumeName (String name)
specifier|public
name|VolumeSpecBuilder
name|volumeName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|driverName (String driverName)
specifier|public
name|VolumeSpecBuilder
name|driverName
parameter_list|(
name|String
name|driverName
parameter_list|)
block|{
name|this
operator|.
name|driverName
operator|=
name|driverName
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|mountPoint (String mountPoint)
specifier|public
name|VolumeSpecBuilder
name|mountPoint
parameter_list|(
name|String
name|mountPoint
parameter_list|)
block|{
name|this
operator|.
name|mountPoint
operator|=
name|mountPoint
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|capability (VolumeCapabilityRange capability)
specifier|public
name|VolumeSpecBuilder
name|capability
parameter_list|(
name|VolumeCapabilityRange
name|capability
parameter_list|)
block|{
name|this
operator|.
name|volumeCapabilityRange
operator|=
name|capability
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|VolumeMetaData
name|build
parameter_list|()
throws|throws
name|InvalidVolumeException
block|{
name|VolumeMetaData
name|spec
init|=
operator|new
name|VolumeMetaData
argument_list|()
decl_stmt|;
name|spec
operator|.
name|setVolumeId
argument_list|(
name|volumeId
argument_list|)
expr_stmt|;
name|spec
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|spec
operator|.
name|setVolumeCapabilityRange
argument_list|(
name|volumeCapabilityRange
argument_list|)
expr_stmt|;
name|spec
operator|.
name|setDriverName
argument_list|(
name|driverName
argument_list|)
expr_stmt|;
name|spec
operator|.
name|setMountPoint
argument_list|(
name|mountPoint
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|spec
argument_list|)
expr_stmt|;
return|return
name|spec
return|;
block|}
DECL|method|validate (VolumeMetaData spec)
specifier|private
name|void
name|validate
parameter_list|(
name|VolumeMetaData
name|spec
parameter_list|)
throws|throws
name|InvalidVolumeException
block|{
comment|// Volume name OR Volume ID must be set
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|spec
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|&&
name|spec
operator|.
name|getVolumeId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidVolumeException
argument_list|(
literal|"Invalid volume, both volume name"
operator|+
literal|" and ID are missing from the spec. Volume spec: "
operator|+
name|spec
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Volume capability must be set
if|if
condition|(
name|spec
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidVolumeException
argument_list|(
literal|"Invalid volume, volume capability"
operator|+
literal|" is missing. Volume spec: "
operator|+
name|spec
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// CSI driver name must be set
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|spec
operator|.
name|getDriverName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidVolumeException
argument_list|(
literal|"Invalid volume, the csi-driver name"
operator|+
literal|" is missing. Volume spec: "
operator|+
name|spec
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Mount point must be set
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|spec
operator|.
name|getMountPoint
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidVolumeException
argument_list|(
literal|"Invalid volume, the mount point"
operator|+
literal|" is missing. Volume spec: "
operator|+
name|spec
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

