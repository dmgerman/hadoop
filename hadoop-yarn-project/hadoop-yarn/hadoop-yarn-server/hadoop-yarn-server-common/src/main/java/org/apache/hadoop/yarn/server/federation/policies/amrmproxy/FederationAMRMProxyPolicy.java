begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|ConfigurableFederationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_comment
comment|/**  * Implementors of this interface provide logic to split the list of  * {@link ResourceRequest}s received by the AM among various RMs.  */
end_comment

begin_interface
DECL|interface|FederationAMRMProxyPolicy
specifier|public
interface|interface
name|FederationAMRMProxyPolicy
extends|extends
name|ConfigurableFederationPolicy
block|{
comment|/**    * Splits the {@link ResourceRequest}s from the client across one or more    * sub-clusters based on the policy semantics (e.g., broadcast, load-based).    *    * @param resourceRequests the list of {@link ResourceRequest}s from the AM to    *          be split    * @param timedOutSubClusters the set of sub-clusters that haven't had a    *          successful heart-beat response for a while.    * @return map of sub-cluster as identified by {@link SubClusterId} to the    *         list of {@link ResourceRequest}s that should be forwarded to it    * @throws YarnException in case the request is malformed or no viable    *           sub-clusters can be found.    */
DECL|method|splitResourceRequests ( List<ResourceRequest> resourceRequests, Set<SubClusterId> timedOutSubClusters)
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|splitResourceRequests
parameter_list|(
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
parameter_list|,
name|Set
argument_list|<
name|SubClusterId
argument_list|>
name|timedOutSubClusters
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * This method should be invoked to notify the policy about responses being    * received. This is useful for stateful policies that make decisions based on    * previous responses being received.    *    * @param subClusterId the id of the subcluster sending the notification    * @param response the response received from one of the RMs    *    * @throws YarnException in case the response is not valid    */
DECL|method|notifyOfResponse (SubClusterId subClusterId, AllocateResponse response)
name|void
name|notifyOfResponse
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|AllocateResponse
name|response
parameter_list|)
throws|throws
name|YarnException
function_decl|;
block|}
end_interface

end_unit

