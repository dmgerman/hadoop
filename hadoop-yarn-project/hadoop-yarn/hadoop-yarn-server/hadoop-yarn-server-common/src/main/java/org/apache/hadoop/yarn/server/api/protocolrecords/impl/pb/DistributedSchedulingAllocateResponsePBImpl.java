begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api.protocolrecords.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonServiceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonServiceProtos
operator|.
name|RemoteNodeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistributedSchedulingAllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoteNode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link DistributedSchedulingAllocateResponse}.  */
end_comment

begin_class
DECL|class|DistributedSchedulingAllocateResponsePBImpl
specifier|public
class|class
name|DistributedSchedulingAllocateResponsePBImpl
extends|extends
name|DistributedSchedulingAllocateResponse
block|{
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProto
DECL|field|proto
name|proto
init|=
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProto
operator|.
DECL|field|builder
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|allocateResponse
specifier|private
name|AllocateResponse
name|allocateResponse
decl_stmt|;
DECL|field|nodesForScheduling
specifier|private
name|List
argument_list|<
name|RemoteNode
argument_list|>
name|nodesForScheduling
decl_stmt|;
DECL|method|DistributedSchedulingAllocateResponsePBImpl ()
specifier|public
name|DistributedSchedulingAllocateResponsePBImpl
parameter_list|()
block|{
name|builder
operator|=
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|DistributedSchedulingAllocateResponsePBImpl ( YarnServerCommonServiceProtos. DistributedSchedulingAllocateResponseProto proto)
specifier|public
name|DistributedSchedulingAllocateResponsePBImpl
parameter_list|(
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|YarnServerCommonServiceProtos
operator|.
DECL|method|getProto ()
name|DistributedSchedulingAllocateResponseProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|mergeLocalToProto ()
specifier|private
specifier|synchronized
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
specifier|synchronized
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|nodesForScheduling
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|clearNodesForScheduling
argument_list|()
expr_stmt|;
name|Iterable
argument_list|<
name|YarnServerCommonServiceProtos
operator|.
name|RemoteNodeProto
argument_list|>
name|iterable
init|=
name|getNodeIdProtoIterable
argument_list|(
name|this
operator|.
name|nodesForScheduling
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addAllNodesForScheduling
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|allocateResponse
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setAllocateResponse
argument_list|(
operator|(
operator|(
name|AllocateResponsePBImpl
operator|)
name|this
operator|.
name|allocateResponse
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setAllocateResponse (AllocateResponse response)
specifier|public
name|void
name|setAllocateResponse
parameter_list|(
name|AllocateResponse
name|response
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocateResponse
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearAllocateResponse
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|allocateResponse
operator|=
name|response
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllocateResponse ()
specifier|public
name|AllocateResponse
name|getAllocateResponse
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|allocateResponse
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|allocateResponse
return|;
block|}
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasAllocateResponse
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|allocateResponse
operator|=
operator|new
name|AllocateResponsePBImpl
argument_list|(
name|p
operator|.
name|getAllocateResponse
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|allocateResponse
return|;
block|}
annotation|@
name|Override
DECL|method|setNodesForScheduling (List<RemoteNode> nodesForScheduling)
specifier|public
name|void
name|setNodesForScheduling
parameter_list|(
name|List
argument_list|<
name|RemoteNode
argument_list|>
name|nodesForScheduling
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodesForScheduling
operator|==
literal|null
operator|||
name|nodesForScheduling
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|nodesForScheduling
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nodesForScheduling
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|clearNodesForScheduling
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|nodesForScheduling
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodesForScheduling
operator|.
name|addAll
argument_list|(
name|nodesForScheduling
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodesForScheduling ()
specifier|public
name|List
argument_list|<
name|RemoteNode
argument_list|>
name|getNodesForScheduling
parameter_list|()
block|{
if|if
condition|(
name|nodesForScheduling
operator|!=
literal|null
condition|)
block|{
return|return
name|nodesForScheduling
return|;
block|}
name|initLocalNodesForSchedulingList
argument_list|()
expr_stmt|;
return|return
name|nodesForScheduling
return|;
block|}
DECL|method|initLocalNodesForSchedulingList ()
specifier|private
specifier|synchronized
name|void
name|initLocalNodesForSchedulingList
parameter_list|()
block|{
name|YarnServerCommonServiceProtos
operator|.
name|DistributedSchedulingAllocateResponseProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|YarnServerCommonServiceProtos
operator|.
name|RemoteNodeProto
argument_list|>
name|list
init|=
name|p
operator|.
name|getNodesForSchedulingList
argument_list|()
decl_stmt|;
name|nodesForScheduling
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|YarnServerCommonServiceProtos
operator|.
name|RemoteNodeProto
name|t
range|:
name|list
control|)
block|{
name|nodesForScheduling
operator|.
name|add
argument_list|(
operator|new
name|RemoteNodePBImpl
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getNodeIdProtoIterable ( final List<RemoteNode> nodeList)
specifier|private
specifier|synchronized
name|Iterable
argument_list|<
name|RemoteNodeProto
argument_list|>
name|getNodeIdProtoIterable
parameter_list|(
specifier|final
name|List
argument_list|<
name|RemoteNode
argument_list|>
name|nodeList
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|RemoteNodeProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Iterator
argument_list|<
name|RemoteNodeProto
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|RemoteNodeProto
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|RemoteNode
argument_list|>
name|iter
init|=
name|nodeList
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RemoteNodeProto
name|next
parameter_list|()
block|{
return|return
operator|(
operator|(
name|RemoteNodePBImpl
operator|)
name|iter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

