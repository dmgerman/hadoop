begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api.protocolrecords
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * NMContainerStatus includes the current information of a container. This  * record is used by YARN only, whereas {@link ContainerStatus} is used both  * inside YARN and by end-users.  */
end_comment

begin_class
DECL|class|NMContainerStatus
specifier|public
specifier|abstract
class|class
name|NMContainerStatus
block|{
DECL|method|newInstance (ContainerId containerId, ContainerState containerState, Resource allocatedResource, String diagnostics, int containerExitStatus)
specifier|public
specifier|static
name|NMContainerStatus
name|newInstance
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerState
name|containerState
parameter_list|,
name|Resource
name|allocatedResource
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|int
name|containerExitStatus
parameter_list|)
block|{
name|NMContainerStatus
name|status
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NMContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerState
argument_list|(
name|containerState
argument_list|)
expr_stmt|;
name|status
operator|.
name|setAllocatedResource
argument_list|(
name|allocatedResource
argument_list|)
expr_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerExitStatus
argument_list|(
name|containerExitStatus
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
comment|/**    * Get the<code>ContainerId</code> of the container.    *     * @return<code>ContainerId</code> of the container.    */
DECL|method|getContainerId ()
specifier|public
specifier|abstract
name|ContainerId
name|getContainerId
parameter_list|()
function_decl|;
DECL|method|setContainerId (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
function_decl|;
comment|/**    * Get the allocated<code>Resource</code> of the container.    *     * @return allocated<code>Resource</code> of the container.    */
DECL|method|getAllocatedResource ()
specifier|public
specifier|abstract
name|Resource
name|getAllocatedResource
parameter_list|()
function_decl|;
DECL|method|setAllocatedResource (Resource resource)
specifier|public
specifier|abstract
name|void
name|setAllocatedResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
function_decl|;
comment|/**    * Get the DiagnosticsInfo of the container.    *     * @return DiagnosticsInfo of the container    */
DECL|method|getDiagnostics ()
specifier|public
specifier|abstract
name|String
name|getDiagnostics
parameter_list|()
function_decl|;
DECL|method|setDiagnostics (String diagnostics)
specifier|public
specifier|abstract
name|void
name|setDiagnostics
parameter_list|(
name|String
name|diagnostics
parameter_list|)
function_decl|;
DECL|method|getContainerState ()
specifier|public
specifier|abstract
name|ContainerState
name|getContainerState
parameter_list|()
function_decl|;
DECL|method|setContainerState (ContainerState containerState)
specifier|public
specifier|abstract
name|void
name|setContainerState
parameter_list|(
name|ContainerState
name|containerState
parameter_list|)
function_decl|;
comment|/**    * Get the final<code>exit status</code> of the container.    *     * @return final<code>exit status</code> of the container.    */
DECL|method|getContainerExitStatus ()
specifier|public
specifier|abstract
name|int
name|getContainerExitStatus
parameter_list|()
function_decl|;
DECL|method|setContainerExitStatus (int containerExitStatus)
specifier|public
specifier|abstract
name|void
name|setContainerExitStatus
parameter_list|(
name|int
name|containerExitStatus
parameter_list|)
function_decl|;
comment|/**    * Get the<code>Priority</code> of the request.    * @return<code>Priority</code> of the request    */
DECL|method|getPriority ()
specifier|public
specifier|abstract
name|Priority
name|getPriority
parameter_list|()
function_decl|;
DECL|method|setPriority (Priority priority)
specifier|public
specifier|abstract
name|void
name|setPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
function_decl|;
block|}
end_class

end_unit

