begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|amrmproxy
operator|.
name|FederationAMRMProxyPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|manager
operator|.
name|FederationPolicyManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationStateStoreFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class for Federation policy.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|FederationPolicyUtils
specifier|public
specifier|final
class|class
name|FederationPolicyUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationPolicyUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NO_ACTIVE_SUBCLUSTER_AVAILABLE
specifier|public
specifier|static
specifier|final
name|String
name|NO_ACTIVE_SUBCLUSTER_AVAILABLE
init|=
literal|"No active SubCluster available to submit the request."
decl_stmt|;
comment|/** Disable constructor. */
DECL|method|FederationPolicyUtils ()
specifier|private
name|FederationPolicyUtils
parameter_list|()
block|{   }
comment|/**    * A utilize method to instantiate a policy manager class given the type    * (class name) from {@link SubClusterPolicyConfiguration}.    *    * @param newType class name of the policy manager to create    * @return Policy manager    * @throws FederationPolicyInitializationException if fails    */
DECL|method|instantiatePolicyManager (String newType)
specifier|public
specifier|static
name|FederationPolicyManager
name|instantiatePolicyManager
parameter_list|(
name|String
name|newType
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
name|FederationPolicyManager
name|federationPolicyManager
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create policy instance and set queue
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|newType
argument_list|)
decl_stmt|;
name|federationPolicyManager
operator|=
operator|(
name|FederationPolicyManager
operator|)
name|c
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|federationPolicyManager
return|;
block|}
comment|/**    * Get Federation policy configuration from state store, using default queue    * and configuration as fallback.    *    * @param queue the queue of the application    * @param conf the YARN configuration    * @param federationFacade state store facade    * @return SubClusterPolicyConfiguration recreated    */
DECL|method|loadPolicyConfiguration ( String queue, Configuration conf, FederationStateStoreFacade federationFacade)
specifier|public
specifier|static
name|SubClusterPolicyConfiguration
name|loadPolicyConfiguration
parameter_list|(
name|String
name|queue
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FederationStateStoreFacade
name|federationFacade
parameter_list|)
block|{
comment|// The facade might cache this request, based on its parameterization
name|SubClusterPolicyConfiguration
name|configuration
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|configuration
operator|=
name|federationFacade
operator|.
name|getPolicyConfiguration
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get policy from FederationFacade with queue "
operator|+
name|queue
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If there is no policy configured for this queue, fallback to the baseline
comment|// policy that is configured either in the store or via XML config
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No policy configured for queue {} in StateStore,"
operator|+
literal|" fallback to default queue"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|queue
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_POLICY_KEY
expr_stmt|;
try|try
block|{
name|configuration
operator|=
name|federationFacade
operator|.
name|getPolicyConfiguration
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No fallback behavior defined in store, defaulting to XML "
operator|+
literal|"configuration fallback behavior."
argument_list|)
expr_stmt|;
block|}
block|}
comment|// or from XML conf otherwise.
if|if
condition|(
name|configuration
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No policy configured for default queue {} in StateStore,"
operator|+
literal|" fallback to local config"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|String
name|defaultFederationPolicyManager
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_POLICY_MANAGER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_POLICY_MANAGER
argument_list|)
decl_stmt|;
name|String
name|defaultPolicyParamString
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_POLICY_MANAGER_PARAMS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_POLICY_MANAGER_PARAMS
argument_list|)
decl_stmt|;
name|ByteBuffer
name|defaultPolicyParam
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|defaultPolicyParamString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|configuration
operator|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|,
name|defaultFederationPolicyManager
argument_list|,
name|defaultPolicyParam
argument_list|)
expr_stmt|;
block|}
return|return
name|configuration
return|;
block|}
comment|/**    * Get AMRMProxy policy from state store, using default queue and    * configuration as fallback.    *    * @param queue the queue of the application    * @param oldPolicy the previous policy instance (can be null)    * @param conf the YARN configuration    * @param federationFacade state store facade    * @param homeSubClusterId home sub-cluster id    * @return FederationAMRMProxyPolicy recreated    * @throws FederationPolicyInitializationException if fails    */
DECL|method|loadAMRMPolicy (String queue, FederationAMRMProxyPolicy oldPolicy, Configuration conf, FederationStateStoreFacade federationFacade, SubClusterId homeSubClusterId)
specifier|public
specifier|static
name|FederationAMRMProxyPolicy
name|loadAMRMPolicy
parameter_list|(
name|String
name|queue
parameter_list|,
name|FederationAMRMProxyPolicy
name|oldPolicy
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FederationStateStoreFacade
name|federationFacade
parameter_list|,
name|SubClusterId
name|homeSubClusterId
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
comment|// Local policy and its configuration
name|SubClusterPolicyConfiguration
name|configuration
init|=
name|loadPolicyConfiguration
argument_list|(
name|queue
argument_list|,
name|conf
argument_list|,
name|federationFacade
argument_list|)
decl_stmt|;
comment|// Instantiate the policyManager and get policy
name|FederationPolicyInitializationContext
name|context
init|=
operator|new
name|FederationPolicyInitializationContext
argument_list|(
name|configuration
argument_list|,
name|federationFacade
operator|.
name|getSubClusterResolver
argument_list|()
argument_list|,
name|federationFacade
argument_list|,
name|homeSubClusterId
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating policy manager of type: "
operator|+
name|configuration
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|FederationPolicyManager
name|federationPolicyManager
init|=
name|instantiatePolicyManager
argument_list|(
name|configuration
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|// set queue, reinit policy if required (implementation lazily check
comment|// content of conf), and cache it
name|federationPolicyManager
operator|.
name|setQueue
argument_list|(
name|configuration
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|federationPolicyManager
operator|.
name|getAMRMPolicy
argument_list|(
name|context
argument_list|,
name|oldPolicy
argument_list|)
return|;
block|}
comment|/**    * Validate if there is any active subcluster that is not blacklisted, it will    * throw an exception if there are no usable subclusters.    *    * @param activeSubClusters the list of subClusters as identified by    *          {@link SubClusterId} currently active.    * @param blackListSubClusters the list of subClusters as identified by    *          {@link SubClusterId} to blackList from the selection of the home    *          subCluster.    * @throws FederationPolicyException if there are no usable subclusters.    */
DECL|method|validateSubClusterAvailability ( List<SubClusterId> activeSubClusters, List<SubClusterId> blackListSubClusters)
specifier|public
specifier|static
name|void
name|validateSubClusterAvailability
parameter_list|(
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|activeSubClusters
parameter_list|,
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|blackListSubClusters
parameter_list|)
throws|throws
name|FederationPolicyException
block|{
if|if
condition|(
name|activeSubClusters
operator|!=
literal|null
operator|&&
operator|!
name|activeSubClusters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|blackListSubClusters
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|SubClusterId
name|scId
range|:
name|activeSubClusters
control|)
block|{
if|if
condition|(
operator|!
name|blackListSubClusters
operator|.
name|contains
argument_list|(
name|scId
argument_list|)
condition|)
block|{
comment|// There is at least one active subcluster
return|return;
block|}
block|}
block|}
throw|throw
operator|new
name|FederationPolicyException
argument_list|(
name|FederationPolicyUtils
operator|.
name|NO_ACTIVE_SUBCLUSTER_AVAILABLE
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

