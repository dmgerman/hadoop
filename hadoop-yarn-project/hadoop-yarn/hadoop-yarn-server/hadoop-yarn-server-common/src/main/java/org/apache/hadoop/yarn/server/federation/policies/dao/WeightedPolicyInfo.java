begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterIdInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONJAXBContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONMarshaller
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONUnmarshaller
import|;
end_import

begin_comment
comment|/**  * This is a DAO class for the configuration of parameteres for federation  * policies. This generalizes several possible configurations as two lists of  * {@link SubClusterIdInfo} and corresponding weights as a {@link Float}. The  * interpretation of the weight is left to the logic in the policy.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"federation-policy"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|WeightedPolicyInfo
specifier|public
class|class
name|WeightedPolicyInfo
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|WeightedPolicyInfo
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|jsonjaxbContext
specifier|private
specifier|static
name|JSONJAXBContext
name|jsonjaxbContext
init|=
name|initContext
argument_list|()
decl_stmt|;
DECL|field|routerPolicyWeights
specifier|private
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|routerPolicyWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|amrmPolicyWeights
specifier|private
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|amrmPolicyWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|headroomAlpha
specifier|private
name|float
name|headroomAlpha
decl_stmt|;
DECL|method|WeightedPolicyInfo ()
specifier|public
name|WeightedPolicyInfo
parameter_list|()
block|{
comment|// JAXB needs this
block|}
DECL|method|initContext ()
specifier|private
specifier|static
name|JSONJAXBContext
name|initContext
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|JSONJAXBContext
argument_list|(
name|JSONConfiguration
operator|.
name|DEFAULT
argument_list|,
name|WeightedPolicyInfo
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error parsing the policy."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Deserializes a {@link WeightedPolicyInfo} from a byte UTF-8 JSON    * representation.    *    * @param bb the input byte representation.    *    * @return the {@link WeightedPolicyInfo} represented.    *    * @throws FederationPolicyInitializationException if a deserializaiton error    *           occurs.    */
DECL|method|fromByteBuffer (ByteBuffer bb)
specifier|public
specifier|static
name|WeightedPolicyInfo
name|fromByteBuffer
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
if|if
condition|(
name|jsonjaxbContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
literal|"JSONJAXBContext should"
operator|+
literal|" not be null."
argument_list|)
throw|;
block|}
try|try
block|{
name|JSONUnmarshaller
name|unmarshaller
init|=
name|jsonjaxbContext
operator|.
name|createJSONUnmarshaller
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|bb
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|bb
operator|.
name|get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|String
name|params
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|WeightedPolicyInfo
name|weightedPolicyInfo
init|=
name|unmarshaller
operator|.
name|unmarshalFromJSON
argument_list|(
operator|new
name|StringReader
argument_list|(
name|params
argument_list|)
argument_list|,
name|WeightedPolicyInfo
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|weightedPolicyInfo
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|j
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|j
argument_list|)
throw|;
block|}
block|}
comment|/**    * Getter of the router weights.    *    * @return the router weights.    */
DECL|method|getRouterPolicyWeights ()
specifier|public
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|getRouterPolicyWeights
parameter_list|()
block|{
return|return
name|routerPolicyWeights
return|;
block|}
comment|/**    * Setter method for Router weights.    *    * @param policyWeights the router weights.    */
DECL|method|setRouterPolicyWeights ( Map<SubClusterIdInfo, Float> policyWeights)
specifier|public
name|void
name|setRouterPolicyWeights
parameter_list|(
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|policyWeights
parameter_list|)
block|{
name|this
operator|.
name|routerPolicyWeights
operator|=
name|policyWeights
expr_stmt|;
block|}
comment|/**    * Getter for AMRMProxy weights.    *    * @return the AMRMProxy weights.    */
DECL|method|getAMRMPolicyWeights ()
specifier|public
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|getAMRMPolicyWeights
parameter_list|()
block|{
return|return
name|amrmPolicyWeights
return|;
block|}
comment|/**    * Setter method for ARMRMProxy weights.    *    * @param policyWeights the amrmproxy weights.    */
DECL|method|setAMRMPolicyWeights (Map<SubClusterIdInfo, Float> policyWeights)
specifier|public
name|void
name|setAMRMPolicyWeights
parameter_list|(
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|policyWeights
parameter_list|)
block|{
name|this
operator|.
name|amrmPolicyWeights
operator|=
name|policyWeights
expr_stmt|;
block|}
comment|/**    * Converts the policy into a byte array representation in the input    * {@link ByteBuffer}.    *    * @return byte array representation of this policy configuration.    *    * @throws FederationPolicyInitializationException if a serialization error    *           occurs.    */
DECL|method|toByteBuffer ()
specifier|public
name|ByteBuffer
name|toByteBuffer
parameter_list|()
throws|throws
name|FederationPolicyInitializationException
block|{
if|if
condition|(
name|jsonjaxbContext
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
literal|"JSONJAXBContext should"
operator|+
literal|" not be null."
argument_list|)
throw|;
block|}
try|try
block|{
name|String
name|s
init|=
name|toJSONString
argument_list|()
decl_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|j
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|j
argument_list|)
throw|;
block|}
block|}
DECL|method|toJSONString ()
specifier|private
name|String
name|toJSONString
parameter_list|()
throws|throws
name|JAXBException
block|{
name|JSONMarshaller
name|marshaller
init|=
name|jsonjaxbContext
operator|.
name|createJSONMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|marshaller
operator|.
name|marshallToJSON
argument_list|(
name|this
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WeightedPolicyInfo
name|otherPolicy
init|=
operator|(
name|WeightedPolicyInfo
operator|)
name|other
decl_stmt|;
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|otherAMRMWeights
init|=
name|otherPolicy
operator|.
name|getAMRMPolicyWeights
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|otherRouterWeights
init|=
name|otherPolicy
operator|.
name|getRouterPolicyWeights
argument_list|()
decl_stmt|;
name|boolean
name|amrmWeightsMatch
init|=
name|otherAMRMWeights
operator|!=
literal|null
operator|&&
name|getAMRMPolicyWeights
argument_list|()
operator|!=
literal|null
operator|&&
name|CollectionUtils
operator|.
name|isEqualCollection
argument_list|(
name|otherAMRMWeights
operator|.
name|entrySet
argument_list|()
argument_list|,
name|getAMRMPolicyWeights
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|routerWeightsMatch
init|=
name|otherRouterWeights
operator|!=
literal|null
operator|&&
name|getRouterPolicyWeights
argument_list|()
operator|!=
literal|null
operator|&&
name|CollectionUtils
operator|.
name|isEqualCollection
argument_list|(
name|otherRouterWeights
operator|.
name|entrySet
argument_list|()
argument_list|,
name|getRouterPolicyWeights
argument_list|()
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|amrmWeightsMatch
operator|&&
name|routerWeightsMatch
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|amrmPolicyWeights
operator|.
name|hashCode
argument_list|()
operator|+
name|routerPolicyWeights
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**    * Return the parameter headroomAlpha, used by policies that balance    * weight-based and load-based considerations in their decisions.    *    * For policies that use this parameter, values close to 1 indicate that most    * of the decision should be based on currently observed headroom from various    * sub-clusters, values close to zero, indicate that the decision should be    * mostly based on weights and practically ignore current load.    *    * @return the value of headroomAlpha.    */
DECL|method|getHeadroomAlpha ()
specifier|public
name|float
name|getHeadroomAlpha
parameter_list|()
block|{
return|return
name|headroomAlpha
return|;
block|}
comment|/**    * Set the parameter headroomAlpha, used by policies that balance weight-based    * and load-based considerations in their decisions.    *    * For policies that use this parameter, values close to 1 indicate that most    * of the decision should be based on currently observed headroom from various    * sub-clusters, values close to zero, indicate that the decision should be    * mostly based on weights and practically ignore current load.    *    * @param headroomAlpha the value to use for balancing.    */
DECL|method|setHeadroomAlpha (float headroomAlpha)
specifier|public
name|void
name|setHeadroomAlpha
parameter_list|(
name|float
name|headroomAlpha
parameter_list|)
block|{
name|this
operator|.
name|headroomAlpha
operator|=
name|headroomAlpha
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|toJSONString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|"Error serializing to string."
return|;
block|}
block|}
block|}
end_class

end_unit

