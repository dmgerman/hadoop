begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|NMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_class
DECL|class|BaseNMTokenSecretManager
specifier|public
class|class
name|BaseNMTokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|NMTokenIdentifier
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseNMTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|serialNo
specifier|private
name|int
name|serialNo
init|=
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
DECL|field|readWriteLock
specifier|protected
specifier|final
name|ReadWriteLock
name|readWriteLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|protected
specifier|final
name|Lock
name|readLock
init|=
name|readWriteLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|protected
specifier|final
name|Lock
name|writeLock
init|=
name|readWriteLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
DECL|field|currentMasterKey
specifier|protected
name|MasterKeyData
name|currentMasterKey
decl_stmt|;
DECL|method|createNewMasterKey ()
specifier|protected
name|MasterKeyData
name|createNewMasterKey
parameter_list|()
block|{
name|this
operator|.
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|MasterKeyData
argument_list|(
name|serialNo
operator|++
argument_list|,
name|generateSecret
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|getCurrentKey ()
specifier|public
name|MasterKey
name|getCurrentKey
parameter_list|()
block|{
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createPassword (NMTokenIdentifier identifier)
specifier|protected
name|byte
index|[]
name|createPassword
parameter_list|(
name|NMTokenIdentifier
name|identifier
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating password for "
operator|+
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" for user "
operator|+
name|identifier
operator|.
name|getApplicationSubmitter
argument_list|()
operator|+
literal|" to run on NM "
operator|+
name|identifier
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|currentMasterKey
operator|.
name|getSecretKey
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|retrievePassword (NMTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|NMTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|retrivePasswordInternal
argument_list|(
name|identifier
argument_list|,
name|currentMasterKey
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|retrivePasswordInternal (NMTokenIdentifier identifier, MasterKeyData masterKey)
specifier|protected
name|byte
index|[]
name|retrivePasswordInternal
parameter_list|(
name|NMTokenIdentifier
name|identifier
parameter_list|,
name|MasterKeyData
name|masterKey
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating password for "
operator|+
name|identifier
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" for user "
operator|+
name|identifier
operator|.
name|getApplicationSubmitter
argument_list|()
operator|+
literal|" to run on NM "
operator|+
name|identifier
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|masterKey
operator|.
name|getSecretKey
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * It is required for RPC    */
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|NMTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|NMTokenIdentifier
argument_list|()
return|;
block|}
comment|/**    * Helper function for creating NMTokens.    */
DECL|method|createNMToken (ApplicationAttemptId applicationAttemptId, NodeId nodeId, String applicationSubmitter)
specifier|public
name|Token
name|createNMToken
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|applicationSubmitter
parameter_list|)
block|{
name|byte
index|[]
name|password
decl_stmt|;
name|NMTokenIdentifier
name|identifier
decl_stmt|;
name|this
operator|.
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|identifier
operator|=
operator|new
name|NMTokenIdentifier
argument_list|(
name|applicationAttemptId
argument_list|,
name|nodeId
argument_list|,
name|applicationSubmitter
argument_list|,
name|this
operator|.
name|currentMasterKey
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|password
operator|=
name|this
operator|.
name|createPassword
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|newNMToken
argument_list|(
name|password
argument_list|,
name|identifier
argument_list|)
return|;
block|}
DECL|method|newNMToken (byte[] password, NMTokenIdentifier identifier)
specifier|public
specifier|static
name|Token
name|newNMToken
parameter_list|(
name|byte
index|[]
name|password
parameter_list|,
name|NMTokenIdentifier
name|identifier
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|identifier
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// RPC layer client expects ip:port as service for tokens
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|Token
name|nmToken
init|=
name|Token
operator|.
name|newInstance
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|NMTokenIdentifier
operator|.
name|KIND
operator|.
name|toString
argument_list|()
argument_list|,
name|password
argument_list|,
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|addr
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|nmToken
return|;
block|}
block|}
end_class

end_unit

