begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|federation
operator|.
name|proto
operator|.
name|YarnServerFederationProtos
operator|.
name|SubClusterIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|federation
operator|.
name|proto
operator|.
name|YarnServerFederationProtos
operator|.
name|SubClusterInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|federation
operator|.
name|proto
operator|.
name|YarnServerFederationProtos
operator|.
name|SubClusterInfoProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|federation
operator|.
name|proto
operator|.
name|YarnServerFederationProtos
operator|.
name|SubClusterStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_comment
comment|/**  * Protocol buffer based implementation of {@link SubClusterInfo}.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SubClusterInfoPBImpl
specifier|public
class|class
name|SubClusterInfoPBImpl
extends|extends
name|SubClusterInfo
block|{
DECL|field|proto
specifier|private
name|SubClusterInfoProto
name|proto
init|=
name|SubClusterInfoProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
specifier|private
name|SubClusterInfoProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
specifier|private
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|subClusterId
specifier|private
name|SubClusterId
name|subClusterId
init|=
literal|null
decl_stmt|;
DECL|method|SubClusterInfoPBImpl ()
specifier|public
name|SubClusterInfoPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|SubClusterInfoProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|SubClusterInfoPBImpl (SubClusterInfoProto proto)
specifier|public
name|SubClusterInfoPBImpl
parameter_list|(
name|SubClusterInfoProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|SubClusterInfoProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
block|}
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|SubClusterInfoProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|subClusterId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSubClusterId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|getProto
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSubClusterId ()
specifier|public
name|SubClusterId
name|getSubClusterId
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|subClusterId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|subClusterId
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasSubClusterId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|subClusterId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|subClusterId
return|;
block|}
annotation|@
name|Override
DECL|method|setSubClusterId (SubClusterId subClusterId)
specifier|public
name|void
name|setSubClusterId
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|subClusterId
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearSubClusterId
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|subClusterId
operator|=
name|subClusterId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAMRMServiceAddress ()
specifier|public
name|String
name|getAMRMServiceAddress
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|hasAMRMServiceAddress
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getAMRMServiceAddress
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setAMRMServiceAddress (String amRMServiceAddress)
specifier|public
name|void
name|setAMRMServiceAddress
parameter_list|(
name|String
name|amRMServiceAddress
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|amRMServiceAddress
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearAMRMServiceAddress
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setAMRMServiceAddress
argument_list|(
name|amRMServiceAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getClientRMServiceAddress ()
specifier|public
name|String
name|getClientRMServiceAddress
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|hasClientRMServiceAddress
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getClientRMServiceAddress
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setClientRMServiceAddress (String clientRMServiceAddress)
specifier|public
name|void
name|setClientRMServiceAddress
parameter_list|(
name|String
name|clientRMServiceAddress
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|clientRMServiceAddress
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearClientRMServiceAddress
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setClientRMServiceAddress
argument_list|(
name|clientRMServiceAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRMAdminServiceAddress ()
specifier|public
name|String
name|getRMAdminServiceAddress
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|hasRMAdminServiceAddress
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getRMAdminServiceAddress
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setRMAdminServiceAddress (String rmAdminServiceAddress)
specifier|public
name|void
name|setRMAdminServiceAddress
parameter_list|(
name|String
name|rmAdminServiceAddress
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmAdminServiceAddress
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearRMAdminServiceAddress
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setRMAdminServiceAddress
argument_list|(
name|rmAdminServiceAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRMWebServiceAddress ()
specifier|public
name|String
name|getRMWebServiceAddress
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|hasRMWebServiceAddress
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getRMWebServiceAddress
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setRMWebServiceAddress (String rmWebServiceAddress)
specifier|public
name|void
name|setRMWebServiceAddress
parameter_list|(
name|String
name|rmWebServiceAddress
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmWebServiceAddress
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearRMWebServiceAddress
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setRMWebServiceAddress
argument_list|(
name|rmWebServiceAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastHeartBeat ()
specifier|public
name|long
name|getLastHeartBeat
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getLastHeartBeat
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setLastHeartBeat (long time)
specifier|public
name|void
name|setLastHeartBeat
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setLastHeartBeat
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getState ()
specifier|public
name|SubClusterState
name|getState
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasState
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getState
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setState (SubClusterState state)
specifier|public
name|void
name|setState
parameter_list|(
name|SubClusterState
name|state
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearState
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setState
argument_list|(
name|convertToProtoFormat
argument_list|(
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLastStartTime ()
specifier|public
name|long
name|getLastStartTime
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|hasLastStartTime
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getLastStartTime
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|setLastStartTime (long lastStartTime)
specifier|public
name|void
name|setLastStartTime
parameter_list|(
name|long
name|lastStartTime
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLastStartTime
argument_list|(
name|lastStartTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCapability ()
specifier|public
name|String
name|getCapability
parameter_list|()
block|{
name|SubClusterInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|hasCapability
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getCapability
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setCapability (String capability)
specifier|public
name|void
name|setCapability
parameter_list|(
name|String
name|capability
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|capability
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearCapability
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat (SubClusterIdProto clusterId)
specifier|private
name|SubClusterId
name|convertFromProtoFormat
parameter_list|(
name|SubClusterIdProto
name|clusterId
parameter_list|)
block|{
return|return
operator|new
name|SubClusterIdPBImpl
argument_list|(
name|clusterId
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (SubClusterId clusterId)
specifier|private
name|SubClusterIdProto
name|convertToProtoFormat
parameter_list|(
name|SubClusterId
name|clusterId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|SubClusterIdPBImpl
operator|)
name|clusterId
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (SubClusterStateProto state)
specifier|private
name|SubClusterState
name|convertFromProtoFormat
parameter_list|(
name|SubClusterStateProto
name|state
parameter_list|)
block|{
return|return
name|SubClusterState
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (SubClusterState state)
specifier|private
name|SubClusterStateProto
name|convertToProtoFormat
parameter_list|(
name|SubClusterState
name|state
parameter_list|)
block|{
return|return
name|SubClusterStateProto
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

