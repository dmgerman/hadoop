begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|CONTAINER_ID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|InfoBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|ContainerBlock
specifier|public
class|class
name|ContainerBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ContainerBlock
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appContext
specifier|private
specifier|final
name|ApplicationContext
name|appContext
decl_stmt|;
annotation|@
name|Inject
DECL|method|ContainerBlock (ApplicationContext appContext, ViewContext ctx)
specifier|public
name|ContainerBlock
parameter_list|(
name|ApplicationContext
name|appContext
parameter_list|,
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|appContext
operator|=
name|appContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|containerid
init|=
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|puts
argument_list|(
literal|"Bad request: requires container ID"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|containerId
operator|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|puts
argument_list|(
literal|"Invalid container ID: "
operator|+
name|containerid
argument_list|)
expr_stmt|;
return|return;
block|}
name|ContainerReport
name|containerReport
decl_stmt|;
try|try
block|{
name|containerReport
operator|=
name|appContext
operator|.
name|getContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the container "
operator|+
name|containerid
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|containerReport
operator|==
literal|null
condition|)
block|{
name|puts
argument_list|(
literal|"Container not found: "
operator|+
name|containerid
argument_list|)
expr_stmt|;
return|return;
block|}
name|ContainerInfo
name|container
init|=
operator|new
name|ContainerInfo
argument_list|(
name|containerReport
argument_list|)
decl_stmt|;
name|setTitle
argument_list|(
name|join
argument_list|(
literal|"Container "
argument_list|,
name|containerid
argument_list|)
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Container Overview"
argument_list|)
operator|.
name|_
argument_list|(
literal|"State:"
argument_list|,
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Exit Status:"
argument_list|,
name|container
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Node:"
argument_list|,
name|container
operator|.
name|getAssignedNodeId
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Priority:"
argument_list|,
name|container
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Started:"
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|container
operator|.
name|getStartedTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Elapsed:"
argument_list|,
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|Times
operator|.
name|elapsed
argument_list|(
name|container
operator|.
name|getStartedTime
argument_list|()
argument_list|,
name|container
operator|.
name|getFinishedTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Resource:"
argument_list|,
name|container
operator|.
name|getAllocatedMB
argument_list|()
operator|+
literal|" Memory, "
operator|+
name|container
operator|.
name|getAllocatedVCores
argument_list|()
operator|+
literal|" VCores"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Logs:"
argument_list|,
name|container
operator|.
name|getLogUrl
argument_list|()
operator|==
literal|null
condition|?
literal|"#"
else|:
name|container
operator|.
name|getLogUrl
argument_list|()
argument_list|,
name|container
operator|.
name|getLogUrl
argument_list|()
operator|==
literal|null
condition|?
literal|"N/A"
else|:
literal|"Logs"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Diagnostics:"
argument_list|,
name|container
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|html
operator|.
name|_
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

