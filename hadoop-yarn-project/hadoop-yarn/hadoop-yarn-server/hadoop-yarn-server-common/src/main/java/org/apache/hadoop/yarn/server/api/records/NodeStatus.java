begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * {@code NodeStatus} is a summary of the status of the node.  *<p>  * It includes information such as:  *<ul>  *<li>Node information and status..</li>  *<li>Container status.</li>  *</ul>  */
end_comment

begin_class
DECL|class|NodeStatus
specifier|public
specifier|abstract
class|class
name|NodeStatus
block|{
comment|/**    * Create a new {@code NodeStatus}.    * @param nodeId Identifier for this node.    * @param responseId Identifier for the response.    * @param containerStatuses Status of the containers running in this node.    * @param keepAliveApplications Applications to keep alive.    * @param nodeHealthStatus Health status of the node.    * @param containersUtilization Utilization of the containers in this node.    * @param nodeUtilization Utilization of the node.    * @param increasedContainers Containers whose resource has been increased.    * @return New {@code NodeStatus} with the provided information.    */
DECL|method|newInstance (NodeId nodeId, int responseId, List<ContainerStatus> containerStatuses, List<ApplicationId> keepAliveApplications, NodeHealthStatus nodeHealthStatus, ResourceUtilization containersUtilization, ResourceUtilization nodeUtilization, List<Container> increasedContainers)
specifier|public
specifier|static
name|NodeStatus
name|newInstance
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|int
name|responseId
parameter_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
parameter_list|,
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|keepAliveApplications
parameter_list|,
name|NodeHealthStatus
name|nodeHealthStatus
parameter_list|,
name|ResourceUtilization
name|containersUtilization
parameter_list|,
name|ResourceUtilization
name|nodeUtilization
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|increasedContainers
parameter_list|)
block|{
name|NodeStatus
name|nodeStatus
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|nodeStatus
operator|.
name|setResponseId
argument_list|(
name|responseId
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setContainersStatuses
argument_list|(
name|containerStatuses
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setKeepAliveApplications
argument_list|(
name|keepAliveApplications
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setNodeHealthStatus
argument_list|(
name|nodeHealthStatus
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setContainersUtilization
argument_list|(
name|containersUtilization
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setNodeUtilization
argument_list|(
name|nodeUtilization
argument_list|)
expr_stmt|;
name|nodeStatus
operator|.
name|setIncreasedContainers
argument_list|(
name|increasedContainers
argument_list|)
expr_stmt|;
return|return
name|nodeStatus
return|;
block|}
DECL|method|getNodeId ()
specifier|public
specifier|abstract
name|NodeId
name|getNodeId
parameter_list|()
function_decl|;
DECL|method|getResponseId ()
specifier|public
specifier|abstract
name|int
name|getResponseId
parameter_list|()
function_decl|;
DECL|method|getContainersStatuses ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|getContainersStatuses
parameter_list|()
function_decl|;
DECL|method|setContainersStatuses ( List<ContainerStatus> containersStatuses)
specifier|public
specifier|abstract
name|void
name|setContainersStatuses
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containersStatuses
parameter_list|)
function_decl|;
DECL|method|getKeepAliveApplications ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|getKeepAliveApplications
parameter_list|()
function_decl|;
DECL|method|setKeepAliveApplications (List<ApplicationId> appIds)
specifier|public
specifier|abstract
name|void
name|setKeepAliveApplications
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
parameter_list|)
function_decl|;
DECL|method|getNodeHealthStatus ()
specifier|public
specifier|abstract
name|NodeHealthStatus
name|getNodeHealthStatus
parameter_list|()
function_decl|;
DECL|method|setNodeHealthStatus (NodeHealthStatus healthStatus)
specifier|public
specifier|abstract
name|void
name|setNodeHealthStatus
parameter_list|(
name|NodeHealthStatus
name|healthStatus
parameter_list|)
function_decl|;
DECL|method|setNodeId (NodeId nodeId)
specifier|public
specifier|abstract
name|void
name|setNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
function_decl|;
DECL|method|setResponseId (int responseId)
specifier|public
specifier|abstract
name|void
name|setResponseId
parameter_list|(
name|int
name|responseId
parameter_list|)
function_decl|;
comment|/**    * Get the<em>resource utilization</em> of the containers.    * @return<em>resource utilization</em> of the containers    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getContainersUtilization ()
specifier|public
specifier|abstract
name|ResourceUtilization
name|getContainersUtilization
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setContainersUtilization ( ResourceUtilization containersUtilization)
specifier|public
specifier|abstract
name|void
name|setContainersUtilization
parameter_list|(
name|ResourceUtilization
name|containersUtilization
parameter_list|)
function_decl|;
comment|/**    * Get the<em>resource utilization</em> of the node.    * @return<em>resource utilization</em> of the node    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getNodeUtilization ()
specifier|public
specifier|abstract
name|ResourceUtilization
name|getNodeUtilization
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setNodeUtilization ( ResourceUtilization nodeUtilization)
specifier|public
specifier|abstract
name|void
name|setNodeUtilization
parameter_list|(
name|ResourceUtilization
name|nodeUtilization
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getIncreasedContainers ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|Container
argument_list|>
name|getIncreasedContainers
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setIncreasedContainers ( List<Container> increasedContainers)
specifier|public
specifier|abstract
name|void
name|setIncreasedContainers
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|increasedContainers
parameter_list|)
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|getQueuedContainersStatus ()
specifier|public
specifier|abstract
name|QueuedContainersStatus
name|getQueuedContainersStatus
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setQueuedContainersStatus ( QueuedContainersStatus queuedContainersStatus)
specifier|public
specifier|abstract
name|void
name|setQueuedContainersStatus
parameter_list|(
name|QueuedContainersStatus
name|queuedContainersStatus
parameter_list|)
function_decl|;
block|}
end_class

end_unit

