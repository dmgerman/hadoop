begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.uam
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|uam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|AMRMClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|AMRMClientRelayer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|YarnServerSecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * UnmanagedApplicationManager is used to register unmanaged application and  * negotiate for resources from resource managers. An unmanagedAM is an AM that  * is not launched and managed by the RM. Allocate calls are handled  * asynchronously using {@link AsyncCallback}.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|UnmanagedApplicationManager
specifier|public
class|class
name|UnmanagedApplicationManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UnmanagedApplicationManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|AM_STATE_WAIT_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|long
name|AM_STATE_WAIT_TIMEOUT_MS
init|=
literal|10000
decl_stmt|;
DECL|field|APP_NAME
specifier|public
specifier|static
specifier|final
name|String
name|APP_NAME
init|=
literal|"UnmanagedAM"
decl_stmt|;
DECL|field|DEFAULT_QUEUE_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE_CONFIG
init|=
literal|"uam.default.queue.name"
decl_stmt|;
DECL|field|requestQueue
specifier|private
name|BlockingQueue
argument_list|<
name|AsyncAllocateRequestInfo
argument_list|>
name|requestQueue
decl_stmt|;
DECL|field|handlerThread
specifier|private
name|AMRequestHandlerThread
name|handlerThread
decl_stmt|;
DECL|field|rmProxyRelayer
specifier|private
name|AMRMClientRelayer
name|rmProxyRelayer
decl_stmt|;
DECL|field|applicationId
specifier|private
name|ApplicationId
name|applicationId
decl_stmt|;
DECL|field|submitter
specifier|private
name|String
name|submitter
decl_stmt|;
DECL|field|appNameSuffix
specifier|private
name|String
name|appNameSuffix
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|queueName
specifier|private
name|String
name|queueName
decl_stmt|;
DECL|field|userUgi
specifier|private
name|UserGroupInformation
name|userUgi
decl_stmt|;
DECL|field|registerRequest
specifier|private
name|RegisterApplicationMasterRequest
name|registerRequest
decl_stmt|;
DECL|field|lastResponseId
specifier|private
name|int
name|lastResponseId
decl_stmt|;
DECL|field|rmClient
specifier|private
name|ApplicationClientProtocol
name|rmClient
decl_stmt|;
DECL|field|asyncApiPollIntervalMillis
specifier|private
name|long
name|asyncApiPollIntervalMillis
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
decl_stmt|;
DECL|field|keepContainersAcrossApplicationAttempts
specifier|private
name|boolean
name|keepContainersAcrossApplicationAttempts
decl_stmt|;
comment|/*    * This flag is used as an indication that this method launchUAM/reAttachUAM    * is called (and perhaps blocked in initializeUnmanagedAM below due to RM    * connection/failover issue and not finished yet). Set the flag before    * calling the blocking call to RM.    */
DECL|field|connectionInitiated
specifier|private
name|boolean
name|connectionInitiated
decl_stmt|;
comment|/**    * Constructor.    *    * @param conf configuration    * @param appId application Id to use for this UAM    * @param queueName the queue of the UAM    * @param submitter user name of the app    * @param appNameSuffix the app name suffix to use    * @param keepContainersAcrossApplicationAttempts keep container flag for UAM    *          recovery. See {@link ApplicationSubmissionContext    *          #setKeepContainersAcrossApplicationAttempts(boolean)}    */
DECL|method|UnmanagedApplicationManager (Configuration conf, ApplicationId appId, String queueName, String submitter, String appNameSuffix, boolean keepContainersAcrossApplicationAttempts)
specifier|public
name|UnmanagedApplicationManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|submitter
parameter_list|,
name|String
name|appNameSuffix
parameter_list|,
name|boolean
name|keepContainersAcrossApplicationAttempts
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|conf
argument_list|,
literal|"Configuration cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|appId
argument_list|,
literal|"ApplicationId cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|submitter
argument_list|,
literal|"App submitter cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|appId
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|submitter
operator|=
name|submitter
expr_stmt|;
name|this
operator|.
name|appNameSuffix
operator|=
name|appNameSuffix
expr_stmt|;
name|this
operator|.
name|handlerThread
operator|=
operator|new
name|AMRequestHandlerThread
argument_list|()
expr_stmt|;
name|this
operator|.
name|requestQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|rmProxyRelayer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|connectionInitiated
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|registerRequest
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|recordFactory
operator|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|asyncApiPollIntervalMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
argument_list|)
expr_stmt|;
name|this
operator|.
name|keepContainersAcrossApplicationAttempts
operator|=
name|keepContainersAcrossApplicationAttempts
expr_stmt|;
block|}
comment|/**    * Launch a new UAM in the resource manager.    *    * @return identifier uam identifier    * @throws YarnException if fails    * @throws IOException if fails    */
DECL|method|launchUAM ()
specifier|public
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|launchUAM
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|this
operator|.
name|connectionInitiated
operator|=
literal|true
expr_stmt|;
comment|// Blocking call to RM
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|initializeUnmanagedAM
argument_list|(
name|this
operator|.
name|applicationId
argument_list|)
decl_stmt|;
comment|// Creates the UAM connection
name|createUAMProxy
argument_list|(
name|amrmToken
argument_list|)
expr_stmt|;
return|return
name|amrmToken
return|;
block|}
comment|/**    * Re-attach to an existing UAM in the resource manager.    *    * @param amrmToken the UAM token    * @throws IOException if re-attach fails    * @throws YarnException if re-attach fails    */
DECL|method|reAttachUAM (Token<AMRMTokenIdentifier> amrmToken)
specifier|public
name|void
name|reAttachUAM
parameter_list|(
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|this
operator|.
name|connectionInitiated
operator|=
literal|true
expr_stmt|;
comment|// Creates the UAM connection
name|createUAMProxy
argument_list|(
name|amrmToken
argument_list|)
expr_stmt|;
block|}
DECL|method|createUAMProxy (Token<AMRMTokenIdentifier> amrmToken)
specifier|protected
name|void
name|createUAMProxy
parameter_list|(
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|userUgi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|this
operator|.
name|applicationId
operator|.
name|toString
argument_list|()
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmProxyRelayer
operator|=
operator|new
name|AMRMClientRelayer
argument_list|(
name|createRMProxy
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|userUgi
argument_list|,
name|amrmToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Registers this {@link UnmanagedApplicationManager} with the resource    * manager.    *    * @param request RegisterApplicationMasterRequest    * @return register response    * @throws YarnException if register fails    * @throws IOException if register fails    */
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Save the register request for re-register later
name|this
operator|.
name|registerRequest
operator|=
name|request
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Registering the Unmanaged application master {}"
argument_list|,
name|this
operator|.
name|applicationId
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|response
init|=
name|this
operator|.
name|rmProxyRelayer
operator|.
name|registerApplicationMaster
argument_list|(
name|this
operator|.
name|registerRequest
argument_list|)
decl_stmt|;
name|this
operator|.
name|lastResponseId
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|response
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RegisterUAM returned existing running container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NMToken
name|nmToken
range|:
name|response
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"RegisterUAM returned existing NM token for node "
operator|+
name|nmToken
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Only when register succeed that we start the heartbeat thread
name|this
operator|.
name|handlerThread
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|HeartBeatThreadUncaughtExceptionHandler
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|handlerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|handlerThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastResponseId
operator|=
literal|0
expr_stmt|;
return|return
name|response
return|;
block|}
comment|/**    * Unregisters from the resource manager and stops the request handler thread.    *    * @param request the finishApplicationMaster request    * @return the response    * @throws YarnException if finishAM call fails    * @throws IOException if finishAM call fails    */
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|this
operator|.
name|handlerThread
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rmProxyRelayer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|connectionInitiated
condition|)
block|{
comment|// This is possible if the async launchUAM is still
comment|// blocked and retrying. Return a dummy response in this case.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unmanaged AM still not successfully launched/registered yet."
operator|+
literal|" Stopping the UAM heartbeat thread anyways."
argument_list|)
expr_stmt|;
return|return
name|FinishApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"finishApplicationMaster should not "
operator|+
literal|"be called before createAndRegister"
argument_list|)
throw|;
block|}
block|}
return|return
name|this
operator|.
name|rmProxyRelayer
operator|.
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Force kill the UAM.    *    * @return kill response    * @throws IOException if fails to create rmProxy    * @throws YarnException if force kill fails    */
DECL|method|forceKillApplication ()
specifier|public
name|KillApplicationResponse
name|forceKillApplication
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|KillApplicationRequest
name|request
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|applicationId
argument_list|)
decl_stmt|;
name|this
operator|.
name|handlerThread
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rmClient
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rmClient
operator|=
name|createRMProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|this
operator|.
name|submitter
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|rmClient
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
return|;
block|}
comment|/**    * Sends the specified heart beat request to the resource manager and invokes    * the callback asynchronously with the response.    *    * @param request the allocate request    * @param callback the callback method for the request    * @throws YarnException if registerAM is not called yet    */
DECL|method|allocateAsync (AllocateRequest request, AsyncCallback<AllocateResponse> callback)
specifier|public
name|void
name|allocateAsync
parameter_list|(
name|AllocateRequest
name|request
parameter_list|,
name|AsyncCallback
argument_list|<
name|AllocateResponse
argument_list|>
name|callback
parameter_list|)
throws|throws
name|YarnException
block|{
try|try
block|{
name|this
operator|.
name|requestQueue
operator|.
name|put
argument_list|(
operator|new
name|AsyncAllocateRequestInfo
argument_list|(
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// Should not happen as we have MAX_INT queue length
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while waiting to put on response queue"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// Two possible cases why the UAM is not successfully registered yet:
comment|// 1. launchUAM is not called at all. Should throw here.
comment|// 2. launchUAM is called but hasn't successfully returned.
comment|//
comment|// In case 2, we have already save the allocate request above, so if the
comment|// registration succeed later, no request is lost.
if|if
condition|(
name|this
operator|.
name|rmProxyRelayer
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|connectionInitiated
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unmanaged AM still not successfully launched/registered yet."
operator|+
literal|" Saving the allocate request and send later."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"AllocateAsync should not be called before launchUAM"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Returns the application id of the UAM.    *    * @return application id of the UAM    */
DECL|method|getAppId ()
specifier|public
name|ApplicationId
name|getAppId
parameter_list|()
block|{
return|return
name|this
operator|.
name|applicationId
return|;
block|}
comment|/**    * Returns the rmProxy relayer of this UAM.    *    * @return rmProxy relayer of the UAM    */
DECL|method|getAMRMClientRelayer ()
specifier|public
name|AMRMClientRelayer
name|getAMRMClientRelayer
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmProxyRelayer
return|;
block|}
comment|/**    * Returns RM proxy for the specified protocol type. Unit test cases can    * override this method and return mock proxy instances.    *    * @param protocol protocal of the proxy    * @param config configuration    * @param user ugi for the proxy connection    * @param token token for the connection    * @param<T> type of the proxy    * @return the proxy instance    * @throws IOException if fails to create the proxy    */
DECL|method|createRMProxy (Class<T> protocol, Configuration config, UserGroupInformation user, Token<AMRMTokenIdentifier> token)
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|T
name|createRMProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|Configuration
name|config
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|AMRMClientUtils
operator|.
name|createRMProxy
argument_list|(
name|config
argument_list|,
name|protocol
argument_list|,
name|user
argument_list|,
name|token
argument_list|)
return|;
block|}
comment|/**    * Launch and initialize an unmanaged AM. First, it creates a new application    * on the RM and negotiates a new attempt id. Then it waits for the RM    * application attempt state to reach YarnApplicationAttemptState.LAUNCHED    * after which it returns the AM-RM token.    *    * @param appId application id    * @return the UAM token    * @throws IOException if initialize fails    * @throws YarnException if initialize fails    */
DECL|method|initializeUnmanagedAM ( ApplicationId appId)
specifier|protected
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|initializeUnmanagedAM
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
try|try
block|{
name|UserGroupInformation
name|appSubmitter
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|this
operator|.
name|submitter
argument_list|)
decl_stmt|;
name|this
operator|.
name|rmClient
operator|=
name|createRMProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|appSubmitter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Submit the application
name|submitUnmanagedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// Monitor the application attempt to wait for launch state
name|monitorCurrentAppAttempt
argument_list|(
name|appId
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
return|return
name|getUAMToken
argument_list|()
return|;
block|}
finally|finally
block|{
name|this
operator|.
name|rmClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|submitUnmanagedApp (ApplicationId appId)
specifier|private
name|void
name|submitUnmanagedApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|SubmitApplicationRequest
name|submitRequest
init|=
name|this
operator|.
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
name|this
operator|.
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationName
argument_list|(
name|APP_NAME
operator|+
literal|"-"
operator|+
name|appNameSuffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|this
operator|.
name|queueName
argument_list|)
condition|)
block|{
name|context
operator|.
name|setQueue
argument_list|(
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|DEFAULT_QUEUE_CONFIG
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|setQueue
argument_list|(
name|this
operator|.
name|queueName
argument_list|)
expr_stmt|;
block|}
name|ContainerLaunchContext
name|amContainer
init|=
name|this
operator|.
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|context
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|submitRequest
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|setUnmanagedAM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
name|this
operator|.
name|keepContainersAcrossApplicationAttempts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitting unmanaged application {}"
argument_list|,
name|appId
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmClient
operator|.
name|submitApplication
argument_list|(
name|submitRequest
argument_list|)
expr_stmt|;
block|}
comment|/**    * Monitor the submitted application and attempt until it reaches certain    * states.    *    * @param appId Application Id of application to be monitored    * @param appStates acceptable application state    * @param attemptState acceptable application attempt state    * @return the application report    * @throws YarnException if getApplicationReport fails    * @throws IOException if getApplicationReport fails    */
DECL|method|monitorCurrentAppAttempt (ApplicationId appId, Set<YarnApplicationState> appStates, YarnApplicationAttemptState attemptState)
specifier|private
name|ApplicationAttemptReport
name|monitorCurrentAppAttempt
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Set
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
parameter_list|,
name|YarnApplicationAttemptState
name|attemptState
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|appAttemptId
operator|==
literal|null
condition|)
block|{
comment|// Get application report for the appId we are interested in
name|ApplicationReport
name|report
init|=
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|YarnApplicationState
name|state
init|=
name|report
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
if|if
condition|(
name|appStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|!=
name|YarnApplicationState
operator|.
name|ACCEPTED
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Received non-accepted application state: "
operator|+
name|state
operator|+
literal|" for "
operator|+
name|appId
operator|+
literal|". This is likely because this is not the first "
operator|+
literal|"app attempt in home sub-cluster, and AMRMProxy HA "
operator|+
literal|"(yarn.nodemanager.amrmproxy.ha.enable) is not enabled."
argument_list|)
throw|;
block|}
name|appAttemptId
operator|=
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current application state of {} is {}, will retry later."
argument_list|,
name|appId
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|appAttemptId
operator|!=
literal|null
condition|)
block|{
name|GetApplicationAttemptReportRequest
name|req
init|=
name|this
operator|.
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationAttemptReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|req
operator|.
name|setApplicationAttemptId
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|ApplicationAttemptReport
name|attemptReport
init|=
name|this
operator|.
name|rmClient
operator|.
name|getApplicationAttemptReport
argument_list|(
name|req
argument_list|)
operator|.
name|getApplicationAttemptReport
argument_list|()
decl_stmt|;
if|if
condition|(
name|attemptState
operator|.
name|equals
argument_list|(
name|attemptReport
operator|.
name|getYarnApplicationAttemptState
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|attemptReport
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Current attempt state of "
operator|+
name|appAttemptId
operator|+
literal|" is "
operator|+
name|attemptReport
operator|.
name|getYarnApplicationAttemptState
argument_list|()
operator|+
literal|", waiting for current attempt to reach "
operator|+
name|attemptState
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|this
operator|.
name|asyncApiPollIntervalMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for current attempt of "
operator|+
name|appId
operator|+
literal|" to reach "
operator|+
name|attemptState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
name|AM_STATE_WAIT_TIMEOUT_MS
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timeout for waiting current attempt of "
operator|+
name|appId
operator|+
literal|" to reach "
operator|+
name|attemptState
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Gets the amrmToken of the unmanaged AM.    *    * @return the amrmToken of the unmanaged AM.    * @throws IOException if getApplicationReport fails    * @throws YarnException if getApplicationReport fails    */
DECL|method|getUAMToken ()
specifier|protected
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|getUAMToken
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|amrmToken
init|=
name|getApplicationReport
argument_list|(
name|this
operator|.
name|applicationId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|amrmToken
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|amrmToken
argument_list|,
operator|(
name|Text
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"AMRMToken not found in the application report for application: {}"
argument_list|,
name|this
operator|.
name|applicationId
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
DECL|method|getApplicationReport (ApplicationId appId)
specifier|private
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetApplicationReportRequest
name|request
init|=
name|this
operator|.
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
comment|/**    * Data structure that encapsulates AllocateRequest and AsyncCallback    * instance.    */
DECL|class|AsyncAllocateRequestInfo
specifier|public
specifier|static
class|class
name|AsyncAllocateRequestInfo
block|{
DECL|field|request
specifier|private
name|AllocateRequest
name|request
decl_stmt|;
DECL|field|callback
specifier|private
name|AsyncCallback
argument_list|<
name|AllocateResponse
argument_list|>
name|callback
decl_stmt|;
DECL|method|AsyncAllocateRequestInfo (AllocateRequest request, AsyncCallback<AllocateResponse> callback)
specifier|public
name|AsyncAllocateRequestInfo
parameter_list|(
name|AllocateRequest
name|request
parameter_list|,
name|AsyncCallback
argument_list|<
name|AllocateResponse
argument_list|>
name|callback
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|request
operator|!=
literal|null
argument_list|,
literal|"AllocateRequest cannot be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|callback
operator|!=
literal|null
argument_list|,
literal|"Callback cannot be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callback
expr_stmt|;
block|}
DECL|method|getCallback ()
specifier|public
name|AsyncCallback
argument_list|<
name|AllocateResponse
argument_list|>
name|getCallback
parameter_list|()
block|{
return|return
name|this
operator|.
name|callback
return|;
block|}
DECL|method|getRequest ()
specifier|public
name|AllocateRequest
name|getRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|request
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getRequestQueueSize ()
specifier|public
name|int
name|getRequestQueueSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|requestQueue
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Extends Thread and provides an implementation that is used for processing    * the AM heart beat request asynchronously and sending back the response    * using the callback method registered with the system.    */
DECL|class|AMRequestHandlerThread
specifier|public
class|class
name|AMRequestHandlerThread
extends|extends
name|Thread
block|{
comment|// Indication flag for the thread to keep running
DECL|field|keepRunning
specifier|private
specifier|volatile
name|boolean
name|keepRunning
decl_stmt|;
DECL|method|AMRequestHandlerThread ()
specifier|public
name|AMRequestHandlerThread
parameter_list|()
block|{
name|super
argument_list|(
literal|"UnmanagedApplicationManager Heartbeat Handler Thread"
argument_list|)
expr_stmt|;
name|this
operator|.
name|keepRunning
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Shutdown the thread.      */
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|keepRunning
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|keepRunning
condition|)
block|{
name|AsyncAllocateRequestInfo
name|requestInfo
decl_stmt|;
try|try
block|{
name|requestInfo
operator|=
name|requestQueue
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
name|requestInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Null requestInfo taken from request queue"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|keepRunning
condition|)
block|{
break|break;
block|}
comment|// change the response id before forwarding the allocate request as we
comment|// could have different values for each UAM
name|AllocateRequest
name|request
init|=
name|requestInfo
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Null allocateRequest from requestInfo"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending Heartbeat to Unmanaged AM. AskList:"
operator|+
operator|(
operator|(
name|request
operator|.
name|getAskList
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|" empty"
else|:
name|request
operator|.
name|getAskList
argument_list|()
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setResponseId
argument_list|(
name|lastResponseId
argument_list|)
expr_stmt|;
name|AllocateResponse
name|response
init|=
name|rmProxyRelayer
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Null allocateResponse from allocate"
argument_list|)
throw|;
block|}
name|lastResponseId
operator|=
name|response
operator|.
name|getResponseId
argument_list|()
expr_stmt|;
comment|// update token if RM has reissued/renewed
if|if
condition|(
name|response
operator|.
name|getAMRMToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received new AMRMToken"
argument_list|)
expr_stmt|;
name|YarnServerSecurityUtils
operator|.
name|updateAMRMToken
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|,
name|userUgi
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received Heartbeat reply from RM. Allocated Containers:"
operator|+
operator|(
operator|(
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|" empty"
else|:
name|response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestInfo
operator|.
name|getCallback
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Null callback from requestInfo"
argument_list|)
throw|;
block|}
name|requestInfo
operator|.
name|getCallback
argument_list|()
operator|.
name|callback
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while waiting for queue"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"IO Error occurred while processing heart beat for "
operator|+
name|applicationId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while processing heart beat for "
operator|+
name|applicationId
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"UnmanagedApplicationManager has been stopped for {}. "
operator|+
literal|"AMRequestHandlerThread thread is exiting"
argument_list|,
name|applicationId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Uncaught exception handler for the background heartbeat thread.    */
DECL|class|HeartBeatThreadUncaughtExceptionHandler
specifier|protected
class|class
name|HeartBeatThreadUncaughtExceptionHandler
implements|implements
name|UncaughtExceptionHandler
block|{
annotation|@
name|Override
DECL|method|uncaughtException (Thread t, Throwable e)
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Heartbeat thread {} for application {} crashed!"
argument_list|,
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|applicationId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

