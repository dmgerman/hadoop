begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_comment
comment|/**  * A set of resource requests of the same scheduler key  * {@link ResourceRequestSetKey}.  */
end_comment

begin_class
DECL|class|ResourceRequestSet
specifier|public
class|class
name|ResourceRequestSet
block|{
DECL|field|key
specifier|private
name|ResourceRequestSetKey
name|key
decl_stmt|;
DECL|field|numContainers
specifier|private
name|int
name|numContainers
decl_stmt|;
comment|// ResourceName -> RR
DECL|field|asks
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|asks
decl_stmt|;
comment|/**    * Create a empty set with given key.    *    * @param key the key of the request set    * @throws YarnException if fails    */
DECL|method|ResourceRequestSet (ResourceRequestSetKey key)
specifier|public
name|ResourceRequestSet
parameter_list|(
name|ResourceRequestSetKey
name|key
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
comment|// leave it zero for now, as if it is a cancel
name|this
operator|.
name|numContainers
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|asks
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a shallow copy of the request set.    *    * @param other the set of copy from    */
DECL|method|ResourceRequestSet (ResourceRequestSet other)
specifier|public
name|ResourceRequestSet
parameter_list|(
name|ResourceRequestSet
name|other
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|other
operator|.
name|key
expr_stmt|;
name|this
operator|.
name|numContainers
operator|=
name|other
operator|.
name|numContainers
expr_stmt|;
name|this
operator|.
name|asks
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// The assumption is that the RR objects should not be modified without
comment|// making a copy
name|this
operator|.
name|asks
operator|.
name|putAll
argument_list|(
name|other
operator|.
name|asks
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a {@link ResourceRequest} into the requestSet. If there's already an RR    * with the same resource name, override it and update accordingly.    *    * @param ask the new {@link ResourceRequest}    * @throws YarnException    */
DECL|method|addAndOverrideRR (ResourceRequest ask)
specifier|public
name|void
name|addAndOverrideRR
parameter_list|(
name|ResourceRequest
name|ask
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|key
operator|.
name|equals
argument_list|(
operator|new
name|ResourceRequestSetKey
argument_list|(
name|ask
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"None compatible asks: \n"
operator|+
name|ask
operator|+
literal|"\n"
operator|+
name|this
operator|.
name|key
argument_list|)
throw|;
block|}
comment|// Override directly if exists
name|this
operator|.
name|asks
operator|.
name|put
argument_list|(
name|ask
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|ask
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|getExeType
argument_list|()
operator|.
name|equals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
condition|)
block|{
comment|// For G requestSet, update the numContainers only for ANY RR
if|if
condition|(
name|ask
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
name|this
operator|.
name|numContainers
operator|=
name|ask
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The assumption we made about O asks is that all RR in a requestSet has
comment|// the same numContainers value. So we just take the value of the last RR
name|this
operator|.
name|numContainers
operator|=
name|ask
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|numContainers
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"numContainers becomes "
operator|+
name|this
operator|.
name|numContainers
operator|+
literal|" when adding ask "
operator|+
name|ask
operator|+
literal|"\n requestSet: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Merge a requestSet into this one.    *    * @param requestSet the requestSet to merge    * @throws YarnException    */
DECL|method|addAndOverrideRRSet (ResourceRequestSet requestSet)
specifier|public
name|void
name|addAndOverrideRRSet
parameter_list|(
name|ResourceRequestSet
name|requestSet
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|requestSet
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|requestSet
operator|.
name|getRRs
argument_list|()
control|)
block|{
name|addAndOverrideRR
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Remove all non-Any ResourceRequests from the set. This is necessary cleanup    * to avoid requestSet getting too big.    */
DECL|method|cleanupZeroNonAnyRR ()
specifier|public
name|void
name|cleanupZeroNonAnyRR
parameter_list|()
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
argument_list|>
name|iter
init|=
name|this
operator|.
name|asks
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
comment|// Do not delete ANY RR
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAsks ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|getAsks
parameter_list|()
block|{
return|return
name|this
operator|.
name|asks
return|;
block|}
DECL|method|getRRs ()
specifier|public
name|Collection
argument_list|<
name|ResourceRequest
argument_list|>
name|getRRs
parameter_list|()
block|{
return|return
name|this
operator|.
name|asks
operator|.
name|values
argument_list|()
return|;
block|}
DECL|method|getNumContainers ()
specifier|public
name|int
name|getNumContainers
parameter_list|()
block|{
return|return
name|this
operator|.
name|numContainers
return|;
block|}
comment|/**    * Force set the # of containers to ask for this requestSet to a given value.    *    * @param newValue the new # of containers value    * @throws YarnException    */
DECL|method|setNumContainers (int newValue)
specifier|public
name|void
name|setNumContainers
parameter_list|(
name|int
name|newValue
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|this
operator|.
name|numContainers
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"should not set numContainers to "
operator|+
name|newValue
operator|+
literal|" for a cancel requestSet: "
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Clone the ResourceRequest object whenever we need to change it
name|int
name|oldValue
init|=
name|this
operator|.
name|numContainers
decl_stmt|;
name|this
operator|.
name|numContainers
operator|=
name|newValue
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|key
operator|.
name|getExeType
argument_list|()
operator|.
name|equals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
condition|)
block|{
comment|// The assumption we made about O asks is that all RR in a requestSet has
comment|// the same numContainers value
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|newAsks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|this
operator|.
name|asks
operator|.
name|values
argument_list|()
control|)
block|{
name|ResourceRequest
name|clone
init|=
name|ResourceRequest
operator|.
name|clone
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setNumContainers
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|newAsks
operator|.
name|put
argument_list|(
name|clone
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|clone
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|asks
operator|=
name|newAsks
expr_stmt|;
block|}
else|else
block|{
name|ResourceRequest
name|rr
init|=
name|this
operator|.
name|asks
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|rr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"No ANY RR found in requestSet with numContainers="
operator|+
name|oldValue
argument_list|)
throw|;
block|}
name|ResourceRequest
name|clone
init|=
name|ResourceRequest
operator|.
name|clone
argument_list|(
name|rr
argument_list|)
decl_stmt|;
name|clone
operator|.
name|setNumContainers
argument_list|(
name|newValue
argument_list|)
expr_stmt|;
name|this
operator|.
name|asks
operator|.
name|put
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|clone
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"{"
operator|+
name|this
operator|.
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceRequest
argument_list|>
name|entry
range|:
name|this
operator|.
name|asks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|":"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

