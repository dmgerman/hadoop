begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class that contains commonly used server methods.  *  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|YarnServerSecurityUtils
specifier|public
specifier|final
class|class
name|YarnServerSecurityUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnServerSecurityUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|YarnServerSecurityUtils ()
specifier|private
name|YarnServerSecurityUtils
parameter_list|()
block|{   }
comment|/**    * Authorizes the current request and returns the AMRMTokenIdentifier for the    * current application.    *    * @return the AMRMTokenIdentifier instance for the current user    * @throws YarnException    */
DECL|method|authorizeRequest ()
specifier|public
specifier|static
name|AMRMTokenIdentifier
name|authorizeRequest
parameter_list|()
throws|throws
name|YarnException
block|{
name|UserGroupInformation
name|remoteUgi
decl_stmt|;
try|try
block|{
name|remoteUgi
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Cannot obtain the user-name for authorizing ApplicationMaster. "
operator|+
literal|"Got exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|boolean
name|tokenFound
init|=
literal|false
decl_stmt|;
name|String
name|message
init|=
literal|""
decl_stmt|;
name|AMRMTokenIdentifier
name|appTokenIdentifier
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appTokenIdentifier
operator|=
name|selectAMRMTokenIdentifier
argument_list|(
name|remoteUgi
argument_list|)
expr_stmt|;
if|if
condition|(
name|appTokenIdentifier
operator|==
literal|null
condition|)
block|{
name|tokenFound
operator|=
literal|false
expr_stmt|;
name|message
operator|=
literal|"No AMRMToken found for user "
operator|+
name|remoteUgi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tokenFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|tokenFound
operator|=
literal|false
expr_stmt|;
name|message
operator|=
literal|"Got exception while looking for AMRMToken for user "
operator|+
name|remoteUgi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tokenFound
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|message
argument_list|)
throw|;
block|}
return|return
name|appTokenIdentifier
return|;
block|}
comment|// Obtain the needed AMRMTokenIdentifier from the remote-UGI. RPC layer
comment|// currently sets only the required id, but iterate through anyways just to be
comment|// sure.
DECL|method|selectAMRMTokenIdentifier ( UserGroupInformation remoteUgi)
specifier|private
specifier|static
name|AMRMTokenIdentifier
name|selectAMRMTokenIdentifier
parameter_list|(
name|UserGroupInformation
name|remoteUgi
parameter_list|)
throws|throws
name|IOException
block|{
name|AMRMTokenIdentifier
name|result
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|TokenIdentifier
argument_list|>
name|tokenIds
init|=
name|remoteUgi
operator|.
name|getTokenIdentifiers
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenIdentifier
name|tokenId
range|:
name|tokenIds
control|)
block|{
if|if
condition|(
name|tokenId
operator|instanceof
name|AMRMTokenIdentifier
condition|)
block|{
name|result
operator|=
operator|(
name|AMRMTokenIdentifier
operator|)
name|tokenId
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Parses the container launch context and returns a Credential instance that    * contains all the tokens from the launch context.     * @param launchContext    * @return the credential instance    * @throws IOException    */
DECL|method|parseCredentials ( ContainerLaunchContext launchContext)
specifier|public
specifier|static
name|Credentials
name|parseCredentials
parameter_list|(
name|ContainerLaunchContext
name|launchContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|ByteBuffer
name|tokens
init|=
name|launchContext
operator|.
name|getTokens
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|DataInputByteBuffer
name|buf
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|tk
range|:
name|credentials
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|tk
operator|.
name|getService
argument_list|()
operator|+
literal|" = "
operator|+
name|tk
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|credentials
return|;
block|}
block|}
end_class

end_unit

