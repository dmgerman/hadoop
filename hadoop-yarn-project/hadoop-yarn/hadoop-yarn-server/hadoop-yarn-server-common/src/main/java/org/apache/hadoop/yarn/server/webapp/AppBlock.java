begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|APPLICATION_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|WEB_UI_TYPE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|http
operator|.
name|RestCsrfPreventionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationBaseProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ResponseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|InfoBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|AppBlock
specifier|public
class|class
name|AppBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AppBlock
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|appBaseProt
specifier|protected
name|ApplicationBaseProtocol
name|appBaseProt
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|appID
specifier|protected
name|ApplicationId
name|appID
init|=
literal|null
decl_stmt|;
annotation|@
name|Inject
DECL|method|AppBlock (ApplicationBaseProtocol appBaseProt, ViewContext ctx, Configuration conf)
specifier|protected
name|AppBlock
parameter_list|(
name|ApplicationBaseProtocol
name|appBaseProt
parameter_list|,
name|ViewContext
name|ctx
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|appBaseProt
operator|=
name|appBaseProt
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|webUiType
init|=
name|$
argument_list|(
name|WEB_UI_TYPE
argument_list|)
decl_stmt|;
name|String
name|aid
init|=
name|$
argument_list|(
name|APPLICATION_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|aid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|puts
argument_list|(
literal|"Bad request: requires Application ID"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|appID
operator|=
name|Apps
operator|.
name|toAppID
argument_list|(
name|aid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|puts
argument_list|(
literal|"Invalid Application ID: "
operator|+
name|aid
argument_list|)
expr_stmt|;
return|return;
block|}
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUGI
argument_list|()
decl_stmt|;
name|ApplicationReport
name|appReport
decl_stmt|;
try|try
block|{
specifier|final
name|GetApplicationReportRequest
name|request
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|appID
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Failed to get user name from request"
argument_list|)
throw|;
block|}
else|else
block|{
name|appReport
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appBaseProt
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the application "
operator|+
name|appID
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|appReport
operator|==
literal|null
condition|)
block|{
name|puts
argument_list|(
literal|"Application not found: "
operator|+
name|aid
argument_list|)
expr_stmt|;
return|return;
block|}
name|AppInfo
name|app
init|=
operator|new
name|AppInfo
argument_list|(
name|appReport
argument_list|)
decl_stmt|;
name|setTitle
argument_list|(
name|join
argument_list|(
literal|"Application "
argument_list|,
name|aid
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|webUiType
operator|!=
literal|null
operator|&&
name|webUiType
operator|.
name|equals
argument_list|(
name|YarnWebParams
operator|.
name|RM_WEB_UI
argument_list|)
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_UI_ACTIONS_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED
argument_list|)
condition|)
block|{
comment|// Application Kill
name|html
operator|.
name|div
argument_list|()
operator|.
name|button
argument_list|()
operator|.
name|$onclick
argument_list|(
literal|"confirmAction()"
argument_list|)
operator|.
name|b
argument_list|(
literal|"Kill Application"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|StringBuilder
name|script
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|script
operator|.
name|append
argument_list|(
literal|"function confirmAction() {"
argument_list|)
operator|.
name|append
argument_list|(
literal|" b = confirm(\"Are you sure?\");"
argument_list|)
operator|.
name|append
argument_list|(
literal|" if (b == true) {"
argument_list|)
operator|.
name|append
argument_list|(
literal|" $.ajax({"
argument_list|)
operator|.
name|append
argument_list|(
literal|" type: 'PUT',"
argument_list|)
operator|.
name|append
argument_list|(
literal|" url: '/ws/v1/cluster/apps/"
argument_list|)
operator|.
name|append
argument_list|(
name|aid
argument_list|)
operator|.
name|append
argument_list|(
literal|"/state',"
argument_list|)
operator|.
name|append
argument_list|(
literal|" contentType: 'application/json',"
argument_list|)
operator|.
name|append
argument_list|(
name|getCSRFHeaderString
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" data: '{\"state\":\"KILLED\"}',"
argument_list|)
operator|.
name|append
argument_list|(
literal|" dataType: 'json'"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }).done(function(data){"
argument_list|)
operator|.
name|append
argument_list|(
literal|" setTimeout(function(){"
argument_list|)
operator|.
name|append
argument_list|(
literal|" location.href = '/cluster/app/"
argument_list|)
operator|.
name|append
argument_list|(
name|aid
argument_list|)
operator|.
name|append
argument_list|(
literal|"';"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }, 1000);"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }).fail(function(data){"
argument_list|)
operator|.
name|append
argument_list|(
literal|" console.log(data);"
argument_list|)
operator|.
name|append
argument_list|(
literal|" });"
argument_list|)
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|_
argument_list|(
name|script
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|String
name|schedulerPath
init|=
name|WebAppUtils
operator|.
name|getResolvedRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
operator|+
literal|"/cluster/scheduler?openQueues="
operator|+
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|generateOverviewTable
argument_list|(
name|app
argument_list|,
name|schedulerPath
argument_list|,
name|webUiType
argument_list|,
name|appReport
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|attempts
decl_stmt|;
try|try
block|{
specifier|final
name|GetApplicationAttemptsRequest
name|request
init|=
name|GetApplicationAttemptsRequest
operator|.
name|newInstance
argument_list|(
name|appID
argument_list|)
decl_stmt|;
name|attempts
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appBaseProt
operator|.
name|getApplicationAttempts
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptList
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the attempts of the application "
operator|+
name|appID
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|createApplicationMetricsTable
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|.
name|_
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateApplicationTable
argument_list|(
name|html
argument_list|,
name|callerUGI
argument_list|,
name|attempts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generate overview table for app web page.    * @param app app info.    * @param schedulerPath schedule path.    * @param webUiType web ui type.    * @param appReport app report.    */
DECL|method|generateOverviewTable (AppInfo app, String schedulerPath, String webUiType, ApplicationReport appReport)
specifier|private
name|void
name|generateOverviewTable
parameter_list|(
name|AppInfo
name|app
parameter_list|,
name|String
name|schedulerPath
parameter_list|,
name|String
name|webUiType
parameter_list|,
name|ApplicationReport
name|appReport
parameter_list|)
block|{
name|ResponseInfo
name|overviewTable
init|=
name|info
argument_list|(
literal|"Application Overview"
argument_list|)
operator|.
name|_
argument_list|(
literal|"User:"
argument_list|,
name|schedulerPath
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Name:"
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Application Type:"
argument_list|,
name|app
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Application Tags:"
argument_list|,
name|app
operator|.
name|getApplicationTags
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|app
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Application Priority:"
argument_list|,
name|clarifyAppPriority
argument_list|(
name|app
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"YarnApplicationState:"
argument_list|,
name|app
operator|.
name|getAppState
argument_list|()
operator|==
literal|null
condition|?
name|UNAVAILABLE
else|:
name|clarifyAppState
argument_list|(
name|app
operator|.
name|getAppState
argument_list|()
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Queue:"
argument_list|,
name|schedulerPath
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"FinalStatus Reported by AM:"
argument_list|,
name|clairfyAppFinalStatus
argument_list|(
name|app
operator|.
name|getFinalAppStatus
argument_list|()
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Started:"
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|app
operator|.
name|getStartedTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Elapsed:"
argument_list|,
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|Times
operator|.
name|elapsed
argument_list|(
name|app
operator|.
name|getStartedTime
argument_list|()
argument_list|,
name|app
operator|.
name|getFinishedTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Tracking URL:"
argument_list|,
name|app
operator|.
name|getTrackingUrl
argument_list|()
operator|==
literal|null
operator|||
name|app
operator|.
name|getTrackingUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|UNAVAILABLE
argument_list|)
condition|?
literal|null
else|:
name|root_url
argument_list|(
name|app
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|,
name|app
operator|.
name|getTrackingUrl
argument_list|()
operator|==
literal|null
operator|||
name|app
operator|.
name|getTrackingUrl
argument_list|()
operator|.
name|equals
argument_list|(
name|UNAVAILABLE
argument_list|)
condition|?
literal|"Unassigned"
else|:
name|app
operator|.
name|getAppState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
operator|||
name|app
operator|.
name|getAppState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FAILED
operator|||
name|app
operator|.
name|getAppState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|KILLED
condition|?
literal|"History"
else|:
literal|"ApplicationMaster"
argument_list|)
decl_stmt|;
if|if
condition|(
name|webUiType
operator|!=
literal|null
operator|&&
name|webUiType
operator|.
name|equals
argument_list|(
name|YarnWebParams
operator|.
name|RM_WEB_UI
argument_list|)
condition|)
block|{
name|LogAggregationStatus
name|status
init|=
name|getLogAggregationStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Log Aggregation Status:"
argument_list|,
literal|"N/A"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|LogAggregationStatus
operator|.
name|DISABLED
operator|||
name|status
operator|==
name|LogAggregationStatus
operator|.
name|NOT_START
operator|||
name|status
operator|==
name|LogAggregationStatus
operator|.
name|SUCCEEDED
condition|)
block|{
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Log Aggregation Status:"
argument_list|,
name|status
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Log Aggregation Status:"
argument_list|,
name|root_url
argument_list|(
literal|"logaggregationstatus"
argument_list|,
name|app
operator|.
name|getAppId
argument_list|()
argument_list|)
argument_list|,
name|status
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|timeout
init|=
name|appReport
operator|.
name|getApplicationTimeouts
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
operator|.
name|getRemainingTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
block|{
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Application Timeout (Remaining Time):"
argument_list|,
literal|"Unlimited"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Application Timeout (Remaining Time):"
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%d seconds"
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Diagnostics:"
argument_list|,
name|app
operator|.
name|getDiagnosticsInfo
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|app
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Unmanaged Application:"
argument_list|,
name|app
operator|.
name|isUnmanagedApp
argument_list|()
argument_list|)
expr_stmt|;
name|overviewTable
operator|.
name|_
argument_list|(
literal|"Application Node Label expression:"
argument_list|,
name|app
operator|.
name|getAppNodeLabelExpression
argument_list|()
operator|==
literal|null
condition|?
literal|"<Not set>"
else|:
name|app
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|overviewTable
operator|.
name|_
argument_list|(
literal|"AM container Node Label expression:"
argument_list|,
name|app
operator|.
name|getAmNodeLabelExpression
argument_list|()
operator|==
literal|null
condition|?
literal|"<Not set>"
else|:
name|app
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateApplicationTable (Block html, UserGroupInformation callerUGI, Collection<ApplicationAttemptReport> attempts)
specifier|protected
name|void
name|generateApplicationTable
parameter_list|(
name|Block
name|html
parameter_list|,
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|attempts
parameter_list|)
block|{
comment|// Application Attempt Table
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tbody
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#attempts"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|".id"
argument_list|,
literal|"Attempt ID"
argument_list|)
operator|.
name|th
argument_list|(
literal|".started"
argument_list|,
literal|"Started"
argument_list|)
operator|.
name|th
argument_list|(
literal|".node"
argument_list|,
literal|"Node"
argument_list|)
operator|.
name|th
argument_list|(
literal|".logs"
argument_list|,
literal|"Logs"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
name|StringBuilder
name|attemptsTableData
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"[\n"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ApplicationAttemptReport
name|appAttemptReport
range|:
name|attempts
control|)
block|{
name|AppAttemptInfo
name|appAttempt
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|appAttemptReport
argument_list|)
decl_stmt|;
name|ContainerReport
name|containerReport
decl_stmt|;
try|try
block|{
specifier|final
name|GetContainerReportRequest
name|request
init|=
name|GetContainerReportRequest
operator|.
name|newInstance
argument_list|(
name|appAttemptReport
operator|.
name|getAMContainerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|containerReport
operator|=
name|appBaseProt
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerReport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|containerReport
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerReport
name|report
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getContainerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|report
operator|=
name|appBaseProt
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerReport
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContainerNotFoundException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|report
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the AM container of the application attempt "
operator|+
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|long
name|startTime
init|=
literal|0L
decl_stmt|;
name|String
name|logsLink
init|=
literal|null
decl_stmt|;
name|String
name|nodeLink
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|containerReport
operator|!=
literal|null
condition|)
block|{
name|ContainerInfo
name|container
init|=
operator|new
name|ContainerInfo
argument_list|(
name|containerReport
argument_list|)
decl_stmt|;
name|startTime
operator|=
name|container
operator|.
name|getStartedTime
argument_list|()
expr_stmt|;
name|logsLink
operator|=
name|containerReport
operator|.
name|getLogUrl
argument_list|()
expr_stmt|;
name|nodeLink
operator|=
name|containerReport
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
block|}
name|attemptsTableData
operator|.
name|append
argument_list|(
literal|"[\"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|(
literal|"appattempt"
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\"<a "
argument_list|)
operator|.
name|append
argument_list|(
name|nodeLink
operator|==
literal|null
condition|?
literal|"#"
else|:
literal|"href='"
operator|+
name|nodeLink
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|nodeLink
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|StringEscapeUtils
operator|.
name|escapeJavaScript
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeHtml
argument_list|(
name|nodeLink
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\"<a "
argument_list|)
operator|.
name|append
argument_list|(
name|logsLink
operator|==
literal|null
condition|?
literal|"#"
else|:
literal|"href='"
operator|+
name|logsLink
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|logsLink
operator|==
literal|null
condition|?
literal|"N/A"
else|:
literal|"Logs"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\"],\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptsTableData
operator|.
name|charAt
argument_list|(
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|','
condition|)
block|{
name|attemptsTableData
operator|.
name|delete
argument_list|(
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|,
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|attemptsTableData
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|_
argument_list|(
literal|"var attemptsTableData="
operator|+
name|attemptsTableData
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|tbody
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
DECL|method|clarifyAppState (YarnApplicationState state)
specifier|private
name|String
name|clarifyAppState
parameter_list|(
name|YarnApplicationState
name|state
parameter_list|)
block|{
name|String
name|ret
init|=
name|state
operator|.
name|toString
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|NEW
case|:
return|return
name|ret
operator|+
literal|": waiting for application to be initialized"
return|;
case|case
name|NEW_SAVING
case|:
return|return
name|ret
operator|+
literal|": waiting for application to be persisted in state-store."
return|;
case|case
name|SUBMITTED
case|:
return|return
name|ret
operator|+
literal|": waiting for application to be accepted by scheduler."
return|;
case|case
name|ACCEPTED
case|:
return|return
name|ret
operator|+
literal|": waiting for AM container to be allocated, launched and"
operator|+
literal|" register with RM."
return|;
case|case
name|RUNNING
case|:
return|return
name|ret
operator|+
literal|": AM has registered with RM and started running."
return|;
default|default:
return|return
name|ret
return|;
block|}
block|}
DECL|method|clarifyAppPriority (int priority)
specifier|private
name|String
name|clarifyAppPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
return|return
name|priority
operator|+
literal|" (Higher Integer value indicates higher priority)"
return|;
block|}
DECL|method|clairfyAppFinalStatus (FinalApplicationStatus status)
specifier|private
name|String
name|clairfyAppFinalStatus
parameter_list|(
name|FinalApplicationStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
name|FinalApplicationStatus
operator|.
name|UNDEFINED
condition|)
block|{
return|return
literal|"Application has not completed yet."
return|;
block|}
return|return
name|status
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// The preemption metrics only need to be shown in RM WebUI
DECL|method|createApplicationMetricsTable (Block html)
specifier|protected
name|void
name|createApplicationMetricsTable
parameter_list|(
name|Block
name|html
parameter_list|)
block|{    }
comment|// This will be overrided in RMAppBlock
DECL|method|getLogAggregationStatus ()
specifier|protected
name|LogAggregationStatus
name|getLogAggregationStatus
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getCSRFHeaderString (Configuration conf)
specifier|public
specifier|static
name|String
name|getCSRFHeaderString
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CSRF_ENABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|" headers : { '"
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filterParams
init|=
name|RestCsrfPreventionFilter
operator|.
name|getFilterParams
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_CSRF_PREFIX
argument_list|)
decl_stmt|;
if|if
condition|(
name|filterParams
operator|.
name|containsKey
argument_list|(
name|RestCsrfPreventionFilter
operator|.
name|CUSTOM_HEADER_PARAM
argument_list|)
condition|)
block|{
name|ret
operator|+=
name|filterParams
operator|.
name|get
argument_list|(
name|RestCsrfPreventionFilter
operator|.
name|CUSTOM_HEADER_PARAM
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|RestCsrfPreventionFilter
operator|.
name|HEADER_DEFAULT
expr_stmt|;
block|}
name|ret
operator|+=
literal|"' : 'null' },"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

