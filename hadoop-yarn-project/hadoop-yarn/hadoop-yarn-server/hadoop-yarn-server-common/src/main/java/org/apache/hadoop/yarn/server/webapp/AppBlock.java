begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|APPLICATION_ID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringEscapeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Apps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TABLE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|TBODY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|InfoBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|AppBlock
specifier|public
class|class
name|AppBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|appContext
specifier|protected
name|ApplicationContext
name|appContext
decl_stmt|;
annotation|@
name|Inject
DECL|method|AppBlock (ApplicationContext appContext, ViewContext ctx)
name|AppBlock
parameter_list|(
name|ApplicationContext
name|appContext
parameter_list|,
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|appContext
operator|=
name|appContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|aid
init|=
name|$
argument_list|(
name|APPLICATION_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|aid
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|puts
argument_list|(
literal|"Bad request: requires Application ID"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationId
name|appID
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appID
operator|=
name|Apps
operator|.
name|toAppID
argument_list|(
name|aid
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|puts
argument_list|(
literal|"Invalid Application ID: "
operator|+
name|aid
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ApplicationId
name|appIDFinal
init|=
name|appID
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
name|getCallerUGI
argument_list|()
decl_stmt|;
name|ApplicationReport
name|appReport
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|appReport
operator|=
name|appContext
operator|.
name|getApplication
argument_list|(
name|appID
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appReport
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appContext
operator|.
name|getApplication
argument_list|(
name|appIDFinal
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the application "
operator|+
name|appID
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|appReport
operator|==
literal|null
condition|)
block|{
name|puts
argument_list|(
literal|"Application not found: "
operator|+
name|aid
argument_list|)
expr_stmt|;
return|return;
block|}
name|AppInfo
name|app
init|=
operator|new
name|AppInfo
argument_list|(
name|appReport
argument_list|)
decl_stmt|;
name|setTitle
argument_list|(
name|join
argument_list|(
literal|"Application "
argument_list|,
name|aid
argument_list|)
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Application Overview"
argument_list|)
operator|.
name|_
argument_list|(
literal|"User:"
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Name:"
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Application Type:"
argument_list|,
name|app
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"State:"
argument_list|,
name|app
operator|.
name|getAppState
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"FinalStatus:"
argument_list|,
name|app
operator|.
name|getFinalAppStatus
argument_list|()
argument_list|)
operator|.
name|_
argument_list|(
literal|"Started:"
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|app
operator|.
name|getStartedTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Elapsed:"
argument_list|,
name|StringUtils
operator|.
name|formatTime
argument_list|(
name|Times
operator|.
name|elapsed
argument_list|(
name|app
operator|.
name|getStartedTime
argument_list|()
argument_list|,
name|app
operator|.
name|getFinishedTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|.
name|_
argument_list|(
literal|"Tracking URL:"
argument_list|,
name|app
operator|.
name|getTrackingUrl
argument_list|()
operator|==
literal|null
condition|?
literal|"#"
else|:
name|root_url
argument_list|(
name|app
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|,
literal|"History"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Diagnostics:"
argument_list|,
name|app
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|html
operator|.
name|_
argument_list|(
name|InfoBlock
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|attempts
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|attempts
operator|=
name|appContext
operator|.
name|getApplicationAttempts
argument_list|(
name|appID
argument_list|)
operator|.
name|values
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|attempts
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appContext
operator|.
name|getApplicationAttempts
argument_list|(
name|appIDFinal
argument_list|)
operator|.
name|values
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the attempts of the application "
operator|+
name|appID
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Application Attempt Table
name|TBODY
argument_list|<
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|tbody
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#attempts"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|".id"
argument_list|,
literal|"Attempt ID"
argument_list|)
operator|.
name|th
argument_list|(
literal|".started"
argument_list|,
literal|"Started"
argument_list|)
operator|.
name|th
argument_list|(
literal|".node"
argument_list|,
literal|"Node"
argument_list|)
operator|.
name|th
argument_list|(
literal|".logs"
argument_list|,
literal|"Logs"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
name|StringBuilder
name|attemptsTableData
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"[\n"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ApplicationAttemptReport
name|appAttemptReport
range|:
name|attempts
control|)
block|{
name|AppAttemptInfo
name|appAttempt
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|appAttemptReport
argument_list|)
decl_stmt|;
name|ContainerReport
name|containerReport
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|containerReport
operator|=
name|appContext
operator|.
name|getAMContainer
argument_list|(
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|containerReport
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appContext
operator|.
name|getAMContainer
argument_list|(
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to read the AM container of the application attempt "
operator|+
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|"."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|long
name|startTime
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|String
name|logsLink
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|containerReport
operator|!=
literal|null
condition|)
block|{
name|ContainerInfo
name|container
init|=
operator|new
name|ContainerInfo
argument_list|(
name|containerReport
argument_list|)
decl_stmt|;
name|startTime
operator|=
name|container
operator|.
name|getStartedTime
argument_list|()
expr_stmt|;
name|logsLink
operator|=
name|containerReport
operator|.
name|getLogUrl
argument_list|()
expr_stmt|;
block|}
name|String
name|nodeLink
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|appAttempt
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
operator|&&
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
operator|>=
literal|0
operator|&&
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
operator|<
literal|65536
condition|)
block|{
name|nodeLink
operator|=
name|appAttempt
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
expr_stmt|;
block|}
comment|// AppAttemptID numerical value parsed by parseHadoopID in
comment|// yarn.dt.plugins.js
name|attemptsTableData
operator|.
name|append
argument_list|(
literal|"[\"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|url
argument_list|(
literal|"appattempt"
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\""
argument_list|)
operator|.
name|append
argument_list|(
name|startTime
argument_list|)
operator|.
name|append
argument_list|(
literal|"\",\"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|nodeLink
operator|==
literal|null
condition|?
literal|"#"
else|:
name|url
argument_list|(
literal|"//"
argument_list|,
name|nodeLink
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|nodeLink
operator|==
literal|null
condition|?
literal|"N/A"
else|:
name|StringEscapeUtils
operator|.
name|escapeJavaScript
argument_list|(
name|StringEscapeUtils
operator|.
name|escapeHtml
argument_list|(
name|nodeLink
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\",\"<a href='"
argument_list|)
operator|.
name|append
argument_list|(
name|logsLink
operator|==
literal|null
condition|?
literal|"#"
else|:
name|logsLink
argument_list|)
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
operator|.
name|append
argument_list|(
name|logsLink
operator|==
literal|null
condition|?
literal|"N/A"
else|:
literal|"Logs"
argument_list|)
operator|.
name|append
argument_list|(
literal|"</a>\"],\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attemptsTableData
operator|.
name|charAt
argument_list|(
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
literal|','
condition|)
block|{
name|attemptsTableData
operator|.
name|delete
argument_list|(
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|,
name|attemptsTableData
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|attemptsTableData
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|_
argument_list|(
literal|"var attemptsTableData="
operator|+
name|attemptsTableData
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|tbody
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

