begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.volume.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Unique ID for a volume. This may or may not come from a storage system,  * YARN depends on this ID to recognized volumes and manage their states.  */
end_comment

begin_class
DECL|class|VolumeId
specifier|public
class|class
name|VolumeId
block|{
DECL|field|volumeId
specifier|private
specifier|final
name|String
name|volumeId
decl_stmt|;
DECL|method|VolumeId (String volumeId)
specifier|public
name|VolumeId
parameter_list|(
name|String
name|volumeId
parameter_list|)
block|{
name|this
operator|.
name|volumeId
operator|=
name|volumeId
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumeId
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|volumeId
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|VolumeId
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|StringUtils
operator|.
name|equalsIgnoreCase
argument_list|(
name|volumeId
argument_list|,
operator|(
operator|(
name|VolumeId
operator|)
name|obj
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|hc
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|hc
operator|.
name|append
argument_list|(
name|volumeId
argument_list|)
expr_stmt|;
return|return
name|hc
operator|.
name|toHashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

