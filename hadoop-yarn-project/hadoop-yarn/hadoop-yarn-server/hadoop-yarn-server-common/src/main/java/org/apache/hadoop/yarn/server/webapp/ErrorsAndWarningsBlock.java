begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Log4jWarningErrorMetricsAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ErrorsAndWarningsBlock
specifier|public
class|class
name|ErrorsAndWarningsBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|cutoffPeriodSeconds
name|long
name|cutoffPeriodSeconds
decl_stmt|;
annotation|@
name|Inject
DECL|method|ErrorsAndWarningsBlock (ViewContext ctx)
name|ErrorsAndWarningsBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
comment|// default is to show all errors and warnings
name|cutoffPeriodSeconds
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|/
literal|1000
expr_stmt|;
name|String
name|value
init|=
name|ctx
operator|.
name|requestContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"cutoff"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|cutoffPeriodSeconds
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|cutoffPeriodSeconds
operator|<=
literal|0
condition|)
block|{
name|cutoffPeriodSeconds
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|/
literal|1000
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
name|cutoffPeriodSeconds
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|/
literal|1000
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ErrorsAndWarningsBlock
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|instanceof
name|Log4JLogger
condition|)
block|{
name|html
operator|.
name|_
argument_list|(
name|ErrorMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
name|html
operator|.
name|_
argument_list|(
name|WarningMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
name|html
operator|.
name|div
argument_list|()
operator|.
name|button
argument_list|()
operator|.
name|$onclick
argument_list|(
literal|"reloadPage()"
argument_list|)
operator|.
name|b
argument_list|(
literal|"View data for the last "
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|select
argument_list|()
operator|.
name|$id
argument_list|(
literal|"cutoff"
argument_list|)
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"60"
argument_list|)
operator|.
name|_
argument_list|(
literal|"1 min"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"300"
argument_list|)
operator|.
name|_
argument_list|(
literal|"5 min"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"900"
argument_list|)
operator|.
name|_
argument_list|(
literal|"15 min"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"3600"
argument_list|)
operator|.
name|_
argument_list|(
literal|"1 hour"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"21600"
argument_list|)
operator|.
name|_
argument_list|(
literal|"6 hours"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"43200"
argument_list|)
operator|.
name|_
argument_list|(
literal|"12 hours"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|option
argument_list|()
operator|.
name|$value
argument_list|(
literal|"86400"
argument_list|)
operator|.
name|_
argument_list|(
literal|"24 hours"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|String
name|script
init|=
literal|"function reloadPage() {"
operator|+
literal|" var timePeriod = $(\"#cutoff\").val();"
operator|+
literal|" document.location.href = '/cluster/errors-and-warnings?cutoff=' + timePeriod"
operator|+
literal|"}"
decl_stmt|;
name|script
operator|=
name|script
operator|+
literal|"; function toggleContent(element) {"
operator|+
literal|"  $(element).parent().siblings('.toggle-content').fadeToggle();"
operator|+
literal|"}"
expr_stmt|;
name|html
operator|.
name|script
argument_list|()
operator|.
name|$type
argument_list|(
literal|"text/javascript"
argument_list|)
operator|.
name|_
argument_list|(
name|script
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|html
operator|.
name|style
argument_list|(
literal|".toggle-content { display: none; }"
argument_list|)
expr_stmt|;
name|Log4jWarningErrorMetricsAppender
name|appender
init|=
name|Log4jWarningErrorMetricsAppender
operator|.
name|findAppender
argument_list|()
decl_stmt|;
if|if
condition|(
name|appender
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|cutoff
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Hamlet
operator|.
name|TBODY
argument_list|<
name|Hamlet
operator|.
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|errorsTable
init|=
name|html
operator|.
name|table
argument_list|(
literal|"#messages"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|(
literal|".message"
argument_list|,
literal|"Message"
argument_list|)
operator|.
name|th
argument_list|(
literal|".type"
argument_list|,
literal|"Type"
argument_list|)
operator|.
name|th
argument_list|(
literal|".count"
argument_list|,
literal|"Count"
argument_list|)
operator|.
name|th
argument_list|(
literal|".lasttime"
argument_list|,
literal|"Latest Message Time"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
decl_stmt|;
comment|// cutoff has to be in seconds
name|cutoff
operator|.
name|add
argument_list|(
operator|(
name|Time
operator|.
name|now
argument_list|()
operator|-
name|cutoffPeriodSeconds
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
argument_list|>
argument_list|>
name|errorsData
init|=
name|appender
operator|.
name|getErrorMessagesAndCounts
argument_list|(
name|cutoff
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
argument_list|>
argument_list|>
name|warningsData
init|=
name|appender
operator|.
name|getWarningMessagesAndCounts
argument_list|(
name|cutoff
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
argument_list|>
argument_list|>
argument_list|>
name|sources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sources
operator|.
name|put
argument_list|(
literal|"Error"
argument_list|,
name|errorsData
argument_list|)
expr_stmt|;
name|sources
operator|.
name|put
argument_list|(
literal|"Warning"
argument_list|,
name|warningsData
argument_list|)
expr_stmt|;
name|int
name|maxDisplayLength
init|=
literal|80
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
argument_list|>
argument_list|>
argument_list|>
name|source
range|:
name|sources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|type
init|=
name|source
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
argument_list|>
argument_list|>
name|data
init|=
name|source
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
argument_list|>
name|map
init|=
name|data
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Hamlet
operator|.
name|TR
argument_list|<
name|Hamlet
operator|.
name|TBODY
argument_list|<
name|Hamlet
operator|.
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|row
init|=
name|errorsTable
operator|.
name|tr
argument_list|()
decl_stmt|;
name|Hamlet
operator|.
name|TD
argument_list|<
name|Hamlet
operator|.
name|TR
argument_list|<
name|Hamlet
operator|.
name|TBODY
argument_list|<
name|Hamlet
operator|.
name|TABLE
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|cell
init|=
name|row
operator|.
name|td
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|length
argument_list|()
operator|>
name|maxDisplayLength
operator|||
name|message
operator|.
name|contains
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|String
name|displayMessage
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|displayMessage
operator|.
name|length
argument_list|()
operator|>
name|maxDisplayLength
condition|)
block|{
name|displayMessage
operator|=
name|displayMessage
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|maxDisplayLength
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|pre
argument_list|()
operator|.
name|a
argument_list|()
operator|.
name|$href
argument_list|(
literal|"#"
argument_list|)
operator|.
name|$onclick
argument_list|(
literal|"toggleContent(this);"
argument_list|)
operator|.
name|$style
argument_list|(
literal|"white-space: pre"
argument_list|)
operator|.
name|_
argument_list|(
name|displayMessage
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|div
argument_list|()
operator|.
name|$class
argument_list|(
literal|"toggle-content"
argument_list|)
operator|.
name|pre
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|pre
argument_list|()
operator|.
name|_
argument_list|(
name|message
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|Log4jWarningErrorMetricsAppender
operator|.
name|Element
name|ele
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|row
operator|.
name|td
argument_list|(
name|type
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ele
operator|.
name|count
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|Times
operator|.
name|format
argument_list|(
name|ele
operator|.
name|timestampSeconds
operator|*
literal|1000
argument_list|)
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|errorsTable
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|MetricsBase
specifier|public
specifier|static
class|class
name|MetricsBase
extends|extends
name|HtmlBlock
block|{
DECL|field|cutoffs
name|List
argument_list|<
name|Long
argument_list|>
name|cutoffs
decl_stmt|;
DECL|field|values
name|List
argument_list|<
name|Integer
argument_list|>
name|values
decl_stmt|;
DECL|field|tableHeading
name|String
name|tableHeading
decl_stmt|;
DECL|field|appender
name|Log4jWarningErrorMetricsAppender
name|appender
decl_stmt|;
DECL|method|MetricsBase (ViewContext ctx)
name|MetricsBase
parameter_list|(
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|cutoffs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
comment|// cutoff has to be in seconds
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|cutoffs
operator|.
name|add
argument_list|(
operator|(
name|now
operator|-
literal|60
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|cutoffs
operator|.
name|add
argument_list|(
operator|(
name|now
operator|-
literal|300
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|cutoffs
operator|.
name|add
argument_list|(
operator|(
name|now
operator|-
literal|900
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|cutoffs
operator|.
name|add
argument_list|(
operator|(
name|now
operator|-
literal|3600
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|cutoffs
operator|.
name|add
argument_list|(
operator|(
name|now
operator|-
literal|21600
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|cutoffs
operator|.
name|add
argument_list|(
operator|(
name|now
operator|-
literal|43200
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|cutoffs
operator|.
name|add
argument_list|(
operator|(
name|now
operator|-
literal|84600
operator|*
literal|1000
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ErrorsAndWarningsBlock
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|instanceof
name|Log4JLogger
condition|)
block|{
name|appender
operator|=
name|Log4jWarningErrorMetricsAppender
operator|.
name|findAppender
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCutoffs ()
name|List
argument_list|<
name|Long
argument_list|>
name|getCutoffs
parameter_list|()
block|{
return|return
name|this
operator|.
name|cutoffs
return|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ErrorsAndWarningsBlock
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|instanceof
name|Log4JLogger
condition|)
block|{
name|Hamlet
operator|.
name|DIV
argument_list|<
name|Hamlet
argument_list|>
name|div
init|=
name|html
operator|.
name|div
argument_list|()
operator|.
name|$class
argument_list|(
literal|"metrics"
argument_list|)
operator|.
name|$style
argument_list|(
literal|"padding-bottom: 20px"
argument_list|)
decl_stmt|;
name|div
operator|.
name|h3
argument_list|(
name|tableHeading
argument_list|)
operator|.
name|table
argument_list|(
literal|"#metricsoverview"
argument_list|)
operator|.
name|thead
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-widget-header"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Last 1 minute"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Last 5 minutes"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Last 15 minutes"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Last 1 hour"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Last 6 hours"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Last 12 hours"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-state-default"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Last 24 hours"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|tbody
argument_list|()
operator|.
name|$class
argument_list|(
literal|"ui-widget-content"
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|td
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
name|div
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|ErrorMetrics
specifier|public
specifier|static
class|class
name|ErrorMetrics
extends|extends
name|MetricsBase
block|{
annotation|@
name|Inject
DECL|method|ErrorMetrics (ViewContext ctx)
name|ErrorMetrics
parameter_list|(
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|tableHeading
operator|=
literal|"Error Metrics"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
if|if
condition|(
name|appender
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|values
operator|=
name|appender
operator|.
name|getErrorCounts
argument_list|(
name|getCutoffs
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|WarningMetrics
specifier|public
specifier|static
class|class
name|WarningMetrics
extends|extends
name|MetricsBase
block|{
annotation|@
name|Inject
DECL|method|WarningMetrics (ViewContext ctx)
name|WarningMetrics
parameter_list|(
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|tableHeading
operator|=
literal|"Warning Metrics"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
if|if
condition|(
name|appender
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|values
operator|=
name|appender
operator|.
name|getWarningCounts
argument_list|(
name|getCutoffs
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

