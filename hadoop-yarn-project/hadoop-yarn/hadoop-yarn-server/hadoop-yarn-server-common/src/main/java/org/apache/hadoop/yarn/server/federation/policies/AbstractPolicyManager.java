begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|amrmproxy
operator|.
name|FederationAMRMProxyPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|router
operator|.
name|FederationRouterPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides basic implementation for common methods that multiple  * policies will need to implement.  */
end_comment

begin_class
DECL|class|AbstractPolicyManager
specifier|public
specifier|abstract
class|class
name|AbstractPolicyManager
implements|implements
name|FederationPolicyManager
block|{
DECL|field|queue
specifier|private
name|String
name|queue
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:visibilitymodifier"
argument_list|)
DECL|field|routerFederationPolicy
specifier|protected
name|Class
name|routerFederationPolicy
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:visibilitymodifier"
argument_list|)
DECL|field|amrmProxyFederationPolicy
specifier|protected
name|Class
name|amrmProxyFederationPolicy
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractPolicyManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * This default implementation validates the    * {@link FederationPolicyInitializationContext},    * then checks whether it needs to reinstantiate the class (null or    * mismatching type), and reinitialize the policy.    *    * @param federationPolicyContext the current context    * @param oldInstance             the existing (possibly null) instance.    *    * @return a valid and fully reinitalized {@link FederationAMRMProxyPolicy}    * instance    *    * @throws FederationPolicyInitializationException if the reinitalization is    *                                                 not valid, and ensure    *                                                 previous state is preserved    */
DECL|method|getAMRMPolicy ( FederationPolicyInitializationContext federationPolicyContext, FederationAMRMProxyPolicy oldInstance)
specifier|public
name|FederationAMRMProxyPolicy
name|getAMRMPolicy
parameter_list|(
name|FederationPolicyInitializationContext
name|federationPolicyContext
parameter_list|,
name|FederationAMRMProxyPolicy
name|oldInstance
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
if|if
condition|(
name|amrmProxyFederationPolicy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
literal|"The parameter "
operator|+
literal|"amrmProxyFederationPolicy should be initialized in "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" constructor."
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|internalPolicyGetter
argument_list|(
name|federationPolicyContext
argument_list|,
name|oldInstance
argument_list|,
name|amrmProxyFederationPolicy
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * This default implementation validates the    * {@link FederationPolicyInitializationContext},    * then checks whether it needs to reinstantiate the class (null or    * mismatching type), and reinitialize the policy.    *    * @param federationPolicyContext the current context    * @param oldInstance             the existing (possibly null) instance.    *    * @return a valid and fully reinitalized {@link FederationRouterPolicy}    * instance    *    * @throws FederationPolicyInitializationException if the reinitalization is    *                                                 not valid, and ensure    *                                                 previous state is preserved    */
DECL|method|getRouterPolicy ( FederationPolicyInitializationContext federationPolicyContext, FederationRouterPolicy oldInstance)
specifier|public
name|FederationRouterPolicy
name|getRouterPolicy
parameter_list|(
name|FederationPolicyInitializationContext
name|federationPolicyContext
parameter_list|,
name|FederationRouterPolicy
name|oldInstance
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
comment|//checks that sub-types properly initialize the types of policies
if|if
condition|(
name|routerFederationPolicy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
literal|"The policy "
operator|+
literal|"type should be initialized in "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" constructor."
argument_list|)
throw|;
block|}
try|try
block|{
return|return
operator|(
name|FederationRouterPolicy
operator|)
name|internalPolicyGetter
argument_list|(
name|federationPolicyContext
argument_list|,
name|oldInstance
argument_list|,
name|routerFederationPolicy
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|queue
return|;
block|}
annotation|@
name|Override
DECL|method|setQueue (String queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
comment|/**    * Common functionality to instantiate a reinitialize a {@link    * ConfigurableFederationPolicy}.    */
DECL|method|internalPolicyGetter ( final FederationPolicyInitializationContext federationPolicyContext, ConfigurableFederationPolicy oldInstance, Class policy)
specifier|private
name|ConfigurableFederationPolicy
name|internalPolicyGetter
parameter_list|(
specifier|final
name|FederationPolicyInitializationContext
name|federationPolicyContext
parameter_list|,
name|ConfigurableFederationPolicy
name|oldInstance
parameter_list|,
name|Class
name|policy
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
name|FederationPolicyInitializationContextValidator
operator|.
name|validate
argument_list|(
name|federationPolicyContext
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldInstance
operator|==
literal|null
operator|||
operator|!
name|oldInstance
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|policy
argument_list|)
condition|)
block|{
try|try
block|{
name|oldInstance
operator|=
operator|(
name|ConfigurableFederationPolicy
operator|)
name|policy
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//copying the context to avoid side-effects
name|FederationPolicyInitializationContext
name|modifiedContext
init|=
name|updateContext
argument_list|(
name|federationPolicyContext
argument_list|,
name|oldInstance
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
name|oldInstance
operator|.
name|reinitialize
argument_list|(
name|modifiedContext
argument_list|)
expr_stmt|;
return|return
name|oldInstance
return|;
block|}
comment|/**    * This method is used to copy-on-write the context, that will be passed    * downstream to the router/amrmproxy policies.    */
DECL|method|updateContext ( FederationPolicyInitializationContext federationPolicyContext, String type)
specifier|private
name|FederationPolicyInitializationContext
name|updateContext
parameter_list|(
name|FederationPolicyInitializationContext
name|federationPolicyContext
parameter_list|,
name|String
name|type
parameter_list|)
block|{
comment|// copying configuration and context to avoid modification of original
name|SubClusterPolicyConfiguration
name|newConf
init|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|federationPolicyContext
operator|.
name|getSubClusterPolicyConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
operator|new
name|FederationPolicyInitializationContext
argument_list|(
name|newConf
argument_list|,
name|federationPolicyContext
operator|.
name|getFederationSubclusterResolver
argument_list|()
argument_list|,
name|federationPolicyContext
operator|.
name|getFederationStateStoreFacade
argument_list|()
argument_list|,
name|federationPolicyContext
operator|.
name|getHomeSubcluster
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

