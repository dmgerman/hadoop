begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.manager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|manager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|amrmproxy
operator|.
name|HomeAMRMProxyPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|dao
operator|.
name|WeightedPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|router
operator|.
name|UniformRandomRouterPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterIdInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_comment
comment|/**  * Policy manager which uses the {@link UniformRandomRouterPolicy} for the  * Router and {@link HomeAMRMProxyPolicy} as the AMRMProxy policy to find the  * RM.  */
end_comment

begin_class
DECL|class|HomePolicyManager
specifier|public
class|class
name|HomePolicyManager
extends|extends
name|AbstractPolicyManager
block|{
comment|/** Imaginary configuration to fulfill the super class. */
DECL|field|weightedPolicyInfo
specifier|private
name|WeightedPolicyInfo
name|weightedPolicyInfo
decl_stmt|;
DECL|method|HomePolicyManager ()
specifier|public
name|HomePolicyManager
parameter_list|()
block|{
name|weightedPolicyInfo
operator|=
operator|new
name|WeightedPolicyInfo
argument_list|()
expr_stmt|;
name|weightedPolicyInfo
operator|.
name|setRouterPolicyWeights
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
operator|new
name|SubClusterIdInfo
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|weightedPolicyInfo
operator|.
name|setAMRMPolicyWeights
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
operator|new
name|SubClusterIdInfo
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Hard-codes two compatible policies for Router and AMRMProxy.
name|routerFederationPolicy
operator|=
name|UniformRandomRouterPolicy
operator|.
name|class
expr_stmt|;
name|amrmProxyFederationPolicy
operator|=
name|HomeAMRMProxyPolicy
operator|.
name|class
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serializeConf ()
specifier|public
name|SubClusterPolicyConfiguration
name|serializeConf
parameter_list|()
throws|throws
name|FederationPolicyInitializationException
block|{
name|ByteBuffer
name|buf
init|=
name|weightedPolicyInfo
operator|.
name|toByteBuffer
argument_list|()
decl_stmt|;
return|return
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|getQueue
argument_list|()
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|buf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

