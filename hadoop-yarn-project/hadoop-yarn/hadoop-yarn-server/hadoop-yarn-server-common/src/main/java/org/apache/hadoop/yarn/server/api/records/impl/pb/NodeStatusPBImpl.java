begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerStatusPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|NodeIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ContainerStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|NodeIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|NodeHealthStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|NodeStatusProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|NodeStatusProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|ResourceUtilizationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_class
DECL|class|NodeStatusPBImpl
specifier|public
class|class
name|NodeStatusPBImpl
extends|extends
name|NodeStatus
block|{
DECL|field|proto
name|NodeStatusProto
name|proto
init|=
name|NodeStatusProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
name|NodeStatusProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
init|=
literal|null
decl_stmt|;
DECL|field|containers
specifier|private
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containers
init|=
literal|null
decl_stmt|;
DECL|field|nodeHealthStatus
specifier|private
name|NodeHealthStatus
name|nodeHealthStatus
init|=
literal|null
decl_stmt|;
DECL|field|keepAliveApplications
specifier|private
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|keepAliveApplications
init|=
literal|null
decl_stmt|;
DECL|method|NodeStatusPBImpl ()
specifier|public
name|NodeStatusPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|NodeStatusProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|NodeStatusPBImpl (NodeStatusProto proto)
specifier|public
name|NodeStatusPBImpl
parameter_list|(
name|NodeStatusProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
specifier|synchronized
name|NodeStatusProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
specifier|synchronized
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setNodeId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|containers
operator|!=
literal|null
condition|)
block|{
name|addContainersToProto
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|nodeHealthStatus
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setNodeHealthStatus
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|nodeHealthStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|keepAliveApplications
operator|!=
literal|null
condition|)
block|{
name|addKeepAliveApplicationsToProto
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mergeLocalToProto ()
specifier|private
specifier|synchronized
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
specifier|synchronized
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|NodeStatusProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|addContainersToProto ()
specifier|private
specifier|synchronized
name|void
name|addContainersToProto
parameter_list|()
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clearContainersStatuses
argument_list|()
expr_stmt|;
if|if
condition|(
name|containers
operator|==
literal|null
condition|)
return|return;
name|Iterable
argument_list|<
name|ContainerStatusProto
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|ContainerStatusProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ContainerStatusProto
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|ContainerStatusProto
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|ContainerStatus
argument_list|>
name|iter
init|=
name|containers
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ContainerStatusProto
name|next
parameter_list|()
block|{
return|return
name|convertToProtoFormat
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|builder
operator|.
name|addAllContainersStatuses
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
block|}
DECL|method|addKeepAliveApplicationsToProto ()
specifier|private
specifier|synchronized
name|void
name|addKeepAliveApplicationsToProto
parameter_list|()
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clearKeepAliveApplications
argument_list|()
expr_stmt|;
if|if
condition|(
name|keepAliveApplications
operator|==
literal|null
condition|)
return|return;
name|Iterable
argument_list|<
name|ApplicationIdProto
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|ApplicationIdProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ApplicationIdProto
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|ApplicationIdProto
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|ApplicationId
argument_list|>
name|iter
init|=
name|keepAliveApplications
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ApplicationIdProto
name|next
parameter_list|()
block|{
return|return
name|convertToProtoFormat
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|builder
operator|.
name|addAllKeepAliveApplications
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getResponseId ()
specifier|public
specifier|synchronized
name|int
name|getResponseId
parameter_list|()
block|{
name|NodeStatusProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getResponseId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setResponseId (int responseId)
specifier|public
specifier|synchronized
name|void
name|setResponseId
parameter_list|(
name|int
name|responseId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setResponseId
argument_list|(
name|responseId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNodeId ()
specifier|public
specifier|synchronized
name|NodeId
name|getNodeId
parameter_list|()
block|{
name|NodeStatusProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|nodeId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|nodeId
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasNodeId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|nodeId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|nodeId
return|;
block|}
annotation|@
name|Override
DECL|method|setNodeId (NodeId nodeId)
specifier|public
specifier|synchronized
name|void
name|setNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearNodeId
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContainersStatuses ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|getContainersStatuses
parameter_list|()
block|{
name|initContainers
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|containers
return|;
block|}
annotation|@
name|Override
DECL|method|setContainersStatuses ( List<ContainerStatus> containers)
specifier|public
specifier|synchronized
name|void
name|setContainersStatuses
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containers
parameter_list|)
block|{
if|if
condition|(
name|containers
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearContainersStatuses
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|containers
operator|=
name|containers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeepAliveApplications ()
specifier|public
specifier|synchronized
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|getKeepAliveApplications
parameter_list|()
block|{
name|initKeepAliveApplications
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|keepAliveApplications
return|;
block|}
annotation|@
name|Override
DECL|method|setKeepAliveApplications (List<ApplicationId> appIds)
specifier|public
specifier|synchronized
name|void
name|setKeepAliveApplications
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
parameter_list|)
block|{
if|if
condition|(
name|appIds
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearKeepAliveApplications
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|keepAliveApplications
operator|=
name|appIds
expr_stmt|;
block|}
DECL|method|initContainers ()
specifier|private
specifier|synchronized
name|void
name|initContainers
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|containers
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|NodeStatusProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|ContainerStatusProto
argument_list|>
name|list
init|=
name|p
operator|.
name|getContainersStatusesList
argument_list|()
decl_stmt|;
name|this
operator|.
name|containers
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ContainerStatusProto
name|c
range|:
name|list
control|)
block|{
name|this
operator|.
name|containers
operator|.
name|add
argument_list|(
name|convertFromProtoFormat
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initKeepAliveApplications ()
specifier|private
specifier|synchronized
name|void
name|initKeepAliveApplications
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|keepAliveApplications
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|NodeStatusProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|ApplicationIdProto
argument_list|>
name|list
init|=
name|p
operator|.
name|getKeepAliveApplicationsList
argument_list|()
decl_stmt|;
name|this
operator|.
name|keepAliveApplications
operator|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ApplicationIdProto
name|c
range|:
name|list
control|)
block|{
name|this
operator|.
name|keepAliveApplications
operator|.
name|add
argument_list|(
name|convertFromProtoFormat
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeHealthStatus ()
specifier|public
specifier|synchronized
name|NodeHealthStatus
name|getNodeHealthStatus
parameter_list|()
block|{
name|NodeStatusProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|nodeHealthStatus
operator|!=
literal|null
condition|)
block|{
return|return
name|nodeHealthStatus
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasNodeHealthStatus
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|nodeHealthStatus
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getNodeHealthStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodeHealthStatus
return|;
block|}
annotation|@
name|Override
DECL|method|setNodeHealthStatus (NodeHealthStatus healthStatus)
specifier|public
specifier|synchronized
name|void
name|setNodeHealthStatus
parameter_list|(
name|NodeHealthStatus
name|healthStatus
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|healthStatus
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearNodeHealthStatus
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|nodeHealthStatus
operator|=
name|healthStatus
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContainersUtilization ()
specifier|public
name|ResourceUtilization
name|getContainersUtilization
parameter_list|()
block|{
name|NodeStatusProtoOrBuilder
name|p
init|=
name|this
operator|.
name|viaProto
condition|?
name|this
operator|.
name|proto
else|:
name|this
operator|.
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasContainersUtilization
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getContainersUtilization
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setContainersUtilization ( ResourceUtilization containersUtilization)
specifier|public
name|void
name|setContainersUtilization
parameter_list|(
name|ResourceUtilization
name|containersUtilization
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|containersUtilization
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|builder
operator|.
name|clearContainersUtilization
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|builder
operator|.
name|setContainersUtilization
argument_list|(
name|convertToProtoFormat
argument_list|(
name|containersUtilization
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|convertToProtoFormat (NodeId nodeId)
specifier|private
name|NodeIdProto
name|convertToProtoFormat
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
operator|(
operator|(
name|NodeIdPBImpl
operator|)
name|nodeId
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (NodeIdProto proto)
specifier|private
name|NodeId
name|convertFromProtoFormat
parameter_list|(
name|NodeIdProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|NodeIdPBImpl
argument_list|(
name|proto
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat ( NodeHealthStatus healthStatus)
specifier|private
name|NodeHealthStatusProto
name|convertToProtoFormat
parameter_list|(
name|NodeHealthStatus
name|healthStatus
parameter_list|)
block|{
return|return
operator|(
operator|(
name|NodeHealthStatusPBImpl
operator|)
name|healthStatus
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (NodeHealthStatusProto proto)
specifier|private
name|NodeHealthStatus
name|convertFromProtoFormat
parameter_list|(
name|NodeHealthStatusProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|NodeHealthStatusPBImpl
argument_list|(
name|proto
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat (ContainerStatusProto c)
specifier|private
name|ContainerStatusPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ContainerStatusProto
name|c
parameter_list|)
block|{
return|return
operator|new
name|ContainerStatusPBImpl
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (ContainerStatus c)
specifier|private
name|ContainerStatusProto
name|convertToProtoFormat
parameter_list|(
name|ContainerStatus
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ContainerStatusPBImpl
operator|)
name|c
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (ApplicationIdProto c)
specifier|private
name|ApplicationIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ApplicationIdProto
name|c
parameter_list|)
block|{
return|return
operator|new
name|ApplicationIdPBImpl
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (ApplicationId c)
specifier|private
name|ApplicationIdProto
name|convertToProtoFormat
parameter_list|(
name|ApplicationId
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ApplicationIdPBImpl
operator|)
name|c
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertToProtoFormat (ResourceUtilization r)
specifier|private
name|ResourceUtilizationProto
name|convertToProtoFormat
parameter_list|(
name|ResourceUtilization
name|r
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ResourceUtilizationPBImpl
operator|)
name|r
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat ( ResourceUtilizationProto p)
specifier|private
name|ResourceUtilizationPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ResourceUtilizationProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ResourceUtilizationPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
end_class

end_unit

