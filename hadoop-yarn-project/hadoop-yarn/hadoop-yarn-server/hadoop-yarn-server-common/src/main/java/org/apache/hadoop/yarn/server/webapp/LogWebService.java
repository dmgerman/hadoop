begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|ClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|client
operator|.
name|urlconnection
operator|.
name|HttpURLConnectionFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|client
operator|.
name|urlconnection
operator|.
name|URLConnectionClientHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|util
operator|.
name|MultivaluedMapImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ContainerMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnJacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DefaultValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|QueryParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_comment
comment|/**  * Support only ATSv2 client only.  */
end_comment

begin_class
DECL|class|LogWebService
annotation|@
name|Singleton
annotation|@
name|Path
argument_list|(
literal|"/ws/v2/applicationlog"
argument_list|)
specifier|public
class|class
name|LogWebService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogWebService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RESOURCE_URI_STR_V2
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_URI_STR_V2
init|=
literal|"/ws/v2/timeline/"
decl_stmt|;
DECL|field|NM_DOWNLOAD_URI_STR
specifier|private
specifier|static
specifier|final
name|String
name|NM_DOWNLOAD_URI_STR
init|=
literal|"/ws/v1/node/containers"
decl_stmt|;
DECL|field|JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|yarnConf
specifier|private
specifier|static
name|Configuration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|factory
specifier|private
specifier|static
name|LogAggregationFileControllerFactory
name|factory
decl_stmt|;
DECL|field|base
specifier|private
specifier|static
name|String
name|base
decl_stmt|;
DECL|field|defaultClusterid
specifier|private
specifier|static
name|String
name|defaultClusterid
decl_stmt|;
DECL|field|webTimelineClient
specifier|private
specifier|volatile
name|Client
name|webTimelineClient
decl_stmt|;
static|static
block|{
name|init
argument_list|()
expr_stmt|;
block|}
comment|// initialize all the common resources - order is important
DECL|method|init ()
specifier|private
specifier|static
name|void
name|init
parameter_list|()
block|{
name|factory
operator|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|base
operator|=
name|JOINER
operator|.
name|join
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|yarnConf
argument_list|)
argument_list|,
name|WebAppUtils
operator|.
name|getTimelineReaderWebAppURLWithoutScheme
argument_list|(
name|yarnConf
argument_list|)
argument_list|,
name|RESOURCE_URI_STR_V2
argument_list|)
expr_stmt|;
name|defaultClusterid
operator|=
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized LogWeService with clusterid "
operator|+
name|defaultClusterid
operator|+
literal|" for URI: "
operator|+
name|base
argument_list|)
expr_stmt|;
block|}
DECL|method|createTimelineWebClient ()
specifier|private
name|Client
name|createTimelineWebClient
parameter_list|()
block|{
name|ClientConfig
name|cfg
init|=
operator|new
name|DefaultClientConfig
argument_list|()
decl_stmt|;
name|cfg
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|YarnJacksonJaxbJsonProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|Client
name|client
init|=
operator|new
name|Client
argument_list|(
operator|new
name|URLConnectionClientHandler
argument_list|(
operator|new
name|HttpURLConnectionFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpURLConnection
name|getHttpURLConnection
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
operator|new
name|AuthenticatedURL
argument_list|()
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"LogWeService:Connecetion created."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|conn
return|;
block|}
block|}
argument_list|)
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
return|return
name|client
return|;
block|}
DECL|method|initForReadableEndpoints (HttpServletResponse response)
specifier|private
name|void
name|initForReadableEndpoints
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
comment|// clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns log file's name as well as current file size for a container.    *    * @param req                HttpServletRequest    * @param res                HttpServletResponse    * @param containerIdStr     The container ID    * @param nmId               The Node Manager NodeId    * @param redirectedFromNode Whether this is a redirected request from NM    * @return The log file's name and current file size    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers/{containerid}/logs"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
argument_list|)
DECL|method|getContainerLogsInfo (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) @DefaultValue(R) boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId)
specifier|public
name|Response
name|getContainerLogsInfo
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|NM_ID
argument_list|)
name|String
name|nmId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|REDIRECTED_FROM_NODE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
name|boolean
name|redirectedFromNode
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CLUSTER_ID
argument_list|)
name|String
name|clusterId
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
name|initForReadableEndpoints
argument_list|(
name|res
argument_list|)
expr_stmt|;
try|try
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"invalid container id, "
operator|+
name|containerIdStr
argument_list|)
throw|;
block|}
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AppInfo
name|appInfo
decl_stmt|;
try|try
block|{
name|appInfo
operator|=
name|getApp
argument_list|(
name|req
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// directly find logs from HDFS.
return|return
name|LogWebServiceUtils
operator|.
name|getContainerLogMeta
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// if the application finishes, directly find logs
comment|// from HDFS.
if|if
condition|(
name|LogWebServiceUtils
operator|.
name|isFinishedState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|LogWebServiceUtils
operator|.
name|getContainerLogMeta
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|LogWebServiceUtils
operator|.
name|isRunningState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|appOwner
init|=
name|appInfo
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nmId
operator|!=
literal|null
operator|&&
operator|!
name|nmId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|nodeHttpAddress
operator|=
name|LogWebServiceUtils
operator|.
name|getNMWebAddressFromRM
argument_list|(
name|yarnConf
argument_list|,
name|nmId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerInfo
name|containerInfo
decl_stmt|;
try|try
block|{
name|containerInfo
operator|=
name|getContainer
argument_list|(
name|req
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// return log meta for the aggregated logs if exists.
comment|// It will also return empty log meta for the local logs.
return|return
name|LogWebServiceUtils
operator|.
name|getContainerLogMeta
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|nodeHttpAddress
operator|=
name|containerInfo
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
comment|// make sure nodeHttpAddress is not null and not empty. Otherwise,
comment|// we would only get log meta for aggregated logs instead of
comment|// re-directing the request
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
operator|||
name|redirectedFromNode
condition|)
block|{
comment|// return log meta for the aggregated logs if exists.
comment|// It will also return empty log meta for the local logs.
comment|// If this is the redirect request from NM, we should not
comment|// re-direct the request back. Simply output the aggregated log meta.
return|return
name|LogWebServiceUtils
operator|.
name|getContainerLogMeta
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
name|String
name|uri
init|=
literal|"/"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"/logs"
decl_stmt|;
name|String
name|resURI
init|=
name|JOINER
operator|.
name|join
argument_list|(
name|LogWebServiceUtils
operator|.
name|getAbsoluteNMWebAddress
argument_list|(
name|yarnConf
argument_list|,
name|nodeHttpAddress
argument_list|)
argument_list|,
name|NM_DOWNLOAD_URI_STR
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resURI
operator|+=
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
name|Response
operator|.
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Location"
argument_list|,
name|resURI
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"The application is not at Running or Finished State."
argument_list|)
throw|;
block|}
block|}
DECL|method|getContainer (HttpServletRequest req, String appId, String containerId, String clusterId)
specifier|protected
name|ContainerInfo
name|getContainer
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|LogWebServiceUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|String
name|cId
init|=
name|clusterId
operator|!=
literal|null
condition|?
name|clusterId
else|:
name|defaultClusterid
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fields"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|JOINER
operator|.
name|join
argument_list|(
literal|"clusters/"
argument_list|,
name|cId
argument_list|,
literal|"/apps/"
argument_list|,
name|appId
argument_list|,
literal|"/entities/"
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_CONTAINER
operator|.
name|toString
argument_list|()
argument_list|,
literal|"/"
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|TimelineEntity
name|conEntity
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|conEntity
operator|=
name|getEntity
argument_list|(
name|path
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUserName
argument_list|(
name|params
argument_list|,
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|conEntity
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TimelineEntity
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getEntity
argument_list|(
name|path
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogWebServiceUtils
operator|.
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conEntity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|nodeHttpAddress
init|=
operator|(
name|String
operator|)
name|conEntity
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_HTTP_ADDRESS_INFO
argument_list|)
decl_stmt|;
name|ContainerInfo
name|info
init|=
operator|new
name|ContainerInfo
argument_list|(
name|nodeHttpAddress
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
DECL|method|getApp (HttpServletRequest req, String appId, String clusterId)
specifier|protected
name|AppInfo
name|getApp
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|clusterId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|LogWebServiceUtils
operator|.
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|String
name|cId
init|=
name|clusterId
operator|!=
literal|null
condition|?
name|clusterId
else|:
name|defaultClusterid
decl_stmt|;
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fields"
argument_list|,
literal|"INFO"
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|JOINER
operator|.
name|join
argument_list|(
literal|"clusters/"
argument_list|,
name|cId
argument_list|,
literal|"/apps/"
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|TimelineEntity
name|appEntity
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|appEntity
operator|=
name|getEntity
argument_list|(
name|path
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setUserName
argument_list|(
name|params
argument_list|,
name|callerUGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|appEntity
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TimelineEntity
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getEntity
argument_list|(
name|path
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogWebServiceUtils
operator|.
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appEntity
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|appOwner
init|=
operator|(
name|String
operator|)
name|appEntity
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|USER_ENTITY_INFO
argument_list|)
decl_stmt|;
name|String
name|state
init|=
operator|(
name|String
operator|)
name|appEntity
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
decl_stmt|;
name|YarnApplicationState
name|appState
init|=
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|AppInfo
name|info
init|=
operator|new
name|AppInfo
argument_list|(
name|appState
argument_list|,
name|appOwner
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
comment|/**    * Returns the contents of a container's log file in plain text.    *    * @param req                HttpServletRequest    * @param res                HttpServletResponse    * @param containerIdStr     The container ID    * @param filename           The name of the log file    * @param format             The content type    * @param size               the size of the log file    * @param nmId               The Node Manager NodeId    * @param redirectedFromNode Whether this is the redirect request from NM    * @return The contents of the container's log file    */
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containers/{containerid}/logs/{filename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_PLAIN
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
DECL|method|getContainerLogFile ( @ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId)
annotation|@
name|InterfaceStability
operator|.
name|Unstable
specifier|public
name|Response
name|getContainerLogFile
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_LOG_FILE_NAME
argument_list|)
name|String
name|filename
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_FORMAT
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_SIZE
argument_list|)
name|String
name|size
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|NM_ID
argument_list|)
name|String
name|nmId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|REDIRECTED_FROM_NODE
argument_list|)
name|boolean
name|redirectedFromNode
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CLUSTER_ID
argument_list|)
name|String
name|clusterId
parameter_list|)
block|{
return|return
name|getLogs
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|size
argument_list|,
name|nmId
argument_list|,
name|redirectedFromNode
argument_list|,
name|clusterId
argument_list|)
return|;
block|}
comment|//TODO: YARN-4993: Refactory ContainersLogsBlock, AggregatedLogsBlock and
comment|//      container log webservice introduced in AHS to minimize
comment|//      the duplication.
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/containerlogs/{containerid}/{filename}"
argument_list|)
annotation|@
name|Produces
argument_list|(
block|{
name|MediaType
operator|.
name|TEXT_PLAIN
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
block|}
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|getLogs (@ontext HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) @DefaultValue(R) boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId)
specifier|public
name|Response
name|getLogs
parameter_list|(
annotation|@
name|Context
name|HttpServletRequest
name|req
parameter_list|,
annotation|@
name|Context
name|HttpServletResponse
name|res
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_ID
argument_list|)
name|String
name|containerIdStr
parameter_list|,
annotation|@
name|PathParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CONTAINER_LOG_FILE_NAME
argument_list|)
name|String
name|filename
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_FORMAT
argument_list|)
name|String
name|format
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|RESPONSE_CONTENT_SIZE
argument_list|)
name|String
name|size
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|NM_ID
argument_list|)
name|String
name|nmId
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|REDIRECTED_FROM_NODE
argument_list|)
annotation|@
name|DefaultValue
argument_list|(
literal|"false"
argument_list|)
name|boolean
name|redirectedFromNode
parameter_list|,
annotation|@
name|QueryParam
argument_list|(
name|YarnWebServiceParams
operator|.
name|CLUSTER_ID
argument_list|)
name|String
name|clusterId
parameter_list|)
block|{
name|initForReadableEndpoints
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
decl_stmt|;
try|try
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
return|return
name|LogWebServiceUtils
operator|.
name|createBadResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|,
literal|"Invalid ContainerId: "
operator|+
name|containerIdStr
argument_list|)
return|;
block|}
specifier|final
name|long
name|length
init|=
name|LogWebServiceUtils
operator|.
name|parseLongParam
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AppInfo
name|appInfo
decl_stmt|;
try|try
block|{
name|appInfo
operator|=
name|getApp
argument_list|(
name|req
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// directly find logs from HDFS.
return|return
name|LogWebServiceUtils
operator|.
name|sendStreamOutputResponse
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
return|;
block|}
name|String
name|appOwner
init|=
name|appInfo
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|LogWebServiceUtils
operator|.
name|isFinishedState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
comment|// directly find logs from HDFS.
return|return
name|LogWebServiceUtils
operator|.
name|sendStreamOutputResponse
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|if
condition|(
name|LogWebServiceUtils
operator|.
name|isRunningState
argument_list|(
name|appInfo
operator|.
name|getAppState
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|nodeHttpAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nmId
operator|!=
literal|null
operator|&&
operator|!
name|nmId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|nodeHttpAddress
operator|=
name|LogWebServiceUtils
operator|.
name|getNMWebAddressFromRM
argument_list|(
name|yarnConf
argument_list|,
name|nmId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ContainerInfo
name|containerInfo
decl_stmt|;
try|try
block|{
name|containerInfo
operator|=
name|getContainer
argument_list|(
name|req
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// output the aggregated logs
return|return
name|LogWebServiceUtils
operator|.
name|sendStreamOutputResponse
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
return|;
block|}
name|nodeHttpAddress
operator|=
name|containerInfo
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
comment|// make sure nodeHttpAddress is not null and not empty. Otherwise,
comment|// we would only get aggregated logs instead of re-directing the
comment|// request.
comment|// If this is the redirect request from NM, we should not re-direct the
comment|// request back. Simply output the aggregated logs.
if|if
condition|(
name|nodeHttpAddress
operator|==
literal|null
operator|||
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
operator|||
name|redirectedFromNode
condition|)
block|{
comment|// output the aggregated logs
return|return
name|LogWebServiceUtils
operator|.
name|sendStreamOutputResponse
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|filename
argument_list|,
name|format
argument_list|,
name|length
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
name|String
name|uri
init|=
literal|"/"
operator|+
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"/logs/"
operator|+
name|filename
decl_stmt|;
name|String
name|resURI
init|=
name|JOINER
operator|.
name|join
argument_list|(
name|LogWebServiceUtils
operator|.
name|getAbsoluteNMWebAddress
argument_list|(
name|yarnConf
argument_list|,
name|nodeHttpAddress
argument_list|)
argument_list|,
name|NM_DOWNLOAD_URI_STR
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|req
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resURI
operator|+=
literal|"?"
operator|+
name|query
expr_stmt|;
block|}
name|Response
operator|.
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
name|HttpServletResponse
operator|.
name|SC_TEMPORARY_REDIRECT
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Location"
argument_list|,
name|resURI
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|LogWebServiceUtils
operator|.
name|createBadResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|NOT_FOUND
argument_list|,
literal|"The application is not at Running or Finished State."
argument_list|)
return|;
block|}
block|}
DECL|class|AppInfo
specifier|protected
specifier|static
class|class
name|AppInfo
block|{
DECL|field|appState
specifier|private
name|YarnApplicationState
name|appState
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|method|AppInfo (YarnApplicationState appState, String user)
name|AppInfo
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|appState
operator|=
name|appState
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|getAppState ()
specifier|public
name|YarnApplicationState
name|getAppState
parameter_list|()
block|{
return|return
name|this
operator|.
name|appState
return|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
block|}
DECL|class|ContainerInfo
specifier|protected
specifier|static
class|class
name|ContainerInfo
block|{
DECL|field|nodeHttpAddress
specifier|private
name|String
name|nodeHttpAddress
decl_stmt|;
DECL|method|ContainerInfo (String nodeHttpAddress)
name|ContainerInfo
parameter_list|(
name|String
name|nodeHttpAddress
parameter_list|)
block|{
name|this
operator|.
name|nodeHttpAddress
operator|=
name|nodeHttpAddress
expr_stmt|;
block|}
DECL|method|getNodeHttpAddress ()
specifier|public
name|String
name|getNodeHttpAddress
parameter_list|()
block|{
return|return
name|nodeHttpAddress
return|;
block|}
block|}
DECL|method|getEntity (String path, MultivaluedMap<String, String> params)
annotation|@
name|VisibleForTesting
specifier|protected
name|TimelineEntity
name|getEntity
parameter_list|(
name|String
name|path
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientResponse
name|resp
init|=
name|getClient
argument_list|()
operator|.
name|resource
argument_list|(
name|base
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resp
operator|==
literal|null
operator|||
name|resp
operator|.
name|getStatusInfo
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|ClientResponse
operator|.
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Response from the timeline reader server is "
operator|+
operator|(
operator|(
name|resp
operator|==
literal|null
operator|)
condition|?
literal|"null"
else|:
literal|"not successful,"
operator|+
literal|" HTTP error code: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
operator|+
literal|", Server response:\n"
operator|+
name|resp
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|TimelineEntity
name|entity
init|=
name|resp
operator|.
name|getEntity
argument_list|(
name|TimelineEntity
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|entity
return|;
block|}
DECL|method|getClient ()
specifier|private
name|Client
name|getClient
parameter_list|()
block|{
if|if
condition|(
name|webTimelineClient
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|LogWebService
operator|.
name|class
init|)
block|{
if|if
condition|(
name|webTimelineClient
operator|==
literal|null
condition|)
block|{
name|webTimelineClient
operator|=
name|createTimelineWebClient
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|webTimelineClient
return|;
block|}
comment|/**    * Set user.name in non-secure mode to delegate to next rest call.    */
DECL|method|setUserName (MultivaluedMap<String, String> params, String user)
specifier|private
name|void
name|setUserName
parameter_list|(
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|user
parameter_list|)
block|{
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"user.name"
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

