begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  * SubClusterHeartbeatRequest is a report of the runtime information of the  * subcluster that is participating in federation.  *  *<p>  * It includes information such as:  *<ul>  *<li>{@link SubClusterId}</li>  *<li>The URL of the subcluster</li>  *<li>The timestamp representing the last start time of the subCluster</li>  *<li>{@code FederationsubClusterState}</li>  *<li>The current capacity and utilization of the subCluster</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|SubClusterHeartbeatRequest
specifier|public
specifier|abstract
class|class
name|SubClusterHeartbeatRequest
block|{
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance ( SubClusterId subClusterId, SubClusterState state, String capability)
specifier|public
specifier|static
name|SubClusterHeartbeatRequest
name|newInstance
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|SubClusterState
name|state
parameter_list|,
name|String
name|capability
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
literal|0
argument_list|,
name|state
argument_list|,
name|capability
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance ( SubClusterId subClusterId, long lastHeartBeat, SubClusterState state, String capability)
specifier|public
specifier|static
name|SubClusterHeartbeatRequest
name|newInstance
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|,
name|long
name|lastHeartBeat
parameter_list|,
name|SubClusterState
name|state
parameter_list|,
name|String
name|capability
parameter_list|)
block|{
name|SubClusterHeartbeatRequest
name|subClusterHeartbeatRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubClusterHeartbeatRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|subClusterHeartbeatRequest
operator|.
name|setSubClusterId
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
name|subClusterHeartbeatRequest
operator|.
name|setLastHeartBeat
argument_list|(
name|lastHeartBeat
argument_list|)
expr_stmt|;
name|subClusterHeartbeatRequest
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|subClusterHeartbeatRequest
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
return|return
name|subClusterHeartbeatRequest
return|;
block|}
comment|/**    * Get the {@link SubClusterId} representing the unique identifier of the    * subcluster.    *    * @return the subcluster identifier    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getSubClusterId ()
specifier|public
specifier|abstract
name|SubClusterId
name|getSubClusterId
parameter_list|()
function_decl|;
comment|/**    * Set the {@link SubClusterId} representing the unique identifier of the    * subCluster.    *    * @param subClusterId the subCluster identifier    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setSubClusterId (SubClusterId subClusterId)
specifier|public
specifier|abstract
name|void
name|setSubClusterId
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
function_decl|;
comment|/**    * Get the last heart beat time of the subcluster.    *    * @return the state of the subcluster    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getLastHeartBeat ()
specifier|public
specifier|abstract
name|long
name|getLastHeartBeat
parameter_list|()
function_decl|;
comment|/**    * Set the last heartbeat time of the subcluster.    *    * @param time the last heartbeat time of the subcluster    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setLastHeartBeat (long time)
specifier|public
specifier|abstract
name|void
name|setLastHeartBeat
parameter_list|(
name|long
name|time
parameter_list|)
function_decl|;
comment|/**    * Get the {@link SubClusterState} of the subcluster.    *    * @return the state of the subcluster    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getState ()
specifier|public
specifier|abstract
name|SubClusterState
name|getState
parameter_list|()
function_decl|;
comment|/**    * Set the {@link SubClusterState} of the subcluster.    *    * @param state the state of the subCluster    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setState (SubClusterState state)
specifier|public
specifier|abstract
name|void
name|setState
parameter_list|(
name|SubClusterState
name|state
parameter_list|)
function_decl|;
comment|/**    * Get the current capacity and utilization of the subcluster. This is the    * JAXB marshalled string representation of the<code>ClusterMetrics</code>.    *    * @return the current capacity and utilization of the subcluster    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getCapability ()
specifier|public
specifier|abstract
name|String
name|getCapability
parameter_list|()
function_decl|;
comment|/**    * Set the current capacity and utilization of the subCluster. This is the    * JAXB marshalled string representation of the<code>ClusterMetrics</code>.    *    * @param capability the current capacity and utilization of the subcluster    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setCapability (String capability)
specifier|public
specifier|abstract
name|void
name|setCapability
parameter_list|(
name|String
name|capability
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SubClusterHeartbeatRequest [getSubClusterId() = "
operator|+
name|getSubClusterId
argument_list|()
operator|+
literal|", getState() = "
operator|+
name|getState
argument_list|()
operator|+
literal|", getLastHeartBeat = "
operator|+
name|getLastHeartBeat
argument_list|()
operator|+
literal|", getCapability() = "
operator|+
name|getCapability
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

