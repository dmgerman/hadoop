begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  * Default simple sub-cluster and rack resolver class.  *  * This class expects a three-column comma separated file, specified in  * yarn.federation.machine-list. Each line of the file should be of the format:  *  * nodeName, subClusterId, rackName  *  * Lines that do not follow this format will be ignored. This resolver only  * loads the file when load() is explicitly called; it will not react to changes  * to the file.  *  * It is case-insensitive on the rack and node names and ignores  * leading/trailing whitespace.  *  */
end_comment

begin_class
DECL|class|DefaultSubClusterResolverImpl
specifier|public
class|class
name|DefaultSubClusterResolverImpl
extends|extends
name|AbstractSubClusterResolver
implements|implements
name|SubClusterResolver
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultSubClusterResolverImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|// Index of the node hostname in the machine info file.
DECL|field|NODE_NAME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|NODE_NAME_INDEX
init|=
literal|0
decl_stmt|;
comment|// Index of the sub-cluster ID in the machine info file.
DECL|field|SUBCLUSTER_ID_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|SUBCLUSTER_ID_INDEX
init|=
literal|1
decl_stmt|;
comment|// Index of the rack name ID in the machine info file.
DECL|field|RACK_NAME_INDEX
specifier|private
specifier|static
specifier|final
name|int
name|RACK_NAME_INDEX
init|=
literal|2
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|getSubClusterForNode (String nodename)
specifier|public
name|SubClusterId
name|getSubClusterForNode
parameter_list|(
name|String
name|nodename
parameter_list|)
throws|throws
name|YarnException
block|{
return|return
name|super
operator|.
name|getSubClusterForNode
argument_list|(
name|nodename
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|load ()
specifier|public
name|void
name|load
parameter_list|()
block|{
name|String
name|fileName
init|=
name|this
operator|.
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_MACHINE_LIST
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
operator|||
name|fileName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The machine list file path is not specified in the configuration"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Path
name|file
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|file
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The configured machine list file path {} does not exist"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|reader
operator|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|file
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|tokens
init|=
name|line
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|String
name|nodeName
init|=
name|tokens
index|[
name|NODE_NAME_INDEX
index|]
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|tokens
index|[
name|SUBCLUSTER_ID_INDEX
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rackName
init|=
name|tokens
index|[
name|RACK_NAME_INDEX
index|]
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading node into resolver: {} --> {}"
argument_list|,
name|nodeName
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading rack into resolver: {} --> {} "
argument_list|,
name|rackName
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|getNodeToSubCluster
argument_list|()
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|loadRackToSubCluster
argument_list|(
name|rackName
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Skipping malformed line in machine list: "
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully loaded file {}"
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse file "
operator|+
name|fileName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadRackToSubCluster (String rackName, SubClusterId subClusterId)
specifier|private
name|void
name|loadRackToSubCluster
parameter_list|(
name|String
name|rackName
parameter_list|,
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
name|String
name|rackNameUpper
init|=
name|rackName
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getRackToSubClusters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|rackNameUpper
argument_list|)
condition|)
block|{
name|this
operator|.
name|getRackToSubClusters
argument_list|()
operator|.
name|put
argument_list|(
name|rackNameUpper
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|getRackToSubClusters
argument_list|()
operator|.
name|get
argument_list|(
name|rackNameUpper
argument_list|)
operator|.
name|add
argument_list|(
name|subClusterId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSubClustersForRack (String rackname)
specifier|public
name|Set
argument_list|<
name|SubClusterId
argument_list|>
name|getSubClustersForRack
parameter_list|(
name|String
name|rackname
parameter_list|)
throws|throws
name|YarnException
block|{
return|return
name|super
operator|.
name|getSubClustersForRack
argument_list|(
name|rackname
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

