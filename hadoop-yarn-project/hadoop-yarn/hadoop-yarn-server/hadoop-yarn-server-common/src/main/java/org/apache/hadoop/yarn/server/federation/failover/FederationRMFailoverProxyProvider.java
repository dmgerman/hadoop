begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.failover
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|RMFailoverProxyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|RMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationStateStoreFacade
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * A FailoverProxyProvider implementation that uses the  * {@code FederationStateStore} to determine the ResourceManager to connect to.  * This supports both HA and regular mode which is controlled by configuration.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FederationRMFailoverProxyProvider
specifier|public
class|class
name|FederationRMFailoverProxyProvider
parameter_list|<
name|T
parameter_list|>
implements|implements
name|RMFailoverProxyProvider
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FederationRMFailoverProxyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmProxy
specifier|private
name|RMProxy
argument_list|<
name|T
argument_list|>
name|rmProxy
decl_stmt|;
DECL|field|protocol
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
decl_stmt|;
DECL|field|current
specifier|private
name|T
name|current
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|facade
specifier|private
name|FederationStateStoreFacade
name|facade
decl_stmt|;
DECL|field|subClusterId
specifier|private
name|SubClusterId
name|subClusterId
decl_stmt|;
DECL|field|originalUser
specifier|private
name|UserGroupInformation
name|originalUser
decl_stmt|;
DECL|field|federationFailoverEnabled
specifier|private
name|boolean
name|federationFailoverEnabled
decl_stmt|;
DECL|field|flushFacadeCacheForYarnRMAddr
specifier|private
name|boolean
name|flushFacadeCacheForYarnRMAddr
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Configuration configuration, RMProxy<T> proxy, Class<T> proto)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|RMProxy
argument_list|<
name|T
argument_list|>
name|proxy
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|proto
parameter_list|)
block|{
name|this
operator|.
name|rmProxy
operator|=
name|proxy
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|proto
expr_stmt|;
name|this
operator|.
name|rmProxy
operator|.
name|checkAllowedProtocols
argument_list|(
name|this
operator|.
name|protocol
argument_list|)
expr_stmt|;
name|String
name|clusterId
init|=
name|configuration
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|clusterId
argument_list|,
literal|"Missing RM ClusterId"
argument_list|)
expr_stmt|;
name|this
operator|.
name|subClusterId
operator|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|this
operator|.
name|facade
operator|=
name|FederationStateStoreFacade
operator|.
name|getInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|configuration
operator|instanceof
name|YarnConfiguration
condition|)
block|{
name|this
operator|.
name|conf
operator|=
operator|(
name|YarnConfiguration
operator|)
name|configuration
expr_stmt|;
block|}
name|federationFailoverEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_FAILOVER_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_FAILOVER_ENABLED
argument_list|)
expr_stmt|;
name|flushFacadeCacheForYarnRMAddr
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_FLUSH_CACHE_FOR_RM_ADDR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FEDERATION_FLUSH_CACHE_FOR_RM_ADDR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_KEY
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_RETRIES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_CLIENT_FAILOVER_RETRIES
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|originalUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initialized Federation proxy for user: {}"
argument_list|,
name|this
operator|.
name|originalUser
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not get information of requester, ignoring for now."
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalUser
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|createRMProxy (InetSocketAddress rmAddress)
specifier|protected
name|T
name|createRMProxy
parameter_list|(
name|InetSocketAddress
name|rmAddress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|rmProxy
operator|.
name|getProxy
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|rmAddress
argument_list|)
return|;
block|}
DECL|method|getProxyInternal (boolean isFailover)
specifier|private
name|T
name|getProxyInternal
parameter_list|(
name|boolean
name|isFailover
parameter_list|)
block|{
name|SubClusterInfo
name|subClusterInfo
decl_stmt|;
comment|// Use the existing proxy as a backup in case getting the new proxy fails.
comment|// Note that if the first time it fails, the backup is also null. In that
comment|// case we will hit NullPointerException and throw it back to AM.
name|T
name|proxy
init|=
name|this
operator|.
name|current
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing over to the ResourceManager for SubClusterId: {}"
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|subClusterInfo
operator|=
name|facade
operator|.
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|,
name|this
operator|.
name|flushFacadeCacheForYarnRMAddr
operator|&&
name|isFailover
argument_list|)
expr_stmt|;
comment|// updating the conf with the refreshed RM addresses as proxy
comment|// creations are based out of conf
name|updateRMAddress
argument_list|(
name|subClusterInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|originalUser
operator|==
literal|null
condition|)
block|{
name|InetSocketAddress
name|rmAddress
init|=
name|rmProxy
operator|.
name|getRMAddress
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to {} subClusterId {} with protocol {}"
operator|+
literal|" without a proxy user"
argument_list|,
name|rmAddress
argument_list|,
name|subClusterId
argument_list|,
name|protocol
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|createRMProxy
argument_list|(
name|rmAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the original ugi exists, always use that to create proxy because
comment|// it contains up-to-date AMRMToken
name|proxy
operator|=
name|this
operator|.
name|originalUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|InetSocketAddress
name|rmAddress
init|=
name|rmProxy
operator|.
name|getRMAddress
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to {} subClusterId {} with protocol {} as user {}"
argument_list|,
name|rmAddress
argument_list|,
name|subClusterId
argument_list|,
name|protocol
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|originalUser
argument_list|)
expr_stmt|;
return|return
name|createRMProxy
argument_list|(
name|rmAddress
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while trying to create proxy to the ResourceManager"
operator|+
literal|" for SubClusterId: {}"
argument_list|,
name|subClusterId
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Create initial proxy to the ResourceManager for"
operator|+
literal|" SubClusterId %s failed"
argument_list|,
name|subClusterId
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|proxy
return|;
block|}
DECL|method|updateRMAddress (SubClusterInfo subClusterInfo)
specifier|private
name|void
name|updateRMAddress
parameter_list|(
name|SubClusterInfo
name|subClusterInfo
parameter_list|)
block|{
if|if
condition|(
name|subClusterInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|protocol
operator|==
name|ApplicationClientProtocol
operator|.
name|class
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|subClusterInfo
operator|.
name|getClientRMServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|==
name|ApplicationMasterProtocol
operator|.
name|class
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|subClusterInfo
operator|.
name|getAMRMServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|==
name|ResourceManagerAdministrationProtocol
operator|.
name|class
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|subClusterInfo
operator|.
name|getRMAdminServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
specifier|synchronized
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|current
operator|=
name|getProxyInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|(
name|current
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|performFailover (T currentProxy)
specifier|public
specifier|synchronized
name|void
name|performFailover
parameter_list|(
name|T
name|currentProxy
parameter_list|)
block|{
comment|// It will not return null proxy here
name|current
operator|=
name|getProxyInternal
argument_list|(
name|federationFailoverEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
name|currentProxy
condition|)
block|{
name|closeInternal
argument_list|(
name|currentProxy
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInterface ()
specifier|public
name|Class
argument_list|<
name|T
argument_list|>
name|getInterface
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
DECL|method|closeInternal (T currentProxy)
specifier|private
name|void
name|closeInternal
parameter_list|(
name|T
name|currentProxy
parameter_list|)
block|{
if|if
condition|(
name|currentProxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentProxy
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|currentProxy
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while trying to close proxy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|currentProxy
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Close all the proxy objects which have been opened over the lifetime of    * this proxy provider.    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closeInternal
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

