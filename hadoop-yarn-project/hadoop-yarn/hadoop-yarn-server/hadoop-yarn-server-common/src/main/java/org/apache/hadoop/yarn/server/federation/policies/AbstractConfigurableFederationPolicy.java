begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|dao
operator|.
name|WeightedPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|NoActiveSubclustersException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_comment
comment|/**  * Base abstract class for a weighted {@link ConfigurableFederationPolicy}.  */
end_comment

begin_class
DECL|class|AbstractConfigurableFederationPolicy
specifier|public
specifier|abstract
class|class
name|AbstractConfigurableFederationPolicy
implements|implements
name|ConfigurableFederationPolicy
block|{
DECL|field|policyInfo
specifier|private
name|WeightedPolicyInfo
name|policyInfo
init|=
literal|null
decl_stmt|;
DECL|field|policyContext
specifier|private
name|FederationPolicyInitializationContext
name|policyContext
decl_stmt|;
DECL|field|isDirty
specifier|private
name|boolean
name|isDirty
decl_stmt|;
DECL|method|AbstractConfigurableFederationPolicy ()
specifier|public
name|AbstractConfigurableFederationPolicy
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|reinitialize ( FederationPolicyInitializationContext initializationContext)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|FederationPolicyInitializationContext
name|initializationContext
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
name|isDirty
operator|=
literal|true
expr_stmt|;
name|FederationPolicyInitializationContextValidator
operator|.
name|validate
argument_list|(
name|initializationContext
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// perform consistency checks
name|WeightedPolicyInfo
name|newPolicyInfo
init|=
name|WeightedPolicyInfo
operator|.
name|fromByteBuffer
argument_list|(
name|initializationContext
operator|.
name|getSubClusterPolicyConfiguration
argument_list|()
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
comment|// if nothing has changed skip the rest of initialization
comment|// and signal to childs that the reinit is free via isDirty var.
if|if
condition|(
name|policyInfo
operator|!=
literal|null
operator|&&
name|policyInfo
operator|.
name|equals
argument_list|(
name|newPolicyInfo
argument_list|)
condition|)
block|{
name|isDirty
operator|=
literal|false
expr_stmt|;
return|return;
block|}
name|validate
argument_list|(
name|newPolicyInfo
argument_list|)
expr_stmt|;
name|setPolicyInfo
argument_list|(
name|newPolicyInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|policyContext
operator|=
name|initializationContext
expr_stmt|;
block|}
comment|/**    * Overridable validation step for the policy configuration.    *    * @param newPolicyInfo the configuration to test.    *    * @throws FederationPolicyInitializationException if the configuration is not    *           valid.    */
DECL|method|validate (WeightedPolicyInfo newPolicyInfo)
specifier|public
name|void
name|validate
parameter_list|(
name|WeightedPolicyInfo
name|newPolicyInfo
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
if|if
condition|(
name|newPolicyInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FederationPolicyInitializationException
argument_list|(
literal|"The policy to "
operator|+
literal|"validate should not be null."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Returns true whether the last reinitialization requires actual changes, or    * was "free" as the weights have not changed. This is used by subclasses    * overriding reinitialize and calling super.reinitialize() to know wheter to    * quit early.    *    * @return whether more work is needed to initialize.    */
DECL|method|getIsDirty ()
specifier|public
name|boolean
name|getIsDirty
parameter_list|()
block|{
return|return
name|isDirty
return|;
block|}
comment|/**    * Getter method for the configuration weights.    *    * @return the {@link WeightedPolicyInfo} representing the policy    *         configuration.    */
DECL|method|getPolicyInfo ()
specifier|public
name|WeightedPolicyInfo
name|getPolicyInfo
parameter_list|()
block|{
return|return
name|policyInfo
return|;
block|}
comment|/**    * Setter method for the configuration weights.    *    * @param policyInfo the {@link WeightedPolicyInfo} representing the policy    *          configuration.    */
DECL|method|setPolicyInfo (WeightedPolicyInfo policyInfo)
specifier|public
name|void
name|setPolicyInfo
parameter_list|(
name|WeightedPolicyInfo
name|policyInfo
parameter_list|)
block|{
name|this
operator|.
name|policyInfo
operator|=
name|policyInfo
expr_stmt|;
block|}
comment|/**    * Getter method for the {@link FederationPolicyInitializationContext}.    *    * @return the context for this policy.    */
DECL|method|getPolicyContext ()
specifier|public
name|FederationPolicyInitializationContext
name|getPolicyContext
parameter_list|()
block|{
return|return
name|policyContext
return|;
block|}
comment|/**    * Setter method for the {@link FederationPolicyInitializationContext}.    *    * @param policyContext the context to assign to this policy.    */
DECL|method|setPolicyContext ( FederationPolicyInitializationContext policyContext)
specifier|public
name|void
name|setPolicyContext
parameter_list|(
name|FederationPolicyInitializationContext
name|policyContext
parameter_list|)
block|{
name|this
operator|.
name|policyContext
operator|=
name|policyContext
expr_stmt|;
block|}
comment|/**    * This methods gets active subclusters map from the {@code    * FederationStateStoreFacade} and validate it not being null/empty.    *    * @return the map of ids to info for all active subclusters.    *    * @throws YarnException if we can't get the list.    */
DECL|method|getActiveSubclusters ()
specifier|protected
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|getActiveSubclusters
parameter_list|()
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|activeSubclusters
init|=
name|getPolicyContext
argument_list|()
operator|.
name|getFederationStateStoreFacade
argument_list|()
operator|.
name|getSubClusters
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|activeSubclusters
operator|==
literal|null
operator|||
name|activeSubclusters
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|NoActiveSubclustersException
argument_list|(
literal|"Zero active subclusters, cannot pick where to send job."
argument_list|)
throw|;
block|}
return|return
name|activeSubclusters
return|;
block|}
block|}
end_class

end_unit

