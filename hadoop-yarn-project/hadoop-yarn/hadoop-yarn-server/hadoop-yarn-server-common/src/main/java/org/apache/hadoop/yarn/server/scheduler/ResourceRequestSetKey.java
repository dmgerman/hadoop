begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_comment
comment|/**  * The scheduler key for a group of {@link ResourceRequest}.  *  * TODO: after YARN-7631 is fixed by adding Resource and ExecType into  * SchedulerRequestKey, then we can directly use that.  */
end_comment

begin_class
DECL|class|ResourceRequestSetKey
specifier|public
class|class
name|ResourceRequestSetKey
extends|extends
name|SchedulerRequestKey
block|{
comment|// More ResourceRequest key fields on top of SchedulerRequestKey
DECL|field|resource
specifier|private
specifier|final
name|Resource
name|resource
decl_stmt|;
DECL|field|execType
specifier|private
specifier|final
name|ExecutionType
name|execType
decl_stmt|;
comment|/**    * Create the key object from a {@link ResourceRequest}.    *    * @param rr Resource request object    * @throws YarnException if fails    */
DECL|method|ResourceRequestSetKey (ResourceRequest rr)
specifier|public
name|ResourceRequestSetKey
parameter_list|(
name|ResourceRequest
name|rr
parameter_list|)
throws|throws
name|YarnException
block|{
name|this
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|,
name|rr
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
operator|(
operator|(
name|rr
operator|.
name|getExecutionTypeRequest
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|ExecutionType
operator|.
name|GUARANTEED
else|:
name|rr
operator|.
name|getExecutionTypeRequest
argument_list|()
operator|.
name|getExecutionType
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rr
operator|.
name|getPriority
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Null priority in RR: "
operator|+
name|rr
argument_list|)
throw|;
block|}
if|if
condition|(
name|rr
operator|.
name|getCapability
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Null resource in RR: "
operator|+
name|rr
argument_list|)
throw|;
block|}
block|}
comment|/**    * Create the key object from member objects.    *    * @param allocationRequestId allocate request id of the ask    * @param priority the priority of the ask    * @param resource the resource size of the ask    * @param execType the execution type of the ask    */
DECL|method|ResourceRequestSetKey (long allocationRequestId, Priority priority, Resource resource, ExecutionType execType)
specifier|public
name|ResourceRequestSetKey
parameter_list|(
name|long
name|allocationRequestId
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|ExecutionType
name|execType
parameter_list|)
block|{
name|super
argument_list|(
name|priority
argument_list|,
name|allocationRequestId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
if|if
condition|(
name|execType
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|execType
operator|=
name|ExecutionType
operator|.
name|GUARANTEED
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|execType
operator|=
name|execType
expr_stmt|;
block|}
block|}
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
return|;
block|}
DECL|method|getExeType ()
specifier|public
name|ExecutionType
name|getExeType
parameter_list|()
block|{
return|return
name|this
operator|.
name|execType
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|SchedulerRequestKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ResourceRequestSetKey
operator|)
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
name|ResourceRequestSetKey
name|other
init|=
operator|(
name|ResourceRequestSetKey
operator|)
name|obj
decl_stmt|;
return|return
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
operator|&&
name|this
operator|.
name|resource
operator|.
name|equals
argument_list|(
name|other
operator|.
name|resource
argument_list|)
operator|&&
name|this
operator|.
name|execType
operator|.
name|equals
argument_list|(
name|other
operator|.
name|execType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
operator|(
name|super
operator|.
name|hashCode
argument_list|()
operator|*
literal|37
operator|+
name|this
operator|.
name|resource
operator|.
name|hashCode
argument_list|()
operator|)
operator|*
literal|41
operator|)
operator|+
name|this
operator|.
name|execType
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (SchedulerRequestKey other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|SchedulerRequestKey
name|other
parameter_list|)
block|{
name|int
name|ret
init|=
name|super
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|ResourceRequestSetKey
operator|)
condition|)
block|{
return|return
name|ret
return|;
block|}
name|ResourceRequestSetKey
name|otherKey
init|=
operator|(
name|ResourceRequestSetKey
operator|)
name|other
decl_stmt|;
name|ret
operator|=
name|this
operator|.
name|resource
operator|.
name|compareTo
argument_list|(
name|otherKey
operator|.
name|resource
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|this
operator|.
name|execType
operator|.
name|compareTo
argument_list|(
name|otherKey
operator|.
name|execType
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[id:"
operator|+
name|getAllocationRequestId
argument_list|()
operator|+
literal|" p:"
operator|+
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|+
operator|(
name|this
operator|.
name|execType
operator|.
name|equals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
condition|?
literal|" G"
else|:
literal|" O"
operator|+
literal|" r:"
operator|+
name|this
operator|.
name|resource
operator|+
literal|"]"
operator|)
return|;
block|}
block|}
end_class

end_unit

