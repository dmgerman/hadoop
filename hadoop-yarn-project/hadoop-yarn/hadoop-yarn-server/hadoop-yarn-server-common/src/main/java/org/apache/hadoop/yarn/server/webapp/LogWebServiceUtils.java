begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientHandlerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogAggregationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerLogsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|YarnWebServiceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|GenericEntity
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|StreamingOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Log web service utils class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|LogWebServiceUtils
specifier|public
specifier|final
class|class
name|LogWebServiceUtils
block|{
DECL|method|LogWebServiceUtils ()
specifier|private
name|LogWebServiceUtils
parameter_list|()
block|{   }
DECL|field|DOT_JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|DOT_JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|". "
argument_list|)
decl_stmt|;
DECL|method|getContainerLogMeta ( LogAggregationFileControllerFactory factory, ApplicationId appId, String appOwner, final String nodeId, final String containerIdStr, boolean emptyLocalContainerLogMeta)
specifier|public
specifier|static
name|Response
name|getContainerLogMeta
parameter_list|(
name|LogAggregationFileControllerFactory
name|factory
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|,
specifier|final
name|String
name|containerIdStr
parameter_list|,
name|boolean
name|emptyLocalContainerLogMeta
parameter_list|)
block|{
try|try
block|{
name|ContainerLogsRequest
name|request
init|=
operator|new
name|ContainerLogsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAppOwner
argument_list|(
name|appOwner
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containerLogMeta
init|=
name|factory
operator|.
name|getFileControllerForRead
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|)
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerLogMeta
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Can not get log meta for container: "
operator|+
name|containerIdStr
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
name|containersLogsInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerLogMeta
name|meta
range|:
name|containerLogMeta
control|)
block|{
name|ContainerLogsInfo
name|logInfo
init|=
operator|new
name|ContainerLogsInfo
argument_list|(
name|meta
argument_list|,
name|ContainerLogAggregationType
operator|.
name|AGGREGATED
argument_list|)
decl_stmt|;
name|containersLogsInfo
operator|.
name|add
argument_list|(
name|logInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|emptyLocalContainerLogMeta
condition|)
block|{
name|ContainerLogMeta
name|emptyMeta
init|=
operator|new
name|ContainerLogMeta
argument_list|(
name|containerIdStr
argument_list|,
literal|"N/A"
argument_list|)
decl_stmt|;
name|ContainerLogsInfo
name|empty
init|=
operator|new
name|ContainerLogsInfo
argument_list|(
name|emptyMeta
argument_list|,
name|ContainerLogAggregationType
operator|.
name|LOCAL
argument_list|)
decl_stmt|;
name|containersLogsInfo
operator|.
name|add
argument_list|(
name|empty
argument_list|)
expr_stmt|;
block|}
name|GenericEntity
argument_list|<
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
argument_list|>
name|meta
init|=
operator|new
name|GenericEntity
argument_list|<
name|List
argument_list|<
name|ContainerLogsInfo
argument_list|>
argument_list|>
argument_list|(
name|containersLogsInfo
argument_list|)
block|{           }
decl_stmt|;
name|Response
operator|.
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|(
name|meta
argument_list|)
decl_stmt|;
comment|// Sending the X-Content-Type-Options response header with the value
comment|// nosniff will prevent Internet Explorer from MIME-sniffing a response
comment|// away from the declared content-type.
name|response
operator|.
name|header
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|sendStreamOutputResponse ( LogAggregationFileControllerFactory factory, ApplicationId appId, String appOwner, String nodeId, String containerIdStr, String fileName, String format, long bytes, boolean printEmptyLocalContainerLog)
specifier|public
specifier|static
name|Response
name|sendStreamOutputResponse
parameter_list|(
name|LogAggregationFileControllerFactory
name|factory
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|format
parameter_list|,
name|long
name|bytes
parameter_list|,
name|boolean
name|printEmptyLocalContainerLog
parameter_list|)
block|{
name|String
name|contentType
init|=
name|WebAppUtils
operator|.
name|getDefaultLogContentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
operator|&&
operator|!
name|format
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contentType
operator|=
name|WebAppUtils
operator|.
name|getSupportedLogContentType
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|String
name|errorMessage
init|=
literal|"The valid values for the parameter : format "
operator|+
literal|"are "
operator|+
name|WebAppUtils
operator|.
name|listSupportedLogContentType
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|entity
argument_list|(
name|errorMessage
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
name|StreamingOutput
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|getStreamingOutput
argument_list|(
name|factory
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|nodeId
argument_list|,
name|containerIdStr
argument_list|,
name|fileName
argument_list|,
name|bytes
argument_list|,
name|printEmptyLocalContainerLog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|createBadResponse
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
name|Response
operator|.
name|ResponseBuilder
name|response
init|=
name|Response
operator|.
name|ok
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|response
operator|.
name|header
argument_list|(
literal|"Content-Type"
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
comment|// Sending the X-Content-Type-Options response header with the value
comment|// nosniff will prevent Internet Explorer from MIME-sniffing a response
comment|// away from the declared content-type.
name|response
operator|.
name|header
argument_list|(
literal|"X-Content-Type-Options"
argument_list|,
literal|"nosniff"
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getStreamingOutput ( final LogAggregationFileControllerFactory factory, final ApplicationId appId, final String appOwner, final String nodeId, final String containerIdStr, final String logFile, final long bytes, final boolean printEmptyLocalContainerLog)
specifier|private
specifier|static
name|StreamingOutput
name|getStreamingOutput
parameter_list|(
specifier|final
name|LogAggregationFileControllerFactory
name|factory
parameter_list|,
specifier|final
name|ApplicationId
name|appId
parameter_list|,
specifier|final
name|String
name|appOwner
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|,
specifier|final
name|String
name|containerIdStr
parameter_list|,
specifier|final
name|String
name|logFile
parameter_list|,
specifier|final
name|long
name|bytes
parameter_list|,
specifier|final
name|boolean
name|printEmptyLocalContainerLog
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamingOutput
name|stream
init|=
operator|new
name|StreamingOutput
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|WebApplicationException
block|{
name|ContainerLogsRequest
name|request
init|=
operator|new
name|ContainerLogsRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAppOwner
argument_list|(
name|appOwner
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
name|request
operator|.
name|setBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
name|request
operator|.
name|setLogTypes
argument_list|(
name|logTypes
argument_list|)
expr_stmt|;
name|boolean
name|findLogs
init|=
name|factory
operator|.
name|getFileControllerForRead
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|)
operator|.
name|readAggregatedLogs
argument_list|(
name|request
argument_list|,
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|findLogs
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
literal|"Can not find logs for container:"
operator|+
name|containerIdStr
operator|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|printEmptyLocalContainerLog
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|containerIdStr
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogAggregationType: "
operator|+
name|ContainerLogAggregationType
operator|.
name|LOCAL
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogContents:\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getNoRedirectWarning
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
return|return
name|stream
return|;
block|}
DECL|method|getNoRedirectWarning ()
specifier|public
specifier|static
name|String
name|getNoRedirectWarning
parameter_list|()
block|{
return|return
literal|"We do not have NodeManager web address, so we can not "
operator|+
literal|"re-direct the request to related NodeManager "
operator|+
literal|"for local container logs."
return|;
block|}
DECL|method|rewrapAndThrowException (Exception e)
specifier|public
specifier|static
name|void
name|rewrapAndThrowException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|UndeclaredThrowableException
condition|)
block|{
name|rewrapAndThrowThrowable
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rewrapAndThrowThrowable
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rewrapAndThrowThrowable (Throwable t)
specifier|public
specifier|static
name|void
name|rewrapAndThrowThrowable
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|AuthorizationException
condition|)
block|{
throw|throw
operator|new
name|ForbiddenException
argument_list|(
name|t
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
DECL|method|parseLongParam (String bytes)
specifier|public
specifier|static
name|long
name|parseLongParam
parameter_list|(
name|String
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|bytes
operator|==
literal|null
operator|||
name|bytes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|bytes
argument_list|)
return|;
block|}
DECL|method|createBadResponse (Response.Status status, String errMessage)
specifier|public
specifier|static
name|Response
name|createBadResponse
parameter_list|(
name|Response
operator|.
name|Status
name|status
parameter_list|,
name|String
name|errMessage
parameter_list|)
block|{
name|Response
name|response
init|=
name|Response
operator|.
name|status
argument_list|(
name|status
argument_list|)
operator|.
name|entity
argument_list|(
name|DOT_JOINER
operator|.
name|join
argument_list|(
name|status
operator|.
name|toString
argument_list|()
argument_list|,
name|errMessage
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|response
return|;
block|}
DECL|method|isRunningState (YarnApplicationState appState)
specifier|public
specifier|static
name|boolean
name|isRunningState
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|)
block|{
return|return
name|appState
operator|==
name|YarnApplicationState
operator|.
name|RUNNING
return|;
block|}
DECL|method|isFinishedState (YarnApplicationState appState)
specifier|public
specifier|static
name|boolean
name|isFinishedState
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|)
block|{
return|return
name|appState
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|FAILED
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|KILLED
return|;
block|}
DECL|method|getUser (HttpServletRequest req)
specifier|protected
specifier|static
name|UserGroupInformation
name|getUser
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|req
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|callerUGI
return|;
block|}
DECL|method|getNMWebAddressFromRM (Configuration yarnConf, String nodeId)
specifier|public
specifier|static
name|String
name|getNMWebAddressFromRM
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|,
name|String
name|nodeId
parameter_list|)
throws|throws
name|ClientHandlerException
throws|,
name|UniformInterfaceException
throws|,
name|JSONException
block|{
name|JSONObject
name|nodeInfo
init|=
name|YarnWebServiceUtils
operator|.
name|getNodeInfoFromRMWebService
argument_list|(
name|yarnConf
argument_list|,
name|nodeId
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
return|return
name|nodeInfo
operator|.
name|has
argument_list|(
literal|"nodeHTTPAddress"
argument_list|)
condition|?
name|nodeInfo
operator|.
name|getString
argument_list|(
literal|"nodeHTTPAddress"
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|getAbsoluteNMWebAddress (Configuration yarnConf, String nmWebAddress)
specifier|public
specifier|static
name|String
name|getAbsoluteNMWebAddress
parameter_list|(
name|Configuration
name|yarnConf
parameter_list|,
name|String
name|nmWebAddress
parameter_list|)
block|{
if|if
condition|(
name|nmWebAddress
operator|.
name|contains
argument_list|(
name|WebAppUtils
operator|.
name|HTTP_PREFIX
argument_list|)
operator|||
name|nmWebAddress
operator|.
name|contains
argument_list|(
name|WebAppUtils
operator|.
name|HTTPS_PREFIX
argument_list|)
condition|)
block|{
return|return
name|nmWebAddress
return|;
block|}
return|return
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|yarnConf
argument_list|)
operator|+
name|nmWebAddress
return|;
block|}
block|}
end_class

end_unit

