begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Partial implementation of {@link SubClusterResolver}, containing basic  * implementations of the read methods.  */
end_comment

begin_class
DECL|class|AbstractSubClusterResolver
specifier|public
specifier|abstract
class|class
name|AbstractSubClusterResolver
implements|implements
name|SubClusterResolver
block|{
DECL|field|nodeToSubCluster
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterId
argument_list|>
name|nodeToSubCluster
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SubClusterId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rackToSubClusters
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|SubClusterId
argument_list|>
argument_list|>
name|rackToSubClusters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|SubClusterId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getSubClusterForNode (String nodename)
specifier|public
name|SubClusterId
name|getSubClusterForNode
parameter_list|(
name|String
name|nodename
parameter_list|)
throws|throws
name|YarnException
block|{
name|SubClusterId
name|subClusterId
init|=
name|this
operator|.
name|nodeToSubCluster
operator|.
name|get
argument_list|(
name|nodename
argument_list|)
decl_stmt|;
if|if
condition|(
name|subClusterId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Cannot find subClusterId for node "
operator|+
name|nodename
argument_list|)
throw|;
block|}
return|return
name|subClusterId
return|;
block|}
annotation|@
name|Override
DECL|method|getSubClustersForRack (String rackname)
specifier|public
name|Set
argument_list|<
name|SubClusterId
argument_list|>
name|getSubClustersForRack
parameter_list|(
name|String
name|rackname
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
operator|!
name|rackToSubClusters
operator|.
name|containsKey
argument_list|(
name|rackname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Cannot resolve rack "
operator|+
name|rackname
argument_list|)
throw|;
block|}
return|return
name|rackToSubClusters
operator|.
name|get
argument_list|(
name|rackname
argument_list|)
return|;
block|}
DECL|method|getNodeToSubCluster ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterId
argument_list|>
name|getNodeToSubCluster
parameter_list|()
block|{
return|return
name|nodeToSubCluster
return|;
block|}
DECL|method|getRackToSubClusters ()
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|SubClusterId
argument_list|>
argument_list|>
name|getRackToSubClusters
parameter_list|()
block|{
return|return
name|rackToSubClusters
return|;
block|}
block|}
end_class

end_unit

