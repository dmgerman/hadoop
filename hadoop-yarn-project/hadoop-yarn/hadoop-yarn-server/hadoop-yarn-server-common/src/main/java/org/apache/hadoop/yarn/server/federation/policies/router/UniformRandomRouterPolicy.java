begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|router
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyInitializationContextValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_comment
comment|/**  * This simple policy picks at uniform random among any of the currently active  * subclusters. This policy is easy to use and good for testing.  *  * NOTE: this is "almost" subsumed by the {@code WeightedRandomRouterPolicy}.  * Behavior only diverges when there are active sub-clusters that are not part  * of the "weights", in which case the {@link UniformRandomRouterPolicy} send  * load to them, while {@code WeightedRandomRouterPolicy} does not.  */
end_comment

begin_class
DECL|class|UniformRandomRouterPolicy
specifier|public
class|class
name|UniformRandomRouterPolicy
extends|extends
name|AbstractRouterPolicy
block|{
DECL|field|rand
specifier|private
name|Random
name|rand
decl_stmt|;
DECL|method|UniformRandomRouterPolicy ()
specifier|public
name|UniformRandomRouterPolicy
parameter_list|()
block|{
name|rand
operator|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reinitialize (FederationPolicyInitializationContext policyContext)
specifier|public
name|void
name|reinitialize
parameter_list|(
name|FederationPolicyInitializationContext
name|policyContext
parameter_list|)
throws|throws
name|FederationPolicyInitializationException
block|{
name|FederationPolicyInitializationContextValidator
operator|.
name|validate
argument_list|(
name|policyContext
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: this overrides AbstractRouterPolicy and ignores the weights
name|setPolicyContext
argument_list|(
name|policyContext
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simply picks a random active subCluster to start the AM (this does NOT    * depend on the weights in the policy).    *    * @param appSubmissionContext the {@link ApplicationSubmissionContext} that    *          has to be routed to an appropriate subCluster for execution.    *    * @param blackListSubClusters the list of subClusters as identified by    *          {@link SubClusterId} to blackList from the selection of the home    *          subCluster.    *    * @return a randomly chosen subcluster.    *    * @throws YarnException if there are no active subclusters.    */
annotation|@
name|Override
DECL|method|getHomeSubcluster ( ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blackListSubClusters)
specifier|public
name|SubClusterId
name|getHomeSubcluster
parameter_list|(
name|ApplicationSubmissionContext
name|appSubmissionContext
parameter_list|,
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|blackListSubClusters
parameter_list|)
throws|throws
name|YarnException
block|{
comment|// null checks and default-queue behavior
name|validate
argument_list|(
name|appSubmissionContext
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|activeSubclusters
init|=
name|getActiveSubclusters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubClusterId
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|activeSubclusters
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|FederationPolicyUtils
operator|.
name|validateSubClusterAvailability
argument_list|(
name|list
argument_list|,
name|blackListSubClusters
argument_list|)
expr_stmt|;
if|if
condition|(
name|blackListSubClusters
operator|!=
literal|null
condition|)
block|{
comment|// Remove from the active SubClusters from StateStore the blacklisted ones
for|for
control|(
name|SubClusterId
name|scId
range|:
name|blackListSubClusters
control|)
block|{
name|list
operator|.
name|remove
argument_list|(
name|scId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

