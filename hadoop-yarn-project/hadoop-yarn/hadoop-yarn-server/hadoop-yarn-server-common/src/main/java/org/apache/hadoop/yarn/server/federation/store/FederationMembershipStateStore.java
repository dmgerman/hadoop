begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterResponse
import|;
end_import

begin_comment
comment|/**  * FederationMembershipStateStore maintains the state of all  *<em>subcluster(s)</em> as encapsulated by {@code SubClusterInfo} for all the  * subcluster(s) that are participating in federation.  */
end_comment

begin_interface
annotation|@
name|Private
annotation|@
name|Unstable
DECL|interface|FederationMembershipStateStore
specifier|public
interface|interface
name|FederationMembershipStateStore
block|{
comment|/**    * Register a<em>subcluster</em> by publishing capabilities as represented by    * {@code SubClusterInfo} to indicate participation in federation. This is    * typically done during initialization or restart/failover of the    * subcluster's<code>ResourceManager</code>. Upon successful registration, an    * identifier for the<em>subcluster</em> which is unique across the federated    * cluster is returned. The identifier is static, i.e. preserved across    * restarts and failover.    *    * @param registerSubClusterRequest the capabilities of the subcluster that    *          wants to participate in federation. The subcluster id is also    *          specified in case registration is triggered by restart/failover    * @return response empty on successfully if registration was successful    * @throws YarnException if the request is invalid/fails    */
DECL|method|registerSubCluster ( SubClusterRegisterRequest registerSubClusterRequest)
name|SubClusterRegisterResponse
name|registerSubCluster
parameter_list|(
name|SubClusterRegisterRequest
name|registerSubClusterRequest
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Deregister a<em>subcluster</em> identified by {@code SubClusterId} to    * change state in federation. This can be done to mark the sub cluster lost,    * deregistered, or decommissioned.    *    * @param subClusterDeregisterRequest - the request to deregister the    *          sub-cluster from federation.    * @return response empty on successfully deregistering the subcluster state    * @throws YarnException if the request is invalid/fails    */
DECL|method|deregisterSubCluster ( SubClusterDeregisterRequest subClusterDeregisterRequest)
name|SubClusterDeregisterResponse
name|deregisterSubCluster
parameter_list|(
name|SubClusterDeregisterRequest
name|subClusterDeregisterRequest
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Periodic heartbeat from a<code>ResourceManager</code> participating in    * federation to indicate liveliness. The heartbeat publishes the current    * capabilities as represented by {@code SubClusterInfo} of the subcluster.    * Currently response is empty if the operation was successful, if not an    * exception reporting reason for a failure.    *    * @param subClusterHeartbeatRequest the capabilities of the subcluster that    *          wants to keep alive its participation in federation    * @return response currently empty on if heartbeat was successfully processed    * @throws YarnException if the request is invalid/fails    */
DECL|method|subClusterHeartbeat ( SubClusterHeartbeatRequest subClusterHeartbeatRequest)
name|SubClusterHeartbeatResponse
name|subClusterHeartbeat
parameter_list|(
name|SubClusterHeartbeatRequest
name|subClusterHeartbeatRequest
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Get the membership information of<em>subcluster</em> as identified by    * {@code SubClusterId}. The membership information includes the cluster    * endpoint and current capabilities as represented by {@code SubClusterInfo}.    *    * @param subClusterRequest the subcluster whose information is required    * @return the {@code SubClusterInfo}    * @throws YarnException if the request is invalid/fails    */
DECL|method|getSubCluster ( GetSubClusterInfoRequest subClusterRequest)
name|GetSubClusterInfoResponse
name|getSubCluster
parameter_list|(
name|GetSubClusterInfoRequest
name|subClusterRequest
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Get the membership information of all the<em>subclusters</em> that are    * currently participating in federation. The membership information includes    * the cluster endpoint and current capabilities as represented by    * {@code SubClusterInfo}.    *    * @param subClustersRequest request for sub-clusters information    * @return a map of {@code SubClusterInfo} keyed by the {@code SubClusterId}    * @throws YarnException if the request is invalid/fails    */
DECL|method|getSubClusters ( GetSubClustersInfoRequest subClustersRequest)
name|GetSubClustersInfoResponse
name|getSubClusters
parameter_list|(
name|GetSubClustersInfoRequest
name|subClustersRequest
parameter_list|)
throws|throws
name|YarnException
function_decl|;
block|}
end_interface

end_unit

