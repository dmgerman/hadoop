begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.util.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|util
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|ProxyUserAuthenticationFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AuthenticationFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
operator|.
name|TimelineAuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
operator|.
name|TimelineAuthenticationFilterInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|security
operator|.
name|TimelineDelgationTokenSecretManagerService
import|;
end_import

begin_comment
comment|/**  * Set of utility methods to be used across timeline reader and collector.  */
end_comment

begin_class
DECL|class|TimelineServerUtils
specifier|public
specifier|final
class|class
name|TimelineServerUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineServerUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|TimelineServerUtils ()
specifier|private
name|TimelineServerUtils
parameter_list|()
block|{   }
comment|/**    * Sets filter initializers configuration based on existing configuration and    * default filters added by timeline service(such as timeline auth filter and    * CORS filter).    * @param conf Configuration object.    * @param configuredInitializers Comma separated list of filter initializers.    * @param defaultInitializers Set of initializers added by default by timeline    *     service.    */
DECL|method|setTimelineFilters (Configuration conf, String configuredInitializers, Set<String> defaultInitializers)
specifier|public
specifier|static
name|void
name|setTimelineFilters
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|configuredInitializers
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|defaultInitializers
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreInitializers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ignoreInitializers
operator|.
name|add
argument_list|(
name|AuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ignoreInitializers
operator|.
name|add
argument_list|(
name|ProxyUserAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|parts
init|=
name|configuredInitializers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|target
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|filterInitializer
range|:
name|parts
control|)
block|{
name|filterInitializer
operator|=
name|filterInitializer
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|ignoreInitializers
operator|.
name|contains
argument_list|(
name|filterInitializer
argument_list|)
operator|||
name|filterInitializer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|target
operator|.
name|add
argument_list|(
name|filterInitializer
argument_list|)
expr_stmt|;
block|}
name|target
operator|.
name|addAll
argument_list|(
name|defaultInitializers
argument_list|)
expr_stmt|;
name|String
name|actualInitializers
init|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|join
argument_list|(
name|target
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Filter initializers set for timeline service: "
operator|+
name|actualInitializers
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.http.filter.initializers"
argument_list|,
name|actualInitializers
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds timeline authentication filter to the set of default filter    * initializers and assigns the delegation token manager service to it.    * @param initializers Comma separated list of filter initializers.    * @param defaultInitializers Set of initializers added by default by timeline    *     service.    * @param delegationTokenMgrService Delegation token manager service.    *     This will be used by timeline authentication filter to assign    *     delegation tokens.    */
DECL|method|addTimelineAuthFilter (String initializers, Set<String> defaultInitializers, TimelineDelgationTokenSecretManagerService delegationTokenMgrService)
specifier|public
specifier|static
name|void
name|addTimelineAuthFilter
parameter_list|(
name|String
name|initializers
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|defaultInitializers
parameter_list|,
name|TimelineDelgationTokenSecretManagerService
name|delegationTokenMgrService
parameter_list|)
block|{
name|TimelineAuthenticationFilter
operator|.
name|setTimelineDelegationTokenSecretManager
argument_list|(
name|delegationTokenMgrService
operator|.
name|getTimelineDelegationTokenSecretManager
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|initializers
operator|.
name|contains
argument_list|(
name|TimelineAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|defaultInitializers
operator|.
name|add
argument_list|(
name|TimelineAuthenticationFilterInitializer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

