begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|WebApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationBaseProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationAttemptNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppAttemptsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ContainersInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ForbiddenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_class
DECL|class|WebServices
specifier|public
class|class
name|WebServices
block|{
DECL|field|appBaseProt
specifier|protected
name|ApplicationBaseProtocol
name|appBaseProt
decl_stmt|;
DECL|method|WebServices (ApplicationBaseProtocol appBaseProt)
specifier|public
name|WebServices
parameter_list|(
name|ApplicationBaseProtocol
name|appBaseProt
parameter_list|)
block|{
name|this
operator|.
name|appBaseProt
operator|=
name|appBaseProt
expr_stmt|;
block|}
DECL|method|getApps (HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, Set<String> applicationTypes)
specifier|public
name|AppsInfo
name|getApps
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|stateQuery
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|statesQuery
parameter_list|,
name|String
name|finalStatusQuery
parameter_list|,
name|String
name|userQuery
parameter_list|,
name|String
name|queueQuery
parameter_list|,
name|String
name|count
parameter_list|,
name|String
name|startedBegin
parameter_list|,
name|String
name|startedEnd
parameter_list|,
name|String
name|finishBegin
parameter_list|,
name|String
name|finishEnd
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|boolean
name|checkStart
init|=
literal|false
decl_stmt|;
name|boolean
name|checkEnd
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppTypes
init|=
literal|false
decl_stmt|;
name|boolean
name|checkAppStates
init|=
literal|false
decl_stmt|;
name|long
name|countNum
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// set values suitable in case both of begin/end not specified
name|long
name|sBegin
init|=
literal|0
decl_stmt|;
name|long
name|sEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|fBegin
init|=
literal|0
decl_stmt|;
name|long
name|fEnd
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|count
operator|!=
literal|null
operator|&&
operator|!
name|count
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|countNum
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|countNum
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"limit value must be greater then 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedBegin
operator|!=
literal|null
operator|&&
operator|!
name|startedBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|sBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|startedEnd
operator|!=
literal|null
operator|&&
operator|!
name|startedEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkStart
operator|=
literal|true
expr_stmt|;
name|sEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startedEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|sEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|sBegin
operator|>
name|sEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"startedTimeEnd must be greater than startTimeBegin"
argument_list|)
throw|;
block|}
if|if
condition|(
name|finishBegin
operator|!=
literal|null
operator|&&
operator|!
name|finishBegin
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fBegin
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishBegin
argument_list|)
expr_stmt|;
if|if
condition|(
name|fBegin
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeBegin must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|finishEnd
operator|!=
literal|null
operator|&&
operator|!
name|finishEnd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkEnd
operator|=
literal|true
expr_stmt|;
name|fEnd
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|finishEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|fEnd
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than 0"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fBegin
operator|>
name|fEnd
condition|)
block|{
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"finishTimeEnd must be greater than finishTimeBegin"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
name|parseQueries
argument_list|(
name|applicationTypes
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppTypes
operator|=
literal|true
expr_stmt|;
block|}
comment|// stateQuery is deprecated.
if|if
condition|(
name|stateQuery
operator|!=
literal|null
operator|&&
operator|!
name|stateQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|statesQuery
operator|.
name|add
argument_list|(
name|stateQuery
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|appStates
init|=
name|parseQueries
argument_list|(
name|statesQuery
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkAppStates
operator|=
literal|true
expr_stmt|;
block|}
name|AppsInfo
name|allApps
init|=
operator|new
name|AppsInfo
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
init|=
literal|null
decl_stmt|;
specifier|final
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|request
operator|.
name|setLimit
argument_list|(
name|countNum
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
comment|// TODO: the request should take the params like what RMWebServices does
comment|// in YARN-1819.
name|appReports
operator|=
name|appBaseProt
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appReports
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ApplicationReport
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|appBaseProt
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ApplicationReport
name|appReport
range|:
name|appReports
control|)
block|{
if|if
condition|(
name|checkAppStates
operator|&&
operator|!
name|appStates
operator|.
name|contains
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|finalStatusQuery
operator|!=
literal|null
operator|&&
operator|!
name|finalStatusQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FinalApplicationStatus
operator|.
name|valueOf
argument_list|(
name|finalStatusQuery
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|appReport
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|finalStatusQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|userQuery
operator|!=
literal|null
operator|&&
operator|!
name|userQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|appReport
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|userQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|queueQuery
operator|!=
literal|null
operator|&&
operator|!
name|queueQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|appReport
operator|.
name|getQueue
argument_list|()
operator|.
name|equals
argument_list|(
name|queueQuery
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|checkAppTypes
operator|&&
operator|!
name|appTypes
operator|.
name|contains
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|appReport
operator|.
name|getApplicationType
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|checkStart
operator|&&
operator|(
name|appReport
operator|.
name|getStartTime
argument_list|()
operator|<
name|sBegin
operator|||
name|appReport
operator|.
name|getStartTime
argument_list|()
operator|>
name|sEnd
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|checkEnd
operator|&&
operator|(
name|appReport
operator|.
name|getFinishTime
argument_list|()
operator|<
name|fBegin
operator|||
name|appReport
operator|.
name|getFinishTime
argument_list|()
operator|>
name|fEnd
operator|)
condition|)
block|{
continue|continue;
block|}
name|AppInfo
name|app
init|=
operator|new
name|AppInfo
argument_list|(
name|appReport
argument_list|)
decl_stmt|;
name|allApps
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
return|return
name|allApps
return|;
block|}
DECL|method|getApp (HttpServletRequest req, HttpServletResponse res, String appId)
specifier|public
name|AppInfo
name|getApp
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|id
init|=
name|parseApplicationId
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|ApplicationReport
name|app
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|GetApplicationReportRequest
name|request
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|app
operator|=
name|appBaseProt
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|app
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|GetApplicationReportRequest
name|request
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|appBaseProt
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app with id: "
operator|+
name|appId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AppInfo
argument_list|(
name|app
argument_list|)
return|;
block|}
DECL|method|getAppAttempts (HttpServletRequest req, HttpServletResponse res, String appId)
specifier|public
name|AppAttemptsInfo
name|getAppAttempts
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|id
init|=
name|parseApplicationId
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|appAttemptReports
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|GetApplicationAttemptsRequest
name|request
init|=
name|GetApplicationAttemptsRequest
operator|.
name|newInstance
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|appAttemptReports
operator|=
name|appBaseProt
operator|.
name|getApplicationAttempts
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appAttemptReports
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|GetApplicationAttemptsRequest
name|request
init|=
name|GetApplicationAttemptsRequest
operator|.
name|newInstance
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|appBaseProt
operator|.
name|getApplicationAttempts
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptList
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|AppAttemptsInfo
name|appAttemptsInfo
init|=
operator|new
name|AppAttemptsInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationAttemptReport
name|appAttemptReport
range|:
name|appAttemptReports
control|)
block|{
name|AppAttemptInfo
name|appAttemptInfo
init|=
operator|new
name|AppAttemptInfo
argument_list|(
name|appAttemptReport
argument_list|)
decl_stmt|;
name|appAttemptsInfo
operator|.
name|add
argument_list|(
name|appAttemptInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|appAttemptsInfo
return|;
block|}
DECL|method|getAppAttempt (HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)
specifier|public
name|AppAttemptInfo
name|getAppAttempt
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|appAttemptId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|ApplicationId
name|aid
init|=
name|parseApplicationId
argument_list|(
name|appId
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|aaid
init|=
name|parseApplicationAttemptId
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|validateIds
argument_list|(
name|aid
argument_list|,
name|aaid
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ApplicationAttemptReport
name|appAttempt
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|GetApplicationAttemptReportRequest
name|request
init|=
name|GetApplicationAttemptReportRequest
operator|.
name|newInstance
argument_list|(
name|aaid
argument_list|)
decl_stmt|;
name|appAttempt
operator|=
name|appBaseProt
operator|.
name|getApplicationAttemptReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptReport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appAttempt
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationAttemptReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|GetApplicationAttemptReportRequest
name|request
init|=
name|GetApplicationAttemptReportRequest
operator|.
name|newInstance
argument_list|(
name|aaid
argument_list|)
decl_stmt|;
return|return
name|appBaseProt
operator|.
name|getApplicationAttemptReport
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationAttemptReport
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appAttempt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"app attempt with id: "
operator|+
name|appAttemptId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AppAttemptInfo
argument_list|(
name|appAttempt
argument_list|)
return|;
block|}
DECL|method|getContainers (HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)
specifier|public
name|ContainersInfo
name|getContainers
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|appAttemptId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|ApplicationId
name|aid
init|=
name|parseApplicationId
argument_list|(
name|appId
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationAttemptId
name|aaid
init|=
name|parseApplicationAttemptId
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|validateIds
argument_list|(
name|aid
argument_list|,
name|aaid
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
name|containerReports
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|GetContainersRequest
name|request
init|=
name|GetContainersRequest
operator|.
name|newInstance
argument_list|(
name|aaid
argument_list|)
decl_stmt|;
name|containerReports
operator|=
name|appBaseProt
operator|.
name|getContainers
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|containerReports
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ContainerReport
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|GetContainersRequest
name|request
init|=
name|GetContainersRequest
operator|.
name|newInstance
argument_list|(
name|aaid
argument_list|)
decl_stmt|;
return|return
name|appBaseProt
operator|.
name|getContainers
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerList
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|ContainersInfo
name|containersInfo
init|=
operator|new
name|ContainersInfo
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerReport
name|containerReport
range|:
name|containerReports
control|)
block|{
name|ContainerInfo
name|containerInfo
init|=
operator|new
name|ContainerInfo
argument_list|(
name|containerReport
argument_list|)
decl_stmt|;
name|containersInfo
operator|.
name|add
argument_list|(
name|containerInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|containersInfo
return|;
block|}
DECL|method|getContainer (HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId, String containerId)
specifier|public
name|ContainerInfo
name|getContainer
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|appAttemptId
parameter_list|,
name|String
name|containerId
parameter_list|)
block|{
name|UserGroupInformation
name|callerUGI
init|=
name|getUser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|ApplicationId
name|aid
init|=
name|parseApplicationId
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|aaid
init|=
name|parseApplicationAttemptId
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|cid
init|=
name|parseContainerId
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|validateIds
argument_list|(
name|aid
argument_list|,
name|aaid
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|ContainerReport
name|container
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|callerUGI
operator|==
literal|null
condition|)
block|{
name|GetContainerReportRequest
name|request
init|=
name|GetContainerReportRequest
operator|.
name|newInstance
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|container
operator|=
name|appBaseProt
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerReport
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|container
operator|=
name|callerUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerReport
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|GetContainerReportRequest
name|request
init|=
name|GetContainerReportRequest
operator|.
name|newInstance
argument_list|(
name|cid
argument_list|)
decl_stmt|;
return|return
name|appBaseProt
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
operator|.
name|getContainerReport
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|rewrapAndThrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"container with id: "
operator|+
name|containerId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ContainerInfo
argument_list|(
name|container
argument_list|)
return|;
block|}
DECL|method|init (HttpServletResponse response)
specifier|protected
name|void
name|init
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
comment|// clear content type
name|response
operator|.
name|setContentType
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
DECL|method|parseQueries (Set<String> queries, boolean isState)
name|parseQueries
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queries
parameter_list|,
name|boolean
name|isState
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|queries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|paramStrs
init|=
name|query
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|paramStr
range|:
name|paramStrs
control|)
block|{
if|if
condition|(
name|paramStr
operator|!=
literal|null
operator|&&
operator|!
name|paramStr
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isState
condition|)
block|{
try|try
block|{
comment|// enum string is in the uppercase
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|StringUtils
operator|.
name|toUpperCase
argument_list|(
name|paramStr
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|YarnApplicationState
index|[]
name|stateArray
init|=
name|YarnApplicationState
operator|.
name|values
argument_list|()
decl_stmt|;
name|String
name|allAppStates
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|stateArray
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|BadRequestException
argument_list|(
literal|"Invalid application-state "
operator|+
name|paramStr
operator|.
name|trim
argument_list|()
operator|+
literal|" specified. It should be one of "
operator|+
name|allAppStates
argument_list|)
throw|;
block|}
block|}
name|params
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|toLowerCase
argument_list|(
name|paramStr
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|params
return|;
block|}
DECL|method|parseApplicationId (String appId)
specifier|protected
specifier|static
name|ApplicationId
name|parseApplicationId
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
if|if
condition|(
name|appId
operator|==
literal|null
operator|||
name|appId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId, "
operator|+
name|appId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationId
name|aid
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|aid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId is null"
argument_list|)
throw|;
block|}
return|return
name|aid
return|;
block|}
DECL|method|parseApplicationAttemptId ( String appAttemptId)
specifier|protected
specifier|static
name|ApplicationAttemptId
name|parseApplicationAttemptId
parameter_list|(
name|String
name|appAttemptId
parameter_list|)
block|{
if|if
condition|(
name|appAttemptId
operator|==
literal|null
operator|||
name|appAttemptId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appAttemptId, "
operator|+
name|appAttemptId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ApplicationAttemptId
name|aaid
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|aaid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appAttemptId is null"
argument_list|)
throw|;
block|}
return|return
name|aaid
return|;
block|}
DECL|method|parseContainerId (String containerId)
specifier|protected
specifier|static
name|ContainerId
name|parseContainerId
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|==
literal|null
operator|||
name|containerId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"containerId, "
operator|+
name|containerId
operator|+
literal|", is empty or null"
argument_list|)
throw|;
block|}
name|ContainerId
name|cid
init|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cid
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"containerId is null"
argument_list|)
throw|;
block|}
return|return
name|cid
return|;
block|}
DECL|method|validateIds (ApplicationId appId, ApplicationAttemptId appAttemptId, ContainerId containerId)
specifier|protected
name|void
name|validateIds
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appId and appAttemptId don't match"
argument_list|)
throw|;
block|}
if|if
condition|(
name|containerId
operator|!=
literal|null
operator|&&
operator|!
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|appAttemptId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"appAttemptId and containerId don't match"
argument_list|)
throw|;
block|}
block|}
DECL|method|getUser (HttpServletRequest req)
specifier|protected
specifier|static
name|UserGroupInformation
name|getUser
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|)
block|{
name|String
name|remoteUser
init|=
name|req
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
return|return
name|callerUGI
return|;
block|}
DECL|method|rewrapAndThrowException (Exception e)
specifier|private
specifier|static
name|void
name|rewrapAndThrowException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|UndeclaredThrowableException
condition|)
block|{
name|rewrapAndThrowThrowable
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rewrapAndThrowThrowable
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rewrapAndThrowThrowable (Throwable t)
specifier|private
specifier|static
name|void
name|rewrapAndThrowThrowable
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|AuthorizationException
condition|)
block|{
throw|throw
operator|new
name|ForbiddenException
argument_list|(
name|t
argument_list|)
throw|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|ApplicationNotFoundException
operator|||
name|t
operator|instanceof
name|ApplicationAttemptNotFoundException
operator|||
name|t
operator|instanceof
name|ContainerNotFoundException
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
name|t
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|WebApplicationException
argument_list|(
name|t
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

