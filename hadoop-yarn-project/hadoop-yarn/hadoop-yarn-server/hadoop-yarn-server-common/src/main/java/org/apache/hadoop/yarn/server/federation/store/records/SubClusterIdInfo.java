begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_comment
comment|/**  * This class represent a sub-cluster identifier in the JSON representation  * of the policy configuration.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"federation-policy"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|SubClusterIdInfo
specifier|public
class|class
name|SubClusterIdInfo
block|{
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|method|SubClusterIdInfo ()
specifier|public
name|SubClusterIdInfo
parameter_list|()
block|{
comment|//JAXB needs this
block|}
DECL|method|SubClusterIdInfo (String subClusterId)
specifier|public
name|SubClusterIdInfo
parameter_list|(
name|String
name|subClusterId
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|subClusterId
expr_stmt|;
block|}
DECL|method|SubClusterIdInfo (SubClusterId subClusterId)
specifier|public
name|SubClusterIdInfo
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|subClusterId
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get the sub-cluster identifier as {@link SubClusterId}.    * @return the sub-cluster id.    */
DECL|method|toId ()
specifier|public
name|SubClusterId
name|toId
parameter_list|()
block|{
return|return
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|SubClusterIdInfo
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|SubClusterIdInfo
operator|)
name|other
operator|)
operator|.
name|id
operator|.
name|equals
argument_list|(
name|this
operator|.
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

