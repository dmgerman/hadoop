begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|impl
operator|.
name|pb
operator|.
name|RpcClientFactoryPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|impl
operator|.
name|pb
operator|.
name|RpcServerFactoryPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test ResourceTrackerPBClientImpl. this class should have methods  * registerNodeManager and newRecordInstance.  */
end_comment

begin_class
DECL|class|TestResourceTrackerPBClientImpl
specifier|public
class|class
name|TestResourceTrackerPBClientImpl
block|{
DECL|field|client
specifier|private
specifier|static
name|ResourceTracker
name|client
decl_stmt|;
DECL|field|server
specifier|private
specifier|static
name|Server
name|server
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|start ()
specifier|public
specifier|static
name|void
name|start
parameter_list|()
block|{
name|InetSocketAddress
name|address
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ResourceTracker
name|instance
init|=
operator|new
name|ResourceTrackerTestImpl
argument_list|()
decl_stmt|;
name|server
operator|=
name|RpcServerFactoryPBImpl
operator|.
name|get
argument_list|()
operator|.
name|getServer
argument_list|(
name|ResourceTracker
operator|.
name|class
argument_list|,
name|instance
argument_list|,
name|address
argument_list|,
name|configuration
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|=
operator|(
name|ResourceTracker
operator|)
name|RpcClientFactoryPBImpl
operator|.
name|get
argument_list|()
operator|.
name|getClient
argument_list|(
name|ResourceTracker
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|stop ()
specifier|public
specifier|static
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test the method registerNodeManager. Method should return a not null    * result.    *     */
annotation|@
name|Test
DECL|method|testResourceTrackerPBClientImpl ()
specifier|public
name|void
name|testResourceTrackerPBClientImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|RegisterNodeManagerRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceTrackerTestImpl
operator|.
name|exception
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|client
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"there  should be YarnException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"testMessage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ResourceTrackerTestImpl
operator|.
name|exception
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    * Test the method nodeHeartbeat. Method should return a not null result.    *     */
annotation|@
name|Test
DECL|method|testNodeHeartbeat ()
specifier|public
name|void
name|testNodeHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeHeartbeatRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|client
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceTrackerTestImpl
operator|.
name|exception
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|client
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"there  should be YarnException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"testMessage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ResourceTrackerTestImpl
operator|.
name|exception
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|class|ResourceTrackerTestImpl
specifier|public
specifier|static
class|class
name|ResourceTrackerTestImpl
implements|implements
name|ResourceTracker
block|{
DECL|field|exception
specifier|public
specifier|static
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|registerNodeManager ( RegisterNodeManagerRequest request)
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|exception
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"testMessage"
argument_list|)
throw|;
block|}
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodeHeartbeat (NodeHeartbeatRequest request)
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|exception
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"testMessage"
argument_list|)
throw|;
block|}
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeHeartbeatResponse
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

