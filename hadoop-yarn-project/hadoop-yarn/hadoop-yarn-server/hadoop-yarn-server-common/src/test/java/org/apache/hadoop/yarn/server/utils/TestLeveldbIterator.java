begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLeveldbIterator
specifier|public
class|class
name|TestLeveldbIterator
block|{
DECL|class|CallInfo
specifier|private
specifier|static
class|class
name|CallInfo
block|{
DECL|field|methodName
name|String
name|methodName
decl_stmt|;
DECL|field|args
name|Object
index|[]
name|args
decl_stmt|;
DECL|field|argTypes
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|argTypes
decl_stmt|;
DECL|method|CallInfo (String methodName, Object... args)
specifier|public
name|CallInfo
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|this
operator|.
name|methodName
operator|=
name|methodName
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
name|argTypes
operator|=
operator|new
name|Class
index|[
name|args
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|argTypes
index|[
name|i
index|]
operator|=
name|args
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// array of methods that should throw DBException instead of raw
comment|// runtime exceptions
DECL|field|RTEXC_METHODS
specifier|private
specifier|static
name|CallInfo
index|[]
name|RTEXC_METHODS
init|=
operator|new
name|CallInfo
index|[]
block|{
operator|new
name|CallInfo
argument_list|(
literal|"seek"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"seekToFirst"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"seekToLast"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"hasNext"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"next"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"peekNext"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"hasPrev"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"prev"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"peekPrev"
argument_list|)
block|,
operator|new
name|CallInfo
argument_list|(
literal|"remove"
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Test
DECL|method|testExceptionHandling ()
specifier|public
name|void
name|testExceptionHandling
parameter_list|()
throws|throws
name|Exception
block|{
name|InvocationHandler
name|rtExcHandler
init|=
operator|new
name|InvocationHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"forced runtime error"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|DBIterator
name|dbiter
init|=
operator|(
name|DBIterator
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|DBIterator
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|DBIterator
operator|.
name|class
block|}
argument_list|,
name|rtExcHandler
argument_list|)
decl_stmt|;
name|LeveldbIterator
name|iter
init|=
operator|new
name|LeveldbIterator
argument_list|(
name|dbiter
argument_list|)
decl_stmt|;
for|for
control|(
name|CallInfo
name|ci
range|:
name|RTEXC_METHODS
control|)
block|{
name|Method
name|method
init|=
name|iter
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|ci
operator|.
name|methodName
argument_list|,
name|ci
operator|.
name|argTypes
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"unable to locate method "
operator|+
name|ci
operator|.
name|methodName
argument_list|,
name|method
argument_list|)
expr_stmt|;
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|iter
argument_list|,
name|ci
operator|.
name|args
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"operation should have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
name|Throwable
name|exc
init|=
name|ite
operator|.
name|getTargetException
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Method "
operator|+
name|ci
operator|.
name|methodName
operator|+
literal|" threw non-DBException: "
operator|+
name|exc
argument_list|,
name|exc
operator|instanceof
name|DBException
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Method "
operator|+
name|ci
operator|.
name|methodName
operator|+
literal|" double-wrapped DBException"
argument_list|,
name|exc
operator|.
name|getCause
argument_list|()
operator|instanceof
name|DBException
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check close() throws IOException
try|try
block|{
name|iter
operator|.
name|close
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"operation shoul have thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

