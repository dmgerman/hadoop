begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequests
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationPoliciesTestUtil
operator|.
name|initializePolicyContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|BaseFederationPoliciesTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|dao
operator|.
name|WeightedPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterIdInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Simple test class for the {@link HomeAMRMProxyPolicy}.  */
end_comment

begin_class
DECL|class|TestHomeAMRMProxyPolicy
specifier|public
class|class
name|TestHomeAMRMProxyPolicy
extends|extends
name|BaseFederationPoliciesTest
block|{
DECL|field|NUM_SUBCLUSTERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SUBCLUSTERS
init|=
literal|4
decl_stmt|;
DECL|field|HOME_SC_NAME
specifier|private
specifier|static
specifier|final
name|String
name|HOME_SC_NAME
init|=
literal|"sc2"
decl_stmt|;
DECL|field|HOME_SC_ID
specifier|private
specifier|static
specifier|final
name|SubClusterId
name|HOME_SC_ID
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|HOME_SC_NAME
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setPolicy
argument_list|(
operator|new
name|HomeAMRMProxyPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// needed for base test to work
name|setPolicyInfo
argument_list|(
name|mock
argument_list|(
name|WeightedPolicyInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SUBCLUSTERS
condition|;
name|i
operator|++
control|)
block|{
name|SubClusterIdInfo
name|sc
init|=
operator|new
name|SubClusterIdInfo
argument_list|(
literal|"sc"
operator|+
name|i
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|sci
init|=
name|mock
argument_list|(
name|SubClusterInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sc
operator|.
name|toId
argument_list|()
argument_list|)
expr_stmt|;
name|getActiveSubclusters
argument_list|()
operator|.
name|put
argument_list|(
name|sc
operator|.
name|toId
argument_list|()
argument_list|,
name|sci
argument_list|)
expr_stmt|;
block|}
name|initializePolicyContext
argument_list|(
name|getPolicy
argument_list|()
argument_list|,
name|mock
argument_list|(
name|WeightedPolicyInfo
operator|.
name|class
argument_list|)
argument_list|,
name|getActiveSubclusters
argument_list|()
argument_list|,
name|HOME_SC_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitAllocateRequest ()
specifier|public
name|void
name|testSplitAllocateRequest
parameter_list|()
throws|throws
name|YarnException
block|{
comment|// Verify the request only goes to the home subcluster
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
literal|"host0"
block|,
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createResourceRequests
argument_list|(
name|hosts
argument_list|,
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HomeAMRMProxyPolicy
name|federationPolicy
init|=
operator|(
name|HomeAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
name|federationPolicy
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|get
argument_list|(
name|HOME_SC_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|response
operator|.
name|get
argument_list|(
name|HOME_SC_ID
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHomeSubclusterNotActive ()
specifier|public
name|void
name|testHomeSubclusterNotActive
parameter_list|()
throws|throws
name|YarnException
block|{
comment|// We setup the home subcluster to a non-existing one
name|initializePolicyContext
argument_list|(
name|getPolicy
argument_list|()
argument_list|,
name|mock
argument_list|(
name|WeightedPolicyInfo
operator|.
name|class
argument_list|)
argument_list|,
name|getActiveSubclusters
argument_list|()
argument_list|,
literal|"badsc"
argument_list|)
expr_stmt|;
comment|// Verify the request fails because the home subcluster is not available
try|try
block|{
name|String
index|[]
name|hosts
init|=
operator|new
name|String
index|[]
block|{
literal|"host0"
block|,
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createResourceRequests
argument_list|(
name|hosts
argument_list|,
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HomeAMRMProxyPolicy
name|federationPolicy
init|=
operator|(
name|HomeAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
decl_stmt|;
name|federationPolicy
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should fail when the home subcluster is not active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationPolicyException
name|e
parameter_list|)
block|{
name|GenericTestUtils
operator|.
name|assertExceptionContains
argument_list|(
literal|"is not active"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

