begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoteNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|TestOpportunisticContainerAllocator
specifier|public
class|class
name|TestOpportunisticContainerAllocator
block|{
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|allocator
specifier|private
name|OpportunisticContainerAllocator
name|allocator
init|=
literal|null
decl_stmt|;
DECL|field|oppCntxt
specifier|private
name|OpportunisticContainerContext
name|oppCntxt
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|SecurityUtil
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|MasterKey
name|mKey
init|=
operator|new
name|MasterKey
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getKeyId
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setKeyId
parameter_list|(
name|int
name|keyId
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getBytes
parameter_list|()
block|{
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBytes
parameter_list|(
name|ByteBuffer
name|bytes
parameter_list|)
block|{}
block|}
decl_stmt|;
name|BaseContainerTokenSecretManager
name|secMan
init|=
operator|new
name|BaseContainerTokenSecretManager
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|MasterKey
name|getCurrentKey
parameter_list|()
block|{
return|return
name|mKey
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|createPassword
parameter_list|(
name|ContainerTokenIdentifier
name|identifier
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
return|;
block|}
block|}
decl_stmt|;
name|allocator
operator|=
operator|new
name|OpportunisticContainerAllocator
argument_list|(
name|secMan
argument_list|)
expr_stmt|;
name|oppCntxt
operator|=
operator|new
name|OpportunisticContainerContext
argument_list|()
expr_stmt|;
name|oppCntxt
operator|.
name|getAppParams
argument_list|()
operator|.
name|setMinResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oppCntxt
operator|.
name|getAppParams
argument_list|()
operator|.
name|setIncrementResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oppCntxt
operator|.
name|getAppParams
argument_list|()
operator|.
name|setMaxResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleAllocation ()
specifier|public
name|void
name|testSimpleAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h1:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oppCntxt
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBlacklistRejection ()
specifier|public
name|void
name|testBlacklistRejection
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h1:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oppCntxt
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoundRobinSimpleAllocation ()
specifier|public
name|void
name|testRoundRobinSimpleAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|3
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h1:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h1:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeLocalAllocation ()
specifier|public
name|void
name|testNodeLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"/r1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"/r1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h1:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h1:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeLocalAllocationSameSchedKey ()
specifier|public
name|void
name|testNodeLocalAllocationSameSchedKey
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|numContainers
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"/r1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|numContainers
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|numContainers
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h1:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h1:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleRackLocalAllocation ()
specifier|public
name|void
name|testSimpleRackLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"h1"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/r1"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h4:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h4:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoundRobinRackLocalAllocation ()
specifier|public
name|void
name|testRoundRobinRackLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"/r1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"/r1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|2
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h5"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h5:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h4:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h5:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h4:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRoundRobinRackLocalAllocationSameSchedKey ()
specifier|public
name|void
name|testRoundRobinRackLocalAllocationSameSchedKey
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"h1"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/r1"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h5"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h5:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h4:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h5:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h4:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOffSwitchAllocationWhenNoNodeOrRack ()
specifier|public
name|void
name|testOffSwitchAllocationWhenNoNodeOrRack
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"h6"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/r3"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h5"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h5:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h4:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLotsOfContainersRackLocalAllocationSameSchedKey ()
specifier|public
name|void
name|testLotsOfContainersRackLocalAllocationSameSchedKey
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"h1"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"/r1"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h5"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h5:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h4:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|250
condition|;
name|i
operator|++
control|)
block|{
name|containers
operator|.
name|addAll
argument_list|(
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLotsOfContainersRackLocalAllocation ()
specifier|public
name|void
name|testLotsOfContainersRackLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"*"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|resourceName
argument_list|(
literal|"/r1"
argument_list|)
operator|.
name|capability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|oppCntxt
operator|.
name|updateNodeList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h3:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h2:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h5"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h5:1234"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"h4:1234"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|containers
operator|.
name|addAll
argument_list|(
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"luser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

