begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreInvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DeleteApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Unit tests for FederationApplicationInputValidator,  * FederationMembershipInputValidator, and FederationPolicyInputValidator.  */
end_comment

begin_class
DECL|class|TestFederationStateStoreInputValidator
specifier|public
class|class
name|TestFederationStateStoreInputValidator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFederationStateStoreInputValidator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|subClusterId
specifier|private
specifier|static
name|SubClusterId
name|subClusterId
decl_stmt|;
DECL|field|amRMServiceAddress
specifier|private
specifier|static
name|String
name|amRMServiceAddress
decl_stmt|;
DECL|field|clientRMServiceAddress
specifier|private
specifier|static
name|String
name|clientRMServiceAddress
decl_stmt|;
DECL|field|rmAdminServiceAddress
specifier|private
specifier|static
name|String
name|rmAdminServiceAddress
decl_stmt|;
DECL|field|rmWebServiceAddress
specifier|private
specifier|static
name|String
name|rmWebServiceAddress
decl_stmt|;
DECL|field|lastHeartBeat
specifier|private
specifier|static
name|int
name|lastHeartBeat
decl_stmt|;
DECL|field|stateNew
specifier|private
specifier|static
name|SubClusterState
name|stateNew
decl_stmt|;
DECL|field|stateLost
specifier|private
specifier|static
name|SubClusterState
name|stateLost
decl_stmt|;
DECL|field|appId
specifier|private
specifier|static
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|lastStartTime
specifier|private
specifier|static
name|int
name|lastStartTime
decl_stmt|;
DECL|field|capability
specifier|private
specifier|static
name|String
name|capability
decl_stmt|;
DECL|field|queue
specifier|private
specifier|static
name|String
name|queue
decl_stmt|;
DECL|field|type
specifier|private
specifier|static
name|String
name|type
decl_stmt|;
DECL|field|params
specifier|private
specifier|static
name|ByteBuffer
name|params
decl_stmt|;
DECL|field|subClusterIdInvalid
specifier|private
specifier|static
name|SubClusterId
name|subClusterIdInvalid
decl_stmt|;
DECL|field|subClusterIdNull
specifier|private
specifier|static
name|SubClusterId
name|subClusterIdNull
decl_stmt|;
DECL|field|lastHeartBeatNegative
specifier|private
specifier|static
name|int
name|lastHeartBeatNegative
decl_stmt|;
DECL|field|lastStartTimeNegative
specifier|private
specifier|static
name|int
name|lastStartTimeNegative
decl_stmt|;
DECL|field|stateNull
specifier|private
specifier|static
name|SubClusterState
name|stateNull
decl_stmt|;
DECL|field|appIdNull
specifier|private
specifier|static
name|ApplicationId
name|appIdNull
decl_stmt|;
DECL|field|capabilityNull
specifier|private
specifier|static
name|String
name|capabilityNull
decl_stmt|;
DECL|field|capabilityEmpty
specifier|private
specifier|static
name|String
name|capabilityEmpty
decl_stmt|;
DECL|field|addressNull
specifier|private
specifier|static
name|String
name|addressNull
decl_stmt|;
DECL|field|addressEmpty
specifier|private
specifier|static
name|String
name|addressEmpty
decl_stmt|;
DECL|field|addressWrong
specifier|private
specifier|static
name|String
name|addressWrong
decl_stmt|;
DECL|field|addressWrongPort
specifier|private
specifier|static
name|String
name|addressWrongPort
decl_stmt|;
DECL|field|queueEmpty
specifier|private
specifier|static
name|String
name|queueEmpty
decl_stmt|;
DECL|field|queueNull
specifier|private
specifier|static
name|String
name|queueNull
decl_stmt|;
DECL|field|typeEmpty
specifier|private
specifier|static
name|String
name|typeEmpty
decl_stmt|;
DECL|field|typeNull
specifier|private
specifier|static
name|String
name|typeNull
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
name|subClusterId
operator|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"abc"
argument_list|)
expr_stmt|;
name|amRMServiceAddress
operator|=
literal|"localhost:8032"
expr_stmt|;
name|clientRMServiceAddress
operator|=
literal|"localhost:8034"
expr_stmt|;
name|rmAdminServiceAddress
operator|=
literal|"localhost:8031"
expr_stmt|;
name|rmWebServiceAddress
operator|=
literal|"localhost:8088"
expr_stmt|;
name|lastHeartBeat
operator|=
literal|1000
expr_stmt|;
name|stateNew
operator|=
name|SubClusterState
operator|.
name|SC_NEW
expr_stmt|;
name|stateLost
operator|=
name|SubClusterState
operator|.
name|SC_LOST
expr_stmt|;
name|lastStartTime
operator|=
literal|1000
expr_stmt|;
name|capability
operator|=
literal|"Memory VCores"
expr_stmt|;
name|appId
operator|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|lastStartTime
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|queue
operator|=
literal|"default"
expr_stmt|;
name|type
operator|=
literal|"random"
expr_stmt|;
name|params
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0xFF
argument_list|)
expr_stmt|;
name|subClusterIdInvalid
operator|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|subClusterIdNull
operator|=
literal|null
expr_stmt|;
name|lastHeartBeatNegative
operator|=
operator|-
literal|10
expr_stmt|;
name|lastStartTimeNegative
operator|=
operator|-
literal|10
expr_stmt|;
name|stateNull
operator|=
literal|null
expr_stmt|;
name|appIdNull
operator|=
literal|null
expr_stmt|;
name|capabilityNull
operator|=
literal|null
expr_stmt|;
name|capabilityEmpty
operator|=
literal|""
expr_stmt|;
name|addressNull
operator|=
literal|null
expr_stmt|;
name|addressEmpty
operator|=
literal|""
expr_stmt|;
name|addressWrong
operator|=
literal|"AddressWrong"
expr_stmt|;
name|addressWrongPort
operator|=
literal|"Address:WrongPort"
expr_stmt|;
name|queueEmpty
operator|=
literal|""
expr_stmt|;
name|queueNull
operator|=
literal|null
expr_stmt|;
name|typeEmpty
operator|=
literal|""
expr_stmt|;
name|typeNull
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateSubClusterRegisterRequest ()
specifier|public
name|void
name|testValidateSubClusterRegisterRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
name|SubClusterInfo
name|subClusterInfo
init|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
decl_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubClusterRegister Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterInfo
name|subClusterInfo
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Null SubClusterId
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterIdNull
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Invalid SubClusterId
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterIdInvalid
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Null State
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster State information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Null Capability
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capabilityNull
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Empty Capability
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capabilityEmpty
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateSubClusterRegisterRequestTimestamp ()
specifier|public
name|void
name|testValidateSubClusterRegisterRequestTimestamp
parameter_list|()
block|{
comment|// Execution with Negative Last Heartbeat
name|SubClusterInfo
name|subClusterInfo
init|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeatNegative
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
decl_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid timestamp information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Negative Last StartTime
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTimeNegative
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid timestamp information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateSubClusterRegisterRequestAddress ()
specifier|public
name|void
name|testValidateSubClusterRegisterRequestAddress
parameter_list|()
block|{
comment|// Execution with Null Address for amRMServiceAddress
name|SubClusterInfo
name|subClusterInfo
init|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|addressNull
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
decl_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Empty Address for amRMServiceAddress
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|addressEmpty
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Null Address for clientRMServiceAddress
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|addressNull
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Empty Address for clientRMServiceAddress
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|addressEmpty
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Null Address for rmAdminServiceAddress
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|addressNull
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Empty Address for rmAdminServiceAddress
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|addressEmpty
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Null Address for rmWebServiceAddress
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|addressNull
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Empty Address for rmWebServiceAddress
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|addressEmpty
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNew
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Endpoint information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateSubClusterRegisterRequestAddressInvalid ()
specifier|public
name|void
name|testValidateSubClusterRegisterRequestAddressInvalid
parameter_list|()
block|{
comment|// Address is not in host:port format for amRMService
name|SubClusterInfo
name|subClusterInfo
init|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|addressWrong
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
decl_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Address is not in host:port format for clientRMService
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|addressWrong
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Address is not in host:port format for rmAdminService
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|addressWrong
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Address is not in host:port format for rmWebService
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|addressWrong
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Port is not an integer for amRMService
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|addressWrongPort
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Port is not an integer for clientRMService
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|addressWrongPort
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Port is not an integer for rmAdminService
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|addressWrongPort
argument_list|,
name|rmWebServiceAddress
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Port is not an integer for rmWebService
name|subClusterInfo
operator|=
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMServiceAddress
argument_list|,
name|clientRMServiceAddress
argument_list|,
name|rmAdminServiceAddress
argument_list|,
name|addressWrongPort
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|lastStartTime
argument_list|,
name|capability
argument_list|)
expr_stmt|;
try|try
block|{
name|SubClusterRegisterRequest
name|request
init|=
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterRegisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"valid host:port authority:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateSubClusterDeregisterRequest ()
specifier|public
name|void
name|testValidateSubClusterDeregisterRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
try|try
block|{
name|SubClusterDeregisterRequest
name|request
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|stateLost
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterDeregisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|SubClusterDeregisterRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterDeregisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubClusterDeregister Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterId
try|try
block|{
name|SubClusterDeregisterRequest
name|request
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterIdNull
argument_list|,
name|stateLost
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterDeregisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with invalid SubClusterId
try|try
block|{
name|SubClusterDeregisterRequest
name|request
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterIdInvalid
argument_list|,
name|stateLost
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterDeregisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterState
try|try
block|{
name|SubClusterDeregisterRequest
name|request
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|stateNull
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterDeregisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster State information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with invalid SubClusterState
try|try
block|{
name|SubClusterDeregisterRequest
name|request
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|stateNew
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterDeregisterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid non-final state: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubClusterHeartbeatRequest ()
specifier|public
name|void
name|testSubClusterHeartbeatRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateLost
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubClusterHeartbeat Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterId
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterIdNull
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateLost
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with invalid SubClusterId
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterIdInvalid
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateLost
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterState
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateNull
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster State information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with negative Last Heartbeat
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|lastHeartBeatNegative
argument_list|,
name|stateLost
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid timestamp information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null Capability
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateLost
argument_list|,
name|capabilityNull
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid capability information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with empty Capability
try|try
block|{
name|SubClusterHeartbeatRequest
name|request
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|lastHeartBeat
argument_list|,
name|stateLost
argument_list|,
name|capabilityEmpty
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateSubClusterHeartbeatRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid capability information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterInfoRequest ()
specifier|public
name|void
name|testGetSubClusterInfoRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
try|try
block|{
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateGetSubClusterInfoRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|GetSubClusterInfoRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateGetSubClusterInfoRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing GetSubClusterInfo Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterId
try|try
block|{
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterIdNull
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateGetSubClusterInfoRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with invalid SubClusterId
try|try
block|{
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterIdInvalid
argument_list|)
decl_stmt|;
name|FederationMembershipStateStoreInputValidator
operator|.
name|validateGetSubClusterInfoRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddApplicationHomeSubClusterRequest ()
specifier|public
name|void
name|testAddApplicationHomeSubClusterRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
name|ApplicationHomeSubCluster
name|applicationHomeSubCluster
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId
argument_list|)
decl_stmt|;
try|try
block|{
name|AddApplicationHomeSubClusterRequest
name|request
init|=
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateAddApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|AddApplicationHomeSubClusterRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateAddApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing AddApplicationHomeSubCluster Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null ApplicationHomeSubCluster
name|applicationHomeSubCluster
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|AddApplicationHomeSubClusterRequest
name|request
init|=
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateAddApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing ApplicationHomeSubCluster Info."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterId
name|applicationHomeSubCluster
operator|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterIdNull
argument_list|)
expr_stmt|;
try|try
block|{
name|AddApplicationHomeSubClusterRequest
name|request
init|=
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateAddApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with invalid SubClusterId
name|applicationHomeSubCluster
operator|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterIdInvalid
argument_list|)
expr_stmt|;
try|try
block|{
name|AddApplicationHomeSubClusterRequest
name|request
init|=
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateAddApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with Null ApplicationId
name|applicationHomeSubCluster
operator|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appIdNull
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
try|try
block|{
name|AddApplicationHomeSubClusterRequest
name|request
init|=
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateAddApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Application Id."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateApplicationHomeSubClusterRequest ()
specifier|public
name|void
name|testUpdateApplicationHomeSubClusterRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
name|ApplicationHomeSubCluster
name|applicationHomeSubCluster
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId
argument_list|)
decl_stmt|;
try|try
block|{
name|UpdateApplicationHomeSubClusterRequest
name|request
init|=
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateUpdateApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|UpdateApplicationHomeSubClusterRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateUpdateApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing UpdateApplicationHomeSubCluster Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null ApplicationHomeSubCluster
name|applicationHomeSubCluster
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|UpdateApplicationHomeSubClusterRequest
name|request
init|=
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateUpdateApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing ApplicationHomeSubCluster Info."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusteId
name|applicationHomeSubCluster
operator|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterIdNull
argument_list|)
expr_stmt|;
try|try
block|{
name|UpdateApplicationHomeSubClusterRequest
name|request
init|=
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateUpdateApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with invalid SubClusterId
name|applicationHomeSubCluster
operator|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterIdInvalid
argument_list|)
expr_stmt|;
try|try
block|{
name|UpdateApplicationHomeSubClusterRequest
name|request
init|=
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateUpdateApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid SubCluster Id information."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null ApplicationId
name|applicationHomeSubCluster
operator|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appIdNull
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
try|try
block|{
name|UpdateApplicationHomeSubClusterRequest
name|request
init|=
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|applicationHomeSubCluster
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateUpdateApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Application Id."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetApplicationHomeSubClusterRequest ()
specifier|public
name|void
name|testGetApplicationHomeSubClusterRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
try|try
block|{
name|GetApplicationHomeSubClusterRequest
name|request
init|=
name|GetApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateGetApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|GetApplicationHomeSubClusterRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateGetApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing GetApplicationHomeSubCluster Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null ApplicationId
try|try
block|{
name|GetApplicationHomeSubClusterRequest
name|request
init|=
name|GetApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appIdNull
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateGetApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Application Id."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteApplicationHomeSubClusterRequestNull ()
specifier|public
name|void
name|testDeleteApplicationHomeSubClusterRequestNull
parameter_list|()
block|{
comment|// Execution with valid inputs
try|try
block|{
name|DeleteApplicationHomeSubClusterRequest
name|request
init|=
name|DeleteApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateDeleteApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|DeleteApplicationHomeSubClusterRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateDeleteApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing DeleteApplicationHomeSubCluster Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null ApplicationId
try|try
block|{
name|DeleteApplicationHomeSubClusterRequest
name|request
init|=
name|DeleteApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appIdNull
argument_list|)
decl_stmt|;
name|FederationApplicationHomeSubClusterStoreInputValidator
operator|.
name|validateDeleteApplicationHomeSubClusterRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Application Id."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterPolicyConfigurationRequest ()
specifier|public
name|void
name|testGetSubClusterPolicyConfigurationRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
try|try
block|{
name|GetSubClusterPolicyConfigurationRequest
name|request
init|=
name|GetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateGetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|GetSubClusterPolicyConfigurationRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateGetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing GetSubClusterPolicyConfiguration Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null queue id
try|try
block|{
name|GetSubClusterPolicyConfigurationRequest
name|request
init|=
name|GetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|queueNull
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateGetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Queue."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with empty queue id
try|try
block|{
name|GetSubClusterPolicyConfigurationRequest
name|request
init|=
name|GetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|queueEmpty
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateGetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Queue."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetSubClusterPolicyConfigurationRequest ()
specifier|public
name|void
name|testSetSubClusterPolicyConfigurationRequest
parameter_list|()
block|{
comment|// Execution with valid inputs
try|try
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|,
name|type
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateSetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null request
try|try
block|{
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
literal|null
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateSetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SetSubClusterPolicyConfiguration Request."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null SubClusterPolicyConfiguration
try|try
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
literal|null
decl_stmt|;
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateSetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing SubClusterPolicyConfiguration."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null queue id
try|try
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queueNull
argument_list|,
name|type
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateSetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Queue."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with empty queue id
try|try
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queueEmpty
argument_list|,
name|type
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateSetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Queue."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with null policy type
try|try
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|,
name|typeNull
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateSetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Policy Type."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Execution with empty policy type
try|try
block|{
name|SubClusterPolicyConfiguration
name|policy
init|=
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|,
name|typeEmpty
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|FederationPolicyStoreInputValidator
operator|.
name|validateSetSubClusterPolicyConfigurationRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreInvalidInputException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing Policy Type."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

