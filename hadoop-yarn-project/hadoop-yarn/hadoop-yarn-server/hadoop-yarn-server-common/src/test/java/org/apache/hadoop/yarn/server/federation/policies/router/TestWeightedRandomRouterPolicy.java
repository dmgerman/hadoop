begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.router
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|router
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|BaseFederationPoliciesTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|dao
operator|.
name|WeightedPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterIdInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationPoliciesTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Simple test class for the {@link WeightedRandomRouterPolicy}. Generate large  * number of randomized tests to check we are weighiting correctly even if  * clusters go inactive.  */
end_comment

begin_class
DECL|class|TestWeightedRandomRouterPolicy
specifier|public
class|class
name|TestWeightedRandomRouterPolicy
extends|extends
name|BaseFederationPoliciesTest
block|{
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setPolicy
argument_list|(
operator|new
name|WeightedRandomRouterPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|setPolicyInfo
argument_list|(
operator|new
name|WeightedPolicyInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|routerWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|amrmWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// simulate 20 subclusters with a 5% chance of being inactive
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|SubClusterIdInfo
name|sc
init|=
operator|new
name|SubClusterIdInfo
argument_list|(
literal|"sc"
operator|+
name|i
argument_list|)
decl_stmt|;
comment|// with 5% omit a subcluster
if|if
condition|(
name|getRand
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|<
literal|0.95f
condition|)
block|{
name|SubClusterInfo
name|sci
init|=
name|mock
argument_list|(
name|SubClusterInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sc
operator|.
name|toId
argument_list|()
argument_list|)
expr_stmt|;
name|getActiveSubclusters
argument_list|()
operator|.
name|put
argument_list|(
name|sc
operator|.
name|toId
argument_list|()
argument_list|,
name|sci
argument_list|)
expr_stmt|;
block|}
comment|// 5% chance we omit one of the weights
name|float
name|weight
init|=
name|getRand
argument_list|()
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|<=
literal|5
operator|||
name|getRand
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|>
literal|0.05f
condition|)
block|{
name|routerWeights
operator|.
name|put
argument_list|(
name|sc
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|amrmWeights
operator|.
name|put
argument_list|(
name|sc
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
block|}
name|getPolicyInfo
argument_list|()
operator|.
name|setRouterPolicyWeights
argument_list|(
name|routerWeights
argument_list|)
expr_stmt|;
name|getPolicyInfo
argument_list|()
operator|.
name|setAMRMPolicyWeights
argument_list|(
name|amrmWeights
argument_list|)
expr_stmt|;
name|FederationPoliciesTestUtil
operator|.
name|initializePolicyContext
argument_list|(
name|getPolicy
argument_list|()
argument_list|,
name|getPolicyInfo
argument_list|()
argument_list|,
name|getActiveSubclusters
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterChosenWithRightProbability ()
specifier|public
name|void
name|testClusterChosenWithRightProbability
parameter_list|()
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|AtomicLong
argument_list|>
name|counter
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubClusterIdInfo
name|id
range|:
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|counter
operator|.
name|put
argument_list|(
name|id
operator|.
name|toId
argument_list|()
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|float
name|numberOfDraws
init|=
literal|1000000
decl_stmt|;
for|for
control|(
name|float
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfDraws
condition|;
name|i
operator|++
control|)
block|{
name|SubClusterId
name|chosenId
init|=
operator|(
operator|(
name|FederationRouterPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|getHomeSubcluster
argument_list|(
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
decl_stmt|;
name|counter
operator|.
name|get
argument_list|(
name|chosenId
argument_list|)
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|float
name|totalActiveWeight
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SubClusterId
name|id
range|:
name|getActiveSubclusters
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|SubClusterIdInfo
name|idInfo
init|=
operator|new
name|SubClusterIdInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
operator|.
name|containsKey
argument_list|(
name|idInfo
argument_list|)
condition|)
block|{
name|totalActiveWeight
operator|+=
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
operator|.
name|get
argument_list|(
name|idInfo
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|AtomicLong
argument_list|>
name|counterEntry
range|:
name|counter
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|float
name|expectedWeight
init|=
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|SubClusterIdInfo
argument_list|(
name|counterEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
operator|/
name|totalActiveWeight
decl_stmt|;
name|float
name|actualWeight
init|=
name|counterEntry
operator|.
name|getValue
argument_list|()
operator|.
name|floatValue
argument_list|()
operator|/
name|numberOfDraws
decl_stmt|;
comment|// make sure that the weights is respected among active subclusters
comment|// and no jobs are routed to inactive subclusters.
if|if
condition|(
name|getActiveSubclusters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|counterEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Id "
operator|+
name|counterEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|" Actual weight: "
operator|+
name|actualWeight
operator|+
literal|" expected weight: "
operator|+
name|expectedWeight
argument_list|,
name|expectedWeight
operator|==
literal|0
operator|||
operator|(
name|actualWeight
operator|/
name|expectedWeight
operator|)
operator|<
literal|1.1
operator|&&
operator|(
name|actualWeight
operator|/
name|expectedWeight
operator|)
operator|>
literal|0.9
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Id "
operator|+
name|counterEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|" Actual weight: "
operator|+
name|actualWeight
operator|+
literal|" expected weight: "
operator|+
name|expectedWeight
argument_list|,
name|actualWeight
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

