begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.utils
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
operator|.
name|MemoryFederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Unit tests for FederationStateStoreFacade.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestFederationStateStoreFacade
specifier|public
class|class
name|TestFederationStateStoreFacade
block|{
annotation|@
name|Parameters
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"NoWhitespaceAfter"
block|}
argument_list|)
DECL|method|getParameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Boolean
index|[]
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Boolean
index|[]
index|[]
block|{
block|{
name|Boolean
operator|.
name|FALSE
block|}
block|,
block|{
name|Boolean
operator|.
name|TRUE
block|}
block|}
argument_list|)
return|;
block|}
DECL|field|clusterTs
specifier|private
specifier|final
name|long
name|clusterTs
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|numSubClusters
specifier|private
specifier|final
name|int
name|numSubClusters
init|=
literal|3
decl_stmt|;
DECL|field|numApps
specifier|private
specifier|final
name|int
name|numApps
init|=
literal|5
decl_stmt|;
DECL|field|numQueues
specifier|private
specifier|final
name|int
name|numQueues
init|=
literal|2
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|stateStore
specifier|private
name|FederationStateStore
name|stateStore
decl_stmt|;
DECL|field|stateStoreTestUtil
specifier|private
name|FederationStateStoreTestUtil
name|stateStoreTestUtil
decl_stmt|;
DECL|field|facade
specifier|private
name|FederationStateStoreFacade
name|facade
init|=
name|FederationStateStoreFacade
operator|.
name|getInstance
argument_list|()
decl_stmt|;
DECL|method|TestFederationStateStoreFacade (Boolean isCachingEnabled)
specifier|public
name|TestFederationStateStoreFacade
parameter_list|(
name|Boolean
name|isCachingEnabled
parameter_list|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|isCachingEnabled
operator|.
name|booleanValue
argument_list|()
operator|)
condition|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_CACHE_TIME_TO_LIVE_SECS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|stateStore
operator|=
operator|new
name|MemoryFederationStateStore
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|facade
operator|.
name|reinitialize
argument_list|(
name|stateStore
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// hydrate the store
name|stateStoreTestUtil
operator|=
operator|new
name|FederationStateStoreTestUtil
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|stateStoreTestUtil
operator|.
name|registerSubClusters
argument_list|(
name|numSubClusters
argument_list|)
expr_stmt|;
name|stateStoreTestUtil
operator|.
name|addAppsHomeSC
argument_list|(
name|clusterTs
argument_list|,
name|numApps
argument_list|)
expr_stmt|;
name|stateStoreTestUtil
operator|.
name|addPolicyConfigs
argument_list|(
name|numQueues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|stateStore
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSubCluster ()
specifier|public
name|void
name|testGetSubCluster
parameter_list|()
throws|throws
name|YarnException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubClusters
condition|;
name|i
operator|++
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|FederationStateStoreTestUtil
operator|.
name|SC_PREFIX
operator|+
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stateStoreTestUtil
operator|.
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
argument_list|,
name|facade
operator|.
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidGetSubCluster ()
specifier|public
name|void
name|testInvalidGetSubCluster
parameter_list|()
throws|throws
name|YarnException
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|FederationStateStoreTestUtil
operator|.
name|INVALID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|facade
operator|.
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterFlushCache ()
specifier|public
name|void
name|testGetSubClusterFlushCache
parameter_list|()
throws|throws
name|YarnException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubClusters
condition|;
name|i
operator|++
control|)
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|FederationStateStoreTestUtil
operator|.
name|SC_PREFIX
operator|+
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stateStoreTestUtil
operator|.
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
argument_list|,
name|facade
operator|.
name|getSubCluster
argument_list|(
name|subClusterId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClusters ()
specifier|public
name|void
name|testGetSubClusters
parameter_list|()
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|subClusters
init|=
name|facade
operator|.
name|getSubClusters
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|SubClusterId
name|subClusterId
range|:
name|subClusters
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stateStoreTestUtil
operator|.
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
argument_list|,
name|subClusters
operator|.
name|get
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetPolicyConfiguration ()
specifier|public
name|void
name|testGetPolicyConfiguration
parameter_list|()
throws|throws
name|YarnException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQueues
condition|;
name|i
operator|++
control|)
block|{
name|String
name|queue
init|=
name|FederationStateStoreTestUtil
operator|.
name|Q_PREFIX
operator|+
name|i
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stateStoreTestUtil
operator|.
name|queryPolicyConfiguration
argument_list|(
name|queue
argument_list|)
argument_list|,
name|facade
operator|.
name|getPolicyConfiguration
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubClustersCache ()
specifier|public
name|void
name|testSubClustersCache
parameter_list|()
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|allClusters
init|=
name|facade
operator|.
name|getSubClusters
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numSubClusters
argument_list|,
name|allClusters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SubClusterId
name|clusterId
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|allClusters
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// make  one subcluster down unregister
name|stateStoreTestUtil
operator|.
name|deRegisterSubCluster
argument_list|(
name|clusterId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|activeClusters
init|=
name|facade
operator|.
name|getSubClusters
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numSubClusters
operator|-
literal|1
argument_list|,
name|activeClusters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Recheck false case.
name|allClusters
operator|=
name|facade
operator|.
name|getSubClusters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numSubClusters
argument_list|,
name|allClusters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidGetPolicyConfiguration ()
specifier|public
name|void
name|testInvalidGetPolicyConfiguration
parameter_list|()
throws|throws
name|YarnException
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|facade
operator|.
name|getPolicyConfiguration
argument_list|(
name|FederationStateStoreTestUtil
operator|.
name|INVALID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPoliciesConfigurations ()
specifier|public
name|void
name|testGetPoliciesConfigurations
parameter_list|()
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|SubClusterPolicyConfiguration
argument_list|>
name|queuePolicies
init|=
name|facade
operator|.
name|getPoliciesConfigurations
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|queuePolicies
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stateStoreTestUtil
operator|.
name|queryPolicyConfiguration
argument_list|(
name|queue
argument_list|)
argument_list|,
name|queuePolicies
operator|.
name|get
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetHomeSubClusterForApp ()
specifier|public
name|void
name|testGetHomeSubClusterForApp
parameter_list|()
throws|throws
name|YarnException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numApps
condition|;
name|i
operator|++
control|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTs
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stateStoreTestUtil
operator|.
name|queryApplicationHomeSC
argument_list|(
name|appId
argument_list|)
argument_list|,
name|facade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAddApplicationHomeSubCluster ()
specifier|public
name|void
name|testAddApplicationHomeSubCluster
parameter_list|()
throws|throws
name|YarnException
block|{
comment|// Inserting<AppId, Home1> into FederationStateStore
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTs
argument_list|,
name|numApps
operator|+
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId1
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"Home1"
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|appHomeSubCluster
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId1
argument_list|)
decl_stmt|;
name|SubClusterId
name|result
init|=
name|facade
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|appHomeSubCluster
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|facade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|appId
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId1
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// Inserting<AppId, Home2> into FederationStateStore.
comment|// The application is already present.
comment|// FederationFacade will return Home1 as SubClusterId.
name|SubClusterId
name|subClusterId2
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"Home2"
argument_list|)
decl_stmt|;
name|appHomeSubCluster
operator|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId2
argument_list|)
expr_stmt|;
name|result
operator|=
name|facade
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|appHomeSubCluster
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|facade
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|appId
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId1
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

