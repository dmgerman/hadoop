begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for {@link FederationPolicyUtils}.  */
end_comment

begin_class
DECL|class|TestFederationPolicyUtils
specifier|public
class|class
name|TestFederationPolicyUtils
block|{
annotation|@
name|Test
DECL|method|testGetWeightedRandom ()
specifier|public
name|void
name|testGetWeightedRandom
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|float
index|[]
name|weights
init|=
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0.1f
block|,
literal|0.2f
block|,
literal|0.2f
block|,
operator|-
literal|0.1f
block|,
literal|0.1f
block|,
literal|0.2f
block|,
literal|0.1f
block|,
literal|0.1f
block|}
decl_stmt|;
name|float
index|[]
name|expectedWeights
init|=
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0.1f
block|,
literal|0.2f
block|,
literal|0.2f
block|,
literal|0
block|,
literal|0.1f
block|,
literal|0.2f
block|,
literal|0.1f
block|,
literal|0.1f
block|}
decl_stmt|;
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|weights
operator|.
name|length
index|]
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|weightsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|float
name|weight
range|:
name|weights
control|)
block|{
name|weightsList
operator|.
name|add
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
name|int
name|n
init|=
literal|10000000
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|int
name|sample
init|=
name|FederationPolicyUtils
operator|.
name|getWeightedRandom
argument_list|(
name|weightsList
argument_list|)
decl_stmt|;
name|result
index|[
name|sample
index|]
operator|++
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|weights
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|actualWeight
init|=
operator|(
name|float
operator|)
name|result
index|[
name|i
index|]
operator|/
name|n
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" "
operator|+
name|actualWeight
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Index "
operator|+
name|i
operator|+
literal|" Actual weight: "
operator|+
name|actualWeight
operator|+
literal|" expected weight: "
operator|+
name|expectedWeights
index|[
name|i
index|]
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|actualWeight
operator|-
name|expectedWeights
index|[
name|i
index|]
argument_list|)
operator|<
literal|0.01
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

