begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.resolver
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test {@link SubClusterResolver} against correct and malformed Federation  * machine lists.  */
end_comment

begin_class
DECL|class|TestDefaultSubClusterResolver
specifier|public
class|class
name|TestDefaultSubClusterResolver
block|{
DECL|field|conf
specifier|private
specifier|static
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|resolver
specifier|private
specifier|static
name|SubClusterResolver
name|resolver
decl_stmt|;
DECL|method|setUpGoodFile ()
specifier|public
specifier|static
name|void
name|setUpGoodFile
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|new
name|DefaultSubClusterResolverImpl
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"nodes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find 'nodes' dummy file in classpath"
argument_list|)
throw|;
block|}
comment|// This will get rid of the beginning '/' in the url in Windows env
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_MACHINE_LIST
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpMalformedFile ()
specifier|private
name|void
name|setUpMalformedFile
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|new
name|DefaultSubClusterResolverImpl
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"nodes-malformed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find 'nodes-malformed' dummy file in classpath"
argument_list|)
throw|;
block|}
comment|// This will get rid of the beginning '/' in the url in Windows env
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_MACHINE_LIST
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
DECL|method|setUpNonExistentFile ()
specifier|private
name|void
name|setUpNonExistentFile
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|resolver
operator|=
operator|new
name|DefaultSubClusterResolverImpl
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_MACHINE_LIST
argument_list|,
literal|"fileDoesNotExist"
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resolver
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterForNode ()
specifier|public
name|void
name|testGetSubClusterForNode
parameter_list|()
throws|throws
name|YarnException
block|{
name|setUpGoodFile
argument_list|()
expr_stmt|;
comment|// All lowercase, no whitespace in machine list file
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster1"
argument_list|)
argument_list|,
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Leading and trailing whitespace in machine list file
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster2"
argument_list|)
argument_list|,
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node name capitalization in machine list file
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster3"
argument_list|)
argument_list|,
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"nodeDoesNotExist"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot find subClusterId for node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterForNodeMalformedFile ()
specifier|public
name|void
name|testGetSubClusterForNodeMalformedFile
parameter_list|()
throws|throws
name|YarnException
block|{
name|setUpMalformedFile
argument_list|()
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot find subClusterId for node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot find subClusterId for node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster3"
argument_list|)
argument_list|,
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"node3"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"nodeDoesNotExist"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot find subClusterId for node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterForNodeNoFile ()
specifier|public
name|void
name|testGetSubClusterForNodeNoFile
parameter_list|()
throws|throws
name|YarnException
block|{
name|setUpNonExistentFile
argument_list|()
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot find subClusterId for node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClustersForRack ()
specifier|public
name|void
name|testGetSubClustersForRack
parameter_list|()
throws|throws
name|YarnException
block|{
name|setUpGoodFile
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|SubClusterId
argument_list|>
name|rack1Expected
init|=
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
decl_stmt|;
name|rack1Expected
operator|.
name|add
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster1"
argument_list|)
argument_list|)
expr_stmt|;
name|rack1Expected
operator|.
name|add
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster2"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SubClusterId
argument_list|>
name|rack2Expected
init|=
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
decl_stmt|;
name|rack2Expected
operator|.
name|add
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two subclusters have nodes in rack1
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rack1Expected
argument_list|,
name|resolver
operator|.
name|getSubClustersForRack
argument_list|(
literal|"rack1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Two nodes are in rack2, but both belong to subcluster3
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rack2Expected
argument_list|,
name|resolver
operator|.
name|getSubClustersForRack
argument_list|(
literal|"rack2"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|getSubClustersForRack
argument_list|(
literal|"rackDoesNotExist"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot resolve rack"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClustersForRackNoFile ()
specifier|public
name|void
name|testGetSubClustersForRackNoFile
parameter_list|()
throws|throws
name|YarnException
block|{
name|setUpNonExistentFile
argument_list|()
expr_stmt|;
try|try
block|{
name|resolver
operator|.
name|getSubClustersForRack
argument_list|(
literal|"rack1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Cannot resolve rack"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

