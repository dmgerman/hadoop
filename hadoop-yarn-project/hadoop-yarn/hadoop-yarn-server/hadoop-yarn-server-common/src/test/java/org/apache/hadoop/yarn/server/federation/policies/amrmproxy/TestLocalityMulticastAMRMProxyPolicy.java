begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.policies.amrmproxy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|amrmproxy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|BaseFederationPoliciesTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|FederationPolicyInitializationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|dao
operator|.
name|WeightedPolicyInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|policies
operator|.
name|exceptions
operator|.
name|FederationPolicyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|DefaultSubClusterResolverImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|resolver
operator|.
name|SubClusterResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterIdInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|utils
operator|.
name|FederationPoliciesTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Simple test class for the {@link LocalityMulticastAMRMProxyPolicy}.  */
end_comment

begin_class
DECL|class|TestLocalityMulticastAMRMProxyPolicy
specifier|public
class|class
name|TestLocalityMulticastAMRMProxyPolicy
extends|extends
name|BaseFederationPoliciesTest
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLocalityMulticastAMRMProxyPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setPolicy
argument_list|(
operator|new
name|TestableLocalityMulticastAMRMProxyPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|setPolicyInfo
argument_list|(
operator|new
name|WeightedPolicyInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|routerWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
name|amrmWeights
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Six sub-clusters with one inactive and one disabled
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|SubClusterIdInfo
name|sc
init|=
operator|new
name|SubClusterIdInfo
argument_list|(
literal|"subcluster"
operator|+
name|i
argument_list|)
decl_stmt|;
comment|// sub-cluster 3 is not active
if|if
condition|(
name|i
operator|!=
literal|3
condition|)
block|{
name|SubClusterInfo
name|sci
init|=
name|mock
argument_list|(
name|SubClusterInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sc
operator|.
name|toId
argument_list|()
argument_list|)
expr_stmt|;
name|getActiveSubclusters
argument_list|()
operator|.
name|put
argument_list|(
name|sc
operator|.
name|toId
argument_list|()
argument_list|,
name|sci
argument_list|)
expr_stmt|;
block|}
name|float
name|weight
init|=
literal|1
operator|/
literal|10f
decl_stmt|;
name|routerWeights
operator|.
name|put
argument_list|(
name|sc
argument_list|,
name|weight
argument_list|)
expr_stmt|;
name|amrmWeights
operator|.
name|put
argument_list|(
name|sc
argument_list|,
name|weight
argument_list|)
expr_stmt|;
comment|// sub-cluster 4 is "disabled" in the weights
if|if
condition|(
name|i
operator|==
literal|4
condition|)
block|{
name|routerWeights
operator|.
name|put
argument_list|(
name|sc
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|amrmWeights
operator|.
name|put
argument_list|(
name|sc
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
block|}
block|}
name|getPolicyInfo
argument_list|()
operator|.
name|setRouterPolicyWeights
argument_list|(
name|routerWeights
argument_list|)
expr_stmt|;
name|getPolicyInfo
argument_list|()
operator|.
name|setAMRMPolicyWeights
argument_list|(
name|amrmWeights
argument_list|)
expr_stmt|;
name|getPolicyInfo
argument_list|()
operator|.
name|setHeadroomAlpha
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|setHomeSubCluster
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"homesubcluster"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReinitilialize ()
specifier|public
name|void
name|testReinitilialize
parameter_list|()
throws|throws
name|YarnException
block|{
name|initializePolicy
argument_list|()
expr_stmt|;
block|}
DECL|method|initializePolicy ()
specifier|private
name|void
name|initializePolicy
parameter_list|()
throws|throws
name|YarnException
block|{
name|initializePolicy
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initializePolicy (Configuration conf)
specifier|private
name|void
name|initializePolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|YarnException
block|{
name|setFederationPolicyContext
argument_list|(
operator|new
name|FederationPolicyInitializationContext
argument_list|()
argument_list|)
expr_stmt|;
name|SubClusterResolver
name|resolver
init|=
name|FederationPoliciesTestUtil
operator|.
name|initResolver
argument_list|()
decl_stmt|;
name|getFederationPolicyContext
argument_list|()
operator|.
name|setFederationSubclusterResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
name|ByteBuffer
name|buf
init|=
name|getPolicyInfo
argument_list|()
operator|.
name|toByteBuffer
argument_list|()
decl_stmt|;
name|getFederationPolicyContext
argument_list|()
operator|.
name|setSubClusterPolicyConfiguration
argument_list|(
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
literal|"queue1"
argument_list|,
name|getPolicy
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|getFederationPolicyContext
argument_list|()
operator|.
name|setHomeSubcluster
argument_list|(
name|getHomeSubCluster
argument_list|()
argument_list|)
expr_stmt|;
name|FederationPoliciesTestUtil
operator|.
name|initializePolicyContext
argument_list|(
name|getFederationPolicyContext
argument_list|()
argument_list|,
name|getPolicy
argument_list|()
argument_list|,
name|getPolicyInfo
argument_list|()
argument_list|,
name|getActiveSubclusters
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FederationPolicyInitializationException
operator|.
name|class
argument_list|)
DECL|method|testNullWeights ()
specifier|public
name|void
name|testNullWeights
parameter_list|()
throws|throws
name|Exception
block|{
name|getPolicyInfo
argument_list|()
operator|.
name|setAMRMPolicyWeights
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|FederationPolicyInitializationException
operator|.
name|class
argument_list|)
DECL|method|testEmptyWeights ()
specifier|public
name|void
name|testEmptyWeights
parameter_list|()
throws|throws
name|Exception
block|{
name|getPolicyInfo
argument_list|()
operator|.
name|setAMRMPolicyWeights
argument_list|(
operator|new
name|HashMap
argument_list|<
name|SubClusterIdInfo
argument_list|,
name|Float
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitBasedOnHeadroom ()
specifier|public
name|void
name|testSplitBasedOnHeadroom
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests how the headroom info are used to split based on the capacity
comment|// each RM claims to give us.
comment|// Configure policy to be 100% headroom based
name|getPolicyInfo
argument_list|()
operator|.
name|setHeadroomAlpha
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createSimpleRequest
argument_list|()
decl_stmt|;
name|prepPolicyWithHeadroom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// pretty print requests
name|LOG
operator|.
name|info
argument_list|(
literal|"Initial headroom"
argument_list|)
expr_stmt|;
name|prettyPrintRequests
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
comment|/*      * based on headroom, we expect 75 containers to got to subcluster0 (60) and      * subcluster2 (15) according to the advertised headroom (40 and 10), no      * containers for sublcuster1 as it advertise zero headroom, and 25 to      * subcluster5 which has unknown headroom, and so it gets 1/4th of the load      */
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|1
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// notify a change in headroom and try again
name|AllocateResponse
name|ar
init|=
name|getAllocateResponseWithTargetHeadroom
argument_list|(
literal|40
argument_list|)
decl_stmt|;
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|notifyOfResponse
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster2"
argument_list|)
argument_list|,
name|ar
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After headroom update"
argument_list|)
expr_stmt|;
name|prettyPrintRequests
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
comment|/*      * we simulated a change in headroom for subcluster2, which will now have      * the same headroom of subcluster0, so each 37.5, note that the odd one      * will be assigned to either one of the two subclusters      */
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|1
argument_list|,
literal|37
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|37
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testStressPolicy ()
specifier|public
name|void
name|testStressPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests how the headroom info are used to split based on the capacity
comment|// each RM claims to give us.
comment|// Configure policy to be 100% headroom based
name|getPolicyInfo
argument_list|()
operator|.
name|setHeadroomAlpha
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|()
expr_stmt|;
name|addHomeSubClusterAsActive
argument_list|()
expr_stmt|;
name|int
name|numRR
init|=
literal|1000
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createLargeRandomList
argument_list|(
name|numRR
argument_list|)
decl_stmt|;
name|prepPolicyWithHeadroom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|numIterations
init|=
literal|1000
decl_stmt|;
name|long
name|tstart
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIterations
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
block|}
name|long
name|tend
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Performed "
operator|+
name|numIterations
operator|+
literal|" policy invocations (and "
operator|+
literal|"validations) in "
operator|+
operator|(
name|tend
operator|-
name|tstart
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFWDAllZeroANY ()
specifier|public
name|void
name|testFWDAllZeroANY
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests how the headroom info are used to split based on the capacity
comment|// each RM claims to give us.
comment|// Configure policy to be 100% headroom based
name|getPolicyInfo
argument_list|()
operator|.
name|setHeadroomAlpha
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createZeroSizedANYRequest
argument_list|()
decl_stmt|;
comment|// this receives responses from sc0,sc1,sc2
name|prepPolicyWithHeadroom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// we expect all three to appear for a zero-sized ANY
comment|// pretty print requests
name|prettyPrintRequests
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
comment|// we expect the zero size request to be sent to the first 3 rm (due to
comment|// the fact that we received responses only from these 3 sublcusters)
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster3"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitBasedOnHeadroomAndWeights ()
specifier|public
name|void
name|testSplitBasedOnHeadroomAndWeights
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests how the headroom info are used to split based on the capacity
comment|// each RM claims to give us.
comment|// Configure policy to be 50% headroom based and 50% weight based
name|getPolicyInfo
argument_list|()
operator|.
name|setHeadroomAlpha
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createSimpleRequest
argument_list|()
decl_stmt|;
name|prepPolicyWithHeadroom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// pretty print requests
name|prettyPrintRequests
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
comment|// in this case the headroom allocates 50 containers, while weights allocate
comment|// the rest. due to weights we have 12.5 containers for each
comment|// sublcuster, the rest is due to headroom.
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|1
argument_list|,
literal|42
argument_list|)
expr_stmt|;
comment|// 30 + 12.5
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// 0 + 12.5
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// 7.5 + 12.5
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster3"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
expr_stmt|;
comment|// 12.5 + 12.5
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|prepPolicyWithHeadroom (boolean setSubCluster0)
specifier|private
name|void
name|prepPolicyWithHeadroom
parameter_list|(
name|boolean
name|setSubCluster0
parameter_list|)
throws|throws
name|YarnException
block|{
name|AllocateResponse
name|ar
init|=
name|getAllocateResponseWithTargetHeadroom
argument_list|(
literal|40
argument_list|)
decl_stmt|;
if|if
condition|(
name|setSubCluster0
condition|)
block|{
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|notifyOfResponse
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster0"
argument_list|)
argument_list|,
name|ar
argument_list|)
expr_stmt|;
block|}
name|ar
operator|=
name|getAllocateResponseWithTargetHeadroom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|notifyOfResponse
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster1"
argument_list|)
argument_list|,
name|ar
argument_list|)
expr_stmt|;
name|ar
operator|=
name|getAllocateResponseWithTargetHeadroom
argument_list|(
literal|10
argument_list|)
expr_stmt|;
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|notifyOfResponse
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster2"
argument_list|)
argument_list|,
name|ar
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllocateResponseWithTargetHeadroom ( int numContainers)
specifier|private
name|AllocateResponse
name|getAllocateResponseWithTargetHeadroom
parameter_list|(
name|int
name|numContainers
parameter_list|)
block|{
return|return
name|AllocateResponse
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|NodeReport
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|numContainers
operator|*
literal|1024
argument_list|,
name|numContainers
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|NMToken
operator|>
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * modify default initialization to include a "homesubcluster" which we will    * use as the default for when nodes or racks are unknown.    */
DECL|method|addHomeSubClusterAsActive ()
specifier|private
name|void
name|addHomeSubClusterAsActive
parameter_list|()
block|{
name|SubClusterInfo
name|sci
init|=
name|mock
argument_list|(
name|SubClusterInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getHomeSubCluster
argument_list|()
argument_list|)
expr_stmt|;
name|getActiveSubclusters
argument_list|()
operator|.
name|put
argument_list|(
name|getHomeSubCluster
argument_list|()
argument_list|,
name|sci
argument_list|)
expr_stmt|;
name|SubClusterIdInfo
name|sc
init|=
operator|new
name|SubClusterIdInfo
argument_list|(
name|getHomeSubCluster
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
operator|.
name|put
argument_list|(
name|sc
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|getPolicyInfo
argument_list|()
operator|.
name|getAMRMPolicyWeights
argument_list|()
operator|.
name|put
argument_list|(
name|sc
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitAllocateRequest ()
specifier|public
name|void
name|testSplitAllocateRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test a complex List<ResourceRequest> is split correctly
name|initializePolicy
argument_list|()
expr_stmt|;
name|addHomeSubClusterAsActive
argument_list|()
expr_stmt|;
name|FederationPoliciesTestUtil
operator|.
name|initializePolicyContext
argument_list|(
name|getFederationPolicyContext
argument_list|()
argument_list|,
name|getPolicy
argument_list|()
argument_list|,
name|getPolicyInfo
argument_list|()
argument_list|,
name|getActiveSubclusters
argument_list|()
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createComplexRequest
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
name|prettyPrintRequests
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// we expect 7 entries for home subcluster (2 for request-id 4, 3 for
comment|// request-id 5, and a part of the broadcast of request-id 2
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
name|getHomeSubCluster
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|7
argument_list|,
literal|29
argument_list|)
expr_stmt|;
comment|// for subcluster0 we expect 10 entries, 3 from request-id 0, and 3 from
comment|// request-id 3, 3 entries from request-id 5, as well as part of the
comment|// request-id 2 broadast
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|10
argument_list|,
literal|32
argument_list|)
expr_stmt|;
comment|// we expect 5 entries for subcluster1 (4 from request-id 1, and part
comment|// of the broadcast of request-id 2
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|5
argument_list|,
literal|26
argument_list|)
expr_stmt|;
comment|// sub-cluster 2 should contain 3 entries from request-id 1 and 1 from the
comment|// broadcast of request-id 2, and no request-id 0
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|4
argument_list|,
literal|23
argument_list|)
expr_stmt|;
comment|// subcluster id 3, 4 should not appear (due to weights or active/inactive)
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster3"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// subcluster5 should get only part of the request-id 2 broadcast
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
literal|1
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// Check the total number of container asks in all RR
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|130
argument_list|)
expr_stmt|;
comment|// check that the allocations that show up are what expected
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|response
operator|.
name|get
argument_list|(
name|getHomeSubCluster
argument_list|()
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|2L
operator|||
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|4L
operator|||
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|5L
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|rrs
init|=
name|response
operator|.
name|get
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster0"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|rrs
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|!=
literal|1L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|!=
literal|4L
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|response
operator|.
name|get
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster1"
argument_list|)
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|1L
operator|||
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|2L
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|response
operator|.
name|get
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster2"
argument_list|)
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|1L
operator|||
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|2L
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|response
operator|.
name|get
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster5"
argument_list|)
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rr
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check that the number of containers in the first ResourceRequest in
comment|// response for this sub-cluster matches expectations. -1 indicate the
comment|// response should be null
DECL|method|checkExpectedAllocation ( Map<SubClusterId, List<ResourceRequest>> response, String subCluster, long totResourceRequests, long minimumTotalContainers)
specifier|private
name|void
name|checkExpectedAllocation
parameter_list|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
parameter_list|,
name|String
name|subCluster
parameter_list|,
name|long
name|totResourceRequests
parameter_list|,
name|long
name|minimumTotalContainers
parameter_list|)
block|{
if|if
condition|(
name|minimumTotalContainers
operator|==
operator|-
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|response
operator|.
name|get
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|subCluster
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SubClusterId
name|sc
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
name|subCluster
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totResourceRequests
argument_list|,
name|response
operator|.
name|get
argument_list|(
name|sc
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|actualContCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|response
operator|.
name|get
argument_list|(
name|sc
argument_list|)
control|)
block|{
name|actualContCount
operator|+=
name|rr
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Actual count "
operator|+
name|actualContCount
operator|+
literal|" should be at least "
operator|+
name|minimumTotalContainers
argument_list|,
name|minimumTotalContainers
operator|<=
name|actualContCount
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkTotalContainerAllocation ( Map<SubClusterId, List<ResourceRequest>> response, long totalContainers)
specifier|private
name|void
name|checkTotalContainerAllocation
parameter_list|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
parameter_list|,
name|long
name|totalContainers
parameter_list|)
block|{
name|long
name|actualContCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|entry
range|:
name|response
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|actualContCount
operator|+=
name|rr
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalContainers
argument_list|,
name|actualContCount
argument_list|)
expr_stmt|;
block|}
DECL|method|validateSplit (Map<SubClusterId, List<ResourceRequest>> split, List<ResourceRequest> original)
specifier|private
name|void
name|validateSplit
parameter_list|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|split
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|original
parameter_list|)
throws|throws
name|YarnException
block|{
name|SubClusterResolver
name|resolver
init|=
name|getFederationPolicyContext
argument_list|()
operator|.
name|getFederationSubclusterResolver
argument_list|()
decl_stmt|;
comment|// Apply general validation rules
name|int
name|numUsedSubclusters
init|=
name|split
operator|.
name|size
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|originalIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|splitIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|originalContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|original
control|)
block|{
name|originalContainers
operator|+=
name|rr
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
name|originalIds
operator|.
name|add
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|splitContainers
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|rrs
range|:
name|split
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|rrs
operator|.
name|getValue
argument_list|()
control|)
block|{
name|splitContainers
operator|+=
name|rr
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
name|splitIds
operator|.
name|add
argument_list|(
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
expr_stmt|;
comment|// check node-local asks are sent to right RM (only)
name|SubClusterId
name|fid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fid
operator|=
name|resolver
operator|.
name|getSubClusterForNode
argument_list|(
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// ignore code will handle
block|}
if|if
condition|(
operator|!
name|rrs
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|getHomeSubCluster
argument_list|()
argument_list|)
operator|&&
name|fid
operator|!=
literal|null
operator|&&
operator|!
name|fid
operator|.
name|equals
argument_list|(
name|rrs
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"A node-local (or resolvable rack-local) RR should not "
operator|+
literal|"be send to an RM other than what it resolves to."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check we are not inventing Allocation Ids
name|Assert
operator|.
name|assertEquals
argument_list|(
name|originalIds
argument_list|,
name|splitIds
argument_list|)
expr_stmt|;
comment|// check we are not exceedingly replicating the container asks among
comment|// RMs (a little is allowed due to rounding of fractional splits)
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|" Containers requested ("
operator|+
name|splitContainers
operator|+
literal|") should "
operator|+
literal|"not exceed the original count of containers ("
operator|+
name|originalContainers
operator|+
literal|") by more than the number of subclusters ("
operator|+
name|numUsedSubclusters
operator|+
literal|")"
argument_list|,
name|originalContainers
operator|+
name|numUsedSubclusters
operator|>=
name|splitContainers
argument_list|)
expr_stmt|;
comment|// Test target Ids
for|for
control|(
name|SubClusterId
name|targetId
range|:
name|split
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target subcluster "
operator|+
name|targetId
operator|+
literal|" should be in the active set"
argument_list|,
name|getActiveSubclusters
argument_list|()
operator|.
name|containsKey
argument_list|(
name|targetId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Target subclusters ("
operator|+
name|targetId
operator|+
literal|") should have weight>0 in "
operator|+
literal|"the policy "
argument_list|,
name|getPolicyInfo
argument_list|()
operator|.
name|getRouterPolicyWeights
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|SubClusterIdInfo
argument_list|(
name|targetId
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prettyPrintRequests ( Map<SubClusterId, List<ResourceRequest>> response)
specifier|private
name|void
name|prettyPrintRequests
parameter_list|(
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|entry
range|:
name|response
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|str
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|str
operator|+=
literal|" [id:"
operator|+
name|rr
operator|.
name|getAllocationRequestId
argument_list|()
operator|+
literal|" loc:"
operator|+
name|rr
operator|.
name|getResourceName
argument_list|()
operator|+
literal|" numCont:"
operator|+
name|rr
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|"], "
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" --> "
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createLargeRandomList (int numRR)
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|createLargeRandomList
parameter_list|(
name|int
name|numRR
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DefaultSubClusterResolverImpl
name|resolver
init|=
operator|(
name|DefaultSubClusterResolverImpl
operator|)
name|getFederationPolicyContext
argument_list|()
operator|.
name|getFederationSubclusterResolver
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|resolver
operator|.
name|getNodeToSubCluster
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRR
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|nodes
operator|.
name|get
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|allocationId
init|=
operator|(
name|long
operator|)
name|rand
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
comment|// create a single container request in sc0
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
name|allocationId
argument_list|,
name|nodeName
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|null
argument_list|,
name|rand
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|createSimpleRequest ()
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|createSimpleRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create a single container request in sc0
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|createZeroSizedANYRequest ()
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|createZeroSizedANYRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create a single container request in sc0
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|createComplexRequest ()
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|createComplexRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|out
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create a single container request in sc0
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
literal|"subcluster0-rack0-host0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
literal|"subcluster0-rack0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a single container request with 3 alternative hosts across sc1,sc2
comment|// where we want 2 containers in sc1 and 1 in sc2
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|1L
argument_list|,
literal|"subcluster1-rack1-host1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|1L
argument_list|,
literal|"subcluster1-rack1-host2"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|1L
argument_list|,
literal|"subcluster2-rack3-host3"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|1L
argument_list|,
literal|"subcluster1-rack1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|1L
argument_list|,
literal|"subcluster2-rack3"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|1L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a non-local ANY request that can span anything
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|2L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a single container request in sc0 with relaxed locality
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|3L
argument_list|,
literal|"subcluster0-rack0-host0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|3L
argument_list|,
literal|"subcluster0-rack0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|3L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a request of an unknown node/rack and expect this to show up
comment|// in homesubcluster
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|4L
argument_list|,
literal|"unknownNode"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|4L
argument_list|,
literal|"unknownRack"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|4L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a request of two hosts, an unknown node and a known node, both in
comment|// a known rack, and expect the unknown node to show up in homesubcluster
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|5L
argument_list|,
literal|"subcluster0-rack0-host0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|5L
argument_list|,
literal|"subcluster0-rack0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|5L
argument_list|,
literal|"node4"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|5L
argument_list|,
literal|"rack2"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|5L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|printList (ArrayList<Integer> list)
specifier|public
name|String
name|printList
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|entry
range|:
name|list
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|+
literal|", "
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testIntegerAssignment ()
specifier|public
name|void
name|testIntegerAssignment
parameter_list|()
throws|throws
name|YarnException
block|{
name|float
index|[]
name|weights
init|=
operator|new
name|float
index|[]
block|{
literal|0
block|,
literal|0.1f
block|,
literal|0.2f
block|,
literal|0.2f
block|,
operator|-
literal|0.1f
block|,
literal|0.1f
block|,
literal|0.2f
block|,
literal|0.1f
block|,
literal|0.1f
block|}
decl_stmt|;
name|int
index|[]
name|expectedMin
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|3
block|,
literal|3
block|,
literal|0
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|ArrayList
argument_list|<
name|Float
argument_list|>
name|weightsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|float
name|weight
range|:
name|weights
control|)
block|{
name|weightsList
operator|.
name|add
argument_list|(
name|weight
argument_list|)
expr_stmt|;
block|}
name|LocalityMulticastAMRMProxyPolicy
name|policy
init|=
operator|(
name|LocalityMulticastAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500000
condition|;
name|i
operator|++
control|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|allocations
init|=
name|policy
operator|.
name|computeIntegerAssignment
argument_list|(
literal|19
argument_list|,
name|weightsList
argument_list|)
decl_stmt|;
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|weights
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sum
operator|+=
name|allocations
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocations
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|<
name|expectedMin
index|[
name|j
index|]
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|allocations
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|+
literal|" at index "
operator|+
name|j
operator|+
literal|" should be at least "
operator|+
name|expectedMin
index|[
name|j
index|]
operator|+
literal|". Allocation array: "
operator|+
name|printList
argument_list|(
name|allocations
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expect sum to be 19 in array: "
operator|+
name|printList
argument_list|(
name|allocations
argument_list|)
argument_list|,
literal|19
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCancelWithLocalizedResource ()
specifier|public
name|void
name|testCancelWithLocalizedResource
parameter_list|()
throws|throws
name|YarnException
block|{
comment|// Configure policy to be 100% headroom based
name|getPolicyInfo
argument_list|()
operator|.
name|setHeadroomAlpha
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Initialize the headroom map
name|prepPolicyWithHeadroom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Cancel at ANY level only
name|resourceRequests
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
literal|"subcluster0-rack0-host0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
literal|"subcluster0-rack0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster3"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster4"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Cancel at node level only
name|resourceRequests
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
literal|"subcluster0-rack0-host0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
literal|"subcluster0-rack0"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequests
operator|.
name|add
argument_list|(
name|FederationPoliciesTestUtil
operator|.
name|createResourceRequest
argument_list|(
literal|0L
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SubClusterId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Since node request is a cancel, it should not be considered associated      * with localized requests. Based on headroom, we expect 75 containers to      * got to subcluster0 (60) and subcluster2 (15) according to the advertised      * headroom (40 and 10), no containers for sublcuster1 as it advertise zero      * headroom, and 25 to subcluster5 which has unknown headroom, and so it      * gets 1/4th of the load      */
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|3
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubClusterExpiry ()
specifier|public
name|void
name|testSubClusterExpiry
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Tests how the headroom info are used to split based on the capacity
comment|// each RM claims to give us.
comment|// Configure policy to be 100% headroom based
name|getPolicyInfo
argument_list|()
operator|.
name|setHeadroomAlpha
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// Set expiry to 500ms
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|initializePolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequests
init|=
name|createSimpleRequest
argument_list|()
decl_stmt|;
name|prepPolicyWithHeadroom
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// For first time, no sub-cluster expired
name|Set
argument_list|<
name|SubClusterId
argument_list|>
name|expiredSCList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|>
name|response
init|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
name|expiredSCList
argument_list|)
decl_stmt|;
comment|// pretty print requests
name|prettyPrintRequests
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
comment|/*      * based on headroom, we expect 75 containers to got to subcluster0 (60) and      * subcluster2 (15) according to the advertised headroom (40 and 10), no      * containers for sublcuster1 as it advertise zero headroom, and 25 to      * subcluster5 which has unknown headroom, and so it gets 1/4th of the load      */
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|1
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
literal|1
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|800
argument_list|)
expr_stmt|;
comment|// For the second time, sc0 and sc5 expired
name|expiredSCList
operator|.
name|add
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster0"
argument_list|)
argument_list|)
expr_stmt|;
name|expiredSCList
operator|.
name|add
argument_list|(
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"subcluster5"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
operator|(
operator|(
name|FederationAMRMProxyPolicy
operator|)
name|getPolicy
argument_list|()
operator|)
operator|.
name|splitResourceRequests
argument_list|(
name|resourceRequests
argument_list|,
name|expiredSCList
argument_list|)
expr_stmt|;
comment|// pretty print requests
name|prettyPrintRequests
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|validateSplit
argument_list|(
name|response
argument_list|,
name|resourceRequests
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster0"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster1"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster2"
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|checkExpectedAllocation
argument_list|(
name|response
argument_list|,
literal|"subcluster5"
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|checkTotalContainerAllocation
argument_list|(
name|response
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**    * A testable version of LocalityMulticastAMRMProxyPolicy that    * deterministically falls back to home sub-cluster for unresolved requests.    */
DECL|class|TestableLocalityMulticastAMRMProxyPolicy
specifier|private
class|class
name|TestableLocalityMulticastAMRMProxyPolicy
extends|extends
name|LocalityMulticastAMRMProxyPolicy
block|{
annotation|@
name|Override
DECL|method|getSubClusterForUnResolvedRequest ( AllocationBookkeeper bookkeeper, long allocationId)
specifier|protected
name|SubClusterId
name|getSubClusterForUnResolvedRequest
parameter_list|(
name|AllocationBookkeeper
name|bookkeeper
parameter_list|,
name|long
name|allocationId
parameter_list|)
block|{
name|SubClusterId
name|originalResult
init|=
name|super
operator|.
name|getSubClusterForUnResolvedRequest
argument_list|(
name|bookkeeper
argument_list|,
name|allocationId
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|SubClusterId
argument_list|,
name|SubClusterInfo
argument_list|>
name|activeClusters
init|=
literal|null
decl_stmt|;
try|try
block|{
name|activeClusters
operator|=
name|getActiveSubclusters
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// The randomly selected sub-cluster should at least be active
name|Assert
operator|.
name|assertTrue
argument_list|(
name|activeClusters
operator|.
name|containsKey
argument_list|(
name|originalResult
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alwasy use home sub-cluster so that unit test is deterministic
return|return
name|getHomeSubCluster
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

