begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|exception
operator|.
name|FederationStateStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|AddApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|ApplicationHomeSubCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DeleteApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|DeleteApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationsHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetApplicationsHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPoliciesConfigurationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SetSubClusterPolicyConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterPolicyConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|UpdateApplicationHomeSubClusterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|MonotonicClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Base class for FederationMembershipStateStore implementations.  */
end_comment

begin_class
DECL|class|FederationStateStoreBaseTest
specifier|public
specifier|abstract
class|class
name|FederationStateStoreBaseTest
block|{
DECL|field|CLOCK
specifier|private
specifier|static
specifier|final
name|MonotonicClock
name|CLOCK
init|=
operator|new
name|MonotonicClock
argument_list|()
decl_stmt|;
DECL|field|stateStore
specifier|private
name|FederationStateStore
name|stateStore
init|=
name|createStateStore
argument_list|()
decl_stmt|;
DECL|method|createStateStore ()
specifier|protected
specifier|abstract
name|FederationStateStore
name|createStateStore
parameter_list|()
function_decl|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Test FederationMembershipStateStore
annotation|@
name|Test
DECL|method|testRegisterSubCluster ()
specifier|public
name|void
name|testRegisterSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|long
name|previousTimeStamp
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|SubClusterRegisterResponse
name|result
init|=
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|currentTimeStamp
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterInfo
argument_list|,
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
comment|// The saved heartbeat is between the old one and the current timestamp
name|Assert
operator|.
name|assertTrue
argument_list|(
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getLastHeartBeat
argument_list|()
operator|<=
name|currentTimeStamp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getLastHeartBeat
argument_list|()
operator|>=
name|previousTimeStamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeregisterSubCluster ()
specifier|public
name|void
name|testDeregisterSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|registerSubCluster
argument_list|(
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
name|SubClusterDeregisterRequest
name|deregisterRequest
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|deregisterSubCluster
argument_list|(
name|deregisterRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|,
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeregisterSubClusterUnknownSubCluster ()
specifier|public
name|void
name|testDeregisterSubClusterUnknownSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterDeregisterRequest
name|deregisterRequest
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|deregisterSubCluster
argument_list|(
name|deregisterRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"SubCluster SC not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterInfo ()
specifier|public
name|void
name|testGetSubClusterInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|registerSubCluster
argument_list|(
name|subClusterInfo
argument_list|)
expr_stmt|;
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterInfo
argument_list|,
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
operator|.
name|getSubClusterInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterInfoUnknownSubCluster ()
specifier|public
name|void
name|testGetSubClusterInfoUnknownSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|GetSubClusterInfoResponse
name|response
init|=
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAllSubClustersInfo ()
specifier|public
name|void
name|testGetAllSubClustersInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId1
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC1"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo1
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId2
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC2"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo2
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId2
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId1
argument_list|,
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
literal|"capability"
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId2
argument_list|,
name|SubClusterState
operator|.
name|SC_UNHEALTHY
argument_list|,
literal|"capability"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SubClusterInfo
argument_list|>
name|subClustersActive
init|=
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getSubClusters
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SubClusterInfo
argument_list|>
name|subClustersAll
init|=
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|getSubClusters
argument_list|()
decl_stmt|;
comment|// SC1 is the only active
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|subClustersActive
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SubClusterInfo
name|sc1
init|=
name|subClustersActive
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId1
argument_list|,
name|sc1
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
expr_stmt|;
comment|// SC1 and SC2 are the SubCluster present into the StateStore
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|subClustersAll
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|subClustersAll
operator|.
name|contains
argument_list|(
name|sc1
argument_list|)
argument_list|)
expr_stmt|;
name|subClustersAll
operator|.
name|remove
argument_list|(
name|sc1
argument_list|)
expr_stmt|;
name|SubClusterInfo
name|sc2
init|=
name|subClustersAll
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId2
argument_list|,
name|sc2
operator|.
name|getSubClusterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubClusterHeartbeat ()
specifier|public
name|void
name|testSubClusterHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|registerSubCluster
argument_list|(
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|previousHeartBeat
init|=
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getLastHeartBeat
argument_list|()
decl_stmt|;
name|SubClusterHeartbeatRequest
name|heartbeatRequest
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
literal|"capability"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|heartbeatRequest
argument_list|)
expr_stmt|;
name|long
name|currentTimeStamp
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
operator|.
name|getTimeInMillis
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// The saved heartbeat is between the old one and the current timestamp
name|Assert
operator|.
name|assertTrue
argument_list|(
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getLastHeartBeat
argument_list|()
operator|<=
name|currentTimeStamp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getLastHeartBeat
argument_list|()
operator|>=
name|previousHeartBeat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubClusterHeartbeatUnknownSubCluster ()
specifier|public
name|void
name|testSubClusterHeartbeatUnknownSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterHeartbeatRequest
name|heartbeatRequest
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
literal|"capability"
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|heartbeatRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"SubCluster SC does not exist; cannot heartbeat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test FederationApplicationHomeSubClusterStore
annotation|@
name|Test
DECL|method|testAddApplicationHomeSubCluster ()
specifier|public
name|void
name|testAddApplicationHomeSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|ahsc
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId
argument_list|)
decl_stmt|;
name|AddApplicationHomeSubClusterRequest
name|request
init|=
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|ahsc
argument_list|)
decl_stmt|;
name|AddApplicationHomeSubClusterResponse
name|response
init|=
name|stateStore
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId
argument_list|,
name|response
operator|.
name|getHomeSubCluster
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId
argument_list|,
name|queryApplicationHomeSC
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddApplicationHomeSubClusterAppAlreadyExists ()
specifier|public
name|void
name|testAddApplicationHomeSubClusterAppAlreadyExists
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId1
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC1"
argument_list|)
decl_stmt|;
name|addApplicationHomeSC
argument_list|(
name|appId
argument_list|,
name|subClusterId1
argument_list|)
expr_stmt|;
name|SubClusterId
name|subClusterId2
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC2"
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|ahsc2
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId2
argument_list|)
decl_stmt|;
name|AddApplicationHomeSubClusterResponse
name|response
init|=
name|stateStore
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|ahsc2
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId1
argument_list|,
name|response
operator|.
name|getHomeSubCluster
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId1
argument_list|,
name|queryApplicationHomeSC
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteApplicationHomeSubCluster ()
specifier|public
name|void
name|testDeleteApplicationHomeSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|addApplicationHomeSC
argument_list|(
name|appId
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|DeleteApplicationHomeSubClusterRequest
name|delRequest
init|=
name|DeleteApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|DeleteApplicationHomeSubClusterResponse
name|response
init|=
name|stateStore
operator|.
name|deleteApplicationHomeSubCluster
argument_list|(
name|delRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
try|try
block|{
name|queryApplicationHomeSC
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Application "
operator|+
name|appId
operator|+
literal|" does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteApplicationHomeSubClusterUnknownApp ()
specifier|public
name|void
name|testDeleteApplicationHomeSubClusterUnknownApp
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DeleteApplicationHomeSubClusterRequest
name|delRequest
init|=
name|DeleteApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|deleteApplicationHomeSubCluster
argument_list|(
name|delRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Application "
operator|+
name|appId
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetApplicationHomeSubCluster ()
specifier|public
name|void
name|testGetApplicationHomeSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|addApplicationHomeSC
argument_list|(
name|appId
argument_list|,
name|subClusterId
argument_list|)
expr_stmt|;
name|GetApplicationHomeSubClusterRequest
name|getRequest
init|=
name|GetApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|GetApplicationHomeSubClusterResponse
name|result
init|=
name|stateStore
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appId
argument_list|,
name|result
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId
argument_list|,
name|result
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getHomeSubCluster
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationHomeSubClusterUnknownApp ()
specifier|public
name|void
name|testGetApplicationHomeSubClusterUnknownApp
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|GetApplicationHomeSubClusterRequest
name|request
init|=
name|GetApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Application "
operator|+
name|appId
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetApplicationsHomeSubCluster ()
specifier|public
name|void
name|testGetApplicationsHomeSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId1
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC1"
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|ahsc1
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
name|subClusterId1
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId2
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC2"
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|ahsc2
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId2
argument_list|,
name|subClusterId2
argument_list|)
decl_stmt|;
name|addApplicationHomeSC
argument_list|(
name|appId1
argument_list|,
name|subClusterId1
argument_list|)
expr_stmt|;
name|addApplicationHomeSC
argument_list|(
name|appId2
argument_list|,
name|subClusterId2
argument_list|)
expr_stmt|;
name|GetApplicationsHomeSubClusterRequest
name|getRequest
init|=
name|GetApplicationsHomeSubClusterRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetApplicationsHomeSubClusterResponse
name|result
init|=
name|stateStore
operator|.
name|getApplicationsHomeSubCluster
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getAppsHomeSubClusters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|getAppsHomeSubClusters
argument_list|()
operator|.
name|contains
argument_list|(
name|ahsc1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|getAppsHomeSubClusters
argument_list|()
operator|.
name|contains
argument_list|(
name|ahsc2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateApplicationHomeSubCluster ()
specifier|public
name|void
name|testUpdateApplicationHomeSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId1
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC1"
argument_list|)
decl_stmt|;
name|addApplicationHomeSC
argument_list|(
name|appId
argument_list|,
name|subClusterId1
argument_list|)
expr_stmt|;
name|SubClusterId
name|subClusterId2
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC2"
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|ahscUpdate
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId2
argument_list|)
decl_stmt|;
name|UpdateApplicationHomeSubClusterRequest
name|updateRequest
init|=
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|ahscUpdate
argument_list|)
decl_stmt|;
name|UpdateApplicationHomeSubClusterResponse
name|response
init|=
name|stateStore
operator|.
name|updateApplicationHomeSubCluster
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterId2
argument_list|,
name|queryApplicationHomeSC
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateApplicationHomeSubClusterUnknownApp ()
specifier|public
name|void
name|testUpdateApplicationHomeSubClusterUnknownApp
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId1
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC1"
argument_list|)
decl_stmt|;
name|ApplicationHomeSubCluster
name|ahsc
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId1
argument_list|)
decl_stmt|;
name|UpdateApplicationHomeSubClusterRequest
name|updateRequest
init|=
name|UpdateApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|ahsc
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|updateApplicationHomeSubCluster
argument_list|(
operator|(
name|updateRequest
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FederationStateStoreException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Application "
operator|+
name|appId
operator|.
name|toString
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test FederationPolicyStore
annotation|@
name|Test
DECL|method|testSetPolicyConfiguration ()
specifier|public
name|void
name|testSetPolicyConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|createSCPolicyConf
argument_list|(
literal|"Queue"
argument_list|,
literal|"PolicyType"
argument_list|)
argument_list|)
decl_stmt|;
name|SetSubClusterPolicyConfigurationResponse
name|result
init|=
name|stateStore
operator|.
name|setPolicyConfiguration
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createSCPolicyConf
argument_list|(
literal|"Queue"
argument_list|,
literal|"PolicyType"
argument_list|)
argument_list|,
name|queryPolicy
argument_list|(
literal|"Queue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetPolicyConfigurationUpdateExisting ()
specifier|public
name|void
name|testSetPolicyConfigurationUpdateExisting
parameter_list|()
throws|throws
name|Exception
block|{
name|setPolicyConf
argument_list|(
literal|"Queue"
argument_list|,
literal|"PolicyType1"
argument_list|)
expr_stmt|;
name|SetSubClusterPolicyConfigurationRequest
name|request2
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|createSCPolicyConf
argument_list|(
literal|"Queue"
argument_list|,
literal|"PolicyType2"
argument_list|)
argument_list|)
decl_stmt|;
name|SetSubClusterPolicyConfigurationResponse
name|result
init|=
name|stateStore
operator|.
name|setPolicyConfiguration
argument_list|(
name|request2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createSCPolicyConf
argument_list|(
literal|"Queue"
argument_list|,
literal|"PolicyType2"
argument_list|)
argument_list|,
name|queryPolicy
argument_list|(
literal|"Queue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPolicyConfiguration ()
specifier|public
name|void
name|testGetPolicyConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|setPolicyConf
argument_list|(
literal|"Queue"
argument_list|,
literal|"PolicyType"
argument_list|)
expr_stmt|;
name|GetSubClusterPolicyConfigurationRequest
name|getRequest
init|=
name|GetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
literal|"Queue"
argument_list|)
decl_stmt|;
name|GetSubClusterPolicyConfigurationResponse
name|result
init|=
name|stateStore
operator|.
name|getPolicyConfiguration
argument_list|(
name|getRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createSCPolicyConf
argument_list|(
literal|"Queue"
argument_list|,
literal|"PolicyType"
argument_list|)
argument_list|,
name|result
operator|.
name|getPolicyConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPolicyConfigurationUnknownQueue ()
specifier|public
name|void
name|testGetPolicyConfigurationUnknownQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|GetSubClusterPolicyConfigurationRequest
name|request
init|=
name|GetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
literal|"Queue"
argument_list|)
decl_stmt|;
name|GetSubClusterPolicyConfigurationResponse
name|response
init|=
name|stateStore
operator|.
name|getPolicyConfiguration
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetPoliciesConfigurations ()
specifier|public
name|void
name|testGetPoliciesConfigurations
parameter_list|()
throws|throws
name|Exception
block|{
name|setPolicyConf
argument_list|(
literal|"Queue1"
argument_list|,
literal|"PolicyType1"
argument_list|)
expr_stmt|;
name|setPolicyConf
argument_list|(
literal|"Queue2"
argument_list|,
literal|"PolicyType2"
argument_list|)
expr_stmt|;
name|GetSubClusterPoliciesConfigurationsResponse
name|response
init|=
name|stateStore
operator|.
name|getPoliciesConfigurations
argument_list|(
name|GetSubClusterPoliciesConfigurationsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getPoliciesConfigs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|response
operator|.
name|getPoliciesConfigs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getPoliciesConfigs
argument_list|()
operator|.
name|contains
argument_list|(
name|createSCPolicyConf
argument_list|(
literal|"Queue1"
argument_list|,
literal|"PolicyType1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getPoliciesConfigs
argument_list|()
operator|.
name|contains
argument_list|(
name|createSCPolicyConf
argument_list|(
literal|"Queue2"
argument_list|,
literal|"PolicyType2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Convenience methods
DECL|method|createSubClusterInfo (SubClusterId subClusterId)
specifier|private
name|SubClusterInfo
name|createSubClusterInfo
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
name|String
name|amRMAddress
init|=
literal|"1.2.3.4:1"
decl_stmt|;
name|String
name|clientRMAddress
init|=
literal|"1.2.3.4:2"
decl_stmt|;
name|String
name|rmAdminAddress
init|=
literal|"1.2.3.4:3"
decl_stmt|;
name|String
name|webAppAddress
init|=
literal|"1.2.3.4:4"
decl_stmt|;
return|return
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMAddress
argument_list|,
name|clientRMAddress
argument_list|,
name|rmAdminAddress
argument_list|,
name|webAppAddress
argument_list|,
name|SubClusterState
operator|.
name|SC_NEW
argument_list|,
name|CLOCK
operator|.
name|getTime
argument_list|()
argument_list|,
literal|"capability"
argument_list|)
return|;
block|}
DECL|method|createSCPolicyConf (String queueName, String policyType)
specifier|private
name|SubClusterPolicyConfiguration
name|createSCPolicyConf
parameter_list|(
name|String
name|queueName
parameter_list|,
name|String
name|policyType
parameter_list|)
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|bb
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
literal|0x02
argument_list|)
expr_stmt|;
return|return
name|SubClusterPolicyConfiguration
operator|.
name|newInstance
argument_list|(
name|queueName
argument_list|,
name|policyType
argument_list|,
name|bb
argument_list|)
return|;
block|}
DECL|method|addApplicationHomeSC (ApplicationId appId, SubClusterId subClusterId)
specifier|private
name|void
name|addApplicationHomeSC
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|SubClusterId
name|subClusterId
parameter_list|)
throws|throws
name|YarnException
block|{
name|ApplicationHomeSubCluster
name|ahsc
init|=
name|ApplicationHomeSubCluster
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|subClusterId
argument_list|)
decl_stmt|;
name|AddApplicationHomeSubClusterRequest
name|request
init|=
name|AddApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|ahsc
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|addApplicationHomeSubCluster
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|setPolicyConf (String queue, String policyType)
specifier|private
name|void
name|setPolicyConf
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|policyType
parameter_list|)
throws|throws
name|YarnException
block|{
name|SetSubClusterPolicyConfigurationRequest
name|request
init|=
name|SetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|createSCPolicyConf
argument_list|(
name|queue
argument_list|,
name|policyType
argument_list|)
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|setPolicyConfiguration
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|registerSubCluster (SubClusterInfo subClusterInfo)
specifier|private
name|void
name|registerSubCluster
parameter_list|(
name|SubClusterInfo
name|subClusterInfo
parameter_list|)
throws|throws
name|YarnException
block|{
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|querySubClusterInfo (SubClusterId subClusterId)
specifier|private
name|SubClusterInfo
name|querySubClusterInfo
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
return|return
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
operator|.
name|getSubClusterInfo
argument_list|()
return|;
block|}
DECL|method|queryApplicationHomeSC (ApplicationId appId)
specifier|private
name|SubClusterId
name|queryApplicationHomeSC
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetApplicationHomeSubClusterRequest
name|request
init|=
name|GetApplicationHomeSubClusterRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|GetApplicationHomeSubClusterResponse
name|response
init|=
name|stateStore
operator|.
name|getApplicationHomeSubCluster
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationHomeSubCluster
argument_list|()
operator|.
name|getHomeSubCluster
argument_list|()
return|;
block|}
DECL|method|queryPolicy (String queue)
specifier|private
name|SubClusterPolicyConfiguration
name|queryPolicy
parameter_list|(
name|String
name|queue
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetSubClusterPolicyConfigurationRequest
name|request
init|=
name|GetSubClusterPolicyConfigurationRequest
operator|.
name|newInstance
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|GetSubClusterPolicyConfigurationResponse
name|result
init|=
name|stateStore
operator|.
name|getPolicyConfiguration
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getPolicyConfiguration
argument_list|()
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|protected
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|protected
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

