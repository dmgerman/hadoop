begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.federation.store.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationMembershipStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClustersInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterRegisterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|MonotonicClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Base class for FederationMembershipStateStore implementations.  */
end_comment

begin_class
DECL|class|FederationStateStoreBaseTest
specifier|public
specifier|abstract
class|class
name|FederationStateStoreBaseTest
block|{
DECL|field|CLOCK
specifier|private
specifier|static
specifier|final
name|MonotonicClock
name|CLOCK
init|=
operator|new
name|MonotonicClock
argument_list|()
decl_stmt|;
DECL|field|stateStore
specifier|private
name|FederationMembershipStateStore
name|stateStore
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|stateStore
operator|=
name|getCleanStateStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|stateStore
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|getCleanStateStore ()
specifier|protected
specifier|abstract
name|FederationMembershipStateStore
name|getCleanStateStore
parameter_list|()
function_decl|;
annotation|@
name|Test
DECL|method|testRegisterSubCluster ()
specifier|public
name|void
name|testRegisterSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|SubClusterRegisterResponse
name|result
init|=
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterInfo
argument_list|,
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeregisterSubCluster ()
specifier|public
name|void
name|testDeregisterSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
argument_list|)
expr_stmt|;
name|SubClusterDeregisterRequest
name|deregisterRequest
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|deregisterSubCluster
argument_list|(
name|deregisterRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|,
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeregisterSubClusterUnknownSubCluster ()
specifier|public
name|void
name|testDeregisterSubClusterUnknownSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterDeregisterRequest
name|deregisterRequest
init|=
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|deregisterSubCluster
argument_list|(
name|deregisterRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"SubCluster SC not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterInfo ()
specifier|public
name|void
name|testGetSubClusterInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
argument_list|)
expr_stmt|;
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|subClusterInfo
argument_list|,
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
operator|.
name|getSubClusterInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetSubClusterInfoUnknownSubCluster ()
specifier|public
name|void
name|testGetSubClusterInfoUnknownSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
operator|.
name|getSubClusterInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Subcluster SC does not exist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetAllSubClustersInfo ()
specifier|public
name|void
name|testGetAllSubClustersInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId1
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC1"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo1
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId1
argument_list|)
decl_stmt|;
name|SubClusterId
name|subClusterId2
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC2"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo2
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId2
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId1
argument_list|,
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId2
argument_list|,
name|SubClusterState
operator|.
name|SC_UNHEALTHY
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getSubClusters
argument_list|()
operator|.
name|contains
argument_list|(
name|subClusterInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getSubClusters
argument_list|()
operator|.
name|contains
argument_list|(
name|subClusterInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|getSubClusters
argument_list|()
operator|.
name|contains
argument_list|(
name|subClusterInfo1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateStore
operator|.
name|getSubClusters
argument_list|(
name|GetSubClustersInfoRequest
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|getSubClusters
argument_list|()
operator|.
name|contains
argument_list|(
name|subClusterInfo2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubClusterHeartbeat ()
specifier|public
name|void
name|testSubClusterHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterInfo
name|subClusterInfo
init|=
name|createSubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|registerSubCluster
argument_list|(
name|SubClusterRegisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterInfo
argument_list|)
argument_list|)
expr_stmt|;
name|SubClusterHeartbeatRequest
name|heartbeatRequest
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
literal|"cabability"
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|heartbeatRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|querySubClusterInfo
argument_list|(
name|subClusterId
argument_list|)
operator|.
name|getLastHeartBeat
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubClusterHeartbeatUnknownSubCluster ()
specifier|public
name|void
name|testSubClusterHeartbeatUnknownSubCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC"
argument_list|)
decl_stmt|;
name|SubClusterHeartbeatRequest
name|heartbeatRequest
init|=
name|SubClusterHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|,
literal|"cabability"
argument_list|)
decl_stmt|;
try|try
block|{
name|stateStore
operator|.
name|subClusterHeartbeat
argument_list|(
name|heartbeatRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Subcluster SC does not exist; cannot heartbeat"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSubClusterInfo (SubClusterId subClusterId)
specifier|private
name|SubClusterInfo
name|createSubClusterInfo
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
block|{
name|String
name|amRMAddress
init|=
literal|"1.2.3.4:1"
decl_stmt|;
name|String
name|clientRMAddress
init|=
literal|"1.2.3.4:2"
decl_stmt|;
name|String
name|rmAdminAddress
init|=
literal|"1.2.3.4:3"
decl_stmt|;
name|String
name|webAppAddress
init|=
literal|"1.2.3.4:4"
decl_stmt|;
return|return
name|SubClusterInfo
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|amRMAddress
argument_list|,
name|clientRMAddress
argument_list|,
name|rmAdminAddress
argument_list|,
name|webAppAddress
argument_list|,
name|SubClusterState
operator|.
name|SC_NEW
argument_list|,
name|CLOCK
operator|.
name|getTime
argument_list|()
argument_list|,
literal|"cabability"
argument_list|)
return|;
block|}
DECL|method|querySubClusterInfo (SubClusterId subClusterId)
specifier|private
name|SubClusterInfo
name|querySubClusterInfo
parameter_list|(
name|SubClusterId
name|subClusterId
parameter_list|)
throws|throws
name|YarnException
block|{
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
return|return
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
operator|.
name|getSubClusterInfo
argument_list|()
return|;
block|}
block|}
end_class

end_unit

