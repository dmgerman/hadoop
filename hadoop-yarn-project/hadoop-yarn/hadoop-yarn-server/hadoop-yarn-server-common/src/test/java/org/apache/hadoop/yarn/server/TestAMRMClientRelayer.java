begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|AMRMClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidApplicationMasterRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|ResourceRequestSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit test for AMRMClientRelayer.  */
end_comment

begin_class
DECL|class|TestAMRMClientRelayer
specifier|public
class|class
name|TestAMRMClientRelayer
block|{
comment|/**    * Mocked ApplicationMasterService in RM.    */
DECL|class|MockApplicationMasterService
specifier|public
specifier|static
class|class
name|MockApplicationMasterService
implements|implements
name|ApplicationMasterProtocol
block|{
comment|// Whether this mockRM will throw failover exception upon next heartbeat
comment|// from AM
DECL|field|failover
specifier|private
name|boolean
name|failover
init|=
literal|false
decl_stmt|;
DECL|field|responseIdReset
specifier|private
name|int
name|responseIdReset
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lastAsk
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|lastAsk
decl_stmt|;
DECL|field|lastRelease
specifier|private
name|List
argument_list|<
name|ContainerId
argument_list|>
name|lastRelease
decl_stmt|;
DECL|field|lastBlacklistAdditions
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|lastBlacklistAdditions
decl_stmt|;
DECL|field|lastBlacklistRemovals
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|lastBlacklistRemovals
decl_stmt|;
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|failover
condition|)
block|{
name|this
operator|.
name|failover
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|ApplicationMasterNotRegisteredException
argument_list|(
literal|"Mock RM restarted"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|failover
condition|)
block|{
name|this
operator|.
name|failover
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|ApplicationMasterNotRegisteredException
argument_list|(
literal|"Mock RM restarted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|responseIdReset
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|errorMessage
init|=
name|AMRMClientUtils
operator|.
name|assembleInvalidResponseIdExceptionMessage
argument_list|(
literal|null
argument_list|,
name|this
operator|.
name|responseIdReset
argument_list|,
name|request
operator|.
name|getResponseId
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|responseIdReset
operator|=
operator|-
literal|1
expr_stmt|;
throw|throw
operator|new
name|InvalidApplicationMasterRequestException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
name|this
operator|.
name|lastAsk
operator|=
name|request
operator|.
name|getAskList
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastRelease
operator|=
name|request
operator|.
name|getReleaseList
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastBlacklistAdditions
operator|=
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistAdditions
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastBlacklistRemovals
operator|=
name|request
operator|.
name|getResourceBlacklistRequest
argument_list|()
operator|.
name|getBlacklistRemovals
argument_list|()
expr_stmt|;
return|return
name|AllocateResponse
operator|.
name|newInstance
argument_list|(
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|setFailoverFlag ()
specifier|public
name|void
name|setFailoverFlag
parameter_list|()
block|{
name|this
operator|.
name|failover
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|setResponseIdReset (int expectedResponseId)
specifier|public
name|void
name|setResponseIdReset
parameter_list|(
name|int
name|expectedResponseId
parameter_list|)
block|{
name|this
operator|.
name|responseIdReset
operator|=
name|expectedResponseId
expr_stmt|;
block|}
block|}
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|mockAMS
specifier|private
name|MockApplicationMasterService
name|mockAMS
decl_stmt|;
DECL|field|relayer
specifier|private
name|AMRMClientRelayer
name|relayer
decl_stmt|;
DECL|field|responseId
specifier|private
name|int
name|responseId
init|=
literal|0
decl_stmt|;
comment|// Buffer of asks that will be sent to RM in the next AM heartbeat
DECL|field|asks
specifier|private
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|releases
specifier|private
name|List
argument_list|<
name|ContainerId
argument_list|>
name|releases
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|blacklistAdditions
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|blacklistRemoval
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemoval
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|this
operator|.
name|mockAMS
operator|=
operator|new
name|MockApplicationMasterService
argument_list|()
expr_stmt|;
name|this
operator|.
name|relayer
operator|=
operator|new
name|AMRMClientRelayer
argument_list|(
name|this
operator|.
name|mockAMS
argument_list|,
literal|null
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
name|this
operator|.
name|relayer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|relayer
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|relayer
operator|.
name|registerApplicationMaster
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|clearAllocateRequestLists
argument_list|()
expr_stmt|;
block|}
DECL|method|assertAsksAndReleases (int expectedAsk, int expectedRelease)
specifier|private
name|void
name|assertAsksAndReleases
parameter_list|(
name|int
name|expectedAsk
parameter_list|,
name|int
name|expectedRelease
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAsk
argument_list|,
name|this
operator|.
name|mockAMS
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRelease
argument_list|,
name|this
operator|.
name|mockAMS
operator|.
name|lastRelease
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertBlacklistAdditionsAndRemovals (int expectedAdditions, int expectedRemovals)
specifier|private
name|void
name|assertBlacklistAdditionsAndRemovals
parameter_list|(
name|int
name|expectedAdditions
parameter_list|,
name|int
name|expectedRemovals
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAdditions
argument_list|,
name|this
operator|.
name|mockAMS
operator|.
name|lastBlacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRemovals
argument_list|,
name|this
operator|.
name|mockAMS
operator|.
name|lastBlacklistRemovals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllocateRequest ()
specifier|private
name|AllocateRequest
name|getAllocateRequest
parameter_list|()
block|{
comment|// Need to create a new one every time because rather than directly
comment|// referring the lists, the protobuf impl makes a copy of the lists
return|return
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
name|responseId
argument_list|,
literal|0
argument_list|,
name|asks
argument_list|,
name|releases
argument_list|,
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
name|blacklistAdditions
argument_list|,
name|blacklistRemoval
argument_list|)
argument_list|)
return|;
block|}
DECL|method|clearAllocateRequestLists ()
specifier|private
name|void
name|clearAllocateRequestLists
parameter_list|()
block|{
name|this
operator|.
name|asks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|releases
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|blacklistAdditions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|blacklistRemoval
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|createContainerId (int id)
specifier|private
specifier|static
name|ContainerId
name|createContainerId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|createResourceRequest (long id, String resource, int memory, int vCores, int priority, ExecutionType execType, int containers)
specifier|protected
name|ResourceRequest
name|createResourceRequest
parameter_list|(
name|long
name|id
parameter_list|,
name|String
name|resource
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|int
name|priority
parameter_list|,
name|ExecutionType
name|execType
parameter_list|,
name|int
name|containers
parameter_list|)
block|{
name|ResourceRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|req
operator|.
name|setAllocationRequestId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|req
operator|.
name|setResourceName
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|req
operator|.
name|setCapability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|vCores
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setExecutionTypeRequest
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|execType
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNumContainers
argument_list|(
name|containers
argument_list|)
expr_stmt|;
return|return
name|req
return|;
block|}
comment|/**    * Test the proper handling of removal/cancel of resource requests.    */
annotation|@
name|Test
DECL|method|testResourceRequestCleanup ()
specifier|public
name|void
name|testResourceRequestCleanup
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Ask for two containers, one with location preference
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|"node"
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|"rack"
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|relayer
operator|.
name|getRemotePendingAsks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceRequestSet
name|set
init|=
name|this
operator|.
name|relayer
operator|.
name|getRemotePendingAsks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|set
operator|.
name|getAsks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clearAllocateRequestLists
argument_list|()
expr_stmt|;
comment|// Cancel one ask
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|"node"
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|relayer
operator|.
name|getRemotePendingAsks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|=
name|this
operator|.
name|relayer
operator|.
name|getRemotePendingAsks
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|getAsks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clearAllocateRequestLists
argument_list|()
expr_stmt|;
comment|// Cancel the other ask, the pending askSet should be removed
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|asks
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|relayer
operator|.
name|getRemotePendingAsks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the full pending resend after RM fails over.    */
annotation|@
name|Test
DECL|method|testResendRequestsOnRMRestart ()
specifier|public
name|void
name|testResendRequestsOnRMRestart
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ContainerId
name|c1
init|=
name|createContainerId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|c2
init|=
name|createContainerId
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ContainerId
name|c3
init|=
name|createContainerId
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// Ask for two containers, one with location preference
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|"node1"
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|"rack"
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|releases
operator|.
name|add
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklistAdditions
operator|.
name|add
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklistRemoval
operator|.
name|add
argument_list|(
literal|"node0"
argument_list|)
expr_stmt|;
comment|// 1. a fully loaded request
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clearAllocateRequestLists
argument_list|()
expr_stmt|;
comment|// 2. empty request
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clearAllocateRequestLists
argument_list|()
expr_stmt|;
comment|// Set RM restart and failover flag
name|this
operator|.
name|mockAMS
operator|.
name|setFailoverFlag
argument_list|()
expr_stmt|;
comment|// More requests
name|this
operator|.
name|blacklistAdditions
operator|.
name|add
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|this
operator|.
name|releases
operator|.
name|add
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify pending requests are fully re-sent
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clearAllocateRequestLists
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResponseIdResync ()
specifier|public
name|void
name|testResponseIdResync
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|this
operator|.
name|responseId
operator|=
literal|10
expr_stmt|;
name|AllocateResponse
name|response
init|=
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|this
operator|.
name|responseId
operator|+
literal|1
argument_list|,
name|response
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expected
init|=
literal|5
decl_stmt|;
name|this
operator|.
name|mockAMS
operator|.
name|setResponseIdReset
argument_list|(
name|expected
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expecting exception from RM"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidApplicationMasterRequestException
name|e
parameter_list|)
block|{
comment|// Expected exception
block|}
comment|// Verify that the responseId is overridden
name|response
operator|=
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|+
literal|1
argument_list|,
name|response
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify it is no longer overriden
name|this
operator|.
name|responseId
operator|=
name|response
operator|.
name|getResponseId
argument_list|()
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|relayer
operator|.
name|allocate
argument_list|(
name|getAllocateRequest
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|this
operator|.
name|responseId
operator|+
literal|1
argument_list|,
name|response
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

