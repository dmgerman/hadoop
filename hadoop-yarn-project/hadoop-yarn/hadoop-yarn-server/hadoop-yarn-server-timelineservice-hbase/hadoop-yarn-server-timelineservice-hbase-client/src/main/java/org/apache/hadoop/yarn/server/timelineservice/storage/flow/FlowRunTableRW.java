begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.flow
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|BaseTableRW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_comment
comment|/**  * Create, read and write to the FlowRun table.  */
end_comment

begin_class
DECL|class|FlowRunTableRW
specifier|public
class|class
name|FlowRunTableRW
extends|extends
name|BaseTableRW
argument_list|<
name|FlowRunTable
argument_list|>
block|{
comment|/** entity prefix. */
DECL|field|PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"flowrun"
decl_stmt|;
comment|/** config param name that specifies the flowrun table name. */
DECL|field|TABLE_NAME_CONF_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NAME_CONF_NAME
init|=
name|PREFIX
operator|+
literal|".table.name"
decl_stmt|;
comment|/** default value for flowrun table name. */
DECL|field|DEFAULT_TABLE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TABLE_NAME
init|=
literal|"timelineservice.flowrun"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FlowRunTableRW
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** default max number of versions. */
DECL|field|DEFAULT_METRICS_MAX_VERSIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_METRICS_MAX_VERSIONS
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|method|FlowRunTableRW ()
specifier|public
name|FlowRunTableRW
parameter_list|()
block|{
name|super
argument_list|(
name|TABLE_NAME_CONF_NAME
argument_list|,
name|DEFAULT_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see    * org.apache.hadoop.yarn.server.timelineservice.storage.BaseTableRW#    * createTable(org.apache.hadoop.hbase.client.Admin,    * org.apache.hadoop.conf.Configuration)    */
DECL|method|createTable (Admin admin, Configuration hbaseConf)
specifier|public
name|void
name|createTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|Configuration
name|hbaseConf
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
name|table
init|=
name|getTableName
argument_list|(
name|hbaseConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// do not disable / delete existing table
comment|// similar to the approach taken by map-reduce jobs when
comment|// output directory exists
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|flowRunTableDescp
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|infoCF
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FlowRunColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|infoCF
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|ROWCOL
argument_list|)
expr_stmt|;
name|flowRunTableDescp
operator|.
name|addFamily
argument_list|(
name|infoCF
argument_list|)
expr_stmt|;
name|infoCF
operator|.
name|setMinVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|infoCF
operator|.
name|setMaxVersions
argument_list|(
name|DEFAULT_METRICS_MAX_VERSIONS
argument_list|)
expr_stmt|;
comment|// TODO: figure the split policy
name|String
name|coprocessorJarPathStr
init|=
name|hbaseConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FLOW_RUN_COPROCESSOR_JAR_HDFS_LOCATION
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_HDFS_LOCATION_FLOW_RUN_COPROCESSOR_JAR
argument_list|)
decl_stmt|;
name|Path
name|coprocessorJarPath
init|=
operator|new
name|Path
argument_list|(
name|coprocessorJarPathStr
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CoprocessorJarPath="
operator|+
name|coprocessorJarPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|flowRunTableDescp
operator|.
name|addCoprocessor
argument_list|(
literal|"org.apache.hadoop.yarn.server.timelineservice.storage."
operator|+
literal|"flow.FlowRunCoprocessor"
argument_list|,
name|coprocessorJarPath
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_USER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|flowRunTableDescp
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Status of table creation for "
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"="
operator|+
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

