begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineDataToRetrieve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineEntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|HBaseTimelineStorageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|reader
operator|.
name|TimelineEntityReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|reader
operator|.
name|TimelineEntityReaderFactory
import|;
end_import

begin_comment
comment|/**  * HBase based implementation for {@link TimelineStorageMonitor}.  */
end_comment

begin_class
DECL|class|HBaseStorageMonitor
specifier|public
class|class
name|HBaseStorageMonitor
extends|extends
name|TimelineStorageMonitor
block|{
DECL|field|MONITOR_FILTERS
specifier|protected
specifier|static
specifier|final
name|TimelineEntityFilters
name|MONITOR_FILTERS
init|=
operator|new
name|TimelineEntityFilters
operator|.
name|Builder
argument_list|()
operator|.
name|entityLimit
argument_list|(
literal|1L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|field|DATA_TO_RETRIEVE
specifier|protected
specifier|static
specifier|final
name|TimelineDataToRetrieve
name|DATA_TO_RETRIEVE
init|=
operator|new
name|TimelineDataToRetrieve
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|monitorHBaseConf
specifier|private
name|Configuration
name|monitorHBaseConf
decl_stmt|;
DECL|field|monitorConn
specifier|private
name|Connection
name|monitorConn
decl_stmt|;
DECL|field|reader
specifier|private
name|TimelineEntityReader
name|reader
decl_stmt|;
DECL|method|HBaseStorageMonitor (Configuration conf)
specifier|public
name|HBaseStorageMonitor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|Storage
operator|.
name|HBase
argument_list|)
expr_stmt|;
name|this
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (Configuration conf)
specifier|private
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|monitorHBaseConf
operator|=
name|HBaseTimelineStorageUtils
operator|.
name|getTimelineServiceHBaseConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|monitorHBaseConf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|monitorHBaseConf
operator|.
name|setLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|long
name|monitorInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_READER_STORAGE_MONITOR_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_STORAGE_MONITOR_INTERVAL_MS
argument_list|)
decl_stmt|;
name|monitorHBaseConf
operator|.
name|setLong
argument_list|(
literal|"hbase.rpc.timeout"
argument_list|,
name|monitorInterval
argument_list|)
expr_stmt|;
name|monitorHBaseConf
operator|.
name|setLong
argument_list|(
literal|"hbase.client.scanner.timeout.period"
argument_list|,
name|monitorInterval
argument_list|)
expr_stmt|;
name|monitorHBaseConf
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|monitorConn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|monitorHBaseConf
argument_list|)
expr_stmt|;
name|String
name|clusterId
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
argument_list|)
decl_stmt|;
name|TimelineReaderContext
name|monitorContext
init|=
operator|new
name|TimelineReaderContext
argument_list|(
name|clusterId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reader
operator|=
name|TimelineEntityReaderFactory
operator|.
name|createMultipleEntitiesReader
argument_list|(
name|monitorContext
argument_list|,
name|MONITOR_FILTERS
argument_list|,
name|DATA_TO_RETRIEVE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|healthCheck ()
specifier|public
name|void
name|healthCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|reader
operator|.
name|readEntities
argument_list|(
name|monitorHBaseConf
argument_list|,
name|monitorConn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
name|monitorConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

