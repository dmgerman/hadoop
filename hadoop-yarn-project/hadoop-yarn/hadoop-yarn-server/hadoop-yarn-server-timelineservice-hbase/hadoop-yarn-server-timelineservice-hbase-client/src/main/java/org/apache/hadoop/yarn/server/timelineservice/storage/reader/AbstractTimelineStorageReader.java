begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowTableRW
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|ColumnRWHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|NotFoundException
import|;
end_import

begin_comment
comment|/**  * The base class for reading timeline data from the HBase storage. This class  * provides basic support to validate and augment reader context.  */
end_comment

begin_class
DECL|class|AbstractTimelineStorageReader
specifier|public
specifier|abstract
class|class
name|AbstractTimelineStorageReader
block|{
DECL|field|context
specifier|private
specifier|final
name|TimelineReaderContext
name|context
decl_stmt|;
comment|/**    * Used to look up the flow context.    */
DECL|field|appToFlowTable
specifier|private
specifier|final
name|AppToFlowTableRW
name|appToFlowTable
init|=
operator|new
name|AppToFlowTableRW
argument_list|()
decl_stmt|;
DECL|method|AbstractTimelineStorageReader (TimelineReaderContext ctxt)
specifier|public
name|AbstractTimelineStorageReader
parameter_list|(
name|TimelineReaderContext
name|ctxt
parameter_list|)
block|{
name|context
operator|=
name|ctxt
expr_stmt|;
block|}
DECL|method|getContext ()
specifier|protected
name|TimelineReaderContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
comment|/**    * Looks up flow context from AppToFlow table.    *    * @param appToFlowRowKey to identify Cluster and App Ids.    * @param clusterId the cluster id.    * @param hbaseConf HBase configuration.    * @param conn HBase Connection.    * @return flow context information.    * @throws IOException if any problem occurs while fetching flow information.    */
DECL|method|lookupFlowContext (AppToFlowRowKey appToFlowRowKey, String clusterId, Configuration hbaseConf, Connection conn)
specifier|protected
name|FlowContext
name|lookupFlowContext
parameter_list|(
name|AppToFlowRowKey
name|appToFlowRowKey
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowKey
init|=
name|appToFlowRowKey
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|appToFlowTable
operator|.
name|getResult
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Object
name|flowName
init|=
name|ColumnRWHelper
operator|.
name|readResult
argument_list|(
name|result
argument_list|,
name|AppToFlowColumnPrefix
operator|.
name|FLOW_NAME
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|Object
name|flowRunId
init|=
name|ColumnRWHelper
operator|.
name|readResult
argument_list|(
name|result
argument_list|,
name|AppToFlowColumnPrefix
operator|.
name|FLOW_RUN_ID
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
name|Object
name|userId
init|=
name|ColumnRWHelper
operator|.
name|readResult
argument_list|(
name|result
argument_list|,
name|AppToFlowColumnPrefix
operator|.
name|USER_ID
argument_list|,
name|clusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|flowName
operator|==
literal|null
operator|||
name|userId
operator|==
literal|null
operator|||
name|flowRunId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Unable to find the context flow name, and flow run id, "
operator|+
literal|"and user id for clusterId="
operator|+
name|clusterId
operator|+
literal|", appId="
operator|+
name|appToFlowRowKey
operator|.
name|getAppId
argument_list|()
argument_list|)
throw|;
block|}
return|return
operator|new
name|FlowContext
argument_list|(
operator|(
name|String
operator|)
name|userId
argument_list|,
operator|(
name|String
operator|)
name|flowName
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|flowRunId
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotFoundException
argument_list|(
literal|"Unable to find the context flow name, and flow run id, "
operator|+
literal|"and user id for clusterId="
operator|+
name|clusterId
operator|+
literal|", appId="
operator|+
name|appToFlowRowKey
operator|.
name|getAppId
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**     * Sets certain parameters to defaults if the values are not provided.     *     * @param hbaseConf HBase Configuration.     * @param conn HBase Connection.     * @throws IOException if any exception is encountered while setting params.     */
DECL|method|augmentParams (Configuration hbaseConf, Connection conn)
specifier|protected
name|void
name|augmentParams
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
name|defaultAugmentParams
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Default behavior for all timeline readers to augment parameters.    *    * @param hbaseConf HBase Configuration.    * @param conn HBase Connection.    * @throws IOException if any exception is encountered while setting params.    */
DECL|method|defaultAugmentParams (Configuration hbaseConf, Connection conn)
specifier|final
specifier|protected
name|void
name|defaultAugmentParams
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
comment|// In reality all three should be null or neither should be null
if|if
condition|(
name|context
operator|.
name|getFlowName
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getFlowRunId
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|getUserId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Get flow context information from AppToFlow table.
name|AppToFlowRowKey
name|appToFlowRowKey
init|=
operator|new
name|AppToFlowRowKey
argument_list|(
name|context
operator|.
name|getAppId
argument_list|()
argument_list|)
decl_stmt|;
name|FlowContext
name|flowContext
init|=
name|lookupFlowContext
argument_list|(
name|appToFlowRowKey
argument_list|,
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|hbaseConf
argument_list|,
name|conn
argument_list|)
decl_stmt|;
name|context
operator|.
name|setFlowName
argument_list|(
name|flowContext
operator|.
name|flowName
argument_list|)
expr_stmt|;
name|context
operator|.
name|setFlowRunId
argument_list|(
name|flowContext
operator|.
name|flowRunId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setUserId
argument_list|(
name|flowContext
operator|.
name|userId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validates the required parameters to read the entities.    */
DECL|method|validateParams ()
specifier|protected
specifier|abstract
name|void
name|validateParams
parameter_list|()
function_decl|;
comment|/**    * Encapsulates flow context information.    */
DECL|class|FlowContext
specifier|protected
specifier|static
class|class
name|FlowContext
block|{
DECL|field|userId
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
DECL|field|flowName
specifier|private
specifier|final
name|String
name|flowName
decl_stmt|;
DECL|field|flowRunId
specifier|private
specifier|final
name|Long
name|flowRunId
decl_stmt|;
DECL|method|FlowContext (String user, String flowName, Long flowRunId)
specifier|public
name|FlowContext
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|flowName
parameter_list|,
name|Long
name|flowRunId
parameter_list|)
block|{
name|this
operator|.
name|userId
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|flowName
operator|=
name|flowName
expr_stmt|;
name|this
operator|.
name|flowRunId
operator|=
name|flowRunId
expr_stmt|;
block|}
DECL|method|getUserId ()
specifier|protected
name|String
name|getUserId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
DECL|method|getFlowName ()
specifier|protected
name|String
name|getFlowName
parameter_list|()
block|{
return|return
name|flowName
return|;
block|}
DECL|method|getFlowRunId ()
specifier|protected
name|Long
name|getFlowRunId
parameter_list|()
block|{
return|return
name|flowRunId
return|;
block|}
block|}
block|}
end_class

end_unit

