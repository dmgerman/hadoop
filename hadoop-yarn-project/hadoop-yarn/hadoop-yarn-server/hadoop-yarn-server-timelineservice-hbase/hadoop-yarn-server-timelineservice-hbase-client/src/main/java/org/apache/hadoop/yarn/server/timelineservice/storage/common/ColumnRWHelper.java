begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|AggregationCompactionDimension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * A set of utility functions that read or read to a column.  * This class is meant to be used only by explicit Columns,  * and not directly to write by clients.  */
end_comment

begin_class
DECL|class|ColumnRWHelper
specifier|public
specifier|final
class|class
name|ColumnRWHelper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ColumnHelper
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ColumnRWHelper ()
specifier|private
name|ColumnRWHelper
parameter_list|()
block|{   }
comment|/**    * Figures out the cell timestamp used in the Put For storing.    * Will supplement the timestamp if required. Typically done for flow run    * table.If we supplement the timestamp, we left shift the timestamp and    * supplement it with the AppId id so that there are no collisions in the flow    * run table's cells.    */
DECL|method|getPutTimestamp ( Long timestamp, boolean supplementTs, Attribute[] attributes)
specifier|private
specifier|static
name|long
name|getPutTimestamp
parameter_list|(
name|Long
name|timestamp
parameter_list|,
name|boolean
name|supplementTs
parameter_list|,
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|timestamp
operator|==
literal|null
condition|)
block|{
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|supplementTs
condition|)
block|{
return|return
name|timestamp
return|;
block|}
else|else
block|{
name|String
name|appId
init|=
name|getAppIdFromAttributes
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|long
name|supplementedTS
init|=
name|TimestampGenerator
operator|.
name|getSupplementedTimestamp
argument_list|(
name|timestamp
argument_list|,
name|appId
argument_list|)
decl_stmt|;
return|return
name|supplementedTS
return|;
block|}
block|}
DECL|method|getAppIdFromAttributes (Attribute[] attributes)
specifier|private
specifier|static
name|String
name|getAppIdFromAttributes
parameter_list|(
name|Attribute
index|[]
name|attributes
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|appId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
if|if
condition|(
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|appId
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|appId
return|;
block|}
comment|/**    * Sends a Mutation to the table. The mutations will be buffered and sent over    * the wire as part of a batch.    *    * @param rowKey    *          identifying the row to write. Nothing gets written when null.    * @param tableMutator    *          used to modify the underlying HBase table    * @param column the column that is to be modified    * @param timestamp    *          version timestamp. When null the current timestamp multiplied with    *          TimestampGenerator.TS_MULTIPLIER and added with last 3 digits of    *          app id will be used    * @param inputValue    *          the value to write to the rowKey and column qualifier. Nothing    *          gets written when null.    * @param attributes Attributes to be set for HBase Put.    * @throws IOException if any problem occurs during store operation(sending    *          mutation to table).    */
DECL|method|store (byte[] rowKey, TypedBufferedMutator<?> tableMutator, Column<?> column, Long timestamp, Object inputValue, Attribute... attributes)
specifier|public
specifier|static
name|void
name|store
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|TypedBufferedMutator
argument_list|<
name|?
argument_list|>
name|tableMutator
parameter_list|,
name|Column
argument_list|<
name|?
argument_list|>
name|column
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|Object
name|inputValue
parameter_list|,
name|Attribute
modifier|...
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
name|store
argument_list|(
name|rowKey
argument_list|,
name|tableMutator
argument_list|,
name|column
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|column
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|,
name|timestamp
argument_list|,
name|column
operator|.
name|supplementCellTimestamp
argument_list|()
argument_list|,
name|inputValue
argument_list|,
name|column
operator|.
name|getValueConverter
argument_list|()
argument_list|,
name|column
operator|.
name|getCombinedAttrsWithAggr
argument_list|(
name|attributes
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends a Mutation to the table. The mutations will be buffered and sent over    * the wire as part of a batch.    *    * @param rowKey    *          identifying the row to write. Nothing gets written when null.    * @param tableMutator    *          used to modify the underlying HBase table    * @param columnFamilyBytes    * @param columnQualifier    *          column qualifier. Nothing gets written when null.    * @param timestamp    *          version timestamp. When null the current timestamp multiplied with    *          TimestampGenerator.TS_MULTIPLIER and added with last 3 digits of    *          app id will be used    * @param inputValue    *          the value to write to the rowKey and column qualifier. Nothing    *          gets written when null.    * @param converter    * @param attributes Attributes to be set for HBase Put.    * @throws IOException if any problem occurs during store operation(sending    *          mutation to table).    */
DECL|method|store (byte[] rowKey, TypedBufferedMutator<?> tableMutator, byte[] columnFamilyBytes, byte[] columnQualifier, Long timestamp, boolean supplementTs, Object inputValue, ValueConverter converter, Attribute... attributes)
specifier|public
specifier|static
name|void
name|store
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|TypedBufferedMutator
argument_list|<
name|?
argument_list|>
name|tableMutator
parameter_list|,
name|byte
index|[]
name|columnFamilyBytes
parameter_list|,
name|byte
index|[]
name|columnQualifier
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|boolean
name|supplementTs
parameter_list|,
name|Object
name|inputValue
parameter_list|,
name|ValueConverter
name|converter
parameter_list|,
name|Attribute
modifier|...
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|rowKey
operator|==
literal|null
operator|)
operator|||
operator|(
name|columnQualifier
operator|==
literal|null
operator|)
operator|||
operator|(
name|inputValue
operator|==
literal|null
operator|)
condition|)
block|{
return|return;
block|}
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|timestamp
operator|=
name|getPutTimestamp
argument_list|(
name|timestamp
argument_list|,
name|supplementTs
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|columnFamilyBytes
argument_list|,
name|columnQualifier
argument_list|,
name|timestamp
argument_list|,
name|converter
operator|.
name|encodeValue
argument_list|(
name|inputValue
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|attributes
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|attributes
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
for|for
control|(
name|Attribute
name|attribute
range|:
name|attributes
control|)
block|{
name|p
operator|.
name|setAttribute
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|,
name|attribute
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|tableMutator
operator|.
name|mutate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the latest version of this specified column. Note: this call clones the    * value content of the hosting {@link org.apache.hadoop.hbase.Cell Cell}.    *    * @param result from which to read the value. Cannot be null    * @param columnFamilyBytes    * @param columnQualifierBytes referring to the column to be read.    * @param converter    * @return latest version of the specified column of whichever object was    *         written.    * @throws IOException if any problem occurs while reading result.    */
DECL|method|readResult (Result result, byte[] columnFamilyBytes, byte[] columnQualifierBytes, ValueConverter converter)
specifier|public
specifier|static
name|Object
name|readResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|columnFamilyBytes
parameter_list|,
name|byte
index|[]
name|columnQualifierBytes
parameter_list|,
name|ValueConverter
name|converter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|columnQualifierBytes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Would have preferred to be able to use getValueAsByteBuffer and get a
comment|// ByteBuffer to avoid copy, but GenericObjectMapper doesn't seem to like
comment|// that.
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|columnFamilyBytes
argument_list|,
name|columnQualifierBytes
argument_list|)
decl_stmt|;
return|return
name|converter
operator|.
name|decodeValue
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Get the latest version of this specified column. Note: this call clones the    * value content of the hosting {@link org.apache.hadoop.hbase.Cell Cell}.    *    * @param result from which to read the value. Cannot be null    * @param column the column that the result can be parsed to    * @return latest version of the specified column of whichever object was    *         written.    * @throws IOException if any problem occurs while reading result.    */
DECL|method|readResult (Result result, Column<?> column)
specifier|public
specifier|static
name|Object
name|readResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|Column
argument_list|<
name|?
argument_list|>
name|column
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readResult
argument_list|(
name|result
argument_list|,
name|column
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|column
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|,
name|column
operator|.
name|getValueConverter
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the latest version of this specified column. Note: this call clones the    * value content of the hosting {@link org.apache.hadoop.hbase.Cell Cell}.    *    * @param result Cannot be null    * @param columnPrefix column prefix to read from    * @param qualifier column qualifier. Nothing gets read when null.    * @return result object (can be cast to whatever object was written to) or    *         null when specified column qualifier for this prefix doesn't exist    *         in the result.    * @throws IOException if there is any exception encountered while reading    *     result.    */
DECL|method|readResult (Result result, ColumnPrefix<?> columnPrefix, String qualifier)
specifier|public
specifier|static
name|Object
name|readResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|?
argument_list|>
name|columnPrefix
parameter_list|,
name|String
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|columnQualifier
init|=
name|ColumnHelper
operator|.
name|getColumnQualifier
argument_list|(
name|columnPrefix
operator|.
name|getColumnPrefixInBytes
argument_list|()
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
return|return
name|readResult
argument_list|(
name|result
argument_list|,
name|columnPrefix
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|columnQualifier
argument_list|,
name|columnPrefix
operator|.
name|getValueConverter
argument_list|()
argument_list|)
return|;
block|}
comment|/**    *    * @param<K> identifies the type of key converter.    * @param result from which to read columns.    * @param keyConverter used to convert column bytes to the appropriate key    *          type    * @return the latest values of columns in the column family with this prefix    *         (or all of them if the prefix value is null).    * @throws IOException if there is any exception encountered while reading    *           results.    */
DECL|method|readResults (Result result, ColumnPrefix<?> columnPrefix, KeyConverter<K> keyConverter)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
name|readResults
parameter_list|(
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|?
argument_list|>
name|columnPrefix
parameter_list|,
name|KeyConverter
argument_list|<
name|K
argument_list|>
name|keyConverter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readResults
argument_list|(
name|result
argument_list|,
name|columnPrefix
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|columnPrefix
operator|.
name|getColumnPrefixInBytes
argument_list|()
argument_list|,
name|keyConverter
argument_list|,
name|columnPrefix
operator|.
name|getValueConverter
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param result from which to reads data with timestamps.    * @param<K> identifies the type of key converter.    * @param<V> the type of the values. The values will be cast into that type.    * @param keyConverter used to convert column bytes to the appropriate key    *     type.    * @return the cell values at each respective time in for form    *         {@literal {idA={timestamp1->value1}, idA={timestamp2->value2},    *         idB={timestamp3->value3}, idC={timestamp1->value4}}}    * @throws IOException if there is any exception encountered while reading    *     result.    */
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|V
argument_list|>
argument_list|>
DECL|method|readResultsWithTimestamps (Result result, ColumnPrefix<?> columnPrefix, KeyConverter<K> keyConverter)
name|readResultsWithTimestamps
parameter_list|(
name|Result
name|result
parameter_list|,
name|ColumnPrefix
argument_list|<
name|?
argument_list|>
name|columnPrefix
parameter_list|,
name|KeyConverter
argument_list|<
name|K
argument_list|>
name|keyConverter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readResultsWithTimestamps
argument_list|(
name|result
argument_list|,
name|columnPrefix
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|columnPrefix
operator|.
name|getColumnPrefixInBytes
argument_list|()
argument_list|,
name|keyConverter
argument_list|,
name|columnPrefix
operator|.
name|getValueConverter
argument_list|()
argument_list|,
name|columnPrefix
operator|.
name|supplementCellTimeStamp
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param result from which to reads data with timestamps    * @param columnPrefixBytes optional prefix to limit columns. If null all    *          columns are returned.    * @param<K> identifies the type of column name(indicated by type of key    *     converter).    * @param<V> the type of the values. The values will be cast into that type.    * @param keyConverter used to convert column bytes to the appropriate key    *     type.    * @return the cell values at each respective time in for form    *         {@literal {idA={timestamp1->value1}, idA={timestamp2->value2},    *         idB={timestamp3->value3}, idC={timestamp1->value4}}}    * @throws IOException if any problem occurs while reading results.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|V
argument_list|>
argument_list|>
DECL|method|readResultsWithTimestamps (Result result, byte[] columnFamilyBytes, byte[] columnPrefixBytes, KeyConverter<K> keyConverter, ValueConverter valueConverter, boolean supplementTs)
name|readResultsWithTimestamps
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|columnFamilyBytes
parameter_list|,
name|byte
index|[]
name|columnPrefixBytes
parameter_list|,
name|KeyConverter
argument_list|<
name|K
argument_list|>
name|keyConverter
parameter_list|,
name|ValueConverter
name|valueConverter
parameter_list|,
name|boolean
name|supplementTs
parameter_list|)
throws|throws
name|IOException
block|{
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|V
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|>
name|resultMap
init|=
name|result
operator|.
name|getMap
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|columnCellMap
init|=
name|resultMap
operator|.
name|get
argument_list|(
name|columnFamilyBytes
argument_list|)
decl_stmt|;
comment|// could be that there is no such column family.
if|if
condition|(
name|columnCellMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|entry
range|:
name|columnCellMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|K
name|converterColumnKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|columnPrefixBytes
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"null prefix was specified; returning all columns"
argument_list|)
expr_stmt|;
try|try
block|{
name|converterColumnKey
operator|=
name|keyConverter
operator|.
name|decode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal column found, skipping this column."
argument_list|,
name|iae
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
comment|// A non-null prefix means columns are actually of the form
comment|// prefix!columnNameRemainder
name|byte
index|[]
index|[]
name|columnNameParts
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|actualColumnPrefixBytes
init|=
name|columnNameParts
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|columnPrefixBytes
argument_list|,
name|actualColumnPrefixBytes
argument_list|)
operator|&&
name|columnNameParts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
try|try
block|{
comment|// This is the prefix that we want
name|converterColumnKey
operator|=
name|keyConverter
operator|.
name|decode
argument_list|(
name|columnNameParts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal column found, skipping this column."
argument_list|,
name|iae
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
comment|// If this column has the prefix we want
if|if
condition|(
name|converterColumnKey
operator|!=
literal|null
condition|)
block|{
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|V
argument_list|>
name|cellResults
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|cells
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|cell
range|:
name|cells
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|V
name|value
init|=
operator|(
name|V
operator|)
name|valueConverter
operator|.
name|decodeValue
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|ts
init|=
name|supplementTs
condition|?
name|TimestampGenerator
operator|.
name|getTruncatedTimestamp
argument_list|(
name|cell
operator|.
name|getKey
argument_list|()
argument_list|)
else|:
name|cell
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|cellResults
operator|.
name|put
argument_list|(
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|put
argument_list|(
name|converterColumnKey
argument_list|,
name|cellResults
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for entry : columnCellMap
block|}
comment|// if columnCellMap != null
block|}
comment|// if result != null
return|return
name|results
return|;
block|}
comment|/**    * @param<K> identifies the type of column name(indicated by type of key    *     converter).    * @param result from which to read columns    * @param columnPrefixBytes optional prefix to limit columns. If null all    *        columns are returned.    * @param keyConverter used to convert column bytes to the appropriate key    *          type.    * @return the latest values of columns in the column family. If the column    *         prefix is null, the column qualifier is returned as Strings. For a    *         non-null column prefix bytes, the column qualifier is returned as    *         a list of parts, each part a byte[]. This is to facilitate    *         returning byte arrays of values that were not Strings.    * @throws IOException if any problem occurs while reading results.    */
DECL|method|readResults (Result result, byte[] columnFamilyBytes, byte[] columnPrefixBytes, KeyConverter<K> keyConverter, ValueConverter valueConverter)
specifier|public
specifier|static
parameter_list|<
name|K
parameter_list|>
name|Map
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
name|readResults
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|columnFamilyBytes
parameter_list|,
name|byte
index|[]
name|columnPrefixBytes
parameter_list|,
name|KeyConverter
argument_list|<
name|K
argument_list|>
name|keyConverter
parameter_list|,
name|ValueConverter
name|valueConverter
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|columns
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|columnFamilyBytes
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|columns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|columnKey
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|columnKey
operator|!=
literal|null
operator|&&
name|columnKey
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|K
name|converterColumnKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|columnPrefixBytes
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|converterColumnKey
operator|=
name|keyConverter
operator|.
name|decode
argument_list|(
name|columnKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal column found, skipping this column."
argument_list|,
name|iae
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
comment|// A non-null prefix means columns are actually of the form
comment|// prefix!columnNameRemainder
name|byte
index|[]
index|[]
name|columnNameParts
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|columnKey
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnNameParts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|actualColumnPrefixBytes
init|=
name|columnNameParts
index|[
literal|0
index|]
decl_stmt|;
comment|// If this is the prefix that we want
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|columnPrefixBytes
argument_list|,
name|actualColumnPrefixBytes
argument_list|)
operator|&&
name|columnNameParts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
try|try
block|{
name|converterColumnKey
operator|=
name|keyConverter
operator|.
name|decode
argument_list|(
name|columnNameParts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Illegal column found, skipping this column."
argument_list|,
name|iae
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
comment|// if-else
comment|// If the columnPrefix is null (we want all columns), or the actual
comment|// prefix matches the given prefix we want this column
if|if
condition|(
name|converterColumnKey
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|valueConverter
operator|.
name|decodeValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// we return the columnQualifier in parts since we don't know
comment|// which part is of which data type.
name|results
operator|.
name|put
argument_list|(
name|converterColumnKey
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// for entry
block|}
return|return
name|results
return|;
block|}
comment|/**    * Sends a Mutation to the table. The mutations will be buffered and sent over    * the wire as part of a batch.    *    * @param rowKey identifying the row to write. Nothing gets written when null.    * @param tableMutator used to modify the underlying HBase table. Caller is    *          responsible to pass a mutator for the table that actually has this    *          column.    * @param qualifier column qualifier. Nothing gets written when null.    * @param timestamp version timestamp. When null the server timestamp will be    *          used.    * @param attributes attributes for the mutation that are used by the    *          coprocessor to set/read the cell tags.    * @param inputValue the value to write to the rowKey and column qualifier.    *          Nothing gets written when null.    * @throws IOException if there is any exception encountered while doing    *     store operation(sending mutation to the table).    */
DECL|method|store (byte[] rowKey, TypedBufferedMutator<?> tableMutator, ColumnPrefix<?> columnPrefix, byte[] qualifier, Long timestamp, Object inputValue, Attribute... attributes)
specifier|public
specifier|static
name|void
name|store
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|TypedBufferedMutator
argument_list|<
name|?
argument_list|>
name|tableMutator
parameter_list|,
name|ColumnPrefix
argument_list|<
name|?
argument_list|>
name|columnPrefix
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|Object
name|inputValue
parameter_list|,
name|Attribute
modifier|...
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Null check
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot store column with null qualifier in "
operator|+
name|tableMutator
operator|.
name|getName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|byte
index|[]
name|columnQualifier
init|=
name|columnPrefix
operator|.
name|getColumnPrefixBytes
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|Attribute
index|[]
name|combinedAttributes
init|=
name|columnPrefix
operator|.
name|getCombinedAttrsWithAggr
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|store
argument_list|(
name|rowKey
argument_list|,
name|tableMutator
argument_list|,
name|columnPrefix
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|columnQualifier
argument_list|,
name|timestamp
argument_list|,
name|columnPrefix
operator|.
name|supplementCellTimeStamp
argument_list|()
argument_list|,
name|inputValue
argument_list|,
name|columnPrefix
operator|.
name|getValueConverter
argument_list|()
argument_list|,
name|combinedAttributes
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends a Mutation to the table. The mutations will be buffered and sent over    * the wire as part of a batch.    *    * @param rowKey identifying the row to write. Nothing gets written when null.    * @param tableMutator used to modify the underlying HBase table. Caller is    *          responsible to pass a mutator for the table that actually has this    *          column.    * @param qualifier column qualifier. Nothing gets written when null.    * @param timestamp version timestamp. When null the server timestamp will be    *          used.    * @param attributes attributes for the mutation that are used by the    *          coprocessor to set/read the cell tags.    * @param inputValue the value to write to the rowKey and column qualifier.    *          Nothing gets written when null.    * @throws IOException if there is any exception encountered while doing    *     store operation(sending mutation to the table).    */
DECL|method|store (byte[] rowKey, TypedBufferedMutator<?> tableMutator, ColumnPrefix<?> columnPrefix, String qualifier, Long timestamp, Object inputValue, Attribute... attributes)
specifier|public
specifier|static
name|void
name|store
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|TypedBufferedMutator
argument_list|<
name|?
argument_list|>
name|tableMutator
parameter_list|,
name|ColumnPrefix
argument_list|<
name|?
argument_list|>
name|columnPrefix
parameter_list|,
name|String
name|qualifier
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|Object
name|inputValue
parameter_list|,
name|Attribute
modifier|...
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Null check
if|if
condition|(
name|qualifier
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot store column with null qualifier in "
operator|+
name|tableMutator
operator|.
name|getName
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
throw|;
block|}
name|byte
index|[]
name|columnQualifier
init|=
name|columnPrefix
operator|.
name|getColumnPrefixBytes
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|Attribute
index|[]
name|combinedAttributes
init|=
name|columnPrefix
operator|.
name|getCombinedAttrsWithAggr
argument_list|(
name|attributes
argument_list|)
decl_stmt|;
name|store
argument_list|(
name|rowKey
argument_list|,
name|tableMutator
argument_list|,
name|columnPrefix
operator|.
name|getColumnFamilyBytes
argument_list|()
argument_list|,
name|columnQualifier
argument_list|,
name|timestamp
argument_list|,
name|columnPrefix
operator|.
name|supplementCellTimeStamp
argument_list|()
argument_list|,
name|inputValue
argument_list|,
name|columnPrefix
operator|.
name|getValueConverter
argument_list|()
argument_list|,
name|combinedAttributes
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

