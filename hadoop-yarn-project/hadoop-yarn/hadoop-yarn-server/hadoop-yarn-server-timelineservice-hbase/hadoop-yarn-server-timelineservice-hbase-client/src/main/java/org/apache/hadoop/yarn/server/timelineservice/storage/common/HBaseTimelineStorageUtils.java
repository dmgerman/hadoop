begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A bunch of utility functions used in HBase TimelineService backend.  */
end_comment

begin_class
DECL|class|HBaseTimelineStorageUtils
specifier|public
specifier|final
class|class
name|HBaseTimelineStorageUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HBaseTimelineStorageUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|HBaseTimelineStorageUtils ()
specifier|private
name|HBaseTimelineStorageUtils
parameter_list|()
block|{   }
comment|/**    * @param conf YARN configuration. Used to see if there is an explicit config    *          pointing to the HBase config file to read. It should not be null    *          or a NullPointerException will be thrown.    * @return a configuration with the HBase configuration from the classpath,    *         optionally overwritten by the timeline service configuration URL if    *         specified.    * @throws MalformedURLException if a timeline service HBase configuration URL    *           is specified but is a malformed URL.    */
DECL|method|getTimelineServiceHBaseConf (Configuration conf)
specifier|public
specifier|static
name|Configuration
name|getTimelineServiceHBaseConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|Configuration
name|hbaseConf
decl_stmt|;
name|String
name|timelineServiceHBaseConfFileURL
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|timelineServiceHBaseConfFileURL
operator|!=
literal|null
operator|&&
name|timelineServiceHBaseConfFileURL
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using hbase configuration at "
operator|+
name|timelineServiceHBaseConfFileURL
argument_list|)
expr_stmt|;
comment|// create a clone so that we don't mess with out input one
name|hbaseConf
operator|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|plainHBaseConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|URL
name|hbaseSiteXML
init|=
operator|new
name|URL
argument_list|(
name|timelineServiceHBaseConfFileURL
argument_list|)
decl_stmt|;
name|plainHBaseConf
operator|.
name|addResource
argument_list|(
name|hbaseSiteXML
argument_list|)
expr_stmt|;
name|HBaseConfiguration
operator|.
name|merge
argument_list|(
name|hbaseConf
argument_list|,
name|plainHBaseConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// default to what is on the classpath
name|hbaseConf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|hbaseConf
return|;
block|}
comment|/**    * Given a row key prefix stored in a byte array, return a byte array for its    * immediate next row key.    *    * @param rowKeyPrefix The provided row key prefix, represented in an array.    * @return the closest next row key of the provided row key.    */
DECL|method|calculateTheClosestNextRowKeyForPrefix ( byte[] rowKeyPrefix)
specifier|public
specifier|static
name|byte
index|[]
name|calculateTheClosestNextRowKeyForPrefix
parameter_list|(
name|byte
index|[]
name|rowKeyPrefix
parameter_list|)
block|{
comment|// Essentially we are treating it like an 'unsigned very very long' and
comment|// doing +1 manually.
comment|// Search for the place where the trailing 0xFFs start
name|int
name|offset
init|=
name|rowKeyPrefix
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|offset
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rowKeyPrefix
index|[
name|offset
operator|-
literal|1
index|]
operator|!=
operator|(
name|byte
operator|)
literal|0xFF
condition|)
block|{
break|break;
block|}
name|offset
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
comment|// We got an 0xFFFF... (only FFs) stopRow value which is
comment|// the last possible prefix before the end of the table.
comment|// So set it to stop at the 'end of the table'
return|return
name|HConstants
operator|.
name|EMPTY_END_ROW
return|;
block|}
comment|// Copy the right length of the original
name|byte
index|[]
name|newStopRow
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|rowKeyPrefix
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
decl_stmt|;
comment|// And increment the last one
name|newStopRow
index|[
name|newStopRow
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
return|return
name|newStopRow
return|;
block|}
DECL|method|setMetricsTimeRange (Query query, byte[] metricsCf, long tsBegin, long tsEnd)
specifier|public
specifier|static
name|void
name|setMetricsTimeRange
parameter_list|(
name|Query
name|query
parameter_list|,
name|byte
index|[]
name|metricsCf
parameter_list|,
name|long
name|tsBegin
parameter_list|,
name|long
name|tsEnd
parameter_list|)
block|{
if|if
condition|(
name|tsBegin
operator|!=
literal|0
operator|||
name|tsEnd
operator|!=
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|query
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|metricsCf
argument_list|,
name|tsBegin
argument_list|,
operator|(
operator|(
name|tsEnd
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|)
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
operator|(
name|tsEnd
operator|+
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

