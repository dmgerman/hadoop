begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.subapplication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|subapplication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|BaseTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimelineHBaseSchemaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The sub application table has column families:  * info, config and metrics.  * Info stores information about a timeline entity object  * config stores configuration data of a timeline entity object  * metrics stores the metrics of a timeline entity object  *  * Example sub application table record:  *  *<pre>  * |-------------------------------------------------------------------------|  * |  Row          | Column Family             | Column Family| Column Family|  * |  key          | info                      | metrics      | config       |  * |-------------------------------------------------------------------------|  * | subAppUserId! | id:entityId               | metricId1:   | configKey1:  |  * | clusterId!    | type:entityType           | metricValue1 | configValue1 |  * | entityType!   |                           | @timestamp1  |              |  * | idPrefix!|    |                           |              | configKey2:  |  * | entityId!     | created_time:             | metricId1:   | configValue2 |  * | userId        | 1392993084018             | metricValue2 |              |  * |               |                           | @timestamp2  |              |  * |               | i!infoKey:                |              |              |  * |               | infoValue                 | metricId1:   |              |  * |               |                           | metricValue1 |              |  * |               |                           | @timestamp2  |              |  * |               | e!eventId=timestamp=      |              |              |  * |               | infoKey:                  |              |              |  * |               | eventInfoValue            |              |              |  * |               |                           |              |              |  * |               | r!relatesToKey:           |              |              |  * |               | id3=id4=id5               |              |              |  * |               |                           |              |              |  * |               | s!isRelatedToKey          |              |              |  * |               | id7=id9=id6               |              |              |  * |               |                           |              |              |  * |               | flowVersion:              |              |              |  * |               | versionValue              |              |              |  * |-------------------------------------------------------------------------|  *</pre>  */
end_comment

begin_class
DECL|class|SubApplicationTable
specifier|public
class|class
name|SubApplicationTable
extends|extends
name|BaseTable
argument_list|<
name|SubApplicationTable
argument_list|>
block|{
comment|/** sub app prefix. */
DECL|field|PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"subapplication"
decl_stmt|;
comment|/** config param name that specifies the subapplication table name. */
DECL|field|TABLE_NAME_CONF_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NAME_CONF_NAME
init|=
name|PREFIX
operator|+
literal|".table.name"
decl_stmt|;
comment|/**    * config param name that specifies the TTL for metrics column family in    * subapplication table.    */
DECL|field|METRICS_TTL_CONF_NAME
specifier|private
specifier|static
specifier|final
name|String
name|METRICS_TTL_CONF_NAME
init|=
name|PREFIX
operator|+
literal|".table.metrics.ttl"
decl_stmt|;
comment|/**    * config param name that specifies max-versions for    * metrics column family in subapplication table.    */
DECL|field|METRICS_MAX_VERSIONS
specifier|private
specifier|static
specifier|final
name|String
name|METRICS_MAX_VERSIONS
init|=
name|PREFIX
operator|+
literal|".table.metrics.max-versions"
decl_stmt|;
comment|/** default value for subapplication table name. */
DECL|field|DEFAULT_TABLE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TABLE_NAME
init|=
literal|"timelineservice.subapplication"
decl_stmt|;
comment|/** default TTL is 30 days for metrics timeseries. */
DECL|field|DEFAULT_METRICS_TTL
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_METRICS_TTL
init|=
literal|2592000
decl_stmt|;
comment|/** default max number of versions. */
DECL|field|DEFAULT_METRICS_MAX_VERSIONS
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_METRICS_MAX_VERSIONS
init|=
literal|10000
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SubApplicationTable
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|SubApplicationTable ()
specifier|public
name|SubApplicationTable
parameter_list|()
block|{
name|super
argument_list|(
name|TABLE_NAME_CONF_NAME
argument_list|,
name|DEFAULT_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
comment|/*    * (non-Javadoc)    *    * @see    * org.apache.hadoop.yarn.server.timelineservice.storage.BaseTable#createTable    * (org.apache.hadoop.hbase.client.Admin,    * org.apache.hadoop.conf.Configuration)    */
DECL|method|createTable (Admin admin, Configuration hbaseConf)
specifier|public
name|void
name|createTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|Configuration
name|hbaseConf
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
name|table
init|=
name|getTableName
argument_list|(
name|hbaseConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
condition|)
block|{
comment|// do not disable / delete existing table
comment|// similar to the approach taken by map-reduce jobs when
comment|// output directory exists
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Table "
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|subAppTableDescp
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|infoCF
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|SubApplicationColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|infoCF
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|ROWCOL
argument_list|)
expr_stmt|;
name|subAppTableDescp
operator|.
name|addFamily
argument_list|(
name|infoCF
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|configCF
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|SubApplicationColumnFamily
operator|.
name|CONFIGS
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|configCF
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|ROWCOL
argument_list|)
expr_stmt|;
name|configCF
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|subAppTableDescp
operator|.
name|addFamily
argument_list|(
name|configCF
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|metricsCF
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|SubApplicationColumnFamily
operator|.
name|METRICS
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|subAppTableDescp
operator|.
name|addFamily
argument_list|(
name|metricsCF
argument_list|)
expr_stmt|;
name|metricsCF
operator|.
name|setBlockCacheEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// always keep 1 version (the latest)
name|metricsCF
operator|.
name|setMinVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|metricsCF
operator|.
name|setMaxVersions
argument_list|(
name|hbaseConf
operator|.
name|getInt
argument_list|(
name|METRICS_MAX_VERSIONS
argument_list|,
name|DEFAULT_METRICS_MAX_VERSIONS
argument_list|)
argument_list|)
expr_stmt|;
name|metricsCF
operator|.
name|setTimeToLive
argument_list|(
name|hbaseConf
operator|.
name|getInt
argument_list|(
name|METRICS_TTL_CONF_NAME
argument_list|,
name|DEFAULT_METRICS_TTL
argument_list|)
argument_list|)
expr_stmt|;
name|subAppTableDescp
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
literal|"org.apache.hadoop.hbase.regionserver.KeyPrefixRegionSplitPolicy"
argument_list|)
expr_stmt|;
name|subAppTableDescp
operator|.
name|setValue
argument_list|(
literal|"KeyPrefixRegionSplitPolicy.prefix_length"
argument_list|,
name|TimelineHBaseSchemaConstants
operator|.
name|USERNAME_SPLIT_KEY_PREFIX_LENGTH
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|subAppTableDescp
argument_list|,
name|TimelineHBaseSchemaConstants
operator|.
name|getUsernameSplits
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Status of table creation for "
operator|+
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"="
operator|+
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param metricsTTL time to live parameter for the metricss in this table.    * @param hbaseConf configururation in which to set the metrics TTL config    *          variable.    */
DECL|method|setMetricsTTL (int metricsTTL, Configuration hbaseConf)
specifier|public
name|void
name|setMetricsTTL
parameter_list|(
name|int
name|metricsTTL
parameter_list|,
name|Configuration
name|hbaseConf
parameter_list|)
block|{
name|hbaseConf
operator|.
name|setInt
argument_list|(
name|METRICS_TTL_CONF_NAME
argument_list|,
name|metricsTTL
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

