begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineDataToRetrieve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineEntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_comment
comment|/**  * Factory methods for instantiating a timeline entity reader.  */
end_comment

begin_class
DECL|class|TimelineEntityReaderFactory
specifier|public
specifier|final
class|class
name|TimelineEntityReaderFactory
block|{
DECL|method|TimelineEntityReaderFactory ()
specifier|private
name|TimelineEntityReaderFactory
parameter_list|()
block|{   }
comment|/**    * Creates a timeline entity reader instance for reading a single entity with    * the specified input.    *    * @param context Reader context which defines the scope in which query has to    *     be made.    * @param dataToRetrieve Data to retrieve for each entity.    * @return An implementation of<cite>TimelineEntityReader</cite> object    *     depending on entity type.    */
DECL|method|createSingleEntityReader ( TimelineReaderContext context, TimelineDataToRetrieve dataToRetrieve)
specifier|public
specifier|static
name|TimelineEntityReader
name|createSingleEntityReader
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|TimelineDataToRetrieve
name|dataToRetrieve
parameter_list|)
block|{
comment|// currently the types that are handled separate from the generic entity
comment|// table are application, flow run, and flow activity entities
if|if
condition|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|matches
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ApplicationEntityReader
argument_list|(
name|context
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|matches
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|FlowRunEntityReader
argument_list|(
name|context
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|matches
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|FlowActivityEntityReader
argument_list|(
name|context
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
else|else
block|{
comment|// assume we're dealing with a generic entity read
return|return
operator|new
name|GenericEntityReader
argument_list|(
name|context
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates a timeline entity reader instance for reading set of entities with    * the specified input and predicates.    *    * @param context Reader context which defines the scope in which query has to    *     be made.    * @param filters Filters which limit the entities returned.    * @param dataToRetrieve Data to retrieve for each entity.    * @return An implementation of<cite>TimelineEntityReader</cite> object    *     depending on entity type.    */
DECL|method|createMultipleEntitiesReader ( TimelineReaderContext context, TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve)
specifier|public
specifier|static
name|TimelineEntityReader
name|createMultipleEntitiesReader
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|,
name|TimelineEntityFilters
name|filters
parameter_list|,
name|TimelineDataToRetrieve
name|dataToRetrieve
parameter_list|)
block|{
comment|// currently the types that are handled separate from the generic entity
comment|// table are application, flow run, and flow activity entities
if|if
condition|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|matches
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ApplicationEntityReader
argument_list|(
name|context
argument_list|,
name|filters
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|matches
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|FlowActivityEntityReader
argument_list|(
name|context
argument_list|,
name|filters
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_RUN
operator|.
name|matches
argument_list|(
name|context
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|FlowRunEntityReader
argument_list|(
name|context
argument_list|,
name|filters
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|context
operator|.
name|getDoAsUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|SubApplicationEntityReader
argument_list|(
name|context
argument_list|,
name|filters
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
comment|// assume we're dealing with a generic entity read
return|return
operator|new
name|GenericEntityReader
argument_list|(
name|context
argument_list|,
name|filters
argument_list|,
name|dataToRetrieve
argument_list|)
return|;
block|}
block|}
comment|/**    * Creates a timeline entity type reader that will read all available entity    * types within the specified context.    *    * @param context Reader context which defines the scope in which query has to    *                be made. Limited to application level only.    * @return an<cite>EntityTypeReader</cite> object    */
DECL|method|createEntityTypeReader ( TimelineReaderContext context)
specifier|public
specifier|static
name|EntityTypeReader
name|createEntityTypeReader
parameter_list|(
name|TimelineReaderContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|EntityTypeReader
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

