begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_comment
comment|/**  * Encapsulates information about Event column names for application and entity  * tables. Used while encoding/decoding event column names.  */
end_comment

begin_class
DECL|class|EventColumnName
specifier|public
class|class
name|EventColumnName
block|{
DECL|field|id
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
DECL|field|timestamp
specifier|private
specifier|final
name|Long
name|timestamp
decl_stmt|;
DECL|field|infoKey
specifier|private
specifier|final
name|String
name|infoKey
decl_stmt|;
DECL|field|eventColumnNameConverter
specifier|private
specifier|final
name|KeyConverter
argument_list|<
name|EventColumnName
argument_list|>
name|eventColumnNameConverter
init|=
operator|new
name|EventColumnNameConverter
argument_list|()
decl_stmt|;
DECL|method|EventColumnName (String id, Long timestamp, String infoKey)
specifier|public
name|EventColumnName
parameter_list|(
name|String
name|id
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|String
name|infoKey
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
name|this
operator|.
name|infoKey
operator|=
name|infoKey
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|getTimestamp ()
specifier|public
name|Long
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
DECL|method|getInfoKey ()
specifier|public
name|String
name|getInfoKey
parameter_list|()
block|{
return|return
name|infoKey
return|;
block|}
comment|/**    * @return a byte array with each components/fields separated by    *         Separator#VALUES. This leads to an event column name of the form    *         eventId=timestamp=infokey. If both timestamp and infokey are null,    *         then a qualifier of the form eventId=timestamp= is returned. If    *         only infokey is null, then a qualifier of the form eventId= is    *         returned. These prefix forms are useful for queries that intend to    *         retrieve more than one specific column name.    */
DECL|method|getColumnQualifier ()
specifier|public
name|byte
index|[]
name|getColumnQualifier
parameter_list|()
block|{
return|return
name|eventColumnNameConverter
operator|.
name|encode
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

