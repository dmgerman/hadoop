begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.reader
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|reader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FamilyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineDataToRetrieve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineEntityFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|filter
operator|.
name|TimelineFilterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumnFamily
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationRowKeyPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|BaseTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|RowKeyPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TimelineStorageUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Timeline entity reader for application entities that are stored in the  * application table.  */
end_comment

begin_class
DECL|class|ApplicationEntityReader
class|class
name|ApplicationEntityReader
extends|extends
name|GenericEntityReader
block|{
DECL|field|APPLICATION_TABLE
specifier|private
specifier|static
specifier|final
name|ApplicationTable
name|APPLICATION_TABLE
init|=
operator|new
name|ApplicationTable
argument_list|()
decl_stmt|;
DECL|method|ApplicationEntityReader (TimelineReaderContext ctxt, TimelineEntityFilters entityFilters, TimelineDataToRetrieve toRetrieve)
specifier|public
name|ApplicationEntityReader
parameter_list|(
name|TimelineReaderContext
name|ctxt
parameter_list|,
name|TimelineEntityFilters
name|entityFilters
parameter_list|,
name|TimelineDataToRetrieve
name|toRetrieve
parameter_list|)
block|{
name|super
argument_list|(
name|ctxt
argument_list|,
name|entityFilters
argument_list|,
name|toRetrieve
argument_list|)
expr_stmt|;
block|}
DECL|method|ApplicationEntityReader (TimelineReaderContext ctxt, TimelineDataToRetrieve toRetrieve)
specifier|public
name|ApplicationEntityReader
parameter_list|(
name|TimelineReaderContext
name|ctxt
parameter_list|,
name|TimelineDataToRetrieve
name|toRetrieve
parameter_list|)
block|{
name|super
argument_list|(
name|ctxt
argument_list|,
name|toRetrieve
argument_list|)
expr_stmt|;
block|}
comment|/**    * Uses the {@link ApplicationTable}.    */
DECL|method|getTable ()
specifier|protected
name|BaseTable
argument_list|<
name|?
argument_list|>
name|getTable
parameter_list|()
block|{
return|return
name|APPLICATION_TABLE
return|;
block|}
comment|/**    * This method is called only for multiple entity reads.    */
annotation|@
name|Override
DECL|method|constructFilterListBasedOnFilters ()
specifier|protected
name|FilterList
name|constructFilterListBasedOnFilters
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Filters here cannot be null for multiple entity reads as they are set in
comment|// augmentParams if null.
name|TimelineEntityFilters
name|filters
init|=
name|getFilters
argument_list|()
decl_stmt|;
name|FilterList
name|listBasedOnFilters
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
comment|// Create filter list based on created time range and add it to
comment|// listBasedOnFilters.
name|long
name|createdTimeBegin
init|=
name|filters
operator|.
name|getCreatedTimeBegin
argument_list|()
decl_stmt|;
name|long
name|createdTimeEnd
init|=
name|filters
operator|.
name|getCreatedTimeEnd
argument_list|()
decl_stmt|;
if|if
condition|(
name|createdTimeBegin
operator|!=
literal|0
operator|||
name|createdTimeEnd
operator|!=
name|Long
operator|.
name|MAX_VALUE
condition|)
block|{
name|listBasedOnFilters
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createSingleColValueFiltersByRange
argument_list|(
name|ApplicationColumn
operator|.
name|CREATED_TIME
argument_list|,
name|createdTimeBegin
argument_list|,
name|createdTimeEnd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create filter list based on metric filters and add it to
comment|// listBasedOnFilters.
name|TimelineFilterList
name|metricFilters
init|=
name|filters
operator|.
name|getMetricFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|metricFilters
operator|!=
literal|null
operator|&&
operator|!
name|metricFilters
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listBasedOnFilters
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseFilterList
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|METRIC
argument_list|,
name|metricFilters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create filter list based on config filters and add it to
comment|// listBasedOnFilters.
name|TimelineFilterList
name|configFilters
init|=
name|filters
operator|.
name|getConfigFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|configFilters
operator|!=
literal|null
operator|&&
operator|!
name|configFilters
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listBasedOnFilters
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseFilterList
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|CONFIG
argument_list|,
name|configFilters
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create filter list based on info filters and add it to listBasedOnFilters
name|TimelineFilterList
name|infoFilters
init|=
name|filters
operator|.
name|getInfoFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|infoFilters
operator|!=
literal|null
operator|&&
operator|!
name|infoFilters
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|listBasedOnFilters
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseFilterList
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|INFO
argument_list|,
name|infoFilters
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|listBasedOnFilters
return|;
block|}
comment|/**    * Add {@link QualifierFilter} filters to filter list for each column of    * application table.    *    * @param list filter list to which qualifier filters have to be added.    */
annotation|@
name|Override
DECL|method|updateFixedColumns (FilterList list)
specifier|protected
name|void
name|updateFixedColumns
parameter_list|(
name|FilterList
name|list
parameter_list|)
block|{
for|for
control|(
name|ApplicationColumn
name|column
range|:
name|ApplicationColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|list
operator|.
name|addFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|column
operator|.
name|getColumnQualifierBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a filter list which indicates that only some of the column    * qualifiers in the info column family will be returned in result.    *    * @return filter list.    * @throws IOException if any problem occurs while creating filter list.    */
DECL|method|createFilterListForColsOfInfoFamily ()
specifier|private
name|FilterList
name|createFilterListForColsOfInfoFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|FilterList
name|infoFamilyColsFilter
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
comment|// Add filters for each column in entity table.
name|updateFixedColumns
argument_list|(
name|infoFamilyColsFilter
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
init|=
name|getDataToRetrieve
argument_list|()
operator|.
name|getFieldsToRetrieve
argument_list|()
decl_stmt|;
comment|// If INFO field has to be retrieved, add a filter for fetching columns
comment|// with INFO column prefix.
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|infoFamilyColsFilter
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimelineFilterList
name|relatesTo
init|=
name|getFilters
argument_list|()
operator|.
name|getRelatesTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|RELATES_TO
argument_list|)
condition|)
block|{
comment|// If RELATES_TO field has to be retrieved, add a filter for fetching
comment|// columns with RELATES_TO column prefix.
name|infoFamilyColsFilter
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|RELATES_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|relatesTo
operator|!=
literal|null
operator|&&
operator|!
name|relatesTo
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Even if fields to retrieve does not contain RELATES_TO, we still
comment|// need to have a filter to fetch some of the column qualifiers if
comment|// relatesTo filters are specified. relatesTo filters will then be
comment|// matched after fetching rows from HBase.
name|Set
argument_list|<
name|String
argument_list|>
name|relatesToCols
init|=
name|TimelineFilterUtils
operator|.
name|fetchColumnsFromFilterList
argument_list|(
name|relatesTo
argument_list|)
decl_stmt|;
name|infoFamilyColsFilter
operator|.
name|addFilter
argument_list|(
name|createFiltersFromColumnQualifiers
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|RELATES_TO
argument_list|,
name|relatesToCols
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimelineFilterList
name|isRelatedTo
init|=
name|getFilters
argument_list|()
operator|.
name|getIsRelatedTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
condition|)
block|{
comment|// If IS_RELATED_TO field has to be retrieved, add a filter for fetching
comment|// columns with IS_RELATED_TO column prefix.
name|infoFamilyColsFilter
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isRelatedTo
operator|!=
literal|null
operator|&&
operator|!
name|isRelatedTo
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Even if fields to retrieve does not contain IS_RELATED_TO, we still
comment|// need to have a filter to fetch some of the column qualifiers if
comment|// isRelatedTo filters are specified. isRelatedTo filters will then be
comment|// matched after fetching rows from HBase.
name|Set
argument_list|<
name|String
argument_list|>
name|isRelatedToCols
init|=
name|TimelineFilterUtils
operator|.
name|fetchColumnsFromFilterList
argument_list|(
name|isRelatedTo
argument_list|)
decl_stmt|;
name|infoFamilyColsFilter
operator|.
name|addFilter
argument_list|(
name|createFiltersFromColumnQualifiers
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|,
name|isRelatedToCols
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TimelineFilterList
name|eventFilters
init|=
name|getFilters
argument_list|()
operator|.
name|getEventFilters
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|EVENTS
argument_list|)
condition|)
block|{
comment|// If EVENTS field has to be retrieved, add a filter for fetching columns
comment|// with EVENT column prefix.
name|infoFamilyColsFilter
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|EVENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eventFilters
operator|!=
literal|null
operator|&&
operator|!
name|eventFilters
operator|.
name|getFilterList
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Even if fields to retrieve does not contain EVENTS, we still need to
comment|// have a filter to fetch some of the column qualifiers on the basis of
comment|// event filters specified. Event filters will then be matched after
comment|// fetching rows from HBase.
name|Set
argument_list|<
name|String
argument_list|>
name|eventCols
init|=
name|TimelineFilterUtils
operator|.
name|fetchColumnsFromFilterList
argument_list|(
name|eventFilters
argument_list|)
decl_stmt|;
name|infoFamilyColsFilter
operator|.
name|addFilter
argument_list|(
name|createFiltersFromColumnQualifiers
argument_list|(
name|ApplicationColumnPrefix
operator|.
name|EVENT
argument_list|,
name|eventCols
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|infoFamilyColsFilter
return|;
block|}
comment|/**    * Exclude column prefixes via filters which are not required(based on fields    * to retrieve) from info column family. These filters are added to filter    * list which contains a filter for getting info column family.    *    * @param infoColFamilyList filter list for info column family.    */
DECL|method|excludeFieldsFromInfoColFamily (FilterList infoColFamilyList)
specifier|private
name|void
name|excludeFieldsFromInfoColFamily
parameter_list|(
name|FilterList
name|infoColFamilyList
parameter_list|)
block|{
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
init|=
name|getDataToRetrieve
argument_list|()
operator|.
name|getFieldsToRetrieve
argument_list|()
decl_stmt|;
comment|// Events not required.
if|if
condition|(
operator|!
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|EVENTS
argument_list|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|EVENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// info not required.
if|if
condition|(
operator|!
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// is related to not required.
if|if
condition|(
operator|!
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// relates to not required.
if|if
condition|(
operator|!
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|RELATES_TO
argument_list|)
condition|)
block|{
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createHBaseQualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|RELATES_TO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Updates filter list based on fields for confs and metrics to retrieve.    *    * @param listBasedOnFields filter list based on fields.    * @throws IOException if any problem occurs while updating filter list.    */
DECL|method|updateFilterForConfsAndMetricsToRetrieve ( FilterList listBasedOnFields)
specifier|private
name|void
name|updateFilterForConfsAndMetricsToRetrieve
parameter_list|(
name|FilterList
name|listBasedOnFields
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineDataToRetrieve
name|dataToRetrieve
init|=
name|getDataToRetrieve
argument_list|()
decl_stmt|;
comment|// Please note that if confsToRetrieve is specified, we would have added
comment|// CONFS to fields to retrieve in augmentParams() even if not specified.
if|if
condition|(
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|CONFIGS
argument_list|)
condition|)
block|{
comment|// Create a filter list for configs.
name|listBasedOnFields
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createFilterForConfsOrMetricsToRetrieve
argument_list|(
name|dataToRetrieve
operator|.
name|getConfsToRetrieve
argument_list|()
argument_list|,
name|ApplicationColumnFamily
operator|.
name|CONFIGS
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Please note that if metricsToRetrieve is specified, we would have added
comment|// METRICS to fields to retrieve in augmentParams() even if not specified.
if|if
condition|(
name|dataToRetrieve
operator|.
name|getFieldsToRetrieve
argument_list|()
operator|.
name|contains
argument_list|(
name|Field
operator|.
name|METRICS
argument_list|)
condition|)
block|{
comment|// Create a filter list for metrics.
name|listBasedOnFields
operator|.
name|addFilter
argument_list|(
name|TimelineFilterUtils
operator|.
name|createFilterForConfsOrMetricsToRetrieve
argument_list|(
name|dataToRetrieve
operator|.
name|getMetricsToRetrieve
argument_list|()
argument_list|,
name|ApplicationColumnFamily
operator|.
name|METRICS
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|METRIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|constructFilterListBasedOnFields ()
specifier|protected
name|FilterList
name|constructFilterListBasedOnFields
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|needCreateFilterListBasedOnFields
argument_list|()
condition|)
block|{
comment|// Fetch all the columns. No need of a filter.
return|return
literal|null
return|;
block|}
name|FilterList
name|listBasedOnFields
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|FilterList
name|infoColFamilyList
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
comment|// By default fetch everything in INFO column family.
name|FamilyFilter
name|infoColumnFamily
init|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|ApplicationColumnFamily
operator|.
name|INFO
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
name|infoColumnFamily
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isSingleEntityRead
argument_list|()
operator|&&
name|fetchPartialColsFromInfoFamily
argument_list|()
condition|)
block|{
comment|// We can fetch only some of the columns from info family.
name|infoColFamilyList
operator|.
name|addFilter
argument_list|(
name|createFilterListForColsOfInfoFamily
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Exclude column prefixes in info column family which are not required
comment|// based on fields to retrieve.
name|excludeFieldsFromInfoColFamily
argument_list|(
name|infoColFamilyList
argument_list|)
expr_stmt|;
block|}
name|listBasedOnFields
operator|.
name|addFilter
argument_list|(
name|infoColFamilyList
argument_list|)
expr_stmt|;
name|updateFilterForConfsAndMetricsToRetrieve
argument_list|(
name|listBasedOnFields
argument_list|)
expr_stmt|;
return|return
name|listBasedOnFields
return|;
block|}
annotation|@
name|Override
DECL|method|getResult (Configuration hbaseConf, Connection conn, FilterList filterList)
specifier|protected
name|Result
name|getResult
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|FilterList
name|filterList
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineReaderContext
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
name|ApplicationRowKey
name|applicationRowKey
init|=
operator|new
name|ApplicationRowKey
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowRunId
argument_list|()
argument_list|,
name|context
operator|.
name|getAppId
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|applicationRowKey
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|rowKey
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|getDataToRetrieve
argument_list|()
operator|.
name|getMetricsLimit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterList
operator|!=
literal|null
operator|&&
operator|!
name|filterList
operator|.
name|getFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|get
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
block|}
return|return
name|getTable
argument_list|()
operator|.
name|getResult
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|get
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validateParams ()
specifier|protected
name|void
name|validateParams
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
argument_list|,
literal|"context shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getDataToRetrieve
argument_list|()
argument_list|,
literal|"data to retrieve shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getClusterId
argument_list|()
argument_list|,
literal|"clusterId shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getEntityType
argument_list|()
argument_list|,
literal|"entityType shouldn't be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSingleEntityRead
argument_list|()
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getAppId
argument_list|()
argument_list|,
literal|"appId shouldn't be null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getUserId
argument_list|()
argument_list|,
literal|"userId shouldn't be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|getContext
argument_list|()
operator|.
name|getFlowName
argument_list|()
argument_list|,
literal|"flowName shouldn't be null"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|augmentParams (Configuration hbaseConf, Connection conn)
specifier|protected
name|void
name|augmentParams
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isSingleEntityRead
argument_list|()
condition|)
block|{
comment|// Get flow context information from AppToFlow table.
name|defaultAugmentParams
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|// Add configs/metrics to fields to retrieve if confsToRetrieve and/or
comment|// metricsToRetrieve are specified.
name|getDataToRetrieve
argument_list|()
operator|.
name|addFieldsBasedOnConfsAndMetricsToRetrieve
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isSingleEntityRead
argument_list|()
condition|)
block|{
name|createFiltersIfNull
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getResults (Configuration hbaseConf, Connection conn, FilterList filterList)
specifier|protected
name|ResultScanner
name|getResults
parameter_list|(
name|Configuration
name|hbaseConf
parameter_list|,
name|Connection
name|conn
parameter_list|,
name|FilterList
name|filterList
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|TimelineReaderContext
name|context
init|=
name|getContext
argument_list|()
decl_stmt|;
comment|// Whether or not flowRunID is null doesn't matter, the
comment|// ApplicationRowKeyPrefix will do the right thing.
name|RowKeyPrefix
argument_list|<
name|ApplicationRowKey
argument_list|>
name|applicationRowKeyPrefix
init|=
operator|new
name|ApplicationRowKeyPrefix
argument_list|(
name|context
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|context
operator|.
name|getUserId
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|context
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|applicationRowKeyPrefix
operator|.
name|getRowKeyPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|FilterList
name|newList
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
name|newList
operator|.
name|addFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|getFilters
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filterList
operator|!=
literal|null
operator|&&
operator|!
name|filterList
operator|.
name|getFilters
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newList
operator|.
name|addFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
block|}
name|scan
operator|.
name|setFilter
argument_list|(
name|newList
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|getDataToRetrieve
argument_list|()
operator|.
name|getMetricsLimit
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getTable
argument_list|()
operator|.
name|getResultScanner
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|,
name|scan
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|parseEntity (Result result)
specifier|protected
name|TimelineEntity
name|parseEntity
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|entityId
init|=
name|ApplicationColumn
operator|.
name|ID
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setId
argument_list|(
name|entityId
argument_list|)
expr_stmt|;
name|TimelineEntityFilters
name|filters
init|=
name|getFilters
argument_list|()
decl_stmt|;
comment|// fetch created time
name|Long
name|createdTime
init|=
operator|(
name|Long
operator|)
name|ApplicationColumn
operator|.
name|CREATED_TIME
operator|.
name|readResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|entity
operator|.
name|setCreatedTime
argument_list|(
name|createdTime
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|Field
argument_list|>
name|fieldsToRetrieve
init|=
name|getDataToRetrieve
argument_list|()
operator|.
name|getFieldsToRetrieve
argument_list|()
decl_stmt|;
comment|// fetch is related to entities and match isRelatedTo filter. If isRelatedTo
comment|// filters do not match, entity would be dropped. We have to match filters
comment|// locally as relevant HBase filters to filter out rows on the basis of
comment|// isRelatedTo are not set in HBase scan.
name|boolean
name|checkIsRelatedTo
init|=
operator|!
name|isSingleEntityRead
argument_list|()
operator|&&
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
operator|||
name|checkIsRelatedTo
condition|)
block|{
name|readRelationship
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkIsRelatedTo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchIsRelatedTo
argument_list|(
name|entity
argument_list|,
name|filters
operator|.
name|getIsRelatedTo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|IS_RELATED_TO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getIsRelatedToEntities
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch relates to entities and match relatesTo filter. If relatesTo
comment|// filters do not match, entity would be dropped. We have to match filters
comment|// locally as relevant HBase filters to filter out rows on the basis of
comment|// relatesTo are not set in HBase scan.
name|boolean
name|checkRelatesTo
init|=
operator|!
name|isSingleEntityRead
argument_list|()
operator|&&
name|filters
operator|.
name|getRelatesTo
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getRelatesTo
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|RELATES_TO
argument_list|)
operator|||
name|checkRelatesTo
condition|)
block|{
name|readRelationship
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|RELATES_TO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkRelatesTo
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchRelatesTo
argument_list|(
name|entity
argument_list|,
name|filters
operator|.
name|getRelatesTo
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|RELATES_TO
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getRelatesToEntities
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch info if fieldsToRetrieve contains INFO or ALL.
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|readKeyValuePairs
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|INFO
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// fetch configs if fieldsToRetrieve contains CONFIGS or ALL.
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|CONFIGS
argument_list|)
condition|)
block|{
name|readKeyValuePairs
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|CONFIG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// fetch events and match event filters if they exist. If event filters do
comment|// not match, entity would be dropped. We have to match filters locally
comment|// as relevant HBase filters to filter out rows on the basis of events
comment|// are not set in HBase scan.
name|boolean
name|checkEvents
init|=
operator|!
name|isSingleEntityRead
argument_list|()
operator|&&
name|filters
operator|.
name|getEventFilters
argument_list|()
operator|!=
literal|null
operator|&&
name|filters
operator|.
name|getEventFilters
argument_list|()
operator|.
name|getFilterList
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|EVENTS
argument_list|)
operator|||
name|checkEvents
condition|)
block|{
name|readEvents
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|EVENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkEvents
operator|&&
operator|!
name|TimelineStorageUtils
operator|.
name|matchEventFilters
argument_list|(
name|entity
argument_list|,
name|filters
operator|.
name|getEventFilters
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|EVENTS
argument_list|)
condition|)
block|{
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|// fetch metrics if fieldsToRetrieve contains METRICS or ALL.
if|if
condition|(
name|hasField
argument_list|(
name|fieldsToRetrieve
argument_list|,
name|Field
operator|.
name|METRICS
argument_list|)
condition|)
block|{
name|readMetrics
argument_list|(
name|entity
argument_list|,
name|result
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|METRIC
argument_list|)
expr_stmt|;
block|}
return|return
name|entity
return|;
block|}
block|}
end_class

end_unit

