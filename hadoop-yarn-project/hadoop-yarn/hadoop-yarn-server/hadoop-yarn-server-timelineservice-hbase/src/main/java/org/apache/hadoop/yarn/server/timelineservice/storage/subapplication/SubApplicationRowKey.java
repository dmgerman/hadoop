begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.subapplication
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|subapplication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|KeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|KeyConverterToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|Separator
import|;
end_import

begin_comment
comment|/**  * Represents a rowkey for the sub app table.  */
end_comment

begin_class
DECL|class|SubApplicationRowKey
specifier|public
class|class
name|SubApplicationRowKey
block|{
DECL|field|subAppUserId
specifier|private
specifier|final
name|String
name|subAppUserId
decl_stmt|;
DECL|field|clusterId
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
DECL|field|entityType
specifier|private
specifier|final
name|String
name|entityType
decl_stmt|;
DECL|field|entityIdPrefix
specifier|private
specifier|final
name|Long
name|entityIdPrefix
decl_stmt|;
DECL|field|entityId
specifier|private
specifier|final
name|String
name|entityId
decl_stmt|;
DECL|field|userId
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
DECL|field|subAppRowKeyConverter
specifier|private
specifier|final
name|SubApplicationRowKeyConverter
name|subAppRowKeyConverter
init|=
operator|new
name|SubApplicationRowKeyConverter
argument_list|()
decl_stmt|;
DECL|method|SubApplicationRowKey (String subAppUserId, String clusterId, String entityType, Long entityIdPrefix, String entityId, String userId)
specifier|public
name|SubApplicationRowKey
parameter_list|(
name|String
name|subAppUserId
parameter_list|,
name|String
name|clusterId
parameter_list|,
name|String
name|entityType
parameter_list|,
name|Long
name|entityIdPrefix
parameter_list|,
name|String
name|entityId
parameter_list|,
name|String
name|userId
parameter_list|)
block|{
name|this
operator|.
name|subAppUserId
operator|=
name|subAppUserId
expr_stmt|;
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|entityType
operator|=
name|entityType
expr_stmt|;
name|this
operator|.
name|entityIdPrefix
operator|=
name|entityIdPrefix
expr_stmt|;
name|this
operator|.
name|entityId
operator|=
name|entityId
expr_stmt|;
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
block|}
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
DECL|method|getSubAppUserId ()
specifier|public
name|String
name|getSubAppUserId
parameter_list|()
block|{
return|return
name|subAppUserId
return|;
block|}
DECL|method|getEntityType ()
specifier|public
name|String
name|getEntityType
parameter_list|()
block|{
return|return
name|entityType
return|;
block|}
DECL|method|getEntityId ()
specifier|public
name|String
name|getEntityId
parameter_list|()
block|{
return|return
name|entityId
return|;
block|}
DECL|method|getEntityIdPrefix ()
specifier|public
name|Long
name|getEntityIdPrefix
parameter_list|()
block|{
return|return
name|entityIdPrefix
return|;
block|}
DECL|method|getUserId ()
specifier|public
name|String
name|getUserId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
comment|/**    * Constructs a row key for the sub app table as follows:    * {@code subAppUserId!clusterId!entityType    * !entityPrefix!entityId!userId}.    * Typically used while querying a specific sub app.    *    * subAppUserId is usually the doAsUser.    * userId is the yarn user that the AM runs as.    *    * @return byte array with the row key.    */
DECL|method|getRowKey ()
specifier|public
name|byte
index|[]
name|getRowKey
parameter_list|()
block|{
return|return
name|subAppRowKeyConverter
operator|.
name|encode
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Given the raw row key as bytes, returns the row key as an object.    *    * @param rowKey byte representation of row key.    * @return An<cite>SubApplicationRowKey</cite> object.    */
DECL|method|parseRowKey (byte[] rowKey)
specifier|public
specifier|static
name|SubApplicationRowKey
name|parseRowKey
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
return|return
operator|new
name|SubApplicationRowKeyConverter
argument_list|()
operator|.
name|decode
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
comment|/**    * Constructs a row key for the sub app table as follows:    *<p>    * {@code subAppUserId!clusterId!    * entityType!entityIdPrefix!entityId!userId}.    *    * subAppUserId is usually the doAsUser.    * userId is the yarn user that that the AM runs as.    *    *</p>    *    * @return String representation of row key.    */
DECL|method|getRowKeyAsString ()
specifier|public
name|String
name|getRowKeyAsString
parameter_list|()
block|{
return|return
name|subAppRowKeyConverter
operator|.
name|encodeAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Given the encoded row key as string, returns the row key as an object.    *    * @param encodedRowKey String representation of row key.    * @return A<cite>SubApplicationRowKey</cite> object.    */
DECL|method|parseRowKeyFromString ( String encodedRowKey)
specifier|public
specifier|static
name|SubApplicationRowKey
name|parseRowKeyFromString
parameter_list|(
name|String
name|encodedRowKey
parameter_list|)
block|{
return|return
operator|new
name|SubApplicationRowKeyConverter
argument_list|()
operator|.
name|decodeFromString
argument_list|(
name|encodedRowKey
argument_list|)
return|;
block|}
comment|/**    * Encodes and decodes row key for sub app table.    * The row key is of the form :    * subAppUserId!clusterId!flowRunId!appId!entityType!entityId!userId    *    * subAppUserId is usually the doAsUser.    * userId is the yarn user that the AM runs as.    *    *<p>    */
DECL|class|SubApplicationRowKeyConverter
specifier|final
specifier|private
specifier|static
class|class
name|SubApplicationRowKeyConverter
implements|implements
name|KeyConverter
argument_list|<
name|SubApplicationRowKey
argument_list|>
implements|,
name|KeyConverterToString
argument_list|<
name|SubApplicationRowKey
argument_list|>
block|{
DECL|method|SubApplicationRowKeyConverter ()
specifier|private
name|SubApplicationRowKeyConverter
parameter_list|()
block|{     }
comment|/**      * sub app row key is of the form      * subAppUserId!clusterId!entityType!entityPrefix!entityId!userId      * w. each segment separated by !.      *      * subAppUserId is usually the doAsUser.      * userId is the yarn user that the AM runs as.      *      * The sizes below indicate sizes of each one of these      * segments in sequence. clusterId, subAppUserId, entityType,      * entityId and userId are strings.      * entity prefix is a long hence 8 bytes in size. Strings are      * variable in size (i.e. end whenever separator is encountered).      * This is used while decoding and helps in determining where to split.      */
DECL|field|SEGMENT_SIZES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|SEGMENT_SIZES
init|=
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Bytes
operator|.
name|SIZEOF_LONG
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
decl_stmt|;
comment|/*      * (non-Javadoc)      *      * Encodes SubApplicationRowKey object into a byte array with each      * component/field in SubApplicationRowKey separated by      * Separator#QUALIFIERS.      * This leads to an sub app table row key of the form      * subAppUserId!clusterId!entityType!entityPrefix!entityId!userId      *      * subAppUserId is usually the doAsUser.      * userId is the yarn user that the AM runs as.      *      * If entityType in passed SubApplicationRowKey object is null (and the      * fields preceding it are not null i.e. clusterId, subAppUserId), this      * returns a row key prefix of the form subAppUserId!clusterId!      * If entityId in SubApplicationRowKey is null      * (other components are not null), this returns a row key prefix      * of the form subAppUserId!clusterId!entityType!      *      * @see org.apache.hadoop.yarn.server.timelineservice.storage.common      * .KeyConverter#encode(java.lang.Object)      */
annotation|@
name|Override
DECL|method|encode (SubApplicationRowKey rowKey)
specifier|public
name|byte
index|[]
name|encode
parameter_list|(
name|SubApplicationRowKey
name|rowKey
parameter_list|)
block|{
name|byte
index|[]
name|subAppUser
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getSubAppUserId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cluster
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|first
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|subAppUser
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKey
operator|.
name|getEntityType
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|first
return|;
block|}
name|byte
index|[]
name|entityType
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getEntityType
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKey
operator|.
name|getEntityIdPrefix
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|first
argument_list|,
name|entityType
argument_list|,
name|Separator
operator|.
name|EMPTY_BYTES
argument_list|)
return|;
block|}
name|byte
index|[]
name|entityIdPrefix
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowKey
operator|.
name|getEntityIdPrefix
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKey
operator|.
name|getEntityId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|first
argument_list|,
name|entityType
argument_list|,
name|entityIdPrefix
argument_list|,
name|Separator
operator|.
name|EMPTY_BYTES
argument_list|)
return|;
block|}
name|byte
index|[]
name|entityId
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getEntityId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|userId
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getUserId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|second
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|entityType
argument_list|,
name|entityIdPrefix
argument_list|,
name|entityId
argument_list|,
name|userId
argument_list|)
decl_stmt|;
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * Decodes a sub application row key of the form      * subAppUserId!clusterId!entityType!entityPrefix!entityId!userId      *      * subAppUserId is usually the doAsUser.      * userId is the yarn user that the AM runs as.      *      * represented in byte format      * and converts it into an SubApplicationRowKey object.      *      * @see org.apache.hadoop.yarn.server.timelineservice.storage.common      * .KeyConverter#decode(byte[])      */
annotation|@
name|Override
DECL|method|decode (byte[] rowKey)
specifier|public
name|SubApplicationRowKey
name|decode
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|rowKeyComponents
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|rowKey
argument_list|,
name|SEGMENT_SIZES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKeyComponents
operator|.
name|length
operator|!=
literal|6
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the row key is not valid for "
operator|+
literal|"a sub app"
argument_list|)
throw|;
block|}
name|String
name|subAppUserId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
name|String
name|clusterId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
name|String
name|entityType
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
name|Long
name|entityPrefixId
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|rowKeyComponents
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|String
name|entityId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|4
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|5
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
return|return
operator|new
name|SubApplicationRowKey
argument_list|(
name|subAppUserId
argument_list|,
name|clusterId
argument_list|,
name|entityType
argument_list|,
name|entityPrefixId
argument_list|,
name|entityId
argument_list|,
name|userId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|encodeAsString (SubApplicationRowKey key)
specifier|public
name|String
name|encodeAsString
parameter_list|(
name|SubApplicationRowKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|subAppUserId
operator|==
literal|null
operator|||
name|key
operator|.
name|clusterId
operator|==
literal|null
operator|||
name|key
operator|.
name|entityType
operator|==
literal|null
operator|||
name|key
operator|.
name|entityIdPrefix
operator|==
literal|null
operator|||
name|key
operator|.
name|entityId
operator|==
literal|null
operator|||
name|key
operator|.
name|userId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
return|return
name|TimelineReaderUtils
operator|.
name|joinAndEscapeStrings
argument_list|(
operator|new
name|String
index|[]
block|{
name|key
operator|.
name|subAppUserId
block|,
name|key
operator|.
name|clusterId
block|,
name|key
operator|.
name|entityType
block|,
name|key
operator|.
name|entityIdPrefix
operator|.
name|toString
argument_list|()
block|,
name|key
operator|.
name|entityId
block|,
name|key
operator|.
name|userId
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decodeFromString (String encodedRowKey)
specifier|public
name|SubApplicationRowKey
name|decodeFromString
parameter_list|(
name|String
name|encodedRowKey
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|TimelineReaderUtils
operator|.
name|split
argument_list|(
name|encodedRowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|==
literal|null
operator|||
name|split
operator|.
name|size
argument_list|()
operator|!=
literal|6
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid row key for sub app table."
argument_list|)
throw|;
block|}
name|Long
name|entityIdPrefix
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SubApplicationRowKey
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|entityIdPrefix
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

