begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|ApplicationEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|application
operator|.
name|ApplicationTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|apptoflow
operator|.
name|AppToFlowTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|ColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|EventColumnName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|HBaseTimelineStorageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|KeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|LongKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|Separator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|StringKeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|TypedBufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|entity
operator|.
name|EntityTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|AggregationCompactionDimension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|AggregationOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowActivityColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowActivityRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowActivityTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunColumnPrefix
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunRowKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
operator|.
name|FlowRunTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This implements a hbase based backend for storing the timeline entity  * information.  * It writes to multiple tables at the backend  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HBaseTimelineWriterImpl
specifier|public
class|class
name|HBaseTimelineWriterImpl
extends|extends
name|AbstractService
implements|implements
name|TimelineWriter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HBaseTimelineWriterImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conn
specifier|private
name|Connection
name|conn
decl_stmt|;
DECL|field|entityTable
specifier|private
name|TypedBufferedMutator
argument_list|<
name|EntityTable
argument_list|>
name|entityTable
decl_stmt|;
DECL|field|appToFlowTable
specifier|private
name|TypedBufferedMutator
argument_list|<
name|AppToFlowTable
argument_list|>
name|appToFlowTable
decl_stmt|;
DECL|field|applicationTable
specifier|private
name|TypedBufferedMutator
argument_list|<
name|ApplicationTable
argument_list|>
name|applicationTable
decl_stmt|;
DECL|field|flowActivityTable
specifier|private
name|TypedBufferedMutator
argument_list|<
name|FlowActivityTable
argument_list|>
name|flowActivityTable
decl_stmt|;
DECL|field|flowRunTable
specifier|private
name|TypedBufferedMutator
argument_list|<
name|FlowRunTable
argument_list|>
name|flowRunTable
decl_stmt|;
comment|/**    * Used to convert strings key components to and from storage format.    */
DECL|field|stringKeyConverter
specifier|private
specifier|final
name|KeyConverter
argument_list|<
name|String
argument_list|>
name|stringKeyConverter
init|=
operator|new
name|StringKeyConverter
argument_list|()
decl_stmt|;
comment|/**    * Used to convert Long key components to and from storage format.    */
DECL|field|longKeyConverter
specifier|private
specifier|final
name|KeyConverter
argument_list|<
name|Long
argument_list|>
name|longKeyConverter
init|=
operator|new
name|LongKeyConverter
argument_list|()
decl_stmt|;
DECL|method|HBaseTimelineWriterImpl ()
specifier|public
name|HBaseTimelineWriterImpl
parameter_list|()
block|{
name|super
argument_list|(
name|HBaseTimelineWriterImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * initializes the hbase connection to write to the entity table.    */
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|hbaseConf
init|=
name|HBaseTimelineStorageUtils
operator|.
name|getTimelineServiceHBaseConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
name|entityTable
operator|=
operator|new
name|EntityTable
argument_list|()
operator|.
name|getTableMutator
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|appToFlowTable
operator|=
operator|new
name|AppToFlowTable
argument_list|()
operator|.
name|getTableMutator
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|applicationTable
operator|=
operator|new
name|ApplicationTable
argument_list|()
operator|.
name|getTableMutator
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|flowRunTable
operator|=
operator|new
name|FlowRunTable
argument_list|()
operator|.
name|getTableMutator
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
name|flowActivityTable
operator|=
operator|new
name|FlowActivityTable
argument_list|()
operator|.
name|getTableMutator
argument_list|(
name|hbaseConf
argument_list|,
name|conn
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stores the entire information in TimelineEntities to the timeline store.    */
annotation|@
name|Override
DECL|method|write (String clusterId, String userId, String flowName, String flowVersion, long flowRunId, String appId, TimelineEntities data)
specifier|public
name|TimelineWriteResponse
name|write
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|long
name|flowRunId
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntities
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|TimelineWriteResponse
name|putStatus
init|=
operator|new
name|TimelineWriteResponse
argument_list|()
decl_stmt|;
comment|// defensive coding to avoid NPE during row key construction
if|if
condition|(
operator|(
name|flowName
operator|==
literal|null
operator|)
operator|||
operator|(
name|appId
operator|==
literal|null
operator|)
operator|||
operator|(
name|clusterId
operator|==
literal|null
operator|)
operator|||
operator|(
name|userId
operator|==
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Found null for one of: flowName="
operator|+
name|flowName
operator|+
literal|" appId="
operator|+
name|appId
operator|+
literal|" userId="
operator|+
name|userId
operator|+
literal|" clusterId="
operator|+
name|clusterId
operator|+
literal|" . Not proceeding with writing to hbase"
argument_list|)
expr_stmt|;
return|return
name|putStatus
return|;
block|}
for|for
control|(
name|TimelineEntity
name|te
range|:
name|data
operator|.
name|getEntities
argument_list|()
control|)
block|{
comment|// a set can have at most 1 null
if|if
condition|(
name|te
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// if the entity is the application, the destination is the application
comment|// table
name|boolean
name|isApplication
init|=
name|ApplicationEntity
operator|.
name|isApplicationEntity
argument_list|(
name|te
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowKey
decl_stmt|;
if|if
condition|(
name|isApplication
condition|)
block|{
name|ApplicationRowKey
name|applicationRowKey
init|=
operator|new
name|ApplicationRowKey
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|rowKey
operator|=
name|applicationRowKey
operator|.
name|getRowKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|EntityRowKey
name|entityRowKey
init|=
operator|new
name|EntityRowKey
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|,
name|appId
argument_list|,
name|te
operator|.
name|getType
argument_list|()
argument_list|,
name|te
operator|.
name|getIdPrefix
argument_list|()
argument_list|,
name|te
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|rowKey
operator|=
name|entityRowKey
operator|.
name|getRowKey
argument_list|()
expr_stmt|;
block|}
name|storeInfo
argument_list|(
name|rowKey
argument_list|,
name|te
argument_list|,
name|flowVersion
argument_list|,
name|isApplication
argument_list|)
expr_stmt|;
name|storeEvents
argument_list|(
name|rowKey
argument_list|,
name|te
operator|.
name|getEvents
argument_list|()
argument_list|,
name|isApplication
argument_list|)
expr_stmt|;
name|storeConfig
argument_list|(
name|rowKey
argument_list|,
name|te
operator|.
name|getConfigs
argument_list|()
argument_list|,
name|isApplication
argument_list|)
expr_stmt|;
name|storeMetrics
argument_list|(
name|rowKey
argument_list|,
name|te
operator|.
name|getMetrics
argument_list|()
argument_list|,
name|isApplication
argument_list|)
expr_stmt|;
name|storeRelations
argument_list|(
name|rowKey
argument_list|,
name|te
argument_list|,
name|isApplication
argument_list|)
expr_stmt|;
if|if
condition|(
name|isApplication
condition|)
block|{
name|TimelineEvent
name|event
init|=
name|ApplicationEntity
operator|.
name|getApplicationEvent
argument_list|(
name|te
argument_list|,
name|ApplicationMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
decl_stmt|;
name|FlowRunRowKey
name|flowRunRowKey
init|=
operator|new
name|FlowRunRowKey
argument_list|(
name|clusterId
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
name|flowRunId
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|AppToFlowRowKey
name|appToFlowRowKey
init|=
operator|new
name|AppToFlowRowKey
argument_list|(
name|clusterId
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|onApplicationCreated
argument_list|(
name|flowRunRowKey
argument_list|,
name|appToFlowRowKey
argument_list|,
name|appId
argument_list|,
name|userId
argument_list|,
name|flowVersion
argument_list|,
name|te
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if it's an application entity, store metrics
name|storeFlowMetricsAppRunning
argument_list|(
name|flowRunRowKey
argument_list|,
name|appId
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// if application has finished, store it's finish time and write final
comment|// values of all metrics
name|event
operator|=
name|ApplicationEntity
operator|.
name|getApplicationEvent
argument_list|(
name|te
argument_list|,
name|ApplicationMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|onApplicationFinished
argument_list|(
name|flowRunRowKey
argument_list|,
name|flowVersion
argument_list|,
name|appId
argument_list|,
name|te
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|putStatus
return|;
block|}
DECL|method|onApplicationCreated (FlowRunRowKey flowRunRowKey, AppToFlowRowKey appToFlowRowKey, String appId, String userId, String flowVersion, TimelineEntity te, long appCreatedTimeStamp)
specifier|private
name|void
name|onApplicationCreated
parameter_list|(
name|FlowRunRowKey
name|flowRunRowKey
parameter_list|,
name|AppToFlowRowKey
name|appToFlowRowKey
parameter_list|,
name|String
name|appId
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|TimelineEntity
name|te
parameter_list|,
name|long
name|appCreatedTimeStamp
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|flowName
init|=
name|flowRunRowKey
operator|.
name|getFlowName
argument_list|()
decl_stmt|;
name|Long
name|flowRunId
init|=
name|flowRunRowKey
operator|.
name|getFlowRunId
argument_list|()
decl_stmt|;
comment|// store in App to flow table
name|byte
index|[]
name|rowKey
init|=
name|appToFlowRowKey
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|AppToFlowColumn
operator|.
name|FLOW_ID
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|appToFlowTable
argument_list|,
literal|null
argument_list|,
name|flowName
argument_list|)
expr_stmt|;
name|AppToFlowColumn
operator|.
name|FLOW_RUN_ID
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|appToFlowTable
argument_list|,
literal|null
argument_list|,
name|flowRunId
argument_list|)
expr_stmt|;
name|AppToFlowColumn
operator|.
name|USER_ID
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|appToFlowTable
argument_list|,
literal|null
argument_list|,
name|userId
argument_list|)
expr_stmt|;
comment|// store in flow run table
name|storeAppCreatedInFlowRunTable
argument_list|(
name|flowRunRowKey
argument_list|,
name|appId
argument_list|,
name|te
argument_list|)
expr_stmt|;
comment|// store in flow activity table
name|byte
index|[]
name|flowActivityRowKeyBytes
init|=
operator|new
name|FlowActivityRowKey
argument_list|(
name|flowRunRowKey
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|appCreatedTimeStamp
argument_list|,
name|flowRunRowKey
operator|.
name|getUserId
argument_list|()
argument_list|,
name|flowName
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|longKeyConverter
operator|.
name|encode
argument_list|(
name|flowRunRowKey
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
decl_stmt|;
name|FlowActivityColumnPrefix
operator|.
name|RUN_ID
operator|.
name|store
argument_list|(
name|flowActivityRowKeyBytes
argument_list|,
name|flowActivityTable
argument_list|,
name|qualifier
argument_list|,
literal|null
argument_list|,
name|flowVersion
argument_list|,
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|getAttribute
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * updates the {@link FlowRunTable} with Application Created information    */
DECL|method|storeAppCreatedInFlowRunTable (FlowRunRowKey flowRunRowKey, String appId, TimelineEntity te)
specifier|private
name|void
name|storeAppCreatedInFlowRunTable
parameter_list|(
name|FlowRunRowKey
name|flowRunRowKey
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntity
name|te
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowKey
init|=
name|flowRunRowKey
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|FlowRunColumn
operator|.
name|MIN_START_TIME
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|flowRunTable
argument_list|,
literal|null
argument_list|,
name|te
operator|.
name|getCreatedTime
argument_list|()
argument_list|,
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|getAttribute
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * updates the {@link FlowRunTable} and {@link FlowActivityTable} when an    * application has finished    */
DECL|method|onApplicationFinished (FlowRunRowKey flowRunRowKey, String flowVersion, String appId, TimelineEntity te, long appFinishedTimeStamp)
specifier|private
name|void
name|onApplicationFinished
parameter_list|(
name|FlowRunRowKey
name|flowRunRowKey
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntity
name|te
parameter_list|,
name|long
name|appFinishedTimeStamp
parameter_list|)
throws|throws
name|IOException
block|{
comment|// store in flow run table
name|storeAppFinishedInFlowRunTable
argument_list|(
name|flowRunRowKey
argument_list|,
name|appId
argument_list|,
name|te
argument_list|,
name|appFinishedTimeStamp
argument_list|)
expr_stmt|;
comment|// indicate in the flow activity table that the app has finished
name|byte
index|[]
name|rowKey
init|=
operator|new
name|FlowActivityRowKey
argument_list|(
name|flowRunRowKey
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|appFinishedTimeStamp
argument_list|,
name|flowRunRowKey
operator|.
name|getUserId
argument_list|()
argument_list|,
name|flowRunRowKey
operator|.
name|getFlowName
argument_list|()
argument_list|)
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|longKeyConverter
operator|.
name|encode
argument_list|(
name|flowRunRowKey
operator|.
name|getFlowRunId
argument_list|()
argument_list|)
decl_stmt|;
name|FlowActivityColumnPrefix
operator|.
name|RUN_ID
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|flowActivityTable
argument_list|,
name|qualifier
argument_list|,
literal|null
argument_list|,
name|flowVersion
argument_list|,
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|getAttribute
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Update the {@link FlowRunTable} with Application Finished information    */
DECL|method|storeAppFinishedInFlowRunTable (FlowRunRowKey flowRunRowKey, String appId, TimelineEntity te, long appFinishedTimeStamp)
specifier|private
name|void
name|storeAppFinishedInFlowRunTable
parameter_list|(
name|FlowRunRowKey
name|flowRunRowKey
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntity
name|te
parameter_list|,
name|long
name|appFinishedTimeStamp
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowKey
init|=
name|flowRunRowKey
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|Attribute
name|attributeAppId
init|=
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|getAttribute
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|FlowRunColumn
operator|.
name|MAX_END_TIME
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|flowRunTable
argument_list|,
literal|null
argument_list|,
name|appFinishedTimeStamp
argument_list|,
name|attributeAppId
argument_list|)
expr_stmt|;
comment|// store the final value of metrics since application has finished
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|te
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|storeFlowMetrics
argument_list|(
name|rowKey
argument_list|,
name|metrics
argument_list|,
name|attributeAppId
argument_list|,
name|AggregationOperation
operator|.
name|SUM_FINAL
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Updates the {@link FlowRunTable} with Application Metrics    */
DECL|method|storeFlowMetricsAppRunning (FlowRunRowKey flowRunRowKey, String appId, TimelineEntity te)
specifier|private
name|void
name|storeFlowMetricsAppRunning
parameter_list|(
name|FlowRunRowKey
name|flowRunRowKey
parameter_list|,
name|String
name|appId
parameter_list|,
name|TimelineEntity
name|te
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|te
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|rowKey
init|=
name|flowRunRowKey
operator|.
name|getRowKey
argument_list|()
decl_stmt|;
name|storeFlowMetrics
argument_list|(
name|rowKey
argument_list|,
name|metrics
argument_list|,
name|AggregationCompactionDimension
operator|.
name|APPLICATION_ID
operator|.
name|getAttribute
argument_list|(
name|appId
argument_list|)
argument_list|,
name|AggregationOperation
operator|.
name|SUM
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|storeFlowMetrics (byte[] rowKey, Set<TimelineMetric> metrics, Attribute... attributes)
specifier|private
name|void
name|storeFlowMetrics
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
parameter_list|,
name|Attribute
modifier|...
name|attributes
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
name|byte
index|[]
name|metricColumnQualifier
init|=
name|stringKeyConverter
operator|.
name|encode
argument_list|(
name|metric
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|timeseries
init|=
name|metric
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|timeseriesEntry
range|:
name|timeseries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Long
name|timestamp
init|=
name|timeseriesEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|FlowRunColumnPrefix
operator|.
name|METRIC
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|flowRunTable
argument_list|,
name|metricColumnQualifier
argument_list|,
name|timestamp
argument_list|,
name|timeseriesEntry
operator|.
name|getValue
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|storeRelations (byte[] rowKey, TimelineEntity te, boolean isApplication)
specifier|private
name|void
name|storeRelations
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|TimelineEntity
name|te
parameter_list|,
name|boolean
name|isApplication
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isApplication
condition|)
block|{
name|storeRelations
argument_list|(
name|rowKey
argument_list|,
name|te
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|,
name|applicationTable
argument_list|)
expr_stmt|;
name|storeRelations
argument_list|(
name|rowKey
argument_list|,
name|te
operator|.
name|getRelatesToEntities
argument_list|()
argument_list|,
name|ApplicationColumnPrefix
operator|.
name|RELATES_TO
argument_list|,
name|applicationTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|storeRelations
argument_list|(
name|rowKey
argument_list|,
name|te
operator|.
name|getIsRelatedToEntities
argument_list|()
argument_list|,
name|EntityColumnPrefix
operator|.
name|IS_RELATED_TO
argument_list|,
name|entityTable
argument_list|)
expr_stmt|;
name|storeRelations
argument_list|(
name|rowKey
argument_list|,
name|te
operator|.
name|getRelatesToEntities
argument_list|()
argument_list|,
name|EntityColumnPrefix
operator|.
name|RELATES_TO
argument_list|,
name|entityTable
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stores the Relations from the {@linkplain TimelineEntity} object.    */
DECL|method|storeRelations (byte[] rowKey, Map<String, Set<String>> connectedEntities, ColumnPrefix<T> columnPrefix, TypedBufferedMutator<T> table)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|storeRelations
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|connectedEntities
parameter_list|,
name|ColumnPrefix
argument_list|<
name|T
argument_list|>
name|columnPrefix
parameter_list|,
name|TypedBufferedMutator
argument_list|<
name|T
argument_list|>
name|table
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|connectedEntity
range|:
name|connectedEntities
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// id3?id4?id5
name|String
name|compoundValue
init|=
name|Separator
operator|.
name|VALUES
operator|.
name|joinEncoded
argument_list|(
name|connectedEntity
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|columnPrefix
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|table
argument_list|,
name|stringKeyConverter
operator|.
name|encode
argument_list|(
name|connectedEntity
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|compoundValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Stores information from the {@linkplain TimelineEntity} object.    */
DECL|method|storeInfo (byte[] rowKey, TimelineEntity te, String flowVersion, boolean isApplication)
specifier|private
name|void
name|storeInfo
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|TimelineEntity
name|te
parameter_list|,
name|String
name|flowVersion
parameter_list|,
name|boolean
name|isApplication
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isApplication
condition|)
block|{
name|ApplicationColumn
operator|.
name|ID
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
literal|null
argument_list|,
name|te
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationColumn
operator|.
name|CREATED_TIME
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
literal|null
argument_list|,
name|te
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationColumn
operator|.
name|FLOW_VERSION
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
literal|null
argument_list|,
name|flowVersion
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
init|=
name|te
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|info
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApplicationColumnPrefix
operator|.
name|INFO
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
name|stringKeyConverter
operator|.
name|encode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|EntityColumn
operator|.
name|ID
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
literal|null
argument_list|,
name|te
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|EntityColumn
operator|.
name|TYPE
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
literal|null
argument_list|,
name|te
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|EntityColumn
operator|.
name|CREATED_TIME
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
literal|null
argument_list|,
name|te
operator|.
name|getCreatedTime
argument_list|()
argument_list|)
expr_stmt|;
name|EntityColumn
operator|.
name|FLOW_VERSION
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
literal|null
argument_list|,
name|flowVersion
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
init|=
name|te
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|info
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityColumnPrefix
operator|.
name|INFO
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|stringKeyConverter
operator|.
name|encode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * stores the config information from {@linkplain TimelineEntity}.    */
DECL|method|storeConfig (byte[] rowKey, Map<String, String> config, boolean isApplication)
specifier|private
name|void
name|storeConfig
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|config
parameter_list|,
name|boolean
name|isApplication
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|configKey
init|=
name|stringKeyConverter
operator|.
name|encode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isApplication
condition|)
block|{
name|ApplicationColumnPrefix
operator|.
name|CONFIG
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
name|configKey
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EntityColumnPrefix
operator|.
name|CONFIG
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|configKey
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * stores the {@linkplain TimelineMetric} information from the    * {@linkplain TimelineEvent} object.    */
DECL|method|storeMetrics (byte[] rowKey, Set<TimelineMetric> metrics, boolean isApplication)
specifier|private
name|void
name|storeMetrics
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
parameter_list|,
name|boolean
name|isApplication
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
name|byte
index|[]
name|metricColumnQualifier
init|=
name|stringKeyConverter
operator|.
name|encode
argument_list|(
name|metric
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|timeseries
init|=
name|metric
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|timeseriesEntry
range|:
name|timeseries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Long
name|timestamp
init|=
name|timeseriesEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|isApplication
condition|)
block|{
name|ApplicationColumnPrefix
operator|.
name|METRIC
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
name|metricColumnQualifier
argument_list|,
name|timestamp
argument_list|,
name|timeseriesEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EntityColumnPrefix
operator|.
name|METRIC
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|metricColumnQualifier
argument_list|,
name|timestamp
argument_list|,
name|timeseriesEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Stores the events from the {@linkplain TimelineEvent} object.    */
DECL|method|storeEvents (byte[] rowKey, Set<TimelineEvent> events, boolean isApplication)
specifier|private
name|void
name|storeEvents
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|Set
argument_list|<
name|TimelineEvent
argument_list|>
name|events
parameter_list|,
name|boolean
name|isApplication
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|String
name|eventId
init|=
name|event
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventId
operator|!=
literal|null
condition|)
block|{
name|long
name|eventTimestamp
init|=
name|event
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
comment|// if the timestamp is not set, use the current timestamp
if|if
condition|(
name|eventTimestamp
operator|==
name|TimelineEvent
operator|.
name|INVALID_TIMESTAMP
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"timestamp is not set for event "
operator|+
name|eventId
operator|+
literal|"! Using the current timestamp"
argument_list|)
expr_stmt|;
name|eventTimestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|eventInfo
operator|==
literal|null
operator|)
operator|||
operator|(
name|eventInfo
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|byte
index|[]
name|columnQualifierBytes
init|=
operator|new
name|EventColumnName
argument_list|(
name|eventId
argument_list|,
name|eventTimestamp
argument_list|,
literal|null
argument_list|)
operator|.
name|getColumnQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|isApplication
condition|)
block|{
name|ApplicationColumnPrefix
operator|.
name|EVENT
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
name|columnQualifierBytes
argument_list|,
literal|null
argument_list|,
name|Separator
operator|.
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EntityColumnPrefix
operator|.
name|EVENT
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|columnQualifierBytes
argument_list|,
literal|null
argument_list|,
name|Separator
operator|.
name|EMPTY_BYTES
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|info
range|:
name|eventInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// eventId=infoKey
name|byte
index|[]
name|columnQualifierBytes
init|=
operator|new
name|EventColumnName
argument_list|(
name|eventId
argument_list|,
name|eventTimestamp
argument_list|,
name|info
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getColumnQualifier
argument_list|()
decl_stmt|;
if|if
condition|(
name|isApplication
condition|)
block|{
name|ApplicationColumnPrefix
operator|.
name|EVENT
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|applicationTable
argument_list|,
name|columnQualifierBytes
argument_list|,
literal|null
argument_list|,
name|info
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|EntityColumnPrefix
operator|.
name|EVENT
operator|.
name|store
argument_list|(
name|rowKey
argument_list|,
name|entityTable
argument_list|,
name|columnQualifierBytes
argument_list|,
literal|null
argument_list|,
name|info
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for info: eventInfo
block|}
block|}
block|}
block|}
comment|// event : events
block|}
block|}
comment|/*    * (non-Javadoc)    *    * @see    * org.apache.hadoop.yarn.server.timelineservice.storage    * .TimelineWriter#aggregate    * (org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity,    * org.apache    * .hadoop.yarn.server.timelineservice.storage.TimelineAggregationTrack)    */
annotation|@
name|Override
DECL|method|aggregate (TimelineEntity data, TimelineAggregationTrack track)
specifier|public
name|TimelineWriteResponse
name|aggregate
parameter_list|(
name|TimelineEntity
name|data
parameter_list|,
name|TimelineAggregationTrack
name|track
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/*    * (non-Javadoc)    *    * @see    * org.apache.hadoop.yarn.server.timelineservice.storage.TimelineWriter#flush    * ()    */
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// flush all buffered mutators
name|entityTable
operator|.
name|flush
argument_list|()
expr_stmt|;
name|appToFlowTable
operator|.
name|flush
argument_list|()
expr_stmt|;
name|applicationTable
operator|.
name|flush
argument_list|()
expr_stmt|;
name|flowRunTable
operator|.
name|flush
argument_list|()
expr_stmt|;
name|flowActivityTable
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * close the hbase connections The close APIs perform flushing and release any    * resources held.    */
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|entityTable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing the entity table"
argument_list|)
expr_stmt|;
comment|// The close API performs flushing and releases any resources held
name|entityTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|appToFlowTable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing the app_flow table"
argument_list|)
expr_stmt|;
comment|// The close API performs flushing and releases any resources held
name|appToFlowTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|applicationTable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing the application table"
argument_list|)
expr_stmt|;
name|applicationTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flowRunTable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing the flow run table"
argument_list|)
expr_stmt|;
comment|// The close API performs flushing and releases any resources held
name|flowRunTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|flowActivityTable
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing the flowActivityTable table"
argument_list|)
expr_stmt|;
comment|// The close API performs flushing and releases any resources held
name|flowActivityTable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing the hbase Connection"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

