begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.flow
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|flow
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|HBaseTimelineSchemaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|KeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|LongConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|KeyConverterToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|Separator
import|;
end_import

begin_comment
comment|/**  * Represents a rowkey for the flow activity table.  */
end_comment

begin_class
DECL|class|FlowActivityRowKey
specifier|public
class|class
name|FlowActivityRowKey
block|{
DECL|field|clusterId
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
DECL|field|dayTs
specifier|private
specifier|final
name|Long
name|dayTs
decl_stmt|;
DECL|field|userId
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
DECL|field|flowName
specifier|private
specifier|final
name|String
name|flowName
decl_stmt|;
specifier|private
specifier|final
name|FlowActivityRowKeyConverter
DECL|field|flowActivityRowKeyConverter
name|flowActivityRowKeyConverter
init|=
operator|new
name|FlowActivityRowKeyConverter
argument_list|()
decl_stmt|;
comment|/**    * @param clusterId identifying the cluster    * @param dayTs to be converted to the top of the day timestamp    * @param userId identifying user    * @param flowName identifying the flow    */
DECL|method|FlowActivityRowKey (String clusterId, Long dayTs, String userId, String flowName)
specifier|public
name|FlowActivityRowKey
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|Long
name|dayTs
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|)
block|{
name|this
argument_list|(
name|clusterId
argument_list|,
name|dayTs
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param clusterId identifying the cluster    * @param timestamp when the flow activity happened. May be converted to the    *          top of the day depending on the convertDayTsToTopOfDay argument.    * @param userId identifying user    * @param flowName identifying the flow    * @param convertDayTsToTopOfDay if true and timestamp isn't null, then    *          timestamp will be converted to the top-of-the day timestamp    */
DECL|method|FlowActivityRowKey (String clusterId, Long timestamp, String userId, String flowName, boolean convertDayTsToTopOfDay)
specifier|protected
name|FlowActivityRowKey
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|Long
name|timestamp
parameter_list|,
name|String
name|userId
parameter_list|,
name|String
name|flowName
parameter_list|,
name|boolean
name|convertDayTsToTopOfDay
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
if|if
condition|(
name|convertDayTsToTopOfDay
operator|&&
operator|(
name|timestamp
operator|!=
literal|null
operator|)
condition|)
block|{
name|this
operator|.
name|dayTs
operator|=
name|HBaseTimelineSchemaUtils
operator|.
name|getTopOfTheDayTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dayTs
operator|=
name|timestamp
expr_stmt|;
block|}
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
name|this
operator|.
name|flowName
operator|=
name|flowName
expr_stmt|;
block|}
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
DECL|method|getDayTimestamp ()
specifier|public
name|Long
name|getDayTimestamp
parameter_list|()
block|{
return|return
name|dayTs
return|;
block|}
DECL|method|getUserId ()
specifier|public
name|String
name|getUserId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
DECL|method|getFlowName ()
specifier|public
name|String
name|getFlowName
parameter_list|()
block|{
return|return
name|flowName
return|;
block|}
comment|/**    * Constructs a row key for the flow activity table as follows:    * {@code clusterId!dayTimestamp!user!flowName}.    *    * @return byte array for the row key    */
DECL|method|getRowKey ()
specifier|public
name|byte
index|[]
name|getRowKey
parameter_list|()
block|{
return|return
name|flowActivityRowKeyConverter
operator|.
name|encode
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Given the raw row key as bytes, returns the row key as an object.    *    * @param rowKey Byte representation of row key.    * @return A<cite>FlowActivityRowKey</cite> object.    */
DECL|method|parseRowKey (byte[] rowKey)
specifier|public
specifier|static
name|FlowActivityRowKey
name|parseRowKey
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
return|return
operator|new
name|FlowActivityRowKeyConverter
argument_list|()
operator|.
name|decode
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
comment|/**    * Constructs a row key for the flow activity table as follows:    * {@code clusterId!dayTimestamp!user!flowName}.    * @return String representation of row key    */
DECL|method|getRowKeyAsString ()
specifier|public
name|String
name|getRowKeyAsString
parameter_list|()
block|{
return|return
name|flowActivityRowKeyConverter
operator|.
name|encodeAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Given the raw row key as string, returns the row key as an object.    * @param encodedRowKey String representation of row key.    * @return A<cite>FlowActivityRowKey</cite> object.    */
DECL|method|parseRowKeyFromString (String encodedRowKey)
specifier|public
specifier|static
name|FlowActivityRowKey
name|parseRowKeyFromString
parameter_list|(
name|String
name|encodedRowKey
parameter_list|)
block|{
return|return
operator|new
name|FlowActivityRowKeyConverter
argument_list|()
operator|.
name|decodeFromString
argument_list|(
name|encodedRowKey
argument_list|)
return|;
block|}
comment|/**    * Encodes and decodes row key for flow activity table. The row key is of the    * form : clusterId!dayTimestamp!user!flowName. dayTimestamp(top of the day    * timestamp) is a long and rest are strings.    *<p>    */
DECL|class|FlowActivityRowKeyConverter
specifier|final
specifier|private
specifier|static
class|class
name|FlowActivityRowKeyConverter
implements|implements
name|KeyConverter
argument_list|<
name|FlowActivityRowKey
argument_list|>
implements|,
name|KeyConverterToString
argument_list|<
name|FlowActivityRowKey
argument_list|>
block|{
DECL|method|FlowActivityRowKeyConverter ()
specifier|private
name|FlowActivityRowKeyConverter
parameter_list|()
block|{     }
comment|/**      * The flow activity row key is of the form      * clusterId!dayTimestamp!user!flowName with each segment separated by !.      * The sizes below indicate sizes of each one of these segements in      * sequence. clusterId, user and flowName are strings. Top of the day      * timestamp is a long hence 8 bytes in size. Strings are variable in size      * (i.e. they end whenever separator is encountered). This is used while      * decoding and helps in determining where to split.      */
DECL|field|SEGMENT_SIZES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|SEGMENT_SIZES
init|=
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Bytes
operator|.
name|SIZEOF_LONG
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
decl_stmt|;
comment|/*      * (non-Javadoc)      *      * Encodes FlowActivityRowKey object into a byte array with each      * component/field in FlowActivityRowKey separated by Separator#QUALIFIERS.      * This leads to an flow activity table row key of the form      * clusterId!dayTimestamp!user!flowName. If dayTimestamp in passed      * FlowActivityRowKey object is null and clusterId is not null, then this      * returns a row key prefix as clusterId! and if userId in      * FlowActivityRowKey is null (and the fields preceding it i.e. clusterId      * and dayTimestamp are not null), this returns a row key prefix as      * clusterId!dayTimeStamp! dayTimestamp is inverted while encoding as it      * helps maintain a descending order for row keys in flow activity table.      *      * @see org.apache.hadoop.yarn.server.timelineservice.storage.common      * .KeyConverter#encode(java.lang.Object)      */
annotation|@
name|Override
DECL|method|encode (FlowActivityRowKey rowKey)
specifier|public
name|byte
index|[]
name|encode
parameter_list|(
name|FlowActivityRowKey
name|rowKey
parameter_list|)
block|{
if|if
condition|(
name|rowKey
operator|.
name|getDayTimestamp
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
argument_list|,
name|Separator
operator|.
name|EMPTY_BYTES
argument_list|)
return|;
block|}
if|if
condition|(
name|rowKey
operator|.
name|getUserId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|LongConverter
operator|.
name|invertLong
argument_list|(
name|rowKey
operator|.
name|getDayTimestamp
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Separator
operator|.
name|EMPTY_BYTES
argument_list|)
return|;
block|}
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|LongConverter
operator|.
name|invertLong
argument_list|(
name|rowKey
operator|.
name|getDayTimestamp
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getUserId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
argument_list|,
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getFlowName
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *      * @see      * org.apache.hadoop.yarn.server.timelineservice.storage.common      * .KeyConverter#decode(byte[])      */
annotation|@
name|Override
DECL|method|decode (byte[] rowKey)
specifier|public
name|FlowActivityRowKey
name|decode
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|rowKeyComponents
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|rowKey
argument_list|,
name|SEGMENT_SIZES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKeyComponents
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the row key is not valid for "
operator|+
literal|"a flow activity"
argument_list|)
throw|;
block|}
name|String
name|clusterId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
name|Long
name|dayTs
init|=
name|LongConverter
operator|.
name|invertLong
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|rowKeyComponents
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
name|String
name|flowName
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|3
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
return|return
operator|new
name|FlowActivityRowKey
argument_list|(
name|clusterId
argument_list|,
name|dayTs
argument_list|,
name|userId
argument_list|,
name|flowName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|encodeAsString (FlowActivityRowKey key)
specifier|public
name|String
name|encodeAsString
parameter_list|(
name|FlowActivityRowKey
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|.
name|getDayTimestamp
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|TimelineReaderUtils
operator|.
name|joinAndEscapeStrings
argument_list|(
operator|new
name|String
index|[]
block|{
name|key
operator|.
name|clusterId
block|}
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|getUserId
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|TimelineReaderUtils
operator|.
name|joinAndEscapeStrings
argument_list|(
operator|new
name|String
index|[]
block|{
name|key
operator|.
name|clusterId
block|,
name|key
operator|.
name|dayTs
operator|.
name|toString
argument_list|()
block|}
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|getFlowName
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|TimelineReaderUtils
operator|.
name|joinAndEscapeStrings
argument_list|(
operator|new
name|String
index|[]
block|{
name|key
operator|.
name|clusterId
block|,
name|key
operator|.
name|dayTs
operator|.
name|toString
argument_list|()
block|,
name|key
operator|.
name|userId
block|}
argument_list|)
return|;
block|}
return|return
name|TimelineReaderUtils
operator|.
name|joinAndEscapeStrings
argument_list|(
operator|new
name|String
index|[]
block|{
name|key
operator|.
name|clusterId
block|,
name|key
operator|.
name|dayTs
operator|.
name|toString
argument_list|()
block|,
name|key
operator|.
name|userId
block|,
name|key
operator|.
name|flowName
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decodeFromString (String encodedRowKey)
specifier|public
name|FlowActivityRowKey
name|decodeFromString
parameter_list|(
name|String
name|encodedRowKey
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|TimelineReaderUtils
operator|.
name|split
argument_list|(
name|encodedRowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|==
literal|null
operator|||
name|split
operator|.
name|size
argument_list|()
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid row key for flow activity."
argument_list|)
throw|;
block|}
name|Long
name|dayTs
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FlowActivityRowKey
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|dayTs
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

