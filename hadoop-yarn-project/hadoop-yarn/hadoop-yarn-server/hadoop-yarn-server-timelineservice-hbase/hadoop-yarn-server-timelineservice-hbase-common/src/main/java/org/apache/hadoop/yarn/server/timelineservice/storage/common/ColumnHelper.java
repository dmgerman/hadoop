begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.common
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * This class is meant to be used only by explicit Columns, and not directly to  * write by clients.  */
end_comment

begin_class
DECL|class|ColumnHelper
specifier|public
specifier|final
class|class
name|ColumnHelper
block|{
DECL|method|ColumnHelper ()
specifier|private
name|ColumnHelper
parameter_list|()
block|{   }
comment|/**    * @param columnPrefixBytes The byte representation for the column prefix.    *          Should not contain {@link Separator#QUALIFIERS}.    * @param qualifier for the remainder of the column.    *          {@link Separator#QUALIFIERS} is permissible in the qualifier    *          as it is joined only with the column prefix bytes.    * @return fully sanitized column qualifier that is a combination of prefix    *         and qualifier. If prefix is null, the result is simply the encoded    *         qualifier without any separator.    */
DECL|method|getColumnQualifier (byte[] columnPrefixBytes, String qualifier)
specifier|public
specifier|static
name|byte
index|[]
name|getColumnQualifier
parameter_list|(
name|byte
index|[]
name|columnPrefixBytes
parameter_list|,
name|String
name|qualifier
parameter_list|)
block|{
comment|// We don't want column names to have spaces / tabs.
name|byte
index|[]
name|encodedQualifier
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|qualifier
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnPrefixBytes
operator|==
literal|null
condition|)
block|{
return|return
name|encodedQualifier
return|;
block|}
comment|// Convert qualifier to lower case, strip of separators and tag on column
comment|// prefix.
name|byte
index|[]
name|columnQualifier
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|columnPrefixBytes
argument_list|,
name|encodedQualifier
argument_list|)
decl_stmt|;
return|return
name|columnQualifier
return|;
block|}
comment|/**    * @param columnPrefixBytes The byte representation for the column prefix.    *          Should not contain {@link Separator#QUALIFIERS}.    * @param qualifier for the remainder of the column.    * @return fully sanitized column qualifier that is a combination of prefix    *         and qualifier. If prefix is null, the result is simply the encoded    *         qualifier without any separator.    */
DECL|method|getColumnQualifier (byte[] columnPrefixBytes, long qualifier)
specifier|public
specifier|static
name|byte
index|[]
name|getColumnQualifier
parameter_list|(
name|byte
index|[]
name|columnPrefixBytes
parameter_list|,
name|long
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|columnPrefixBytes
operator|==
literal|null
condition|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
return|;
block|}
comment|// Convert qualifier to lower case, strip of separators and tag on column
comment|// prefix.
name|byte
index|[]
name|columnQualifier
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|columnPrefixBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualifier
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|columnQualifier
return|;
block|}
comment|/**    * @param columnPrefixBytes The byte representation for the column prefix.    *          Should not contain {@link Separator#QUALIFIERS}.    * @param qualifier the byte representation for the remainder of the column.    * @return fully sanitized column qualifier that is a combination of prefix    *         and qualifier. If prefix is null, the result is simply the encoded    *         qualifier without any separator.    */
DECL|method|getColumnQualifier (byte[] columnPrefixBytes, byte[] qualifier)
specifier|public
specifier|static
name|byte
index|[]
name|getColumnQualifier
parameter_list|(
name|byte
index|[]
name|columnPrefixBytes
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
block|{
if|if
condition|(
name|columnPrefixBytes
operator|==
literal|null
condition|)
block|{
return|return
name|qualifier
return|;
block|}
name|byte
index|[]
name|columnQualifier
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|columnPrefixBytes
argument_list|,
name|qualifier
argument_list|)
decl_stmt|;
return|return
name|columnQualifier
return|;
block|}
block|}
end_class

end_unit

