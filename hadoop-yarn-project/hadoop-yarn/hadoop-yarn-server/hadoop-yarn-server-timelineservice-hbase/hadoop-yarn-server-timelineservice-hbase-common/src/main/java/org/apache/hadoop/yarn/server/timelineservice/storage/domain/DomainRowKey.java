begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.timelineservice.storage.domain
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|domain
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|KeyConverterToString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|Separator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|common
operator|.
name|KeyConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|reader
operator|.
name|TimelineReaderUtils
import|;
end_import

begin_comment
comment|/**  * Represents a row key for the domain table, which is the  * cluster ! domain id.  */
end_comment

begin_class
DECL|class|DomainRowKey
specifier|public
class|class
name|DomainRowKey
block|{
DECL|field|clusterId
specifier|private
specifier|final
name|String
name|clusterId
decl_stmt|;
DECL|field|domainId
specifier|private
specifier|final
name|String
name|domainId
decl_stmt|;
DECL|field|domainIdKeyConverter
specifier|private
specifier|final
name|DomainRowKeyConverter
name|domainIdKeyConverter
init|=
operator|new
name|DomainRowKeyConverter
argument_list|()
decl_stmt|;
DECL|method|DomainRowKey (String clusterId, String domainId)
specifier|public
name|DomainRowKey
parameter_list|(
name|String
name|clusterId
parameter_list|,
name|String
name|domainId
parameter_list|)
block|{
name|this
operator|.
name|clusterId
operator|=
name|clusterId
expr_stmt|;
name|this
operator|.
name|domainId
operator|=
name|domainId
expr_stmt|;
block|}
DECL|method|getClusterId ()
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
name|clusterId
return|;
block|}
DECL|method|getDomainId ()
specifier|public
name|String
name|getDomainId
parameter_list|()
block|{
return|return
name|domainId
return|;
block|}
comment|/**    * Constructs a row key prefix for the domain table.    *    * @return byte array with the row key    */
DECL|method|getRowKey ()
specifier|public
name|byte
index|[]
name|getRowKey
parameter_list|()
block|{
return|return
name|domainIdKeyConverter
operator|.
name|encode
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Given the raw row key as bytes, returns the row key as an object.    *    * @param rowKey a rowkey represented as a byte array.    * @return an<cite>DomainRowKey</cite> object.    */
DECL|method|parseRowKey (byte[] rowKey)
specifier|public
specifier|static
name|DomainRowKey
name|parseRowKey
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
return|return
operator|new
name|DomainRowKeyConverter
argument_list|()
operator|.
name|decode
argument_list|(
name|rowKey
argument_list|)
return|;
block|}
comment|/**    * Constructs a row key for the domain table as follows:    *<p>    * {@code clusterId!domainId}.    *</p>    * @return String representation of row key.    */
DECL|method|getRowKeyAsString ()
specifier|public
name|String
name|getRowKeyAsString
parameter_list|()
block|{
return|return
name|domainIdKeyConverter
operator|.
name|encodeAsString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**    * Given the encoded row key as string, returns the row key as an object.    * @param encodedRowKey String representation of row key.    * @return A<cite>DomainRowKey</cite> object.    */
DECL|method|parseRowKeyFromString (String encodedRowKey)
specifier|public
specifier|static
name|DomainRowKey
name|parseRowKeyFromString
parameter_list|(
name|String
name|encodedRowKey
parameter_list|)
block|{
return|return
operator|new
name|DomainRowKeyConverter
argument_list|()
operator|.
name|decodeFromString
argument_list|(
name|encodedRowKey
argument_list|)
return|;
block|}
comment|/**    * Encodes and decodes row key for the domain table.    * The row key is of the    * form : domainId    *<p>    */
DECL|class|DomainRowKeyConverter
specifier|final
specifier|private
specifier|static
class|class
name|DomainRowKeyConverter
implements|implements
name|KeyConverter
argument_list|<
name|DomainRowKey
argument_list|>
implements|,
name|KeyConverterToString
argument_list|<
name|DomainRowKey
argument_list|>
block|{
DECL|method|DomainRowKeyConverter ()
specifier|private
name|DomainRowKeyConverter
parameter_list|()
block|{     }
comment|/**      * The domain row key is of the form      * clusterId!domainId with each segment separated by !.      * The sizes below indicate sizes of each one of      * these segements in sequence.      * clusterId and domainId are strings.      * Strings are variable in size      * (i.e. they end whenever separator is encountered).      * This is used while      * decoding and helps in determining where to split.      */
DECL|field|SEGMENT_SIZES
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|SEGMENT_SIZES
init|=
block|{
name|Separator
operator|.
name|VARIABLE_SIZE
block|,
name|Separator
operator|.
name|VARIABLE_SIZE
block|}
decl_stmt|;
comment|/*      * (non-Javadoc)      *      * Encodes DomainRowKey object into a byte array      *      * @see org.apache.hadoop.yarn.server.timelineservice.storage.common      * .KeyConverter#encode(java.lang.Object)      */
annotation|@
name|Override
DECL|method|encode (DomainRowKey rowKey)
specifier|public
name|byte
index|[]
name|encode
parameter_list|(
name|DomainRowKey
name|rowKey
parameter_list|)
block|{
if|if
condition|(
name|rowKey
operator|==
literal|null
condition|)
block|{
return|return
name|Separator
operator|.
name|EMPTY_BYTES
return|;
block|}
name|byte
index|[]
name|cluster
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getClusterId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
decl_stmt|;
name|byte
index|[]
name|domainIdBytes
init|=
name|Separator
operator|.
name|encode
argument_list|(
name|rowKey
operator|.
name|getDomainId
argument_list|()
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|)
decl_stmt|;
return|return
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|join
argument_list|(
name|cluster
argument_list|,
name|domainIdBytes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decode (byte[] rowKey)
specifier|public
name|DomainRowKey
name|decode
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|rowKeyComponents
init|=
name|Separator
operator|.
name|QUALIFIERS
operator|.
name|split
argument_list|(
name|rowKey
argument_list|,
name|SEGMENT_SIZES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowKeyComponents
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"the row key is not valid for "
operator|+
literal|"a domain id"
argument_list|)
throw|;
block|}
name|String
name|clusterId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
name|String
name|domainId
init|=
name|Separator
operator|.
name|decode
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rowKeyComponents
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Separator
operator|.
name|QUALIFIERS
argument_list|,
name|Separator
operator|.
name|TAB
argument_list|,
name|Separator
operator|.
name|SPACE
argument_list|)
decl_stmt|;
return|return
operator|new
name|DomainRowKey
argument_list|(
name|clusterId
argument_list|,
name|domainId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|encodeAsString (DomainRowKey key)
specifier|public
name|String
name|encodeAsString
parameter_list|(
name|DomainRowKey
name|key
parameter_list|)
block|{
return|return
name|TimelineReaderUtils
operator|.
name|joinAndEscapeStrings
argument_list|(
operator|new
name|String
index|[]
block|{
name|key
operator|.
name|clusterId
block|,
name|key
operator|.
name|domainId
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|decodeFromString (String encodedRowKey)
specifier|public
name|DomainRowKey
name|decodeFromString
parameter_list|(
name|String
name|encodedRowKey
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|TimelineReaderUtils
operator|.
name|split
argument_list|(
name|encodedRowKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|==
literal|null
operator|||
name|split
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid row key for domain id."
argument_list|)
throw|;
block|}
return|return
operator|new
name|DomainRowKey
argument_list|(
name|split
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|split
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

