begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UnRegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UnRegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|ApplicationHistoryServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|ApplicationHistoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|MemoryApplicationHistoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeHealthCheckerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdaterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystemTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRegistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptUnregistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|MemoryTimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|MemoryTimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|TimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Embedded Yarn minicluster for testcases that need to interact with a cluster.  *<p/>  * In a real cluster, resource request matching is done using the hostname, and  * by default Yarn minicluster works in the exact same way as a real cluster.  *<p/>  * If a testcase needs to use multiple nodes and exercise resource request   * matching to a specific node, then the property   * {@YarnConfiguration.RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME} should be set  *<code>true</code> in the configuration used to initialize the minicluster.  *<p/>  * With this property set to<code>true</code>, the matching will be done using  * the<code>hostname:port</code> of the namenodes. In such case, the AM must  * do resource request using<code>hostname:port</code> as the location.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|MiniYARNCluster
specifier|public
class|class
name|MiniYARNCluster
extends|extends
name|CompositeService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MiniYARNCluster
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// temp fix until metrics system can auto-detect itself running in unit test:
static|static
block|{
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|field|nodeManagers
specifier|private
name|NodeManager
index|[]
name|nodeManagers
decl_stmt|;
DECL|field|resourceManagers
specifier|private
name|ResourceManager
index|[]
name|resourceManagers
decl_stmt|;
DECL|field|rmIds
specifier|private
name|String
index|[]
name|rmIds
decl_stmt|;
DECL|field|appHistoryServer
specifier|private
name|ApplicationHistoryServer
name|appHistoryServer
decl_stmt|;
DECL|field|useFixedPorts
specifier|private
name|boolean
name|useFixedPorts
decl_stmt|;
DECL|field|useRpc
specifier|private
name|boolean
name|useRpc
init|=
literal|false
decl_stmt|;
DECL|field|failoverTimeout
specifier|private
name|int
name|failoverTimeout
decl_stmt|;
DECL|field|appMasters
specifier|private
name|ConcurrentMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Long
argument_list|>
name|appMasters
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Long
argument_list|>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|testWorkDir
specifier|private
name|File
name|testWorkDir
decl_stmt|;
comment|// Number of nm-local-dirs per nodemanager
DECL|field|numLocalDirs
specifier|private
name|int
name|numLocalDirs
decl_stmt|;
comment|// Number of nm-log-dirs per nodemanager
DECL|field|numLogDirs
specifier|private
name|int
name|numLogDirs
decl_stmt|;
DECL|field|enableAHS
specifier|private
name|boolean
name|enableAHS
decl_stmt|;
comment|/**    * @param testName name of the test    * @param numResourceManagers the number of resource managers in the cluster    * @param numNodeManagers the number of node managers in the cluster    * @param numLocalDirs the number of nm-local-dirs per nodemanager    * @param numLogDirs the number of nm-log-dirs per nodemanager    * @param enableAHS enable ApplicationHistoryServer or not    */
annotation|@
name|Deprecated
DECL|method|MiniYARNCluster ( String testName, int numResourceManagers, int numNodeManagers, int numLocalDirs, int numLogDirs, boolean enableAHS)
specifier|public
name|MiniYARNCluster
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|numResourceManagers
parameter_list|,
name|int
name|numNodeManagers
parameter_list|,
name|int
name|numLocalDirs
parameter_list|,
name|int
name|numLogDirs
parameter_list|,
name|boolean
name|enableAHS
parameter_list|)
block|{
name|super
argument_list|(
name|testName
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|numLocalDirs
operator|=
name|numLocalDirs
expr_stmt|;
name|this
operator|.
name|numLogDirs
operator|=
name|numLogDirs
expr_stmt|;
name|this
operator|.
name|enableAHS
operator|=
name|enableAHS
expr_stmt|;
name|String
name|testSubDir
init|=
name|testName
operator|.
name|replace
argument_list|(
literal|"$"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|File
name|targetWorkDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|testSubDir
argument_list|)
decl_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|targetWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"COULD NOT CLEANUP"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"could not cleanup test dir: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// The test working directory can exceed the maximum path length supported
comment|// by some Windows APIs and cmd.exe (260 characters).  To work around this,
comment|// create a symlink in temporary storage with a much shorter path,
comment|// targeting the full path to the test working directory.  Then, use the
comment|// symlink as the test working directory.
name|String
name|targetPath
init|=
name|targetWorkDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|File
name|link
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|linkPath
init|=
name|link
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|linkPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"could not cleanup symlink: "
operator|+
name|linkPath
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Guarantee target exists before creating symlink.
name|targetWorkDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|Shell
operator|.
name|getSymlinkCommand
argument_list|(
name|targetPath
argument_list|,
name|linkPath
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"failed to create symlink from %s to %s, shell output: %s"
argument_list|,
name|linkPath
argument_list|,
name|targetPath
argument_list|,
name|shexec
operator|.
name|getOutput
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|testWorkDir
operator|=
name|link
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|testWorkDir
operator|=
name|targetWorkDir
expr_stmt|;
block|}
name|resourceManagers
operator|=
operator|new
name|ResourceManager
index|[
name|numResourceManagers
index|]
expr_stmt|;
name|nodeManagers
operator|=
operator|new
name|NodeManager
index|[
name|numNodeManagers
index|]
expr_stmt|;
block|}
comment|/**    * @param testName name of the test    * @param numResourceManagers the number of resource managers in the cluster    * @param numNodeManagers the number of node managers in the cluster    * @param numLocalDirs the number of nm-local-dirs per nodemanager    * @param numLogDirs the number of nm-log-dirs per nodemanager    */
DECL|method|MiniYARNCluster ( String testName, int numResourceManagers, int numNodeManagers, int numLocalDirs, int numLogDirs)
specifier|public
name|MiniYARNCluster
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|numResourceManagers
parameter_list|,
name|int
name|numNodeManagers
parameter_list|,
name|int
name|numLocalDirs
parameter_list|,
name|int
name|numLogDirs
parameter_list|)
block|{
name|this
argument_list|(
name|testName
argument_list|,
name|numResourceManagers
argument_list|,
name|numNodeManagers
argument_list|,
name|numLocalDirs
argument_list|,
name|numLogDirs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param testName name of the test    * @param numNodeManagers the number of node managers in the cluster    * @param numLocalDirs the number of nm-local-dirs per nodemanager    * @param numLogDirs the number of nm-log-dirs per nodemanager    */
DECL|method|MiniYARNCluster (String testName, int numNodeManagers, int numLocalDirs, int numLogDirs)
specifier|public
name|MiniYARNCluster
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|numNodeManagers
parameter_list|,
name|int
name|numLocalDirs
parameter_list|,
name|int
name|numLogDirs
parameter_list|)
block|{
name|this
argument_list|(
name|testName
argument_list|,
literal|1
argument_list|,
name|numNodeManagers
argument_list|,
name|numLocalDirs
argument_list|,
name|numLogDirs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|public
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|useFixedPorts
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_FIXED_PORTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_MINICLUSTER_FIXED_PORTS
argument_list|)
expr_stmt|;
name|useRpc
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_USE_RPC
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_MINICLUSTER_USE_RPC
argument_list|)
expr_stmt|;
name|failoverTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_TIMEOUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ZK_TIMEOUT_MS
argument_list|)
expr_stmt|;
if|if
condition|(
name|useRpc
operator|&&
operator|!
name|useFixedPorts
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid configuration!"
operator|+
literal|" Minicluster can use rpc only when configured to use fixed ports"
argument_list|)
throw|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|IS_MINI_YARN_CLUSTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceManagers
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|rmIds
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|rmIds
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|rmIds
operator|.
name|append
argument_list|(
literal|"rm"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|rmIds
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|String
argument_list|>
name|rmIdsCollection
init|=
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rmIds
operator|=
name|rmIdsCollection
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|rmIdsCollection
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|resourceManagers
index|[
name|i
index|]
operator|=
name|createResourceManager
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|useFixedPorts
condition|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|setHARMConfigurationWithEphemeralPorts
argument_list|(
name|i
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setNonHARMConfigurationWithEphemeralPorts
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
name|addService
argument_list|(
operator|new
name|ResourceManagerWrapper
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|nodeManagers
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|nodeManagers
index|[
name|index
index|]
operator|=
name|useRpc
condition|?
operator|new
name|CustomNodeManager
argument_list|()
else|:
operator|new
name|ShortCircuitedNodeManager
argument_list|()
expr_stmt|;
name|addService
argument_list|(
operator|new
name|NodeManagerWrapper
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ENABLED
argument_list|)
operator|||
name|enableAHS
condition|)
block|{
name|addService
argument_list|(
operator|new
name|ApplicationHistoryServerWrapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
operator|instanceof
name|YarnConfiguration
condition|?
name|conf
else|:
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|this
operator|.
name|waitForNodeManagersToConnect
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
DECL|method|setNonHARMConfigurationWithEphemeralPorts (Configuration conf)
specifier|private
name|void
name|setNonHARMConfigurationWithEphemeralPorts
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|hostname
init|=
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|WebAppUtils
operator|.
name|setRMWebAppHostnameAndPort
argument_list|(
name|conf
argument_list|,
name|hostname
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|setHARMConfigurationWithEphemeralPorts (final int index, Configuration conf)
specifier|private
name|void
name|setHARMConfigurationWithEphemeralPorts
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|hostname
init|=
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|rmIds
index|[
name|index
index|]
argument_list|)
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initResourceManager (int index, Configuration conf)
specifier|private
specifier|synchronized
name|void
name|initResourceManager
parameter_list|(
name|int
name|index
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|Configuration
name|newConf
init|=
name|resourceManagers
operator|.
name|length
operator|>
literal|1
condition|?
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
else|:
name|conf
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|newConf
argument_list|)
condition|)
block|{
name|newConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmIds
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
name|resourceManagers
index|[
name|index
index|]
operator|.
name|init
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
name|resourceManagers
index|[
name|index
index|]
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|register
argument_list|(
name|RMAppAttemptEventType
operator|.
name|class
argument_list|,
operator|new
name|EventHandler
argument_list|<
name|RMAppAttemptEvent
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|RMAppAttemptRegistrationEvent
condition|)
block|{
name|appMasters
operator|.
name|put
argument_list|(
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|instanceof
name|RMAppAttemptUnregistrationEvent
condition|)
block|{
name|appMasters
operator|.
name|remove
argument_list|(
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|startResourceManager (final int index)
specifier|private
specifier|synchronized
name|void
name|startResourceManager
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
try|try
block|{
name|resourceManagers
index|[
name|index
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|resourceManagers
index|[
name|index
index|]
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// RM could have failed.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ResourceManager failed to start. Final state is "
operator|+
name|resourceManagers
index|[
name|index
index|]
operator|.
name|getServiceState
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|t
argument_list|)
throw|;
block|}
name|Configuration
name|conf
init|=
name|resourceManagers
index|[
name|index
index|]
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ResourceManager address: "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ResourceManager web address: "
operator|+
name|WebAppUtils
operator|.
name|getRMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|method|stopResourceManager (int index)
specifier|public
specifier|synchronized
name|void
name|stopResourceManager
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|resourceManagers
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
name|resourceManagers
index|[
name|index
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManagers
index|[
name|index
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|method|restartResourceManager (int index)
specifier|public
specifier|synchronized
name|void
name|restartResourceManager
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|resourceManagers
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
name|resourceManagers
index|[
name|index
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManagers
index|[
name|index
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|resourceManagers
index|[
name|index
index|]
operator|=
operator|new
name|ResourceManager
argument_list|()
expr_stmt|;
name|initResourceManager
argument_list|(
name|index
argument_list|,
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|startResourceManager
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
DECL|method|getTestWorkDir ()
specifier|public
name|File
name|getTestWorkDir
parameter_list|()
block|{
return|return
name|testWorkDir
return|;
block|}
comment|/**    * In a HA cluster, go through all the RMs and find the Active RM. In a    * non-HA cluster, return the index of the only RM.    *    * @return index of the active RM or -1 if none of them turn active    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getActiveRMIndex ()
specifier|public
name|int
name|getActiveRMIndex
parameter_list|()
block|{
if|if
condition|(
name|resourceManagers
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|numRetriesForRMBecomingActive
init|=
name|failoverTimeout
operator|/
literal|100
decl_stmt|;
while|while
condition|(
name|numRetriesForRMBecomingActive
operator|--
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|resourceManagers
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
try|try
block|{
if|if
condition|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|resourceManagers
index|[
name|i
index|]
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Couldn't read the status of "
operator|+
literal|"a ResourceManger in the HA ensemble."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Interrupted while waiting for one "
operator|+
literal|"of the ResourceManagers to become active"
argument_list|)
throw|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * @return the active {@link ResourceManager} of the cluster,    * null if none of them are active.    */
DECL|method|getResourceManager ()
specifier|public
name|ResourceManager
name|getResourceManager
parameter_list|()
block|{
name|int
name|activeRMIndex
init|=
name|getActiveRMIndex
argument_list|()
decl_stmt|;
return|return
name|activeRMIndex
operator|==
operator|-
literal|1
condition|?
literal|null
else|:
name|this
operator|.
name|resourceManagers
index|[
name|activeRMIndex
index|]
return|;
block|}
DECL|method|getResourceManager (int i)
specifier|public
name|ResourceManager
name|getResourceManager
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|this
operator|.
name|resourceManagers
index|[
name|i
index|]
return|;
block|}
DECL|method|getNodeManager (int i)
specifier|public
name|NodeManager
name|getNodeManager
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|this
operator|.
name|nodeManagers
index|[
name|i
index|]
return|;
block|}
DECL|method|getHostname ()
specifier|public
specifier|static
name|String
name|getHostname
parameter_list|()
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|class|ResourceManagerWrapper
specifier|private
class|class
name|ResourceManagerWrapper
extends|extends
name|AbstractService
block|{
DECL|field|index
specifier|private
name|int
name|index
decl_stmt|;
DECL|method|ResourceManagerWrapper (int i)
specifier|public
name|ResourceManagerWrapper
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|ResourceManagerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initResourceManager
argument_list|(
name|index
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManager
argument_list|(
name|index
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|resourceManagers
index|[
name|index
index|]
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER_FORCED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|resourceManagers
index|[
name|index
index|]
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting resourcemanager "
operator|+
name|index
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ResourceManager address: "
operator|+
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ResourceManager web address: "
operator|+
name|WebAppUtils
operator|.
name|getRMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForAppMastersToFinish (long timeoutMillis)
specifier|private
name|void
name|waitForAppMastersToFinish
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|started
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|appMasters
init|)
block|{
while|while
condition|(
operator|!
name|appMasters
operator|.
name|isEmpty
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|started
operator|<
name|timeoutMillis
condition|)
block|{
name|appMasters
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|appMasters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stopping RM while some app masters are still alive"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|resourceManagers
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
name|waitForAppMastersToFinish
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|resourceManagers
index|[
name|index
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Shell
operator|.
name|WINDOWS
condition|)
block|{
comment|// On Windows, clean up the short temporary symlink that was created to
comment|// work around path length limitation.
name|String
name|testWorkDirPath
init|=
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
try|try
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testWorkDirPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"could not cleanup symlink: "
operator|+
name|testWorkDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NodeManagerWrapper
specifier|private
class|class
name|NodeManagerWrapper
extends|extends
name|AbstractService
block|{
DECL|field|index
name|int
name|index
init|=
literal|0
decl_stmt|;
DECL|method|NodeManagerWrapper (int i)
specifier|public
name|NodeManagerWrapper
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|NodeManagerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|index
operator|=
name|i
expr_stmt|;
block|}
DECL|method|serviceInit (Configuration conf)
specifier|protected
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create nm-local-dirs and configure them for the nodemanager
name|String
name|localDirsString
init|=
name|prepareDirs
argument_list|(
literal|"local"
argument_list|,
name|numLocalDirs
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCAL_DIRS
argument_list|,
name|localDirsString
argument_list|)
expr_stmt|;
comment|// create nm-log-dirs and configure them for the nodemanager
name|String
name|logDirsString
init|=
name|prepareDirs
argument_list|(
literal|"log"
argument_list|,
name|numLogDirs
argument_list|)
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_DIRS
argument_list|,
name|logDirsString
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
argument_list|,
name|config
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_NM_PMEM_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_MINICLUSTER_NM_PMEM_MB
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOCALIZER_ADDRESS
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|WebAppUtils
operator|.
name|setNMWebAppHostNameAndPort
argument_list|(
name|config
argument_list|,
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Disable resource checks by default
if|if
condition|(
operator|!
name|config
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
argument_list|)
condition|)
block|{
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_PMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_VMEM_CHECK_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting NM: "
operator|+
name|index
argument_list|)
expr_stmt|;
name|nodeManagers
index|[
name|index
index|]
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create local/log directories      * @param dirType type of directories i.e. local dirs or log dirs       * @param numDirs number of directories      * @return the created directories as a comma delimited String      */
DECL|method|prepareDirs (String dirType, int numDirs)
specifier|private
name|String
name|prepareDirs
parameter_list|(
name|String
name|dirType
parameter_list|,
name|int
name|numDirs
parameter_list|)
block|{
name|File
index|[]
name|dirs
init|=
operator|new
name|File
index|[
name|numDirs
index|]
decl_stmt|;
name|String
name|dirsString
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDirs
condition|;
name|i
operator|++
control|)
block|{
name|dirs
index|[
name|i
index|]
operator|=
operator|new
name|File
argument_list|(
name|testWorkDir
argument_list|,
name|MiniYARNCluster
operator|.
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|dirType
operator|+
literal|"Dir-nm-"
operator|+
name|index
operator|+
literal|"_"
operator|+
name|i
argument_list|)
expr_stmt|;
name|dirs
index|[
name|i
index|]
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created "
operator|+
name|dirType
operator|+
literal|"Dir in "
operator|+
name|dirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|delimiter
init|=
operator|(
name|i
operator|>
literal|0
operator|)
condition|?
literal|","
else|:
literal|""
decl_stmt|;
name|dirsString
operator|=
name|dirsString
operator|.
name|concat
argument_list|(
name|delimiter
operator|+
name|dirs
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|dirsString
return|;
block|}
DECL|method|serviceStart ()
specifier|protected
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|nodeManagers
index|[
name|index
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeManagers
index|[
name|index
index|]
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// NM could have failed.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"NodeManager "
operator|+
name|index
operator|+
literal|" failed to start"
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeManagers
index|[
name|index
index|]
operator|!=
literal|null
condition|)
block|{
name|nodeManagers
index|[
name|index
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|CustomNodeManager
specifier|public
class|class
name|CustomNodeManager
extends|extends
name|NodeManager
block|{
DECL|field|nodeStatus
specifier|protected
name|NodeStatus
name|nodeStatus
decl_stmt|;
DECL|method|setNodeStatus (NodeStatus status)
specifier|public
name|void
name|setNodeStatus
parameter_list|(
name|NodeStatus
name|status
parameter_list|)
block|{
name|this
operator|.
name|nodeStatus
operator|=
name|status
expr_stmt|;
block|}
comment|/**      * Hook to allow modification/replacement of NodeStatus      * @param currentStatus Current status.      * @return New node status.      */
DECL|method|getSimulatedNodeStatus (NodeStatus currentStatus)
specifier|protected
name|NodeStatus
name|getSimulatedNodeStatus
parameter_list|(
name|NodeStatus
name|currentStatus
parameter_list|)
block|{
if|if
condition|(
name|nodeStatus
operator|==
literal|null
condition|)
block|{
return|return
name|currentStatus
return|;
block|}
else|else
block|{
comment|// Increment response ID, the RMNodeStatusEvent will not get recorded
comment|// for a duplicate heartbeat
name|nodeStatus
operator|.
name|setResponseId
argument_list|(
name|nodeStatus
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|nodeStatus
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|doSecureLogin ()
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Don't try to login using keytab in the testcase.
block|}
annotation|@
name|Override
DECL|method|createNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker)
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
return|return
operator|new
name|NodeStatusUpdaterImpl
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
block|{
comment|// Allow simulation of nodestatus
annotation|@
name|Override
specifier|protected
name|NodeStatus
name|getNodeStatus
parameter_list|(
name|int
name|responseId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getSimulatedNodeStatus
argument_list|(
name|super
operator|.
name|getNodeStatus
argument_list|(
name|responseId
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
DECL|class|ShortCircuitedNodeManager
specifier|private
class|class
name|ShortCircuitedNodeManager
extends|extends
name|CustomNodeManager
block|{
annotation|@
name|Override
DECL|method|createNodeStatusUpdater (Context context, Dispatcher dispatcher, NodeHealthCheckerService healthChecker)
specifier|protected
name|NodeStatusUpdater
name|createNodeStatusUpdater
parameter_list|(
name|Context
name|context
parameter_list|,
name|Dispatcher
name|dispatcher
parameter_list|,
name|NodeHealthCheckerService
name|healthChecker
parameter_list|)
block|{
return|return
operator|new
name|NodeStatusUpdaterImpl
argument_list|(
name|context
argument_list|,
name|dispatcher
argument_list|,
name|healthChecker
argument_list|,
name|metrics
argument_list|)
block|{
comment|// Allow simulation of nodestatus
annotation|@
name|Override
specifier|protected
name|NodeStatus
name|getNodeStatus
parameter_list|(
name|int
name|responseId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getSimulatedNodeStatus
argument_list|(
name|super
operator|.
name|getNodeStatus
argument_list|(
name|responseId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ResourceTracker
name|getRMClient
parameter_list|()
block|{
specifier|final
name|ResourceTrackerService
name|rt
init|=
name|getResourceManager
argument_list|()
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// For in-process communication without RPC
return|return
operator|new
name|ResourceTracker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|NodeHeartbeatResponse
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|rt
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in heartbeat from node "
operator|+
name|request
operator|.
name|getNodeStatus
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RegisterNodeManagerResponse
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|rt
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception in node registration from "
operator|+
name|request
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|UnRegisterNodeManagerResponse
name|unRegisterNodeManager
parameter_list|(
name|UnRegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|UnRegisterNodeManagerResponse
operator|.
name|class
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|stopRMProxy
parameter_list|()
block|{ }
block|}
return|;
block|}
block|}
comment|/**    * Wait for all the NodeManagers to connect to the ResourceManager.    *    * @param timeout Time to wait (sleeps in 10 ms intervals) in milliseconds.    * @return true if all NodeManagers connect to the (Active)    * ResourceManager, false otherwise.    * @throws YarnException    * @throws InterruptedException    */
DECL|method|waitForNodeManagersToConnect (long timeout)
specifier|public
name|boolean
name|waitForNodeManagersToConnect
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|YarnException
throws|,
name|InterruptedException
block|{
name|GetClusterMetricsRequest
name|req
init|=
name|GetClusterMetricsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timeout
operator|/
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ResourceManager
name|rm
init|=
name|getResourceManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|rm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Can not find the active RM."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|nodeManagers
operator|.
name|length
operator|==
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getClusterMetrics
argument_list|(
name|req
argument_list|)
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getNumNodeManagers
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"All Node Managers connected in MiniYARNCluster"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Node Managers did not connect within 5000ms"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|class|ApplicationHistoryServerWrapper
specifier|private
class|class
name|ApplicationHistoryServerWrapper
extends|extends
name|AbstractService
block|{
DECL|method|ApplicationHistoryServerWrapper ()
specifier|public
name|ApplicationHistoryServerWrapper
parameter_list|()
block|{
name|super
argument_list|(
name|ApplicationHistoryServerWrapper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
specifier|synchronized
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|appHistoryServer
operator|=
operator|new
name|ApplicationHistoryServer
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_STORE
argument_list|,
name|MemoryApplicationHistoryStore
operator|.
name|class
argument_list|,
name|ApplicationHistoryStore
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Only set memory timeline store if timeline v1.5 is not enabled.
comment|// Otherwise, caller has the freedom to choose storage impl.
if|if
condition|(
operator|!
name|TimelineUtils
operator|.
name|timelineServiceV1_5Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_STORE
argument_list|,
name|MemoryTimelineStore
operator|.
name|class
argument_list|,
name|TimelineStore
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_STATE_STORE_CLASS
argument_list|,
name|MemoryTimelineStateStore
operator|.
name|class
argument_list|,
name|TimelineStateStore
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useFixedPorts
condition|)
block|{
name|String
name|hostname
init|=
name|MiniYARNCluster
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|,
name|hostname
operator|+
literal|":0"
argument_list|)
expr_stmt|;
block|}
name|appHistoryServer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
specifier|synchronized
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|appHistoryServer
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|appHistoryServer
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// AHS could have failed.
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"ApplicationHistoryServer failed to start. Final state is "
operator|+
name|appHistoryServer
operator|.
name|getServiceState
argument_list|()
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|appHistoryServer
operator|.
name|getFailureCause
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ApplicationHistoryServer address: "
operator|+
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MiniYARN ApplicationHistoryServer web address: "
operator|+
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
specifier|synchronized
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|appHistoryServer
operator|!=
literal|null
condition|)
block|{
name|appHistoryServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getApplicationHistoryServer ()
specifier|public
name|ApplicationHistoryServer
name|getApplicationHistoryServer
parameter_list|()
block|{
return|return
name|this
operator|.
name|appHistoryServer
return|;
block|}
DECL|method|createResourceManager ()
specifier|protected
name|ResourceManager
name|createResourceManager
parameter_list|()
block|{
return|return
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Don't try to login using keytab in the testcases.
block|}
block|}
return|;
block|}
DECL|method|getNumOfResourceManager ()
specifier|public
name|int
name|getNumOfResourceManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceManagers
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

