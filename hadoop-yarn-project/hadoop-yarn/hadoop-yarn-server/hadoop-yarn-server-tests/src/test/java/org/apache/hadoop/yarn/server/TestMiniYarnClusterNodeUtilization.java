begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
operator|.
name|CustomNodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ServerRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeStatusUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMiniYarnClusterNodeUtilization
specifier|public
class|class
name|TestMiniYarnClusterNodeUtilization
block|{
comment|// Mini YARN cluster setup
DECL|field|NUM_RM
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RM
init|=
literal|1
decl_stmt|;
DECL|field|NUM_NM
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NM
init|=
literal|1
decl_stmt|;
comment|// Values for the first round
DECL|field|CONTAINER_PMEM_1
specifier|private
specifier|static
specifier|final
name|int
name|CONTAINER_PMEM_1
init|=
literal|1024
decl_stmt|;
DECL|field|CONTAINER_VMEM_1
specifier|private
specifier|static
specifier|final
name|int
name|CONTAINER_VMEM_1
init|=
literal|2048
decl_stmt|;
DECL|field|CONTAINER_CPU_1
specifier|private
specifier|static
specifier|final
name|float
name|CONTAINER_CPU_1
init|=
literal|11.0f
decl_stmt|;
DECL|field|NODE_PMEM_1
specifier|private
specifier|static
specifier|final
name|int
name|NODE_PMEM_1
init|=
literal|10240
decl_stmt|;
DECL|field|NODE_VMEM_1
specifier|private
specifier|static
specifier|final
name|int
name|NODE_VMEM_1
init|=
literal|20480
decl_stmt|;
DECL|field|NODE_CPU_1
specifier|private
specifier|static
specifier|final
name|float
name|NODE_CPU_1
init|=
literal|51.0f
decl_stmt|;
comment|// Values for the second round
DECL|field|CONTAINER_PMEM_2
specifier|private
specifier|static
specifier|final
name|int
name|CONTAINER_PMEM_2
init|=
literal|2048
decl_stmt|;
DECL|field|CONTAINER_VMEM_2
specifier|private
specifier|static
specifier|final
name|int
name|CONTAINER_VMEM_2
init|=
literal|4096
decl_stmt|;
DECL|field|CONTAINER_CPU_2
specifier|private
specifier|static
specifier|final
name|float
name|CONTAINER_CPU_2
init|=
literal|22.0f
decl_stmt|;
DECL|field|NODE_PMEM_2
specifier|private
specifier|static
specifier|final
name|int
name|NODE_PMEM_2
init|=
literal|20480
decl_stmt|;
DECL|field|NODE_VMEM_2
specifier|private
specifier|static
specifier|final
name|int
name|NODE_VMEM_2
init|=
literal|40960
decl_stmt|;
DECL|field|NODE_CPU_2
specifier|private
specifier|static
specifier|final
name|float
name|NODE_CPU_2
init|=
literal|61.0f
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniYARNCluster
name|cluster
decl_stmt|;
DECL|field|nm
specifier|private
name|CustomNodeManager
name|nm
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|nodeStatus
specifier|private
name|NodeStatus
name|nodeStatus
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|TestMiniYarnClusterNodeUtilization
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|cluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|name
argument_list|,
name|NUM_RM
argument_list|,
name|NUM_NM
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM never turned active"
argument_list|,
operator|-
literal|1
operator|==
name|cluster
operator|.
name|getActiveRMIndex
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|=
operator|(
name|CustomNodeManager
operator|)
name|cluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|responseId
init|=
literal|1
decl_stmt|;
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|responseId
argument_list|,
name|CONTAINER_PMEM_1
argument_list|,
name|CONTAINER_VMEM_1
argument_list|,
name|CONTAINER_CPU_1
argument_list|,
name|NODE_PMEM_1
argument_list|,
name|NODE_VMEM_1
argument_list|,
name|NODE_CPU_1
argument_list|)
expr_stmt|;
name|nm
operator|.
name|setNodeStatus
argument_list|(
name|nodeStatus
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simulates a NM heartbeat using the simulated NodeStatus fixture. Verify    * both the RMNode and SchedulerNode have been updated with the new    * utilization.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateNodeUtilization ()
specifier|public
name|void
name|testUpdateNodeUtilization
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|YarnException
block|{
name|assertTrue
argument_list|(
literal|"NMs fail to connect to the RM"
argument_list|,
name|cluster
operator|.
name|waitForNodeManagersToConnect
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate heartbeat using NodeStatus fixture
name|NodeHeartbeatRequest
name|request
init|=
name|NodeHeartbeatRequest
operator|.
name|newInstance
argument_list|(
name|nodeStatus
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ResourceTracker
name|tracker
init|=
name|ServerRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ResourceTracker
operator|.
name|class
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Give the heartbeat time to propagate to the RM
name|verifySimulatedUtilization
argument_list|()
expr_stmt|;
comment|// Alter utilization
name|int
name|responseId
init|=
literal|10
decl_stmt|;
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|responseId
argument_list|,
name|CONTAINER_PMEM_2
argument_list|,
name|CONTAINER_VMEM_2
argument_list|,
name|CONTAINER_CPU_2
argument_list|,
name|NODE_PMEM_2
argument_list|,
name|NODE_VMEM_2
argument_list|,
name|NODE_CPU_2
argument_list|)
expr_stmt|;
name|nm
operator|.
name|setNodeStatus
argument_list|(
name|nodeStatus
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Give the heartbeat time to propagate to the RM
name|verifySimulatedUtilization
argument_list|()
expr_stmt|;
block|}
comment|/**    * Trigger the NM to send a heartbeat using the simulated NodeStatus fixture.    * Verify both the RMNode and SchedulerNode have been updated with the new    * utilization.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMockNodeStatusHeartbeat ()
specifier|public
name|void
name|testMockNodeStatusHeartbeat
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|YarnException
block|{
name|assertTrue
argument_list|(
literal|"NMs fail to connect to the RM"
argument_list|,
name|cluster
operator|.
name|waitForNodeManagersToConnect
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|NodeStatusUpdater
name|updater
init|=
name|nm
operator|.
name|getNodeStatusUpdater
argument_list|()
decl_stmt|;
name|updater
operator|.
name|sendOutofBandHeartBeat
argument_list|()
expr_stmt|;
comment|// Give the heartbeat time to propagate to the RM
name|verifySimulatedUtilization
argument_list|()
expr_stmt|;
comment|// Alter utilization
name|int
name|responseId
init|=
literal|20
decl_stmt|;
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|responseId
argument_list|,
name|CONTAINER_PMEM_2
argument_list|,
name|CONTAINER_VMEM_2
argument_list|,
name|CONTAINER_CPU_2
argument_list|,
name|NODE_PMEM_2
argument_list|,
name|NODE_VMEM_2
argument_list|,
name|NODE_CPU_2
argument_list|)
expr_stmt|;
name|nm
operator|.
name|setNodeStatus
argument_list|(
name|nodeStatus
argument_list|)
expr_stmt|;
name|updater
operator|.
name|sendOutofBandHeartBeat
argument_list|()
expr_stmt|;
name|verifySimulatedUtilization
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a NodeStatus test vector.    * @param nodeId Node identifier.    * @param responseId Response identifier.    * @param containerPMem Virtual memory of the container.    * @param containerVMem Physical memory of the container.    * @param containerCPU CPU percentage of the container.    * @param nodePMem Physical memory of the node.    * @param nodeVMem Virtual memory of the node.    * @param nodeCPU CPU percentage of the node.    */
DECL|method|createNodeStatus ( NodeId nodeId, int responseId, int containerPMem, int containerVMem, float containerCPU, int nodePMem, int nodeVMem, float nodeCPU)
specifier|private
name|NodeStatus
name|createNodeStatus
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|int
name|responseId
parameter_list|,
name|int
name|containerPMem
parameter_list|,
name|int
name|containerVMem
parameter_list|,
name|float
name|containerCPU
parameter_list|,
name|int
name|nodePMem
parameter_list|,
name|int
name|nodeVMem
parameter_list|,
name|float
name|nodeCPU
parameter_list|)
block|{
comment|// Fake node status with fake utilization
name|ResourceUtilization
name|containersUtilization
init|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
name|containerPMem
argument_list|,
name|containerVMem
argument_list|,
name|containerCPU
argument_list|)
decl_stmt|;
name|ResourceUtilization
name|nodeUtilization
init|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
name|nodePMem
argument_list|,
name|nodeVMem
argument_list|,
name|nodeCPU
argument_list|)
decl_stmt|;
name|NodeStatus
name|status
init|=
name|NodeStatus
operator|.
name|newInstance
argument_list|(
name|nodeId
argument_list|,
name|responseId
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
name|NodeHealthStatus
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|,
name|containersUtilization
argument_list|,
name|nodeUtilization
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|status
return|;
block|}
comment|/**    * Verify both the RMNode and SchedulerNode have been updated with the test    * fixture utilization data.    * @param containersUtilization Utilization of the container.    * @param nodeUtilization Utilization of the node.    */
DECL|method|verifySimulatedUtilization ()
specifier|private
name|void
name|verifySimulatedUtilization
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ResourceManager
name|rm
init|=
name|cluster
operator|.
name|getResourceManager
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|ResourceUtilization
name|containersUtilization
init|=
name|nodeStatus
operator|.
name|getContainersUtilization
argument_list|()
decl_stmt|;
name|ResourceUtilization
name|nodeUtilization
init|=
name|nodeStatus
operator|.
name|getNodeUtilization
argument_list|()
decl_stmt|;
comment|// Give the heartbeat time to propagate to the RM (max 10 seconds)
comment|// We check if the nodeUtilization is up to date
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|RMNode
name|ni
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ni
operator|.
name|getNodeUtilization
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeUtilization
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Verify the data is readable from the RM and scheduler nodes
for|for
control|(
name|RMNode
name|ni
range|:
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|ResourceUtilization
name|cu
init|=
name|ni
operator|.
name|getAggregatedContainersUtilization
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Containers Utillization not propagated to RMNode"
argument_list|,
name|containersUtilization
argument_list|,
name|cu
argument_list|)
expr_stmt|;
name|ResourceUtilization
name|nu
init|=
name|ni
operator|.
name|getNodeUtilization
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Node Utillization not propagated to RMNode"
argument_list|,
name|nodeUtilization
argument_list|,
name|nu
argument_list|)
expr_stmt|;
name|SchedulerNode
name|scheduler
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|ni
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|cu
operator|=
name|scheduler
operator|.
name|getAggregatedContainersUtilization
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Containers Utillization not propagated to SchedulerNode"
argument_list|,
name|containersUtilization
argument_list|,
name|cu
argument_list|)
expr_stmt|;
name|nu
operator|=
name|scheduler
operator|.
name|getNodeUtilization
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Node Utillization not propagated to SchedulerNode"
argument_list|,
name|nodeUtilization
argument_list|,
name|nu
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

