begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMNMSecretKeys
specifier|public
class|class
name|TestRMNMSecretKeys
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000000
argument_list|)
DECL|method|testNMUpdation ()
specifier|public
name|void
name|testNMUpdation
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// validating RM NM keys for Unsecured environment
name|validateRMNMKeyExchange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// validating RM NM keys for secured environment
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|validateRMNMKeyExchange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|validateRMNMKeyExchange (YarnConfiguration conf)
specifier|private
name|void
name|validateRMNMKeyExchange
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Default rolling and activation intervals are large enough, no need to
comment|// intervene
specifier|final
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startWepApp
parameter_list|()
block|{
comment|// Don't need it, skip.
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Testing ContainerToken and NMToken
name|String
name|containerToken
init|=
literal|"Container Token : "
decl_stmt|;
name|String
name|nmToken
init|=
literal|"NM Token : "
decl_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"host:1234"
argument_list|,
literal|3072
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|RegisterNodeManagerResponse
name|registrationResponse
init|=
name|nm
operator|.
name|registerNode
argument_list|()
decl_stmt|;
name|MasterKey
name|containerTokenMasterKey
init|=
name|registrationResponse
operator|.
name|getContainerTokenMasterKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerToken
operator|+
literal|"Registration should cause a key-update!"
argument_list|,
name|containerTokenMasterKey
argument_list|)
expr_stmt|;
name|MasterKey
name|nmTokenMasterKey
init|=
name|registrationResponse
operator|.
name|getNMTokenMasterKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nmToken
operator|+
literal|"Registration should cause a key-update!"
argument_list|,
name|nmTokenMasterKey
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|NodeHeartbeatResponse
name|response
init|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerToken
operator|+
literal|"First heartbeat after registration shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nmToken
operator|+
literal|"First heartbeat after registration shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|response
operator|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerToken
operator|+
literal|"Even second heartbeat after registration shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nmToken
operator|+
literal|"Even second heartbeat after registration shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Let's force a roll-over
name|rm
operator|.
name|getRMContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMNMTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
comment|// Heartbeats after roll-over and before activation should be fine.
name|response
operator|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerToken
operator|+
literal|"Heartbeats after roll-over and before activation should not err out."
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nmToken
operator|+
literal|"Heartbeats after roll-over and before activation should not err out."
argument_list|,
name|response
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerToken
operator|+
literal|"Roll-over should have incremented the key-id only by one!"
argument_list|,
name|containerTokenMasterKey
operator|.
name|getKeyId
argument_list|()
operator|+
literal|1
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmToken
operator|+
literal|"Roll-over should have incremented the key-id only by one!"
argument_list|,
name|nmTokenMasterKey
operator|.
name|getKeyId
argument_list|()
operator|+
literal|1
argument_list|,
name|response
operator|.
name|getNMTokenMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|response
operator|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerToken
operator|+
literal|"Second heartbeat after roll-over shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nmToken
operator|+
literal|"Second heartbeat after roll-over shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Let's force activation
name|rm
operator|.
name|getRMContainerTokenSecretManager
argument_list|()
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMNMTokenSecretManager
argument_list|()
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
name|response
operator|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerToken
operator|+
literal|"Activation shouldn't cause any key updates!"
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nmToken
operator|+
literal|"Activation shouldn't cause any key updates!"
argument_list|,
name|response
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|response
operator|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|containerToken
operator|+
literal|"Even second heartbeat after activation shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nmToken
operator|+
literal|"Even second heartbeat after activation shouldn't get any key updates!"
argument_list|,
name|response
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

