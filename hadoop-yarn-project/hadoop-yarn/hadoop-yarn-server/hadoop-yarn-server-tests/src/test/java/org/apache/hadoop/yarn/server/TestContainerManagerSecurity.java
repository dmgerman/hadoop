begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|UnsupportedFileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|AMRMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ApplicationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ApplicationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerManagerSecurity
specifier|public
class|class
name|TestContainerManagerSecurity
block|{
DECL|field|LOG
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerManagerSecurity
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|localFS
specifier|private
specifier|static
name|FileContext
name|localFS
init|=
literal|null
decl_stmt|;
DECL|field|localDir
specifier|private
specifier|static
specifier|final
name|File
name|localDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestContainerManagerSecurity
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|yarnCluster
specifier|private
specifier|static
name|MiniYARNCluster
name|yarnCluster
decl_stmt|;
DECL|field|conf
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|AccessControlException
throws|,
name|FileNotFoundException
throws|,
name|UnsupportedFileSystemException
throws|,
name|IOException
block|{
name|localFS
operator|=
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
expr_stmt|;
name|localFS
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|localDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|localDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
comment|// Set AM expiry interval to be very long.
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
literal|100000L
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestContainerManagerSecurity
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardown ()
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAuthenticatedUser ()
specifier|public
name|void
name|testAuthenticatedUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test for authenticated user"
argument_list|)
expr_stmt|;
name|ResourceManager
name|resourceManager
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
decl_stmt|;
specifier|final
name|YarnRPC
name|yarnRPC
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Submit an application
name|ApplicationId
name|appID
init|=
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getNewApplication
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AMRMProtocol
name|scheduler
init|=
name|submitAndRegisterApplication
argument_list|(
name|resourceManager
argument_list|,
name|yarnRPC
argument_list|,
name|appID
argument_list|)
decl_stmt|;
comment|// Now request a container.
specifier|final
name|Container
name|allocatedContainer
init|=
name|requestAndGetContainer
argument_list|(
name|scheduler
argument_list|,
name|appID
argument_list|)
decl_stmt|;
comment|// Now talk to the NM for launching the container.
specifier|final
name|ContainerId
name|containerID
init|=
name|allocatedContainer
operator|.
name|getId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|authenticatedUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|containerID
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerToken
name|containerToken
init|=
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
argument_list|(
name|containerToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|containerToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|authenticatedUser
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|authenticatedUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerManager
name|client
init|=
operator|(
name|ContainerManager
operator|)
name|yarnRPC
operator|.
name|getProxy
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|allocatedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to make a legal stopContainer() request"
argument_list|)
expr_stmt|;
name|StopContainerRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StopContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
name|client
operator|.
name|stopContainer
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|KillApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaliceUser ()
specifier|public
name|void
name|testMaliceUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test for malice user"
argument_list|)
expr_stmt|;
name|ResourceManager
name|resourceManager
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
decl_stmt|;
specifier|final
name|YarnRPC
name|yarnRPC
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Submit an application
name|ApplicationId
name|appID
init|=
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getNewApplication
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AMRMProtocol
name|scheduler
init|=
name|submitAndRegisterApplication
argument_list|(
name|resourceManager
argument_list|,
name|yarnRPC
argument_list|,
name|appID
argument_list|)
decl_stmt|;
comment|// Now request a container.
specifier|final
name|Container
name|allocatedContainer
init|=
name|requestAndGetContainer
argument_list|(
name|scheduler
argument_list|,
name|appID
argument_list|)
decl_stmt|;
comment|// Now talk to the NM for launching the container with modified resource
specifier|final
name|ContainerId
name|containerID
init|=
name|allocatedContainer
operator|.
name|getId
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|maliceUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|containerID
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerToken
name|containerToken
init|=
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
decl_stmt|;
name|byte
index|[]
name|identifierBytes
init|=
name|containerToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|di
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|di
operator|.
name|reset
argument_list|(
name|identifierBytes
argument_list|,
name|identifierBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|ContainerTokenIdentifier
name|dummyIdentifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|()
decl_stmt|;
name|dummyIdentifier
operator|.
name|readFields
argument_list|(
name|di
argument_list|)
expr_stmt|;
comment|// Malice user modifies the resource amount
name|Resource
name|modifiedResource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerTokenIdentifier
name|modifiedIdentifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|dummyIdentifier
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|dummyIdentifier
operator|.
name|getNmHostAddress
argument_list|()
argument_list|,
literal|"testUser"
argument_list|,
name|modifiedResource
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|dummyIdentifier
operator|.
name|getMasterKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
name|modifiedToken
init|=
operator|new
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
argument_list|(
name|modifiedIdentifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|containerToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|maliceUser
operator|.
name|addToken
argument_list|(
name|modifiedToken
argument_list|)
expr_stmt|;
name|maliceUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|ContainerManager
name|client
init|=
operator|(
name|ContainerManager
operator|)
name|yarnRPC
operator|.
name|getProxy
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|allocatedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to contact NM:  ilLegal request"
argument_list|)
expr_stmt|;
name|GetContainerStatusRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerStatusRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|containerID
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|getContainerStatus
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Connection initiation with illegally modified "
operator|+
literal|"tokens is expected to fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Cannot get a YARN remote exception as "
operator|+
literal|"it will indicate RPC success"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"DIGEST-MD5: digest response format violation. "
operator|+
literal|"Mismatched response."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|KillApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnauthorizedUser ()
specifier|public
name|void
name|testUnauthorizedUser
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnRemoteException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\nRunning test for malice user"
argument_list|)
expr_stmt|;
name|ResourceManager
name|resourceManager
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
decl_stmt|;
specifier|final
name|YarnRPC
name|yarnRPC
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Submit an application
specifier|final
name|ApplicationId
name|appID
init|=
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getNewApplication
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|AMRMProtocol
name|scheduler
init|=
name|submitAndRegisterApplication
argument_list|(
name|resourceManager
argument_list|,
name|yarnRPC
argument_list|,
name|appID
argument_list|)
decl_stmt|;
comment|// Now request a container.
specifier|final
name|Container
name|allocatedContainer
init|=
name|requestAndGetContainer
argument_list|(
name|scheduler
argument_list|,
name|appID
argument_list|)
decl_stmt|;
comment|// Now talk to the NM for launching the container with modified containerID
specifier|final
name|ContainerId
name|containerID
init|=
name|allocatedContainer
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|/////////// Test calls with illegal containerIDs and illegal Resources
name|UserGroupInformation
name|unauthorizedUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|containerID
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerToken
name|containerToken
init|=
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
decl_stmt|;
name|byte
index|[]
name|identifierBytes
init|=
name|containerToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|di
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|di
operator|.
name|reset
argument_list|(
name|identifierBytes
argument_list|,
name|identifierBytes
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|ContainerTokenIdentifier
name|tokenId
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|()
decl_stmt|;
name|tokenId
operator|.
name|readFields
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
argument_list|(
name|identifierBytes
argument_list|,
name|containerToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|unauthorizedUser
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|ContainerManager
name|client
init|=
name|unauthorizedUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ContainerManager
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerManager
name|run
parameter_list|()
block|{
name|ContainerManager
name|client
init|=
operator|(
name|ContainerManager
operator|)
name|yarnRPC
operator|.
name|getProxy
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|allocatedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to contact NM:  unauthorized request"
argument_list|)
expr_stmt|;
name|callWithIllegalContainerID
argument_list|(
name|client
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
name|callWithIllegalResource
argument_list|(
name|client
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
name|callWithIllegalUserName
argument_list|(
name|client
argument_list|,
name|tokenId
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// ///////// End of testing for illegal containerIDs, illegal Resources and
comment|// illegal users
comment|/////////// Test calls with expired tokens
name|RPC
operator|.
name|stopProxy
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|unauthorizedUser
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|containerID
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|RMContainerTokenSecretManager
name|containerTokenSecreteManager
init|=
name|resourceManager
operator|.
name|getRMContainerTokenSecretManager
argument_list|()
decl_stmt|;
specifier|final
name|ContainerTokenIdentifier
name|newTokenId
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|tokenId
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getNmHostAddress
argument_list|()
argument_list|,
literal|"testUser"
argument_list|,
name|tokenId
operator|.
name|getResource
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1
argument_list|,
name|containerTokenSecreteManager
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|passowrd
init|=
name|containerTokenSecreteManager
operator|.
name|createPassword
argument_list|(
name|newTokenId
argument_list|)
decl_stmt|;
comment|// Create a valid token by using the key from the RM.
name|token
operator|=
operator|new
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
argument_list|(
name|newTokenId
operator|.
name|getBytes
argument_list|()
argument_list|,
name|passowrd
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|unauthorizedUser
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|unauthorizedUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|ContainerManager
name|client
init|=
operator|(
name|ContainerManager
operator|)
name|yarnRPC
operator|.
name|getProxy
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|,
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|allocatedContainer
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to contact NM with expired token"
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|context
init|=
name|createContainerLaunchContextForTest
argument_list|(
name|newTokenId
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|newTokenId
operator|.
name|getContainerID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
name|newTokenId
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
name|newTokenId
operator|.
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerLaunchContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
comment|//Calling startContainer with an expired token.
try|try
block|{
name|client
operator|.
name|startContainer
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Connection initiation with expired "
operator|+
literal|"token is expected to fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception : "
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This token is expired. current time is"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Try stopping a container - should not get an expiry error.
name|StopContainerRequest
name|stopRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|StopContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|stopRequest
operator|.
name|setContainerId
argument_list|(
name|newTokenId
operator|.
name|getContainerID
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|stopContainer
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Stop Container call should have succeeded"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/////////// End of testing calls with expired tokens
name|KillApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|method|submitAndRegisterApplication ( ResourceManager resourceManager, final YarnRPC yarnRPC, ApplicationId appID)
specifier|private
name|AMRMProtocol
name|submitAndRegisterApplication
parameter_list|(
name|ResourceManager
name|resourceManager
parameter_list|,
specifier|final
name|YarnRPC
name|yarnRPC
parameter_list|,
name|ApplicationId
name|appID
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedFileSystemException
throws|,
name|YarnRemoteException
throws|,
name|InterruptedException
block|{
comment|// Use ping to simulate sleep on Windows.
name|List
argument_list|<
name|String
argument_list|>
name|cmd
init|=
name|Shell
operator|.
name|WINDOWS
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ping"
argument_list|,
literal|"-n"
argument_list|,
literal|"100"
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|">nul"
argument_list|)
else|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep"
argument_list|,
literal|"100"
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|amContainer
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
literal|"testUser"
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|LocalResource
operator|>
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|cmd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|appSubmissionContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|appSubmissionContext
operator|.
name|setApplicationId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|appSubmissionContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|appSubmissionContext
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|setUser
argument_list|(
literal|"testUser"
argument_list|)
expr_stmt|;
name|appSubmissionContext
operator|.
name|setResource
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|SubmitApplicationRequest
name|submitRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|submitRequest
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|appSubmissionContext
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
operator|.
name|submitApplication
argument_list|(
name|submitRequest
argument_list|)
expr_stmt|;
comment|// Wait till container gets allocated for AM
name|int
name|waitCounter
init|=
literal|0
decl_stmt|;
name|RMApp
name|app
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|RMAppAttemptState
name|state
init|=
name|appAttempt
operator|==
literal|null
condition|?
literal|null
else|:
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|app
operator|==
literal|null
operator|||
name|appAttempt
operator|==
literal|null
operator|||
name|state
operator|==
literal|null
operator|||
operator|!
name|state
operator|.
name|equals
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
operator|)
operator|&&
name|waitCounter
operator|++
operator|!=
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for applicationAttempt to be created.. "
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|app
operator|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|appAttempt
operator|=
name|app
operator|==
literal|null
condition|?
literal|null
else|:
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
name|state
operator|=
name|appAttempt
operator|==
literal|null
condition|?
literal|null
else|:
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ask for a container from the RM
specifier|final
name|InetSocketAddress
name|schedulerAddr
init|=
name|resourceManager
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|ApplicationTokenIdentifier
name|appTokenIdentifier
init|=
operator|new
name|ApplicationTokenIdentifier
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationTokenSecretManager
name|appTokenSecretManager
init|=
operator|new
name|ApplicationTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|appTokenSecretManager
operator|.
name|setMasterKey
argument_list|(
name|resourceManager
operator|.
name|getApplicationTokenSecretManager
argument_list|()
operator|.
name|getMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
name|appToken
init|=
operator|new
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
argument_list|(
name|appTokenIdentifier
argument_list|,
name|appTokenSecretManager
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|appToken
argument_list|,
name|schedulerAddr
argument_list|)
expr_stmt|;
name|currentUser
operator|.
name|addToken
argument_list|(
name|appToken
argument_list|)
expr_stmt|;
name|AMRMProtocol
name|scheduler
init|=
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|AMRMProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AMRMProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|AMRMProtocol
operator|)
name|yarnRPC
operator|.
name|getProxy
argument_list|(
name|AMRMProtocol
operator|.
name|class
argument_list|,
name|schedulerAddr
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Register the appMaster
name|RegisterApplicationMasterRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationAttemptId
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|scheduler
return|;
block|}
DECL|method|requestAndGetContainer (AMRMProtocol scheduler, ApplicationId appID)
specifier|private
name|Container
name|requestAndGetContainer
parameter_list|(
name|AMRMProtocol
name|scheduler
parameter_list|,
name|ApplicationId
name|appID
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|InterruptedException
block|{
comment|// Request a container allocation.
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|BuilderUtils
operator|.
name|newPriority
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|BuilderUtils
operator|.
name|newAllocateRequest
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appID
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0F
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|scheduler
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
comment|// Modify ask to request no more.
name|allocateRequest
operator|.
name|setAskList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|waitCounter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|allocatedContainers
operator|==
literal|null
operator|||
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
name|waitCounter
operator|++
operator|!=
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for container to be allocated.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
name|allocateRequest
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|allocatedContainers
operator|=
name|scheduler
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Container is not allocted!"
argument_list|,
name|allocatedContainers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Didn't get one container!"
argument_list|,
literal|1
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|callWithIllegalContainerID (ContainerManager client, ContainerTokenIdentifier tokenId)
name|void
name|callWithIllegalContainerID
parameter_list|(
name|ContainerManager
name|client
parameter_list|,
name|ContainerTokenIdentifier
name|tokenId
parameter_list|)
block|{
name|GetContainerStatusRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerStatusRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|newContainerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|tokenId
operator|.
name|getContainerID
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|newContainerId
argument_list|)
expr_stmt|;
comment|// Authenticated but
comment|// unauthorized.
try|try
block|{
name|client
operator|.
name|getContainerStatus
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Connection initiation with unauthorized "
operator|+
literal|"access is expected to fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unauthorized request to start container. "
operator|+
literal|"\nExpected containerId: "
operator|+
name|tokenId
operator|.
name|getContainerID
argument_list|()
operator|+
literal|" Found: "
operator|+
name|newContainerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|callWithIllegalResource (ContainerManager client, ContainerTokenIdentifier tokenId)
name|void
name|callWithIllegalResource
parameter_list|(
name|ContainerManager
name|client
parameter_list|,
name|ContainerTokenIdentifier
name|tokenId
parameter_list|)
block|{
name|StartContainerRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Authenticated but unauthorized, due to wrong resource
name|ContainerLaunchContext
name|context
init|=
name|createContainerLaunchContextForTest
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|tokenId
operator|.
name|getContainerID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerLaunchContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|startContainer
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Connection initiation with unauthorized "
operator|+
literal|"access is expected to fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unauthorized request to start container. "
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"\nExpected resource "
operator|+
name|tokenId
operator|.
name|getResource
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" but found "
operator|+
name|container
operator|.
name|getResource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|callWithIllegalUserName (ContainerManager client, ContainerTokenIdentifier tokenId)
name|void
name|callWithIllegalUserName
parameter_list|(
name|ContainerManager
name|client
parameter_list|,
name|ContainerTokenIdentifier
name|tokenId
parameter_list|)
block|{
name|StartContainerRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Authenticated but unauthorized, due to wrong resource
name|ContainerLaunchContext
name|context
init|=
name|createContainerLaunchContextForTest
argument_list|(
name|tokenId
argument_list|)
decl_stmt|;
name|context
operator|.
name|setUser
argument_list|(
literal|"Saruman"
argument_list|)
expr_stmt|;
comment|// Set a different user-name.
name|Container
name|container
init|=
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|tokenId
operator|.
name|getContainerID
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
name|tokenId
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
name|tokenId
operator|.
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerLaunchContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|request
operator|.
name|setContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|startContainer
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Connection initiation with unauthorized "
operator|+
literal|"access is expected to fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unauthorized request to start container. "
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Expected user-name "
operator|+
name|tokenId
operator|.
name|getApplicationSubmitter
argument_list|()
operator|+
literal|" but found "
operator|+
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContainerLaunchContextForTest ( ContainerTokenIdentifier tokenId)
specifier|private
name|ContainerLaunchContext
name|createContainerLaunchContextForTest
parameter_list|(
name|ContainerTokenIdentifier
name|tokenId
parameter_list|)
block|{
name|ContainerLaunchContext
name|context
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
literal|"testUser"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|context
return|;
block|}
block|}
end_class

end_unit

