begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|KerberosSecurityTestcase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManagementProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SerializedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|ContainerManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestContainerManagerSecurity
specifier|public
class|class
name|TestContainerManagerSecurity
extends|extends
name|KerberosSecurityTestcase
block|{
DECL|field|LOG
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerManagerSecurity
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|yarnCluster
specifier|private
specifier|static
name|MiniYARNCluster
name|yarnCluster
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
specifier|final
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestContainerManagerSecurity
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-root"
argument_list|)
decl_stmt|;
DECL|field|httpSpnegoKeytabFile
specifier|private
specifier|static
name|File
name|httpSpnegoKeytabFile
init|=
operator|new
name|File
argument_list|(
name|testRootDir
argument_list|,
literal|"httpSpnegoKeytabFile.keytab"
argument_list|)
decl_stmt|;
DECL|field|httpSpnegoPrincipal
specifier|private
specifier|static
name|String
name|httpSpnegoPrincipal
init|=
literal|"HTTP/localhost@EXAMPLE.COM"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|testRootDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|httpSpnegoKeytabFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
name|httpSpnegoKeytabFile
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|testRootDir
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|configs ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|configs
parameter_list|()
block|{
name|Configuration
name|configurationWithoutSecurity
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configurationWithoutSecurity
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|Configuration
name|configurationWithSecurity
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configurationWithSecurity
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|configurationWithSecurity
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_SPNEGO_USER_NAME_KEY
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|configurationWithSecurity
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|configurationWithSecurity
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_SPNEGO_USER_NAME_KEY
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|configurationWithSecurity
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|configurationWithoutSecurity
block|}
block|,
block|{
name|configurationWithSecurity
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestContainerManagerSecurity (Configuration conf)
specifier|public
name|TestContainerManagerSecurity
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
literal|100000L
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000000
argument_list|)
DECL|method|testContainerManager ()
specifier|public
name|void
name|testContainerManager
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestContainerManagerSecurity
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// TestNMTokens.
name|testNMTokens
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Testing for container token tampering
name|testContainerToken
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
condition|)
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|yarnCluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNMTokens (Configuration conf)
specifier|private
name|void
name|testNMTokens
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|NMTokenSecretManagerInRM
name|nmTokenSecretManagerRM
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
decl_stmt|;
name|NMTokenSecretManagerInNM
name|nmTokenSecretManagerNM
init|=
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
decl_stmt|;
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
decl_stmt|;
name|NodeManager
name|nm
init|=
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|waitForNMToReceiveNMTokenKey
argument_list|(
name|nmTokenSecretManagerNM
argument_list|,
name|nm
argument_list|)
expr_stmt|;
comment|// Both id should be equal.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmTokenSecretManagerNM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|nmTokenSecretManagerRM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Below cases should be tested.      * 1) If Invalid NMToken is used then it should be rejected.      * 2) If valid NMToken but belonging to another Node is used then that      * too should be rejected.      * 3) NMToken for say appAttempt-1 is used for starting/stopping/retrieving      * status for container with containerId for say appAttempt-2 should      * be rejected.      * 4) After start container call is successful nmtoken should have been      * saved in NMTokenSecretManagerInNM.      * 5) If start container call was successful (no matter if container is      * still running or not), appAttempt->NMToken should be present in      * NMTokenSecretManagerInNM's cache. Any future getContainerStatus call      * for containerId belonging to that application attempt using      * applicationAttempt's older nmToken should not get any invalid      * nmToken error. (This can be best tested if we roll over NMToken      * master key twice).      */
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|user
init|=
literal|"test"
decl_stmt|;
name|Resource
name|r
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|validAppAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|invalidAppAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerId
name|validContainerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|validAppAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeId
name|validNode
init|=
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|NodeId
name|invalidNode
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"InvalidHost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|validNMToken
init|=
name|nmTokenSecretManagerRM
operator|.
name|createNMToken
argument_list|(
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|validContainerToken
init|=
name|containerTokenSecretManager
operator|.
name|createContainerToken
argument_list|(
name|validContainerId
argument_list|,
name|validNode
argument_list|,
name|user
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
decl_stmt|;
comment|// testInvalidNMToken ... creating NMToken using different secret manager.
name|NMTokenSecretManagerInRM
name|tempManager
init|=
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tempManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
do|do
block|{
name|tempManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|tempManager
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
comment|// Making sure key id is different.
block|}
do|while
condition|(
name|tempManager
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|nmTokenSecretManagerRM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
do|;
comment|// Testing that NM rejects the requests when we don't send any token.
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Client cannot authenticate via:[TOKEN]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"SIMPLE authentication is not enabled.  Available:[TOKEN]"
argument_list|)
expr_stmt|;
block|}
name|String
name|errorMsg
init|=
name|testStartContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerToken
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|errorMsg
operator|.
name|contains
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|invalidNMToken
init|=
name|tempManager
operator|.
name|createNMToken
argument_list|(
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Given NMToken for application : "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|validAppAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" seems to have been generated illegally."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|testStartContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerToken
argument_list|,
name|invalidNMToken
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// valid NMToken but belonging to other node
name|invalidNMToken
operator|=
name|nmTokenSecretManagerRM
operator|.
name|createNMToken
argument_list|(
name|validAppAttemptId
argument_list|,
name|invalidNode
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Given NMToken for application : "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|validAppAttemptId
argument_list|)
operator|.
name|append
argument_list|(
literal|" is not valid for current node manager.expected : "
argument_list|)
operator|.
name|append
argument_list|(
name|validNode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" found : "
argument_list|)
operator|.
name|append
argument_list|(
name|invalidNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|testStartContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerToken
argument_list|,
name|invalidNMToken
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// using appAttempt-2 token for launching container for appAttempt-1.
name|invalidNMToken
operator|=
name|nmTokenSecretManagerRM
operator|.
name|createNMToken
argument_list|(
name|invalidAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"\nNMToken for application attempt : "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|invalidAppAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" was used for starting container with container token"
argument_list|)
operator|.
name|append
argument_list|(
literal|" issued for application attempt : "
argument_list|)
operator|.
name|append
argument_list|(
name|validAppAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testStartContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerToken
argument_list|,
name|invalidNMToken
argument_list|,
literal|true
argument_list|)
operator|.
name|contains
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// using correct tokens. nmtoken for app attempt should get saved.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
argument_list|,
literal|4
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|validContainerToken
operator|=
name|containerTokenSecretManager
operator|.
name|createContainerToken
argument_list|(
name|validContainerId
argument_list|,
name|validNode
argument_list|,
name|user
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|testStartContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerToken
argument_list|,
name|validNMToken
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nmTokenSecretManagerNM
operator|.
name|isAppAttemptNMTokenKeyPresent
argument_list|(
name|validAppAttemptId
argument_list|)
argument_list|)
expr_stmt|;
comment|//Now lets wait till container finishes and is removed from node manager.
name|waitForContainerToFinishOnNM
argument_list|(
name|validContainerId
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Attempt to relaunch the same container with id "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|validContainerId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testStartContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerToken
argument_list|,
name|validNMToken
argument_list|,
literal|true
argument_list|)
operator|.
name|contains
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Container is removed from node manager's memory by this time.
comment|// trying to stop the container. It should not throw any exception.
name|testStopContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerId
argument_list|,
name|validNMToken
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Rolling over master key twice so that we can check whether older keys
comment|// are used for authentication.
name|rollNMTokenMasterKey
argument_list|(
name|nmTokenSecretManagerRM
argument_list|,
name|nmTokenSecretManagerNM
argument_list|)
expr_stmt|;
comment|// Key rolled over once.. rolling over again
name|rollNMTokenMasterKey
argument_list|(
name|nmTokenSecretManagerRM
argument_list|,
name|nmTokenSecretManagerNM
argument_list|)
expr_stmt|;
comment|// trying get container status. Now saved nmToken should be used for
comment|// authentication... It should complain saying container was recently
comment|// stopped.
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Container "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|validContainerId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" was recently stopped on node manager"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testGetContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerId
argument_list|,
name|validNMToken
argument_list|,
literal|true
argument_list|)
operator|.
name|contains
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now lets remove the container from nm-memory
name|nm
operator|.
name|getNodeStatusUpdater
argument_list|()
operator|.
name|clearFinishedContainersFromCache
argument_list|()
expr_stmt|;
comment|// This should fail as container is removed from recently tracked finished
comment|// containers.
name|sb
operator|=
operator|new
name|StringBuilder
argument_list|(
literal|"Container "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|validContainerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" is not handled by this NodeManager"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testGetContainer
argument_list|(
name|rpc
argument_list|,
name|validAppAttemptId
argument_list|,
name|validNode
argument_list|,
name|validContainerId
argument_list|,
name|validNMToken
argument_list|,
literal|false
argument_list|)
operator|.
name|contains
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForContainerToFinishOnNM (ContainerId containerId)
specifier|private
name|void
name|waitForContainerToFinishOnNM
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|Context
name|nmContet
init|=
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
operator|.
name|getNMContext
argument_list|()
decl_stmt|;
name|int
name|interval
init|=
literal|4
operator|*
literal|60
decl_stmt|;
comment|// Max time for container token to expire.
while|while
condition|(
operator|(
name|interval
operator|--
operator|>
literal|0
operator|)
operator|&&
name|nmContet
operator|.
name|getContainers
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nmContet
operator|.
name|getContainers
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNMToReceiveNMTokenKey ( NMTokenSecretManagerInNM nmTokenSecretManagerNM, NodeManager nm)
specifier|protected
name|void
name|waitForNMToReceiveNMTokenKey
parameter_list|(
name|NMTokenSecretManagerInNM
name|nmTokenSecretManagerNM
parameter_list|,
name|NodeManager
name|nm
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|attempt
init|=
literal|60
decl_stmt|;
name|ContainerManagerImpl
name|cm
init|=
operator|(
operator|(
name|ContainerManagerImpl
operator|)
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getContainerManager
argument_list|()
operator|)
decl_stmt|;
while|while
condition|(
operator|(
name|cm
operator|.
name|getBlockNewContainerRequestsStatus
argument_list|()
operator|||
name|nmTokenSecretManagerNM
operator|.
name|getNodeId
argument_list|()
operator|==
literal|null
operator|)
operator|&&
name|attempt
operator|--
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rollNMTokenMasterKey ( NMTokenSecretManagerInRM nmTokenSecretManagerRM, NMTokenSecretManagerInNM nmTokenSecretManagerNM)
specifier|protected
name|void
name|rollNMTokenMasterKey
parameter_list|(
name|NMTokenSecretManagerInRM
name|nmTokenSecretManagerRM
parameter_list|,
name|NMTokenSecretManagerInNM
name|nmTokenSecretManagerNM
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|oldKeyId
init|=
name|nmTokenSecretManagerRM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
decl_stmt|;
name|nmTokenSecretManagerRM
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|int
name|interval
init|=
literal|40
decl_stmt|;
while|while
condition|(
name|nmTokenSecretManagerNM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|oldKeyId
operator|&&
name|interval
operator|--
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|nmTokenSecretManagerRM
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|nmTokenSecretManagerNM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|nmTokenSecretManagerRM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testStopContainer (YarnRPC rpc, ApplicationAttemptId appAttemptId, NodeId nodeId, ContainerId containerId, Token nmToken, boolean isExceptionExpected)
specifier|private
name|String
name|testStopContainer
parameter_list|(
name|YarnRPC
name|rpc
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Token
name|nmToken
parameter_list|,
name|boolean
name|isExceptionExpected
parameter_list|)
block|{
try|try
block|{
name|stopContainer
argument_list|(
name|rpc
argument_list|,
name|nmToken
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ContainerId
index|[]
block|{
name|containerId
block|}
argument_list|)
argument_list|,
name|appAttemptId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExceptionExpected
condition|)
block|{
name|fail
argument_list|(
literal|"Exception was expected!!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
DECL|method|testGetContainer (YarnRPC rpc, ApplicationAttemptId appAttemptId, NodeId nodeId, ContainerId containerId, org.apache.hadoop.yarn.api.records.Token nmToken, boolean isExceptionExpected)
specifier|private
name|String
name|testGetContainer
parameter_list|(
name|YarnRPC
name|rpc
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|nmToken
parameter_list|,
name|boolean
name|isExceptionExpected
parameter_list|)
block|{
try|try
block|{
name|getContainerStatus
argument_list|(
name|rpc
argument_list|,
name|nmToken
argument_list|,
name|containerId
argument_list|,
name|appAttemptId
argument_list|,
name|nodeId
argument_list|,
name|isExceptionExpected
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExceptionExpected
condition|)
block|{
name|fail
argument_list|(
literal|"Exception was expected!!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
DECL|method|testStartContainer (YarnRPC rpc, ApplicationAttemptId appAttemptId, NodeId nodeId, org.apache.hadoop.yarn.api.records.Token containerToken, org.apache.hadoop.yarn.api.records.Token nmToken, boolean isExceptionExpected)
specifier|private
name|String
name|testStartContainer
parameter_list|(
name|YarnRPC
name|rpc
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|containerToken
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|nmToken
parameter_list|,
name|boolean
name|isExceptionExpected
parameter_list|)
block|{
try|try
block|{
name|startContainer
argument_list|(
name|rpc
argument_list|,
name|nmToken
argument_list|,
name|containerToken
argument_list|,
name|nodeId
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isExceptionExpected
condition|)
block|{
name|fail
argument_list|(
literal|"Exception was expected!!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|""
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
DECL|method|stopContainer (YarnRPC rpc, Token nmToken, List<ContainerId> containerId, ApplicationAttemptId appAttemptId, NodeId nodeId)
specifier|private
name|void
name|stopContainer
parameter_list|(
name|YarnRPC
name|rpc
parameter_list|,
name|Token
name|nmToken
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerId
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
throws|throws
name|Exception
block|{
name|StopContainersRequest
name|request
init|=
name|StopContainersRequest
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|ContainerManagementProtocol
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|getContainerManagementProtocolProxy
argument_list|(
name|rpc
argument_list|,
name|nmToken
argument_list|,
name|nodeId
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|StopContainersResponse
name|response
init|=
name|proxy
operator|.
name|stopContainers
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|!=
literal|null
operator|&&
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|parseAndThrowException
argument_list|(
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|.
name|deSerialize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|rpc
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
DECL|method|getContainerStatus (YarnRPC rpc, org.apache.hadoop.yarn.api.records.Token nmToken, ContainerId containerId, ApplicationAttemptId appAttemptId, NodeId nodeId, boolean isExceptionExpected)
name|getContainerStatus
parameter_list|(
name|YarnRPC
name|rpc
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|nmToken
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|boolean
name|isExceptionExpected
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|GetContainerStatusesRequest
name|request
init|=
name|GetContainerStatusesRequest
operator|.
name|newInstance
argument_list|(
name|containerIds
argument_list|)
decl_stmt|;
name|ContainerManagementProtocol
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|getContainerManagementProtocolProxy
argument_list|(
name|rpc
argument_list|,
name|nmToken
argument_list|,
name|nodeId
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|GetContainerStatusesResponse
name|statuses
init|=
name|proxy
operator|.
name|getContainerStatuses
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|statuses
operator|.
name|getFailedRequests
argument_list|()
operator|!=
literal|null
operator|&&
name|statuses
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|containsKey
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|parseAndThrowException
argument_list|(
name|statuses
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|.
name|deSerialize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|rpc
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startContainer (final YarnRPC rpc, org.apache.hadoop.yarn.api.records.Token nmToken, org.apache.hadoop.yarn.api.records.Token containerToken, NodeId nodeId, String user)
specifier|private
name|void
name|startContainer
parameter_list|(
specifier|final
name|YarnRPC
name|rpc
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|nmToken
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|containerToken
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
name|ContainerLaunchContext
name|context
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|StartContainerRequest
name|scRequest
init|=
name|StartContainerRequest
operator|.
name|newInstance
argument_list|(
name|context
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|StartContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|scRequest
argument_list|)
expr_stmt|;
name|StartContainersRequest
name|allRequests
init|=
name|StartContainersRequest
operator|.
name|newInstance
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|ContainerManagementProtocol
name|proxy
init|=
literal|null
decl_stmt|;
try|try
block|{
name|proxy
operator|=
name|getContainerManagementProtocolProxy
argument_list|(
name|rpc
argument_list|,
name|nmToken
argument_list|,
name|nodeId
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|StartContainersResponse
name|response
init|=
name|proxy
operator|.
name|startContainers
argument_list|(
name|allRequests
argument_list|)
decl_stmt|;
for|for
control|(
name|SerializedException
name|ex
range|:
name|response
operator|.
name|getFailedRequests
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|parseAndThrowException
argument_list|(
name|ex
operator|.
name|deSerialize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|rpc
operator|.
name|stopProxy
argument_list|(
name|proxy
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseAndThrowException (Throwable t)
specifier|private
name|void
name|parseAndThrowException
parameter_list|(
name|Throwable
name|t
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|t
operator|instanceof
name|YarnException
condition|)
block|{
throw|throw
operator|(
name|YarnException
operator|)
name|t
throw|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|InvalidToken
condition|)
block|{
throw|throw
operator|(
name|InvalidToken
operator|)
name|t
throw|;
block|}
else|else
block|{
throw|throw
operator|(
name|IOException
operator|)
name|t
throw|;
block|}
block|}
DECL|method|getContainerManagementProtocolProxy ( final YarnRPC rpc, org.apache.hadoop.yarn.api.records.Token nmToken, NodeId nodeId, String user)
specifier|protected
name|ContainerManagementProtocol
name|getContainerManagementProtocolProxy
parameter_list|(
specifier|final
name|YarnRPC
name|rpc
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|nmToken
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|ContainerManagementProtocol
name|proxy
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nmToken
operator|!=
literal|null
condition|)
block|{
name|ugi
operator|.
name|addToken
argument_list|(
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|nmToken
argument_list|,
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ContainerManagementProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerManagementProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ContainerManagementProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ContainerManagementProtocol
operator|.
name|class
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
comment|/**    * This tests a malice user getting a proper token but then messing with it by    * tampering with containerID/Resource etc.. His/her containers should be    * rejected.    *     * @throws IOException    * @throws InterruptedException    * @throws YarnException    */
DECL|method|testContainerToken (Configuration conf)
specifier|private
name|void
name|testContainerToken
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|YarnException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test for malice user"
argument_list|)
expr_stmt|;
comment|/*      * We need to check for containerToken (authorization).      * Here we will be assuming that we have valid NMToken        * 1) ContainerToken used is expired.      * 2) ContainerToken is tampered (resource is modified).      */
name|NMTokenSecretManagerInRM
name|nmTokenSecretManagerInRM
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeManager
name|nm
init|=
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NMTokenSecretManagerInNM
name|nmTokenSecretManagerInNM
init|=
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
decl_stmt|;
name|String
name|user
init|=
literal|"test"
decl_stmt|;
name|waitForNMToReceiveNMTokenKey
argument_list|(
name|nmTokenSecretManagerInNM
argument_list|,
name|nm
argument_list|)
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
comment|// Both id should be equal.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmTokenSecretManagerInNM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|nmTokenSecretManagerInRM
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Creating a tampered Container Token
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
decl_stmt|;
name|RMContainerTokenSecretManager
name|tamperedContainerTokenSecretManager
init|=
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|tamperedContainerTokenSecretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
do|do
block|{
name|tamperedContainerTokenSecretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|tamperedContainerTokenSecretManager
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|containerTokenSecretManager
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|tamperedContainerTokenSecretManager
operator|.
name|getCurrentKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
do|;
name|Resource
name|r
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1230
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Creating modified containerToken
name|Token
name|containerToken
init|=
name|tamperedContainerTokenSecretManager
operator|.
name|createContainerToken
argument_list|(
name|cId
argument_list|,
name|nodeId
argument_list|,
name|user
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|Token
name|nmToken
init|=
name|nmTokenSecretManagerInRM
operator|.
name|createNMToken
argument_list|(
name|appAttemptId
argument_list|,
name|nodeId
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Given Container "
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" seems to have an illegally generated token."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|testStartContainer
argument_list|(
name|rpc
argument_list|,
name|appAttemptId
argument_list|,
name|nodeId
argument_list|,
name|containerToken
argument_list|,
name|nmToken
argument_list|,
literal|true
argument_list|)
operator|.
name|contains
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

