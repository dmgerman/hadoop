begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|CancelDelegationTokenRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|RenewDelegationTokenRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|CancelDelegationTokenRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|RenewDelegationTokenRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestYarnApiClasses
specifier|public
class|class
name|TestYarnApiClasses
block|{
DECL|field|recordFactory
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|/**    * Simple test Resource request.    * Test hashCode, equals and compare.    */
annotation|@
name|Test
DECL|method|testResourceRequest ()
specifier|public
name|void
name|testResourceRequest
parameter_list|()
block|{
name|Resource
name|resource
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|Priority
name|priority
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceRequest
name|original
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|,
literal|"localhost"
argument_list|,
name|resource
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ResourceRequest
name|copy
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|,
literal|"localhost"
argument_list|,
name|resource
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|equals
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|original
operator|.
name|compareTo
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|original
operator|.
name|hashCode
argument_list|()
operator|==
name|copy
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setNumContainers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|original
operator|.
name|equals
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
literal|0
argument_list|,
name|original
operator|.
name|compareTo
argument_list|(
name|copy
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|original
operator|.
name|hashCode
argument_list|()
operator|==
name|copy
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**   * Test CancelDelegationTokenRequestPBImpl.   * Test a transformation to prototype and back   */
annotation|@
name|Test
DECL|method|testCancelDelegationTokenRequestPBImpl ()
specifier|public
name|void
name|testCancelDelegationTokenRequestPBImpl
parameter_list|()
block|{
name|Token
name|token
init|=
name|getDelegationToken
argument_list|()
decl_stmt|;
name|CancelDelegationTokenRequestPBImpl
name|original
init|=
operator|new
name|CancelDelegationTokenRequestPBImpl
argument_list|()
decl_stmt|;
name|original
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|CancelDelegationTokenRequestProto
name|protoType
init|=
name|original
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|CancelDelegationTokenRequestPBImpl
name|copy
init|=
operator|new
name|CancelDelegationTokenRequestPBImpl
argument_list|(
name|protoType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copy
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare source and converted
name|assertEquals
argument_list|(
name|token
argument_list|,
name|copy
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**   * Test RenewDelegationTokenRequestPBImpl.   * Test a transformation to prototype and back   */
annotation|@
name|Test
DECL|method|testRenewDelegationTokenRequestPBImpl ()
specifier|public
name|void
name|testRenewDelegationTokenRequestPBImpl
parameter_list|()
block|{
name|Token
name|token
init|=
name|getDelegationToken
argument_list|()
decl_stmt|;
name|RenewDelegationTokenRequestPBImpl
name|original
init|=
operator|new
name|RenewDelegationTokenRequestPBImpl
argument_list|()
decl_stmt|;
name|original
operator|.
name|setDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|RenewDelegationTokenRequestProto
name|protoType
init|=
name|original
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|RenewDelegationTokenRequestPBImpl
name|copy
init|=
operator|new
name|RenewDelegationTokenRequestPBImpl
argument_list|(
name|protoType
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|copy
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
comment|//compare source and converted
name|assertEquals
argument_list|(
name|token
argument_list|,
name|copy
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getDelegationToken ()
specifier|private
name|Token
name|getDelegationToken
parameter_list|()
block|{
return|return
name|Token
operator|.
name|newInstance
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

