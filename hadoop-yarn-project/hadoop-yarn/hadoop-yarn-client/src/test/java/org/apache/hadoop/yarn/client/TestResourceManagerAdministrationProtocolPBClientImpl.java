begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceStateChangeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|DecommissionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|impl
operator|.
name|pb
operator|.
name|client
operator|.
name|ResourceManagerAdministrationProtocolPBClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test ResourceManagerAdministrationProtocolPBClientImpl. Test a methods and the proxy without  logic.  */
end_comment

begin_class
DECL|class|TestResourceManagerAdministrationProtocolPBClientImpl
specifier|public
class|class
name|TestResourceManagerAdministrationProtocolPBClientImpl
block|{
DECL|field|resourceManager
specifier|private
specifier|static
name|ResourceManager
name|resourceManager
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestResourceManagerAdministrationProtocolPBClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|ResourceManagerAdministrationProtocol
name|client
decl_stmt|;
comment|/**    * Start resource manager server    */
annotation|@
name|BeforeClass
DECL|method|setUpResourceManager ()
specifier|public
specifier|static
name|void
name|setUpResourceManager
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"config-with-security.xml"
argument_list|)
expr_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{       }
block|}
expr_stmt|;
comment|// a reliable way to wait for resource manager to fully start
specifier|final
name|CountDownLatch
name|rmStartedSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ServiceStateChangeListener
name|rmStateChangeListener
init|=
operator|new
name|ServiceStateChangeListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
if|if
condition|(
name|service
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|rmStartedSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|resourceManager
operator|.
name|registerServiceListener
argument_list|(
name|rmStateChangeListener
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|rmStarted
init|=
name|rmStartedSignal
operator|.
name|await
argument_list|(
literal|60000L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ResourceManager failed to start up."
argument_list|,
name|rmStarted
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ResourceManager RMAdmin address: "
operator|+
name|configuration
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|ResourceManagerAdministrationProtocolPBClientImpl
argument_list|(
literal|1L
argument_list|,
name|getProtocolAddress
argument_list|(
name|configuration
argument_list|)
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test method refreshQueues. This method is present and it works.    */
annotation|@
name|Test
DECL|method|testRefreshQueues ()
specifier|public
name|void
name|testRefreshQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshQueuesRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshQueuesRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|RefreshQueuesResponse
name|response
init|=
name|client
operator|.
name|refreshQueues
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test method refreshNodes. This method is present and it works.    */
annotation|@
name|Test
DECL|method|testRefreshNodes ()
specifier|public
name|void
name|testRefreshNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
expr_stmt|;
name|RefreshNodesRequest
name|request
init|=
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|NORMAL
argument_list|)
decl_stmt|;
name|RefreshNodesResponse
name|response
init|=
name|client
operator|.
name|refreshNodes
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test method refreshSuperUserGroupsConfiguration. This method present and it works.    */
annotation|@
name|Test
DECL|method|testRefreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshSuperUserGroupsConfigurationRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|RefreshSuperUserGroupsConfigurationResponse
name|response
init|=
name|client
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test method refreshUserToGroupsMappings. This method is present and it works.    */
annotation|@
name|Test
DECL|method|testRefreshUserToGroupsMappings ()
specifier|public
name|void
name|testRefreshUserToGroupsMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshUserToGroupsMappingsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshUserToGroupsMappingsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|RefreshUserToGroupsMappingsResponse
name|response
init|=
name|client
operator|.
name|refreshUserToGroupsMappings
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test method refreshAdminAcls. This method is present and it works.    */
annotation|@
name|Test
DECL|method|testRefreshAdminAcls ()
specifier|public
name|void
name|testRefreshAdminAcls
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshAdminAclsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|RefreshAdminAclsResponse
name|response
init|=
name|client
operator|.
name|refreshAdminAcls
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateNodeResource ()
specifier|public
name|void
name|testUpdateNodeResource
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateNodeResourceRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|UpdateNodeResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|UpdateNodeResourceResponse
name|response
init|=
name|client
operator|.
name|updateNodeResource
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshServiceAcls ()
specifier|public
name|void
name|testRefreshServiceAcls
parameter_list|()
throws|throws
name|Exception
block|{
name|RefreshServiceAclsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshServiceAclsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|RefreshServiceAclsResponse
name|response
init|=
name|client
operator|.
name|refreshServiceAcls
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stop server    */
annotation|@
name|AfterClass
DECL|method|tearDownResourceManager ()
specifier|public
specifier|static
name|void
name|tearDownResourceManager
parameter_list|()
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping ResourceManager..."
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getProtocolAddress (Configuration conf)
specifier|private
specifier|static
name|InetSocketAddress
name|getProtocolAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_PORT
argument_list|)
return|;
block|}
block|}
end_class

end_unit

