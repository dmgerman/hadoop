begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|RejectedSchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMTokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|AMRMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|impl
operator|.
name|AMRMClientAsyncImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|sleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
import|;
end_import

begin_comment
comment|/**  * Test Placement Constraints and Scheduling Requests.  */
end_comment

begin_class
DECL|class|TestAMRMClientPlacementConstraints
specifier|public
class|class
name|TestAMRMClientPlacementConstraints
extends|extends
name|BaseAMRMClientTest
block|{
DECL|field|allocatedContainers
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
literal|null
decl_stmt|;
DECL|field|rejectedSchedulingRequests
specifier|private
name|List
argument_list|<
name|RejectedSchedulingRequest
argument_list|>
name|rejectedSchedulingRequests
init|=
literal|null
decl_stmt|;
DECL|field|pcMapping
specifier|private
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|pcMapping
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|allocatedContainers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|rejectedSchedulingRequests
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|pcMapping
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|pcMapping
operator|.
name|put
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pcMapping
operator|.
name|put
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientWithPlacementConstraintsByPlacementProcessor ()
specifier|public
name|void
name|testAMRMClientWithPlacementConstraintsByPlacementProcessor
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we have to create a new instance of MiniYARNCluster to avoid SASL qop
comment|// mismatches between client and server
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
name|YarnConfiguration
operator|.
name|PROCESSOR_RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|)
expr_stmt|;
name|createClusterAndStartApplication
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocatedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rejectedSchedulingRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
name|AMRMClient
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amClient
init|=
name|AMRMClient
operator|.
expr|<
name|AMRMClient
operator|.
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|setNMTokenCache
argument_list|(
operator|new
name|NMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
comment|//asserting we are not using the singleton instance cache
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|AMRMClientAsync
name|asyncClient
init|=
operator|new
name|AMRMClientAsyncImpl
argument_list|<>
argument_list|(
name|amClient
argument_list|,
literal|1000
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|asyncClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|asyncClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|,
name|pcMapping
argument_list|)
expr_stmt|;
comment|// Send two types of requests - 4 with source tag "foo" have numAlloc = 1
comment|// and 1 with source tag "bar" and has numAlloc = 4. Both should be
comment|// handled similarly. i.e: Since there are only 3 nodes,
comment|// 2 schedulingRequests - 1 with source tag "foo" on one with source
comment|// tag "bar" should get rejected.
name|asyncClient
operator|.
name|addSchedulingRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
comment|// 4 reqs with numAlloc = 1
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
comment|// 1 req with numAlloc = 4
name|schedulingRequest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// kick the scheduler
name|waitForContainerAllocation
argument_list|(
name|allocatedContainers
argument_list|,
name|rejectedSchedulingRequests
argument_list|,
literal|6
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|Container
argument_list|>
argument_list|>
name|containersPerNode
init|=
name|allocatedContainers
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|Container
operator|::
name|getNodeId
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
argument_list|>
name|outstandingSchedRequests
init|=
operator|(
operator|(
name|AMRMClientImpl
operator|)
name|amClient
operator|)
operator|.
name|getOutstandingSchedRequests
argument_list|()
decl_stmt|;
comment|// Check the outstanding SchedulingRequests
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|outstandingSchedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outstandingSchedRequests
operator|.
name|get
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outstandingSchedRequests
operator|.
name|get
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure 2 containers allocated per node.
comment|// Each node should have a "foo" and a "bar" container.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containersPerNode
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|srcTags
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|containersPerNode
operator|.
name|entrySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|x
lambda|->
name|Assert
operator|.
name|assertEquals
argument_list|(
name|srcTags
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|y
lambda|->
name|y
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ensure 2 rejected requests - 1 of "foo" and 1 of "bar"
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rejectedSchedulingRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|srcTags
argument_list|,
name|rejectedSchedulingRequests
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getRequest
argument_list|()
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientWithPlacementConstraintsByScheduler ()
specifier|public
name|void
name|testAMRMClientWithPlacementConstraintsByScheduler
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we have to create a new instance of MiniYARNCluster to avoid SASL qop
comment|// mismatches between client and server
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
name|YarnConfiguration
operator|.
name|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|)
expr_stmt|;
name|createClusterAndStartApplication
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocatedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rejectedSchedulingRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
name|AMRMClient
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amClient
init|=
name|AMRMClient
operator|.
expr|<
name|AMRMClient
operator|.
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|setNMTokenCache
argument_list|(
operator|new
name|NMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
comment|//asserting we are not using the singleton instance cache
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|AMRMClientAsync
name|asyncClient
init|=
operator|new
name|AMRMClientAsyncImpl
argument_list|<>
argument_list|(
name|amClient
argument_list|,
literal|1000
argument_list|,
operator|new
name|TestCallbackHandler
argument_list|()
argument_list|)
decl_stmt|;
name|asyncClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|asyncClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|,
name|pcMapping
argument_list|)
expr_stmt|;
comment|// Send two types of requests - 4 with source tag "foo" have numAlloc = 1
comment|// and 1 with source tag "bar" and has numAlloc = 4. Both should be
comment|// handled similarly. i.e: Since there are only 3 nodes,
comment|// 2 schedulingRequests - 1 with source tag "foo" on one with source
comment|// tag "bar" should get rejected.
name|asyncClient
operator|.
name|addSchedulingRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
comment|// 4 reqs with numAlloc = 1
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
comment|// 1 req with numAlloc = 4
name|schedulingRequest
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
comment|// 1 empty tag
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// kick the scheduler
name|waitForContainerAllocation
argument_list|(
name|allocatedContainers
argument_list|,
name|rejectedSchedulingRequests
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|List
argument_list|<
name|Container
argument_list|>
argument_list|>
name|containersPerNode
init|=
name|allocatedContainers
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|Container
operator|::
name|getNodeId
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
argument_list|>
name|outstandingSchedRequests
init|=
operator|(
operator|(
name|AMRMClientImpl
operator|)
name|amClient
operator|)
operator|.
name|getOutstandingSchedRequests
argument_list|()
decl_stmt|;
comment|// Check the outstanding SchedulingRequests
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|outstandingSchedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outstandingSchedRequests
operator|.
name|get
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outstandingSchedRequests
operator|.
name|get
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|outstandingSchedRequests
operator|.
name|get
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Each node should have a "foo" and a "bar" container.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containersPerNode
operator|.
name|entrySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|srcTags
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|containersPerNode
operator|.
name|entrySet
argument_list|()
operator|.
name|forEach
argument_list|(
name|x
lambda|->
name|Assert
operator|.
name|assertEquals
argument_list|(
name|srcTags
argument_list|,
name|x
operator|.
name|getValue
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|y
lambda|->
operator|!
name|y
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|y
lambda|->
name|y
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// The rejected requests were not set by scheduler
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rejectedSchedulingRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/*    * Three cases of empty HashSet key of outstandingSchedRequests    * 1. Not set any tags    * 2. Set a empty set, e.g ImmutableSet.of(), new HashSet<>()    * 3. Set tag as null    */
DECL|method|testEmptyKeyOfOutstandingSchedRequests ()
specifier|public
name|void
name|testEmptyKeyOfOutstandingSchedRequests
parameter_list|()
block|{
name|AMRMClient
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amClient
init|=
name|AMRMClient
operator|.
expr|<
name|AMRMClient
operator|.
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|schedRequest
init|=
literal|null
decl_stmt|;
name|amClient
operator|.
name|addSchedulingRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
name|schedRequest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
argument_list|>
name|outstandingSchedRequests
init|=
operator|(
operator|(
name|AMRMClientImpl
operator|)
name|amClient
operator|)
operator|.
name|getOutstandingSchedRequests
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|outstandingSchedRequests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|outstandingSchedRequests
operator|.
name|get
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestCallbackHandler
specifier|private
class|class
name|TestCallbackHandler
extends|extends
name|AMRMClientAsync
operator|.
name|AbstractCallbackHandler
block|{
annotation|@
name|Override
DECL|method|onContainersAllocated (List<Container> containers)
specifier|public
name|void
name|onContainersAllocated
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
block|{
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|containers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onRequestsRejected ( List<RejectedSchedulingRequest> rejReqs)
specifier|public
name|void
name|onRequestsRejected
parameter_list|(
name|List
argument_list|<
name|RejectedSchedulingRequest
argument_list|>
name|rejReqs
parameter_list|)
block|{
name|rejectedSchedulingRequests
operator|.
name|addAll
argument_list|(
name|rejReqs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onContainersCompleted (List<ContainerStatus> statuses)
specifier|public
name|void
name|onContainersCompleted
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|statuses
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|onContainersUpdated (List<UpdatedContainer> containers)
specifier|public
name|void
name|onContainersUpdated
parameter_list|(
name|List
argument_list|<
name|UpdatedContainer
argument_list|>
name|containers
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|onShutdownRequest ()
specifier|public
name|void
name|onShutdownRequest
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|onNodesUpdated (List<NodeReport> updatedNodes)
specifier|public
name|void
name|onNodesUpdated
parameter_list|(
name|List
argument_list|<
name|NodeReport
argument_list|>
name|updatedNodes
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|onError (Throwable e)
specifier|public
name|void
name|onError
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|getProgress ()
specifier|public
name|float
name|getProgress
parameter_list|()
block|{
return|return
literal|0.1f
return|;
block|}
block|}
DECL|method|waitForContainerAllocation ( List<Container> allocatedContainers, List<RejectedSchedulingRequest> rejectedRequests, int containerNum, int rejNum)
specifier|private
specifier|static
name|void
name|waitForContainerAllocation
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|,
name|List
argument_list|<
name|RejectedSchedulingRequest
argument_list|>
name|rejectedRequests
parameter_list|,
name|int
name|containerNum
parameter_list|,
name|int
name|rejNum
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxCount
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|maxCount
operator|>=
literal|0
operator|&&
operator|(
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|<
name|containerNum
operator|||
name|rejectedRequests
operator|.
name|size
argument_list|()
operator|<
name|rejNum
operator|)
condition|)
block|{
name|maxCount
operator|--
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|schedulingRequest (int numAllocations, int priority, long allocReqId, int cores, int mem, String... tags)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|numAllocations
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|String
modifier|...
name|tags
parameter_list|)
block|{
return|return
name|schedulingRequest
argument_list|(
name|numAllocations
argument_list|,
name|priority
argument_list|,
name|allocReqId
argument_list|,
name|cores
argument_list|,
name|mem
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tags
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
DECL|method|schedulingRequest (int numAllocations, int priority, long allocReqId, int cores, int mem, Set<String> tags)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|numAllocations
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|schedulingRequest
argument_list|(
name|numAllocations
argument_list|,
name|priority
argument_list|,
name|allocReqId
argument_list|,
name|cores
argument_list|,
name|mem
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|tags
argument_list|)
return|;
block|}
DECL|method|schedulingRequest (int numAllocations, int priority, long allocReqId, int cores, int mem, ExecutionType execType, Set<String> tags)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|numAllocations
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|ExecutionType
name|execType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|SchedulingRequest
name|schedRequest
init|=
name|schedulingRequest
argument_list|(
name|numAllocations
argument_list|,
name|priority
argument_list|,
name|allocReqId
argument_list|,
name|cores
argument_list|,
name|mem
argument_list|,
name|execType
argument_list|)
decl_stmt|;
name|schedRequest
operator|.
name|setAllocationTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
return|return
name|schedRequest
return|;
block|}
DECL|method|schedulingRequest (int numAllocations, int priority, long allocReqId, int cores, int mem, ExecutionType execType)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|numAllocations
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|ExecutionType
name|execType
parameter_list|)
block|{
return|return
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
name|allocReqId
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|execType
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
name|numAllocations
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|mem
argument_list|,
name|cores
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

