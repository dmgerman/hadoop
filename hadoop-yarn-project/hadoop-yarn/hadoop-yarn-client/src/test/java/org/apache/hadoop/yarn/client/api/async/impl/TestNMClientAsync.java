begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.async.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicIntegerArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|NMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNMClientAsync
specifier|public
class|class
name|TestNMClientAsync
block|{
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|asyncClient
specifier|private
name|NMClientAsyncImpl
name|asyncClient
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|containerToken
specifier|private
name|Token
name|containerToken
decl_stmt|;
DECL|enum|OpsToTest
enum|enum
name|OpsToTest
block|{
DECL|enumConstant|START
DECL|enumConstant|QUERY
DECL|enumConstant|STOP
DECL|enumConstant|INCR
DECL|enumConstant|REINIT
DECL|enumConstant|RESTART
DECL|enumConstant|ROLLBACK
DECL|enumConstant|COMMIT
name|START
block|,
name|QUERY
block|,
name|STOP
block|,
name|INCR
block|,
name|REINIT
block|,
name|RESTART
block|,
name|ROLLBACK
block|,
name|COMMIT
block|}
DECL|class|TestData
specifier|final
specifier|static
class|class
name|TestData
block|{
DECL|field|success
name|AtomicInteger
name|success
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|failure
name|AtomicInteger
name|failure
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|successArray
specifier|final
name|AtomicIntegerArray
name|successArray
decl_stmt|;
DECL|field|failureArray
specifier|final
name|AtomicIntegerArray
name|failureArray
decl_stmt|;
DECL|method|TestData (int expectedSuccess, int expectedFailure)
specifier|private
name|TestData
parameter_list|(
name|int
name|expectedSuccess
parameter_list|,
name|int
name|expectedFailure
parameter_list|)
block|{
name|this
operator|.
name|successArray
operator|=
operator|new
name|AtomicIntegerArray
argument_list|(
name|expectedSuccess
argument_list|)
expr_stmt|;
name|this
operator|.
name|failureArray
operator|=
operator|new
name|AtomicIntegerArray
argument_list|(
name|expectedFailure
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|ServiceOperations
operator|.
name|stop
argument_list|(
name|asyncClient
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testNMClientAsync ()
specifier|public
name|void
name|testNMClientAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Threads to run are more than the max size of the thread pool
name|int
name|expectedSuccess
init|=
literal|40
decl_stmt|;
name|int
name|expectedFailure
init|=
literal|40
decl_stmt|;
name|asyncClient
operator|=
operator|new
name|MockNMClientAsync1
argument_list|(
name|expectedSuccess
argument_list|,
name|expectedFailure
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The max thread pool size is not correctly set"
argument_list|,
literal|10
argument_list|,
name|asyncClient
operator|.
name|maxThreadPoolSize
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedSuccess
operator|+
name|expectedFailure
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|expectedSuccess
condition|)
block|{
while|while
condition|(
operator|!
operator|(
operator|(
name|TestCallbackHandler1
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|isAllSuccessCallsExecuted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|asyncClient
operator|.
name|setClient
argument_list|(
name|mockNMClient
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Container
name|container
init|=
name|mockContainer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|asyncClient
operator|.
name|startContainerAsync
argument_list|(
name|container
argument_list|,
name|clc
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
operator|(
operator|(
name|TestCallbackHandler1
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|isStartAndQueryFailureCallsExecuted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|asyncClient
operator|.
name|setClient
argument_list|(
name|mockNMClient
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TestCallbackHandler1
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|path
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedFailure
condition|;
operator|++
name|i
control|)
block|{
name|Container
name|container
init|=
name|mockContainer
argument_list|(
name|expectedSuccess
operator|+
name|expectedFailure
operator|+
name|i
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|asyncClient
operator|.
name|startContainerAsync
argument_list|(
name|container
argument_list|,
name|clc
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
operator|(
operator|(
name|TestCallbackHandler1
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|isIncreaseResourceFailureCallsExecuted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
operator|(
operator|(
name|TestCallbackHandler1
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|isStopFailureCallsExecuted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|errorMsg
range|:
operator|(
operator|(
name|TestCallbackHandler1
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|errorMsgs
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error occurs in CallbackHandler"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|TestCallbackHandler1
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|errorMsgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|errorMsg
range|:
operator|(
operator|(
name|MockNMClientAsync1
operator|)
name|asyncClient
operator|)
operator|.
name|errorMsgs
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Error occurs in ContainerEventProcessor"
argument_list|,
literal|0
argument_list|,
operator|(
operator|(
name|MockNMClientAsync1
operator|)
name|asyncClient
operator|)
operator|.
name|errorMsgs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// When the callback functions are all executed, the event processor threads
comment|// may still not terminate and the containers may still not removed.
while|while
condition|(
name|asyncClient
operator|.
name|containers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|asyncClient
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"The thread of Container Management Event Dispatcher is still alive"
argument_list|,
name|asyncClient
operator|.
name|eventDispatcherThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The thread pool is not shut down"
argument_list|,
name|asyncClient
operator|.
name|threadPool
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MockNMClientAsync1
specifier|private
class|class
name|MockNMClientAsync1
extends|extends
name|NMClientAsyncImpl
block|{
DECL|field|errorMsgs
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|errorMsgs
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|MockNMClientAsync1 (int expectedSuccess, int expectedFailure)
specifier|protected
name|MockNMClientAsync1
parameter_list|(
name|int
name|expectedSuccess
parameter_list|,
name|int
name|expectedFailure
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|MockNMClientAsync1
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|mockNMClient
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TestCallbackHandler1
argument_list|(
name|expectedSuccess
argument_list|,
name|expectedFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|MockContainerEventProcessor
specifier|private
class|class
name|MockContainerEventProcessor
extends|extends
name|ContainerEventProcessor
block|{
DECL|method|MockContainerEventProcessor (ContainerEvent event)
specifier|public
name|MockContainerEventProcessor
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|super
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// If the unexpected throwable comes from error callback functions, it
comment|// will break ContainerEventProcessor.run(). Therefore, monitor
comment|// the exception here
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Unexpected throwable from callback functions should"
operator|+
literal|" be ignored by Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerEventProcessor ( ContainerEvent event)
specifier|protected
name|ContainerEventProcessor
name|getContainerEventProcessor
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
return|return
operator|new
name|MockContainerEventProcessor
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
DECL|class|TestCallbackHandler1
specifier|private
class|class
name|TestCallbackHandler1
extends|extends
name|NMClientAsync
operator|.
name|AbstractCallbackHandler
block|{
DECL|field|path
specifier|private
name|boolean
name|path
init|=
literal|true
decl_stmt|;
DECL|field|expectedSuccess
specifier|private
name|int
name|expectedSuccess
decl_stmt|;
DECL|field|expectedFailure
specifier|private
name|int
name|expectedFailure
decl_stmt|;
DECL|field|testMap
specifier|private
specifier|final
name|Map
argument_list|<
name|OpsToTest
argument_list|,
name|TestData
argument_list|>
name|testMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|errorMsgs
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|errorMsgs
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|TestCallbackHandler1 (int expectedSuccess, int expectedFailure)
specifier|public
name|TestCallbackHandler1
parameter_list|(
name|int
name|expectedSuccess
parameter_list|,
name|int
name|expectedFailure
parameter_list|)
block|{
name|this
operator|.
name|expectedSuccess
operator|=
name|expectedSuccess
expr_stmt|;
name|this
operator|.
name|expectedFailure
operator|=
name|expectedFailure
expr_stmt|;
for|for
control|(
name|OpsToTest
name|op
range|:
name|OpsToTest
operator|.
name|values
argument_list|()
control|)
block|{
name|testMap
operator|.
name|put
argument_list|(
name|op
argument_list|,
operator|new
name|TestData
argument_list|(
name|expectedSuccess
argument_list|,
name|expectedFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerStarted (ContainerId containerId, Map<String, ByteBuffer> allServiceResponse)
specifier|public
name|void
name|onContainerStarted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|allServiceResponse
parameter_list|)
block|{
if|if
condition|(
name|path
condition|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerStarted"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|START
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following success tests
name|asyncClient
operator|.
name|getContainerStatusAsync
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// move on to the following failure tests
comment|// make sure we pass in the container with the same
comment|// containerId
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|int
name|t
init|=
name|containerId
operator|.
name|getId
argument_list|()
operator|%
literal|5
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
literal|0
case|:
name|asyncClient
operator|.
name|increaseContainerResourceAsync
argument_list|(
name|container
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|asyncClient
operator|.
name|reInitializeContainerAsync
argument_list|(
name|containerId
argument_list|,
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|asyncClient
operator|.
name|restartContainerAsync
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|asyncClient
operator|.
name|rollbackLastReInitializationAsync
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|asyncClient
operator|.
name|commitLastReInitializationAsync
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerStatusReceived (ContainerId containerId, ContainerStatus containerStatus)
specifier|public
name|void
name|onContainerStatusReceived
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerStatusReceived"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following success tests
comment|// make sure we pass in the container with the same
comment|// containerId
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerToken
argument_list|)
decl_stmt|;
name|asyncClient
operator|.
name|increaseContainerResourceAsync
argument_list|(
name|container
argument_list|)
expr_stmt|;
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerResourceIncreased ( ContainerId containerId, Resource resource)
specifier|public
name|void
name|onContainerResourceIncreased
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerResourceIncreased"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|INCR
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following success tests
name|asyncClient
operator|.
name|reInitializeContainerAsync
argument_list|(
name|containerId
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// throw a fake user exception, and shouldn't crash the test
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerReInitialize (ContainerId containerId)
specifier|public
name|void
name|onContainerReInitialize
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerReInitialize"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|REINIT
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following success tests
name|asyncClient
operator|.
name|restartContainerAsync
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
comment|// throw a fake user exception, and shouldn't crash the test
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerRestart (ContainerId containerId)
specifier|public
name|void
name|onContainerRestart
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerReInitialize"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|RESTART
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following success tests
name|asyncClient
operator|.
name|rollbackLastReInitializationAsync
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
comment|// throw a fake user exception, and shouldn't crash the test
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onRollbackLastReInitialization (ContainerId containerId)
specifier|public
name|void
name|onRollbackLastReInitialization
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerReInitialize"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|ROLLBACK
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following success tests
name|asyncClient
operator|.
name|commitLastReInitializationAsync
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
comment|// throw a fake user exception, and shouldn't crash the test
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onCommitLastReInitialization (ContainerId containerId)
specifier|public
name|void
name|onCommitLastReInitialization
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerReInitialize"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|COMMIT
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following success tests
name|asyncClient
operator|.
name|stopContainerAsync
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
comment|// throw a fake user exception, and shouldn't crash the test
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerStopped (ContainerId containerId)
specifier|public
name|void
name|onContainerStopped
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|>=
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" should throw the exception onContainerStopped"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
decl_stmt|;
name|td
operator|.
name|success
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|successArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onStartContainerError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onStartContainerError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
comment|// If the unexpected throwable comes from success callback functions, it
comment|// will be handled by the error callback functions. Therefore, monitor
comment|// the exception here
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Unexpected throwable from callback functions should be"
operator|+
literal|" ignored by Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception onStartContainerError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|START
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// move on to the following failure tests
name|asyncClient
operator|.
name|getContainerStatusAsync
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onIncreaseContainerResourceError ( ContainerId containerId, Throwable t)
specifier|public
name|void
name|onIncreaseContainerResourceError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
operator|+
name|expectedFailure
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception onIncreaseContainerResourceError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|INCR
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// increase container resource error should NOT change the
comment|// the container status to FAILED
comment|// move on to the following failure tests
name|asyncClient
operator|.
name|stopContainerAsync
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerReInitializeError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onContainerReInitializeError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
operator|+
name|expectedFailure
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception onContainerReInitializeError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|REINIT
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// increment the stop counters here.. since the container will fail
name|td
operator|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// reInit container changes the container status to FAILED
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onContainerRestartError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onContainerRestartError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
operator|+
name|expectedFailure
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception onContainerRestartError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|RESTART
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// increment the stop counters here.. since the container will fail
name|td
operator|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// restart container changes the container status to FAILED
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onRollbackLastReInitializationError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onRollbackLastReInitializationError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
operator|+
name|expectedFailure
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception"
operator|+
literal|" onRollbackLastReInitializationError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|ROLLBACK
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// increment the stop counters here.. since the container will fail
name|td
operator|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// rollback container changes the container status to FAILED
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onCommitLastReInitializationError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onCommitLastReInitializationError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
operator|+
name|expectedFailure
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception onCommitLastReInitializationError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|COMMIT
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// increment the stop counters here.. since the container will fail
name|td
operator|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
expr_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// commit container changes the container status to FAILED
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onStopContainerError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onStopContainerError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Unexpected throwable from callback functions should be"
operator|+
literal|" ignored by Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
operator|+
name|expectedFailure
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception onStopContainerError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
operator|-
name|expectedFailure
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|onGetContainerStatusError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onGetContainerStatusError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|RuntimeException
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Unexpected throwable from callback functions should be"
operator|+
literal|" ignored by Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containerId
operator|.
name|getId
argument_list|()
operator|<
name|expectedSuccess
condition|)
block|{
name|errorMsgs
operator|.
name|add
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" shouldn't throw the exception onGetContainerStatusError"
argument_list|)
expr_stmt|;
return|return;
block|}
name|TestData
name|td
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|QUERY
argument_list|)
decl_stmt|;
name|td
operator|.
name|failure
operator|.
name|addAndGet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|td
operator|.
name|failureArray
operator|.
name|set
argument_list|(
name|containerId
operator|.
name|getId
argument_list|()
operator|-
name|expectedSuccess
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Shouldn't crash the test thread
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Ignorable Exception"
argument_list|)
throw|;
block|}
DECL|method|isAllSuccessCallsExecuted ()
specifier|public
name|boolean
name|isAllSuccessCallsExecuted
parameter_list|()
block|{
name|boolean
name|isAllSuccessCallsExecuted
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|START
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|QUERY
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|INCR
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|REINIT
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|RESTART
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|ROLLBACK
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|COMMIT
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
operator|.
name|success
operator|.
name|get
argument_list|()
operator|==
name|expectedSuccess
decl_stmt|;
if|if
condition|(
name|isAllSuccessCallsExecuted
condition|)
block|{
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|START
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|QUERY
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|INCR
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|REINIT
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|RESTART
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|ROLLBACK
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|COMMIT
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
operator|.
name|successArray
argument_list|)
expr_stmt|;
block|}
return|return
name|isAllSuccessCallsExecuted
return|;
block|}
DECL|method|isStartAndQueryFailureCallsExecuted ()
specifier|public
name|boolean
name|isStartAndQueryFailureCallsExecuted
parameter_list|()
block|{
name|boolean
name|isStartAndQueryFailureCallsExecuted
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|START
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|==
name|expectedFailure
operator|&&
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|QUERY
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|==
name|expectedFailure
decl_stmt|;
if|if
condition|(
name|isStartAndQueryFailureCallsExecuted
condition|)
block|{
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|START
argument_list|)
operator|.
name|failureArray
argument_list|)
expr_stmt|;
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|QUERY
argument_list|)
operator|.
name|failureArray
argument_list|)
expr_stmt|;
block|}
return|return
name|isStartAndQueryFailureCallsExecuted
return|;
block|}
DECL|method|isIncreaseResourceFailureCallsExecuted ()
specifier|public
name|boolean
name|isIncreaseResourceFailureCallsExecuted
parameter_list|()
block|{
name|boolean
name|isIncreaseResourceFailureCallsExecuted
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|INCR
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|+
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|REINIT
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|+
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|RESTART
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|+
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|ROLLBACK
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|+
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|COMMIT
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|==
name|expectedFailure
decl_stmt|;
if|if
condition|(
name|isIncreaseResourceFailureCallsExecuted
condition|)
block|{
name|AtomicIntegerArray
name|testArray
init|=
operator|new
name|AtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|INCR
argument_list|)
operator|.
name|failureArray
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|OpsToTest
name|op
range|:
name|EnumSet
operator|.
name|of
argument_list|(
name|OpsToTest
operator|.
name|REINIT
argument_list|,
name|OpsToTest
operator|.
name|RESTART
argument_list|,
name|OpsToTest
operator|.
name|ROLLBACK
argument_list|,
name|OpsToTest
operator|.
name|COMMIT
argument_list|,
name|OpsToTest
operator|.
name|INCR
argument_list|)
control|)
block|{
name|testArray
operator|.
name|addAndGet
argument_list|(
name|i
argument_list|,
name|testMap
operator|.
name|get
argument_list|(
name|op
argument_list|)
operator|.
name|failureArray
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertAtomicIntegerArray
argument_list|(
name|testArray
argument_list|)
expr_stmt|;
block|}
return|return
name|isIncreaseResourceFailureCallsExecuted
return|;
block|}
DECL|method|isStopFailureCallsExecuted ()
specifier|public
name|boolean
name|isStopFailureCallsExecuted
parameter_list|()
block|{
name|boolean
name|isStopFailureCallsExecuted
init|=
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
operator|.
name|failure
operator|.
name|get
argument_list|()
operator|==
name|expectedFailure
decl_stmt|;
if|if
condition|(
name|isStopFailureCallsExecuted
condition|)
block|{
name|assertAtomicIntegerArray
argument_list|(
name|testMap
operator|.
name|get
argument_list|(
name|OpsToTest
operator|.
name|STOP
argument_list|)
operator|.
name|failureArray
argument_list|)
expr_stmt|;
block|}
return|return
name|isStopFailureCallsExecuted
return|;
block|}
DECL|method|assertAtomicIntegerArray (AtomicIntegerArray array)
specifier|private
name|void
name|assertAtomicIntegerArray
parameter_list|(
name|AtomicIntegerArray
name|array
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|mockNMClient (int mode)
specifier|private
name|NMClient
name|mockNMClient
parameter_list|(
name|int
name|mode
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|NMClient
name|client
init|=
name|mock
argument_list|(
name|NMClient
operator|.
name|class
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
literal|0
case|:
name|when
argument_list|(
name|client
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|ByteBuffer
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getContainerStatus
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|increaseContainerResource
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|reInitializeContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|restartContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|rollbackLastReInitialization
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|commitLastReInitialization
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|stopContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Start Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Query Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getContainerStatus
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Stop Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|stopContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|when
argument_list|(
name|client
operator|.
name|startContainer
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|ByteBuffer
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getContainerStatus
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Increase Resource Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|increaseContainerResource
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"ReInitialize Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|reInitializeContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Restart Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|restartContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Rollback upgrade Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|rollbackLastReInitialization
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Commit upgrade Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|commitLastReInitialization
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Stop Exception"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|stopContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|client
operator|.
name|getNodeIdOfStartedContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testOutOfOrder ()
specifier|public
name|void
name|testOutOfOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|CyclicBarrier
name|barrierA
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|barrierB
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|CyclicBarrier
name|barrierC
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|asyncClient
operator|=
operator|new
name|MockNMClientAsync2
argument_list|(
name|barrierA
argument_list|,
name|barrierB
argument_list|,
name|barrierC
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|asyncClient
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Container
name|container
init|=
name|mockContainer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ContainerLaunchContext
name|clc
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// start container from another thread
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|asyncClient
operator|.
name|startContainerAsync
argument_list|(
name|container
argument_list|,
name|clc
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrierA
operator|.
name|await
argument_list|()
expr_stmt|;
name|asyncClient
operator|.
name|stopContainerAsync
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|barrierC
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Starting and stopping should be out of order"
argument_list|,
operator|(
operator|(
name|TestCallbackHandler2
operator|)
name|asyncClient
operator|.
name|getCallbackHandler
argument_list|()
operator|)
operator|.
name|exceptionOccurred
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MockNMClientAsync2
specifier|private
class|class
name|MockNMClientAsync2
extends|extends
name|NMClientAsyncImpl
block|{
DECL|field|barrierA
specifier|private
name|CyclicBarrier
name|barrierA
decl_stmt|;
DECL|field|barrierB
specifier|private
name|CyclicBarrier
name|barrierB
decl_stmt|;
DECL|method|MockNMClientAsync2 (CyclicBarrier barrierA, CyclicBarrier barrierB, CyclicBarrier barrierC)
specifier|protected
name|MockNMClientAsync2
parameter_list|(
name|CyclicBarrier
name|barrierA
parameter_list|,
name|CyclicBarrier
name|barrierB
parameter_list|,
name|CyclicBarrier
name|barrierC
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|MockNMClientAsync2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|mockNMClient
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|TestCallbackHandler2
argument_list|(
name|barrierC
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|barrierA
operator|=
name|barrierA
expr_stmt|;
name|this
operator|.
name|barrierB
operator|=
name|barrierB
expr_stmt|;
block|}
DECL|class|MockContainerEventProcessor
specifier|private
class|class
name|MockContainerEventProcessor
extends|extends
name|ContainerEventProcessor
block|{
DECL|method|MockContainerEventProcessor (ContainerEvent event)
specifier|public
name|MockContainerEventProcessor
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|super
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ContainerEventType
operator|.
name|START_CONTAINER
condition|)
block|{
name|barrierA
operator|.
name|await
argument_list|()
expr_stmt|;
name|barrierB
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ContainerEventType
operator|.
name|STOP_CONTAINER
condition|)
block|{
name|barrierB
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerEventProcessor ( ContainerEvent event)
specifier|protected
name|ContainerEventProcessor
name|getContainerEventProcessor
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
return|return
operator|new
name|MockContainerEventProcessor
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
DECL|class|TestCallbackHandler2
specifier|private
class|class
name|TestCallbackHandler2
extends|extends
name|NMClientAsync
operator|.
name|AbstractCallbackHandler
block|{
DECL|field|barrierC
specifier|private
name|CyclicBarrier
name|barrierC
decl_stmt|;
DECL|field|exceptionOccurred
specifier|private
name|AtomicBoolean
name|exceptionOccurred
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|TestCallbackHandler2 (CyclicBarrier barrierC)
specifier|public
name|TestCallbackHandler2
parameter_list|(
name|CyclicBarrier
name|barrierC
parameter_list|)
block|{
name|this
operator|.
name|barrierC
operator|=
name|barrierC
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onContainerStarted (ContainerId containerId, Map<String, ByteBuffer> allServiceResponse)
specifier|public
name|void
name|onContainerStarted
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|allServiceResponse
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|onContainerStatusReceived (ContainerId containerId, ContainerStatus containerStatus)
specifier|public
name|void
name|onContainerStatusReceived
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|onContainerResourceIncreased ( ContainerId containerId, Resource resource)
specifier|public
name|void
name|onContainerResourceIncreased
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|onContainerStopped (ContainerId containerId)
specifier|public
name|void
name|onContainerStopped
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|onStartContainerError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onStartContainerError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|NMClientAsyncImpl
operator|.
name|StatefulContainer
operator|.
name|OutOfOrderTransition
operator|.
name|STOP_BEFORE_START_ERROR_MSG
argument_list|)
condition|)
block|{
name|exceptionOccurred
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|barrierC
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onGetContainerStatusError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onGetContainerStatusError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|onIncreaseContainerResourceError ( ContainerId containerId, Throwable t)
specifier|public
name|void
name|onIncreaseContainerResourceError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|onStopContainerError (ContainerId containerId, Throwable t)
specifier|public
name|void
name|onStopContainerError
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{     }
block|}
DECL|method|mockContainer (int i)
specifier|private
name|Container
name|mockContainer
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|nodeId
operator|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Create an empty record
name|containerToken
operator|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Token
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|Container
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|containerToken
argument_list|)
return|;
block|}
block|}
end_class

end_unit

