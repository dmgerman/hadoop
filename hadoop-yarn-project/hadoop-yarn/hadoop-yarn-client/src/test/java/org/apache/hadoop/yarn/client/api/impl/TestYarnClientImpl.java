begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ParameterizedSchedulerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * This class is to test class {@link YarnClientImpl ).  */
end_comment

begin_class
DECL|class|TestYarnClientImpl
specifier|public
class|class
name|TestYarnClientImpl
extends|extends
name|ParameterizedSchedulerTestBase
block|{
DECL|method|TestYarnClientImpl (SchedulerType type)
specifier|public
name|TestYarnClientImpl
parameter_list|(
name|SchedulerType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartWithTimelineV15 ()
specifier|public
name|void
name|testStartWithTimelineV15
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|YarnClientImpl
name|client
init|=
operator|(
name|YarnClientImpl
operator|)
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncAPIPollTimeout ()
specifier|public
name|void
name|testAsyncAPIPollTimeout
parameter_list|()
block|{
name|testAsyncAPIPollTimeoutHelper
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testAsyncAPIPollTimeoutHelper
argument_list|(
literal|0L
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testAsyncAPIPollTimeoutHelper
argument_list|(
literal|1L
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsyncAPIPollTimeoutHelper (Long valueForTimeout, boolean expectedTimeoutEnforcement)
specifier|private
name|void
name|testAsyncAPIPollTimeoutHelper
parameter_list|(
name|Long
name|valueForTimeout
parameter_list|,
name|boolean
name|expectedTimeoutEnforcement
parameter_list|)
block|{
name|YarnClientImpl
name|client
init|=
operator|new
name|YarnClientImpl
argument_list|()
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueForTimeout
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
argument_list|,
name|valueForTimeout
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedTimeoutEnforcement
argument_list|,
name|client
operator|.
name|enforceAsyncAPITimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBestEffortTimelineDelegationToken ()
specifier|public
name|void
name|testBestEffortTimelineDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|YarnClientImpl
name|client
init|=
name|spy
argument_list|(
operator|new
name|YarnClientImpl
argument_list|()
block|{
annotation|@
name|Override
name|TimelineClient
name|createTimelineClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|timelineClient
operator|=
name|mock
argument_list|(
name|TimelineClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timelineClient
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Best effort test exception"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|timelineClient
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_BEST_EFFORT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTimelineDelegationToken
argument_list|()
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_BEST_EFFORT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTimelineDelegationToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Get delegation token should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Success
block|}
block|}
annotation|@
name|Test
DECL|method|testAutomaticTimelineDelegationTokenLoading ()
specifier|public
name|void
name|testAutomaticTimelineDelegationTokenLoading
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|TimelineDelegationTokenIdentifier
name|timelineDT
init|=
operator|new
name|TimelineDelegationTokenIdentifier
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|dToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|timelineDT
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|timelineDT
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a mock client
name|YarnClientImpl
name|client
init|=
name|spy
argument_list|(
operator|new
name|YarnClientImpl
argument_list|()
block|{
annotation|@
name|Override
name|TimelineClient
name|createTimelineClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|timelineClient
operator|=
name|mock
argument_list|(
name|TimelineClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timelineClient
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
return|return
name|timelineClient
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
name|rmClient
operator|=
name|mock
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{       }
annotation|@
name|Override
specifier|public
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|ApplicationReport
name|report
init|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSecurityEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
comment|// when i == 0, timeline DT already exists, no need to get one more
comment|// when i == 1, timeline DT doesn't exist, need to get one more
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|credentials
operator|.
name|addToken
argument_list|(
name|client
operator|.
name|timelineService
argument_list|,
name|dToken
argument_list|)
expr_stmt|;
block|}
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|tokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|tokens
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|client
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// GetTimelineDelegationToken shouldn't be called
name|verify
argument_list|(
name|client
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getTimelineDelegationToken
argument_list|()
expr_stmt|;
block|}
comment|// In either way, token should be there
name|credentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokens
operator|=
name|clc
operator|.
name|getTokens
argument_list|()
expr_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|dibb
operator|.
name|reset
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|dTokens
init|=
name|credentials
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dToken
argument_list|,
name|dTokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParseTimelineDelegationTokenRenewer ()
specifier|public
name|void
name|testParseTimelineDelegationTokenRenewer
parameter_list|()
block|{
comment|// Client side
name|YarnClientImpl
name|client
init|=
operator|(
name|YarnClientImpl
operator|)
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"rm/_HOST@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"localhost:8188"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rm/localhost@EXAMPLE.COM"
argument_list|,
name|client
operator|.
name|timelineDTRenewer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

