begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|DateFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceUtilization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SignalContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationAttemptNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystemTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestYarnCLI
specifier|public
class|class
name|TestYarnCLI
block|{
DECL|field|client
specifier|private
name|YarnClient
name|client
init|=
name|mock
argument_list|(
name|YarnClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|sysOutStream
name|ByteArrayOutputStream
name|sysOutStream
decl_stmt|;
DECL|field|sysOut
specifier|private
name|PrintStream
name|sysOut
decl_stmt|;
DECL|field|sysErrStream
name|ByteArrayOutputStream
name|sysErrStream
decl_stmt|;
DECL|field|sysErr
specifier|private
name|PrintStream
name|sysErr
decl_stmt|;
DECL|field|SPACES_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|SPACES_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\s+|\\n+|\\t+"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|sysOutStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysOut
operator|=
name|spy
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|sysOutStream
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysErr
operator|=
name|spy
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|sysErrStream
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationReport ()
specifier|public
name|void
name|testGetApplicationReport
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|resourceSecondsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|preemptedResoureSecondsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|resourceSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
literal|123456L
argument_list|)
expr_stmt|;
name|resourceSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
literal|4567L
argument_list|)
expr_stmt|;
name|preemptedResoureSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
literal|1111L
argument_list|)
expr_stmt|;
name|preemptedResoureSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
literal|2222L
argument_list|)
expr_stmt|;
name|ApplicationResourceUsageReport
name|usageReport
init|=
name|i
operator|==
literal|0
condition|?
literal|null
else|:
name|ApplicationResourceUsageReport
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|resourceSecondsMap
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|preemptedResoureSecondsMap
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|usageReport
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"high-mem"
argument_list|,
literal|"high-mem"
argument_list|)
decl_stmt|;
name|newApplicationReport
operator|.
name|setLogAggregationStatus
argument_list|(
name|LogAggregationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|newApplicationReport
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationTimeout
name|timeout
init|=
name|ApplicationTimeout
operator|.
name|newInstance
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
literal|"UNLIMITED"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|newApplicationReport
operator|.
name|setApplicationTimeouts
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|timeout
operator|.
name|getTimeoutType
argument_list|()
argument_list|,
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-status"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Application Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tApplication-Id : application_1234_0005"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tApplication-Name : appname"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tApplication-Type : YARN"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tUser : user"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tQueue : queue"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tApplication Priority : 0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tStart-Time : 0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tFinish-Time : 0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tProgress : 53.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tState : FINISHED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tFinal-State : SUCCEEDED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tTracking-URL : N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tRPC Port : 124"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAM Host : host"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAggregate Resource Allocation : "
operator|+
operator|(
name|i
operator|==
literal|0
condition|?
literal|"N/A"
else|:
literal|"123456 MB-seconds, 4567 vcore-seconds"
operator|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAggregate Resource Preempted : "
operator|+
operator|(
name|i
operator|==
literal|0
condition|?
literal|"N/A"
else|:
literal|"1111 MB-seconds, 2222 vcore-seconds"
operator|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tLog Aggregation Status : SUCCEEDED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tDiagnostics : diagnostics"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tUnmanaged Application : false"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tApplication Node Label Expression : high-mem"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAM container Node Label Expression : high-mem"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\tTimeoutType : LIFETIME"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\tExpiryTime : UNLIMITED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tRemainingTime : -1seconds"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
operator|.
name|println
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttemptReport ()
specifier|public
name|void
name|testGetApplicationAttemptReport
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptReport
name|attemptReport
init|=
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|attemptId
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|"url"
argument_list|,
literal|"oUrl"
argument_list|,
literal|"diagnostics"
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|FINISHED
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1000l
argument_list|,
literal|2000l
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationAttemptReport
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptReport
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-status"
block|,
name|attemptId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationAttemptReport
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Application Attempt Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tApplicationAttempt-Id : appattempt_1234_0005_000001"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tState : FINISHED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAMContainer : container_1234_0005_01_000001"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tTracking-URL : url"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tRPC Port : 124"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAM Host : host"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tDiagnostics : diagnostics"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|println
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttempts ()
specifier|public
name|void
name|testGetApplicationAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptReport
name|attemptReport
init|=
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|attemptId
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|"url"
argument_list|,
literal|"oUrl"
argument_list|,
literal|"diagnostics"
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|FINISHED
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptReport
name|attemptReport1
init|=
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|attemptId1
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|"url"
argument_list|,
literal|"oUrl"
argument_list|,
literal|"diagnostics"
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|FINISHED
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|()
decl_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|attemptReport
argument_list|)
expr_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|attemptReport1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationAttempts
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reports
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-list"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationAttempts
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of application attempts :2"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         ApplicationAttempt-Id"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t               State"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t                    AM-Container-Id"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"   appattempt_1234_0005_000001"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t            FINISHED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      container_1234_0005_01_000001"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                url"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"   appattempt_1234_0005_000002"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t            FINISHED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      container_1234_0005_02_000001"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                url"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerReport ()
specifier|public
name|void
name|testGetContainerReport
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerReport
name|container
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"logURL"
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getContainerReport
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-status"
block|,
name|containerId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getContainerReport
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Container Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tContainer-Id : container_1234_0005_01_000001"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tStart-Time : 1234"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tFinish-Time : 5678"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tState : COMPLETE"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tLOG-URL : logURL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tHost : host:1234"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNodeHttpAddress : http://host:2345"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tDiagnostics : diagnosticInfo"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|println
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainers ()
specifier|public
name|void
name|testGetContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|long
name|time1
init|=
literal|1234
decl_stmt|,
name|time2
init|=
literal|5678
decl_stmt|;
name|ContainerReport
name|container
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
name|time1
argument_list|,
name|time2
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"logURL"
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerReport
name|container1
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|containerId1
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
name|time1
argument_list|,
name|time2
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"logURL"
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerReport
name|container2
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|containerId2
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
name|time1
argument_list|,
literal|0
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
decl_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|container1
argument_list|)
expr_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|container2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getContainers
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reports
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-list"
block|,
name|attemptId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getContainers
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamWriter
name|stream
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of containers :3"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
name|ApplicationCLI
operator|.
name|CONTAINER_PATTERN
argument_list|,
literal|"Container-Id"
argument_list|,
literal|"Start Time"
argument_list|,
literal|"Finish Time"
argument_list|,
literal|"State"
argument_list|,
literal|"Host"
argument_list|,
literal|"Node Http Address"
argument_list|,
literal|"LOG-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
name|ApplicationCLI
operator|.
name|CONTAINER_PATTERN
argument_list|,
literal|"container_1234_0005_01_000001"
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|time1
argument_list|)
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|time2
argument_list|)
argument_list|,
literal|"COMPLETE"
argument_list|,
literal|"host:1234"
argument_list|,
literal|"http://host:2345"
argument_list|,
literal|"logURL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
name|ApplicationCLI
operator|.
name|CONTAINER_PATTERN
argument_list|,
literal|"container_1234_0005_01_000002"
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|time1
argument_list|)
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|time2
argument_list|)
argument_list|,
literal|"COMPLETE"
argument_list|,
literal|"host:1234"
argument_list|,
literal|"http://host:2345"
argument_list|,
literal|"logURL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
name|ApplicationCLI
operator|.
name|CONTAINER_PATTERN
argument_list|,
literal|"container_1234_0005_01_000003"
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|time1
argument_list|)
argument_list|,
literal|"N/A"
argument_list|,
literal|"RUNNING"
argument_list|,
literal|"host:1234"
argument_list|,
literal|"http://host:2345"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Log
operator|.
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"ExpectedOutput"
argument_list|)
expr_stmt|;
name|Log
operator|.
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|appReportStr
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Log
operator|.
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"OutputFrom command"
argument_list|)
expr_stmt|;
name|String
name|actualOutput
init|=
name|sysOutStream
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Log
operator|.
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|actualOutput
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReportStr
argument_list|,
name|actualOutput
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationReportException ()
specifier|public
name|void
name|testGetApplicationReportException
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"History file for application"
operator|+
name|applicationId
operator|+
literal|" is not found"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-status"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM or Timeline Server."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"should return non-zero exit code."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplications ()
specifier|public
name|void
name|testGetApplications
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag1"
argument_list|,
literal|"tag3"
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applicationReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport2
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"user2"
argument_list|,
literal|"queue2"
argument_list|,
literal|"appname2"
argument_list|,
literal|"host2"
argument_list|,
literal|125
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics2"
argument_list|,
literal|"url2"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.63789f
argument_list|,
literal|"NON-YARN"
argument_list|,
literal|null
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag2"
argument_list|,
literal|"tag3"
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport2
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport3
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId3
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"user3"
argument_list|,
literal|"queue3"
argument_list|,
literal|"appname3"
argument_list|,
literal|"host3"
argument_list|,
literal|126
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics3"
argument_list|,
literal|"url3"
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.73789f
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|null
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag1"
argument_list|,
literal|"tag4"
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport3
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId4
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport4
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId4
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId4
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"user4"
argument_list|,
literal|"queue4"
argument_list|,
literal|"appname4"
argument_list|,
literal|"host4"
argument_list|,
literal|127
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|,
literal|"diagnostics4"
argument_list|,
literal|"url4"
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.83789f
argument_list|,
literal|"NON-MAPREDUCE"
argument_list|,
literal|null
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag1"
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport4
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId5
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport5
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId5
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId5
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|"user5"
argument_list|,
literal|"queue5"
argument_list|,
literal|"appname5"
argument_list|,
literal|"host5"
argument_list|,
literal|128
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|,
literal|"diagnostics5"
argument_list|,
literal|"url5"
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
name|FinalApplicationStatus
operator|.
name|KILLED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.93789f
argument_list|,
literal|"HIVE"
argument_list|,
literal|null
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag2"
argument_list|,
literal|"tag4"
argument_list|)
argument_list|,
literal|false
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport5
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId6
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport6
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId6
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId6
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|"user6"
argument_list|,
literal|"queue6"
argument_list|,
literal|"appname6"
argument_list|,
literal|"host6"
argument_list|,
literal|129
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|SUBMITTED
argument_list|,
literal|"diagnostics6"
argument_list|,
literal|"url6"
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
name|FinalApplicationStatus
operator|.
name|KILLED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.99789f
argument_list|,
literal|"PIG"
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport6
argument_list|)
expr_stmt|;
comment|// Test command yarn application -list
comment|// if the set appStates is empty, RUNNING state will be automatically added
comment|// to the appStates list
comment|// the output of yarn application -list should be the same as
comment|// equals to yarn application -list --appStates RUNNING,ACCEPTED,SUBMITTED
name|Set
argument_list|<
name|String
argument_list|>
name|appType1
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState1
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appState1
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|appState1
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|appState1
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|SUBMITTED
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTag
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType1
argument_list|,
name|appState1
argument_list|,
name|appTag
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType1
argument_list|,
name|appState1
argument_list|,
name|appTag
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType1
argument_list|,
name|appState1
argument_list|,
name|appTag
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType1
operator|+
literal|", states: "
operator|+
name|appState1
operator|+
literal|" and tags: "
operator|+
name|appTag
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|4
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0005\t             "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname\t                YARN\t      user\t     "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         53.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0007\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname3\t           MAPREDUCE\t     user3\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue3\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         73.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0009\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname5\t                HIVE\t     user5\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue5\t          ACCEPTED\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"KILLED\t         93.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0010\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname6\t                 PIG\t     user6\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue6\t         SUBMITTED\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"KILLED\t         99.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appsReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test command yarn application -list --appTypes apptype1,apptype2
comment|//the output should be the same as
comment|// yarn application -list --appTypes apptyp1, apptype2 --appStates
comment|// RUNNING,ACCEPTED,SUBMITTED
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appType2
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appType2
operator|.
name|add
argument_list|(
literal|"YARN"
argument_list|)
expr_stmt|;
name|appType2
operator|.
name|add
argument_list|(
literal|"NON-YARN"
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState2
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appState2
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|appState2
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|appState2
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|SUBMITTED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType2
argument_list|,
name|appState2
argument_list|,
name|appTag
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType2
argument_list|,
name|appState2
argument_list|,
name|appTag
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"-appTypes"
block|,
literal|"YARN, ,,  NON-YARN"
block|,
literal|"   ,, ,,"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType2
argument_list|,
name|appState2
argument_list|,
name|appTag
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType2
operator|+
literal|", states: "
operator|+
name|appState2
operator|+
literal|" and tags: "
operator|+
name|appTag
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0005\t             "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname\t                YARN\t      user\t     "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         53.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test command yarn application -list --appStates appState1,appState2
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appType3
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState3
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appState3
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|appState3
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType3
argument_list|,
name|appState3
argument_list|,
name|appTag
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType3
argument_list|,
name|appState3
argument_list|,
name|appTag
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"--appStates"
block|,
literal|"FINISHED ,, , FAILED"
block|,
literal|",,FINISHED"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType3
argument_list|,
name|appState3
argument_list|,
name|appTag
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType3
operator|+
literal|", states: "
operator|+
name|appState3
operator|+
literal|" and tags: "
operator|+
name|appTag
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|2
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0006\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname2\t            NON-YARN\t     user2\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue2\t          FINISHED\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         63.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0008\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname4\t       NON-MAPREDUCE\t     user4\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue4\t            FAILED\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         83.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test command yarn application -list --appTypes apptype1,apptype2
comment|// --appStates appstate1,appstate2
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appType4
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appType4
operator|.
name|add
argument_list|(
literal|"YARN"
argument_list|)
expr_stmt|;
name|appType4
operator|.
name|add
argument_list|(
literal|"NON-YARN"
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState4
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appState4
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|appState4
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType4
argument_list|,
name|appState4
argument_list|,
name|appTag
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType4
argument_list|,
name|appState4
argument_list|,
name|appTag
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"--appTypes"
block|,
literal|"YARN,NON-YARN"
block|,
literal|"--appStates"
block|,
literal|"FINISHED ,, , FAILED"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType2
argument_list|,
name|appState2
argument_list|,
name|appTag
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType4
operator|+
literal|", states: "
operator|+
name|appState4
operator|+
literal|" and tags: "
operator|+
name|appTag
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0006\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname2\t            NON-YARN\t     user2\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue2\t          FINISHED\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         63.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test command yarn application -list --appStates with invalid appStates
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"--appStates"
block|,
literal|"FINISHED ,, , INVALID"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"The application state  INVALID is invalid."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"The valid application state can be one of the following: "
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ALL,"
argument_list|)
expr_stmt|;
for|for
control|(
name|YarnApplicationState
name|state
range|:
name|YarnApplicationState
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|state
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
name|String
name|output
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|output
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|output
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test command yarn application -list --appStates all
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appType5
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState5
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appState5
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType5
argument_list|,
name|appState5
argument_list|,
name|appTag
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType5
argument_list|,
name|appState5
argument_list|,
name|appTag
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"--appStates"
block|,
literal|"FINISHED ,, , ALL"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType5
argument_list|,
name|appState5
argument_list|,
name|appTag
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType5
operator|+
literal|", states: "
operator|+
name|appState5
operator|+
literal|" and tags: "
operator|+
name|appTag
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|6
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0005\t             "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname\t                YARN\t      user\t     "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         53.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0006\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname2\t            NON-YARN\t     user2\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue2\t          FINISHED\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         63.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0007\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname3\t           MAPREDUCE\t     user3\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue3\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         73.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0008\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname4\t       NON-MAPREDUCE\t     user4\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue4\t            FAILED\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         83.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0009\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname5\t                HIVE\t     user5\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue5\t          ACCEPTED\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"KILLED\t         93.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0010\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname6\t                 PIG\t     user6\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue6\t         SUBMITTED\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"KILLED\t         99.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test command yarn application user case insensitive
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appType6
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appType6
operator|.
name|add
argument_list|(
literal|"YARN"
argument_list|)
expr_stmt|;
name|appType6
operator|.
name|add
argument_list|(
literal|"NON-YARN"
argument_list|)
expr_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState6
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appState6
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType6
argument_list|,
name|appState6
argument_list|,
name|appTag
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType6
argument_list|,
name|appState6
argument_list|,
name|appTag
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"-appTypes"
block|,
literal|"YARN, ,,  NON-YARN"
block|,
literal|"--appStates"
block|,
literal|"finished"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType6
argument_list|,
name|appState6
argument_list|,
name|appTag
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType6
operator|+
literal|", states: "
operator|+
name|appState6
operator|+
literal|" and tags: "
operator|+
name|appTag
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0006\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname2\t            NON-YARN\t     user2\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue2\t          FINISHED\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         63.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test command yarn application with tags.
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTag1
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag1"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType1
argument_list|,
name|appState1
argument_list|,
name|appTag1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType1
argument_list|,
name|appState1
argument_list|,
name|appTag1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"-appTags"
block|,
literal|"tag1"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType1
argument_list|,
name|appState1
argument_list|,
name|appTag1
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType1
operator|+
literal|", states: "
operator|+
name|appState1
operator|+
literal|" and tags: "
operator|+
name|appTag1
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|2
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0005\t             "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname\t                YARN\t      user\t     "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         53.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0007\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname3\t           MAPREDUCE\t     user3\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue3\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         73.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState7
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType1
argument_list|,
name|appState7
argument_list|,
name|appTag1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType1
argument_list|,
name|appState7
argument_list|,
name|appTag1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"-appStates"
block|,
literal|"RUNNING,FAILED"
block|,
literal|"-appTags"
block|,
literal|"tag1"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType1
argument_list|,
name|appState7
argument_list|,
name|appTag1
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType1
operator|+
literal|", states: "
operator|+
name|appState7
operator|+
literal|" and tags: "
operator|+
name|appTag1
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|3
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0005\t             "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname\t                YARN\t      user\t     "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         53.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0007\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname3\t           MAPREDUCE\t     user3\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue3\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         73.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0008\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname4\t       NON-MAPREDUCE\t     user4\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue4\t            FAILED\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         83.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appType9
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"YARN"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTag2
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag3"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType9
argument_list|,
name|appState1
argument_list|,
name|appTag2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType9
argument_list|,
name|appState1
argument_list|,
name|appTag2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"-appTypes"
block|,
literal|"YARN"
block|,
literal|"-appTags"
block|,
literal|"tag3"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType9
argument_list|,
name|appState1
argument_list|,
name|appTag2
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType9
operator|+
literal|", states: "
operator|+
name|appState1
operator|+
literal|" and tags: "
operator|+
name|appTag2
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0005\t             "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname\t                YARN\t      user\t     "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue\t           RUNNING\t         "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"SUCCEEDED\t         53.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|9
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appType10
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"HIVE"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTag3
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"tag4"
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appState10
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplications
argument_list|(
name|appType10
argument_list|,
name|appState10
argument_list|,
name|appTag3
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|applicationReports
argument_list|,
name|appType10
argument_list|,
name|appState10
argument_list|,
name|appTag3
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-list"
block|,
literal|"-appTypes"
block|,
literal|"HIVE"
block|,
literal|"-appStates"
block|,
literal|"ACCEPTED"
block|,
literal|"-appTags"
block|,
literal|"tag4"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getApplications
argument_list|(
name|appType10
argument_list|,
name|appState10
argument_list|,
name|appTag3
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appType10
operator|+
literal|", states: "
operator|+
name|appState10
operator|+
literal|" and tags: "
operator|+
name|appTag3
operator|+
literal|")"
operator|+
literal|":"
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"                Application-Id\t    Application-Name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t    Application-Type"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"\t      User\t     Queue\t             State\t       "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"Final-State\t       Progress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                       Tracking-URL"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         application_1234_0009\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"appname5\t                HIVE\t     user5\t    "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"queue5\t          ACCEPTED\t            "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"KILLED\t         93.79%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\t                                N/A"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|appsReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getApplicationReports ( List<ApplicationReport> applicationReports, Set<String> appTypes, EnumSet<YarnApplicationState> appStates, Set<String> appTags, boolean allStates)
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplicationReports
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applicationReports
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
parameter_list|,
name|boolean
name|allStates
parameter_list|)
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|allStates
condition|)
block|{
for|for
control|(
name|YarnApplicationState
name|state
range|:
name|YarnApplicationState
operator|.
name|values
argument_list|()
control|)
block|{
name|appStates
operator|.
name|add
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ApplicationReport
name|appReport
range|:
name|applicationReports
control|)
block|{
if|if
condition|(
name|appTypes
operator|!=
literal|null
operator|&&
operator|!
name|appTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|appTypes
operator|.
name|contains
argument_list|(
name|appReport
operator|.
name|getApplicationType
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|appStates
operator|!=
literal|null
operator|&&
operator|!
name|appStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|appStates
operator|.
name|contains
argument_list|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|appTags
operator|!=
literal|null
operator|&&
operator|!
name|appTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|appReport
operator|.
name|getApplicationTags
argument_list|()
decl_stmt|;
if|if
condition|(
name|tags
operator|==
literal|null
operator|||
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|appTag
range|:
name|appTags
control|)
block|{
if|if
condition|(
name|tags
operator|.
name|contains
argument_list|(
name|appTag
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
continue|continue;
block|}
block|}
name|appReports
operator|.
name|add
argument_list|(
name|appReport
argument_list|)
expr_stmt|;
block|}
return|return
name|appReports
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAppsHelpCommand ()
specifier|public
name|void
name|testAppsHelpCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationCLI
name|spyCli
init|=
name|spy
argument_list|(
name|cli
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|spyCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-help"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createApplicationCLIHelpMessage
argument_list|()
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host0"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-status"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|,
literal|"args"
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createApplicationCLIHelpMessage
argument_list|()
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAppAttemptsHelpCommand ()
specifier|public
name|void
name|testAppAttemptsHelpCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationCLI
name|spyCli
init|=
name|spy
argument_list|(
name|cli
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|spyCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-help"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createApplicationAttemptCLIHelpMessage
argument_list|()
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-list"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"args"
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createApplicationAttemptCLIHelpMessage
argument_list|()
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-status"
block|,
name|appAttemptId
operator|.
name|toString
argument_list|()
block|,
literal|"args"
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createApplicationAttemptCLIHelpMessage
argument_list|()
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testContainersHelpCommand ()
specifier|public
name|void
name|testContainersHelpCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationCLI
name|spyCli
init|=
name|spy
argument_list|(
name|cli
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|spyCli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-help"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createContainerCLIHelpMessage
argument_list|()
argument_list|,
name|normalize
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-list"
block|,
name|appAttemptId
operator|.
name|toString
argument_list|()
block|,
literal|"args"
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createContainerCLIHelpMessage
argument_list|()
argument_list|,
name|normalize
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-status"
block|,
name|containerId
operator|.
name|toString
argument_list|()
block|,
literal|"args"
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyCli
argument_list|)
operator|.
name|printUsage
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Options
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createContainerCLIHelpMessage
argument_list|()
argument_list|,
name|normalize
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testNodesHelpCommand ()
specifier|public
name|void
name|testNodesHelpCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeCLI
name|nodeCLI
init|=
operator|new
name|NodeCLI
argument_list|()
decl_stmt|;
name|nodeCLI
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|nodeCLI
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|nodeCLI
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|nodeCLI
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createNodeCLIHelpMessage
argument_list|()
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillApplication ()
specifier|public
name|void
name|testKillApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport2
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport2
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|killApplication
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
name|ApplicationReport
name|newApplicationReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|killApplication
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Killing application application_1234_0005"
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|cli
operator|=
name|createAndGetAppCLI
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"should return non-zero exit code."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|appEx
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"application -kill should not throw"
operator|+
literal|"ApplicationNotFoundException. "
operator|+
name|appEx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testKillApplications ()
specifier|public
name|void
name|testKillApplications
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId4
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// Test Scenario 1: Both applications are FINISHED.
name|ApplicationReport
name|newApplicationReport1
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport2
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.34344f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|applicationId1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|applicationId2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport2
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId1
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|applicationId2
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|killApplication
argument_list|(
name|applicationId1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|killApplication
argument_list|(
name|applicationId2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId1
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId2
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
comment|// Test Scenario 2: Both applications are RUNNING.
name|ApplicationReport
name|newApplicationReport3
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport4
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53345f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|applicationId1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport3
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|applicationId2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport4
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId1
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|applicationId2
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|killApplication
argument_list|(
name|applicationId1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|killApplication
argument_list|(
name|applicationId2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Killing application application_1234_0005"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Killing application application_1234_0006"
argument_list|)
expr_stmt|;
comment|// Test Scenario 3: Both applications are not present.
name|doThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId3
operator|+
literal|"' doesn't exist in RM."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|applicationId3
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId4
operator|+
literal|"' doesn't exist in RM."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|applicationId4
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId3
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|applicationId4
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application with id 'application_1234_0007' doesn't exist in RM."
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application with id 'application_1234_0008' doesn't exist in RM."
argument_list|)
expr_stmt|;
comment|// Test Scenario 4: one application is not present and other RUNNING
name|doThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId3
operator|+
literal|"' doesn't exist in RM."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|applicationId3
argument_list|)
expr_stmt|;
name|ApplicationReport
name|newApplicationReport5
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53345f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|applicationId1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport5
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId3
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|applicationId1
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// Test Scenario 5: kill operation with some other command.
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"--appStates"
block|,
literal|"RUNNING"
block|,
literal|"-kill"
block|,
name|applicationId3
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|applicationId1
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|createApplicationCLIHelpMessage
argument_list|()
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillApplicationsOfDifferentEndStates ()
specifier|public
name|void
name|testKillApplicationsOfDifferentEndStates
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|6
argument_list|)
decl_stmt|;
comment|// Scenario: One application is FINISHED and other is RUNNING.
name|ApplicationReport
name|newApplicationReport5
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport6
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53345f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|applicationId1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport5
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|applicationId2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport6
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-kill"
block|,
name|applicationId1
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|applicationId2
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|killApplication
argument_list|(
name|applicationId2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId1
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Killing application application_1234_0006"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveApplicationAcrossQueues ()
specifier|public
name|void
name|testMoveApplicationAcrossQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport2
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport2
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-movetoqueue"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-queue"
block|,
literal|"targetqueue"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
name|ApplicationReport
name|newApplicationReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-movetoqueue"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-queue"
block|,
literal|"targetqueue"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Moving application application_1234_0005 to queue targetqueue"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Successfully completed move."
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|applicationId
argument_list|,
literal|"targetqueue"
argument_list|)
expr_stmt|;
name|cli
operator|=
name|createAndGetAppCLI
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-movetoqueue"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-queue"
block|,
literal|"targetqueue"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|ApplicationNotFoundException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMoveApplicationAcrossQueuesWithNewCommand ()
specifier|public
name|void
name|testMoveApplicationAcrossQueuesWithNewCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport2
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport2
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-appId"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-changeQueue"
block|,
literal|"targetqueue"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
name|ApplicationReport
name|newApplicationReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newApplicationReport
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-appId"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-changeQueue"
block|,
literal|"targetqueue"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Moving application application_1234_0005 to queue targetqueue"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Successfully completed move."
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|client
argument_list|)
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|applicationId
argument_list|,
literal|"targetqueue"
argument_list|)
expr_stmt|;
name|cli
operator|=
name|createAndGetAppCLI
argument_list|()
expr_stmt|;
try|try
block|{
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-appId"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-changeQueue"
block|,
literal|"targetqueue"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|ApplicationNotFoundException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListClusterNodes ()
specifier|public
name|void
name|testListClusterNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
decl_stmt|;
name|nodeReports
operator|.
name|addAll
argument_list|(
name|getNodeReports
argument_list|(
literal|1
argument_list|,
name|NodeState
operator|.
name|NEW
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|.
name|addAll
argument_list|(
name|getNodeReports
argument_list|(
literal|2
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|.
name|addAll
argument_list|(
name|getNodeReports
argument_list|(
literal|1
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|.
name|addAll
argument_list|(
name|getNodeReports
argument_list|(
literal|1
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|.
name|addAll
argument_list|(
name|getNodeReports
argument_list|(
literal|1
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|.
name|addAll
argument_list|(
name|getNodeReports
argument_list|(
literal|1
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|)
argument_list|)
expr_stmt|;
name|NodeCLI
name|cli
init|=
operator|new
name|NodeCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeState
argument_list|>
name|nodeStates
init|=
operator|new
name|HashSet
argument_list|<
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|NodeState
index|[]
name|states
init|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"NEW"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t            NEW\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|nodesReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|states
operator|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"RUNNING"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:2"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host1:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-showDetails"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:2"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Detailed Node Information :"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tConfigured Resources :<memory:0, vCores:0>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAllocated Resources :<memory:0, vCores:0>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Labels : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host1:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Detailed Node Information :"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tConfigured Resources :<memory:0, vCores:0>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAllocated Resources :<memory:0, vCores:0>"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Labels : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
name|states
operator|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"UNHEALTHY"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t      UNHEALTHY\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|states
operator|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"DECOMMISSIONED"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t DECOMMISSIONED\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
expr_stmt|;
name|states
operator|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"REBOOTED"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t       REBOOTED\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|7
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
expr_stmt|;
name|states
operator|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"LOST"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t           LOST\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
expr_stmt|;
name|nodeStates
operator|.
name|add
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
expr_stmt|;
name|states
operator|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"NEW,RUNNING,LOST,REBOOTED"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:5"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t            NEW\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host1:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t       REBOOTED\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t           LOST\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|9
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|nodeStates
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|NodeState
name|s
range|:
name|NodeState
operator|.
name|values
argument_list|()
control|)
block|{
name|nodeStates
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|states
operator|=
name|nodeStates
operator|.
name|toArray
argument_list|(
operator|new
name|NodeState
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
name|nodeReports
argument_list|,
name|nodeStates
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-All"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|(
name|states
argument_list|)
expr_stmt|;
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|pw
operator|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Total Nodes:7"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         Node-Id\t     Node-State\tNode-Http-Address\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Number-of-Running-Containers"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t            NEW\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host1:0\t        RUNNING\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t      UNHEALTHY\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t DECOMMISSIONED\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t       REBOOTED\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|"         host0:0\t           LOST\t       host1:8888\t"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                           0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|nodesReportStr
operator|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-list"
block|,
literal|"-states"
block|,
literal|"InvalidState"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodeReports ( List<NodeReport> nodeReports, Set<NodeState> nodeStates)
specifier|private
name|List
argument_list|<
name|NodeReport
argument_list|>
name|getNodeReports
parameter_list|(
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
parameter_list|,
name|Set
argument_list|<
name|NodeState
argument_list|>
name|nodeStates
parameter_list|)
block|{
name|List
argument_list|<
name|NodeReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeReport
name|nodeReport
range|:
name|nodeReports
control|)
block|{
if|if
condition|(
name|nodeStates
operator|.
name|contains
argument_list|(
name|nodeReport
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
name|reports
operator|.
name|add
argument_list|(
name|nodeReport
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reports
return|;
block|}
annotation|@
name|Test
DECL|method|testNodeStatus ()
specifier|public
name|void
name|testNodeStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host0"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeCLI
name|cli
init|=
operator|new
name|NodeCLI
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
literal|3
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Node Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Id : host0:0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tRack : rack1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-State : RUNNING"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Http-Address : host1:8888"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tLast-Health-Update : "
operator|+
name|DateFormatUtils
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"E dd/MMM/yy hh:mm:ss:SSzz"
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tHealth-Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tContainers : 0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMemory-Used : 0MB"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMemory-Capacity : 0MB"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCPU-Used : 0 vcores"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCPU-Capacity : 0 vcores"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Labels : a,b,c,x,y,z"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|nodeStatusStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|println
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
name|nodeStatusStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeStatusWithEmptyNodeLabels ()
specifier|public
name|void
name|testNodeStatusWithEmptyNodeLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host0"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeCLI
name|cli
init|=
operator|new
name|NodeCLI
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
literal|3
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Node Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Id : host0:0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tRack : rack1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-State : RUNNING"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Http-Address : host1:8888"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tLast-Health-Update : "
operator|+
name|DateFormatUtils
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"E dd/MMM/yy hh:mm:ss:SSzz"
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tHealth-Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tContainers : 0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMemory-Used : 0MB"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMemory-Capacity : 0MB"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCPU-Used : 0 vcores"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCPU-Capacity : 0 vcores"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Labels : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|nodeStatusStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|println
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
name|nodeStatusStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeStatusWithEmptyResourceUtilization ()
specifier|public
name|void
name|testNodeStatusWithEmptyResourceUtilization
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host0"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeCLI
name|cli
init|=
operator|new
name|NodeCLI
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
literal|3
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Node Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Id : host0:0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tRack : rack1"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-State : RUNNING"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Http-Address : host1:8888"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tLast-Health-Update : "
operator|+
name|DateFormatUtils
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"E dd/MMM/yy hh:mm:ss:SSzz"
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tHealth-Report : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tContainers : 0"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMemory-Used : 0MB"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMemory-Capacity : 0MB"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCPU-Used : 0 vcores"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCPU-Capacity : 0 vcores"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tNode-Labels : a,b,c,x,y,z"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Node : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tResource Utilization by Containers : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|nodeStatusStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|println
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
name|nodeStatusStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbsentNodeStatus ()
specifier|public
name|void
name|testAbsentNodeStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"Absenthost0"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeCLI
name|cli
init|=
operator|new
name|NodeCLI
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getNodeReports
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeReports
argument_list|(
literal|0
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|println
argument_list|(
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Could not find the node report for node id : "
operator|+
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppCLIUsageInfo ()
specifier|public
name|void
name|testAppCLIUsageInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyUsageInfo
argument_list|(
operator|new
name|ApplicationCLI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeCLIUsageInfo ()
specifier|public
name|void
name|testNodeCLIUsageInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyUsageInfo
argument_list|(
operator|new
name|NodeCLI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingArguments ()
specifier|public
name|void
name|testMissingArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-status"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing argument for options%n%1s"
argument_list|,
name|createApplicationCLIHelpMessage
argument_list|()
argument_list|)
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-status"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing argument for options%n%1s"
argument_list|,
name|createApplicationAttemptCLIHelpMessage
argument_list|()
argument_list|)
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-status"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing argument for options %1s"
argument_list|,
name|createContainerCLIHelpMessage
argument_list|()
argument_list|)
argument_list|,
name|normalize
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|NodeCLI
name|nodeCLI
init|=
operator|new
name|NodeCLI
argument_list|()
decl_stmt|;
name|nodeCLI
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|nodeCLI
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|nodeCLI
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeCLI
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Missing argument for options%n%1s"
argument_list|,
name|createNodeCLIHelpMessage
argument_list|()
argument_list|)
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfo ()
specifier|public
name|void
name|testGetQueueInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|QueueCLI
name|cli
init|=
name|createAndGetQueueCLI
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nodeLabels
operator|.
name|add
argument_list|(
literal|"GPU"
argument_list|)
expr_stmt|;
name|nodeLabels
operator|.
name|add
argument_list|(
literal|"JDK_7"
argument_list|)
expr_stmt|;
name|QueueInfo
name|queueInfo
init|=
name|QueueInfo
operator|.
name|newInstance
argument_list|(
literal|"queueA"
argument_list|,
literal|0.4f
argument_list|,
literal|0.8f
argument_list|,
literal|0.5f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|nodeLabels
argument_list|,
literal|"GPU"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getQueueInfo
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
literal|"queueA"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getQueueInfo
argument_list|(
literal|"queueA"
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Queue Information : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Queue Name : "
operator|+
literal|"queueA"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tState : "
operator|+
literal|"RUNNING"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCapacity : "
operator|+
literal|"40.0%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCurrent Capacity : "
operator|+
literal|"50.0%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMaximum Capacity : "
operator|+
literal|"80.0%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tDefault Node Label expression : "
operator|+
literal|"GPU"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAccessible Node Labels : "
operator|+
literal|"JDK_7,GPU"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tPreemption : "
operator|+
literal|"enabled"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|queueInfoStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queueInfoStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfoPreemptionEnabled ()
specifier|public
name|void
name|testGetQueueInfoPreemptionEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|ReservationSystemTestUtil
operator|.
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|,
literal|"org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity."
operator|+
literal|"ProportionalCapacityPreemptionPolicy"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testReservationAPIs"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|YarnClient
name|yarnClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|QueueCLI
name|cli
init|=
operator|new
name|QueueCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|yarnClient
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
literal|"a1"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Preemption : enabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|yarnClient
operator|!=
literal|null
condition|)
block|{
name|yarnClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfoPreemptionDisabled ()
specifier|public
name|void
name|testGetQueueInfoPreemptionDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|ReservationSystemTestUtil
operator|.
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|,
literal|"org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity."
operator|+
literal|"ProportionalCapacityPreemptionPolicy"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|PREFIX
operator|+
literal|"root.a.a1.disable_preemption"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testReservationAPIs"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
init|;
name|YarnClient
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
init|)
block|{
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|QueueCLI
name|cli
init|=
operator|new
name|QueueCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|yarnClient
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
literal|"a1"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Preemption : disabled"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfoWithEmptyNodeLabel ()
specifier|public
name|void
name|testGetQueueInfoWithEmptyNodeLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|QueueCLI
name|cli
init|=
name|createAndGetQueueCLI
argument_list|()
decl_stmt|;
name|QueueInfo
name|queueInfo
init|=
name|QueueInfo
operator|.
name|newInstance
argument_list|(
literal|"queueA"
argument_list|,
literal|0.4f
argument_list|,
literal|0.8f
argument_list|,
literal|0.5f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getQueueInfo
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
literal|"queueA"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|getQueueInfo
argument_list|(
literal|"queueA"
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Queue Information : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Queue Name : "
operator|+
literal|"queueA"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tState : "
operator|+
literal|"RUNNING"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCapacity : "
operator|+
literal|"40.0%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tCurrent Capacity : "
operator|+
literal|"50.0%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tMaximum Capacity : "
operator|+
literal|"80.0%"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tDefault Node Label expression : "
operator|+
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tAccessible Node Labels : "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"\tPreemption : "
operator|+
literal|"disabled"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|queueInfoStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queueInfoStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfoWithNonExistedQueue ()
specifier|public
name|void
name|testGetQueueInfoWithNonExistedQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queueName
init|=
literal|"non-existed-queue"
decl_stmt|;
name|QueueCLI
name|cli
init|=
name|createAndGetQueueCLI
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getQueueInfo
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-status"
block|,
name|queueName
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|result
argument_list|)
expr_stmt|;
empty_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Cannot get queue from RM by queueName = "
operator|+
name|queueName
operator|+
literal|", please check."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|queueInfoStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queueInfoStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttemptReportException ()
specifier|public
name|void
name|testGetApplicationAttemptReportException
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationAttemptReport
argument_list|(
name|attemptId1
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"History file for application"
operator|+
name|applicationId
operator|+
literal|" is not found"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-status"
block|,
name|attemptId1
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application for AppAttempt with id '"
operator|+
name|attemptId1
operator|+
literal|"' doesn't exist in RM or Timeline Server."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"should return non-zero exit code."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationAttemptReport
argument_list|(
name|attemptId2
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ApplicationAttemptNotFoundException
argument_list|(
literal|"History file for application attempt"
operator|+
name|attemptId2
operator|+
literal|" is not found"
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-status"
block|,
name|attemptId2
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application Attempt with id '"
operator|+
name|attemptId2
operator|+
literal|"' doesn't exist in RM or Timeline Server."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"should return non-zero exit code."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerReportException ()
specifier|public
name|void
name|testGetContainerReportException
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|cntId
init|=
literal|1
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|cntId
operator|++
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getContainerReport
argument_list|(
name|containerId1
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ApplicationNotFoundException
argument_list|(
literal|"History file for application"
operator|+
name|applicationId
operator|+
literal|" is not found"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-status"
block|,
name|containerId1
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application for Container with id '"
operator|+
name|containerId1
operator|+
literal|"' doesn't exist in RM or Timeline Server."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"should return non-zero exit code."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|cntId
operator|++
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getContainerReport
argument_list|(
name|containerId2
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ApplicationAttemptNotFoundException
argument_list|(
literal|"History file for application attempt"
operator|+
name|attemptId
operator|+
literal|" is not found"
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-status"
block|,
name|containerId2
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Application Attempt for Container with id '"
operator|+
name|containerId2
operator|+
literal|"' doesn't exist in RM or Timeline Server."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"should return non-zero exit code."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId3
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|cntId
operator|++
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getContainerReport
argument_list|(
name|containerId3
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ContainerNotFoundException
argument_list|(
literal|"History file for container"
operator|+
name|containerId3
operator|+
literal|" is not found"
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"container"
block|,
literal|"-status"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysOut
argument_list|)
operator|.
name|println
argument_list|(
literal|"Container with id '"
operator|+
name|containerId3
operator|+
literal|"' doesn't exist in RM or Timeline Server."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"should return non-zero exit code."
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateApplicationPriority ()
specifier|public
name|void
name|testUpdateApplicationPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|ApplicationReport
name|appReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appReport
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-appId"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-updatePriority"
block|,
literal|"1"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|updateApplicationPriority
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailApplicationAttempt ()
specifier|public
name|void
name|testFailApplicationAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-fail"
block|,
literal|"appattempt_1444199730803_0003_000001"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|failApplicationAttempt
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyUsageInfo (YarnCLI cli)
specifier|private
name|void
name|verifyUsageInfo
parameter_list|(
name|YarnCLI
name|cli
parameter_list|)
throws|throws
name|Exception
block|{
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sysErr
argument_list|)
operator|.
name|println
argument_list|(
literal|"Invalid Command Usage : "
argument_list|)
expr_stmt|;
block|}
DECL|method|getNodeReports (int noOfNodes, NodeState state)
specifier|private
name|List
argument_list|<
name|NodeReport
argument_list|>
name|getNodeReports
parameter_list|(
name|int
name|noOfNodes
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
return|return
name|getNodeReports
argument_list|(
name|noOfNodes
argument_list|,
name|state
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getNodeReports (int noOfNodes, NodeState state, boolean emptyNodeLabel)
specifier|private
name|List
argument_list|<
name|NodeReport
argument_list|>
name|getNodeReports
parameter_list|(
name|int
name|noOfNodes
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|boolean
name|emptyNodeLabel
parameter_list|)
block|{
return|return
name|getNodeReports
argument_list|(
name|noOfNodes
argument_list|,
name|state
argument_list|,
name|emptyNodeLabel
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getNodeReports (int noOfNodes, NodeState state, boolean emptyNodeLabel, boolean emptyResourceUtilization)
specifier|private
name|List
argument_list|<
name|NodeReport
argument_list|>
name|getNodeReports
parameter_list|(
name|int
name|noOfNodes
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|boolean
name|emptyNodeLabel
parameter_list|,
name|boolean
name|emptyResourceUtilization
parameter_list|)
block|{
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfNodes
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|emptyNodeLabel
condition|)
block|{
comment|// node labels is not ordered, but when we output it, it should be
comment|// ordered
name|nodeLabels
operator|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"c"
argument_list|,
literal|"b"
argument_list|,
literal|"a"
argument_list|,
literal|"x"
argument_list|,
literal|"z"
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
block|}
name|NodeReport
name|nodeReport
init|=
name|NodeReport
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|state
argument_list|,
literal|"host"
operator|+
literal|1
operator|+
literal|":8888"
argument_list|,
literal|"rack1"
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|nodeLabels
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|emptyResourceUtilization
condition|)
block|{
name|ResourceUtilization
name|containersUtilization
init|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2048
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ResourceUtilization
name|nodeUtilization
init|=
name|ResourceUtilization
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|4096
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|nodeReport
operator|.
name|setAggregatedContainersUtilization
argument_list|(
name|containersUtilization
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setNodeUtilization
argument_list|(
name|nodeUtilization
argument_list|)
expr_stmt|;
block|}
name|nodeReports
operator|.
name|add
argument_list|(
name|nodeReport
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeReports
return|;
block|}
DECL|method|createAndGetAppCLI ()
specifier|private
name|ApplicationCLI
name|createAndGetAppCLI
parameter_list|()
block|{
name|ApplicationCLI
name|cli
init|=
operator|new
name|ApplicationCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
return|return
name|cli
return|;
block|}
DECL|method|createAndGetQueueCLI ()
specifier|private
name|QueueCLI
name|createAndGetQueueCLI
parameter_list|()
block|{
name|QueueCLI
name|cli
init|=
operator|new
name|QueueCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
return|return
name|cli
return|;
block|}
DECL|method|createApplicationCLIHelpMessage ()
specifier|private
name|String
name|createApplicationCLIHelpMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"usage: application"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -appId<Application ID>                  Specify Application Id to be"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          operated"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -appStates<States>                      Works with -list to filter"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          applications based on input"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          comma-separated list of"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application states. The valid"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application state can be one of"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          the following:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          ALL,NEW,NEW_SAVING,SUBMITTED,ACC"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          EPTED,RUNNING,FINISHED,FAILED,KI"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          LLED"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -appTags<Tags>                          Works with -list to filter"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          applications based on input"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          comma-separated list of"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application tags."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -appTypes<Types>                        Works with -list to filter"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          applications based on input"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          comma-separated list of"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application types."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -changeQueue<Queue Name>                Moves application to a new"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          queue. ApplicationId can be"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          passed using 'appId' option."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          'movetoqueue' command is"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          deprecated, this new command"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          'changeQueue' performs same"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          functionality."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -component<Component Name><Count>      Works with -flex option to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          change the number of"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          components/containers running"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          for an application /"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          long-running service. Supports"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          absolute or relative changes,"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          such as +1, 2, or -3."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -destroy<Application Name>              Destroys a saved application"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specification and removes all"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application data permanently."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          Supports -appTypes option to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specify which client"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          implementation to use."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -enableFastLaunch<Destination Folder>   Uploads AM dependencies to HDFS"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          to make future launches faster."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          Supports -appTypes option to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specify which client"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          implementation to use."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          Optionally a destination folder"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          for the tarball can be"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specified."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -flex<Application Name or ID>           Changes number of running"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          containers for a component of an"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application / long-running"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          service. Requires -component"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          option. If name is provided,"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          appType must be provided unless"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          it is the default yarn-service."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          If ID is provided, the appType"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          will be looked up. Supports"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          -appTypes option to specify"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          which client implementation to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          use."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -help                                    Displays help for all commands."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -kill<Application ID>                   Kills the application. Set of"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          applications can be provided"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          separated with space"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -launch<Application Name><File Name>   Launches application from"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specification file (saves"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specification and starts"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application). Options"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          -updateLifetime and -changeQueue"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          can be specified to alter the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          values provided in the file."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          Supports -appTypes option to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specify which client"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          implementation to use."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -list                                    List applications. Supports"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          optional use of -appTypes to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          filter applications based on"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application type, -appStates to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          filter applications based on"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application state and -appTags"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          to filter applications based on"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application tag."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -movetoqueue<Application ID>            Moves the application to a"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          different queue. Deprecated"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          command. Use 'changeQueue'"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          instead."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -queue<Queue Name>                      Works with the movetoqueue"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          command to specify which queue"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          to move an application to."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -save<Application Name><File Name>     Saves specification file for an"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application. Options"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          -updateLifetime and -changeQueue"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          can be specified to alter the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          values provided in the file."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          Supports -appTypes option to"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          specify which client"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          implementation to use."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -start<Application Name>                Starts a previously saved"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application. Supports -appTypes"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          option to specify which client"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          implementation to use."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -status<Application Name or ID>         Prints the status of the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application. If app ID is"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          provided, it prints the generic"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          YARN application status. If name"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          is provided, it prints the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application specific status"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          based on app's own"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          implementation, and -appTypes"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          option must be specified unless"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          it is the default yarn-service"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          type."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -stop<Application Name or ID>           Stops application gracefully"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          (may be started again later). If"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          name is provided, appType must"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          be provided unless it is the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          default yarn-service. If ID is"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          provided, the appType will be"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          looked up. Supports -appTypes"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          option to specify which client"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          implementation to use."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -updateLifetime<Timeout>                update timeout of an application"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          from NOW. ApplicationId can be"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          passed using 'appId' option."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          Timeout value is in seconds."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -updatePriority<Priority>               update priority of an"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          application. ApplicationId can"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                          be passed using 'appId' option."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appsHelpStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|appsHelpStr
return|;
block|}
DECL|method|createApplicationAttemptCLIHelpMessage ()
specifier|private
name|String
name|createApplicationAttemptCLIHelpMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"usage: applicationattempt"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -fail<Application Attempt ID>     Fails application attempt."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -help                              Displays help for all commands."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -list<Application ID>             List application attempts for"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                    application."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -status<Application Attempt ID>   Prints the status of the application"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                    attempt."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appsHelpStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|appsHelpStr
return|;
block|}
DECL|method|createContainerCLIHelpMessage ()
specifier|private
name|String
name|createContainerCLIHelpMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"usage: container"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -help                            Displays help for all commands."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -list<Application Attempt ID>   List containers for application attempt."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -signal<container ID [signal command]> Signal the container."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"The available signal commands are "
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
name|SignalContainerCommand
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 Default command is OUTPUT_THREAD_DUMP."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -status<Container ID>           Prints the status of the container."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|normalize
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|infeasible
parameter_list|)
block|{
return|return
name|infeasible
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|createNodeCLIHelpMessage ()
specifier|private
name|String
name|createNodeCLIHelpMessage
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"usage: node"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -all               Works with -list to list all nodes."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -help              Displays help for all commands."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -list              List all running nodes. Supports optional use of"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                    -states to filter nodes based on node state, all -all"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                    to list all nodes, -showDetails to display more"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                    details about each node."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -showDetails       Works with -list to show more details about each node."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -states<States>   Works with -list to filter nodes based on input"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                    comma-separated list of node states. The valid node"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                    state can be one of the following:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                    NEW,RUNNING,UNHEALTHY,DECOMMISSIONED,LOST,REBOOTED,DEC"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                    OMMISSIONING,SHUTDOWN."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -status<NodeId>   Prints the status report of the node."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|nodesHelpStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
return|return
name|nodesHelpStr
return|;
block|}
DECL|method|normalize (String s)
specifier|private
specifier|static
name|String
name|normalize
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|SPACES_PATTERN
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|)
return|;
comment|// single space
block|}
annotation|@
name|Test
DECL|method|testAppAttemptReportWhileContainerIsNotAssigned ()
specifier|public
name|void
name|testAppAttemptReportWhileContainerIsNotAssigned
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptReport
name|attemptReport
init|=
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|attemptId
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|"url"
argument_list|,
literal|"oUrl"
argument_list|,
literal|"diagnostics"
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|SCHEDULED
argument_list|,
literal|null
argument_list|,
literal|1000l
argument_list|,
literal|2000l
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|client
operator|.
name|getApplicationAttemptReport
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptReport
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-status"
block|,
name|attemptId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"applicationattempt"
block|,
literal|"-list"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateApplicationTimeout ()
specifier|public
name|void
name|testUpdateApplicationTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
name|createAndGetAppCLI
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|UpdateApplicationTimeoutsResponse
name|response
init|=
name|mock
argument_list|(
name|UpdateApplicationTimeoutsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|formatISO8601
init|=
name|Times
operator|.
name|formatISO8601
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|5
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getApplicationTimeouts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|formatISO8601
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|client
operator|.
name|updateApplicationTimeouts
argument_list|(
name|any
argument_list|(
name|UpdateApplicationTimeoutsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"application"
block|,
literal|"-appId"
block|,
name|applicationId
operator|.
name|toString
argument_list|()
block|,
literal|"-updateLifetime"
block|,
literal|"10"
block|}
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|client
argument_list|)
operator|.
name|updateApplicationTimeouts
argument_list|(
name|any
argument_list|(
name|UpdateApplicationTimeoutsRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

