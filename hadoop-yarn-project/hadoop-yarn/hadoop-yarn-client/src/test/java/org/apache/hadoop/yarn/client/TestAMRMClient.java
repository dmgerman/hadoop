begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|AMRMClient
operator|.
name|StoredContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestAMRMClient
specifier|public
class|class
name|TestAMRMClient
block|{
DECL|field|conf
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|yarnCluster
specifier|static
name|MiniYARNCluster
name|yarnCluster
init|=
literal|null
decl_stmt|;
DECL|field|yarnClient
specifier|static
name|YarnClientImpl
name|yarnClient
init|=
literal|null
decl_stmt|;
DECL|field|nodeReports
specifier|static
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
literal|null
decl_stmt|;
DECL|field|attemptId
specifier|static
name|ApplicationAttemptId
name|attemptId
init|=
literal|null
decl_stmt|;
DECL|field|nodeCount
specifier|static
name|int
name|nodeCount
init|=
literal|3
decl_stmt|;
DECL|field|capability
specifier|static
name|Resource
name|capability
decl_stmt|;
DECL|field|priority
specifier|static
name|Priority
name|priority
decl_stmt|;
DECL|field|node
specifier|static
name|String
name|node
decl_stmt|;
DECL|field|rack
specifier|static
name|String
name|rack
decl_stmt|;
DECL|field|nodes
specifier|static
name|String
index|[]
name|nodes
decl_stmt|;
DECL|field|racks
specifier|static
name|String
index|[]
name|racks
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start minicluster
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestAMRMClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|nodeCount
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start rm client
name|yarnClient
operator|=
operator|new
name|YarnClientImpl
argument_list|()
expr_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// get node info
name|nodeReports
operator|=
name|yarnClient
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|priority
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|capability
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|node
operator|=
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|rack
operator|=
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRackName
argument_list|()
expr_stmt|;
name|nodes
operator|=
operator|new
name|String
index|[]
block|{
name|node
block|}
expr_stmt|;
name|racks
operator|=
operator|new
name|String
index|[]
block|{
name|rack
block|}
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|startApp ()
specifier|public
name|void
name|startApp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// submit new app
name|GetNewApplicationResponse
name|newApp
init|=
name|yarnClient
operator|.
name|getNewApplication
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|newApp
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|ApplicationSubmissionContext
name|appContext
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set the application id
name|appContext
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// set the application name
name|appContext
operator|.
name|setApplicationName
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
comment|// Set the priority for the application master
name|Priority
name|pri
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|pri
operator|.
name|setPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
comment|// Set the queue to which this application is to be submitted in the RM
name|appContext
operator|.
name|setQueue
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
comment|// Set up the container launch context for the application master
name|ContainerLaunchContext
name|amContainer
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
comment|// unmanaged AM
name|appContext
operator|.
name|setUnmanagedAM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create the request to send to the applications manager
name|SubmitApplicationRequest
name|appRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|appRequest
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
comment|// Submit the application to the applications manager
name|yarnClient
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
comment|// wait for app to start
while|while
condition|(
literal|true
condition|)
block|{
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
condition|)
block|{
name|attemptId
operator|=
name|appReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|After
DECL|method|cancelApp ()
specifier|public
name|void
name|cancelApp
parameter_list|()
block|{
name|attemptId
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|yarnClient
operator|!=
literal|null
operator|&&
name|yarnClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|yarnClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
operator|&&
name|yarnCluster
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientMatchingFit ()
specifier|public
name|void
name|testAMRMClientMatchingFit
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|StoredContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|new
name|AMRMClientImpl
argument_list|<
name|StoredContainerRequest
argument_list|>
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Resource
name|capability1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|capability3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|capability5
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Resource
name|capability6
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer1
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability1
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer2
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability2
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer3
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability3
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer4
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability4
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer5
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability5
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer6
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability6
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer4
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer5
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer6
argument_list|)
expr_stmt|;
comment|// test matching of containers
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|StoredContainerRequest
argument_list|>
argument_list|>
name|matches
decl_stmt|;
name|StoredContainerRequest
name|storedRequest
decl_stmt|;
comment|// exact match
name|Resource
name|testCapability1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability1
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|storedContainer1
operator|==
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
comment|// exact matching with order maintained
name|Resource
name|testCapability2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability2
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// must be returned in the order they were made
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StoredContainerRequest
name|storedRequest1
range|:
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|storedContainer4
operator|==
name|storedRequest1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|storedContainer6
operator|==
name|storedRequest1
argument_list|)
expr_stmt|;
block|}
block|}
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer6
argument_list|)
expr_stmt|;
comment|// matching with larger container. all requests returned
name|Resource
name|testCapability3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4000
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|Resource
name|testCapability4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|// verify non-fitting containers are not returned and fitting ones are
for|for
control|(
name|Collection
argument_list|<
name|StoredContainerRequest
argument_list|>
name|testSet
range|:
name|matches
control|)
block|{
name|assertTrue
argument_list|(
name|testSet
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|StoredContainerRequest
name|testRequest
init|=
name|testSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testRequest
operator|!=
name|storedContainer4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testRequest
operator|!=
name|storedContainer5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|testRequest
operator|==
name|storedContainer2
operator|||
name|testRequest
operator|==
name|storedContainer3
operator|)
assert|;
block|}
name|Resource
name|testCapability5
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyMatches ( List<? extends Collection<StoredContainerRequest>> matches, int matchSize)
specifier|private
name|void
name|verifyMatches
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|StoredContainerRequest
argument_list|>
argument_list|>
name|matches
parameter_list|,
name|int
name|matchSize
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|matchSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientMatchingFitInferredRack ()
specifier|public
name|void
name|testAMRMClientMatchingFitInferredRack
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|StoredContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|new
name|AMRMClientImpl
argument_list|<
name|StoredContainerRequest
argument_list|>
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer1
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
literal|null
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
comment|// verify matching with original node and inferred rack
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|StoredContainerRequest
argument_list|>
argument_list|>
name|matches
decl_stmt|;
name|StoredContainerRequest
name|storedRequest
decl_stmt|;
comment|// exact match node
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|storedContainer1
operator|==
name|storedRequest
argument_list|)
expr_stmt|;
comment|// inferred match rack
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|storedContainer1
operator|==
name|storedRequest
argument_list|)
expr_stmt|;
comment|// inferred rack match no longer valid after request is removed
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientMatchStorage ()
specifier|public
name|void
name|testAMRMClientMatchStorage
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|StoredContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|new
name|AMRMClientImpl
argument_list|<
name|StoredContainerRequest
argument_list|>
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Priority
name|priority1
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|priority1
operator|.
name|setPriority
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|StoredContainerRequest
name|storedContainer1
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer2
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|StoredContainerRequest
name|storedContainer3
init|=
operator|new
name|StoredContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
comment|// test addition and storage
name|int
name|containersRequestedAny
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|get
argument_list|(
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|containersRequestedAny
operator|==
literal|2
argument_list|)
expr_stmt|;
name|containersRequestedAny
operator|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority1
argument_list|)
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|get
argument_list|(
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|containersRequestedAny
operator|==
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|StoredContainerRequest
argument_list|>
argument_list|>
name|matches
init|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority1
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// test removal
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// test matching of containers
name|StoredContainerRequest
name|storedRequest
init|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|storedContainer1
operator|==
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// 0 requests left. everything got cleaned up
name|assertTrue
argument_list|(
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// go through an exemplary allocation, matching and release cycle
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|2
decl_stmt|;
while|while
condition|(
name|allocatedContainerCount
argument_list|<
literal|2
operator|&&
name|iterationsLeft
operator|--
argument_list|>
literal|0
condition|)
block|{
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeCount
operator|==
name|amClient
operator|.
name|getClusterNodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerRequest
name|expectedRequest
init|=
name|container
operator|.
name|getPriority
argument_list|()
operator|.
name|equals
argument_list|(
name|storedContainer1
operator|.
name|getPriority
argument_list|()
argument_list|)
condition|?
name|storedContainer1
else|:
name|storedContainer3
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|container
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// test correct matched container is returned
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerRequest
name|matchedRequest
init|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|matchedRequest
operator|==
name|expectedRequest
argument_list|)
expr_stmt|;
comment|// assign this container, use it and release it
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocatedContainerCount
operator|<
name|containersRequestedAny
condition|)
block|{
comment|// sleep to let NM's heartbeat to RM and trigger allocations
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|allocatedContainerCount
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClient ()
specifier|public
name|void
name|testAMRMClient
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|new
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|testAllocation
argument_list|(
name|amClient
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAllocation (final AMRMClientImpl<ContainerRequest> amClient)
specifier|private
name|void
name|testAllocation
parameter_list|(
specifier|final
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// setup container request
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|containersRequestedNode
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|.
name|get
argument_list|(
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|containersRequestedRack
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|rack
argument_list|)
operator|.
name|get
argument_list|(
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|containersRequestedAny
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|get
argument_list|(
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|containersRequestedNode
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containersRequestedRack
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containersRequestedAny
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|2
decl_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|releases
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
name|nmTokens
init|=
name|amClient
operator|.
name|getNMTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
name|receivedNMTokens
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocatedContainerCount
argument_list|<
name|containersRequestedAny
operator|&&
name|iterationsLeft
operator|--
argument_list|>
literal|0
condition|)
block|{
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeCount
operator|==
name|amClient
operator|.
name|getClusterNodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerId
name|rejectContainerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
name|releases
operator|.
name|add
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nmTokens
operator|.
name|size
argument_list|()
argument_list|,
name|amClient
operator|.
name|getNMTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|nodeI
init|=
name|nmTokens
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeI
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|nodeId
init|=
name|nodeI
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|receivedNMTokens
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|receivedNMTokens
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nmTokens
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Received token again for : "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
name|nodeI
operator|=
name|receivedNMTokens
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|nodeI
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nmTokens
operator|.
name|remove
argument_list|(
name|nodeI
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocatedContainerCount
operator|<
name|containersRequestedAny
condition|)
block|{
comment|// sleep to let NM's heartbeat to RM and trigger allocations
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|getNMTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should receive atleast 1 token
name|Assert
operator|.
name|assertTrue
argument_list|(
name|receivedNMTokens
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|receivedNMTokens
operator|.
name|size
argument_list|()
operator|<=
name|nodeCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedContainerCount
operator|==
name|containersRequestedAny
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// need to tell the AMRMClient that we dont need these resources anymore
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// send 0 container count request for resources that are no longer needed
name|ResourceRequest
name|snoopRequest
init|=
name|amClient
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|snoopRequest
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// test RPC exception handling
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|snoopRequest
operator|=
name|amClient
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|snoopRequest
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|ApplicationMasterProtocol
name|realRM
init|=
name|amClient
operator|.
name|rmClient
decl_stmt|;
try|try
block|{
name|ApplicationMasterProtocol
name|mockRM
init|=
name|mock
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRM
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|AllocateResponse
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|rmClient
operator|=
name|mockRM
expr_stmt|;
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{}
finally|finally
block|{
name|amClient
operator|.
name|rmClient
operator|=
name|realRM
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|snoopRequest
operator|=
name|amClient
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// verify that the remove request made in between makeRequest and allocate
comment|// has not been lost
name|assertTrue
argument_list|(
name|snoopRequest
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|iterationsLeft
operator|=
literal|2
expr_stmt|;
comment|// do a few iterations to ensure RM is not going send new containers
while|while
condition|(
operator|!
name|releases
operator|.
name|isEmpty
argument_list|()
operator|||
name|iterationsLeft
operator|--
operator|>
literal|0
condition|)
block|{
comment|// inform RM of rejection
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
comment|// RM did not send new containers because AM does not need any
name|assertTrue
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ContainerStatus
name|cStatus
range|:
name|allocResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
control|)
block|{
if|if
condition|(
name|releases
operator|.
name|contains
argument_list|(
name|cStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|cStatus
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cStatus
operator|.
name|getExitStatus
argument_list|()
operator|==
operator|-
literal|100
argument_list|)
expr_stmt|;
name|releases
operator|.
name|remove
argument_list|(
name|cStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iterationsLeft
operator|>
literal|0
condition|)
block|{
comment|// sleep to make sure NM's heartbeat
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|sleep (int sleepTime)
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|sleepTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

