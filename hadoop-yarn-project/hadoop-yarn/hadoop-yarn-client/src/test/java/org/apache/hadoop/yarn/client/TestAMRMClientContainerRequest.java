begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|AMRMClientImpl
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestAMRMClientContainerRequest
specifier|public
class|class
name|TestAMRMClientContainerRequest
block|{
annotation|@
name|Test
DECL|method|testFillInRacks ()
specifier|public
name|void
name|testFillInRacks
parameter_list|()
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|client
init|=
operator|new
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0l
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|MyResolver
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerRequest
name|request
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"/rack2"
block|}
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|client
operator|.
name|addContainerRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|verifyResourceRequestLocation
argument_list|(
name|client
argument_list|,
name|request
argument_list|,
literal|"host1"
argument_list|)
expr_stmt|;
name|verifyResourceRequestLocation
argument_list|(
name|client
argument_list|,
name|request
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|verifyResourceRequestLocation
argument_list|(
name|client
argument_list|,
name|request
argument_list|,
literal|"/rack1"
argument_list|)
expr_stmt|;
name|verifyResourceRequestLocation
argument_list|(
name|client
argument_list|,
name|request
argument_list|,
literal|"/rack2"
argument_list|)
expr_stmt|;
name|verifyResourceRequestLocation
argument_list|(
name|client
argument_list|,
name|request
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
expr_stmt|;
block|}
DECL|class|MyResolver
specifier|private
specifier|static
class|class
name|MyResolver
implements|implements
name|DNSToSwitchMapping
block|{
annotation|@
name|Override
DECL|method|resolve (List<String> names)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/rack1"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reloadCachedMappings ()
specifier|public
name|void
name|reloadCachedMappings
parameter_list|()
block|{}
block|}
DECL|method|verifyResourceRequestLocation ( AMRMClientImpl<ContainerRequest> client, ContainerRequest request, String location)
specifier|private
name|void
name|verifyResourceRequestLocation
parameter_list|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|client
parameter_list|,
name|ContainerRequest
name|request
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|ResourceRequest
name|ask
init|=
name|client
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|priority
argument_list|)
operator|.
name|get
argument_list|(
name|location
argument_list|)
operator|.
name|get
argument_list|(
name|request
operator|.
name|capability
argument_list|)
operator|.
name|remoteRequest
decl_stmt|;
name|assertEquals
argument_list|(
name|location
argument_list|,
name|ask
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|request
operator|.
name|getContainerCount
argument_list|()
argument_list|,
name|ask
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

