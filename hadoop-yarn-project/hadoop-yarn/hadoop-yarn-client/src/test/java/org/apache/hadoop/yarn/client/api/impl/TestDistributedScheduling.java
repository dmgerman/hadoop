begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Validates End2End Distributed Scheduling flow which includes the AM  * specifying OPPORTUNISTIC containers in its resource requests,  * the AMRMProxyService on the NM, the LocalScheduler RequestInterceptor on  * the NM and the DistributedSchedulingProtocol used by the framework to talk  * to the DistributedSchedulingService running on the RM.  */
end_comment

begin_class
DECL|class|TestDistributedScheduling
specifier|public
class|class
name|TestDistributedScheduling
extends|extends
name|TestAMRMProxy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDistributedScheduling
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Validates if Allocate Requests containing only OPPORTUNISTIC container    * requests are satisfied instantly.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testOpportunisticExecutionTypeRequestE2E ()
specifier|public
name|void
name|testOpportunisticExecutionTypeRequestE2E
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testDistributedSchedulingE2E"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|YarnClient
name|rmClient
init|=
literal|null
decl_stmt|;
name|ApplicationMasterProtocol
name|client
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|DIST_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_QUEUING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
comment|// the client has to connect to AMRMProxy
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_ADDRESS
argument_list|)
expr_stmt|;
name|rmClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit application
name|ApplicationId
name|appId
init|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|client
operator|=
name|createAMRMProtocol
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|,
name|cluster
argument_list|,
name|yarnConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Register"
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|responseRegister
init|=
name|client
operator|.
name|registerApplicationMaster
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|NetUtils
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getClientToAMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|cluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Allocate"
argument_list|)
expr_stmt|;
name|AllocateRequest
name|request
init|=
name|createAllocateRequest
argument_list|(
name|rmClient
operator|.
name|getNodeReports
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
comment|// Replace 'ANY' requests with OPPORTUNISTIC aks and remove
comment|// everything else
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|newAskList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|request
operator|.
name|getAskList
argument_list|()
control|)
block|{
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|ResourceRequest
name|newRR
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|rr
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|rr
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|rr
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
decl_stmt|;
name|newAskList
operator|.
name|add
argument_list|(
name|newRR
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAskList
argument_list|(
name|newAskList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|client
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocResponse
argument_list|)
expr_stmt|;
comment|// Ensure that all the requests are satisfied immediately
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the allocated containers are OPPORTUNISTIC
for|for
control|(
name|Container
name|allocatedContainer
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Finish"
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|responseFinish
init|=
name|client
operator|.
name|finishApplicationMaster
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|"success"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseFinish
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|rmClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Validates if Allocate Requests containing both GUARANTEED and OPPORTUNISTIC    * container requests works as expected.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMixedExecutionTypeRequestE2E ()
specifier|public
name|void
name|testMixedExecutionTypeRequestE2E
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testDistributedSchedulingE2E"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|YarnClient
name|rmClient
init|=
literal|null
decl_stmt|;
name|ApplicationMasterProtocol
name|client
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|DIST_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_QUEUING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
comment|// the client has to connect to AMRMProxy
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_ADDRESS
argument_list|)
expr_stmt|;
name|rmClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit application
name|ApplicationId
name|appId
init|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|client
operator|=
name|createAMRMProtocol
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|,
name|cluster
argument_list|,
name|yarnConf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Register"
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|responseRegister
init|=
name|client
operator|.
name|registerApplicationMaster
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|NetUtils
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getClientToAMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|cluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Allocate"
argument_list|)
expr_stmt|;
name|AllocateRequest
name|request
init|=
name|createAllocateRequest
argument_list|(
name|rmClient
operator|.
name|getNodeReports
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
name|request
operator|.
name|getAskList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|newAskList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|askList
argument_list|)
decl_stmt|;
comment|// Duplicate all ANY requests marking them as opportunistic
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|askList
control|)
block|{
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|ResourceRequest
name|newRR
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|rr
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|rr
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|rr
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
decl_stmt|;
name|newAskList
operator|.
name|add
argument_list|(
name|newRR
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAskList
argument_list|(
name|newAskList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|client
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocResponse
argument_list|)
expr_stmt|;
comment|// Ensure that all the requests are satisfied immediately
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the allocated containers are OPPORTUNISTIC
for|for
control|(
name|Container
name|allocatedContainer
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAskList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResponseId
argument_list|(
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// RM should allocate GUARANTEED containers within 2 calls to allocate()
name|allocResponse
operator|=
name|client
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the allocated containers are GUARANTEED
for|for
control|(
name|Container
name|allocatedContainer
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Finish"
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|responseFinish
init|=
name|client
operator|.
name|finishApplicationMaster
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|"success"
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseFinish
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|rmClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Override
DECL|method|testAMRMProxyE2E ()
specifier|public
name|void
name|testAMRMProxyE2E
parameter_list|()
throws|throws
name|Exception
block|{ }
annotation|@
name|Ignore
annotation|@
name|Override
DECL|method|testE2ETokenRenewal ()
specifier|public
name|void
name|testE2ETokenRenewal
parameter_list|()
throws|throws
name|Exception
block|{ }
annotation|@
name|Ignore
annotation|@
name|Override
DECL|method|testE2ETokenSwap ()
specifier|public
name|void
name|testE2ETokenSwap
parameter_list|()
throws|throws
name|Exception
block|{ }
block|}
end_class

end_unit

