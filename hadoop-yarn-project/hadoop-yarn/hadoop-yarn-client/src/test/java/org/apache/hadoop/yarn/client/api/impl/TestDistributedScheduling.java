begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Validates End2End Distributed Scheduling flow which includes the AM  * specifying OPPORTUNISTIC containers in its resource requests,  * the AMRMProxyService on the NM, the LocalScheduler RequestInterceptor on  * the NM and the DistributedSchedulingProtocol used by the framework to talk  * to the DistributedSchedulingService running on the RM.  */
end_comment

begin_class
DECL|class|TestDistributedScheduling
specifier|public
class|class
name|TestDistributedScheduling
extends|extends
name|BaseAMRMProxyE2ETest
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDistributedScheduling
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniYARNCluster
name|cluster
decl_stmt|;
DECL|field|rmClient
specifier|protected
name|YarnClient
name|rmClient
decl_stmt|;
DECL|field|client
specifier|protected
name|ApplicationMasterProtocol
name|client
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|yarnConf
specifier|protected
name|Configuration
name|yarnConf
decl_stmt|;
DECL|field|attemptId
specifier|protected
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
DECL|field|appId
specifier|protected
name|ApplicationId
name|appId
decl_stmt|;
annotation|@
name|Before
DECL|method|doBefore ()
specifier|public
name|void
name|doBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testDistributedSchedulingE2E"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AMRM_PROXY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|DIST_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_QUEUING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|yarnConf
operator|=
name|cluster
operator|.
name|getConfig
argument_list|()
expr_stmt|;
comment|// the client has to connect to AMRMProxy
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_AMRM_PROXY_ADDRESS
argument_list|)
expr_stmt|;
name|rmClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit application
name|attemptId
operator|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
name|cluster
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|appId
operator|=
name|attemptId
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|client
operator|=
name|createAMRMProtocol
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|,
name|cluster
argument_list|,
name|yarnConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|doAfter ()
specifier|public
name|void
name|doAfter
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|client
operator|.
name|finishApplicationMaster
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|"success"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|killApplication
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|attemptId
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
block|}
block|}
comment|/**    * Validates if Allocate Requests containing only OPPORTUNISTIC container    * requests are satisfied instantly.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testOpportunisticExecutionTypeRequestE2E ()
specifier|public
name|void
name|testOpportunisticExecutionTypeRequestE2E
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Register"
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|responseRegister
init|=
name|client
operator|.
name|registerApplicationMaster
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|NetUtils
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getClientToAMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|cluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Allocate"
argument_list|)
expr_stmt|;
name|AllocateRequest
name|request
init|=
name|createAllocateRequest
argument_list|(
name|rmClient
operator|.
name|getNodeReports
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
comment|// Replace 'ANY' requests with OPPORTUNISTIC aks and remove
comment|// everything else
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|newAskList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|request
operator|.
name|getAskList
argument_list|()
control|)
block|{
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|ResourceRequest
name|newRR
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|rr
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|rr
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|rr
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|newAskList
operator|.
name|add
argument_list|(
name|newRR
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAskList
argument_list|(
name|newAskList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|client
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocResponse
argument_list|)
expr_stmt|;
comment|// Ensure that all the requests are satisfied immediately
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the allocated containers are OPPORTUNISTIC
for|for
control|(
name|Container
name|allocatedContainer
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Finish"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates if Allocate Requests containing both GUARANTEED and OPPORTUNISTIC    * container requests works as expected.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testMixedExecutionTypeRequestE2E ()
specifier|public
name|void
name|testMixedExecutionTypeRequestE2E
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Register"
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterResponse
name|responseRegister
init|=
name|client
operator|.
name|registerApplicationMaster
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|NetUtils
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|""
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getClientToAMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getSchedulerResourceTypes
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|responseRegister
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|cluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Allocate"
argument_list|)
expr_stmt|;
name|AllocateRequest
name|request
init|=
name|createAllocateRequest
argument_list|(
name|rmClient
operator|.
name|getNodeReports
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
name|request
operator|.
name|getAskList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|newAskList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|askList
argument_list|)
decl_stmt|;
comment|// Duplicate all ANY requests marking them as opportunistic
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|askList
control|)
block|{
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|ResourceRequest
name|newRR
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|rr
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|rr
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|rr
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|newAskList
operator|.
name|add
argument_list|(
name|newRR
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setAskList
argument_list|(
name|newAskList
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|client
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocResponse
argument_list|)
expr_stmt|;
comment|// Ensure that all the requests are satisfied immediately
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the allocated containers are OPPORTUNISTIC
for|for
control|(
name|Container
name|allocatedContainer
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setAskList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResponseId
argument_list|(
name|request
operator|.
name|getResponseId
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// RM should allocate GUARANTEED containers within 2 calls to allocate()
name|allocResponse
operator|=
name|client
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the allocated containers are GUARANTEED
for|for
control|(
name|Container
name|allocatedContainer
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerTokenIdentifier
name|containerTokenIdentifier
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|allocatedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|containerTokenIdentifier
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"testDistributedSchedulingE2E - Finish"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validates if AMRMClient can be used with Distributed Scheduling turned on.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAMRMClient ()
specifier|public
name|void
name|testAMRMClient
parameter_list|()
throws|throws
name|Exception
block|{
name|AMRMClientImpl
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
name|rmClient
operator|.
name|getNodeReports
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|String
name|node
init|=
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
name|rack
init|=
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRackName
argument_list|()
decl_stmt|;
name|String
index|[]
name|nodes
init|=
operator|new
name|String
index|[]
block|{
name|node
block|}
decl_stmt|;
name|String
index|[]
name|racks
init|=
operator|new
name|String
index|[]
block|{
name|rack
block|}
decl_stmt|;
comment|// start am rm client
name|amClient
operator|=
operator|new
name|AMRMClientImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
name|NetUtils
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|1024
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|containersRequestedNode
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|containersRequestedRack
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|containersRequestedAny
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|oppContainersRequestedAny
init|=
name|amClient
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|capability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containersRequestedNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containersRequestedRack
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containersRequestedAny
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oppContainersRequestedAny
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|10
decl_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|releases
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|numberOfTokensInCache
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
name|receivedNMTokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocatedContainerCount
argument_list|<
operator|(
name|containersRequestedAny
operator|+
name|oppContainersRequestedAny
operator|)
operator|&&
name|iterationsLeft
operator|--
argument_list|>
literal|0
condition|)
block|{
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerId
name|rejectContainerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
name|releases
operator|.
name|add
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NMToken
name|token
range|:
name|allocResponse
operator|.
name|getNMTokens
argument_list|()
control|)
block|{
name|String
name|nodeID
init|=
name|token
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|receivedNMTokens
operator|.
name|put
argument_list|(
name|nodeID
argument_list|,
name|token
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocatedContainerCount
operator|<
name|containersRequestedAny
condition|)
block|{
comment|// sleep to let NM's heartbeat to RM and trigger allocations
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|allocatedContainerCount
argument_list|,
name|containersRequestedAny
operator|+
name|oppContainersRequestedAny
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerId
name|rejectContainerId
range|:
name|releases
control|)
block|{
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to tell the AMRMClient that we dont need these resources anymore
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test RPC exception handling
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AMRMClient
name|amc
init|=
name|amClient
decl_stmt|;
name|ApplicationMasterProtocol
name|realRM
init|=
name|amClient
operator|.
name|rmClient
decl_stmt|;
try|try
block|{
name|ApplicationMasterProtocol
name|mockRM
init|=
name|mock
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRM
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|AllocateResponse
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
name|amc
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amc
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amc
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|rmClient
operator|=
name|mockRM
expr_stmt|;
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{       }
finally|finally
block|{
name|amClient
operator|.
name|rmClient
operator|=
name|realRM
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iterationsLeft
operator|=
literal|3
expr_stmt|;
comment|// do a few iterations to ensure RM is not going send new containers
while|while
condition|(
name|iterationsLeft
operator|--
operator|>
literal|0
condition|)
block|{
comment|// inform RM of rejection
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
comment|// RM did not send new containers because AM does not need any
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ContainerStatus
name|cStatus
range|:
name|allocResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
control|)
block|{
if|if
condition|(
name|releases
operator|.
name|contains
argument_list|(
name|cStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|cStatus
operator|.
name|getState
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|100
argument_list|,
name|cStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|releases
operator|.
name|remove
argument_list|(
name|cStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iterationsLeft
operator|>
literal|0
condition|)
block|{
comment|// sleep to make sure NM's heartbeat
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|Service
operator|.
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|sleep (int sleepTime)
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|sleepTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

