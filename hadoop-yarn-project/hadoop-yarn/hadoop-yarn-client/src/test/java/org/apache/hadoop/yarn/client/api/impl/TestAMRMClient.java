begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|InvalidContainerRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMTokenCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * Test application master client class to resource manager.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestAMRMClient
specifier|public
class|class
name|TestAMRMClient
block|{
DECL|field|schedulerName
specifier|private
name|String
name|schedulerName
init|=
literal|null
decl_stmt|;
DECL|field|autoUpdate
specifier|private
name|boolean
name|autoUpdate
init|=
literal|false
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|yarnCluster
specifier|private
name|MiniYARNCluster
name|yarnCluster
init|=
literal|null
decl_stmt|;
DECL|field|yarnClient
specifier|private
name|YarnClient
name|yarnClient
init|=
literal|null
decl_stmt|;
DECL|field|nodeReports
specifier|private
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
literal|null
decl_stmt|;
DECL|field|attemptId
specifier|private
name|ApplicationAttemptId
name|attemptId
init|=
literal|null
decl_stmt|;
DECL|field|nodeCount
specifier|private
name|int
name|nodeCount
init|=
literal|3
decl_stmt|;
DECL|field|rolling_interval_sec
specifier|static
specifier|final
name|int
name|rolling_interval_sec
init|=
literal|13
decl_stmt|;
DECL|field|am_expire_ms
specifier|static
specifier|final
name|long
name|am_expire_ms
init|=
literal|4000
decl_stmt|;
DECL|field|capability
specifier|private
name|Resource
name|capability
decl_stmt|;
DECL|field|priority
specifier|private
name|Priority
name|priority
decl_stmt|;
DECL|field|priority2
specifier|private
name|Priority
name|priority2
decl_stmt|;
DECL|field|node
specifier|private
name|String
name|node
decl_stmt|;
DECL|field|rack
specifier|private
name|String
name|rack
decl_stmt|;
DECL|field|nodes
specifier|private
name|String
index|[]
name|nodes
decl_stmt|;
DECL|field|racks
specifier|private
name|String
index|[]
name|racks
decl_stmt|;
DECL|field|DEFAULT_ITERATION
specifier|private
specifier|final
specifier|static
name|int
name|DEFAULT_ITERATION
init|=
literal|3
decl_stmt|;
DECL|method|TestAMRMClient (String schedulerName, boolean autoUpdate)
specifier|public
name|TestAMRMClient
parameter_list|(
name|String
name|schedulerName
parameter_list|,
name|boolean
name|autoUpdate
parameter_list|)
block|{
name|this
operator|.
name|schedulerName
operator|=
name|schedulerName
expr_stmt|;
name|this
operator|.
name|autoUpdate
operator|=
name|autoUpdate
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
comment|// Currently only capacity scheduler supports auto update.
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|true
block|}
block|,
block|{
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|false
block|}
block|,
block|{
name|FairScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|false
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|createClusterAndStartApplication
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createClusterAndStartApplication (Configuration conf)
specifier|private
name|void
name|createClusterAndStartApplication
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// start minicluster
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|autoUpdate
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AUTO_UPDATE_CONTAINERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|schedulerName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|,
name|rolling_interval_sec
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
name|am_expire_ms
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// set the minimum allocation so that resource decrease can go under 1024
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_RETAIN_SECONDS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|yarnCluster
operator|=
operator|new
name|MiniYARNCluster
argument_list|(
name|TestAMRMClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|nodeCount
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnCluster
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start rm client
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// get node info
name|assertTrue
argument_list|(
literal|"All node managers did not connect to the RM within the "
operator|+
literal|"allotted 5-second timeout"
argument_list|,
name|yarnCluster
operator|.
name|waitForNodeManagersToConnect
argument_list|(
literal|5000L
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|=
name|yarnClient
operator|.
name|getNodeReports
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Not all node managers were reported running"
argument_list|,
name|nodeCount
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|priority
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|priority2
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|capability
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|node
operator|=
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|rack
operator|=
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRackName
argument_list|()
expr_stmt|;
name|nodes
operator|=
operator|new
name|String
index|[]
block|{
name|node
block|}
expr_stmt|;
name|racks
operator|=
operator|new
name|String
index|[]
block|{
name|rack
block|}
expr_stmt|;
comment|// submit new app
name|ApplicationSubmissionContext
name|appContext
init|=
name|yarnClient
operator|.
name|createApplication
argument_list|()
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appContext
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// set the application name
name|appContext
operator|.
name|setApplicationName
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
comment|// Set the priority for the application master
name|Priority
name|pri
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|pri
operator|.
name|setPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
comment|// Set the queue to which this application is to be submitted in the RM
name|appContext
operator|.
name|setQueue
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
comment|// Set up the container launch context for the application master
name|ContainerLaunchContext
name|amContainer
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|LocalResource
operator|>
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the request to send to the applications manager
name|SubmitApplicationRequest
name|appRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|appRequest
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
comment|// Submit the application to the applications manager
name|yarnClient
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
comment|// wait for app to start
name|RMAppAttempt
name|appAttempt
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
condition|)
block|{
name|attemptId
operator|=
name|appReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
expr_stmt|;
name|appAttempt
operator|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|appAttempt
operator|.
name|getAppAttemptState
argument_list|()
operator|==
name|RMAppAttemptState
operator|.
name|LAUNCHED
condition|)
block|{
break|break;
block|}
block|}
break|break;
block|}
block|}
comment|// Just dig into the ResourceManager and get the AMRMToken just for the sake
comment|// of testing.
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// emulate RM setup of AMRM token in credentials by adding the token
comment|// *before* setting the token service
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addToken
argument_list|(
name|appAttempt
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
name|appAttempt
operator|.
name|getAMRMToken
argument_list|()
operator|.
name|setService
argument_list|(
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|yarnClient
operator|.
name|killApplication
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|attemptId
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|yarnClient
operator|!=
literal|null
operator|&&
name|yarnClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|yarnClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|yarnCluster
operator|!=
literal|null
operator|&&
name|yarnCluster
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|yarnCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientNoMatchingRequests ()
specifier|public
name|void
name|testAMRMClientNoMatchingRequests
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
name|AMRMClient
operator|.
name|createAMRMClient
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Resource
name|testCapability1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|>
name|matches
init|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no matching requests."
argument_list|,
name|matches
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientMatchingFit ()
specifier|public
name|void
name|testAMRMClientMatchingFit
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Resource
name|capability1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|capability3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|capability5
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Resource
name|capability6
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|capability7
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer1
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability1
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer2
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability2
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer3
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability3
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer4
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability4
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer5
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability5
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer6
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability6
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer7
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability7
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer4
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer5
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer6
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer7
argument_list|)
expr_stmt|;
comment|// Add some CRs with allocReqIds... These will not be returned by
comment|// the default getMatchingRequests
name|ContainerRequest
name|storedContainer11
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability1
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer33
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability3
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer43
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability4
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer11
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer33
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer43
argument_list|)
expr_stmt|;
comment|// test matching of containers
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|>
name|matches
decl_stmt|;
name|ContainerRequest
name|storedRequest
decl_stmt|;
comment|// exact match
name|Resource
name|testCapability1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability1
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedContainer1
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
comment|// exact match for allocReqId 1
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
name|reqIdMatches
init|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reqIdMatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|reqIdMatches
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedContainer11
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer11
argument_list|)
expr_stmt|;
comment|// exact match for allocReqId 3
name|reqIdMatches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reqIdMatches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|ContainerRequest
argument_list|>
name|iter
init|=
name|reqIdMatches
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|storedRequest
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedContainer43
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer43
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedContainer33
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer33
argument_list|)
expr_stmt|;
comment|// exact matching with order maintained
name|Resource
name|testCapability2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability2
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// must be returned in the order they were made
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ContainerRequest
name|storedRequest1
range|:
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|storedContainer4
argument_list|,
name|storedRequest1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|storedContainer6
argument_list|,
name|storedRequest1
argument_list|)
expr_stmt|;
block|}
block|}
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer6
argument_list|)
expr_stmt|;
comment|// matching with larger container. all requests returned
name|Resource
name|testCapability3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4000
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|Resource
name|testCapability4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|// verify non-fitting containers are not returned and fitting ones are
for|for
control|(
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
name|testSet
range|:
name|matches
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|testSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequest
name|testRequest
init|=
name|testSet
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testRequest
operator|!=
name|storedContainer4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testRequest
operator|!=
name|storedContainer5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|testRequest
operator|==
name|storedContainer2
operator|||
name|testRequest
operator|==
name|storedContainer3
operator|)
assert|;
block|}
name|Resource
name|testCapability5
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
comment|// verify requests without relaxed locality are only returned at specific
comment|// locations
name|Resource
name|testCapability7
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|testCapability7
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority2
argument_list|,
name|node
argument_list|,
name|testCapability7
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test fit of both GUARANTEED and OPPORTUNISTIC containers.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientMatchingFitExecType ()
specifier|public
name|void
name|testAMRMClientMatchingFitExecType
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Resource
name|capability1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|capability3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability5
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|capability6
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Resource
name|capability7
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|6000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// Add 2 GUARANTEED and 7 OPPORTUNISTIC requests.
name|ContainerRequest
name|storedGuarContainer1
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability1
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedGuarContainer2
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability2
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedOpportContainer1
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability1
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedOpportContainer2
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability2
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedOpportContainer3
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability3
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedOpportContainer4
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability4
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedOpportContainer5
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability5
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedOpportContainer6
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability6
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedOpportContainer7
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability7
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority2
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedGuarContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedGuarContainer2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedOpportContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedOpportContainer2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedOpportContainer3
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedOpportContainer4
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedOpportContainer5
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedOpportContainer6
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedOpportContainer7
argument_list|)
expr_stmt|;
comment|// Make sure 3 entries are generated in the ask list for each added
comment|// container request of a given capability, locality, execution type and
comment|// priority (one node-local, one rack-local, and one ANY).
name|assertEquals
argument_list|(
literal|24
argument_list|,
operator|(
operator|(
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|amClient
operator|)
operator|.
name|ask
operator|.
name|size
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// test exact matching of GUARANTEED containers
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|>
name|matches
decl_stmt|;
name|ContainerRequest
name|storedRequest
decl_stmt|;
name|Resource
name|testCapability1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|testCapability1
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedGuarContainer1
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedGuarContainer1
argument_list|)
expr_stmt|;
comment|// test exact matching of OPPORTUNISTIC containers
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|testCapability1
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedOpportContainer1
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedOpportContainer1
argument_list|)
expr_stmt|;
comment|// exact OPPORTUNISTIC matching with order maintained
name|Resource
name|testCapability2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|testCapability2
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// must be returned in the order they were made
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ContainerRequest
name|storedRequest1
range|:
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|storedOpportContainer3
argument_list|,
name|storedRequest1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|storedOpportContainer4
argument_list|,
name|storedRequest1
argument_list|)
expr_stmt|;
block|}
block|}
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedOpportContainer3
argument_list|)
expr_stmt|;
comment|// matching with larger container
name|Resource
name|testCapability3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4000
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|testCapability3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
comment|// verify requests without relaxed locality are only returned at specific
comment|// locations
name|Resource
name|testCapability4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|6000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|testCapability4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority2
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|testCapability4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|matches
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyMatches ( List<? extends Collection<ContainerRequest>> matches, int matchSize)
specifier|private
name|void
name|verifyMatches
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|>
name|matches
parameter_list|,
name|int
name|matchSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|matchSize
argument_list|,
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientMatchingFitInferredRack ()
specifier|public
name|void
name|testAMRMClientMatchingFitInferredRack
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|new
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer1
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
literal|null
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
comment|// verify matching with original node and inferred rack
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|>
name|matches
decl_stmt|;
name|ContainerRequest
name|storedRequest
decl_stmt|;
comment|// exact match node
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedContainer1
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
comment|// inferred match rack
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedContainer1
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
comment|// inferred rack match no longer valid after request is removed
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
comment|//(timeout=60000)
DECL|method|testAMRMClientMatchStorage ()
specifier|public
name|void
name|testAMRMClientMatchStorage
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Priority
name|priority1
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|priority1
operator|.
name|setPriority
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ContainerRequest
name|storedContainer1
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer2
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer3
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority1
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
name|ProfileCapability
name|profileCapability
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
name|capability
argument_list|)
decl_stmt|;
comment|// test addition and storage
name|RemoteRequestsTable
argument_list|<
name|ContainerRequest
argument_list|>
name|remoteRequestsTable
init|=
name|amClient
operator|.
name|getTable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|containersRequestedAny
init|=
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|profileCapability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containersRequestedAny
argument_list|)
expr_stmt|;
name|containersRequestedAny
operator|=
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|profileCapability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containersRequestedAny
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|>
name|matches
init|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
decl_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority1
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// test removal
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// test matching of containers
name|ContainerRequest
name|storedRequest
init|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|storedContainer1
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|matches
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// 0 requests left. everything got cleaned up
name|assertTrue
argument_list|(
name|amClient
operator|.
name|getTable
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// go through an exemplary allocation, matching and release cycle
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|3
decl_stmt|;
while|while
condition|(
name|allocatedContainerCount
argument_list|<
literal|2
operator|&&
name|iterationsLeft
operator|--
argument_list|>
literal|0
condition|)
block|{
name|Log
operator|.
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Allocated "
operator|+
name|allocatedContainerCount
operator|+
literal|" containers"
operator|+
literal|" with "
operator|+
name|iterationsLeft
operator|+
literal|" iterations left"
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|amClient
operator|.
name|getClusterNodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerRequest
name|expectedRequest
init|=
name|container
operator|.
name|getPriority
argument_list|()
operator|.
name|equals
argument_list|(
name|storedContainer1
operator|.
name|getPriority
argument_list|()
argument_list|)
condition|?
name|storedContainer1
else|:
name|storedContainer3
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|container
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// test correct matched container is returned
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ContainerRequest
name|matchedRequest
init|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|matchedRequest
argument_list|,
name|expectedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|matchedRequest
argument_list|)
expr_stmt|;
comment|// assign this container, use it and release it
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocatedContainerCount
operator|<
name|containersRequestedAny
condition|)
block|{
comment|// let NM heartbeat to RM and trigger allocations
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocatedContainerCount
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 0 requests left. everything got cleaned up
name|assertTrue
argument_list|(
name|remoteRequestsTable
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make sure we get allocations regardless of timing issues.    */
DECL|method|triggerSchedulingWithNMHeartBeat ()
specifier|private
name|void
name|triggerSchedulingWithNMHeartBeat
parameter_list|()
block|{
comment|// Simulate fair scheduler update thread
name|RMContext
name|context
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getScheduler
argument_list|()
operator|instanceof
name|FairScheduler
condition|)
block|{
name|FairScheduler
name|scheduler
init|=
operator|(
name|FairScheduler
operator|)
name|context
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
comment|// Trigger NM's heartbeat to RM and trigger allocations
for|for
control|(
name|RMNode
name|rmNode
range|:
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|context
operator|.
name|getScheduler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getScheduler
argument_list|()
operator|instanceof
name|FairScheduler
condition|)
block|{
name|FairScheduler
name|scheduler
init|=
operator|(
name|FairScheduler
operator|)
name|context
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAllocationWithBlacklist ()
specifier|public
name|void
name|testAllocationWithBlacklist
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerRequest
name|storedContainer1
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|localNodeBlacklist
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|localNodeBlacklist
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
comment|// put node in black list, so no container assignment
name|amClient
operator|.
name|updateBlacklist
argument_list|(
name|localNodeBlacklist
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|allocatedContainerCount
init|=
name|getAllocatedContainersNumber
argument_list|(
name|amClient
argument_list|,
name|DEFAULT_ITERATION
argument_list|)
decl_stmt|;
comment|// the only node is in blacklist, so no allocation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocatedContainerCount
argument_list|)
expr_stmt|;
comment|// Remove node from blacklist, so get assigned with 2
name|amClient
operator|.
name|updateBlacklist
argument_list|(
literal|null
argument_list|,
name|localNodeBlacklist
argument_list|)
expr_stmt|;
name|ContainerRequest
name|storedContainer2
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|=
name|getAllocatedContainersNumber
argument_list|(
name|amClient
argument_list|,
name|DEFAULT_ITERATION
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocatedContainerCount
argument_list|)
expr_stmt|;
comment|// Test in case exception in allocate(), blacklist is kept
name|assertTrue
argument_list|(
name|amClient
operator|.
name|blacklistAdditions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|amClient
operator|.
name|blacklistRemovals
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a invalid ContainerRequest - memory value is minus
name|ContainerRequest
name|invalidContainerRequest
init|=
operator|new
name|ContainerRequest
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
operator|-
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|invalidContainerRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|updateBlacklist
argument_list|(
name|localNodeBlacklist
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
comment|// allocate() should complain as ContainerRequest is invalid.
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"there should be an exception here."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|amClient
operator|.
name|blacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientWithBlacklist ()
specifier|public
name|void
name|testAMRMClientWithBlacklist
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
index|[]
name|nodes
init|=
block|{
literal|"node1"
block|,
literal|"node2"
block|,
literal|"node3"
block|}
decl_stmt|;
comment|// Add nodes[0] and nodes[1]
name|List
argument_list|<
name|String
argument_list|>
name|nodeList01
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nodeList01
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|nodeList01
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|updateBlacklist
argument_list|(
name|nodeList01
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amClient
operator|.
name|blacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|blacklistRemovals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add nodes[0] again, verify it is not added duplicated.
name|List
argument_list|<
name|String
argument_list|>
name|nodeList02
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nodeList02
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|nodeList02
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|updateBlacklist
argument_list|(
name|nodeList02
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClient
operator|.
name|blacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|blacklistRemovals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add nodes[1] and nodes[2] to removal list,
comment|// Verify addition list remove these two nodes.
name|List
argument_list|<
name|String
argument_list|>
name|nodeList12
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nodeList12
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|nodeList12
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|updateBlacklist
argument_list|(
literal|null
argument_list|,
name|nodeList12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|amClient
operator|.
name|blacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amClient
operator|.
name|blacklistRemovals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add nodes[1] again to addition list,
comment|// Verify removal list will remove this node.
name|List
argument_list|<
name|String
argument_list|>
name|nodeList1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|nodeList1
operator|.
name|add
argument_list|(
name|nodes
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|updateBlacklist
argument_list|(
name|nodeList1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amClient
operator|.
name|blacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|amClient
operator|.
name|blacklistRemovals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getAllocatedContainersNumber ( AMRMClientImpl<ContainerRequest> amClient, int iterationsLeft)
specifier|private
name|int
name|getAllocatedContainersNumber
parameter_list|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|,
name|int
name|iterationsLeft
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterationsLeft
operator|--
operator|>
literal|0
condition|)
block|{
name|Log
operator|.
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Allocated "
operator|+
name|allocatedContainerCount
operator|+
literal|" containers"
operator|+
literal|" with "
operator|+
name|iterationsLeft
operator|+
literal|" iterations left"
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|amClient
operator|.
name|getClusterNodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocatedContainerCount
operator|==
literal|0
condition|)
block|{
comment|// let NM heartbeat to RM and trigger allocations
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|allocatedContainerCount
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClient ()
specifier|public
name|void
name|testAMRMClient
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|initAMRMClientAndTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientAllocReqId ()
specifier|public
name|void
name|testAMRMClientAllocReqId
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|initAMRMClientAndTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientWithSaslEncryption ()
specifier|public
name|void
name|testAMRMClientWithSaslEncryption
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we have to create a new instance of MiniYARNCluster to avoid SASL qop
comment|// mismatches between client and server
name|teardown
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_RPC_PROTECTION
argument_list|,
literal|"privacy"
argument_list|)
expr_stmt|;
name|createClusterAndStartApplication
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|initAMRMClientAndTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|initAMRMClientAndTest (boolean useAllocReqId)
specifier|private
name|void
name|initAMRMClientAndTest
parameter_list|(
name|boolean
name|useAllocReqId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
comment|//setting an instance NMTokenCache
name|amClient
operator|.
name|setNMTokenCache
argument_list|(
operator|new
name|NMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
comment|//asserting we are not using the singleton instance cache
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|useAllocReqId
condition|)
block|{
name|testAllocRequestId
argument_list|(
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|amClient
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testAllocation
argument_list|(
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|amClient
argument_list|)
expr_stmt|;
block|}
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAskWithNodeLabels ()
specifier|public
name|void
name|testAskWithNodeLabels
parameter_list|()
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|client
init|=
operator|new
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// add exp=x to ANY
name|client
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|client
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
comment|// add exp=x then add exp=a to ANY in same priority, only exp=a should kept
name|client
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|client
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
comment|// add exp=x to ANY, rack and node, only resource request has ANY resource
comment|// name will be assigned the label expression
comment|// add exp=x then add exp=a to ANY in same priority, only exp=a should kept
name|client
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|client
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|client
operator|.
name|ask
control|)
block|{
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set container with nodes and racks with labels
name|client
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"rack1"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"node1"
block|,
literal|"node2"
block|}
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|client
operator|.
name|ask
control|)
block|{
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyAddRequestFailed (AMRMClient<ContainerRequest> client, ContainerRequest request)
specifier|private
name|void
name|verifyAddRequestFailed
parameter_list|(
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|client
parameter_list|,
name|ContainerRequest
name|request
parameter_list|)
block|{
try|try
block|{
name|client
operator|.
name|addContainerRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidContainerRequestException
name|e
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAskWithInvalidNodeLabels ()
specifier|public
name|void
name|testAskWithInvalidNodeLabels
parameter_list|()
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|client
init|=
operator|new
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// specified exp with more than one node labels
name|verifyAddRequestFailed
argument_list|(
name|client
argument_list|,
operator|new
name|ContainerRequest
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|true
argument_list|,
literal|"x&& y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientWithContainerResourceChange ()
specifier|public
name|void
name|testAMRMClientWithContainerResourceChange
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// Fair scheduler does not support resource change
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|schedulerName
operator|.
name|equals
argument_list|(
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
name|AMRMClient
operator|.
name|createAMRMClient
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amClient
argument_list|)
expr_stmt|;
comment|// asserting we are using the singleton instance cache
name|Assert
operator|.
name|assertSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|amClient
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// start am nm client
name|NMClientImpl
name|nmClient
init|=
operator|(
name|NMClientImpl
operator|)
name|NMClient
operator|.
name|createNMClient
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nmClient
argument_list|)
expr_stmt|;
comment|// asserting we are using the singleton instance cache
name|Assert
operator|.
name|assertSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|nmClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|nmClient
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
comment|// am rm client register the application master with RM
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// allocate three containers and make sure they are in RUNNING state
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocateAndStartContainers
argument_list|(
name|amClient
argument_list|,
name|nmClient
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// perform container resource increase and decrease tests
name|doContainerResourceChange
argument_list|(
name|amClient
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// unregister and finish up the test
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|allocateAndStartContainers ( final AMRMClient<ContainerRequest> amClient, final NMClient nmClient, int num)
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|allocateAndStartContainers
parameter_list|(
specifier|final
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|,
specifier|final
name|NMClient
name|nmClient
parameter_list|,
name|int
name|num
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// set up allocation requests
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
operator|++
name|i
control|)
block|{
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// send allocation requests
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// let NM heartbeat to RM and trigger allocations
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
comment|// get allocations
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|num
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// build container launch context
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|securityTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|// start a process long enough for increase/decrease action to take effect
name|ContainerLaunchContext
name|clc
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|LocalResource
operator|>
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|,
name|securityTokens
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// start the containers and make sure they are in RUNNING state
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|Container
name|container
init|=
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|nmClient
operator|.
name|startContainer
argument_list|(
name|container
argument_list|,
name|clc
argument_list|)
expr_stmt|;
comment|// NodeManager may still need some time to get the stable
comment|// container status
while|while
condition|(
literal|true
condition|)
block|{
name|ContainerStatus
name|status
init|=
name|nmClient
operator|.
name|getContainerStatus
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Exception is not expected: "
operator|+
name|e
argument_list|)
throw|;
block|}
comment|// let NM's heartbeat to RM to confirm container launch
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
return|return
name|containers
return|;
block|}
DECL|method|doContainerResourceChange ( final AMRMClient<ContainerRequest> amClient, List<Container> containers)
specifier|private
name|void
name|doContainerResourceChange
parameter_list|(
specifier|final
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// remember the container IDs
name|Container
name|container1
init|=
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Container
name|container2
init|=
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Container
name|container3
init|=
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClientImpl
init|=
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|amClient
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClientImpl
operator|.
name|change
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify newer request overwrites older request for the container1
name|amClientImpl
operator|.
name|requestContainerUpdate
argument_list|(
name|container1
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|container1
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container1
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|amClientImpl
operator|.
name|requestContainerUpdate
argument_list|(
name|container1
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|container1
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container1
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|1
argument_list|)
argument_list|,
name|amClientImpl
operator|.
name|change
operator|.
name|get
argument_list|(
name|container1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify new decrease request cancels old increase request for container1
name|amClientImpl
operator|.
name|requestContainerUpdate
argument_list|(
name|container1
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|container1
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container1
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|,
name|amClientImpl
operator|.
name|change
operator|.
name|get
argument_list|(
name|container1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// request resource increase for container2
name|amClientImpl
operator|.
name|requestContainerUpdate
argument_list|(
name|container2
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|container2
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container2
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|amClientImpl
operator|.
name|change
operator|.
name|get
argument_list|(
name|container2
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify release request will cancel pending change requests for the same
comment|// container
name|amClientImpl
operator|.
name|requestContainerUpdate
argument_list|(
name|container3
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|container3
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container3
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClientImpl
operator|.
name|pendingChange
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amClientImpl
operator|.
name|releaseAssignedContainer
argument_list|(
name|container3
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amClientImpl
operator|.
name|pendingChange
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// as of now: container1 asks to decrease to (512, 1)
comment|//            container2 asks to increase to (2048, 1)
comment|// send allocation requests
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClientImpl
operator|.
name|change
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// we should get decrease confirmation right away
name|List
argument_list|<
name|UpdatedContainer
argument_list|>
name|updatedContainers
init|=
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// we should get increase allocation after the next NM's heartbeat to RM
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
comment|// get allocations
name|allocResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|updatedContainers
operator|=
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMRMContainerPromotionAndDemotionWithAutoUpdate ()
specifier|public
name|void
name|testAMRMContainerPromotionAndDemotionWithAutoUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|AMRMClientImpl
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amClient
init|=
operator|(
name|AMRMClientImpl
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
operator|)
name|AMRMClient
operator|.
name|createAMRMClient
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start am nm client
name|NMClientImpl
name|nmClient
init|=
operator|(
name|NMClientImpl
operator|)
name|NMClient
operator|.
name|createNMClient
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nmClient
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|nmClient
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// setup container request
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// START OPPORTUNISTIC Container, Send allocation request to RM
name|Resource
name|reqResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|reqResource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// RM should allocate container within 1 calls to allocate()
name|AllocateResponse
name|allocResponse
init|=
name|waitForAllocation
argument_list|(
name|amClient
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|startContainer
argument_list|(
name|allocResponse
argument_list|,
name|nmClient
argument_list|)
expr_stmt|;
name|Container
name|c
init|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|requestContainerUpdate
argument_list|(
name|c
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|c
operator|.
name|getVersion
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|waitForAllocation
argument_list|(
name|amClient
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Make sure container is updated.
name|UpdatedContainer
name|updatedContainer
init|=
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// If container auto update is not enabled, we need to notify
comment|// NM about this update.
if|if
condition|(
operator|!
name|autoUpdate
condition|)
block|{
name|nmClient
operator|.
name|updateContainerResource
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait until NM context updated, or fail on timeout.
name|waitForNMContextUpdate
argument_list|(
name|updatedContainer
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
expr_stmt|;
comment|// Once promoted, demote it back to OPPORTUNISTIC
name|amClient
operator|.
name|requestContainerUpdate
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DEMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|waitForAllocation
argument_list|(
name|amClient
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Make sure container is updated.
name|updatedContainer
operator|=
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|autoUpdate
condition|)
block|{
name|nmClient
operator|.
name|updateContainerResource
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait until NM context updated, or fail on timeout.
name|waitForNMContextUpdate
argument_list|(
name|updatedContainer
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForAllocation (AMRMClient amrmClient, int expectedAllocatedContainerNum, int expectedUpdatedContainerNum)
specifier|private
name|AllocateResponse
name|waitForAllocation
parameter_list|(
name|AMRMClient
name|amrmClient
parameter_list|,
name|int
name|expectedAllocatedContainerNum
parameter_list|,
name|int
name|expectedUpdatedContainerNum
parameter_list|)
throws|throws
name|Exception
block|{
name|AllocateResponse
name|allocResponse
init|=
literal|null
decl_stmt|;
name|int
name|iteration
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|iteration
operator|>
literal|0
condition|)
block|{
name|allocResponse
operator|=
name|amrmClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|int
name|actualAllocated
init|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|actualUpdated
init|=
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedAllocatedContainerNum
operator|==
name|actualAllocated
operator|&&
name|expectedUpdatedContainerNum
operator|==
name|actualUpdated
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|iteration
operator|--
expr_stmt|;
block|}
return|return
name|allocResponse
return|;
block|}
DECL|method|waitForNMContextUpdate (UpdatedContainer updatedContainer, ExecutionType expectedType)
specifier|private
name|void
name|waitForNMContextUpdate
parameter_list|(
name|UpdatedContainer
name|updatedContainer
parameter_list|,
name|ExecutionType
name|expectedType
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeCount
condition|;
name|i
operator|++
control|)
block|{
name|NodeManager
name|nm
init|=
name|yarnCluster
operator|.
name|getNodeManager
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|nodemanager
operator|.
name|containermanager
operator|.
name|container
operator|.
name|Container
name|nmContainer
init|=
name|nm
operator|.
name|getNMContext
argument_list|()
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nmContainer
operator|!=
literal|null
condition|)
block|{
name|ExecutionType
name|actual
init|=
name|nmContainer
operator|.
name|getContainerTokenIdentifier
argument_list|()
operator|.
name|getExecutionType
argument_list|()
decl_stmt|;
return|return
name|actual
operator|.
name|equals
argument_list|(
name|expectedType
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
argument_list|,
literal|1000
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Times out waiting for container state in"
operator|+
literal|" NM context to be updated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignorable.
block|}
break|break;
block|}
comment|// Iterated all nodes but still can't get a match
if|if
condition|(
name|i
operator|==
name|nodeCount
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Container doesn't exist in NM context."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientWithContainerPromotion ()
specifier|public
name|void
name|testAMRMClientWithContainerPromotion
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amClient
init|=
operator|(
name|AMRMClientImpl
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
operator|)
name|AMRMClient
operator|.
name|createAMRMClient
argument_list|()
decl_stmt|;
comment|//asserting we are not using the singleton instance cache
name|Assert
operator|.
name|assertSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start am nm client
name|NMClientImpl
name|nmClient
init|=
operator|(
name|NMClientImpl
operator|)
name|NMClient
operator|.
name|createNMClient
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nmClient
argument_list|)
expr_stmt|;
comment|// asserting we are using the singleton instance cache
name|Assert
operator|.
name|assertSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|nmClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|nmClient
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// setup container request
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// START OPPORTUNISTIC Container, Send allocation request to RM
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ProfileCapability
name|profileCapability
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
name|capability
argument_list|)
decl_stmt|;
name|int
name|oppContainersRequestedAny
init|=
name|amClient
operator|.
name|getTable
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|priority2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|profileCapability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oppContainersRequestedAny
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|allocatedOpportContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|50
decl_stmt|;
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|numberOfTokensInCache
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|allocatedContainerCount
argument_list|<
name|oppContainersRequestedAny
operator|&&
name|iterationsLeft
operator|--
argument_list|>
literal|0
condition|)
block|{
name|allocResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// let NM heartbeat to RM and trigger allocations
comment|//triggerSchedulingWithNMHeartBeat();
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|OPPORTUNISTIC
condition|)
block|{
name|allocatedOpportContainers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocatedContainerCount
operator|<
name|oppContainersRequestedAny
condition|)
block|{
comment|// sleep to let NM's heartbeat to RM and trigger allocations
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|oppContainersRequestedAny
argument_list|,
name|allocatedContainerCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oppContainersRequestedAny
argument_list|,
name|allocatedOpportContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|startContainer
argument_list|(
name|allocResponse
argument_list|,
name|nmClient
argument_list|)
expr_stmt|;
comment|// SEND PROMOTION REQUEST TO RM
try|try
block|{
name|Container
name|c
init|=
name|allocatedOpportContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|requestContainerUpdate
argument_list|(
name|c
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|c
operator|.
name|getVersion
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw Exception.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"## "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"target should be GUARANTEED and original should be OPPORTUNISTIC"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Container
name|c
init|=
name|allocatedOpportContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|requestContainerUpdate
argument_list|(
name|c
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|c
operator|.
name|getVersion
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
expr_stmt|;
name|iterationsLeft
operator|=
literal|120
expr_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|UpdatedContainer
argument_list|>
name|updatedContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// do a few iterations to ensure RM is not going to send new containers
while|while
condition|(
name|iterationsLeft
operator|--
operator|>
literal|0
operator|&&
name|updatedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// inform RM of rejection
name|allocResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// RM did not send new containers because AM does not need any
if|if
condition|(
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UpdatedContainer
name|updatedContainer
range|:
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got update.."
argument_list|)
expr_stmt|;
name|updatedContainers
operator|.
name|put
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|updatedContainer
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iterationsLeft
operator|>
literal|0
condition|)
block|{
comment|// sleep to make sure NM's heartbeat
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerId
name|cId
range|:
name|allocatedOpportContainers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Container
name|orig
init|=
name|allocatedOpportContainers
operator|.
name|get
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|UpdatedContainer
name|updatedContainer
init|=
name|updatedContainers
operator|.
name|get
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|updatedContainer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|getResource
argument_list|()
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// SEND UPDATE EXECTYPE UPDATE TO NM
name|updateContainerExecType
argument_list|(
name|allocResponse
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|nmClient
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientWithContainerDemotion ()
specifier|public
name|void
name|testAMRMClientWithContainerDemotion
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClientImpl
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
name|amClient
init|=
operator|(
name|AMRMClientImpl
argument_list|<
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|>
operator|)
name|AMRMClient
operator|.
name|createAMRMClient
argument_list|()
decl_stmt|;
comment|//asserting we are not using the singleton instance cache
name|Assert
operator|.
name|assertSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|NMClientImpl
name|nmClient
init|=
operator|(
name|NMClientImpl
operator|)
name|NMClient
operator|.
name|createNMClient
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nmClient
argument_list|)
expr_stmt|;
comment|// asserting we are using the singleton instance cache
name|Assert
operator|.
name|assertSame
argument_list|(
name|NMTokenCache
operator|.
name|getSingleton
argument_list|()
argument_list|,
name|nmClient
operator|.
name|getNMTokenCache
argument_list|()
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|,
name|nmClient
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// START OPPORTUNISTIC Container, Send allocation request to RM
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|AMRMClient
operator|.
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|priority2
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ProfileCapability
name|profileCapability
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
name|capability
argument_list|)
decl_stmt|;
name|int
name|oppContainersRequestedAny
init|=
name|amClient
operator|.
name|getTable
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|priority2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|profileCapability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oppContainersRequestedAny
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|Container
argument_list|>
name|allocatedGuaranteedContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|50
decl_stmt|;
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|numberOfTokensInCache
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|allocatedContainerCount
argument_list|<
name|oppContainersRequestedAny
operator|&&
name|iterationsLeft
operator|--
argument_list|>
literal|0
condition|)
block|{
name|allocResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// let NM heartbeat to RM and trigger allocations
comment|//triggerSchedulingWithNMHeartBeat();
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getExecutionType
argument_list|()
operator|==
name|ExecutionType
operator|.
name|GUARANTEED
condition|)
block|{
name|allocatedGuaranteedContainers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allocatedContainerCount
operator|<
name|oppContainersRequestedAny
condition|)
block|{
comment|// sleep to let NM's heartbeat to RM and trigger allocations
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|oppContainersRequestedAny
argument_list|,
name|allocatedContainerCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oppContainersRequestedAny
argument_list|,
name|allocatedGuaranteedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|startContainer
argument_list|(
name|allocResponse
argument_list|,
name|nmClient
argument_list|)
expr_stmt|;
comment|// SEND DEMOTION REQUEST TO RM
try|try
block|{
name|Container
name|c
init|=
name|allocatedGuaranteedContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|requestContainerUpdate
argument_list|(
name|c
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|c
operator|.
name|getVersion
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DEMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw Exception.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"## "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"target should be OPPORTUNISTIC and original should be GUARANTEED"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Container
name|c
init|=
name|allocatedGuaranteedContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|requestContainerUpdate
argument_list|(
name|c
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|c
operator|.
name|getVersion
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DEMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
expr_stmt|;
name|iterationsLeft
operator|=
literal|120
expr_stmt|;
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|UpdatedContainer
argument_list|>
name|updatedContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// do a few iterations to ensure RM is not going to send new containers
while|while
condition|(
name|iterationsLeft
operator|--
operator|>
literal|0
operator|&&
name|updatedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// inform RM of rejection
name|allocResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// RM did not send new containers because AM does not need any
if|if
condition|(
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|UpdatedContainer
name|updatedContainer
range|:
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got update.."
argument_list|)
expr_stmt|;
name|updatedContainers
operator|.
name|put
argument_list|(
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|updatedContainer
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iterationsLeft
operator|>
literal|0
condition|)
block|{
comment|// sleep to make sure NM's heartbeat
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerId
name|cId
range|:
name|allocatedGuaranteedContainers
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Container
name|orig
init|=
name|allocatedGuaranteedContainers
operator|.
name|get
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|UpdatedContainer
name|updatedContainer
init|=
name|updatedContainers
operator|.
name|get
argument_list|(
name|cId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|updatedContainer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|getResource
argument_list|()
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
argument_list|,
name|updatedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|updateContainerExecType
argument_list|(
name|allocResponse
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|nmClient
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|updateContainerExecType (AllocateResponse allocResponse, ExecutionType expectedExecType, NMClientImpl nmClient)
specifier|private
name|void
name|updateContainerExecType
parameter_list|(
name|AllocateResponse
name|allocResponse
parameter_list|,
name|ExecutionType
name|expectedExecType
parameter_list|,
name|NMClientImpl
name|nmClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
for|for
control|(
name|UpdatedContainer
name|updatedContainer
range|:
name|allocResponse
operator|.
name|getUpdatedContainers
argument_list|()
control|)
block|{
name|Container
name|container
init|=
name|updatedContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|autoUpdate
condition|)
block|{
name|nmClient
operator|.
name|increaseContainerResource
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
comment|// NodeManager may still need some time to get the stable
comment|// container status
while|while
condition|(
literal|true
condition|)
block|{
name|ContainerStatus
name|status
init|=
name|nmClient
operator|.
name|getContainerStatus
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getExecutionType
argument_list|()
operator|==
name|expectedExecType
condition|)
block|{
break|break;
block|}
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startContainer (AllocateResponse allocResponse, NMClientImpl nmClient)
specifier|private
name|void
name|startContainer
parameter_list|(
name|AllocateResponse
name|allocResponse
parameter_list|,
name|NMClientImpl
name|nmClient
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// START THE CONTAINER IN NM
comment|// build container launch context
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|securityTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
comment|// start a process long enough for increase/decrease action to take effect
name|ContainerLaunchContext
name|clc
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|LocalResource
operator|>
name|emptyMap
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"sleep"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|,
name|securityTokens
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// start the containers and make sure they are in RUNNING state
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|nmClient
operator|.
name|startContainer
argument_list|(
name|container
argument_list|,
name|clc
argument_list|)
expr_stmt|;
comment|// NodeManager may still need some time to get the stable
comment|// container status
while|while
condition|(
literal|true
condition|)
block|{
name|ContainerStatus
name|status
init|=
name|nmClient
operator|.
name|getContainerStatus
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|RUNNING
condition|)
block|{
break|break;
block|}
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAllocation (final AMRMClientImpl<ContainerRequest> amClient)
specifier|private
name|void
name|testAllocation
parameter_list|(
specifier|final
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// setup container request
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumContainers
argument_list|(
name|amClient
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|containersRequestedAny
init|=
literal|2
decl_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|int
name|allocatedContainerCount
init|=
literal|0
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|3
decl_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|releases
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|getNMTokenCache
argument_list|()
operator|.
name|numberOfTokensInCache
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
name|receivedNMTokens
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocatedContainerCount
argument_list|<
name|containersRequestedAny
operator|&&
name|iterationsLeft
operator|--
argument_list|>
literal|0
condition|)
block|{
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nodeCount
argument_list|,
name|amClient
operator|.
name|getClusterNodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainerCount
operator|+=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerId
name|rejectContainerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
name|releases
operator|.
name|add
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NMToken
name|token
range|:
name|allocResponse
operator|.
name|getNMTokens
argument_list|()
control|)
block|{
name|String
name|nodeID
init|=
name|token
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|receivedNMTokens
operator|.
name|containsKey
argument_list|(
name|nodeID
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Received token again for : "
operator|+
name|nodeID
argument_list|)
expr_stmt|;
block|}
name|receivedNMTokens
operator|.
name|put
argument_list|(
name|nodeID
argument_list|,
name|token
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocatedContainerCount
operator|<
name|containersRequestedAny
condition|)
block|{
comment|// let NM heartbeat to RM and trigger allocations
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Should receive atleast 1 token
name|assertTrue
argument_list|(
name|receivedNMTokens
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|receivedNMTokens
operator|.
name|size
argument_list|()
operator|<=
name|nodeCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocatedContainerCount
argument_list|,
name|containersRequestedAny
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|releases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// need to tell the AMRMClient that we dont need these resources anymore
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// send 0 container count request for resources that are no longer needed
name|ResourceRequest
name|snoopRequest
init|=
name|amClient
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|snoopRequest
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// test RPC exception handling
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|snoopRequest
operator|=
name|amClient
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snoopRequest
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationMasterProtocol
name|realRM
init|=
name|amClient
operator|.
name|rmClient
decl_stmt|;
try|try
block|{
name|ApplicationMasterProtocol
name|mockRM
init|=
name|mock
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRM
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|AllocateResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|AllocateResponse
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|rmClient
operator|=
name|mockRM
expr_stmt|;
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{}
finally|finally
block|{
name|amClient
operator|.
name|rmClient
operator|=
name|realRM
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|snoopRequest
operator|=
name|amClient
operator|.
name|ask
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// verify that the remove request made in between makeRequest and allocate
comment|// has not been lost
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|snoopRequest
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|waitForContainerCompletion
argument_list|(
literal|3
argument_list|,
name|amClient
argument_list|,
name|releases
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForContainerCompletion (int numIterations, AMRMClientImpl<ContainerRequest> amClient, Set<ContainerId> releases)
specifier|private
name|void
name|waitForContainerCompletion
parameter_list|(
name|int
name|numIterations
parameter_list|,
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|,
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|releases
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// do a few iterations to ensure RM is not going send new containers
while|while
condition|(
operator|!
name|releases
operator|.
name|isEmpty
argument_list|()
operator|||
name|numIterations
operator|--
operator|>
literal|0
condition|)
block|{
comment|// inform RM of rejection
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
comment|// RM did not send new containers because AM does not need any
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ContainerStatus
name|cStatus
range|:
name|allocResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
control|)
block|{
if|if
condition|(
name|releases
operator|.
name|contains
argument_list|(
name|cStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|cStatus
operator|.
name|getState
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|100
argument_list|,
name|cStatus
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|releases
operator|.
name|remove
argument_list|(
name|cStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numIterations
operator|>
literal|0
condition|)
block|{
comment|// let NM heartbeat to RM and trigger allocations
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllocRequestId ( final AMRMClientImpl<ContainerRequest> amClient)
specifier|private
name|void
name|testAllocRequestId
parameter_list|(
specifier|final
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|// setup container request
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNumContainers
argument_list|(
name|amClient
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNumContainers
argument_list|(
name|amClient
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNumContainers
argument_list|(
name|amClient
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|containersRequestedAny
init|=
literal|3
decl_stmt|;
comment|// RM should allocate container within 2 calls to allocate()
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|iterationsLeft
init|=
literal|5
decl_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|releases
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|<
name|containersRequestedAny
operator|&&
name|iterationsLeft
operator|--
operator|>
literal|0
condition|)
block|{
name|AllocateResponse
name|allocResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
control|)
block|{
name|ContainerId
name|rejectContainerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
name|releases
operator|.
name|add
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|rejectContainerId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|<
name|containersRequestedAny
condition|)
block|{
comment|// let NM heartbeat to RM and trigger allocations
name|triggerSchedulingWithNMHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|containersRequestedAny
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|expAllocIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|actAllocIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|ac
range|:
name|allocatedContainers
control|)
block|{
name|actAllocIds
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|ac
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expAllocIds
argument_list|,
name|actAllocIds
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitForContainerCompletion
argument_list|(
literal|3
argument_list|,
name|amClient
argument_list|,
name|releases
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumContainers (AMRMClientImpl<ContainerRequest> amClient, long allocationReqId, int expNode, int expRack, int expAny, int expAsks, int expRelease)
specifier|private
name|void
name|assertNumContainers
parameter_list|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
parameter_list|,
name|long
name|allocationReqId
parameter_list|,
name|int
name|expNode
parameter_list|,
name|int
name|expRack
parameter_list|,
name|int
name|expAny
parameter_list|,
name|int
name|expAsks
parameter_list|,
name|int
name|expRelease
parameter_list|)
block|{
name|RemoteRequestsTable
argument_list|<
name|ContainerRequest
argument_list|>
name|remoteRequestsTable
init|=
name|amClient
operator|.
name|getTable
argument_list|(
name|allocationReqId
argument_list|)
decl_stmt|;
name|ProfileCapability
name|profileCapability
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
name|capability
argument_list|)
decl_stmt|;
name|int
name|containersRequestedNode
init|=
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|profileCapability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|containersRequestedRack
init|=
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|,
name|rack
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|profileCapability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|int
name|containersRequestedAny
init|=
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|profileCapability
argument_list|)
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expNode
argument_list|,
name|containersRequestedNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expRack
argument_list|,
name|containersRequestedRack
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expAny
argument_list|,
name|containersRequestedAny
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expAsks
argument_list|,
name|amClient
operator|.
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expRelease
argument_list|,
name|amClient
operator|.
name|release
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|CountDownSupplier
class|class
name|CountDownSupplier
implements|implements
name|Supplier
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|counter
name|int
name|counter
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|counter
operator|>=
literal|3
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
empty_stmt|;
annotation|@
name|Test
DECL|method|testWaitFor ()
specifier|public
name|void
name|testWaitFor
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
name|CountDownSupplier
name|countDownChecker
init|=
operator|new
name|CountDownSupplier
argument_list|()
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
operator|(
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
operator|)
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|waitFor
argument_list|(
name|countDownChecker
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countDownChecker
operator|.
name|counter
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|sleep (int sleepTime)
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|sleepTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientOnAMRMTokenRollOver ()
specifier|public
name|void
name|testAMRMClientOnAMRMTokenRollOver
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|AMRMTokenSecretManager
name|amrmTokenSecretManager
init|=
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
decl_stmt|;
comment|// start am rm client
name|amClient
operator|=
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|Long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken_1
init|=
name|getAMRMToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amrmToken_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amrmToken_1
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|amrmTokenSecretManager
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for enough time and make sure the roll_over happens
comment|// At mean time, the old AMRMToken should continue to work
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|<
name|rolling_interval_sec
operator|*
literal|1000
condition|)
block|{
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken_2
init|=
name|getAMRMToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|amrmToken_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amrmToken_2
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|amrmTokenSecretManager
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|amrmToken_1
argument_list|,
name|amrmToken_2
argument_list|)
expr_stmt|;
comment|// can do the allocate call with latest AMRMToken
name|AllocateResponse
name|response
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
comment|// Verify latest AMRMToken can be used to send allocation request.
name|UserGroupInformation
name|testUser1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"testUser1"
argument_list|)
decl_stmt|;
name|AMRMTokenIdentifierForTest
name|newVersionTokenIdentifier
init|=
operator|new
name|AMRMTokenIdentifierForTest
argument_list|(
name|amrmToken_2
operator|.
name|decodeIdentifier
argument_list|()
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Message is changed after set to newVersionTokenIdentifier"
argument_list|,
literal|"message"
argument_list|,
name|newVersionTokenIdentifier
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|newVersionToken
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
name|newVersionTokenIdentifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|amrmTokenSecretManager
operator|.
name|retrievePassword
argument_list|(
name|newVersionTokenIdentifier
argument_list|)
argument_list|,
name|newVersionTokenIdentifier
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|newVersionToken
argument_list|,
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
expr_stmt|;
name|testUser1
operator|.
name|addToken
argument_list|(
name|newVersionToken
argument_list|)
expr_stmt|;
name|AllocateRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setResponseId
argument_list|(
name|response
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
name|testUser1
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ApplicationMasterProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationMasterProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ApplicationMasterProtocol
operator|)
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
operator|.
name|getProxy
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Make sure previous token has been rolled-over
comment|// and can not use this rolled-over token to make a allocate all.
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|amrmToken_2
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|amrmTokenSecretManager
operator|.
name|getCurrnetMasterKeyData
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
if|if
condition|(
name|amrmTokenSecretManager
operator|.
name|getNextMasterKeyData
argument_list|()
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|amrmToken_2
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|amrmTokenSecretManager
operator|.
name|getNextMasterKeyData
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|UserGroupInformation
name|testUser2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"testUser2"
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|amrmToken_2
argument_list|,
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
expr_stmt|;
name|testUser2
operator|.
name|addToken
argument_list|(
name|amrmToken_2
argument_list|)
expr_stmt|;
name|testUser2
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ApplicationMasterProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationMasterProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ApplicationMasterProtocol
operator|)
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
operator|.
name|getProxy
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|yarnCluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The old Token should not work"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|InvalidToken
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid AMRMToken from "
operator|+
name|amrmToken_2
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
DECL|method|getAMRMToken ()
name|getAMRMToken
parameter_list|()
throws|throws
name|IOException
block|{
name|Credentials
name|credentials
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|iter
init|=
name|credentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|AMRMTokenIdentifier
operator|.
name|KIND_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"credentials has more than one AMRM token."
operator|+
literal|" token1: "
operator|+
name|result
operator|+
literal|" token2: "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
operator|)
name|token
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testGetMatchingFitWithProfiles ()
specifier|public
name|void
name|testGetMatchingFitWithProfiles
parameter_list|()
throws|throws
name|Exception
block|{
name|teardown
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createClusterAndStartApplication
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start am rm client
name|amClient
operator|=
name|AMRMClient
operator|.
expr|<
name|ContainerRequest
operator|>
name|createAMRMClient
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ProfileCapability
name|capability1
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"minimum"
argument_list|)
decl_stmt|;
name|ProfileCapability
name|capability2
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|ProfileCapability
name|capability3
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"maximum"
argument_list|)
decl_stmt|;
name|ProfileCapability
name|capability4
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"minimum"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ProfileCapability
name|capability5
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|ProfileCapability
name|capability6
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"default"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// http has the same capabilities as default
name|ProfileCapability
name|capability7
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"http"
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer1
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability1
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer2
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability2
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer3
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability3
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer4
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability4
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer5
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability5
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority2
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer6
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability6
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|ContainerRequest
name|storedContainer7
init|=
operator|new
name|ContainerRequest
argument_list|(
name|capability7
argument_list|,
name|nodes
argument_list|,
name|racks
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer2
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer3
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer4
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer5
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer6
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|storedContainer7
argument_list|)
expr_stmt|;
comment|// test matching of containers
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|ContainerRequest
argument_list|>
argument_list|>
name|matches
decl_stmt|;
name|ContainerRequest
name|storedRequest
decl_stmt|;
comment|// exact match
name|ProfileCapability
name|testCapability1
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"minimum"
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|testCapability1
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|storedRequest
operator|=
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|storedContainer1
argument_list|,
name|storedRequest
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer1
argument_list|)
expr_stmt|;
comment|// exact matching with order maintained
comment|// we should get back 3 matches - default + http because they have the
comment|// same capability
name|ProfileCapability
name|testCapability2
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|testCapability2
argument_list|)
expr_stmt|;
name|verifyMatches
argument_list|(
name|matches
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// must be returned in the order they were made
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ContainerRequest
name|storedRequest1
range|:
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
control|)
block|{
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
name|storedContainer2
argument_list|,
name|storedRequest1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
name|storedContainer7
argument_list|,
name|storedRequest1
argument_list|)
expr_stmt|;
break|break;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|storedContainer5
argument_list|)
expr_stmt|;
comment|// matching with larger container. all requests returned
name|Resource
name|testCapability3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|matches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|testCapability4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|matches
operator|=
name|amClient
operator|.
name|getMatchingRequests
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|testCapability4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|matches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|amClient
operator|!=
literal|null
operator|&&
name|amClient
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STARTED
condition|)
block|{
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

