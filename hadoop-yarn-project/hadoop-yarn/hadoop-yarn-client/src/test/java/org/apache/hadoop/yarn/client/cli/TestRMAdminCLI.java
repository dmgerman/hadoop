begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|DecommissionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|DummyCommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CheckForDecommissioningNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CheckForDecommissioningNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshClusterMaxPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
DECL|class|TestRMAdminCLI
specifier|public
class|class
name|TestRMAdminCLI
block|{
DECL|field|admin
specifier|private
name|ResourceManagerAdministrationProtocol
name|admin
decl_stmt|;
DECL|field|haadmin
specifier|private
name|HAServiceProtocol
name|haadmin
decl_stmt|;
DECL|field|rmAdminCLI
specifier|private
name|RMAdminCLI
name|rmAdminCLI
decl_stmt|;
DECL|field|rmAdminCLIWithHAEnabled
specifier|private
name|RMAdminCLI
name|rmAdminCLIWithHAEnabled
decl_stmt|;
DECL|field|dummyNodeLabelsManager
specifier|private
name|CommonNodeLabelsManager
name|dummyNodeLabelsManager
decl_stmt|;
DECL|field|remoteAdminServiceAccessed
specifier|private
name|boolean
name|remoteAdminServiceAccessed
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
annotation|@
name|Before
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|remoteAdminServiceAccessed
operator|=
literal|false
expr_stmt|;
name|admin
operator|=
name|mock
argument_list|(
name|ResourceManagerAdministrationProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|admin
operator|.
name|addToClusterNodeLabels
argument_list|(
name|any
argument_list|(
name|AddToClusterNodeLabelsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|AddToClusterNodeLabelsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AddToClusterNodeLabelsResponse
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|remoteAdminServiceAccessed
operator|=
literal|true
expr_stmt|;
return|return
name|AddToClusterNodeLabelsResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|haadmin
operator|=
name|mock
argument_list|(
name|HAServiceProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|haadmin
operator|.
name|getServiceStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HAServiceStatus
argument_list|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|INITIALIZING
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HAServiceTarget
name|haServiceTarget
init|=
name|mock
argument_list|(
name|HAServiceTarget
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|haServiceTarget
operator|.
name|getProxy
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|haadmin
argument_list|)
expr_stmt|;
name|rmAdminCLI
operator|=
operator|new
name|RMAdminCLI
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ResourceManagerAdministrationProtocol
name|createAdminProtocol
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|admin
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HAServiceTarget
name|resolveTarget
parameter_list|(
name|String
name|rmId
parameter_list|)
block|{
return|return
name|haServiceTarget
return|;
block|}
block|}
expr_stmt|;
name|initDummyNodeLabelsManager
argument_list|()
expr_stmt|;
name|rmAdminCLI
operator|.
name|localNodeLabelsManager
operator|=
name|dummyNodeLabelsManager
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|rmAdminCLIWithHAEnabled
operator|=
operator|new
name|RMAdminCLI
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ResourceManagerAdministrationProtocol
name|createAdminProtocol
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|admin
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HAServiceTarget
name|resolveTarget
parameter_list|(
name|String
name|rmId
parameter_list|)
block|{
return|return
name|haServiceTarget
return|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|initDummyNodeLabelsManager ()
specifier|private
name|void
name|initDummyNodeLabelsManager
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dummyNodeLabelsManager
operator|=
operator|new
name|DummyCommonNodeLabelsManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|replaceLabelsOnNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|replaceLabelsToNode
parameter_list|)
throws|throws
name|IOException
block|{
name|Iterator
argument_list|<
name|NodeId
argument_list|>
name|iterator
init|=
name|replaceLabelsToNode
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NodeId
name|nodeId
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|getHost
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Parsing of Input String failed"
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|replaceLabelsOnNode
argument_list|(
name|replaceLabelsToNode
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|dummyNodeLabelsManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testRefreshQueues ()
specifier|public
name|void
name|testRefreshQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshQueues"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshQueues
argument_list|(
name|any
argument_list|(
name|RefreshQueuesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testRefreshUserToGroupsMappings ()
specifier|public
name|void
name|testRefreshUserToGroupsMappings
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshUserToGroupsMappings"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshUserToGroupsMappings
argument_list|(
name|any
argument_list|(
name|RefreshUserToGroupsMappingsRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testRefreshSuperUserGroupsConfiguration ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshSuperUserGroupsConfiguration"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|any
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testRefreshAdminAcls ()
specifier|public
name|void
name|testRefreshAdminAcls
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshAdminAcls"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshAdminAcls
argument_list|(
name|any
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRefreshClusterMaxPriority ()
specifier|public
name|void
name|testRefreshClusterMaxPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshClusterMaxPriority"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshClusterMaxPriority
argument_list|(
name|any
argument_list|(
name|RefreshClusterMaxPriorityRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testRefreshServiceAcl ()
specifier|public
name|void
name|testRefreshServiceAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshServiceAcl"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshServiceAcls
argument_list|(
name|any
argument_list|(
name|RefreshServiceAclsRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testUpdateNodeResource ()
specifier|public
name|void
name|testUpdateNodeResource
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nodeIdStr
init|=
literal|"0.0.0.0:0"
decl_stmt|;
name|int
name|memSize
init|=
literal|2048
decl_stmt|;
name|int
name|cores
init|=
literal|2
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-updateNodeResource"
block|,
name|nodeIdStr
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|memSize
argument_list|)
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|cores
argument_list|)
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|UpdateNodeResourceRequest
argument_list|>
name|argument
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|UpdateNodeResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|updateNodeResource
argument_list|(
name|argument
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateNodeResourceRequest
name|request
init|=
name|argument
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
name|resourceMap
init|=
name|request
operator|.
name|getNodeResourceMap
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
name|nodeIdStr
argument_list|)
decl_stmt|;
name|Resource
name|expectedResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|memSize
argument_list|,
name|cores
argument_list|)
decl_stmt|;
name|ResourceOption
name|resource
init|=
name|resourceMap
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"resource for "
operator|+
name|nodeIdStr
operator|+
literal|" shouldn't be null."
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"resource value for "
operator|+
name|nodeIdStr
operator|+
literal|" is not as expected."
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|expectedResource
argument_list|,
name|ResourceOption
operator|.
name|OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT
argument_list|)
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testUpdateNodeResourceWithInvalidValue ()
specifier|public
name|void
name|testUpdateNodeResourceWithInvalidValue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nodeIdStr
init|=
literal|"0.0.0.0:0"
decl_stmt|;
name|int
name|memSize
init|=
operator|-
literal|2048
decl_stmt|;
name|int
name|cores
init|=
literal|2
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-updateNodeResource"
block|,
name|nodeIdStr
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|memSize
argument_list|)
block|,
name|Integer
operator|.
name|toString
argument_list|(
name|cores
argument_list|)
block|}
decl_stmt|;
comment|// execution of command line is expected to be failed
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify admin protocol never calls.
name|verify
argument_list|(
name|admin
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|updateNodeResource
argument_list|(
name|any
argument_list|(
name|UpdateNodeResourceRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testRefreshNodes ()
specifier|public
name|void
name|testRefreshNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshNodes"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshNodes
argument_list|(
name|any
argument_list|(
name|RefreshNodesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesGracefulBeforeTimeout ()
specifier|public
name|void
name|testRefreshNodesGracefulBeforeTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// graceful decommission before timeout
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"1"
block|,
literal|"-client"
block|}
decl_stmt|;
name|CheckForDecommissioningNodesResponse
name|response
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|CheckForDecommissioningNodesResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|NodeId
argument_list|>
name|decomNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|response
operator|.
name|setDecommissioningNodes
argument_list|(
name|decomNodes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|admin
operator|.
name|checkForDecommissioningNodes
argument_list|(
name|any
argument_list|(
name|CheckForDecommissioningNodesRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|GRACEFUL
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|FORCEFUL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesGracefulHitTimeout ()
specifier|public
name|void
name|testRefreshNodesGracefulHitTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Forceful decommission when timeout occurs
name|String
index|[]
name|forcefulDecomArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"1"
block|,
literal|"-client"
block|}
decl_stmt|;
name|HashSet
argument_list|<
name|NodeId
argument_list|>
name|decomNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|CheckForDecommissioningNodesResponse
name|response
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|CheckForDecommissioningNodesResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setDecommissioningNodes
argument_list|(
name|decomNodes
argument_list|)
expr_stmt|;
name|decomNodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node1"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDecommissioningNodes
argument_list|(
name|decomNodes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|admin
operator|.
name|checkForDecommissioningNodes
argument_list|(
name|any
argument_list|(
name|CheckForDecommissioningNodesRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|forcefulDecomArgs
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|FORCEFUL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesGracefulInfiniteTimeout ()
specifier|public
name|void
name|testRefreshNodesGracefulInfiniteTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|infiniteTimeoutArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"-1"
block|,
literal|"-client"
block|}
decl_stmt|;
name|testRefreshNodesGracefulInfiniteTimeout
argument_list|(
name|infiniteTimeoutArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesGracefulNoTimeout ()
specifier|public
name|void
name|testRefreshNodesGracefulNoTimeout
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no timeout (infinite timeout)
name|String
index|[]
name|noTimeoutArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"-client"
block|}
decl_stmt|;
name|testRefreshNodesGracefulInfiniteTimeout
argument_list|(
name|noTimeoutArgs
argument_list|)
expr_stmt|;
block|}
DECL|method|testRefreshNodesGracefulInfiniteTimeout (String[] args)
specifier|private
name|void
name|testRefreshNodesGracefulInfiniteTimeout
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|admin
operator|.
name|checkForDecommissioningNodes
argument_list|(
name|any
argument_list|(
name|CheckForDecommissioningNodesRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|CheckForDecommissioningNodesResponse
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|5
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CheckForDecommissioningNodesResponse
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|CheckForDecommissioningNodesResponse
name|response
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|CheckForDecommissioningNodesResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|NodeId
argument_list|>
name|decomNodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|count
operator|--
expr_stmt|;
if|if
condition|(
name|count
operator|<=
literal|0
condition|)
block|{
name|response
operator|.
name|setDecommissioningNodes
argument_list|(
name|decomNodes
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
name|decomNodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node1"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDecommissioningNodes
argument_list|(
name|decomNodes
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|GRACEFUL
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|FORCEFUL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesGracefulInvalidArgs ()
specifier|public
name|void
name|testRefreshNodesGracefulInvalidArgs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// invalid graceful timeout parameter
name|String
index|[]
name|invalidArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-ginvalid"
block|,
literal|"invalid"
block|,
literal|"-client"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|invalidArgs
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid timeout
name|String
index|[]
name|invalidTimeoutArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"invalid"
block|,
literal|"-client"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|invalidTimeoutArgs
argument_list|)
argument_list|)
expr_stmt|;
comment|// negative timeout
name|String
index|[]
name|negativeTimeoutArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"-1000"
block|,
literal|"-client"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|negativeTimeoutArgs
argument_list|)
argument_list|)
expr_stmt|;
comment|// server tracking mode
name|String
index|[]
name|serveTrackingrArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"1"
block|,
literal|"-server"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|serveTrackingrArgs
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid tracking mode
name|String
index|[]
name|invalidTrackingArgs
init|=
block|{
literal|"-refreshNodes"
block|,
literal|"-g"
block|,
literal|"1"
block|,
literal|"-foo"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|invalidTrackingArgs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testGetGroups ()
specifier|public
name|void
name|testGetGroups
parameter_list|()
throws|throws
name|Exception
block|{
name|when
argument_list|(
name|admin
operator|.
name|getGroupsForUser
argument_list|(
name|eq
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"group1"
block|,
literal|"group2"
block|}
argument_list|)
expr_stmt|;
name|PrintStream
name|origOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|out
init|=
name|mock
argument_list|(
name|PrintStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|out
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-getGroups"
block|,
literal|"admin"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|getGroupsForUser
argument_list|(
name|eq
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
name|argThat
argument_list|(
operator|new
name|ArgumentMatcher
argument_list|<
name|StringBuilder
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
return|return
operator|(
literal|""
operator|+
name|argument
operator|)
operator|.
name|equals
argument_list|(
literal|"admin : group1 group2"
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|origOut
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testTransitionToActive ()
specifier|public
name|void
name|testTransitionToActive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-transitionToActive"
block|,
literal|"rm1"
block|}
decl_stmt|;
comment|// RM HA is disabled.
comment|// transitionToActive should not be executed
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|transitionToActive
argument_list|(
name|any
argument_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now RM HA is enabled.
comment|// transitionToActive should be executed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLIWithHAEnabled
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|)
operator|.
name|transitionToActive
argument_list|(
name|any
argument_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// HAAdmin#isOtherTargetNodeActive should check state of non-target node.
name|verify
argument_list|(
name|haadmin
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getServiceStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testTransitionToStandby ()
specifier|public
name|void
name|testTransitionToStandby
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-transitionToStandby"
block|,
literal|"rm1"
block|}
decl_stmt|;
comment|// RM HA is disabled.
comment|// transitionToStandby should not be executed
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|transitionToStandby
argument_list|(
name|any
argument_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now RM HA is enabled.
comment|// transitionToActive should be executed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLIWithHAEnabled
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|)
operator|.
name|transitionToStandby
argument_list|(
name|any
argument_list|(
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testGetServiceState ()
specifier|public
name|void
name|testGetServiceState
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-getServiceState"
block|,
literal|"rm1"
block|}
decl_stmt|;
comment|// RM HA is disabled.
comment|// getServiceState should not be executed
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getServiceStatus
argument_list|()
expr_stmt|;
comment|// Now RM HA is enabled.
comment|// getServiceState should be executed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLIWithHAEnabled
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|)
operator|.
name|getServiceStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testCheckHealth ()
specifier|public
name|void
name|testCheckHealth
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-checkHealth"
block|,
literal|"rm1"
block|}
decl_stmt|;
comment|// RM HA is disabled.
comment|// getServiceState should not be executed
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
comment|// Now RM HA is enabled.
comment|// getServiceState should be executed
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLIWithHAEnabled
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|haadmin
argument_list|)
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test printing of help messages    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testHelp ()
specifier|public
name|void
name|testHelp
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|oldOutPrintStream
init|=
name|System
operator|.
name|out
decl_stmt|;
name|PrintStream
name|oldErrPrintStream
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|dataOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|dataErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|dataOut
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|dataErr
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-help"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|oldOutPrintStream
operator|.
name|println
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"rmadmin is the command to execute YARN administrative commands."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"yarn rmadmin [-refreshQueues] [-refreshNodes [-g [timeout in "
operator|+
literal|"seconds] -client|server]] [-refreshNodesResources] [-refresh"
operator|+
literal|"SuperUserGroupsConfiguration] [-refreshUserToGroupsMappings] "
operator|+
literal|"[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup "
operator|+
literal|"[username]] [-addToClusterNodeLabels "
operator|+
literal|"<\"label1(exclusive=true),label2(exclusive=false),label3\">] "
operator|+
literal|"[-removeFromClusterNodeLabels<label1,label2,label3>] "
operator|+
literal|"[-replaceLabelsOnNode "
operator|+
literal|"<\"node1[:port]=label1,label2 node2[:port]=label1\">] "
operator|+
literal|"[-directlyAccessNodeLabelStore] [-updateNodeResource "
operator|+
literal|"[NodeID] [MemSize] [vCores] ([OvercommitTimeout]) "
operator|+
literal|"[-help [cmd]]"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-refreshQueues: Reload the queues' acls, states and scheduler "
operator|+
literal|"specific properties."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-refreshNodes [-g [timeout in seconds] -client|server]: "
operator|+
literal|"Refresh the hosts information at the ResourceManager."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-refreshNodesResources: Refresh resources of NodeManagers at the "
operator|+
literal|"ResourceManager."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-refreshUserToGroupsMappings: Refresh user-to-groups mappings"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-refreshSuperUserGroupsConfiguration: Refresh superuser proxy"
operator|+
literal|" groups mappings"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-refreshAdminAcls: Refresh acls for administration of "
operator|+
literal|"ResourceManager"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-refreshServiceAcl: Reload the service-level authorization"
operator|+
literal|" policy file"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataOut
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-help [cmd]: Displays help for the given command or all "
operator|+
literal|"commands if none"
argument_list|)
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-refreshQueues"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-refreshQueues]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-refreshNodes"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-refreshNodes [-g [timeout in seconds] "
operator|+
literal|"-client|server]]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-refreshNodesResources"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-refreshNodesResources]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-refreshUserToGroupsMappings"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-refreshUserToGroupsMappings]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-refreshSuperUserGroupsConfiguration"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-refreshSuperUserGroupsConfiguration]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-refreshAdminAcls"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-refreshAdminAcls]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-refreshServiceAcl"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-refreshServiceAcl]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-getGroups"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-getGroups [username]]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-transitionToActive"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-transitionToActive [--forceactive]"
operator|+
literal|"<serviceId>]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-transitionToStandby"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-transitionToStandby<serviceId>]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-getServiceState"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-getServiceState<serviceId>]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-checkHealth"
block|}
argument_list|,
literal|"Usage: yarn rmadmin [-checkHealth<serviceId>]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-failover"
block|}
argument_list|,
literal|"Usage: yarn rmadmin "
operator|+
literal|"[-failover [--forcefence] [--forceactive] "
operator|+
literal|"<serviceId><serviceId>]"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-help"
block|,
literal|"-badParameter"
block|}
argument_list|,
literal|"Usage: yarn rmadmin"
argument_list|,
name|dataErr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testError
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-badParameter"
block|}
argument_list|,
literal|"badParameter: Unknown command"
argument_list|,
name|dataErr
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Test -help when RM HA is enabled
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLIWithHAEnabled
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|oldOutPrintStream
operator|.
name|println
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|String
name|expectedHelpMsg
init|=
literal|"yarn rmadmin [-refreshQueues] [-refreshNodes [-g [timeout in "
operator|+
literal|"seconds] -client|server]] "
operator|+
literal|"[-refreshNodesResources] [-refreshSuperUserGroupsConfiguration] "
operator|+
literal|"[-refreshUserToGroupsMappings] "
operator|+
literal|"[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup"
operator|+
literal|" [username]] [-addToClusterNodeLabels<\"label1(exclusive=true),"
operator|+
literal|"label2(exclusive=false),label3\">]"
operator|+
literal|" [-removeFromClusterNodeLabels<label1,label2,label3>] [-replaceLabelsOnNode "
operator|+
literal|"<\"node1[:port]=label1,label2 node2[:port]=label1\">] [-directlyAccessNodeLabelStore] "
operator|+
literal|"[-updateNodeResource [NodeID] [MemSize] [vCores] ([OvercommitTimeout]) "
operator|+
literal|"[-transitionToActive [--forceactive]<serviceId>] "
operator|+
literal|"[-transitionToStandby<serviceId>] "
operator|+
literal|"[-getServiceState<serviceId>] [-checkHealth<serviceId>] [-help [cmd]]"
decl_stmt|;
name|String
name|actualHelpMsg
init|=
name|dataOut
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Help messages: %n "
operator|+
name|actualHelpMsg
operator|+
literal|" %n doesn't include expected "
operator|+
literal|"messages: %n"
operator|+
name|expectedHelpMsg
argument_list|)
argument_list|,
name|actualHelpMsg
operator|.
name|contains
argument_list|(
name|expectedHelpMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setOut
argument_list|(
name|oldOutPrintStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|oldErrPrintStream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500
argument_list|)
DECL|method|testException ()
specifier|public
name|void
name|testException
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintStream
name|oldErrPrintStream
init|=
name|System
operator|.
name|err
decl_stmt|;
name|ByteArrayOutputStream
name|dataErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|dataErr
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|when
argument_list|(
name|admin
operator|.
name|refreshQueues
argument_list|(
name|any
argument_list|(
name|RefreshQueuesRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"test exception"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-refreshQueues"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|admin
argument_list|)
operator|.
name|refreshQueues
argument_list|(
name|any
argument_list|(
name|RefreshQueuesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dataErr
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"refreshQueues: test exception"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|oldErrPrintStream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAccessLocalNodeLabelManager ()
specifier|public
name|void
name|testAccessLocalNodeLabelManager
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"x,y"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// reset localNodeLabelsManager
name|dummyNodeLabelsManager
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// change the sequence of "-directlyAccessNodeLabelStore" and labels,
comment|// should not matter
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"-directlyAccessNodeLabelStore"
block|,
literal|"x,y"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// local node labels manager will be close after running
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAccessRemoteNodeLabelManager ()
specifier|public
name|void
name|testAccessRemoteNodeLabelManager
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"x,y"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// localNodeLabelsManager shouldn't accessed
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// remote node labels manager accessed
name|assertTrue
argument_list|(
name|remoteAdminServiceAccessed
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddToClusterNodeLabels ()
specifier|public
name|void
name|testAddToClusterNodeLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|// successfully add labels
name|String
index|[]
name|args
init|=
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"x"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail at client validation
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|" "
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail at client validation
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|" , "
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// successfully add labels
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|",x,,"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddToClusterNodeLabelsWithExclusivitySetting ()
specifier|public
name|void
name|testAddToClusterNodeLabelsWithExclusivitySetting
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Parenthese not match
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"x("
block|}
decl_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"x)"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not expected key=value specifying inner parentese
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"x(key=value)"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not key is expected, but value not
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"x(exclusive=)"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// key=value both set
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"w,x(exclusive=true), y(exclusive=false),z()"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// key=value both set, and some spaces need to be handled
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-addToClusterNodeLabels"
block|,
literal|"a (exclusive= true) , b( exclusive =false),c  "
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveFromClusterNodeLabels ()
specifier|public
name|void
name|testRemoveFromClusterNodeLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Successfully remove labels
name|dummyNodeLabelsManager
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-removeFromClusterNodeLabels"
block|,
literal|"x,,y"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// no labels, should fail
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-removeFromClusterNodeLabels"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-removeFromClusterNodeLabels"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail at client validation
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-removeFromClusterNodeLabels"
block|,
literal|" "
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail at client validation
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-removeFromClusterNodeLabels"
block|,
literal|", "
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplaceLabelsOnNode ()
specifier|public
name|void
name|testReplaceLabelsOnNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Successfully replace labels
name|dummyNodeLabelsManager
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"Y"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-replaceLabelsOnNode"
block|,
literal|"node1:8000,x node2:8000=y node3,x node4=Y"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|containsKey
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node1"
argument_list|,
literal|8000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|containsKey
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node2"
argument_list|,
literal|8000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|containsKey
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node3"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dummyNodeLabelsManager
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|containsKey
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node4"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-replaceLabelsOnNode"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-replaceLabelsOnNode"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
comment|// no labels, should fail
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-replaceLabelsOnNode"
block|,
literal|" "
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-replaceLabelsOnNode"
block|,
literal|", "
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplaceMultipleLabelsOnSingleNode ()
specifier|public
name|void
name|testReplaceMultipleLabelsOnSingleNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Successfully replace labels
name|dummyNodeLabelsManager
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-replaceLabelsOnNode"
block|,
literal|"node1,x,y"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
decl_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|!=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveLabelsOnNodes ()
specifier|public
name|void
name|testRemoveLabelsOnNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Successfully replace labels
name|dummyNodeLabelsManager
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-replaceLabelsOnNode"
block|,
literal|"node1=x node2=y"
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
decl_stmt|;
name|assertTrue
argument_list|(
literal|0
operator|==
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-replaceLabelsOnNode"
block|,
literal|"node1= node2="
block|,
literal|"-directlyAccessNodeLabelStore"
block|}
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Labels should get replaced even '=' is used "
argument_list|,
literal|0
operator|==
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testError (String[] args, String template, ByteArrayOutputStream data, int resultCode)
specifier|private
name|void
name|testError
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|template
parameter_list|,
name|ByteArrayOutputStream
name|data
parameter_list|,
name|int
name|resultCode
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|actualResultCode
init|=
name|rmAdminCLI
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected result code: "
operator|+
name|resultCode
operator|+
literal|", actual result code is: "
operator|+
name|actualResultCode
argument_list|,
name|resultCode
argument_list|,
name|actualResultCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Expected error message: %n"
operator|+
name|template
operator|+
literal|" is not included in messages: %n"
operator|+
name|data
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|data
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|template
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMHAErrorUsage ()
specifier|public
name|void
name|testRMHAErrorUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|errOutBytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|rmAdminCLIWithHAEnabled
operator|.
name|setErrOut
argument_list|(
operator|new
name|PrintStream
argument_list|(
name|errOutBytes
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-failover"
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rmAdminCLIWithHAEnabled
operator|.
name|run
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|errOut
init|=
operator|new
name|String
argument_list|(
name|errOutBytes
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|errOutBytes
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|errOut
operator|.
name|contains
argument_list|(
literal|"Usage: rmadmin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmAdminCLIWithHAEnabled
operator|.
name|setErrOut
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

