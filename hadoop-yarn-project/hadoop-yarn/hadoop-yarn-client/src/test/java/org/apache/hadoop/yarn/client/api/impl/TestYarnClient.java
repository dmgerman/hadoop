begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClientApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestYarnClient
specifier|public
class|class
name|TestYarnClient
block|{
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
comment|// More to come later.
block|}
annotation|@
name|Test
DECL|method|testClientStop ()
specifier|public
name|void
name|testClientStop
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|ResourceManager
argument_list|()
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnClient
name|client
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSubmitApplication ()
specifier|public
name|void
name|testSubmitApplication
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// speed up tests
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnApplicationState
index|[]
name|exitStates
init|=
operator|new
name|YarnApplicationState
index|[]
block|{
name|YarnApplicationState
operator|.
name|SUBMITTED
block|,
name|YarnApplicationState
operator|.
name|ACCEPTED
block|,
name|YarnApplicationState
operator|.
name|RUNNING
block|,
name|YarnApplicationState
operator|.
name|FINISHED
block|,
name|YarnApplicationState
operator|.
name|FAILED
block|,
name|YarnApplicationState
operator|.
name|KILLED
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exitStates
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|setYarnApplicationState
argument_list|(
name|exitStates
index|[
name|i
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|mockReport
argument_list|,
name|times
argument_list|(
literal|4
operator|*
name|i
operator|+
literal|4
argument_list|)
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
expr_stmt|;
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillApplication ()
specifier|public
name|void
name|testKillApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|killApplication
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getRMClient
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|forceKillApplication
argument_list|(
name|any
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testApplicationType ()
specifier|public
name|void
name|testApplicationType
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"YARN"
argument_list|,
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MAPREDUCE"
argument_list|,
name|app1
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testApplicationTypeLimit ()
specifier|public
name|void
name|testApplicationTypeLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE-LENGTH-IS-20"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MAPREDUCE-LENGTH-IS-"
argument_list|,
name|app1
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetApplications ()
specifier|public
name|void
name|testGetApplications
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|expectedReports
init|=
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getReports
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|reports
init|=
name|client
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
argument_list|,
name|expectedReports
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appTypes
operator|.
name|add
argument_list|(
literal|"YARN"
argument_list|)
expr_stmt|;
name|appTypes
operator|.
name|add
argument_list|(
literal|"NON-YARN"
argument_list|)
expr_stmt|;
name|reports
operator|=
name|client
operator|.
name|getApplications
argument_list|(
name|appTypes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
operator|||
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|reports
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedReports
operator|.
name|contains
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|reports
operator|=
name|client
operator|.
name|getApplications
argument_list|(
literal|null
argument_list|,
name|appStates
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-MAPREDUCE"
argument_list|)
operator|)
operator|||
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-MAPREDUCE"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|reports
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedReports
operator|.
name|contains
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reports
operator|=
name|client
operator|.
name|getApplications
argument_list|(
name|appTypes
argument_list|,
name|appStates
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|reports
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedReports
operator|.
name|contains
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|MockYarnClient
specifier|private
specifier|static
class|class
name|MockYarnClient
extends|extends
name|YarnClientImpl
block|{
DECL|field|mockReport
specifier|private
name|ApplicationReport
name|mockReport
decl_stmt|;
DECL|field|reports
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|reports
decl_stmt|;
DECL|field|mockAppResponse
name|GetApplicationsResponse
name|mockAppResponse
init|=
name|mock
argument_list|(
name|GetApplicationsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MockYarnClient ()
specifier|public
name|MockYarnClient
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|reports
operator|=
name|createAppReports
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|rmClient
operator|=
name|mock
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|GetApplicationReportResponse
name|mockResponse
init|=
name|mock
argument_list|(
name|GetApplicationReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockReport
operator|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|when
argument_list|(
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockResponse
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getApplications
argument_list|(
name|any
argument_list|(
name|GetApplicationsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAppResponse
argument_list|)
expr_stmt|;
comment|// return false for 1st kill request, and true for the 2nd.
name|when
argument_list|(
name|rmClient
operator|.
name|forceKillApplication
argument_list|(
name|any
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|mockResponse
operator|.
name|getApplicationReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockReport
argument_list|)
expr_stmt|;
block|}
DECL|method|getRMClient ()
specifier|public
name|ApplicationClientProtocol
name|getRMClient
parameter_list|()
block|{
return|return
name|rmClient
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ( Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockAppResponse
operator|.
name|getApplicationList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|reports
argument_list|,
name|applicationTypes
argument_list|,
name|applicationStates
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getApplications
argument_list|(
name|applicationTypes
argument_list|,
name|applicationStates
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{     }
DECL|method|setYarnApplicationState (YarnApplicationState state)
specifier|public
name|void
name|setYarnApplicationState
parameter_list|(
name|YarnApplicationState
name|state
parameter_list|)
block|{
name|when
argument_list|(
name|mockReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|YarnApplicationState
operator|.
name|NEW
argument_list|,
name|YarnApplicationState
operator|.
name|NEW_SAVING
argument_list|,
name|YarnApplicationState
operator|.
name|NEW_SAVING
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|getReports ()
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getReports
parameter_list|()
block|{
return|return
name|this
operator|.
name|reports
return|;
block|}
DECL|method|createAppReports ()
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|createAppReports
parameter_list|()
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applicationReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport2
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"user2"
argument_list|,
literal|"queue2"
argument_list|,
literal|"appname2"
argument_list|,
literal|"host2"
argument_list|,
literal|125
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics2"
argument_list|,
literal|"url2"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.63789f
argument_list|,
literal|"NON-YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport2
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport3
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId3
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"user3"
argument_list|,
literal|"queue3"
argument_list|,
literal|"appname3"
argument_list|,
literal|"host3"
argument_list|,
literal|126
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics3"
argument_list|,
literal|"url3"
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.73789f
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport3
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId4
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport4
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId4
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId4
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"user4"
argument_list|,
literal|"queue4"
argument_list|,
literal|"appname4"
argument_list|,
literal|"host4"
argument_list|,
literal|127
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|,
literal|"diagnostics4"
argument_list|,
literal|"url4"
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.83789f
argument_list|,
literal|"NON-MAPREDUCE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport4
argument_list|)
expr_stmt|;
return|return
name|applicationReports
return|;
block|}
DECL|method|getApplicationReports ( List<ApplicationReport> applicationReports, Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates)
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplicationReports
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applicationReports
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|)
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|appReport
range|:
name|applicationReports
control|)
block|{
if|if
condition|(
name|applicationTypes
operator|!=
literal|null
operator|&&
operator|!
name|applicationTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|applicationTypes
operator|.
name|contains
argument_list|(
name|appReport
operator|.
name|getApplicationType
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|applicationStates
operator|!=
literal|null
operator|&&
operator|!
name|applicationStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|applicationStates
operator|.
name|contains
argument_list|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|appReports
operator|.
name|add
argument_list|(
name|appReport
argument_list|)
expr_stmt|;
block|}
return|return
name|appReports
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAMMRTokens ()
specifier|public
name|void
name|testAMMRTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testMRAMTokens"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|YarnClient
name|rmClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|init
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|rmClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|waitTillAccepted
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|)
expr_stmt|;
comment|//managed AMs don't return AMRM token
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitTillAccepted
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|)
expr_stmt|;
comment|//unmanaged AMs do return AMRM token
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|other
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|appId
operator|=
name|other
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationId
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnClient
name|rmClient
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|waitTillAccepted
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|)
expr_stmt|;
comment|//unmanaged AMs do return AMRM token
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//other users don't get AMRM token
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|rmClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createApp (YarnClient rmClient, boolean unmanaged)
specifier|private
name|ApplicationId
name|createApp
parameter_list|(
name|YarnClient
name|rmClient
parameter_list|,
name|boolean
name|unmanaged
parameter_list|)
throws|throws
name|Exception
block|{
name|YarnClientApplication
name|newApp
init|=
name|rmClient
operator|.
name|createApplication
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|newApp
operator|.
name|getNewApplicationResponse
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Create launch context for app master
name|ApplicationSubmissionContext
name|appContext
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set the application id
name|appContext
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// set the application name
name|appContext
operator|.
name|setApplicationName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Set the priority for the application master
name|Priority
name|pri
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|pri
operator|.
name|setPriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
comment|// Set the queue to which this application is to be submitted in the RM
name|appContext
operator|.
name|setQueue
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
comment|// Set up the container launch context for the application master
name|ContainerLaunchContext
name|amContainer
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setUnmanagedAM
argument_list|(
name|unmanaged
argument_list|)
expr_stmt|;
comment|// Submit the application to the applications manager
name|rmClient
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|waitTillAccepted (YarnClient rmClient, ApplicationId appId)
specifier|private
name|void
name|waitTillAccepted
parameter_list|(
name|YarnClient
name|rmClient
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
while|while
condition|(
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|!=
name|report
operator|.
name|getYarnApplicationState
argument_list|()
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|20
operator|*
literal|1000
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"App '"
operator|+
name|appId
operator|+
literal|"' time out, failed to reach ACCEPTED state"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|report
operator|=
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

