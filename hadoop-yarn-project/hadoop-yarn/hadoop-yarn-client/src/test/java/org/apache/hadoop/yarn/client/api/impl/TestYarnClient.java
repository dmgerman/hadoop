begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|State
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SignalContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SignalContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AHSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClientApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationIdNotProvidedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystemTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UTCClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_class
DECL|class|TestYarnClient
specifier|public
class|class
name|TestYarnClient
block|{
annotation|@
name|Test
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
block|{
comment|// More to come later.
block|}
annotation|@
name|Test
DECL|method|testClientStop ()
specifier|public
name|void
name|testClientStop
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|ResourceManager
argument_list|()
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnClient
name|client
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineClientInitFailure ()
specifier|public
name|void
name|testTimelineClientInitFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|YarnClient
name|client
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|client
operator|instanceof
name|YarnClientImpl
condition|)
block|{
name|YarnClientImpl
name|impl
init|=
operator|(
name|YarnClientImpl
operator|)
name|client
decl_stmt|;
name|YarnClientImpl
name|spyClient
init|=
name|spy
argument_list|(
name|impl
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyClient
operator|.
name|createTimelineClient
argument_list|()
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|NoClassDefFoundError
argument_list|(
literal|"Mock a failure when init timeline instance"
argument_list|)
argument_list|)
expr_stmt|;
name|spyClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|spyClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Timeline client should be disabled when"
operator|+
literal|"it is failed to init"
argument_list|,
name|spyClient
operator|.
name|timelineServiceEnabled
argument_list|)
expr_stmt|;
name|spyClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSubmitApplication ()
specifier|public
name|void
name|testSubmitApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// speed up tests
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnApplicationState
index|[]
name|exitStates
init|=
operator|new
name|YarnApplicationState
index|[]
block|{
name|YarnApplicationState
operator|.
name|ACCEPTED
block|,
name|YarnApplicationState
operator|.
name|RUNNING
block|,
name|YarnApplicationState
operator|.
name|FINISHED
block|}
decl_stmt|;
comment|// Submit an application without ApplicationId provided
comment|// Should get ApplicationIdNotProvidedException
name|ApplicationSubmissionContext
name|contextWithoutApplicationId
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|client
operator|.
name|submitApplication
argument_list|(
name|contextWithoutApplicationId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw the ApplicationIdNotProvidedException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|ApplicationIdNotProvidedException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ApplicationId is not provided in ApplicationSubmissionContext"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Submit the application with applicationId provided
comment|// Should be successful
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exitStates
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|setYarnApplicationState
argument_list|(
name|exitStates
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|client
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|verify
argument_list|(
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|mockReport
argument_list|,
name|times
argument_list|(
literal|4
operator|*
name|i
operator|+
literal|4
argument_list|)
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
expr_stmt|;
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testSubmitApplicationInterrupted ()
specifier|public
name|void
name|testSubmitApplicationInterrupted
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|pollIntervalMs
init|=
literal|1000
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
argument_list|,
name|pollIntervalMs
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
init|)
block|{
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Submit the application and then interrupt it while its waiting
comment|// for submission to be successful.
specifier|final
class|class
name|SubmitThread
extends|extends
name|Thread
block|{
specifier|private
name|boolean
name|isInterrupted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|setYarnApplicationState
argument_list|(
name|YarnApplicationState
operator|.
name|NEW
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|YarnException
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InterruptedException
condition|)
block|{
name|isInterrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
name|SubmitThread
name|appSubmitThread
init|=
operator|new
name|SubmitThread
argument_list|()
decl_stmt|;
name|appSubmitThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Wait for thread to start and begin to sleep
comment|// (enter TIMED_WAITING state).
while|while
condition|(
name|appSubmitThread
operator|.
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|TIMED_WAITING
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|pollIntervalMs
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// Interrupt the thread.
name|appSubmitThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|appSubmitThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected an InterruptedException wrapped inside a "
operator|+
literal|"YarnException"
argument_list|,
name|appSubmitThread
operator|.
name|isInterrupted
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSubmitIncorrectQueueToCapacityScheduler ()
specifier|public
name|void
name|testSubmitIncorrectQueueToCapacityScheduler
parameter_list|()
throws|throws
name|IOException
block|{
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testMRAMTokens"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|YarnClient
name|rmClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|rmClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnClientApplication
name|newApp
init|=
name|rmClient
operator|.
name|createApplication
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|newApp
operator|.
name|getNewApplicationResponse
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Create launch context for app master
name|ApplicationSubmissionContext
name|appContext
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set the application id
name|appContext
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// set the application name
name|appContext
operator|.
name|setApplicationName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Set the queue to which this application is to be submitted in the RM
name|appContext
operator|.
name|setQueue
argument_list|(
literal|"nonexist"
argument_list|)
expr_stmt|;
comment|// Set up the container launch context for the application master
name|ContainerLaunchContext
name|amContainer
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// appContext.setUnmanagedAM(unmanaged);
comment|// Submit the application to the applications manager
name|rmClient
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Job submission should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to submit"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|rmClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testKillApplication ()
specifier|public
name|void
name|testKillApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|client
operator|.
name|killApplication
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getRMClient
argument_list|()
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|forceKillApplication
argument_list|(
name|any
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testApplicationType ()
specifier|public
name|void
name|testApplicationType
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"YARN"
argument_list|,
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MAPREDUCE"
argument_list|,
name|app1
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testApplicationTypeLimit ()
specifier|public
name|void
name|testApplicationTypeLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE-LENGTH-IS-20"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"MAPREDUCE-LENGTH-IS-"
argument_list|,
name|app1
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetApplications ()
specifier|public
name|void
name|testGetApplications
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|expectedReports
init|=
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getReports
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|reports
init|=
name|client
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
argument_list|,
name|expectedReports
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appTypes
operator|.
name|add
argument_list|(
literal|"YARN"
argument_list|)
expr_stmt|;
name|appTypes
operator|.
name|add
argument_list|(
literal|"NON-YARN"
argument_list|)
expr_stmt|;
name|reports
operator|=
name|client
operator|.
name|getApplications
argument_list|(
name|appTypes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
operator|||
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|reports
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedReports
operator|.
name|contains
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|reports
operator|=
name|client
operator|.
name|getApplications
argument_list|(
literal|null
argument_list|,
name|appStates
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-MAPREDUCE"
argument_list|)
operator|)
operator|||
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|&&
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-MAPREDUCE"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|reports
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedReports
operator|.
name|contains
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reports
operator|=
name|client
operator|.
name|getApplications
argument_list|(
name|appTypes
argument_list|,
name|appStates
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|reports
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedReports
operator|.
name|contains
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetApplicationAttempts ()
specifier|public
name|void
name|testGetApplicationAttempts
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|reports
init|=
name|client
operator|.
name|getApplicationAttempts
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reports
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetApplicationAttempt ()
specifier|public
name|void
name|testGetApplicationAttempt
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|expectedReports
init|=
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getReports
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptReport
name|report
init|=
name|client
operator|.
name|getApplicationAttemptReport
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|report
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetContainers ()
specifier|public
name|void
name|testGetContainers
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|reports
init|=
name|client
operator|.
name|getContainers
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reports
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
operator|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
operator|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reports
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
operator|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|3
argument_list|)
operator|)
argument_list|)
expr_stmt|;
comment|//First2 containers should come from RM with updated state information and
comment|// 3rd container is not there in RM and should
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerState
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainerState
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
operator|(
name|reports
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getContainerState
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetContainerReport ()
specifier|public
name|void
name|testGetContainerReport
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|expectedReports
init|=
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getReports
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerReport
name|report
init|=
name|client
operator|.
name|getContainerReport
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|report
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|expectedReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|report
operator|=
name|client
operator|.
name|getContainerReport
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|report
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|expectedReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetLabelsToNodes ()
specifier|public
name|void
name|testGetLabelsToNodes
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Get labels to nodes mapping
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|expectedLabelsToNodes
init|=
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getLabelsToNodesMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|labelsToNodes
init|=
name|client
operator|.
name|getLabelsToNodes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|expectedLabelsToNodes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|labelsToNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Get labels to nodes for selected labels
name|Set
argument_list|<
name|String
argument_list|>
name|setLabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedLabelsToNodes
operator|=
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getLabelsToNodesMap
argument_list|(
name|setLabels
argument_list|)
expr_stmt|;
name|labelsToNodes
operator|=
name|client
operator|.
name|getLabelsToNodes
argument_list|(
name|setLabels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|expectedLabelsToNodes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|labelsToNodes
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetNodesToLabels ()
specifier|public
name|void
name|testGetNodesToLabels
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Get labels to nodes mapping
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|expectedNodesToLabels
init|=
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getNodeToLabelsMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|nodesToLabels
init|=
name|client
operator|.
name|getNodeToLabels
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesToLabels
argument_list|,
name|expectedNodesToLabels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodesToLabels
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify exclusivity
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|labels
init|=
name|nodesToLabels
operator|.
name|get
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeLabel
name|label
range|:
name|labels
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|label
operator|.
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|MockYarnClient
specifier|private
specifier|static
class|class
name|MockYarnClient
extends|extends
name|YarnClientImpl
block|{
DECL|field|mockReport
specifier|private
name|ApplicationReport
name|mockReport
decl_stmt|;
DECL|field|reports
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|reports
decl_stmt|;
DECL|field|attempts
specifier|private
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|containers
specifier|private
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|List
argument_list|<
name|ContainerReport
argument_list|>
argument_list|>
name|containers
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|List
argument_list|<
name|ContainerReport
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|containersFromAHS
specifier|private
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|List
argument_list|<
name|ContainerReport
argument_list|>
argument_list|>
name|containersFromAHS
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|List
argument_list|<
name|ContainerReport
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|mockAppResponse
name|GetApplicationsResponse
name|mockAppResponse
init|=
name|mock
argument_list|(
name|GetApplicationsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockAppAttemptsResponse
name|GetApplicationAttemptsResponse
name|mockAppAttemptsResponse
init|=
name|mock
argument_list|(
name|GetApplicationAttemptsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockAttemptResponse
name|GetApplicationAttemptReportResponse
name|mockAttemptResponse
init|=
name|mock
argument_list|(
name|GetApplicationAttemptReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockContainersResponse
name|GetContainersResponse
name|mockContainersResponse
init|=
name|mock
argument_list|(
name|GetContainersResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockContainerResponse
name|GetContainerReportResponse
name|mockContainerResponse
init|=
name|mock
argument_list|(
name|GetContainerReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockLabelsToNodesResponse
name|GetLabelsToNodesResponse
name|mockLabelsToNodesResponse
init|=
name|mock
argument_list|(
name|GetLabelsToNodesResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|mockNodeToLabelsResponse
name|GetNodesToLabelsResponse
name|mockNodeToLabelsResponse
init|=
name|mock
argument_list|(
name|GetNodesToLabelsResponse
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|MockYarnClient ()
specifier|public
name|MockYarnClient
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|reports
operator|=
name|createAppReports
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|rmClient
operator|=
name|mock
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
name|GetApplicationReportResponse
name|mockResponse
init|=
name|mock
argument_list|(
name|GetApplicationReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockReport
operator|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|when
argument_list|(
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockResponse
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getApplications
argument_list|(
name|any
argument_list|(
name|GetApplicationsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAppResponse
argument_list|)
expr_stmt|;
comment|// return false for 1st kill request, and true for the 2nd.
name|when
argument_list|(
name|rmClient
operator|.
name|forceKillApplication
argument_list|(
name|any
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getApplicationAttemptReport
argument_list|(
name|any
argument_list|(
name|GetApplicationAttemptReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAttemptResponse
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getApplicationAttempts
argument_list|(
name|any
argument_list|(
name|GetApplicationAttemptsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockAppAttemptsResponse
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getContainers
argument_list|(
name|any
argument_list|(
name|GetContainersRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainersResponse
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getContainerReport
argument_list|(
name|any
argument_list|(
name|GetContainerReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainerResponse
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getLabelsToNodes
argument_list|(
name|any
argument_list|(
name|GetLabelsToNodesRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockLabelsToNodesResponse
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmClient
operator|.
name|getNodeToLabels
argument_list|(
name|any
argument_list|(
name|GetNodesToLabelsRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockNodeToLabelsResponse
argument_list|)
expr_stmt|;
name|historyClient
operator|=
name|mock
argument_list|(
name|AHSClient
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|mockResponse
operator|.
name|getApplicationReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockReport
argument_list|)
expr_stmt|;
block|}
DECL|method|getRMClient ()
specifier|public
name|ApplicationClientProtocol
name|getRMClient
parameter_list|()
block|{
return|return
name|rmClient
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ( Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockAppResponse
operator|.
name|getApplicationList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getApplicationReports
argument_list|(
name|reports
argument_list|,
name|applicationTypes
argument_list|,
name|applicationStates
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getApplications
argument_list|(
name|applicationTypes
argument_list|,
name|applicationStates
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{     }
DECL|method|setYarnApplicationState (YarnApplicationState state)
specifier|public
name|void
name|setYarnApplicationState
parameter_list|(
name|YarnApplicationState
name|state
parameter_list|)
block|{
name|when
argument_list|(
name|mockReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|YarnApplicationState
operator|.
name|NEW
argument_list|,
name|YarnApplicationState
operator|.
name|NEW_SAVING
argument_list|,
name|YarnApplicationState
operator|.
name|NEW_SAVING
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|getReports ()
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getReports
parameter_list|()
block|{
return|return
name|this
operator|.
name|reports
return|;
block|}
DECL|method|createAppReports ()
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|createAppReports
parameter_list|()
block|{
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"queue"
argument_list|,
literal|"appname"
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"url"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.53789f
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applicationReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|appAttempts
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationAttemptReport
name|attempt
init|=
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|"url"
argument_list|,
literal|"oUrl"
argument_list|,
literal|"diagnostics"
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|FINISHED
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|newApplicationReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|appAttempts
operator|.
name|add
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|ApplicationAttemptReport
name|attempt1
init|=
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"host"
argument_list|,
literal|124
argument_list|,
literal|"url"
argument_list|,
literal|"oUrl"
argument_list|,
literal|"diagnostics"
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|FINISHED
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|newApplicationReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|appAttempts
operator|.
name|add
argument_list|(
name|attempt1
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|appAttempts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|containerReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
decl_stmt|;
name|ContainerReport
name|container
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"logURL"
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|containerReports
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|ContainerReport
name|container1
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"logURL"
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|containerReports
operator|.
name|add
argument_list|(
name|container1
argument_list|)
expr_stmt|;
name|containers
operator|.
name|put
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerReports
argument_list|)
expr_stmt|;
comment|//add containers to be sent from AHS
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|containerReportsForAHS
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
decl_stmt|;
name|container
operator|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"logURL"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportsForAHS
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|container1
operator|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"HSlogURL"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportsForAHS
operator|.
name|add
argument_list|(
name|container1
argument_list|)
expr_stmt|;
name|ContainerReport
name|container2
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|1234
argument_list|,
literal|5678
argument_list|,
literal|"diagnosticInfo"
argument_list|,
literal|"HSlogURL"
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|2345
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|containerReportsForAHS
operator|.
name|add
argument_list|(
name|container2
argument_list|)
expr_stmt|;
name|containersFromAHS
operator|.
name|put
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerReportsForAHS
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport2
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|"user2"
argument_list|,
literal|"queue2"
argument_list|,
literal|"appname2"
argument_list|,
literal|"host2"
argument_list|,
literal|125
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"diagnostics2"
argument_list|,
literal|"url2"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.63789f
argument_list|,
literal|"NON-YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport2
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport3
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId3
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|"user3"
argument_list|,
literal|"queue3"
argument_list|,
literal|"appname3"
argument_list|,
literal|"host3"
argument_list|,
literal|126
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
literal|"diagnostics3"
argument_list|,
literal|"url3"
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.73789f
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport3
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId4
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|ApplicationReport
name|newApplicationReport4
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|applicationId4
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId4
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|"user4"
argument_list|,
literal|"queue4"
argument_list|,
literal|"appname4"
argument_list|,
literal|"host4"
argument_list|,
literal|127
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|,
literal|"diagnostics4"
argument_list|,
literal|"url4"
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|"N/A"
argument_list|,
literal|0.83789f
argument_list|,
literal|"NON-MAPREDUCE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|applicationReports
operator|.
name|add
argument_list|(
name|newApplicationReport4
argument_list|)
expr_stmt|;
return|return
name|applicationReports
return|;
block|}
DECL|method|getApplicationReports ( List<ApplicationReport> applicationReports, Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates)
specifier|private
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplicationReports
parameter_list|(
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applicationReports
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|)
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appReports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|appReport
range|:
name|applicationReports
control|)
block|{
if|if
condition|(
name|applicationTypes
operator|!=
literal|null
operator|&&
operator|!
name|applicationTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|applicationTypes
operator|.
name|contains
argument_list|(
name|appReport
operator|.
name|getApplicationType
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|applicationStates
operator|!=
literal|null
operator|&&
operator|!
name|applicationStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|applicationStates
operator|.
name|contains
argument_list|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
name|appReports
operator|.
name|add
argument_list|(
name|appReport
argument_list|)
expr_stmt|;
block|}
return|return
name|appReports
return|;
block|}
annotation|@
name|Override
DECL|method|getLabelsToNodes ()
specifier|public
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|getLabelsToNodes
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockLabelsToNodesResponse
operator|.
name|getLabelsToNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getLabelsToNodesMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getLabelsToNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLabelsToNodes (Set<String> labels)
specifier|public
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|getLabelsToNodes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockLabelsToNodesResponse
operator|.
name|getLabelsToNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getLabelsToNodesMap
argument_list|(
name|labels
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getLabelsToNodes
argument_list|(
name|labels
argument_list|)
return|;
block|}
DECL|method|getLabelsToNodesMap ()
specifier|public
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|getLabelsToNodesMap
parameter_list|()
block|{
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|setNodeIds
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|setNodeIds
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|,
name|setNodeIds
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"z"
argument_list|)
argument_list|,
name|setNodeIds
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|getLabelsToNodesMap (Set<String> labels)
specifier|public
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|getLabelsToNodesMap
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|setNodeIds
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
name|label
argument_list|)
argument_list|,
name|setNodeIds
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeToLabels ()
specifier|public
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|getNodeToLabels
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockNodeToLabelsResponse
operator|.
name|getNodeToLabels
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getNodeToLabelsMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getNodeToLabels
argument_list|()
return|;
block|}
DECL|method|getNodeToLabelsMap ()
specifier|public
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|getNodeToLabelsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|setNodeLabels
init|=
operator|new
name|HashSet
argument_list|<
name|NodeLabel
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|setNodeLabels
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempts ( ApplicationId appId)
specifier|public
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|getApplicationAttempts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockAppAttemptsResponse
operator|.
name|getApplicationAttemptList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getAttempts
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getApplicationAttempts
argument_list|(
name|appId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptReport ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationAttemptReport
name|getApplicationAttemptReport
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockAttemptResponse
operator|.
name|getApplicationAttemptReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getAttempt
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getApplicationAttemptReport
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ContainerReport
argument_list|>
DECL|method|getContainers (ApplicationAttemptId appAttemptId)
name|getContainers
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|mockContainersResponse
operator|.
name|getContainerList
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getContainersReport
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|historyClient
operator|.
name|getContainers
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getContainersFromAHS
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getContainers
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
DECL|method|getContainersFromAHS ( ApplicationAttemptId appAttemptId)
specifier|private
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|getContainersFromAHS
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
return|return
name|containersFromAHS
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerReport (ContainerId containerId)
specifier|public
name|ContainerReport
name|getContainerReport
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
name|ContainerReport
name|container
init|=
name|getContainer
argument_list|(
name|containerId
argument_list|,
name|containers
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContainerResponse
operator|.
name|getContainerReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|when
argument_list|(
name|rmClient
operator|.
name|getContainerReport
argument_list|(
name|any
argument_list|(
name|GetContainerReportRequest
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|e
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainerResponse
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ContainerReport
name|container
init|=
name|getContainer
argument_list|(
name|containerId
argument_list|,
name|containersFromAHS
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|historyClient
operator|.
name|getContainerReport
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|when
argument_list|(
name|historyClient
operator|.
name|getContainerReport
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getContainerReport
argument_list|(
name|containerId
argument_list|)
return|;
block|}
DECL|method|getAttempts (ApplicationId appId)
specifier|public
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|getAttempts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|attempts
operator|.
name|get
argument_list|(
name|appId
argument_list|)
return|;
block|}
specifier|public
name|ApplicationAttemptReport
DECL|method|getAttempt (ApplicationAttemptId appAttemptId)
name|getAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
return|return
name|attempts
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getContainersReport ( ApplicationAttemptId appAttemptId)
specifier|public
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|getContainersReport
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
return|return
name|containers
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
DECL|method|getContainer ( ContainerId containerId, HashMap<ApplicationAttemptId, List<ContainerReport>> containersToAppAttemptMapping)
specifier|private
name|ContainerReport
name|getContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|List
argument_list|<
name|ContainerReport
argument_list|>
argument_list|>
name|containersToAppAttemptMapping
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|containersForAppAttempt
init|=
name|containersToAppAttemptMapping
operator|.
name|get
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|containersForAppAttempt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ApplicationNotFoundException
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|" is not found "
argument_list|)
throw|;
block|}
name|Iterator
argument_list|<
name|ContainerReport
argument_list|>
name|iterator
init|=
name|containersForAppAttempt
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ContainerReport
name|next
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
return|return
name|next
return|;
block|}
block|}
throw|throw
operator|new
name|ContainerNotFoundException
argument_list|(
name|containerId
operator|+
literal|" is not found "
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAMMRTokens ()
specifier|public
name|void
name|testAMMRTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testMRAMTokens"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|YarnClient
name|rmClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cluster
operator|.
name|init
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|rmClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|waitTillAccepted
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//managed AMs don't return AMRM token
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitTillAccepted
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|20
operator|*
literal|1000
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"AMRM token is null"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|//unmanaged AMs do return AMRM token
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|other
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|appId
operator|=
name|other
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationId
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnClient
name|rmClient
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|rmClient
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|createApp
argument_list|(
name|rmClient
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|waitTillAccepted
argument_list|(
name|rmClient
argument_list|,
name|appId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|20
operator|*
literal|1000
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"AMRM token is null"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|//unmanaged AMs do return AMRM token
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//other users don't get AMRM token
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmClient
operator|.
name|getAMRMToken
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|rmClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createApp (YarnClient rmClient, boolean unmanaged)
specifier|private
name|ApplicationId
name|createApp
parameter_list|(
name|YarnClient
name|rmClient
parameter_list|,
name|boolean
name|unmanaged
parameter_list|)
throws|throws
name|Exception
block|{
name|YarnClientApplication
name|newApp
init|=
name|rmClient
operator|.
name|createApplication
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|newApp
operator|.
name|getNewApplicationResponse
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Create launch context for app master
name|ApplicationSubmissionContext
name|appContext
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set the application id
name|appContext
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// set the application name
name|appContext
operator|.
name|setApplicationName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
comment|// Set the priority for the application master
name|Priority
name|pri
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|pri
operator|.
name|setPriority
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setPriority
argument_list|(
name|pri
argument_list|)
expr_stmt|;
comment|// Set the queue to which this application is to be submitted in the RM
name|appContext
operator|.
name|setQueue
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
comment|// Set up the container launch context for the application master
name|ContainerLaunchContext
name|amContainer
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|appContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|appContext
operator|.
name|setUnmanagedAM
argument_list|(
name|unmanaged
argument_list|)
expr_stmt|;
comment|// Submit the application to the applications manager
name|rmClient
operator|.
name|submitApplication
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|waitTillAccepted (YarnClient rmClient, ApplicationId appId, boolean unmanagedApplication)
specifier|private
name|void
name|waitTillAccepted
parameter_list|(
name|YarnClient
name|rmClient
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|boolean
name|unmanagedApplication
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
while|while
condition|(
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|!=
name|report
operator|.
name|getYarnApplicationState
argument_list|()
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|20
operator|*
literal|1000
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"App '"
operator|+
name|appId
operator|+
literal|"' time out, failed to reach ACCEPTED state"
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|report
operator|=
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|unmanagedApplication
argument_list|,
name|report
operator|.
name|isUnmanagedApp
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncAPIPollTimeout ()
specifier|public
name|void
name|testAsyncAPIPollTimeout
parameter_list|()
block|{
name|testAsyncAPIPollTimeoutHelper
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testAsyncAPIPollTimeoutHelper
argument_list|(
literal|0L
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testAsyncAPIPollTimeoutHelper
argument_list|(
literal|1L
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsyncAPIPollTimeoutHelper (Long valueForTimeout, boolean expectedTimeoutEnforcement)
specifier|private
name|void
name|testAsyncAPIPollTimeoutHelper
parameter_list|(
name|Long
name|valueForTimeout
parameter_list|,
name|boolean
name|expectedTimeoutEnforcement
parameter_list|)
block|{
name|YarnClientImpl
name|client
init|=
operator|new
name|YarnClientImpl
argument_list|()
decl_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueForTimeout
operator|!=
literal|null
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
argument_list|,
name|valueForTimeout
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedTimeoutEnforcement
argument_list|,
name|client
operator|.
name|enforceAsyncAPITimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBestEffortTimelineDelegationToken ()
specifier|public
name|void
name|testBestEffortTimelineDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|YarnClientImpl
name|client
init|=
name|spy
argument_list|(
operator|new
name|YarnClientImpl
argument_list|()
block|{
annotation|@
name|Override
name|TimelineClient
name|createTimelineClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|timelineClient
operator|=
name|mock
argument_list|(
name|TimelineClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timelineClient
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Best effort test exception"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|timelineClient
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_BEST_EFFORT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|client
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTimelineDelegationToken
argument_list|()
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_BEST_EFFORT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|client
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|getTimelineDelegationToken
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Get delegation token should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Success
block|}
block|}
annotation|@
name|Test
DECL|method|testAutomaticTimelineDelegationTokenLoading ()
specifier|public
name|void
name|testAutomaticTimelineDelegationTokenLoading
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|TimelineDelegationTokenIdentifier
name|timelineDT
init|=
operator|new
name|TimelineDelegationTokenIdentifier
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|dToken
init|=
operator|new
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|(
name|timelineDT
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|timelineDT
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a mock client
name|YarnClientImpl
name|client
init|=
name|spy
argument_list|(
operator|new
name|YarnClientImpl
argument_list|()
block|{
annotation|@
name|Override
name|TimelineClient
name|createTimelineClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|timelineClient
operator|=
name|mock
argument_list|(
name|TimelineClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|timelineClient
operator|.
name|getDelegationToken
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
return|return
name|timelineClient
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|rmClient
operator|=
name|mock
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{       }
annotation|@
name|Override
specifier|public
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|ApplicationReport
name|report
init|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSecurityEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
comment|// when i == 0, timeline DT already exists, no need to get one more
comment|// when i == 1, timeline DT doesn't exist, need to get one more
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|credentials
operator|.
name|addToken
argument_list|(
name|client
operator|.
name|timelineService
argument_list|,
name|dToken
argument_list|)
expr_stmt|;
block|}
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|tokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|tokens
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|client
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
comment|// GetTimelineDelegationToken shouldn't be called
name|verify
argument_list|(
name|client
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getTimelineDelegationToken
argument_list|()
expr_stmt|;
block|}
comment|// In either way, token should be there
name|credentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokens
operator|=
name|clc
operator|.
name|getTokens
argument_list|()
expr_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|dibb
operator|.
name|reset
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
argument_list|>
name|dTokens
init|=
name|credentials
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dToken
argument_list|,
name|dTokens
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParseTimelineDelegationTokenRenewer ()
specifier|public
name|void
name|testParseTimelineDelegationTokenRenewer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Client side
name|YarnClientImpl
name|client
init|=
operator|(
name|YarnClientImpl
operator|)
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"rm/_HOST@EXAMPLE.COM"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"localhost:8188"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rm/localhost@EXAMPLE.COM"
argument_list|,
name|client
operator|.
name|timelineDTRenewer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setupMiniYARNCluster ()
specifier|private
name|MiniYARNCluster
name|setupMiniYARNCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|ReservationSystemTestUtil
operator|.
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MiniYARNCluster
name|cluster
init|=
operator|new
name|MiniYARNCluster
argument_list|(
literal|"testReservationAPIs"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|cluster
operator|.
name|getResourceManager
argument_list|()
operator|.
name|getRMContext
argument_list|()
operator|.
name|getReservationSystem
argument_list|()
operator|.
name|getPlan
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
operator|.
name|getTotalCapacity
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|>
literal|6000
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
return|return
name|cluster
return|;
block|}
DECL|method|setupYarnClient (MiniYARNCluster cluster)
specifier|private
name|YarnClient
name|setupYarnClient
parameter_list|(
name|MiniYARNCluster
name|cluster
parameter_list|)
block|{
specifier|final
name|Configuration
name|yarnConf
init|=
name|cluster
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|client
return|;
block|}
DECL|method|submitReservationTestHelper ( YarnClient client, long arrival, long deadline, long duration)
specifier|private
name|ReservationSubmissionRequest
name|submitReservationTestHelper
parameter_list|(
name|YarnClient
name|client
parameter_list|,
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|duration
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ReservationId
name|reservationID
init|=
name|client
operator|.
name|createReservation
argument_list|()
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|createSimpleReservationRequest
argument_list|(
name|reservationID
argument_list|,
literal|4
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionResponse
name|sResponse
init|=
name|client
operator|.
name|submitReservation
argument_list|(
name|sRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservationID
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Submit reservation response: "
operator|+
name|reservationID
argument_list|)
expr_stmt|;
return|return
name|sRequest
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateReservation ()
specifier|public
name|void
name|testCreateReservation
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
name|setupMiniYARNCluster
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|setupYarnClient
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
try|try
block|{
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|client
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// Submit the reservation again with the same request and make sure it
comment|// passes.
name|client
operator|.
name|submitReservation
argument_list|(
name|sRequest
argument_list|)
expr_stmt|;
comment|// Submit the reservation with the same reservation id but different
comment|// reservation definition, and ensure YarnException is thrown.
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|sRequest
operator|.
name|getReservationDefinition
argument_list|()
decl_stmt|;
name|rDef
operator|.
name|setArrival
argument_list|(
name|arrival
operator|+
name|duration
argument_list|)
expr_stmt|;
name|sRequest
operator|.
name|setReservationDefinition
argument_list|(
name|rDef
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|submitReservation
argument_list|(
name|sRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Reservation submission should fail if a duplicate "
operator|+
literal|"reservation id is used, but the reservation definition has been "
operator|+
literal|"updated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|YarnException
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservation ()
specifier|public
name|void
name|testUpdateReservation
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
name|setupMiniYARNCluster
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|setupYarnClient
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
try|try
block|{
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|client
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|sRequest
operator|.
name|getReservationDefinition
argument_list|()
decl_stmt|;
name|ReservationRequest
name|rr
init|=
name|rDef
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getReservationResources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|rr
operator|.
name|setNumContainers
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|duration
operator|=
literal|30000
expr_stmt|;
name|deadline
operator|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
expr_stmt|;
name|rr
operator|.
name|setDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setArrival
argument_list|(
name|arrival
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setDeadline
argument_list|(
name|deadline
argument_list|)
expr_stmt|;
name|ReservationUpdateRequest
name|uRequest
init|=
name|ReservationUpdateRequest
operator|.
name|newInstance
argument_list|(
name|rDef
argument_list|,
name|reservationID
argument_list|)
decl_stmt|;
name|ReservationUpdateResponse
name|uResponse
init|=
name|client
operator|.
name|updateReservation
argument_list|(
name|uRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|uResponse
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Update reservation response: "
operator|+
name|uResponse
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListReservationsByReservationId ()
specifier|public
name|void
name|testListReservationsByReservationId
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
name|setupMiniYARNCluster
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|setupYarnClient
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
try|try
block|{
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|client
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
name|reservationID
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reservationID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourceAllocationRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListReservationsByTimeInterval ()
specifier|public
name|void
name|testListReservationsByTimeInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
name|setupMiniYARNCluster
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|setupYarnClient
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
try|try
block|{
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|client
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// List reservations, search by a point in time within the reservation
comment|// range.
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
name|arrival
operator|+
name|duration
operator|/
literal|2
argument_list|,
name|arrival
operator|+
name|duration
operator|/
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reservationID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// List reservations, search by time within reservation interval.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reservationID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the full resource allocations exist.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourceAllocationRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Verify that the full RDL is returned.
name|ReservationRequests
name|reservationRequests
init|=
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationDefinition
argument_list|()
operator|.
name|getReservationRequests
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reservationRequests
operator|.
name|getInterpreter
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R_ALL"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reservationRequests
operator|.
name|getReservationResources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDuration
argument_list|()
operator|==
name|duration
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListReservationsByInvalidTimeInterval ()
specifier|public
name|void
name|testListReservationsByInvalidTimeInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
name|setupMiniYARNCluster
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|setupYarnClient
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
try|try
block|{
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|client
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// List reservations, search by invalid end time == -1.
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|sRequest
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// List reservations, search by invalid end time< -1.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
operator|-
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|sRequest
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListReservationsByTimeIntervalContainingNoReservations ()
specifier|public
name|void
name|testListReservationsByTimeIntervalContainingNoReservations
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
name|setupMiniYARNCluster
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|setupYarnClient
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
try|try
block|{
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|client
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// List reservations, search by very large start time.
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|duration
operator|=
literal|30000
expr_stmt|;
name|deadline
operator|=
name|sRequest
operator|.
name|getReservationDefinition
argument_list|()
operator|.
name|getDeadline
argument_list|()
expr_stmt|;
comment|// List reservations, search by start time after the reservation
comment|// end time.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
name|deadline
operator|+
name|duration
argument_list|,
name|deadline
operator|+
literal|2
operator|*
name|duration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|// List reservations, search by end time before the reservation start
comment|// time.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|arrival
operator|-
name|duration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// List reservations, search by very small end time.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReservationDelete ()
specifier|public
name|void
name|testReservationDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniYARNCluster
name|cluster
init|=
name|setupMiniYARNCluster
argument_list|()
decl_stmt|;
name|YarnClient
name|client
init|=
name|setupYarnClient
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
try|try
block|{
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|client
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
comment|// Delete the reservation
name|ReservationDeleteRequest
name|dRequest
init|=
name|ReservationDeleteRequest
operator|.
name|newInstance
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
name|ReservationDeleteResponse
name|dResponse
init|=
name|client
operator|.
name|deleteReservation
argument_list|(
name|dRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dResponse
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete reservation response: "
operator|+
name|dResponse
argument_list|)
expr_stmt|;
comment|// List reservations, search by non-existent reservationID
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
name|reservationID
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
name|client
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// clean-up
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createSimpleReservationRequest ( ReservationId reservationId, int numContainers, long arrival, long deadline, long duration)
specifier|private
name|ReservationSubmissionRequest
name|createSimpleReservationRequest
parameter_list|(
name|ReservationId
name|reservationId
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
comment|// create a request with a single atomic ask
name|ReservationRequest
name|r
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|numContainers
argument_list|,
literal|1
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationRequests
name|reqs
init|=
name|ReservationRequests
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|r
argument_list|)
argument_list|,
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|)
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|ReservationDefinition
operator|.
name|newInstance
argument_list|(
name|arrival
argument_list|,
name|deadline
argument_list|,
name|reqs
argument_list|,
literal|"testYarnClient#reservation"
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|request
init|=
name|ReservationSubmissionRequest
operator|.
name|newInstance
argument_list|(
name|rDef
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
name|reservationId
argument_list|)
decl_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|,
name|expected
operator|=
name|ApplicationNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testShouldNotRetryForeverForNonNetworkExceptions ()
specifier|public
name|void
name|testShouldNotRetryForeverForNonNetworkExceptions
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ResourceManager
name|rm
init|=
literal|null
decl_stmt|;
name|YarnClient
name|yarnClient
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// start rm
name|rm
operator|=
operator|new
name|ResourceManager
argument_list|()
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|yarnClient
operator|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
expr_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create invalid application id
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1430126768L
argument_list|,
literal|10645
argument_list|)
decl_stmt|;
comment|// RM should throw ApplicationNotFoundException exception
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|yarnClient
operator|!=
literal|null
condition|)
block|{
name|yarnClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSignalContainer ()
specifier|public
name|void
name|testSignalContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|final
name|YarnClient
name|client
init|=
operator|new
name|MockYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SignalContainerCommand
name|command
init|=
name|SignalContainerCommand
operator|.
name|OUTPUT_THREAD_DUMP
decl_stmt|;
name|client
operator|.
name|signalToContainer
argument_list|(
name|containerId
argument_list|,
name|command
argument_list|)
expr_stmt|;
specifier|final
name|ArgumentCaptor
argument_list|<
name|SignalContainerRequest
argument_list|>
name|signalReqCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|SignalContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
operator|(
operator|(
name|MockYarnClient
operator|)
name|client
operator|)
operator|.
name|getRMClient
argument_list|()
argument_list|)
operator|.
name|signalToContainer
argument_list|(
name|signalReqCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|SignalContainerRequest
name|request
init|=
name|signalReqCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
argument_list|,
name|request
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|command
argument_list|,
name|request
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

