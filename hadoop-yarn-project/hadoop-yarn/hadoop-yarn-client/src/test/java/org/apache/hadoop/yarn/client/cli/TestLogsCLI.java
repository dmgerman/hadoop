begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogCLIHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLogsCLI
specifier|public
class|class
name|TestLogsCLI
block|{
DECL|field|sysOutStream
name|ByteArrayOutputStream
name|sysOutStream
decl_stmt|;
DECL|field|sysOut
specifier|private
name|PrintStream
name|sysOut
decl_stmt|;
DECL|field|sysErrStream
name|ByteArrayOutputStream
name|sysErrStream
decl_stmt|;
DECL|field|sysErr
specifier|private
name|PrintStream
name|sysErr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|sysOutStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysOutStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|sysErrStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysErr
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysErrStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testFailResultCodes ()
specifier|public
name|void
name|testFailResultCodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|LocalFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|LogCLIHelpers
name|cliHelper
init|=
operator|new
name|LogCLIHelpers
argument_list|()
decl_stmt|;
name|cliHelper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|dumper
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// verify dumping a non-existent application's logs returns a failure code
name|int
name|exitCode
init|=
name|dumper
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
literal|"application_0_0"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// verify dumping a non-existent container log is a failure code
name|exitCode
operator|=
name|cliHelper
operator|.
name|dumpAContainersLogs
argument_list|(
literal|"application_0_0"
argument_list|,
literal|"container_0_0"
argument_list|,
literal|"nonexistentnode:1234"
argument_list|,
literal|"nobody"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testInvalidApplicationId ()
specifier|public
name|void
name|testInvalidApplicationId
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
literal|"not_an_app_id"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid ApplicationId specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000L
argument_list|)
DECL|method|testInvalidAMContainerId ()
specifier|public
name|void
name|testInvalidAMContainerId
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
name|spy
argument_list|(
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JSONObject
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|JSONObject
argument_list|()
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|list
argument_list|)
operator|.
name|when
argument_list|(
name|cli
argument_list|)
operator|.
name|getAMContainerInfoForRMWebService
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
literal|"application_1465862913885_0027"
block|,
literal|"-am"
block|,
literal|"1000"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"exceeds the number of AM containers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testUnknownApplicationId ()
specifier|public
name|void
name|testUnknownApplicationId
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClientUnknownApp
argument_list|()
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
comment|// Error since no logs present for the app.
name|assertTrue
argument_list|(
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unable to get ApplicationState"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testHelpMessage ()
specifier|public
name|void
name|testHelpMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|dumper
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|dumper
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Retrieve logs for YARN applications."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"usage: yarn logs -applicationId<application ID> [OPTIONS]"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"general options are:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -am<AM Containers>             Prints the AM Container logs for this"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 application. Specify comma-separated"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 value to get logs for related AM"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 Container. For example, If we specify -am"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 1,2, we will get the logs for the first"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 AM Container as well as the second AM"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 Container. To get logs for all AM"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 Containers, use -am ALL. To get logs for"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 the latest AM Container, use -am -1. By"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 default, it will only print out syslog."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 Work with -logFiles to get other logs"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -appOwner<Application Owner>   AppOwner (assumed to be current user if"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 not specified)"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -containerId<Container ID>     ContainerId. By default, it will only"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 print syslog if the application is"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 running. Work with -logFiles to get other"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 logs. If specified, the applicationId can"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 be omitted"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -help                           Displays help for all commands."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -list_nodes                     Show the list of nodes that successfully"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 aggregated logs. This option can only be"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 used with finished applications."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -logFiles<Log File Name>       Specify comma-separated value to get"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 specified container log files. Use \"ALL\""
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 to fetch all the log files for the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 container. It also supports Java Regex."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -nodeAddress<Node Address>     NodeAddress in the format nodename:port"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -out<Local Directory>          Local directory for storing individual"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 container logs. The container logs will"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 be stored based on the node the container"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 ran on."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -show_application_log_info      Show the containerIds which belong to the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 specific Application. You can combine"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 this with --nodeAddress to get"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 containerIds for all the containers on"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 the specific NodeManager."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -show_container_log_info        Show the container log metadata,"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 including log-file names, the size of the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 log files. You can combine this with"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 --containerId to get log metadata for the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 specific container, or with --nodeAddress"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 to get log metadata for all the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 containers on the specific NodeManager."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -size<size>                    Prints the log file's first 'n' bytes or"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 the last 'n' bytes. Use negative values"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 as bytes to read from the end and"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 positive values as bytes to read from the"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 beginning."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testFetchApplictionLogs ()
specifier|public
name|void
name|testFetchApplictionLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteLogRootDir
init|=
literal|"target/logs/"
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogRootDir
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId0
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId3
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
comment|// create local logs
name|String
name|rootLogDir
init|=
literal|"target/LocalLogs"
decl_stmt|;
name|Path
name|rootLogDirPath
init|=
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|rootLogDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootLogDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootLogDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appLogsDir
init|=
operator|new
name|Path
argument_list|(
name|rootLogDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|appLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|appLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
literal|"syslog"
argument_list|)
expr_stmt|;
comment|// create container logs in localLogDir
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId1
argument_list|,
name|fs
argument_list|,
name|logTypes
argument_list|)
expr_stmt|;
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId2
argument_list|,
name|fs
argument_list|,
name|logTypes
argument_list|)
expr_stmt|;
comment|// create two logs for container3 in localLogDir
name|logTypes
operator|.
name|add
argument_list|(
literal|"stdout"
argument_list|)
expr_stmt|;
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId3
argument_list|,
name|fs
argument_list|,
name|logTypes
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/logs/application_0_0001"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// upload container logs into remote directory
comment|// the first two logs is empty. When we try to read first two logs,
comment|// we will meet EOF exception, but it will not impact other logs.
comment|// Other logs should be read successfully.
name|uploadEmptyContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId0
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|uploadEmptyContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId1
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId1
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId2
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId3
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ContainerReport
name|getContainerReport
parameter_list|(
name|String
name|containerIdStr
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ContainerReport
name|mockReport
init|=
name|mock
argument_list|(
name|ContainerReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|nodeId
argument_list|)
operator|.
name|when
argument_list|(
name|mockReport
argument_list|)
operator|.
name|getAssignedNode
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"http://localhost:2345"
argument_list|)
operator|.
name|when
argument_list|(
name|mockReport
argument_list|)
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
return|return
name|mockReport
return|;
block|}
block|}
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000001 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000002 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in stdout!"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|".*"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000001 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000002 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in stdout!"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|fullSize
init|=
name|sysOutStream
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
decl_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"std*"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000001 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000002 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in stdout!"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"123"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find any log file matching the pattern: [123] "
operator|+
literal|"for the application: "
operator|+
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// specify the bytes which is larger than the actual file size,
comment|// we would get the full logs
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|".*"
block|,
literal|"-size"
block|,
literal|"10000"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|==
name|fullSize
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// uploaded two logs for container1. The first log is empty.
comment|// The second one is not empty.
comment|// We can still successfully read logs for container1.
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-nodeAddress"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId1
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000001 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Log Upload Time"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Logs for container "
operator|+
name|containerId1
operator|.
name|toString
argument_list|()
operator|+
literal|" are not present in this log-file."
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"123"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find any log file matching the pattern: [123] "
operator|+
literal|"for the container: "
operator|+
name|containerId3
operator|+
literal|" within the application: "
operator|+
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"stdout"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|int
name|fullContextSize
init|=
name|sysOutStream
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
decl_stmt|;
name|String
name|fullContext
init|=
name|sysOutStream
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|String
name|logMessage
init|=
literal|"Hello container_0_0001_01_000003 in stdout!"
decl_stmt|;
name|int
name|fileContentSize
init|=
name|logMessage
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|int
name|tailContentSize
init|=
literal|"\nEnd of LogType:syslog\n\n"
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
comment|// specify how many bytes we should get from logs
comment|// specify a position number, it would get the first n bytes from
comment|// container log
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"stdout"
block|,
literal|"-size"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|logMessage
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|sysOutStream
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|(
name|fullContextSize
operator|-
name|fileContentSize
operator|-
name|tailContentSize
operator|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// specify a negative number, it would get the last n bytes from
comment|// container log
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"stdout"
block|,
literal|"-size"
block|,
literal|"-5"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|String
argument_list|(
name|logMessage
operator|.
name|getBytes
argument_list|()
argument_list|,
name|logMessage
operator|.
name|getBytes
argument_list|()
operator|.
name|length
operator|-
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|sysOutStream
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|(
name|fullContextSize
operator|-
name|fileContentSize
operator|-
name|tailContentSize
operator|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|long
name|negative
init|=
operator|(
name|fullContextSize
operator|+
literal|1000
operator|)
operator|*
operator|(
operator|-
literal|1
operator|)
decl_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"stdout"
block|,
literal|"-size"
block|,
name|Long
operator|.
name|toString
argument_list|(
name|negative
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fullContext
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Uploaded the empty log for container0.
comment|// We should see the message showing the log for container0
comment|// are not present.
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-nodeAddress"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId0
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Logs for container "
operator|+
name|containerId0
operator|.
name|toString
argument_list|()
operator|+
literal|" are not present in this log-file."
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// uploaded two logs for container3. The first log is named as syslog.
comment|// The second one is named as stdout.
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-nodeAddress"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in stdout!"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// set -logFiles option as stdout
comment|// should only print log with the name as stdout
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-nodeAddress"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|,
literal|"-logFiles"
block|,
literal|"stdout"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in stdout!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|YarnClient
name|mockYarnClientWithException
init|=
name|createMockYarnClientWithException
argument_list|()
decl_stmt|;
name|cli
operator|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClientWithException
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in stdout!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|containerId3
operator|+
literal|" on "
operator|+
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// The same should also work without the applicationId
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-containerId"
block|,
name|containerId3
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000003 in stdout!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|containerId3
operator|+
literal|" on "
operator|+
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-containerId"
block|,
literal|"invalid_container"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid ContainerId specified"
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testFetchRunningApplicationLogs ()
specifier|public
name|void
name|testFetchRunningApplicationLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Create a mock ApplicationAttempt Report
name|ApplicationAttemptReport
name|mockAttemptReport
init|=
name|mock
argument_list|(
name|ApplicationAttemptReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|when
argument_list|(
name|mockAttemptReport
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|attemptReports
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|mockAttemptReport
argument_list|)
decl_stmt|;
comment|// Create two mock containerReports
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerReport
name|mockContainerReport1
init|=
name|mock
argument_list|(
name|ContainerReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|containerId1
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainerReport1
argument_list|)
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|nodeId
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainerReport1
argument_list|)
operator|.
name|getAssignedNode
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"http://localhost:2345"
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainerReport1
argument_list|)
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerReport
name|mockContainerReport2
init|=
name|mock
argument_list|(
name|ContainerReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|containerId2
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainerReport2
argument_list|)
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|nodeId
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainerReport2
argument_list|)
operator|.
name|getAssignedNode
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|"http://localhost:2345"
argument_list|)
operator|.
name|when
argument_list|(
name|mockContainerReport2
argument_list|)
operator|.
name|getNodeHttpAddress
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|containerReports
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|mockContainerReport1
argument_list|,
name|mockContainerReport2
argument_list|)
decl_stmt|;
comment|// Mock the YarnClient, and it would report the previous created
comment|// mockAttemptReport and previous two created mockContainerReports
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|attemptReports
argument_list|,
name|containerReports
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
name|spy
argument_list|(
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|0
argument_list|)
operator|.
name|when
argument_list|(
name|cli
argument_list|)
operator|.
name|printContainerLogsFromRunningApplication
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerLogsRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|LogCLIHelpers
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// we have two container reports, so make sure we have called
comment|// printContainerLogsFromRunningApplication twice
name|verify
argument_list|(
name|cli
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|printContainerLogsFromRunningApplication
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerLogsRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|LogCLIHelpers
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testFetchApplictionLogsAsAnotherUser ()
specifier|public
name|void
name|testFetchApplictionLogsAsAnotherUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteLogRootDir
init|=
literal|"target/logs/"
decl_stmt|;
name|String
name|rootLogDir
init|=
literal|"target/LocalLogs"
decl_stmt|;
name|String
name|testUser
init|=
literal|"test"
decl_stmt|;
name|UserGroupInformation
name|testUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|testUser
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogRootDir
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|rootLogDirPath
init|=
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|rootLogDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootLogDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootLogDirPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// create local app dir for app
specifier|final
name|Path
name|appLogsDir
init|=
operator|new
name|Path
argument_list|(
name|rootLogDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|appLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|appLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
literal|"syslog"
argument_list|)
expr_stmt|;
comment|// create container logs in localLogDir for app
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId
argument_list|,
name|fs
argument_list|,
name|logTypes
argument_list|)
expr_stmt|;
comment|// create the remote app dir for app
comment|// but for a different user testUser"
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
operator|+
name|testUser
operator|+
literal|"/logs/"
operator|+
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// upload container logs for app into remote dir
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|testUgi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|testUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// Verify that we can get the application logs by specifying
comment|// a correct appOwner
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-appOwner"
block|,
name|testUser
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|containerId
operator|+
literal|" in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Verify that we can not get the application logs
comment|// if an invalid user is specified
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-appOwner"
block|,
literal|"invalid"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find the logs "
operator|+
literal|"for the application: "
operator|+
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Verify that we do not specify appOwner, and can not
comment|// get appReport from RM, we still can figure out the appOwner
comment|// and can get app logs successfully.
name|YarnClient
name|mockYarnClient2
init|=
name|createMockYarnClientUnknownApp
argument_list|()
decl_stmt|;
name|cli
operator|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient2
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|containerId
operator|+
literal|" in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Verify that we could get the err message "Can not find the appOwner"
comment|// if we do not specify the appOwner, can not get appReport, and
comment|// the app does not exist in remote dir.
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId2
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find the appOwner"
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Verify that we could not get appOwner
comment|// because we don't have file-system permissions
name|ApplicationId
name|appTest
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|String
name|priorityUser
init|=
literal|"priority"
decl_stmt|;
name|Path
name|pathWithoutPerm
init|=
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
operator|+
name|priorityUser
operator|+
literal|"/logs/"
operator|+
name|appTest
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|pathWithoutPerm
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|pathWithoutPerm
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// The user will not have read permission for this directory.
comment|// To mimic the scenario that the user can not get file status
name|FsPermission
name|permission
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|01300
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|pathWithoutPerm
argument_list|,
name|permission
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appTest
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find the logs for the application: "
operator|+
name|appTest
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testLogsCLIWithInvalidArgs ()
specifier|public
name|void
name|testLogsCLIWithInvalidArgs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|localDir
init|=
literal|"target/SaveLogs"
decl_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|// Specify an invalid applicationId
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
literal|"123"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid ApplicationId specified"
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Specify an invalid containerId
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-containerId"
block|,
literal|"123"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid ContainerId specified"
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Specify show_container_log_info and show_application_log_info
comment|// at the same time
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-show_container_log_info"
block|,
literal|"-show_application_log_info"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid options. "
operator|+
literal|"Can only accept one of show_application_log_info/"
operator|+
literal|"show_container_log_info."
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Specify a file name to the option -out
try|try
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|localPath
argument_list|)
expr_stmt|;
name|Path
name|tmpFilePath
init|=
operator|new
name|Path
argument_list|(
name|localPath
argument_list|,
literal|"tmpFile"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|tmpFilePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|createNewFile
argument_list|(
name|tmpFilePath
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-out"
block|,
name|tmpFilePath
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid value for -out option. Please provide a directory."
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|localPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testSaveContainerLogsLocally ()
specifier|public
name|void
name|testSaveContainerLogsLocally
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteLogRootDir
init|=
literal|"target/logs/"
decl_stmt|;
name|String
name|rootLogDir
init|=
literal|"target/LocalLogs"
decl_stmt|;
name|String
name|localDir
init|=
literal|"target/SaveLogs"
decl_stmt|;
name|Path
name|localPath
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|)
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogRootDir
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|containerId1
argument_list|)
expr_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|containerId2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId2
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"test"
argument_list|,
literal|4567
argument_list|)
decl_stmt|;
name|nodeIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|nodeIds
operator|.
name|add
argument_list|(
name|nodeId2
argument_list|)
expr_stmt|;
try|try
block|{
name|createContainerLogs
argument_list|(
name|configuration
argument_list|,
name|remoteLogRootDir
argument_list|,
name|rootLogDir
argument_list|,
name|fs
argument_list|,
name|appId
argument_list|,
name|containerIds
argument_list|,
name|nodeIds
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-out"
block|,
name|localPath
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// make sure we created a dir named as node id
name|FileStatus
index|[]
name|nodeDir
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|nodeDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeDir
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeDir
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodeDir
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|container1Dir
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|nodeDir
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|container1Dir
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container1Dir
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|container1
init|=
name|readContainerContent
argument_list|(
name|container1Dir
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|container1
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|containerId1
operator|+
literal|" in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|container2Dir
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|nodeDir
index|[
literal|1
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|container2Dir
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container2Dir
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|container2
init|=
name|readContainerContent
argument_list|(
name|container2Dir
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|container2
operator|.
name|contains
argument_list|(
literal|"Hello "
operator|+
name|containerId2
operator|+
literal|" in syslog!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|localPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readContainerContent (Path containerPath, FileSystem fs)
specifier|private
name|String
name|readContainerContent
parameter_list|(
name|Path
name|containerPath
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|containerPath
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuffer
name|inputLine
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|containerPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tmp
decl_stmt|;
while|while
condition|(
operator|(
name|tmp
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|inputLine
operator|.
name|append
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|inputLine
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testPrintContainerLogMetadata ()
specifier|public
name|void
name|testPrintContainerLogMetadata
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteLogRootDir
init|=
literal|"target/logs/"
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogRootDir
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|String
name|rootLogDir
init|=
literal|"target/LocalLogs"
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|containerId1
argument_list|)
expr_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|containerId2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|nodeIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|nodeIds
operator|.
name|add
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|createContainerLogs
argument_list|(
name|configuration
argument_list|,
name|remoteLogRootDir
argument_list|,
name|rootLogDir
argument_list|,
name|fs
argument_list|,
name|appId
argument_list|,
name|containerIds
argument_list|,
name|nodeIds
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-show_container_log_info"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container: container_0_0001_01_000001 on localhost_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container: container_0_0001_01_000002 on localhost_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"syslog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"43"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-show_container_log_info"
block|,
literal|"-containerId"
block|,
literal|"container_0_0001_01_000001"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container: container_0_0001_01_000001 on localhost_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container: container_0_0001_01_000002 on localhost_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"syslog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"43"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-show_container_log_info"
block|,
literal|"-nodeAddress"
block|,
literal|"localhost"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container: container_0_0001_01_000001 on localhost_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Container: container_0_0001_01_000002 on localhost_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"syslog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"43"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-show_container_log_info"
block|,
literal|"-nodeAddress"
block|,
literal|"localhost"
block|,
literal|"-containerId"
block|,
literal|"container_1234"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid ContainerId specified"
argument_list|)
argument_list|)
expr_stmt|;
name|sysErrStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-show_application_log_info"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Application State: Completed."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"container_0_0001_01_000001 on localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"container_0_0001_01_000002 on localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-show_application_log_info"
block|,
literal|"-nodeAddress"
block|,
literal|"localhost"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Application State: Completed."
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"container_0_0001_01_000001 on localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"container_0_0001_01_000002 on localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testListNodeInfo ()
specifier|public
name|void
name|testListNodeInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteLogRootDir
init|=
literal|"target/logs/"
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogRootDir
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|containerId1
argument_list|)
expr_stmt|;
name|containerIds
operator|.
name|add
argument_list|(
name|containerId2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId2
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost2"
argument_list|,
literal|2345
argument_list|)
decl_stmt|;
name|nodeIds
operator|.
name|add
argument_list|(
name|nodeId1
argument_list|)
expr_stmt|;
name|nodeIds
operator|.
name|add
argument_list|(
name|nodeId2
argument_list|)
expr_stmt|;
name|String
name|rootLogDir
init|=
literal|"target/LocalLogs"
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|createContainerLogs
argument_list|(
name|configuration
argument_list|,
name|remoteLogRootDir
argument_list|,
name|rootLogDir
argument_list|,
name|fs
argument_list|,
name|appId
argument_list|,
name|containerIds
argument_list|,
name|nodeIds
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-list_nodes"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testFetchApplictionLogsHar ()
specifier|public
name|void
name|testFetchApplictionLogsHar
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteLogRootDir
init|=
literal|"target/logs/"
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogRootDir
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|URL
name|harUrl
init|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"application_1440536969523_0001.har"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|harUrl
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/logs/application_1440536969523_0001"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|,
literal|"application_1440536969523_0001.har"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
operator|new
name|Path
argument_list|(
name|harUrl
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
name|harPath
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|harPath
argument_list|)
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
literal|"application_1440536969523_0001"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|String
name|out
init|=
name|sysOutStream
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"container_1440536969523_0001_01_000001 on host1_1111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Hello stderr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Hello stdout"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Hello syslog"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"container_1440536969523_0001_01_000002 on host2_2222"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Goodbye stderr"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Goodbye stdout"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|out
operator|.
name|contains
argument_list|(
literal|"Goodbye syslog"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerLogs (Configuration configuration, String remoteLogRootDir, String rootLogDir, FileSystem fs, ApplicationId appId, List<ContainerId> containerIds, List<NodeId> nodeIds)
specifier|private
name|void
name|createContainerLogs
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|String
name|remoteLogRootDir
parameter_list|,
name|String
name|rootLogDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containerIds
parameter_list|,
name|List
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
parameter_list|)
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
comment|// create local logs
name|Path
name|rootLogDirPath
init|=
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|rootLogDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootLogDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootLogDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appLogsDir
init|=
operator|new
name|Path
argument_list|(
name|rootLogDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|appLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|appLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
literal|"syslog"
argument_list|)
expr_stmt|;
comment|// create container logs in localLogDir
for|for
control|(
name|ContainerId
name|containerId
range|:
name|containerIds
control|)
block|{
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId
argument_list|,
name|fs
argument_list|,
name|logTypes
argument_list|)
expr_stmt|;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/logs/application_0_0001"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containerIds
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|containerIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContainerLogInLocalDir (Path appLogsDir, ContainerId containerId, FileSystem fs, List<String> logTypes)
specifier|private
specifier|static
name|void
name|createContainerLogInLocalDir
parameter_list|(
name|Path
name|appLogsDir
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|logTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|containerLogsDir
init|=
operator|new
name|Path
argument_list|(
name|appLogsDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|containerLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|containerLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|containerLogsDir
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logType
range|:
name|logTypes
control|)
block|{
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|containerLogsDir
operator|.
name|toString
argument_list|()
argument_list|,
name|logType
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"Hello "
operator|+
name|containerId
operator|+
literal|" in "
operator|+
name|logType
operator|+
literal|"!"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|uploadContainerLogIntoRemoteDir (UserGroupInformation ugi, Configuration configuration, List<String> rootLogDirs, NodeId nodeId, ContainerId containerId, Path appDir, FileSystem fs)
specifier|private
specifier|static
name|void
name|uploadContainerLogIntoRemoteDir
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Path
name|appDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|AggregatedLogFormat
operator|.
name|LogWriter
name|writer
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogWriter
argument_list|(
name|configuration
argument_list|,
name|path
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeApplicationOwner
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appAcls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeApplicationACLs
argument_list|(
name|appAcls
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|AggregatedLogFormat
operator|.
name|LogKey
argument_list|(
name|containerId
argument_list|)
argument_list|,
operator|new
name|AggregatedLogFormat
operator|.
name|LogValue
argument_list|(
name|rootLogDirs
argument_list|,
name|containerId
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|uploadEmptyContainerLogIntoRemoteDir (UserGroupInformation ugi, Configuration configuration, List<String> rootLogDirs, NodeId nodeId, ContainerId containerId, Path appDir, FileSystem fs)
specifier|private
specifier|static
name|void
name|uploadEmptyContainerLogIntoRemoteDir
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Path
name|appDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|AggregatedLogFormat
operator|.
name|LogWriter
name|writer
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogWriter
argument_list|(
name|configuration
argument_list|,
name|path
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeApplicationOwner
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appAcls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeApplicationACLs
argument_list|(
name|appAcls
argument_list|)
expr_stmt|;
name|DataOutputStream
name|out
init|=
name|writer
operator|.
name|getWriter
argument_list|()
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
operator|new
name|AggregatedLogFormat
operator|.
name|LogKey
argument_list|(
name|containerId
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|writer
operator|.
name|getWriter
argument_list|()
operator|.
name|prepareAppendValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|new
name|AggregatedLogFormat
operator|.
name|LogValue
argument_list|(
name|rootLogDirs
argument_list|,
name|containerId
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|out
argument_list|,
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createMockYarnClient (YarnApplicationState appState, String user)
specifier|private
name|YarnClient
name|createMockYarnClient
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|createMockYarnClient
argument_list|(
name|appState
argument_list|,
name|user
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createMockYarnClient (YarnApplicationState appState, String user, boolean mockContainerReport, List<ApplicationAttemptReport> mockAttempts, List<ContainerReport> mockContainers)
specifier|private
name|YarnClient
name|createMockYarnClient
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|mockContainerReport
parameter_list|,
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|mockAttempts
parameter_list|,
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|mockContainers
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|YarnClient
name|mockClient
init|=
name|mock
argument_list|(
name|YarnClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationReport
name|mockAppReport
init|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|user
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppReport
argument_list|)
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|appState
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppReport
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockAppReport
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mockContainerReport
condition|)
block|{
name|doReturn
argument_list|(
name|mockAttempts
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getApplicationAttempts
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|mockContainers
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getContainers
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mockClient
return|;
block|}
DECL|method|createMockYarnClientWithException ()
specifier|private
name|YarnClient
name|createMockYarnClientWithException
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|YarnClient
name|mockClient
init|=
name|mock
argument_list|(
name|YarnClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getContainerReport
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mockClient
return|;
block|}
DECL|method|createMockYarnClientUnknownApp ()
specifier|private
name|YarnClient
name|createMockYarnClientUnknownApp
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|YarnClient
name|mockClient
init|=
name|mock
argument_list|(
name|YarnClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnException
argument_list|(
literal|"Unknown AppId"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mockClient
return|;
block|}
DECL|class|LogsCLIForTest
specifier|private
specifier|static
class|class
name|LogsCLIForTest
extends|extends
name|LogsCLI
block|{
DECL|field|yarnClient
specifier|private
name|YarnClient
name|yarnClient
decl_stmt|;
DECL|method|LogsCLIForTest (YarnClient yarnClient)
specifier|public
name|LogsCLIForTest
parameter_list|(
name|YarnClient
name|yarnClient
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|yarnClient
operator|=
name|yarnClient
expr_stmt|;
block|}
DECL|method|createYarnClient ()
specifier|protected
name|YarnClient
name|createYarnClient
parameter_list|()
block|{
return|return
name|yarnClient
return|;
block|}
block|}
block|}
end_class

end_unit

