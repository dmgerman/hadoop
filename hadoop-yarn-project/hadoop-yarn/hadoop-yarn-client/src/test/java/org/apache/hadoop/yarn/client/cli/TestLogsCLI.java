begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerIdPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogCLIHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLogsCLI
specifier|public
class|class
name|TestLogsCLI
block|{
DECL|field|sysOutStream
name|ByteArrayOutputStream
name|sysOutStream
decl_stmt|;
DECL|field|sysOut
specifier|private
name|PrintStream
name|sysOut
decl_stmt|;
DECL|field|sysErrStream
name|ByteArrayOutputStream
name|sysErrStream
decl_stmt|;
DECL|field|sysErr
specifier|private
name|PrintStream
name|sysErr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|sysOutStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysOutStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|sysErrStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysErr
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysErrStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testFailResultCodes ()
specifier|public
name|void
name|testFailResultCodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|LocalFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|LogCLIHelpers
name|cliHelper
init|=
operator|new
name|LogCLIHelpers
argument_list|()
decl_stmt|;
name|cliHelper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
name|LogsCLI
name|dumper
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// verify dumping a non-existent application's logs returns a failure code
name|int
name|exitCode
init|=
name|dumper
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
literal|"application_0_0"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// verify dumping a non-existent container log is a failure code
name|exitCode
operator|=
name|cliHelper
operator|.
name|dumpAContainersLogs
argument_list|(
literal|"application_0_0"
argument_list|,
literal|"container_0_0"
argument_list|,
literal|"nonexistentnode:1234"
argument_list|,
literal|"nobody"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testInvalidApplicationId ()
specifier|public
name|void
name|testInvalidApplicationId
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
literal|"not_an_app_id"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid ApplicationId specified"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testUnknownApplicationId ()
specifier|public
name|void
name|testUnknownApplicationId
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClientUnknownApp
argument_list|()
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
comment|// Error since no logs present for the app.
name|assertTrue
argument_list|(
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Unable to get ApplicationState"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000l
argument_list|)
DECL|method|testHelpMessage ()
specifier|public
name|void
name|testHelpMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
name|LogsCLI
name|dumper
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|dumper
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Retrieve logs for completed YARN applications."
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"usage: yarn logs -applicationId<application ID> [OPTIONS]"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"general options are:"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -appOwner<Application Owner>   AppOwner (assumed to be current user if"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 not specified)"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -containerId<Container ID>     ContainerId (must be specified if node"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 address is specified)"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|" -nodeAddress<Node Address>     NodeAddress in the format nodename:port"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 (must be specified if container id is"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"                                 specified)"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|appReportStr
init|=
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appReportStr
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testFetchApplictionLogs ()
specifier|public
name|void
name|testFetchApplictionLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|remoteLogRootDir
init|=
literal|"target/logs/"
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteLogRootDir
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationIdPBImpl
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptIdPBImpl
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerIdPBImpl
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerIdPBImpl
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
comment|// create local logs
name|String
name|rootLogDir
init|=
literal|"target/LocalLogs"
decl_stmt|;
name|Path
name|rootLogDirPath
init|=
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|rootLogDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootLogDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootLogDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appLogsDir
init|=
operator|new
name|Path
argument_list|(
name|rootLogDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|appLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|appLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
comment|// create container logs in localLogDir
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId1
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId2
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
operator|+
name|ugi
operator|.
name|getShortUserName
argument_list|()
operator|+
literal|"/logs/application_0_0001"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
comment|// upload container logs into remote directory
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId1
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|configuration
argument_list|,
name|rootLogDirs
argument_list|,
name|nodeId
argument_list|,
name|containerId2
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|YarnClient
name|mockYarnClient
init|=
name|createMockYarnClient
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
name|LogsCLI
name|cli
init|=
operator|new
name|LogsCLIForTest
argument_list|(
name|mockYarnClient
argument_list|)
decl_stmt|;
name|cli
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000001!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000002!"
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-applicationId"
block|,
name|appId
operator|.
name|toString
argument_list|()
block|,
literal|"-nodeAddress"
block|,
name|nodeId
operator|.
name|toString
argument_list|()
block|,
literal|"-containerId"
block|,
name|containerId1
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|exitCode
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Hello container_0_0001_01_000001!"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"LogUploadTime"
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogRootDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerLogInLocalDir (Path appLogsDir, ContainerId containerId, FileSystem fs)
specifier|private
specifier|static
name|void
name|createContainerLogInLocalDir
parameter_list|(
name|Path
name|appLogsDir
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|containerLogsDir
init|=
operator|new
name|Path
argument_list|(
name|appLogsDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|containerLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|containerLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|containerLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|containerLogsDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"sysout"
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"Hello "
operator|+
name|containerId
operator|+
literal|"!"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|uploadContainerLogIntoRemoteDir (UserGroupInformation ugi, Configuration configuration, List<String> rootLogDirs, NodeId nodeId, ContainerId containerId, Path appDir, FileSystem fs)
specifier|private
specifier|static
name|void
name|uploadContainerLogIntoRemoteDir
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Path
name|appDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|AggregatedLogFormat
operator|.
name|LogWriter
name|writer
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogWriter
argument_list|(
name|configuration
argument_list|,
name|path
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeApplicationOwner
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appAcls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeApplicationACLs
argument_list|(
name|appAcls
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|AggregatedLogFormat
operator|.
name|LogKey
argument_list|(
name|containerId
argument_list|)
argument_list|,
operator|new
name|AggregatedLogFormat
operator|.
name|LogValue
argument_list|(
name|rootLogDirs
argument_list|,
name|containerId
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createMockYarnClient (YarnApplicationState appState)
specifier|private
name|YarnClient
name|createMockYarnClient
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|YarnClient
name|mockClient
init|=
name|mock
argument_list|(
name|YarnClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationReport
name|mockAppReport
init|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|appState
argument_list|)
operator|.
name|when
argument_list|(
name|mockAppReport
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|mockAppReport
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mockClient
return|;
block|}
DECL|method|createMockYarnClientUnknownApp ()
specifier|private
name|YarnClient
name|createMockYarnClientUnknownApp
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|YarnClient
name|mockClient
init|=
name|mock
argument_list|(
name|YarnClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnException
argument_list|(
literal|"Unknown AppId"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockClient
argument_list|)
operator|.
name|getApplicationReport
argument_list|(
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mockClient
return|;
block|}
DECL|class|LogsCLIForTest
specifier|private
specifier|static
class|class
name|LogsCLIForTest
extends|extends
name|LogsCLI
block|{
DECL|field|yarnClient
specifier|private
name|YarnClient
name|yarnClient
decl_stmt|;
DECL|method|LogsCLIForTest (YarnClient yarnClient)
specifier|public
name|LogsCLIForTest
parameter_list|(
name|YarnClient
name|yarnClient
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|yarnClient
operator|=
name|yarnClient
expr_stmt|;
block|}
DECL|method|createYarnClient ()
specifier|protected
name|YarnClient
name|createYarnClient
parameter_list|()
block|{
return|return
name|yarnClient
return|;
block|}
block|}
block|}
end_class

end_unit

