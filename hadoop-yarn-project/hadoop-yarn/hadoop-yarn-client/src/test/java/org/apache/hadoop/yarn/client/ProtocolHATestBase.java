begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|CollectorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|HATestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ClientBaseWithFixes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|MiniYARNCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClientRMService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Test Base for ResourceManager's Protocol on HA.  *  * Limited scope:  * For all the test cases, we only test whether the method will be re-entered  * when failover happens. Does not cover the entire logic of test.  *  * Test strategy:  * Create a separate failover thread with a trigger flag,  * override all APIs that are added trigger flag.  * When the APIs are called, we will set trigger flag as true to kick off  * the failover. So We can make sure the failover happens during process  * of the method. If this API is marked as @Idempotent or @AtMostOnce,  * the test cases will pass; otherwise, they will throw the exception.  *  */
end_comment

begin_class
DECL|class|ProtocolHATestBase
specifier|public
specifier|abstract
class|class
name|ProtocolHATestBase
extends|extends
name|ClientBaseWithFixes
block|{
DECL|field|req
specifier|protected
specifier|static
specifier|final
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
DECL|field|RM1_NODE_ID
specifier|protected
specifier|static
specifier|final
name|String
name|RM1_NODE_ID
init|=
literal|"rm1"
decl_stmt|;
DECL|field|RM1_PORT_BASE
specifier|protected
specifier|static
specifier|final
name|int
name|RM1_PORT_BASE
init|=
literal|10000
decl_stmt|;
DECL|field|RM2_NODE_ID
specifier|protected
specifier|static
specifier|final
name|String
name|RM2_NODE_ID
init|=
literal|"rm2"
decl_stmt|;
DECL|field|RM2_PORT_BASE
specifier|protected
specifier|static
specifier|final
name|int
name|RM2_PORT_BASE
init|=
literal|20000
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|protected
name|MiniYARNClusterForHATesting
name|cluster
decl_stmt|;
DECL|field|failoverThread
specifier|protected
name|Thread
name|failoverThread
init|=
literal|null
decl_stmt|;
DECL|field|keepRunning
specifier|private
specifier|volatile
name|boolean
name|keepRunning
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|failoverThread
operator|=
literal|null
expr_stmt|;
name|keepRunning
operator|=
literal|true
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_MAX_ATTEMPTS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|setRpcAddressForRM
argument_list|(
name|RM1_NODE_ID
argument_list|,
name|RM1_PORT_BASE
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HATestUtil
operator|.
name|setRpcAddressForRM
argument_list|(
name|RM2_NODE_ID
argument_list|,
name|RM2_PORT_BASE
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_SLEEPTIME_BASE_MS
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_FIXED_PORTS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_MINICLUSTER_USE_RPC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|keepRunning
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|failoverThread
operator|!=
literal|null
condition|)
block|{
name|failoverThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|failoverThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error joining with failover thread"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|getAdminService (int index)
specifier|protected
name|AdminService
name|getAdminService
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|cluster
operator|.
name|getResourceManager
argument_list|(
name|index
argument_list|)
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
return|;
block|}
DECL|method|explicitFailover ()
specifier|protected
name|void
name|explicitFailover
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|activeRMIndex
init|=
name|cluster
operator|.
name|getActiveRMIndex
argument_list|()
decl_stmt|;
name|int
name|newActiveRMIndex
init|=
operator|(
name|activeRMIndex
operator|+
literal|1
operator|)
operator|%
literal|2
decl_stmt|;
name|getAdminService
argument_list|(
name|activeRMIndex
argument_list|)
operator|.
name|transitionToStandby
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|getAdminService
argument_list|(
name|newActiveRMIndex
argument_list|)
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failover failed"
argument_list|,
name|newActiveRMIndex
argument_list|,
name|cluster
operator|.
name|getActiveRMIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createAndStartYarnClient (Configuration conf)
specifier|protected
name|YarnClient
name|createAndStartYarnClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Configuration
name|configuration
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|YarnClient
name|client
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|client
return|;
block|}
DECL|method|verifyConnections ()
specifier|protected
name|void
name|verifyConnections
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|YarnException
block|{
name|assertTrue
argument_list|(
literal|"NMs failed to connect to the RM"
argument_list|,
name|cluster
operator|.
name|waitForNodeManagersToConnect
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|verifyClientConnection
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyClientConnection ()
specifier|protected
name|void
name|verifyClientConnection
parameter_list|()
block|{
name|int
name|numRetries
init|=
literal|3
decl_stmt|;
while|while
condition|(
name|numRetries
operator|--
operator|>
literal|0
condition|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|YarnClient
name|client
init|=
name|createAndStartYarnClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|client
operator|.
name|getApplications
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Client couldn't connect to the Active RM"
argument_list|)
expr_stmt|;
block|}
DECL|method|createAndStartFailoverThread ()
specifier|protected
name|Thread
name|createAndStartFailoverThread
parameter_list|()
block|{
name|Thread
name|failoverThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|keepRunning
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|keepRunning
condition|)
block|{
if|if
condition|(
name|cluster
operator|.
name|getStartFailoverFlag
argument_list|()
condition|)
block|{
try|try
block|{
name|explicitFailover
argument_list|()
expr_stmt|;
name|keepRunning
operator|=
literal|false
expr_stmt|;
name|cluster
operator|.
name|resetFailoverTriggeredFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Do Nothing
block|}
finally|finally
block|{
name|keepRunning
operator|=
literal|false
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// DO NOTHING
block|}
block|}
block|}
block|}
decl_stmt|;
name|failoverThread
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|failoverThread
return|;
block|}
DECL|method|startHACluster (int numOfNMs, boolean overrideClientRMService, boolean overrideRTS, boolean overrideApplicationMasterService)
specifier|protected
name|void
name|startHACluster
parameter_list|(
name|int
name|numOfNMs
parameter_list|,
name|boolean
name|overrideClientRMService
parameter_list|,
name|boolean
name|overrideRTS
parameter_list|,
name|boolean
name|overrideApplicationMasterService
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|=
operator|new
name|MiniYARNClusterForHATesting
argument_list|(
name|TestRMFailover
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|2
argument_list|,
name|numOfNMs
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|overrideClientRMService
argument_list|,
name|overrideRTS
argument_list|,
name|overrideApplicationMasterService
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|resetStartFailoverFlag
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM never turned active"
argument_list|,
operator|-
literal|1
operator|==
name|cluster
operator|.
name|getActiveRMIndex
argument_list|()
argument_list|)
expr_stmt|;
name|verifyConnections
argument_list|()
expr_stmt|;
comment|// Do the failover
name|explicitFailover
argument_list|()
expr_stmt|;
name|verifyConnections
argument_list|()
expr_stmt|;
name|failoverThread
operator|=
name|createAndStartFailoverThread
argument_list|()
expr_stmt|;
block|}
DECL|method|getActiveRM ()
specifier|protected
name|ResourceManager
name|getActiveRM
parameter_list|()
block|{
return|return
name|cluster
operator|.
name|getResourceManager
argument_list|(
name|cluster
operator|.
name|getActiveRMIndex
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MiniYARNClusterForHATesting
specifier|public
class|class
name|MiniYARNClusterForHATesting
extends|extends
name|MiniYARNCluster
block|{
DECL|field|overrideClientRMService
specifier|private
name|boolean
name|overrideClientRMService
decl_stmt|;
DECL|field|overrideRTS
specifier|private
name|boolean
name|overrideRTS
decl_stmt|;
DECL|field|overrideApplicationMasterService
specifier|private
name|boolean
name|overrideApplicationMasterService
decl_stmt|;
DECL|field|startFailover
specifier|private
specifier|final
name|AtomicBoolean
name|startFailover
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|failoverTriggered
specifier|private
specifier|final
name|AtomicBoolean
name|failoverTriggered
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|method|MiniYARNClusterForHATesting (String testName, int numResourceManagers, int numNodeManagers, int numLocalDirs, int numLogDirs, boolean enableAHS, boolean overrideClientRMService, boolean overrideRTS, boolean overrideApplicationMasterService)
specifier|public
name|MiniYARNClusterForHATesting
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|numResourceManagers
parameter_list|,
name|int
name|numNodeManagers
parameter_list|,
name|int
name|numLocalDirs
parameter_list|,
name|int
name|numLogDirs
parameter_list|,
name|boolean
name|enableAHS
parameter_list|,
name|boolean
name|overrideClientRMService
parameter_list|,
name|boolean
name|overrideRTS
parameter_list|,
name|boolean
name|overrideApplicationMasterService
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|,
name|numResourceManagers
argument_list|,
name|numNodeManagers
argument_list|,
name|numLocalDirs
argument_list|,
name|numLogDirs
argument_list|,
name|enableAHS
argument_list|)
expr_stmt|;
name|this
operator|.
name|overrideClientRMService
operator|=
name|overrideClientRMService
expr_stmt|;
name|this
operator|.
name|overrideRTS
operator|=
name|overrideRTS
expr_stmt|;
name|this
operator|.
name|overrideApplicationMasterService
operator|=
name|overrideApplicationMasterService
expr_stmt|;
block|}
DECL|method|getStartFailoverFlag ()
specifier|public
name|boolean
name|getStartFailoverFlag
parameter_list|()
block|{
return|return
name|startFailover
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|resetStartFailoverFlag (boolean flag)
specifier|public
name|void
name|resetStartFailoverFlag
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|startFailover
operator|.
name|set
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
DECL|method|resetFailoverTriggeredFlag (boolean flag)
specifier|public
name|void
name|resetFailoverTriggeredFlag
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|failoverTriggered
operator|.
name|set
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
DECL|method|waittingForFailOver ()
specifier|private
name|boolean
name|waittingForFailOver
parameter_list|()
block|{
name|int
name|maximumWaittingTime
init|=
literal|50
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|failoverTriggered
operator|.
name|get
argument_list|()
operator|&&
name|count
operator|<=
name|maximumWaittingTime
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// DO NOTHING
block|}
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>=
name|maximumWaittingTime
operator|&&
name|failoverThread
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// DO NOTHING
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|createResourceManager ()
specifier|protected
name|ResourceManager
name|createResourceManager
parameter_list|()
block|{
return|return
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Don't try to login using keytab in the testcases.
block|}
annotation|@
name|Override
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
if|if
condition|(
name|overrideClientRMService
condition|)
block|{
return|return
operator|new
name|CustomedClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createClientRMService
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ResourceTrackerService
name|createResourceTrackerService
parameter_list|()
block|{
if|if
condition|(
name|overrideRTS
condition|)
block|{
return|return
operator|new
name|CustomedResourceTrackerService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|nodesListManager
argument_list|,
name|this
operator|.
name|nmLivelinessMonitor
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createResourceTrackerService
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ApplicationMasterService
name|createApplicationMasterService
parameter_list|()
block|{
if|if
condition|(
name|overrideApplicationMasterService
condition|)
block|{
return|return
operator|new
name|CustomedApplicationMasterService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|scheduler
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|createApplicationMasterService
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|class|CustomedClientRMService
specifier|private
class|class
name|CustomedClientRMService
extends|extends
name|ClientRMService
block|{
DECL|method|CustomedClientRMService (RMContext rmContext, YarnScheduler scheduler, RMAppManager rmAppManager, ApplicationACLsManager applicationACLsManager, QueueACLsManager queueACLsManager, RMDelegationTokenSecretManager rmDTSecretManager)
specifier|public
name|CustomedClientRMService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|RMAppManager
name|rmAppManager
parameter_list|,
name|ApplicationACLsManager
name|applicationACLsManager
parameter_list|,
name|QueueACLsManager
name|queueACLsManager
parameter_list|,
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|rmAppManager
argument_list|,
name|applicationACLsManager
argument_list|,
name|queueACLsManager
argument_list|,
name|rmDTSecretManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNewApplication ( GetNewApplicationRequest request)
specifier|public
name|GetNewApplicationResponse
name|getNewApplication
parameter_list|(
name|GetNewApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// create the GetNewApplicationResponse with fake applicationId
name|GetNewApplicationResponse
name|response
init|=
name|GetNewApplicationResponse
operator|.
name|newInstance
argument_list|(
name|createFakeAppId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationReport ( GetApplicationReportRequest request)
specifier|public
name|GetApplicationReportResponse
name|getApplicationReport
parameter_list|(
name|GetApplicationReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a fake application report
name|ApplicationReport
name|report
init|=
name|createFakeAppReport
argument_list|()
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|GetApplicationReportResponse
operator|.
name|newInstance
argument_list|(
name|report
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterMetrics ( GetClusterMetricsRequest request)
specifier|public
name|GetClusterMetricsResponse
name|getClusterMetrics
parameter_list|(
name|GetClusterMetricsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// create GetClusterMetricsResponse with fake YarnClusterMetrics
name|GetClusterMetricsResponse
name|response
init|=
name|GetClusterMetricsResponse
operator|.
name|newInstance
argument_list|(
name|createFakeYarnClusterMetrics
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ( GetApplicationsRequest request)
specifier|public
name|GetApplicationsResponse
name|getApplications
parameter_list|(
name|GetApplicationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// create GetApplicationsResponse with fake applicationList
name|GetApplicationsResponse
name|response
init|=
name|GetApplicationsResponse
operator|.
name|newInstance
argument_list|(
name|createFakeAppReports
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodes ( GetClusterNodesRequest request)
specifier|public
name|GetClusterNodesResponse
name|getClusterNodes
parameter_list|(
name|GetClusterNodesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// create GetClusterNodesResponse with fake ClusterNodeLists
name|GetClusterNodesResponse
name|response
init|=
name|GetClusterNodesResponse
operator|.
name|newInstance
argument_list|(
name|createFakeNodeReports
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (GetQueueInfoRequest request)
specifier|public
name|GetQueueInfoResponse
name|getQueueInfo
parameter_list|(
name|GetQueueInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// return fake QueueInfo
return|return
name|GetQueueInfoResponse
operator|.
name|newInstance
argument_list|(
name|createFakeQueueInfo
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueUserAcls ( GetQueueUserAclsInfoRequest request)
specifier|public
name|GetQueueUserAclsInfoResponse
name|getQueueUserAcls
parameter_list|(
name|GetQueueUserAclsInfoRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// return fake queueUserAcls
return|return
name|GetQueueUserAclsInfoResponse
operator|.
name|newInstance
argument_list|(
name|createFakeQueueUserACLInfoList
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptReport ( GetApplicationAttemptReportRequest request)
specifier|public
name|GetApplicationAttemptReportResponse
name|getApplicationAttemptReport
parameter_list|(
name|GetApplicationAttemptReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// return fake ApplicationAttemptReport
return|return
name|GetApplicationAttemptReportResponse
operator|.
name|newInstance
argument_list|(
name|createFakeApplicationAttemptReport
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempts ( GetApplicationAttemptsRequest request)
specifier|public
name|GetApplicationAttemptsResponse
name|getApplicationAttempts
parameter_list|(
name|GetApplicationAttemptsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// return fake ApplicationAttemptReports
return|return
name|GetApplicationAttemptsResponse
operator|.
name|newInstance
argument_list|(
name|createFakeApplicationAttemptReports
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerReport ( GetContainerReportRequest request)
specifier|public
name|GetContainerReportResponse
name|getContainerReport
parameter_list|(
name|GetContainerReportRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// return fake containerReport
return|return
name|GetContainerReportResponse
operator|.
name|newInstance
argument_list|(
name|createFakeContainerReport
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getContainers (GetContainersRequest request)
specifier|public
name|GetContainersResponse
name|getContainers
parameter_list|(
name|GetContainersRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
comment|// return fake ContainerReports
return|return
name|GetContainersResponse
operator|.
name|newInstance
argument_list|(
name|createFakeContainerReports
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submitApplication ( SubmitApplicationRequest request)
specifier|public
name|SubmitApplicationResponse
name|submitApplication
parameter_list|(
name|SubmitApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|submitApplication
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|forceKillApplication ( KillApplicationRequest request)
specifier|public
name|KillApplicationResponse
name|forceKillApplication
parameter_list|(
name|KillApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|moveApplicationAcrossQueues ( MoveApplicationAcrossQueuesRequest request)
specifier|public
name|MoveApplicationAcrossQueuesResponse
name|moveApplicationAcrossQueues
parameter_list|(
name|MoveApplicationAcrossQueuesRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Records
operator|.
name|newRecord
argument_list|(
name|MoveApplicationAcrossQueuesResponse
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDelegationToken ( GetDelegationTokenRequest request)
specifier|public
name|GetDelegationTokenResponse
name|getDelegationToken
parameter_list|(
name|GetDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|GetDelegationTokenResponse
operator|.
name|newInstance
argument_list|(
name|createFakeToken
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|renewDelegationToken ( RenewDelegationTokenRequest request)
specifier|public
name|RenewDelegationTokenResponse
name|renewDelegationToken
parameter_list|(
name|RenewDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|RenewDelegationTokenResponse
operator|.
name|newInstance
argument_list|(
name|createNextExpirationTime
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cancelDelegationToken ( CancelDelegationTokenRequest request)
specifier|public
name|CancelDelegationTokenResponse
name|cancelDelegationToken
parameter_list|(
name|CancelDelegationTokenRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|CancelDelegationTokenResponse
operator|.
name|newInstance
argument_list|()
return|;
block|}
block|}
DECL|method|createFakeAppReport ()
specifier|public
name|ApplicationReport
name|createFakeAppReport
parameter_list|()
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1000l
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create a fake application report
name|ApplicationReport
name|report
init|=
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|attemptId
argument_list|,
literal|"fakeUser"
argument_list|,
literal|"fakeQueue"
argument_list|,
literal|"fakeApplicationName"
argument_list|,
literal|"localhost"
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
literal|"fake an application report"
argument_list|,
literal|""
argument_list|,
literal|1000l
argument_list|,
literal|1200l
argument_list|,
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|50f
argument_list|,
literal|"fakeApplicationType"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|report
return|;
block|}
DECL|method|createFakeAppReports ()
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|createFakeAppReports
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|()
decl_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|createFakeAppReport
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
DECL|method|createFakeAppId ()
specifier|public
name|ApplicationId
name|createFakeAppId
parameter_list|()
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1000l
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|createFakeApplicationAttemptId ()
specifier|public
name|ApplicationAttemptId
name|createFakeApplicationAttemptId
parameter_list|()
block|{
return|return
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|createFakeAppId
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|createFakeContainerId ()
specifier|public
name|ContainerId
name|createFakeContainerId
parameter_list|()
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|createFakeApplicationAttemptId
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|createFakeYarnClusterMetrics ()
specifier|public
name|YarnClusterMetrics
name|createFakeYarnClusterMetrics
parameter_list|()
block|{
return|return
name|YarnClusterMetrics
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|createFakeNodeReports ()
specifier|public
name|List
argument_list|<
name|NodeReport
argument_list|>
name|createFakeNodeReports
parameter_list|()
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|NodeReport
name|report
init|=
name|NodeReport
operator|.
name|newInstance
argument_list|(
name|nodeId
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
literal|"localhost"
argument_list|,
literal|"rack1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
literal|1000l
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
decl_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|report
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
DECL|method|createFakeQueueInfo ()
specifier|public
name|QueueInfo
name|createFakeQueueInfo
parameter_list|()
block|{
return|return
name|QueueInfo
operator|.
name|newInstance
argument_list|(
literal|"root"
argument_list|,
literal|100f
argument_list|,
literal|100f
argument_list|,
literal|50f
argument_list|,
literal|null
argument_list|,
name|createFakeAppReports
argument_list|()
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|createFakeQueueUserACLInfoList ()
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|createFakeQueueUserACLInfoList
parameter_list|()
block|{
name|List
argument_list|<
name|QueueACL
argument_list|>
name|queueACL
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueACL
argument_list|>
argument_list|()
decl_stmt|;
name|queueACL
operator|.
name|add
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
expr_stmt|;
name|QueueUserACLInfo
name|info
init|=
name|QueueUserACLInfo
operator|.
name|newInstance
argument_list|(
literal|"root"
argument_list|,
name|queueACL
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueUserACLInfo
argument_list|>
argument_list|()
decl_stmt|;
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|infos
return|;
block|}
DECL|method|createFakeApplicationAttemptReport ()
specifier|public
name|ApplicationAttemptReport
name|createFakeApplicationAttemptReport
parameter_list|()
block|{
return|return
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|createFakeApplicationAttemptId
argument_list|()
argument_list|,
literal|"localhost"
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|createFakeContainerId
argument_list|()
argument_list|,
literal|1000l
argument_list|,
literal|1200l
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
DECL|method|createFakeApplicationAttemptReports ()
name|createFakeApplicationAttemptReports
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptReport
argument_list|>
argument_list|()
decl_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|createFakeApplicationAttemptReport
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
DECL|method|createFakeContainerReport ()
specifier|public
name|ContainerReport
name|createFakeContainerReport
parameter_list|()
block|{
return|return
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|createFakeContainerId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1000l
argument_list|,
literal|1200l
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"http://"
operator|+
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|createFakeContainerReports ()
specifier|public
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|createFakeContainerReports
parameter_list|()
block|{
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|reports
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
decl_stmt|;
name|reports
operator|.
name|add
argument_list|(
name|createFakeContainerReport
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reports
return|;
block|}
DECL|method|createFakeToken ()
specifier|public
name|Token
name|createFakeToken
parameter_list|()
block|{
name|String
name|identifier
init|=
literal|"fake Token"
decl_stmt|;
name|String
name|password
init|=
literal|"fake token passwd"
decl_stmt|;
name|Token
name|token
init|=
name|Token
operator|.
name|newInstance
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|" "
argument_list|,
name|password
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
return|return
name|token
return|;
block|}
DECL|method|createNextExpirationTime ()
specifier|public
name|long
name|createNextExpirationTime
parameter_list|()
block|{
return|return
literal|"fake Token"
operator|.
name|getBytes
argument_list|()
operator|.
name|length
return|;
block|}
DECL|class|CustomedResourceTrackerService
specifier|private
class|class
name|CustomedResourceTrackerService
extends|extends
name|ResourceTrackerService
block|{
DECL|method|CustomedResourceTrackerService (RMContext rmContext, NodesListManager nodesListManager, NMLivelinessMonitor nmLivelinessMonitor, RMContainerTokenSecretManager containerTokenSecretManager, NMTokenSecretManagerInRM nmTokenSecretManager)
specifier|public
name|CustomedResourceTrackerService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|NodesListManager
name|nodesListManager
parameter_list|,
name|NMLivelinessMonitor
name|nmLivelinessMonitor
parameter_list|,
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
parameter_list|,
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|rmContext
argument_list|,
name|nodesListManager
argument_list|,
name|nmLivelinessMonitor
argument_list|,
name|containerTokenSecretManager
argument_list|,
name|nmTokenSecretManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerNodeManager ( RegisterNodeManagerRequest request)
specifier|public
name|RegisterNodeManagerResponse
name|registerNodeManager
parameter_list|(
name|RegisterNodeManagerRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|registerNodeManager
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nodeHeartbeat (NodeHeartbeatRequest request)
specifier|public
name|NodeHeartbeatResponse
name|nodeHeartbeat
parameter_list|(
name|NodeHeartbeatRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|nodeHeartbeat
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
DECL|class|CustomedApplicationMasterService
specifier|private
class|class
name|CustomedApplicationMasterService
extends|extends
name|ApplicationMasterService
block|{
DECL|method|CustomedApplicationMasterService (RMContext rmContext, YarnScheduler scheduler)
specifier|public
name|CustomedApplicationMasterService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|)
block|{
name|super
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocate (AllocateRequest request)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createFakeAllocateResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( RegisterApplicationMasterRequest request)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createFakeRegisterApplicationMasterResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|finishApplicationMaster ( FinishApplicationMasterRequest request)
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|resetStartFailoverFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// make sure failover has been triggered
name|Assert
operator|.
name|assertTrue
argument_list|(
name|waittingForFailOver
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createFakeFinishApplicationMasterResponse
argument_list|()
return|;
block|}
block|}
specifier|public
name|RegisterApplicationMasterResponse
DECL|method|createFakeRegisterApplicationMasterResponse ()
name|createFakeRegisterApplicationMasterResponse
parameter_list|()
block|{
name|Resource
name|minCapability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|maxCapability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|ByteBuffer
name|key
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"fake_key"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|RegisterApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
name|minCapability
argument_list|,
name|maxCapability
argument_list|,
name|acls
argument_list|,
name|key
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
argument_list|,
literal|"root"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|FinishApplicationMasterResponse
DECL|method|createFakeFinishApplicationMasterResponse ()
name|createFakeFinishApplicationMasterResponse
parameter_list|()
block|{
return|return
name|FinishApplicationMasterResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
return|;
block|}
DECL|method|createFakeAllocateResponse ()
specifier|public
name|AllocateResponse
name|createFakeAllocateResponse
parameter_list|()
block|{
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|AllocateResponse
operator|.
name|newInstance
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
argument_list|,
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
literal|"host:port"
argument_list|,
name|Token
operator|.
name|newInstance
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
literal|"TIMELINE"
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
literal|"rm"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|AllocateResponse
operator|.
name|newInstance
argument_list|(
operator|-
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|NodeReport
argument_list|>
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

