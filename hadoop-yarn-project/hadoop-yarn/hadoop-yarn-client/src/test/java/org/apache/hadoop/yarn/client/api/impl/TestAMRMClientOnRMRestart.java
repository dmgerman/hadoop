begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAMRMClientOnRMRestart
specifier|public
class|class
name|TestAMRMClientOnRMRestart
block|{
DECL|field|conf
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|rolling_interval_sec
specifier|static
specifier|final
name|int
name|rolling_interval_sec
init|=
literal|13
decl_stmt|;
DECL|field|am_expire_ms
specifier|static
specifier|final
name|long
name|am_expire_ms
init|=
literal|4000
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Test does major 6 steps verification.
comment|// Step-1 : AMRMClient send allocate request for 2 container requests
comment|// Step-2 : 2 containers are allocated by RM.
comment|// Step-3 : AM Send 1 containerRequest(cRequest3) and 1 releaseRequests to
comment|// RM
comment|// Step-4 : On RM restart, AM(does not know RM is restarted) sends additional
comment|// containerRequest(cRequest4) and blacklisted nodes.
comment|// Intern RM send resync command
comment|// Step-5 : Allocater after resync command& new containerRequest(cRequest5)
comment|// Step-6 : RM allocates containers i.e cRequest3,cRequest4 and cRequest5
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientResendsRequestsOnRMRestart ()
specifier|public
name|void
name|testAMRMClientResendsRequestsOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|setLoginUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Phase-1 Start 1st RM
name|MyResourceManager
name|rm1
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|token
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
comment|// Step-1 : AMRMClient send allocate request for 2 ContainerRequest
comment|// cRequest1 = h1 and cRequest2 = h1,h2
comment|// blacklisted nodes = h2
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
operator|new
name|MyAMRMClientImpl
argument_list|(
name|rm1
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"Host"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ContainerRequest
name|cRequest1
init|=
name|createReq
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|cRequest1
argument_list|)
expr_stmt|;
name|ContainerRequest
name|cRequest2
init|=
name|createReq
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|cRequest2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemoval
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|blacklistAdditions
operator|.
name|add
argument_list|(
literal|"h2"
argument_list|)
expr_stmt|;
name|blacklistRemoval
operator|.
name|add
argument_list|(
literal|"h10"
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
name|blacklistRemoval
argument_list|)
expr_stmt|;
name|blacklistAdditions
operator|.
name|remove
argument_list|(
literal|"h2"
argument_list|)
expr_stmt|;
comment|// remove from local list
name|AllocateResponse
name|allocateResponse
init|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Why 4 ask, why not 3 ask even h2 is blacklisted?
comment|// On blacklisting host,applicationmaster has to remove ask request from
comment|// remoterequest table.Here,test does not remove explicitely
name|assertAsksAndReleases
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
comment|// Step-2 : NM heart beat is sent.
comment|// On 2nd AM allocate request, RM allocates 2 containers to AM
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocateResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.2f
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// 2 containers are allocated i.e for cRequest1 and cRequest2.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|2
argument_list|,
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
comment|// removed allocated container requests
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|cRequest1
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|removeContainerRequest
argument_list|(
name|cRequest2
argument_list|)
expr_stmt|;
name|allocateResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.2f
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
comment|// Step-3 : Send 1 containerRequest and 1 releaseRequests to RM
name|ContainerRequest
name|cRequest3
init|=
name|createReq
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|}
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|cRequest3
argument_list|)
expr_stmt|;
name|int
name|pendingRelease
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Container
argument_list|>
name|it
init|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pendingRelease
operator|++
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
comment|// remove one container
block|}
name|allocateResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.3f
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|3
argument_list|,
name|pendingRelease
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm1
argument_list|)
expr_stmt|;
name|int
name|completedContainer
init|=
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|pendingRelease
operator|-=
name|completedContainer
expr_stmt|;
comment|// Phase-2 start 2nd RM is up
name|MyResourceManager
name|rm2
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyAMRMClientImpl
operator|)
name|amClient
operator|)
operator|.
name|updateRMProxy
argument_list|(
name|rm2
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|(
name|DrainDispatcher
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
comment|// NM should be rebooted on heartbeat, even first heartbeat for nm2
name|NodeHeartbeatResponse
name|hbResponse
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// new NM to represent NM re-register
name|nm1
operator|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|blacklistAdditions
operator|.
name|add
argument_list|(
literal|"h3"
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|blacklistAdditions
operator|.
name|remove
argument_list|(
literal|"h3"
argument_list|)
expr_stmt|;
name|it
operator|=
name|allocatedContainers
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|amClient
operator|.
name|releaseAssignedContainer
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|pendingRelease
operator|++
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|ContainerRequest
name|cRequest4
init|=
name|createReq
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|}
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|cRequest4
argument_list|)
expr_stmt|;
comment|// Step-4 : On RM restart, AM(does not know RM is restarted) sends
comment|// additional
comment|// containerRequest and blacklisted nodes.
comment|// Intern RM send resync command,AMRMClient resend allocate request
name|allocateResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.3f
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|completedContainer
operator|=
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|pendingRelease
operator|-=
name|completedContainer
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|4
argument_list|,
name|pendingRelease
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|ContainerRequest
name|cRequest5
init|=
name|createReq
argument_list|(
literal|1
argument_list|,
literal|1024
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"h1"
block|,
literal|"h2"
block|,
literal|"h3"
block|}
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|addContainerRequest
argument_list|(
name|cRequest5
argument_list|)
expr_stmt|;
comment|// Step-5 : Allocater after resync command
name|allocateResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"No of assignments must be 0"
argument_list|,
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertAsksAndReleases
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|assertBlacklistAdditionsAndRemovals
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|int
name|noAssignedContainer
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|5
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|allocateResponse
operator|=
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|noAssignedContainer
operator|+=
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|noAssignedContainer
operator|==
literal|3
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// Step-6 : RM allocates containers i.e cRequest3,cRequest4 and cRequest5
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of container should be 3"
argument_list|,
literal|3
argument_list|,
name|noAssignedContainer
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test verify for
comment|// 1. AM try to unregister without registering
comment|// 2. AM register to RM, and try to unregister immediately after RM restart
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMRMClientForUnregisterAMOnRMRestart ()
specifier|public
name|void
name|testAMRMClientForUnregisterAMOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Phase-1 Start 1st RM
name|MyResourceManager
name|rm1
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|token
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
operator|new
name|MyAMRMClientImpl
argument_list|(
name|rm1
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"h1"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// Phase-2 start 2nd RM is up
name|MyResourceManager
name|rm2
init|=
operator|new
name|MyResourceManager
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyAMRMClientImpl
operator|)
name|amClient
operator|)
operator|.
name|updateRMProxy
argument_list|(
name|rm2
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|(
name|DrainDispatcher
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
comment|// NM should be rebooted on heartbeat, even first heartbeat for nm2
name|NodeHeartbeatResponse
name|hbResponse
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// new NM to represent NM re-register
name|nm1
operator|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|containerReport
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"recover container"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|containerReport
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test verify for AM issued with rolled-over AMRMToken
comment|// is still able to communicate with restarted RM.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAMRMClientOnAMRMTokenRollOverOnRMRestart ()
specifier|public
name|void
name|testAMRMClientOnAMRMTokenRollOverOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|,
name|rolling_interval_sec
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
name|am_expire_ms
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start first RM
name|MyResourceManager2
name|rm1
init|=
operator|new
name|MyResourceManager2
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|(
name|DrainDispatcher
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
name|Long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Submit the application
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Node heartbeat
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|AMRMTokenSecretManager
name|amrmTokenSecretManagerForRM1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|token
init|=
name|amrmTokenSecretManagerForRM1
operator|.
name|createAndGetAMRMToken
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|token
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|AMRMClient
argument_list|<
name|ContainerRequest
argument_list|>
name|amClient
init|=
operator|new
name|MyAMRMClientImpl
argument_list|(
name|rm1
argument_list|)
decl_stmt|;
name|amClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|amClient
operator|.
name|registerApplicationMaster
argument_list|(
literal|"h1"
argument_list|,
literal|10000
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// Wait for enough time and make sure the roll_over happens
comment|// At mean time, the old AMRMToken should continue to work
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|<
name|rolling_interval_sec
operator|*
literal|1000
condition|)
block|{
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// DO NOTHING
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|amrmTokenSecretManagerForRM1
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|token
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
comment|// active the nextMasterKey, and replace the currentMasterKey
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|newToken
init|=
name|amrmTokenSecretManagerForRM1
operator|.
name|createAndGetAMRMToken
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|waitCount
operator|++
operator|<=
literal|50
condition|)
block|{
if|if
condition|(
name|amrmTokenSecretManagerForRM1
operator|.
name|getCurrnetMasterKeyData
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|!=
name|token
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
condition|)
block|{
break|break;
block|}
try|try
block|{
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|amrmTokenSecretManagerForRM1
operator|.
name|getNextMasterKeyData
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|amrmTokenSecretManagerForRM1
operator|.
name|getCurrnetMasterKeyData
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|newToken
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
comment|// start 2nd RM
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
literal|"0.0.0.0:9030"
argument_list|)
expr_stmt|;
specifier|final
name|MyResourceManager2
name|rm2
init|=
operator|new
name|MyResourceManager2
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyAMRMClientImpl
operator|)
name|amClient
operator|)
operator|.
name|updateRMProxy
argument_list|(
name|rm2
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|(
name|DrainDispatcher
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
name|AMRMTokenSecretManager
name|amrmTokenSecretManagerForRM2
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|amrmTokenSecretManagerForRM2
operator|.
name|getCurrnetMasterKeyData
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
operator|==
name|newToken
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|amrmTokenSecretManagerForRM2
operator|.
name|getNextMasterKeyData
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
name|testUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"testUser"
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|)
expr_stmt|;
name|testUser
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|testUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ApplicationMasterProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationMasterProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ApplicationMasterProtocol
operator|)
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
operator|.
name|getProxy
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The old Token should not work"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|instanceof
name|InvalidToken
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid AMRMToken from "
operator|+
name|token
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// make sure the recovered AMRMToken works for new RM
name|amClient
operator|.
name|allocate
argument_list|(
literal|0.1f
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|unregisterApplicationMaster
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|amClient
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|MyFifoScheduler
specifier|private
specifier|static
class|class
name|MyFifoScheduler
extends|extends
name|FifoScheduler
block|{
DECL|method|MyFifoScheduler (RMContext rmContext)
specifier|public
name|MyFifoScheduler
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
DECL|field|lastAsk
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|lastAsk
init|=
literal|null
decl_stmt|;
DECL|field|lastRelease
name|List
argument_list|<
name|ContainerId
argument_list|>
name|lastRelease
init|=
literal|null
decl_stmt|;
DECL|field|lastBlacklistAdditions
name|List
argument_list|<
name|String
argument_list|>
name|lastBlacklistAdditions
decl_stmt|;
DECL|field|lastBlacklistRemovals
name|List
argument_list|<
name|String
argument_list|>
name|lastBlacklistRemovals
decl_stmt|;
comment|// override this to copy the objects otherwise FifoScheduler updates the
comment|// numContainers in same objects as kept by RMContainerAllocator
annotation|@
name|Override
DECL|method|allocate ( ApplicationAttemptId applicationAttemptId, List<ResourceRequest> ask, List<ContainerId> release, List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
specifier|synchronized
name|Allocation
name|allocate
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askCopy
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|req
range|:
name|ask
control|)
block|{
name|ResourceRequest
name|reqCopy
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|req
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|req
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
decl_stmt|;
name|askCopy
operator|.
name|add
argument_list|(
name|reqCopy
argument_list|)
expr_stmt|;
block|}
name|lastAsk
operator|=
name|ask
expr_stmt|;
name|lastRelease
operator|=
name|release
expr_stmt|;
name|lastBlacklistAdditions
operator|=
name|blacklistAdditions
expr_stmt|;
name|lastBlacklistRemovals
operator|=
name|blacklistRemovals
expr_stmt|;
return|return
name|super
operator|.
name|allocate
argument_list|(
name|applicationAttemptId
argument_list|,
name|askCopy
argument_list|,
name|release
argument_list|,
name|blacklistAdditions
argument_list|,
name|blacklistRemovals
argument_list|)
return|;
block|}
block|}
DECL|class|MyResourceManager
specifier|private
specifier|static
class|class
name|MyResourceManager
extends|extends
name|MockRM
block|{
DECL|field|fakeClusterTimeStamp
specifier|private
specifier|static
name|long
name|fakeClusterTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|method|MyResourceManager (Configuration conf, RMStateStore store)
specifier|public
name|MyResourceManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|public
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
comment|// Ensure that the application attempt IDs for all the tests are the same
comment|// The application attempt IDs will be used as the login user names
name|MyResourceManager
operator|.
name|setClusterTimeStamp
argument_list|(
name|fakeClusterTimeStamp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createDispatcher ()
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|createSchedulerEventDispatcher ()
specifier|protected
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|createSchedulerEventDispatcher
parameter_list|()
block|{
comment|// Dispatch inline for test sanity
return|return
operator|new
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createScheduler ()
specifier|protected
name|ResourceScheduler
name|createScheduler
parameter_list|()
block|{
return|return
operator|new
name|MyFifoScheduler
argument_list|(
name|this
operator|.
name|getRMContext
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getMyFifoScheduler ()
name|MyFifoScheduler
name|getMyFifoScheduler
parameter_list|()
block|{
return|return
operator|(
name|MyFifoScheduler
operator|)
name|scheduler
return|;
block|}
block|}
DECL|class|MyResourceManager2
specifier|private
specifier|static
class|class
name|MyResourceManager2
extends|extends
name|MyResourceManager
block|{
DECL|method|MyResourceManager2 (Configuration conf, RMStateStore store)
specifier|public
name|MyResourceManager2
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createApplicationMasterService ()
specifier|protected
name|ApplicationMasterService
name|createApplicationMasterService
parameter_list|()
block|{
return|return
operator|new
name|ApplicationMasterService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|scheduler
argument_list|)
return|;
block|}
block|}
DECL|class|MyAMRMClientImpl
specifier|private
specifier|static
class|class
name|MyAMRMClientImpl
extends|extends
name|AMRMClientImpl
argument_list|<
name|ContainerRequest
argument_list|>
block|{
DECL|field|rm
specifier|private
name|MyResourceManager
name|rm
decl_stmt|;
DECL|method|MyAMRMClientImpl (MyResourceManager rm)
specifier|public
name|MyAMRMClientImpl
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|)
block|{
name|this
operator|.
name|rm
operator|=
name|rm
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|rmClient
operator|=
name|this
operator|.
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|rmClient
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|updateRMProxy (MyResourceManager rm)
specifier|public
name|void
name|updateRMProxy
parameter_list|(
name|MyResourceManager
name|rm
parameter_list|)
block|{
name|rmClient
operator|=
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertBlacklistAdditionsAndRemovals ( int expectedAdditions, int expectedRemovals, MyResourceManager rm)
specifier|private
specifier|static
name|void
name|assertBlacklistAdditionsAndRemovals
parameter_list|(
name|int
name|expectedAdditions
parameter_list|,
name|int
name|expectedRemovals
parameter_list|,
name|MyResourceManager
name|rm
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAdditions
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastBlacklistAdditions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRemovals
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastBlacklistRemovals
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAsksAndReleases (int expectedAsk, int expectedRelease, MyResourceManager rm)
specifier|private
specifier|static
name|void
name|assertAsksAndReleases
parameter_list|(
name|int
name|expectedAsk
parameter_list|,
name|int
name|expectedRelease
parameter_list|,
name|MyResourceManager
name|rm
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAsk
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastAsk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedRelease
argument_list|,
name|rm
operator|.
name|getMyFifoScheduler
argument_list|()
operator|.
name|lastRelease
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createReq (int priority, int memory, String[] hosts)
specifier|private
name|ContainerRequest
name|createReq
parameter_list|(
name|int
name|priority
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|)
block|{
name|Resource
name|capability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|priorityOfContainer
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
decl_stmt|;
return|return
operator|new
name|ContainerRequest
argument_list|(
name|capability
argument_list|,
name|hosts
argument_list|,
operator|new
name|String
index|[]
block|{
name|NetworkTopology
operator|.
name|DEFAULT_RACK
block|}
argument_list|,
name|priorityOfContainer
argument_list|)
return|;
block|}
block|}
end_class

end_unit

