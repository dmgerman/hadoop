begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|QueueConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedConfUpdateInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Class for testing {@link SchedConfCLI}.  */
end_comment

begin_class
DECL|class|TestSchedConfCLI
specifier|public
class|class
name|TestSchedConfCLI
block|{
DECL|field|sysOutStream
specifier|private
name|ByteArrayOutputStream
name|sysOutStream
decl_stmt|;
DECL|field|sysOut
specifier|private
name|PrintStream
name|sysOut
decl_stmt|;
DECL|field|sysErrStream
specifier|private
name|ByteArrayOutputStream
name|sysErrStream
decl_stmt|;
DECL|field|sysErr
specifier|private
name|PrintStream
name|sysErr
decl_stmt|;
DECL|field|cli
specifier|private
name|SchedConfCLI
name|cli
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|sysOutStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysOutStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|sysErrStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysErr
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysErrStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|cli
operator|=
operator|new
name|SchedConfCLI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testInvalidConf ()
specifier|public
name|void
name|testInvalidConf
parameter_list|()
throws|throws
name|Exception
block|{
comment|// conf pair with no key should be invalid
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"root.a,=confVal"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-update"
block|,
literal|"root.a,=confVal"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"root.a,confKey=confVal=conf"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-update"
block|,
literal|"root.a,confKey=confVal=c"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddQueues ()
specifier|public
name|void
name|testAddQueues
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|addQueues
argument_list|(
literal|"root.a,a1=aVal1,a2=aVal2,"
operator|+
literal|"a3="
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|addInfo
init|=
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.a"
argument_list|,
name|addInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|addInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal1"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal2"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"a3"
argument_list|)
argument_list|)
expr_stmt|;
name|schedUpdateInfo
operator|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
expr_stmt|;
name|cli
operator|.
name|addQueues
argument_list|(
literal|"root.b,b1=bVal1;root.c,c1=cVal1"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|bAddInfo
init|=
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.b"
argument_list|,
name|bAddInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bParams
init|=
name|bAddInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bVal1"
argument_list|,
name|bParams
operator|.
name|get
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|cAddInfo
init|=
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.c"
argument_list|,
name|cAddInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cParams
init|=
name|cAddInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cVal1"
argument_list|,
name|cParams
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testRemoveQueues ()
specifier|public
name|void
name|testRemoveQueues
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|removeQueues
argument_list|(
literal|"root.a,root.b,root.c.c1"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|removeInfo
init|=
name|schedUpdateInfo
operator|.
name|getRemoveQueueInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|removeInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.a"
argument_list|,
name|removeInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.b"
argument_list|,
name|removeInfo
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.c.c1"
argument_list|,
name|removeInfo
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testUpdateQueues ()
specifier|public
name|void
name|testUpdateQueues
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|updateQueues
argument_list|(
literal|"root.a,a1=aVal1,a2=aVal2,"
operator|+
literal|"a3="
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|updateInfo
init|=
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.a"
argument_list|,
name|updateInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|updateInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal1"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal2"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"a3"
argument_list|)
argument_list|)
expr_stmt|;
name|schedUpdateInfo
operator|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
expr_stmt|;
name|cli
operator|.
name|updateQueues
argument_list|(
literal|"root.b,b1=bVal1;root.c,c1=cVal1"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|bUpdateInfo
init|=
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.b"
argument_list|,
name|bUpdateInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bParams
init|=
name|bUpdateInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bVal1"
argument_list|,
name|bParams
operator|.
name|get
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|cUpdateInfo
init|=
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.c"
argument_list|,
name|cUpdateInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cParams
init|=
name|cUpdateInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cVal1"
argument_list|,
name|cParams
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGlobalUpdate ()
specifier|public
name|void
name|testGlobalUpdate
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|globalUpdates
argument_list|(
literal|"schedKey1=schedVal1,schedKey2=schedVal2"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalInfo
init|=
name|schedUpdateInfo
operator|.
name|getGlobalParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|globalInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schedVal1"
argument_list|,
name|globalInfo
operator|.
name|get
argument_list|(
literal|"schedKey1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schedVal2"
argument_list|,
name|globalInfo
operator|.
name|get
argument_list|(
literal|"schedKey2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

