begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|JAXBContextResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|RMWebServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GuiceServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|QueueConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedConfUpdateInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Class for testing {@link SchedConfCLI}.  */
end_comment

begin_class
DECL|class|TestSchedConfCLI
specifier|public
class|class
name|TestSchedConfCLI
extends|extends
name|JerseyTestBase
block|{
DECL|field|sysOutStream
specifier|private
name|ByteArrayOutputStream
name|sysOutStream
decl_stmt|;
DECL|field|sysOut
specifier|private
name|PrintStream
name|sysOut
decl_stmt|;
DECL|field|sysErrStream
specifier|private
name|ByteArrayOutputStream
name|sysErrStream
decl_stmt|;
DECL|field|sysErr
specifier|private
name|PrintStream
name|sysErr
decl_stmt|;
DECL|field|cli
specifier|private
name|SchedConfCLI
name|cli
decl_stmt|;
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|userName
specifier|private
specifier|static
name|String
name|userName
decl_stmt|;
DECL|field|csConf
specifier|private
specifier|static
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|CONF_FILE
specifier|private
specifier|static
specifier|final
name|File
name|CONF_FILE
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"test-classes"
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|CS_CONFIGURATION_FILE
argument_list|)
decl_stmt|;
DECL|field|OLD_CONF_FILE
specifier|private
specifier|static
specifier|final
name|File
name|OLD_CONF_FILE
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
literal|"test-classes"
argument_list|)
argument_list|,
name|YarnConfiguration
operator|.
name|CS_CONFIGURATION_FILE
operator|+
literal|".tmp"
argument_list|)
decl_stmt|;
DECL|method|TestSchedConfCLI ()
specifier|public
name|TestSchedConfCLI
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|sysOutStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysOutStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|sysErrStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysErr
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysErrStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
name|cli
operator|=
operator|new
name|SchedConfCLI
argument_list|()
expr_stmt|;
block|}
DECL|class|WebServletModule
specifier|private
specifier|static
class|class
name|WebServletModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_STORE_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|MEMORY_CONFIGURATION_STORE
argument_list|)
expr_stmt|;
try|try
block|{
name|userName
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to get current user name "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|CONF_FILE
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|CONF_FILE
operator|.
name|renameTo
argument_list|(
name|OLD_CONF_FILE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to rename conf file"
argument_list|)
throw|;
block|}
block|}
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|CONF_FILE
argument_list|)
decl_stmt|;
name|csConf
operator|.
name|writeXml
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to write XML file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|TestRMCustomAuthFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Custom filter which sets the Remote User for testing purpose.    */
annotation|@
name|Singleton
DECL|class|TestRMCustomAuthFilter
specifier|public
specifier|static
class|class
name|TestRMCustomAuthFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|init (FilterConfig filterConfig)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain filterChain)
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|HttpServletResponse
name|httpResponse
init|=
operator|(
name|HttpServletResponse
operator|)
name|response
decl_stmt|;
name|httpRequest
operator|=
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|httpRequest
argument_list|)
block|{
specifier|public
name|String
name|getAuthType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|doFilter
argument_list|(
name|filterChain
argument_list|,
name|httpRequest
argument_list|,
name|httpResponse
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupQueueConfiguration ( CapacitySchedulerConfiguration config)
specifier|private
specifier|static
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|config
parameter_list|)
block|{
name|config
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"testqueue"
block|}
argument_list|)
expr_stmt|;
name|String
name|a
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".testqueue"
decl_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|a
argument_list|,
literal|100f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaximumCapacity
argument_list|(
name|a
argument_list|,
literal|100f
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanUp ()
specifier|private
name|void
name|cleanUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|CONF_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|CONF_FILE
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to delete configuration file"
argument_list|)
throw|;
block|}
if|if
condition|(
name|OLD_CONF_FILE
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|OLD_CONF_FILE
operator|.
name|renameTo
argument_list|(
name|CONF_FILE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to re-copy old"
operator|+
literal|" configuration file"
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGetSchedulerConf ()
specifier|public
name|void
name|testGetSchedulerConf
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|getSchedulerConf
argument_list|(
literal|""
argument_list|,
name|resource
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SchedConfCLI failed to run"
argument_list|,
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to get scheduler configuration"
argument_list|,
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"testqueue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUp
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testFormatSchedulerConf ()
specifier|public
name|void
name|testFormatSchedulerConf
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MutableConfigurationProvider
name|provider
init|=
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getMutableConfProvider
argument_list|()
decl_stmt|;
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalUpdates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|globalUpdates
operator|.
name|put
argument_list|(
literal|"schedKey1"
argument_list|,
literal|"schedVal1"
argument_list|)
expr_stmt|;
name|schedUpdateInfo
operator|.
name|setGlobalParams
argument_list|(
name|globalUpdates
argument_list|)
expr_stmt|;
name|provider
operator|.
name|logAndApplyMutation
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|refreshQueues
argument_list|()
expr_stmt|;
name|provider
operator|.
name|confirmPendingMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|schedulerConf
init|=
name|provider
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"schedVal1"
argument_list|,
name|schedulerConf
operator|.
name|get
argument_list|(
literal|"schedKey1"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|cli
operator|.
name|formatSchedulerConf
argument_list|(
literal|""
argument_list|,
name|resource
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|schedulerConf
operator|=
name|provider
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|schedulerConf
operator|.
name|get
argument_list|(
literal|"schedKey1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanUp
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testInvalidConf ()
specifier|public
name|void
name|testInvalidConf
parameter_list|()
throws|throws
name|Exception
block|{
comment|// conf pair with no key should be invalid
name|int
name|exitCode
init|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"root.a:=confVal"
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-update"
block|,
literal|"root.a:=confVal"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-add"
block|,
literal|"root.a:confKey=confVal=conf"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|cli
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-update"
block|,
literal|"root.a:confKey=confVal=c"
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should return an error code"
argument_list|,
name|exitCode
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sysErrStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Specify configuration key "
operator|+
literal|"value as confKey=confVal."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAddQueues ()
specifier|public
name|void
name|testAddQueues
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|addQueues
argument_list|(
literal|"root.a:a1=aVal1,a2=aVal2,a3="
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|addInfo
init|=
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.a"
argument_list|,
name|addInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|addInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal1"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal2"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"a3"
argument_list|)
argument_list|)
expr_stmt|;
name|schedUpdateInfo
operator|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
expr_stmt|;
name|cli
operator|.
name|addQueues
argument_list|(
literal|"root.b:b1=bVal1;root.c:c1=cVal1"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|bAddInfo
init|=
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.b"
argument_list|,
name|bAddInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bParams
init|=
name|bAddInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bVal1"
argument_list|,
name|bParams
operator|.
name|get
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|cAddInfo
init|=
name|schedUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.c"
argument_list|,
name|cAddInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cParams
init|=
name|cAddInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cVal1"
argument_list|,
name|cParams
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testRemoveQueues ()
specifier|public
name|void
name|testRemoveQueues
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|removeQueues
argument_list|(
literal|"root.a;root.b;root.c.c1"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|removeInfo
init|=
name|schedUpdateInfo
operator|.
name|getRemoveQueueInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|removeInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.a"
argument_list|,
name|removeInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.b"
argument_list|,
name|removeInfo
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.c.c1"
argument_list|,
name|removeInfo
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testUpdateQueues ()
specifier|public
name|void
name|testUpdateQueues
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|updateQueues
argument_list|(
literal|"root.a:a1=aVal1,a2=aVal2,a3="
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|updateInfo
init|=
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.a"
argument_list|,
name|updateInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|updateInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal1"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aVal2"
argument_list|,
name|params
operator|.
name|get
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"a3"
argument_list|)
argument_list|)
expr_stmt|;
name|schedUpdateInfo
operator|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
expr_stmt|;
name|cli
operator|.
name|updateQueues
argument_list|(
literal|"root.b:b1=bVal1;root.c:c1=cVal1"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|bUpdateInfo
init|=
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.b"
argument_list|,
name|bUpdateInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bParams
init|=
name|bUpdateInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bVal1"
argument_list|,
name|bParams
operator|.
name|get
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|cUpdateInfo
init|=
name|schedUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.c"
argument_list|,
name|cUpdateInfo
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cParams
init|=
name|cUpdateInfo
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cVal1"
argument_list|,
name|cParams
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testGlobalUpdate ()
specifier|public
name|void
name|testGlobalUpdate
parameter_list|()
block|{
name|SchedConfUpdateInfo
name|schedUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|cli
operator|.
name|globalUpdates
argument_list|(
literal|"schedKey1=schedVal1,schedKey2=schedVal2"
argument_list|,
name|schedUpdateInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|globalInfo
init|=
name|schedUpdateInfo
operator|.
name|getGlobalParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|globalInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schedVal1"
argument_list|,
name|globalInfo
operator|.
name|get
argument_list|(
literal|"schedKey1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"schedVal2"
argument_list|,
name|globalInfo
operator|.
name|get
argument_list|(
literal|"schedKey2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

