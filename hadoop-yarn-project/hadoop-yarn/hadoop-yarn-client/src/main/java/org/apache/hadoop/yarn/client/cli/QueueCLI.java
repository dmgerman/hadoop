begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|QueueCLI
specifier|public
class|class
name|QueueCLI
extends|extends
name|YarnCLI
block|{
DECL|field|QUEUE
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE
init|=
literal|"queue"
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|QueueCLI
name|cli
init|=
operator|new
name|QueueCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|cli
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|cli
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|STATUS_CMD
argument_list|,
literal|true
argument_list|,
literal|"List queue information about given queue."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|HELP_CMD
argument_list|,
literal|false
argument_list|,
literal|"Displays help for all commands."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|STATUS_CMD
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Queue Name"
argument_list|)
expr_stmt|;
name|CommandLine
name|cliParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"Missing argument for options"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|STATUS_CMD
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|listQueue
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|STATUS_CMD
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|HELP_CMD
argument_list|)
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|syserr
operator|.
name|println
argument_list|(
literal|"Invalid Command Usage : "
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/**    * It prints the usage of the command    *     * @param opts    */
annotation|@
name|VisibleForTesting
DECL|method|printUsage (Options opts)
name|void
name|printUsage
parameter_list|(
name|Options
name|opts
parameter_list|)
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
name|QUEUE
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Lists the Queue Information matching the given queue name    *     * @param queueName    * @throws YarnException    * @throws IOException    */
DECL|method|listQueue (String queueName)
specifier|private
name|int
name|listQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|int
name|rc
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|sysout
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QueueInfo
name|queueInfo
init|=
name|client
operator|.
name|getQueueInfo
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueInfo
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"Queue Information : "
argument_list|)
expr_stmt|;
name|printQueueInfo
argument_list|(
name|writer
argument_list|,
name|queueInfo
argument_list|)
expr_stmt|;
name|rc
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"Cannot get queue from RM by queueName = "
operator|+
name|queueName
operator|+
literal|", please check."
argument_list|)
expr_stmt|;
name|rc
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|method|printQueueInfo (PrintWriter writer, QueueInfo queueInfo)
specifier|private
name|void
name|printQueueInfo
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|QueueInfo
name|queueInfo
parameter_list|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"Queue Name : "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\tState : "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|queueInfo
operator|.
name|getQueueState
argument_list|()
argument_list|)
expr_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"#.0"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\tCapacity : "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|queueInfo
operator|.
name|getCapacity
argument_list|()
operator|*
literal|100
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\tCurrent Capacity : "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|queueInfo
operator|.
name|getCurrentCapacity
argument_list|()
operator|*
literal|100
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\tMaximum Capacity : "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|queueInfo
operator|.
name|getMaximumCapacity
argument_list|()
operator|*
literal|100
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\tDefault Node Label expression : "
argument_list|)
expr_stmt|;
name|String
name|nodeLabelExpression
init|=
name|queueInfo
operator|.
name|getDefaultNodeLabelExpression
argument_list|()
decl_stmt|;
name|nodeLabelExpression
operator|=
operator|(
name|nodeLabelExpression
operator|==
literal|null
operator|||
name|nodeLabelExpression
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|nodeLabelExpression
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|nodeLabelExpression
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
init|=
name|queueInfo
operator|.
name|getAccessibleNodeLabels
argument_list|()
decl_stmt|;
name|StringBuilder
name|labelList
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
literal|"\tAccessible Node Labels : "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|nodeLabel
range|:
name|nodeLabels
control|)
block|{
if|if
condition|(
name|labelList
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|labelList
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|labelList
operator|.
name|append
argument_list|(
name|nodeLabel
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|println
argument_list|(
name|labelList
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Boolean
name|preemptStatus
init|=
name|queueInfo
operator|.
name|getPreemptionDisabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|preemptStatus
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"\tPreemption : "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
name|preemptStatus
condition|?
literal|"disabled"
else|:
literal|"enabled"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

