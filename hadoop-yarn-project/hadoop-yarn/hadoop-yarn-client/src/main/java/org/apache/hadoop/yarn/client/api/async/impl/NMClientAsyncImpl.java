begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.async.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|NMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|async
operator|.
name|NMClientAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|NMClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AbstractEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|InvalidStateTransitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|MultipleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|SingleArcTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
operator|.
name|StateMachineFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|NMClientAsyncImpl
specifier|public
class|class
name|NMClientAsyncImpl
extends|extends
name|NMClientAsync
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NMClientAsyncImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INITIAL_THREAD_POOL_SIZE
specifier|protected
specifier|static
specifier|final
name|int
name|INITIAL_THREAD_POOL_SIZE
init|=
literal|10
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPoolExecutor
name|threadPool
decl_stmt|;
DECL|field|maxThreadPoolSize
specifier|protected
name|int
name|maxThreadPoolSize
decl_stmt|;
DECL|field|eventDispatcherThread
specifier|protected
name|Thread
name|eventDispatcherThread
decl_stmt|;
DECL|field|stopped
specifier|protected
name|AtomicBoolean
name|stopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
DECL|field|events
specifier|protected
name|BlockingQueue
argument_list|<
name|ContainerEvent
argument_list|>
name|events
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|ContainerEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|containers
specifier|protected
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|StatefulContainer
argument_list|>
name|containers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|StatefulContainer
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|NMClientAsyncImpl (AbstractCallbackHandler callbackHandler)
specifier|public
name|NMClientAsyncImpl
parameter_list|(
name|AbstractCallbackHandler
name|callbackHandler
parameter_list|)
block|{
name|this
argument_list|(
name|NMClientAsync
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|NMClientAsyncImpl ( String name, AbstractCallbackHandler callbackHandler)
specifier|public
name|NMClientAsyncImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|AbstractCallbackHandler
name|callbackHandler
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|NMClientImpl
argument_list|()
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|NMClientAsyncImpl (String name, NMClient client, AbstractCallbackHandler callbackHandler)
specifier|protected
name|NMClientAsyncImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|NMClient
name|client
parameter_list|,
name|AbstractCallbackHandler
name|callbackHandler
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|client
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|callbackHandler
operator|=
name|callbackHandler
expr_stmt|;
block|}
comment|/**    * @deprecated Use {@link    *             #NMClientAsyncImpl(NMClientAsync.AbstractCallbackHandler)}    *             instead.    */
annotation|@
name|Deprecated
DECL|method|NMClientAsyncImpl (CallbackHandler callbackHandler)
specifier|public
name|NMClientAsyncImpl
parameter_list|(
name|CallbackHandler
name|callbackHandler
parameter_list|)
block|{
name|this
argument_list|(
name|NMClientAsync
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
comment|/**    * @deprecated Use {@link #NMClientAsyncImpl(String,    *             NMClientAsync.AbstractCallbackHandler)} instead.    */
annotation|@
name|Deprecated
DECL|method|NMClientAsyncImpl (String name, CallbackHandler callbackHandler)
specifier|public
name|NMClientAsyncImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|NMClientImpl
argument_list|()
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
annotation|@
name|Deprecated
DECL|method|NMClientAsyncImpl (String name, NMClient client, CallbackHandler callbackHandler)
specifier|protected
name|NMClientAsyncImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|NMClient
name|client
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|client
argument_list|,
name|callbackHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|callbackHandler
operator|=
name|callbackHandler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|maxThreadPoolSize
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Upper bound of the thread pool size is "
operator|+
name|maxThreadPoolSize
argument_list|)
expr_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|ThreadFactory
name|tf
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" #%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Start with a default core-pool size and change it dynamically.
name|int
name|initSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|INITIAL_THREAD_POOL_SIZE
argument_list|,
name|maxThreadPoolSize
argument_list|)
decl_stmt|;
name|threadPool
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|initSize
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|tf
argument_list|)
expr_stmt|;
name|eventDispatcherThread
operator|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ContainerEvent
name|event
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|event
operator|=
name|events
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Returning, thread interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|allNodes
operator|.
name|add
argument_list|(
name|event
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|threadPoolSize
init|=
name|threadPool
operator|.
name|getCorePoolSize
argument_list|()
decl_stmt|;
comment|// We can increase the pool size only if haven't reached the maximum
comment|// limit yet.
if|if
condition|(
name|threadPoolSize
operator|!=
name|maxThreadPoolSize
condition|)
block|{
comment|// nodes where containers will run at *this* point of time. This is
comment|// *not* the cluster size and doesn't need to be.
name|int
name|nodeNum
init|=
name|allNodes
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|idealThreadPoolSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxThreadPoolSize
argument_list|,
name|nodeNum
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadPoolSize
operator|<
name|idealThreadPoolSize
condition|)
block|{
comment|// Bump up the pool size to idealThreadPoolSize +
comment|// INITIAL_POOL_SIZE, the later is just a buffer so we are not
comment|// always increasing the pool-size
name|int
name|newThreadPoolSize
init|=
name|Math
operator|.
name|min
argument_list|(
name|maxThreadPoolSize
argument_list|,
name|idealThreadPoolSize
operator|+
name|INITIAL_THREAD_POOL_SIZE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Set NMClientAsync thread pool size to "
operator|+
name|newThreadPoolSize
operator|+
literal|" as the number of nodes to talk to is "
operator|+
name|nodeNum
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setCorePoolSize
argument_list|(
name|newThreadPoolSize
argument_list|)
expr_stmt|;
block|}
block|}
comment|// the events from the queue are handled in parallel with a thread
comment|// pool
name|threadPool
operator|.
name|execute
argument_list|(
name|getContainerEventProcessor
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: Group launching of multiple containers to a single
comment|// NodeManager into a single connection
block|}
block|}
block|}
expr_stmt|;
name|eventDispatcherThread
operator|.
name|setName
argument_list|(
literal|"Container  Event Dispatcher"
argument_list|)
expr_stmt|;
name|eventDispatcherThread
operator|.
name|setDaemon
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|eventDispatcherThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|stopped
operator|.
name|getAndSet
argument_list|(
literal|true
argument_list|)
condition|)
block|{
comment|// return if already stopped
return|return;
block|}
if|if
condition|(
name|eventDispatcherThread
operator|!=
literal|null
condition|)
block|{
name|eventDispatcherThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|eventDispatcherThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The thread of "
operator|+
name|eventDispatcherThread
operator|.
name|getName
argument_list|()
operator|+
literal|" didn't finish normally."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|threadPool
operator|!=
literal|null
condition|)
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
comment|// If NMClientImpl doesn't stop running containers, the states doesn't
comment|// need to be cleared.
if|if
condition|(
operator|!
operator|(
name|client
operator|instanceof
name|NMClientImpl
operator|)
operator|||
operator|(
operator|(
name|NMClientImpl
operator|)
name|client
operator|)
operator|.
name|getCleanupRunningContainers
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|containers
operator|!=
literal|null
condition|)
block|{
name|containers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|startContainerAsync ( Container container, ContainerLaunchContext containerLaunchContext)
specifier|public
name|void
name|startContainerAsync
parameter_list|(
name|Container
name|container
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|)
block|{
if|if
condition|(
name|containers
operator|.
name|putIfAbsent
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|StatefulContainer
argument_list|(
name|this
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|callbackHandler
operator|.
name|onStartContainerError
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" is already started or scheduled to start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|StartContainerEvent
argument_list|(
name|container
argument_list|,
name|containerLaunchContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event of starting Container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|callbackHandler
operator|.
name|onStartContainerError
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|increaseContainerResourceAsync (Container container)
specifier|public
name|void
name|increaseContainerResourceAsync
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|callbackHandler
operator|instanceof
name|AbstractCallbackHandler
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Callback handler does not implement container resource "
operator|+
literal|"increase callback methods"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AbstractCallbackHandler
name|handler
init|=
operator|(
name|AbstractCallbackHandler
operator|)
name|callbackHandler
decl_stmt|;
if|if
condition|(
name|containers
operator|.
name|get
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|onIncreaseContainerResourceError
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" is neither started nor scheduled to start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|IncreaseContainerResourceEvent
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event of increasing resource of "
operator|+
literal|"Container "
operator|+
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onIncreaseContainerResourceError
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|reInitializeContainerAsync (ContainerId containerId, ContainerLaunchContext containerLaunchContex, boolean autoCommit)
specifier|public
name|void
name|reInitializeContainerAsync
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContex
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|callbackHandler
operator|instanceof
name|AbstractCallbackHandler
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Callback handler does not implement container re-initialize "
operator|+
literal|"callback methods"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AbstractCallbackHandler
name|handler
init|=
operator|(
name|AbstractCallbackHandler
operator|)
name|callbackHandler
decl_stmt|;
if|if
condition|(
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|onContainerReInitializeError
argument_list|(
name|containerId
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is not started"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|ReInitializeContainerEvevnt
argument_list|(
name|containerId
argument_list|,
name|client
operator|.
name|getNodeIdOfStartedContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
name|containerLaunchContex
argument_list|,
name|autoCommit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event of re-initializing of "
operator|+
literal|"Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onContainerReInitializeError
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|restartContainerAsync (ContainerId containerId)
specifier|public
name|void
name|restartContainerAsync
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|callbackHandler
operator|instanceof
name|AbstractCallbackHandler
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Callback handler does not implement container restart "
operator|+
literal|"callback methods"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AbstractCallbackHandler
name|handler
init|=
operator|(
name|AbstractCallbackHandler
operator|)
name|callbackHandler
decl_stmt|;
if|if
condition|(
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|onContainerRestartError
argument_list|(
name|containerId
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is not started"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerId
argument_list|,
name|client
operator|.
name|getNodeIdOfStartedContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ContainerEventType
operator|.
name|RESTART_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event of restart of "
operator|+
literal|"Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onContainerRestartError
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|rollbackLastReInitializationAsync (ContainerId containerId)
specifier|public
name|void
name|rollbackLastReInitializationAsync
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|callbackHandler
operator|instanceof
name|AbstractCallbackHandler
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Callback handler does not implement container rollback "
operator|+
literal|"callback methods"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AbstractCallbackHandler
name|handler
init|=
operator|(
name|AbstractCallbackHandler
operator|)
name|callbackHandler
decl_stmt|;
if|if
condition|(
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|onRollbackLastReInitializationError
argument_list|(
name|containerId
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is not started"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerId
argument_list|,
name|client
operator|.
name|getNodeIdOfStartedContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ContainerEventType
operator|.
name|ROLLBACK_LAST_REINIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event Rollback re-initialization"
operator|+
literal|" of Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onRollbackLastReInitializationError
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|commitLastReInitializationAsync (ContainerId containerId)
specifier|public
name|void
name|commitLastReInitializationAsync
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|callbackHandler
operator|instanceof
name|AbstractCallbackHandler
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Callback handler does not implement container commit last "
operator|+
literal|"re-initialization callback methods"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AbstractCallbackHandler
name|handler
init|=
operator|(
name|AbstractCallbackHandler
operator|)
name|callbackHandler
decl_stmt|;
if|if
condition|(
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|onCommitLastReInitializationError
argument_list|(
name|containerId
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is not started"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerId
argument_list|,
name|client
operator|.
name|getNodeIdOfStartedContainer
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|null
argument_list|,
name|ContainerEventType
operator|.
name|COMMIT_LAST_REINT
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event Commit re-initialization"
operator|+
literal|" of Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|handler
operator|.
name|onCommitLastReInitializationError
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopContainerAsync (ContainerId containerId, NodeId nodeId)
specifier|public
name|void
name|stopContainerAsync
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
if|if
condition|(
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|callbackHandler
operator|.
name|onStopContainerError
argument_list|(
name|containerId
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is neither started nor scheduled to start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|,
name|ContainerEventType
operator|.
name|STOP_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event of stopping Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|callbackHandler
operator|.
name|onStopContainerError
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContainerStatusAsync (ContainerId containerId, NodeId nodeId)
specifier|public
name|void
name|getContainerStatusAsync
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|events
operator|.
name|put
argument_list|(
operator|new
name|ContainerEvent
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|,
name|ContainerEventType
operator|.
name|QUERY_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception when scheduling the event of querying the status"
operator|+
literal|" of Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
name|callbackHandler
operator|.
name|onGetContainerStatusError
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|enum|ContainerState
specifier|protected
enum|enum
name|ContainerState
block|{
DECL|enumConstant|PREP
DECL|enumConstant|FAILED
DECL|enumConstant|RUNNING
DECL|enumConstant|DONE
name|PREP
block|,
name|FAILED
block|,
name|RUNNING
block|,
name|DONE
block|,   }
DECL|method|isCompletelyDone (StatefulContainer container)
specifier|protected
name|boolean
name|isCompletelyDone
parameter_list|(
name|StatefulContainer
name|container
parameter_list|)
block|{
return|return
name|container
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|DONE
operator|||
name|container
operator|.
name|getState
argument_list|()
operator|==
name|ContainerState
operator|.
name|FAILED
return|;
block|}
DECL|method|getContainerEventProcessor ( ContainerEvent event)
specifier|protected
name|ContainerEventProcessor
name|getContainerEventProcessor
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
return|return
operator|new
name|ContainerEventProcessor
argument_list|(
name|event
argument_list|)
return|;
block|}
comment|/**    * The type of the event of interacting with a container    */
DECL|enum|ContainerEventType
specifier|protected
enum|enum
name|ContainerEventType
block|{
DECL|enumConstant|START_CONTAINER
name|START_CONTAINER
block|,
DECL|enumConstant|STOP_CONTAINER
name|STOP_CONTAINER
block|,
DECL|enumConstant|QUERY_CONTAINER
name|QUERY_CONTAINER
block|,
DECL|enumConstant|INCREASE_CONTAINER_RESOURCE
name|INCREASE_CONTAINER_RESOURCE
block|,
DECL|enumConstant|REINITIALIZE_CONTAINER
name|REINITIALIZE_CONTAINER
block|,
DECL|enumConstant|RESTART_CONTAINER
name|RESTART_CONTAINER
block|,
DECL|enumConstant|ROLLBACK_LAST_REINIT
name|ROLLBACK_LAST_REINIT
block|,
DECL|enumConstant|COMMIT_LAST_REINT
name|COMMIT_LAST_REINT
block|}
DECL|class|ContainerEvent
specifier|protected
specifier|static
class|class
name|ContainerEvent
extends|extends
name|AbstractEvent
argument_list|<
name|ContainerEventType
argument_list|>
block|{
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|containerToken
specifier|private
name|Token
name|containerToken
decl_stmt|;
DECL|method|ContainerEvent (ContainerId containerId, NodeId nodeId, Token containerToken, ContainerEventType type)
specifier|public
name|ContainerEvent
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Token
name|containerToken
parameter_list|,
name|ContainerEventType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|containerToken
operator|=
name|containerToken
expr_stmt|;
block|}
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|getContainerToken ()
specifier|public
name|Token
name|getContainerToken
parameter_list|()
block|{
return|return
name|containerToken
return|;
block|}
block|}
DECL|class|StartContainerEvent
specifier|protected
specifier|static
class|class
name|StartContainerEvent
extends|extends
name|ContainerEvent
block|{
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|field|containerLaunchContext
specifier|private
name|ContainerLaunchContext
name|containerLaunchContext
decl_stmt|;
DECL|method|StartContainerEvent (Container container, ContainerLaunchContext containerLaunchContext)
specifier|public
name|StartContainerEvent
parameter_list|(
name|Container
name|container
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|)
block|{
name|super
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerToken
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|START_CONTAINER
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|containerLaunchContext
operator|=
name|containerLaunchContext
expr_stmt|;
block|}
DECL|method|getContainer ()
specifier|public
name|Container
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
DECL|method|getContainerLaunchContext ()
specifier|public
name|ContainerLaunchContext
name|getContainerLaunchContext
parameter_list|()
block|{
return|return
name|containerLaunchContext
return|;
block|}
block|}
DECL|class|ReInitializeContainerEvevnt
specifier|protected
specifier|static
class|class
name|ReInitializeContainerEvevnt
extends|extends
name|ContainerEvent
block|{
DECL|field|containerLaunchContext
specifier|private
name|ContainerLaunchContext
name|containerLaunchContext
decl_stmt|;
DECL|field|autoCommit
specifier|private
name|boolean
name|autoCommit
decl_stmt|;
DECL|method|ReInitializeContainerEvevnt (ContainerId containerId, NodeId nodeId, ContainerLaunchContext containerLaunchContext, boolean autoCommit)
specifier|public
name|ReInitializeContainerEvevnt
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
block|{
name|super
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
literal|null
argument_list|,
name|ContainerEventType
operator|.
name|REINITIALIZE_CONTAINER
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerLaunchContext
operator|=
name|containerLaunchContext
expr_stmt|;
name|this
operator|.
name|autoCommit
operator|=
name|autoCommit
expr_stmt|;
block|}
DECL|method|getContainerLaunchContext ()
specifier|public
name|ContainerLaunchContext
name|getContainerLaunchContext
parameter_list|()
block|{
return|return
name|containerLaunchContext
return|;
block|}
DECL|method|isAutoCommit ()
specifier|public
name|boolean
name|isAutoCommit
parameter_list|()
block|{
return|return
name|autoCommit
return|;
block|}
block|}
DECL|class|IncreaseContainerResourceEvent
specifier|protected
specifier|static
class|class
name|IncreaseContainerResourceEvent
extends|extends
name|ContainerEvent
block|{
DECL|field|container
specifier|private
name|Container
name|container
decl_stmt|;
DECL|method|IncreaseContainerResourceEvent (Container container)
specifier|public
name|IncreaseContainerResourceEvent
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|super
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerToken
argument_list|()
argument_list|,
name|ContainerEventType
operator|.
name|INCREASE_CONTAINER_RESOURCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
DECL|method|getContainer ()
specifier|public
name|Container
name|getContainer
parameter_list|()
block|{
return|return
name|container
return|;
block|}
block|}
DECL|class|StatefulContainer
specifier|protected
specifier|static
class|class
name|StatefulContainer
implements|implements
name|EventHandler
argument_list|<
name|ContainerEvent
argument_list|>
block|{
specifier|protected
specifier|final
specifier|static
name|StateMachineFactory
argument_list|<
name|StatefulContainer
argument_list|,
DECL|field|stateMachineFactory
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
name|stateMachineFactory
init|=
operator|new
name|StateMachineFactory
argument_list|<
name|StatefulContainer
argument_list|,
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
name|ContainerEvent
argument_list|>
argument_list|(
name|ContainerState
operator|.
name|PREP
argument_list|)
comment|// Transitions from PREP state
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PREP
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|START_CONTAINER
argument_list|,
operator|new
name|StartContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|PREP
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerEventType
operator|.
name|STOP_CONTAINER
argument_list|,
operator|new
name|OutOfOrderTransition
argument_list|()
argument_list|)
comment|// Transitions from RUNNING state
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerEventType
operator|.
name|INCREASE_CONTAINER_RESOURCE
argument_list|,
operator|new
name|IncreaseContainerResourceTransition
argument_list|()
argument_list|)
comment|// Transitions for Container Upgrade
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|REINITIALIZE_CONTAINER
argument_list|,
operator|new
name|ReInitializeContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|RESTART_CONTAINER
argument_list|,
operator|new
name|ReInitializeContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|ROLLBACK_LAST_REINIT
argument_list|,
operator|new
name|ReInitializeContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|COMMIT_LAST_REINT
argument_list|,
operator|new
name|ReInitializeContainerTransition
argument_list|()
argument_list|)
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|)
argument_list|,
name|ContainerEventType
operator|.
name|STOP_CONTAINER
argument_list|,
operator|new
name|StopContainerTransition
argument_list|()
argument_list|)
comment|// Transition from DONE state
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|DONE
argument_list|,
name|ContainerState
operator|.
name|DONE
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|START_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|STOP_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|INCREASE_CONTAINER_RESOURCE
argument_list|)
argument_list|)
comment|// Transition from FAILED state
operator|.
name|addTransition
argument_list|(
name|ContainerState
operator|.
name|FAILED
argument_list|,
name|ContainerState
operator|.
name|FAILED
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ContainerEventType
operator|.
name|START_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|STOP_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|REINITIALIZE_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|RESTART_CONTAINER
argument_list|,
name|ContainerEventType
operator|.
name|COMMIT_LAST_REINT
argument_list|,
name|ContainerEventType
operator|.
name|ROLLBACK_LAST_REINIT
argument_list|,
name|ContainerEventType
operator|.
name|INCREASE_CONTAINER_RESOURCE
argument_list|)
argument_list|)
decl_stmt|;
DECL|class|StartContainerTransition
specifier|protected
specifier|static
class|class
name|StartContainerTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|StatefulContainer
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition ( StatefulContainer container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|StatefulContainer
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|event
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
try|try
block|{
name|StartContainerEvent
name|scEvent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|StartContainerEvent
condition|)
block|{
name|scEvent
operator|=
operator|(
name|StartContainerEvent
operator|)
name|event
expr_stmt|;
block|}
assert|assert
name|scEvent
operator|!=
literal|null
assert|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|allServiceResponse
init|=
name|container
operator|.
name|nmClientAsync
operator|.
name|getClient
argument_list|()
operator|.
name|startContainer
argument_list|(
name|scEvent
operator|.
name|getContainer
argument_list|()
argument_list|,
name|scEvent
operator|.
name|getContainerLaunchContext
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
operator|.
name|onContainerStarted
argument_list|(
name|containerId
argument_list|,
name|allServiceResponse
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from onContainerStarted for "
operator|+
literal|"Container "
operator|+
name|containerId
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
return|return
name|ContainerState
operator|.
name|RUNNING
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|onExceptionRaised
argument_list|(
name|container
argument_list|,
name|event
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|onExceptionRaised
argument_list|(
name|container
argument_list|,
name|event
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|onExceptionRaised
argument_list|(
name|container
argument_list|,
name|event
argument_list|,
name|t
argument_list|)
return|;
block|}
block|}
DECL|method|onExceptionRaised (StatefulContainer container, ContainerEvent event, Throwable t)
specifier|private
name|ContainerState
name|onExceptionRaised
parameter_list|(
name|StatefulContainer
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
operator|.
name|onStartContainerError
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from onStartContainerError for "
operator|+
literal|"Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
return|return
name|ContainerState
operator|.
name|FAILED
return|;
block|}
block|}
DECL|class|IncreaseContainerResourceTransition
specifier|protected
specifier|static
class|class
name|IncreaseContainerResourceTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|StatefulContainer
argument_list|,
name|ContainerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition ( StatefulContainer container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|StatefulContainer
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
operator|instanceof
name|AbstractCallbackHandler
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Callback handler does not implement container resource "
operator|+
literal|"increase callback methods"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AbstractCallbackHandler
name|handler
init|=
operator|(
name|AbstractCallbackHandler
operator|)
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|IncreaseContainerResourceEvent
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected event type. Expecting:"
operator|+
literal|"IncreaseContainerResourceEvent. Got:"
operator|+
name|event
argument_list|)
throw|;
block|}
name|IncreaseContainerResourceEvent
name|increaseEvent
init|=
operator|(
name|IncreaseContainerResourceEvent
operator|)
name|event
decl_stmt|;
name|container
operator|.
name|nmClientAsync
operator|.
name|getClient
argument_list|()
operator|.
name|increaseContainerResource
argument_list|(
name|increaseEvent
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|onContainerResourceIncreased
argument_list|(
name|increaseEvent
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|increaseEvent
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from "
operator|+
literal|"onContainerResourceIncreased for Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
try|try
block|{
name|handler
operator|.
name|onIncreaseContainerResourceError
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from "
operator|+
literal|"onIncreaseContainerResourceError for Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|ReInitializeContainerTransition
specifier|protected
specifier|static
class|class
name|ReInitializeContainerTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|StatefulContainer
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition (StatefulContainer container, ContainerEvent containerEvent)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|StatefulContainer
name|container
parameter_list|,
name|ContainerEvent
name|containerEvent
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|containerEvent
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|AbstractCallbackHandler
name|handler
init|=
operator|(
name|AbstractCallbackHandler
operator|)
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
decl_stmt|;
name|Throwable
name|handlerError
init|=
literal|null
decl_stmt|;
try|try
block|{
switch|switch
condition|(
name|containerEvent
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|REINITIALIZE_CONTAINER
case|:
if|if
condition|(
operator|!
operator|(
name|containerEvent
operator|instanceof
name|ReInitializeContainerEvevnt
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Event.. ["
operator|+
name|containerEvent
operator|.
name|getType
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|ContainerState
operator|.
name|FAILED
return|;
block|}
name|ReInitializeContainerEvevnt
name|rEvent
init|=
operator|(
name|ReInitializeContainerEvevnt
operator|)
name|containerEvent
decl_stmt|;
name|container
operator|.
name|nmClientAsync
operator|.
name|getClient
argument_list|()
operator|.
name|reInitializeContainer
argument_list|(
name|containerId
argument_list|,
name|rEvent
operator|.
name|getContainerLaunchContext
argument_list|()
argument_list|,
name|rEvent
operator|.
name|isAutoCommit
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|onContainerReInitialize
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
case|case
name|RESTART_CONTAINER
case|:
name|container
operator|.
name|nmClientAsync
operator|.
name|getClient
argument_list|()
operator|.
name|restartContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|onContainerRestart
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
case|case
name|ROLLBACK_LAST_REINIT
case|:
name|container
operator|.
name|nmClientAsync
operator|.
name|getClient
argument_list|()
operator|.
name|rollbackLastReInitialization
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|onRollbackLastReInitialization
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
case|case
name|COMMIT_LAST_REINT
case|:
name|container
operator|.
name|nmClientAsync
operator|.
name|getClient
argument_list|()
operator|.
name|commitLastReInitialization
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
try|try
block|{
name|handler
operator|.
name|onCommitLastReInitialization
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event of type ["
operator|+
name|containerEvent
operator|.
name|getType
argument_list|()
operator|+
literal|"] not"
operator|+
literal|" expected here.."
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|handlerError
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown in handler for event ["
operator|+
name|containerEvent
operator|.
name|getType
argument_list|()
operator|+
literal|"] for Container "
operator|+
name|containerId
argument_list|,
name|handlerError
argument_list|)
expr_stmt|;
block|}
return|return
name|ContainerState
operator|.
name|RUNNING
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
switch|switch
condition|(
name|containerEvent
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|REINITIALIZE_CONTAINER
case|:
try|try
block|{
name|handler
operator|.
name|onContainerReInitializeError
argument_list|(
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
case|case
name|RESTART_CONTAINER
case|:
try|try
block|{
name|handler
operator|.
name|onContainerRestartError
argument_list|(
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
case|case
name|ROLLBACK_LAST_REINIT
case|:
try|try
block|{
name|handler
operator|.
name|onRollbackLastReInitializationError
argument_list|(
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
case|case
name|COMMIT_LAST_REINT
case|:
try|try
block|{
name|handler
operator|.
name|onCommitLastReInitializationError
argument_list|(
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|tr
parameter_list|)
block|{
name|handlerError
operator|=
name|tr
expr_stmt|;
block|}
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Event of type ["
operator|+
name|containerEvent
operator|.
name|getType
argument_list|()
operator|+
literal|"] not"
operator|+
literal|" expected here.."
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|handlerError
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown in handler for event ["
operator|+
name|containerEvent
operator|.
name|getType
argument_list|()
operator|+
literal|"] for Container "
operator|+
name|containerId
argument_list|,
name|handlerError
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ContainerState
operator|.
name|FAILED
return|;
block|}
block|}
DECL|class|StopContainerTransition
specifier|protected
specifier|static
class|class
name|StopContainerTransition
implements|implements
name|MultipleArcTransition
argument_list|<
name|StatefulContainer
argument_list|,
name|ContainerEvent
argument_list|,
name|ContainerState
argument_list|>
block|{
annotation|@
name|Override
DECL|method|transition ( StatefulContainer container, ContainerEvent event)
specifier|public
name|ContainerState
name|transition
parameter_list|(
name|StatefulContainer
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|event
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
try|try
block|{
name|container
operator|.
name|nmClientAsync
operator|.
name|getClient
argument_list|()
operator|.
name|stopContainer
argument_list|(
name|containerId
argument_list|,
name|event
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
operator|.
name|onContainerStopped
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from onContainerStopped for "
operator|+
literal|"Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
return|return
name|ContainerState
operator|.
name|DONE
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
return|return
name|onExceptionRaised
argument_list|(
name|container
argument_list|,
name|event
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|onExceptionRaised
argument_list|(
name|container
argument_list|,
name|event
argument_list|,
name|e
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
name|onExceptionRaised
argument_list|(
name|container
argument_list|,
name|event
argument_list|,
name|t
argument_list|)
return|;
block|}
block|}
DECL|method|onExceptionRaised (StatefulContainer container, ContainerEvent event, Throwable t)
specifier|private
name|ContainerState
name|onExceptionRaised
parameter_list|(
name|StatefulContainer
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
operator|.
name|onStopContainerError
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from onStopContainerError for "
operator|+
literal|"Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
return|return
name|ContainerState
operator|.
name|FAILED
return|;
block|}
block|}
DECL|class|OutOfOrderTransition
specifier|protected
specifier|static
class|class
name|OutOfOrderTransition
implements|implements
name|SingleArcTransition
argument_list|<
name|StatefulContainer
argument_list|,
name|ContainerEvent
argument_list|>
block|{
DECL|field|STOP_BEFORE_START_ERROR_MSG
specifier|protected
specifier|static
specifier|final
name|String
name|STOP_BEFORE_START_ERROR_MSG
init|=
literal|"Container was killed before it was launched"
decl_stmt|;
annotation|@
name|Override
DECL|method|transition (StatefulContainer container, ContainerEvent event)
specifier|public
name|void
name|transition
parameter_list|(
name|StatefulContainer
name|container
parameter_list|,
name|ContainerEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|container
operator|.
name|nmClientAsync
operator|.
name|getCallbackHandler
argument_list|()
operator|.
name|onStartContainerError
argument_list|(
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|STOP_BEFORE_START_ERROR_MSG
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from onStartContainerError for "
operator|+
literal|"Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|nmClientAsync
specifier|private
specifier|final
name|NMClientAsync
name|nmClientAsync
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
specifier|private
specifier|final
name|StateMachine
argument_list|<
name|ContainerState
argument_list|,
name|ContainerEventType
argument_list|,
DECL|field|stateMachine
name|ContainerEvent
argument_list|>
name|stateMachine
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|method|StatefulContainer (NMClientAsync client, ContainerId containerId)
specifier|public
name|StatefulContainer
parameter_list|(
name|NMClientAsync
name|client
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|nmClientAsync
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|stateMachine
operator|=
name|stateMachineFactory
operator|.
name|make
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (ContainerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|this
operator|.
name|stateMachine
operator|.
name|doTransition
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidStateTransitionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't handle this event at current state"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|getState ()
specifier|public
name|ContainerState
name|getState
parameter_list|()
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|stateMachine
operator|.
name|getCurrentState
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|ContainerEventProcessor
specifier|protected
class|class
name|ContainerEventProcessor
implements|implements
name|Runnable
block|{
DECL|field|event
specifier|protected
name|ContainerEvent
name|event
decl_stmt|;
DECL|method|ContainerEventProcessor (ContainerEvent event)
specifier|public
name|ContainerEventProcessor
parameter_list|(
name|ContainerEvent
name|event
parameter_list|)
block|{
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ContainerId
name|containerId
init|=
name|event
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing Event "
operator|+
name|event
operator|+
literal|" for Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|ContainerEventType
operator|.
name|QUERY_CONTAINER
condition|)
block|{
try|try
block|{
name|ContainerStatus
name|containerStatus
init|=
name|client
operator|.
name|getContainerStatus
argument_list|(
name|containerId
argument_list|,
name|event
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|callbackHandler
operator|.
name|onContainerStatusReceived
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from onContainerStatusReceived"
operator|+
literal|" for Container "
operator|+
name|event
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|onExceptionRaised
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onExceptionRaised
argument_list|(
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|onExceptionRaised
argument_list|(
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|StatefulContainer
name|container
init|=
name|containers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is already stopped or failed"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|container
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCompletelyDone
argument_list|(
name|container
argument_list|)
condition|)
block|{
name|containers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|onExceptionRaised (ContainerId containerId, Throwable t)
specifier|private
name|void
name|onExceptionRaised
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
try|try
block|{
name|callbackHandler
operator|.
name|onGetContainerStatusError
argument_list|(
name|containerId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thr
parameter_list|)
block|{
comment|// Don't process user created unchecked exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Unchecked exception is thrown from onGetContainerStatusError"
operator|+
literal|" for Container "
operator|+
name|containerId
argument_list|,
name|thr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

