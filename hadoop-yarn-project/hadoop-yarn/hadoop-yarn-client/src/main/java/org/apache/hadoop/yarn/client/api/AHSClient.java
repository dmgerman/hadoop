begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|AHSClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|AHSv2ClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationAttemptNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|AHSClient
specifier|public
specifier|abstract
class|class
name|AHSClient
extends|extends
name|AbstractService
block|{
comment|/**    * Create a new instance of AHSClient.    */
annotation|@
name|Public
DECL|method|createAHSClient ()
specifier|public
specifier|static
name|AHSClient
name|createAHSClient
parameter_list|()
block|{
return|return
operator|new
name|AHSClientImpl
argument_list|()
return|;
block|}
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|Public
DECL|method|createAHSv2Client ()
specifier|public
specifier|static
name|AHSClient
name|createAHSv2Client
parameter_list|()
block|{
return|return
operator|new
name|AHSv2ClientImpl
argument_list|()
return|;
block|}
annotation|@
name|Private
DECL|method|AHSClient (String name)
specifier|public
name|AHSClient
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a report of the given Application.    *<p>    * In secure mode,<code>YARN</code> verifies access to the application, queue    * etc. before accepting the request.    *<p>    * If the user does not have<code>VIEW_APP</code> access then the following    * fields in the report will be set to stubbed values:    *<ul>    *<li>host - set to "N/A"</li>    *<li>RPC port - set to -1</li>    *<li>client token - set to "N/A"</li>    *<li>diagnostics - set to "N/A"</li>    *<li>tracking URL - set to "N/A"</li>    *<li>original tracking URL - set to "N/A"</li>    *<li>resource usage report - all values are -1</li>    *</ul>    *     * @param appId    *          {@link ApplicationId} of the application that needs a report    * @return application report    * @throws YarnException    * @throws IOException    */
DECL|method|getApplicationReport (ApplicationId appId)
specifier|public
specifier|abstract
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
comment|/**    *<p>    * Get a report (ApplicationReport) of all Applications in the cluster.    *</p>    *     *<p>    * If the user does not have<code>VIEW_APP</code> access for an application    * then the corresponding report will be filtered as described in    * {@link #getApplicationReport(ApplicationId)}.    *</p>    *     * @return a list of reports for all applications    * @throws YarnException    * @throws IOException    */
DECL|method|getApplications ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
comment|/**    *<p>    * Get a report of the given ApplicationAttempt.    *</p>    *     *<p>    * In secure mode,<code>YARN</code> verifies access to the application, queue    * etc. before accepting the request.    *</p>    *     * @param applicationAttemptId    *          {@link ApplicationAttemptId} of the application attempt that needs    *          a report    * @return application attempt report    * @throws YarnException    * @throws ApplicationAttemptNotFoundException if application attempt    *         not found    * @throws IOException    */
DECL|method|getApplicationAttemptReport ( ApplicationAttemptId applicationAttemptId)
specifier|public
specifier|abstract
name|ApplicationAttemptReport
name|getApplicationAttemptReport
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
comment|/**    *<p>    * Get a report of all (ApplicationAttempts) of Application in the cluster.    *</p>    *     * @param applicationId    * @return a list of reports for all application attempts for specified    *         application    * @throws YarnException    * @throws IOException    */
DECL|method|getApplicationAttempts ( ApplicationId applicationId)
specifier|public
specifier|abstract
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|getApplicationAttempts
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
comment|/**    *<p>    * Get a report of the given Container.    *</p>    *     *<p>    * In secure mode,<code>YARN</code> verifies access to the application, queue    * etc. before accepting the request.    *</p>    *     * @param containerId    *          {@link ContainerId} of the container that needs a report    * @return container report    * @throws YarnException    * @throws ContainerNotFoundException if container not found    * @throws IOException    */
DECL|method|getContainerReport (ContainerId containerId)
specifier|public
specifier|abstract
name|ContainerReport
name|getContainerReport
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
comment|/**    *<p>    * Get a report of all (Containers) of ApplicationAttempt in the cluster.    *</p>    *     * @param applicationAttemptId    * @return a list of reports of all containers for specified application    *         attempt    * @throws YarnException    * @throws IOException    */
DECL|method|getContainers ( ApplicationAttemptId applicationAttemptId)
specifier|public
specifier|abstract
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|getContainers
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
block|}
end_class

end_unit

