begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Cluster CLI used to get over all information of the cluster  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|ClusterCLI
specifier|public
class|class
name|ClusterCLI
extends|extends
name|YarnCLI
block|{
DECL|field|TITLE
specifier|private
specifier|static
specifier|final
name|String
name|TITLE
init|=
literal|"yarn cluster"
decl_stmt|;
DECL|field|LIST_LABELS_CMD
specifier|public
specifier|static
specifier|final
name|String
name|LIST_LABELS_CMD
init|=
literal|"list-node-labels"
decl_stmt|;
DECL|field|DIRECTLY_ACCESS_NODE_LABEL_STORE
specifier|public
specifier|static
specifier|final
name|String
name|DIRECTLY_ACCESS_NODE_LABEL_STORE
init|=
literal|"directly-access-node-label-store"
decl_stmt|;
DECL|field|LIST_CLUSTER_ATTRIBUTES
specifier|public
specifier|static
specifier|final
name|String
name|LIST_CLUSTER_ATTRIBUTES
init|=
literal|"list-node-attributes"
decl_stmt|;
DECL|field|CMD
specifier|public
specifier|static
specifier|final
name|String
name|CMD
init|=
literal|"cluster"
decl_stmt|;
DECL|field|accessLocal
specifier|private
name|boolean
name|accessLocal
init|=
literal|false
decl_stmt|;
DECL|field|localNodeLabelsManager
specifier|static
name|CommonNodeLabelsManager
name|localNodeLabelsManager
init|=
literal|null
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ClusterCLI
name|cli
init|=
operator|new
name|ClusterCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|cli
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|cli
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"lnl"
argument_list|,
name|LIST_LABELS_CMD
argument_list|,
literal|false
argument_list|,
literal|"List cluster node-label collection"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"lna"
argument_list|,
name|LIST_CLUSTER_ATTRIBUTES
argument_list|,
literal|false
argument_list|,
literal|"List cluster node-attribute collection"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
name|HELP_CMD
argument_list|,
literal|false
argument_list|,
literal|"Displays help for all commands."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"dnl"
argument_list|,
name|DIRECTLY_ACCESS_NODE_LABEL_STORE
argument_list|,
literal|false
argument_list|,
literal|"This is DEPRECATED, will be removed in future releases. Directly access node label store, "
operator|+
literal|"with this option, all node label related operations"
operator|+
literal|" will NOT connect RM. Instead, they will"
operator|+
literal|" access/modify stored node labels directly."
operator|+
literal|" By default, it is false (access via RM)."
operator|+
literal|" AND PLEASE NOTE: if you configured "
operator|+
name|YarnConfiguration
operator|.
name|FS_NODE_LABELS_STORE_ROOT_DIR
operator|+
literal|" to a local directory"
operator|+
literal|" (instead of NFS or HDFS), this option will only work"
operator|+
literal|" when the command run on the machine where RM is running."
operator|+
literal|" Also, this option is UNSTABLE, could be removed in future"
operator|+
literal|" releases."
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|CommandLine
name|parsedCli
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedCli
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"Missing argument for options"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
if|if
condition|(
name|parsedCli
operator|.
name|hasOption
argument_list|(
name|DIRECTLY_ACCESS_NODE_LABEL_STORE
argument_list|)
condition|)
block|{
name|accessLocal
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|parsedCli
operator|.
name|hasOption
argument_list|(
name|LIST_LABELS_CMD
argument_list|)
condition|)
block|{
name|printClusterNodeLabels
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parsedCli
operator|.
name|hasOption
argument_list|(
name|LIST_CLUSTER_ATTRIBUTES
argument_list|)
condition|)
block|{
name|printClusterNodeAttributes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parsedCli
operator|.
name|hasOption
argument_list|(
name|HELP_CMD
argument_list|)
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|syserr
operator|.
name|println
argument_list|(
literal|"Invalid Command Usage : "
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|printClusterNodeAttributes ()
specifier|private
name|void
name|printClusterNodeAttributes
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeAttributeInfo
name|attribute
range|:
name|client
operator|.
name|getClusterAttributes
argument_list|()
control|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|attribute
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysout
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|printClusterNodeLabels ()
name|void
name|printClusterNodeLabels
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabels
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|accessLocal
condition|)
block|{
name|nodeLabels
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getNodeLabelManagerInstance
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getClusterNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodeLabels
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|client
operator|.
name|getClusterNodeLabels
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sysout
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Node Labels: %s"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|nodeLabels
operator|.
name|iterator
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
specifier|synchronized
name|CommonNodeLabelsManager
DECL|method|getNodeLabelManagerInstance (Configuration conf)
name|getNodeLabelManagerInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|localNodeLabelsManager
operator|==
literal|null
condition|)
block|{
name|localNodeLabelsManager
operator|=
operator|new
name|CommonNodeLabelsManager
argument_list|()
expr_stmt|;
name|localNodeLabelsManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|localNodeLabelsManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|localNodeLabelsManager
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|printUsage (Options opts)
name|void
name|printUsage
parameter_list|(
name|Options
name|opts
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
name|pw
argument_list|,
name|HelpFormatter
operator|.
name|DEFAULT_WIDTH
argument_list|,
name|TITLE
argument_list|,
literal|null
argument_list|,
name|opts
argument_list|,
name|HelpFormatter
operator|.
name|DEFAULT_LEFT_PAD
argument_list|,
name|HelpFormatter
operator|.
name|DEFAULT_DESC_PAD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysout
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

