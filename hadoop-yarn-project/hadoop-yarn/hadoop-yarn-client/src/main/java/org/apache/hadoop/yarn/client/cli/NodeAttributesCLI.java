begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAAdmin
operator|.
name|UsageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AttributeMappingOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeToAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodesToAttributesMappingRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * CLI to map attributes to Nodes.  *  */
end_comment

begin_class
DECL|class|NodeAttributesCLI
specifier|public
class|class
name|NodeAttributesCLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|INVALID_MAPPING_ERR_MSG
specifier|protected
specifier|static
specifier|final
name|String
name|INVALID_MAPPING_ERR_MSG
init|=
literal|"Invalid Node to attribute mapping : "
decl_stmt|;
DECL|field|USAGE_YARN_NODE_ATTRIBUTES
specifier|protected
specifier|static
specifier|final
name|String
name|USAGE_YARN_NODE_ATTRIBUTES
init|=
literal|"Usage: yarn node-attributes "
decl_stmt|;
DECL|field|NO_MAPPING_ERR_MSG
specifier|protected
specifier|static
specifier|final
name|String
name|NO_MAPPING_ERR_MSG
init|=
literal|"No node-to-attributes mappings are specified"
decl_stmt|;
DECL|field|NODE_ATTRIB_USAGE
specifier|protected
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|UsageInfo
argument_list|>
name|NODE_ATTRIB_USAGE
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|UsageInfo
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"-replace"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"<\"node1:attribute[(type)][=value],attribute1[=value],"
operator|+
literal|"attribute2  node2:attribute2[=value],attribute3\">"
argument_list|,
literal|" Replace the node to attributes mapping information at the"
operator|+
literal|" ResourceManager with the new mapping. Currently"
operator|+
literal|" supported attribute type. And string is the default"
operator|+
literal|" type too. Attribute value if not specified for string"
operator|+
literal|" type value will be considered as empty string."
operator|+
literal|" Replaced node-attributes should not violate the"
operator|+
literal|" existing attribute to attribute type mapping."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-add"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"<\"node1:attribute[(type)][=value],attribute1[=value],"
operator|+
literal|"attribute2  node2:attribute2[=value],attribute3\">"
argument_list|,
literal|" Adds or updates the node to attributes mapping information"
operator|+
literal|" at the ResourceManager. Currently supported attribute"
operator|+
literal|" type is string. And string is the default type too."
operator|+
literal|" Attribute value if not specified for string type"
operator|+
literal|" value will be considered as empty string. Added or"
operator|+
literal|" updated node-attributes should not violate the"
operator|+
literal|" existing attribute to attribute type mapping."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-remove"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"<\"node1:attribute,attribute1 node2:attribute2\">"
argument_list|,
literal|" Removes the specified node to attributes mapping"
operator|+
literal|" information at the ResourceManager"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-failOnUnknownNodes"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Can be used optionally along with other options. When its"
operator|+
literal|" set, it will fail if specified nodes are unknown."
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
comment|/** Output stream for errors, for use in tests. */
DECL|field|errOut
specifier|private
name|PrintStream
name|errOut
init|=
name|System
operator|.
name|err
decl_stmt|;
DECL|method|NodeAttributesCLI ()
specifier|public
name|NodeAttributesCLI
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|NodeAttributesCLI (Configuration conf)
specifier|public
name|NodeAttributesCLI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|setErrOut (PrintStream errOut)
specifier|protected
name|void
name|setErrOut
parameter_list|(
name|PrintStream
name|errOut
parameter_list|)
block|{
name|this
operator|.
name|errOut
operator|=
name|errOut
expr_stmt|;
block|}
DECL|method|printHelpMsg (String cmd)
specifier|private
name|void
name|printHelpMsg
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|UsageInfo
name|usageInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|cmd
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|usageInfo
operator|=
name|NODE_ATTRIB_USAGE
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|usageInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|usageInfo
operator|.
name|args
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmd
operator|+
literal|":\n"
operator|+
name|usageInfo
operator|.
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|space
init|=
operator|(
name|usageInfo
operator|.
name|args
operator|==
literal|""
operator|)
condition|?
literal|""
else|:
literal|" "
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmd
operator|+
name|space
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|" :\n"
operator|+
name|usageInfo
operator|.
name|help
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// help for all commands
name|builder
operator|.
name|append
argument_list|(
literal|"Usage: yarn node-attributes\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UsageInfo
argument_list|>
name|cmdEntry
range|:
name|NODE_ATTRIB_USAGE
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|usageInfo
operator|=
name|cmdEntry
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|" :\n "
operator|+
name|usageInfo
operator|.
name|help
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"   -help"
operator|+
literal|" [cmd]\n"
argument_list|)
expr_stmt|;
block|}
name|errOut
operator|.
name|println
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
DECL|method|buildIndividualUsageMsg (String cmd, StringBuilder builder)
specifier|private
specifier|static
name|void
name|buildIndividualUsageMsg
parameter_list|(
name|String
name|cmd
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
name|UsageInfo
name|usageInfo
init|=
name|NODE_ATTRIB_USAGE
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|usageInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|usageInfo
operator|.
name|args
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|USAGE_YARN_NODE_ATTRIBUTES
operator|+
name|cmd
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|space
init|=
operator|(
name|usageInfo
operator|.
name|args
operator|==
literal|""
operator|)
condition|?
literal|""
else|:
literal|" "
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|USAGE_YARN_NODE_ATTRIBUTES
operator|+
name|cmd
operator|+
name|space
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildUsageMsgForAllCmds (StringBuilder builder)
specifier|private
specifier|static
name|void
name|buildUsageMsgForAllCmds
parameter_list|(
name|StringBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"Usage: yarn node-attributes\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UsageInfo
argument_list|>
name|cmdEntry
range|:
name|NODE_ATTRIB_USAGE
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|UsageInfo
name|usageInfo
init|=
name|cmdEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"   -help"
operator|+
literal|" [cmd]\n"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Displays format of commands.    *    * @param cmd The command that is being executed.    */
DECL|method|printUsage (String cmd)
specifier|private
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|StringBuilder
name|usageBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|NODE_ATTRIB_USAGE
operator|.
name|containsKey
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|buildIndividualUsageMsg
argument_list|(
name|cmd
argument_list|,
name|usageBuilder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildUsageMsgForAllCmds
argument_list|(
name|usageBuilder
argument_list|)
expr_stmt|;
block|}
name|errOut
operator|.
name|println
argument_list|(
name|usageBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|printUsage ()
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|createAdminProtocol ()
specifier|protected
name|ResourceManagerAdministrationProtocol
name|createAdminProtocol
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ResourceManagerAdministrationProtocol
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
name|addSecurityConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add the requisite security principal settings to the given Configuration,    * returning a copy.    *    * @param conf the original config    * @return a copy with the security settings added    */
DECL|method|addSecurityConfiguration (Configuration conf)
specifier|private
specifier|static
name|Configuration
name|addSecurityConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Make a copy so we don't mutate it. Also use an YarnConfiguration to
comment|// force loading of yarn-site.xml.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|printHelpMsg
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelpMsg
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
try|try
block|{
if|if
condition|(
literal|"-replace"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleNodeAttributeMapping
argument_list|(
name|args
argument_list|,
name|AttributeMappingOperationType
operator|.
name|REPLACE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-add"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleNodeAttributeMapping
argument_list|(
name|args
argument_list|,
name|AttributeMappingOperationType
operator|.
name|ADD
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-remove"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleNodeAttributeMapping
argument_list|(
name|args
argument_list|,
name|AttributeMappingOperationType
operator|.
name|REMOVE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|errOut
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|errOut
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error message, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|errOut
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|errOut
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|errOut
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
DECL|method|handleNodeAttributeMapping (String args[], AttributeMappingOperationType operation)
specifier|private
name|int
name|handleNodeAttributeMapping
parameter_list|(
name|String
name|args
index|[]
parameter_list|,
name|AttributeMappingOperationType
name|operation
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|ParseException
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|operation
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
literal|true
argument_list|,
name|operation
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"failOnUnknownNodes"
argument_list|,
literal|false
argument_list|,
literal|"Fail on unknown nodes."
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|CommandLine
name|cliParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|errOut
operator|.
name|println
argument_list|(
name|NO_MAPPING_ERR_MSG
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|buildNodeLabelsMapFromStr
init|=
name|buildNodeLabelsMapFromStr
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|operation
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|,
name|operation
operator|!=
name|AttributeMappingOperationType
operator|.
name|REPLACE
argument_list|,
name|operation
argument_list|)
decl_stmt|;
name|NodesToAttributesMappingRequest
name|request
init|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|operation
argument_list|,
name|buildNodeLabelsMapFromStr
argument_list|,
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"failOnUnknownNodes"
argument_list|)
argument_list|)
decl_stmt|;
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|adminProtocol
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/**    * args are expected to be of the format    * node1:java(string)=8,ssd(boolean)=false node2:ssd(boolean)=true    */
DECL|method|buildNodeLabelsMapFromStr (String args, boolean validateForAttributes, AttributeMappingOperationType operation)
specifier|private
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|buildNodeLabelsMapFromStr
parameter_list|(
name|String
name|args
parameter_list|,
name|boolean
name|validateForAttributes
parameter_list|,
name|AttributeMappingOperationType
name|operation
parameter_list|)
block|{
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|nodeToAttributesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeToAttributesStr
range|:
name|args
operator|.
name|split
argument_list|(
literal|"[ \n]"
argument_list|)
control|)
block|{
comment|// for each node to attribute mapping
name|nodeToAttributesStr
operator|=
name|nodeToAttributesStr
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeToAttributesStr
operator|.
name|isEmpty
argument_list|()
operator|||
name|nodeToAttributesStr
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeToAttributesStr
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|INVALID_MAPPING_ERR_MSG
operator|+
name|nodeToAttributesStr
argument_list|)
throw|;
block|}
name|String
index|[]
name|nodeToAttributes
init|=
name|nodeToAttributesStr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|nodeToAttributes
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Node name cannot be empty"
argument_list|)
expr_stmt|;
name|String
name|node
init|=
name|nodeToAttributes
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|attributeNameValueType
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|NodeAttribute
argument_list|>
name|attributesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeAttributeType
name|attributeType
init|=
name|NodeAttributeType
operator|.
name|STRING
decl_stmt|;
name|String
name|attributeValue
decl_stmt|;
name|String
name|attributeName
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|attributeNamesMapped
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|attributesStr
index|[]
decl_stmt|;
if|if
condition|(
name|nodeToAttributes
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// fetching multiple attributes for a node
name|attributesStr
operator|=
name|nodeToAttributes
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|attributeStr
range|:
name|attributesStr
control|)
block|{
comment|// get information about each attribute.
name|attributeNameValueType
operator|=
name|attributeStr
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
comment|// to find name
comment|// value
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|attributeNameValueType
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|,
literal|"Attribute name cannot be null or empty"
argument_list|)
expr_stmt|;
name|attributeValue
operator|=
name|attributeNameValueType
operator|.
name|length
operator|>
literal|1
condition|?
name|attributeNameValueType
index|[
literal|1
index|]
else|:
literal|""
expr_stmt|;
name|int
name|indexOfOpenBracket
init|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfOpenBracket
operator|==
operator|-
literal|1
condition|)
block|{
name|attributeName
operator|=
name|attributeNameValueType
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexOfOpenBracket
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute for node "
operator|+
name|node
operator|+
literal|" is not properly configured : "
operator|+
name|attributeStr
argument_list|)
throw|;
block|}
else|else
block|{
comment|// attribute type has been explicitly configured
name|int
name|indexOfCloseBracket
init|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfCloseBracket
operator|==
operator|-
literal|1
operator|||
name|indexOfCloseBracket
operator|<
name|indexOfOpenBracket
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute for node "
operator|+
name|node
operator|+
literal|" is not properly Configured : "
operator|+
name|attributeStr
argument_list|)
throw|;
block|}
name|String
name|attributeTypeStr
decl_stmt|;
name|attributeName
operator|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfOpenBracket
argument_list|)
expr_stmt|;
name|attributeTypeStr
operator|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
name|indexOfOpenBracket
operator|+
literal|1
argument_list|,
name|indexOfCloseBracket
argument_list|)
expr_stmt|;
try|try
block|{
name|attributeType
operator|=
name|NodeAttributeType
operator|.
name|valueOf
argument_list|(
name|attributeTypeStr
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Attribute type configuration : "
operator|+
name|attributeTypeStr
operator|+
literal|" in "
operator|+
name|attributeStr
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|attributeNamesMapped
operator|.
name|contains
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute "
operator|+
name|attributeName
operator|+
literal|" has been mapped more than once in  : "
operator|+
name|nodeToAttributesStr
argument_list|)
throw|;
block|}
comment|// TODO when we support different type of attribute type we need to
comment|// cross verify whether input attributes itself is not violating
comment|// attribute Name to Type mapping.
name|attributesList
operator|.
name|add
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|attributeName
operator|.
name|trim
argument_list|()
argument_list|,
name|attributeType
argument_list|,
name|attributeValue
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|validateForAttributes
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|attributesList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
argument_list|,
literal|"Attributes cannot be null or empty for Operation "
operator|+
name|operation
operator|.
name|name
argument_list|()
operator|+
literal|" on the node "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
name|nodeToAttributesList
operator|.
name|add
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
name|node
argument_list|,
name|attributesList
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeToAttributesList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|NO_MAPPING_ERR_MSG
argument_list|)
throw|;
block|}
return|return
name|nodeToAttributesList
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|NodeAttributesCLI
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

