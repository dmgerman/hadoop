begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|UnrecognizedOptionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAttributesToNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAttributesToNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeAttributesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeAttributesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToAttributesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToAttributesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AttributeMappingOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeToAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodesToAttributesMappingRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * CLI to map attributes to Nodes.  */
end_comment

begin_class
DECL|class|NodeAttributesCLI
specifier|public
class|class
name|NodeAttributesCLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|INVALID_MAPPING_ERR_MSG
specifier|protected
specifier|static
specifier|final
name|String
name|INVALID_MAPPING_ERR_MSG
init|=
literal|"Invalid Node to attribute mapping : "
decl_stmt|;
DECL|field|USAGE_YARN_NODE_ATTRIBUTES
specifier|protected
specifier|static
specifier|final
name|String
name|USAGE_YARN_NODE_ATTRIBUTES
init|=
literal|"Usage: yarn nodeattributes "
decl_stmt|;
DECL|field|MISSING_ARGUMENT
specifier|protected
specifier|static
specifier|final
name|String
name|MISSING_ARGUMENT
init|=
literal|"Missing argument for command"
decl_stmt|;
DECL|field|NO_MAPPING_ERR_MSG
specifier|protected
specifier|static
specifier|final
name|String
name|NO_MAPPING_ERR_MSG
init|=
literal|"No node-to-attributes mappings are specified"
decl_stmt|;
DECL|field|DEFAULT_SEPARATOR
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SEPARATOR
init|=
name|System
operator|.
name|lineSeparator
argument_list|()
decl_stmt|;
DECL|field|INVALID_COMMAND_USAGE
specifier|public
specifier|static
specifier|final
name|String
name|INVALID_COMMAND_USAGE
init|=
literal|"Invalid Command Usage : "
decl_stmt|;
comment|/**    * Output stream for errors, for use in tests.    */
DECL|field|errOut
specifier|private
name|PrintStream
name|errOut
init|=
name|System
operator|.
name|err
decl_stmt|;
DECL|method|NodeAttributesCLI ()
specifier|public
name|NodeAttributesCLI
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|setErrOut (PrintStream errOut)
specifier|protected
name|void
name|setErrOut
parameter_list|(
name|PrintStream
name|errOut
parameter_list|)
block|{
name|this
operator|.
name|errOut
operator|=
name|errOut
expr_stmt|;
block|}
DECL|method|getAdminCommandHandler ()
specifier|protected
name|AdminCommandHandler
name|getAdminCommandHandler
parameter_list|()
block|{
return|return
operator|new
name|AdminCommandHandler
argument_list|()
return|;
block|}
DECL|method|getClientCommandHandler ()
specifier|protected
name|ClientCommandHandler
name|getClientCommandHandler
parameter_list|()
block|{
return|return
operator|new
name|ClientCommandHandler
argument_list|()
return|;
block|}
DECL|method|printUsage (String cmd, boolean desc, CommandHandler... handlers)
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|,
name|boolean
name|desc
parameter_list|,
name|CommandHandler
modifier|...
name|handlers
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|StringBuilder
name|usageBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|usageBuilder
operator|.
name|append
argument_list|(
name|USAGE_YARN_NODE_ATTRIBUTES
argument_list|)
expr_stmt|;
name|boolean
name|satisfied
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CommandHandler
name|cmdHandlers
range|:
name|handlers
control|)
block|{
name|satisfied
operator||=
name|cmdHandlers
operator|.
name|getHelp
argument_list|(
name|cmd
argument_list|,
name|usageBuilder
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|satisfied
condition|)
block|{
name|printUsage
argument_list|(
name|desc
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|print
argument_list|(
name|usageBuilder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printUsage (boolean desc, CommandHandler... handlers)
specifier|private
name|void
name|printUsage
parameter_list|(
name|boolean
name|desc
parameter_list|,
name|CommandHandler
modifier|...
name|handlers
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|StringBuilder
name|usageBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|usageBuilder
operator|.
name|append
argument_list|(
name|USAGE_YARN_NODE_ATTRIBUTES
argument_list|)
expr_stmt|;
for|for
control|(
name|CommandHandler
name|cmdHandlers
range|:
name|handlers
control|)
block|{
name|cmdHandlers
operator|.
name|getHelp
argument_list|(
name|usageBuilder
argument_list|,
name|desc
argument_list|)
expr_stmt|;
block|}
comment|// append help with usage
name|usageBuilder
operator|.
name|append
argument_list|(
name|DEFAULT_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|" -help [cmd] List help of commands"
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|usageBuilder
argument_list|)
expr_stmt|;
block|}
DECL|method|print (StringBuilder usageBuilder)
specifier|private
name|void
name|print
parameter_list|(
name|StringBuilder
name|usageBuilder
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|pw
operator|.
name|write
argument_list|(
name|usageBuilder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|errOut
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|buildOptions (CommandHandler... handlers)
specifier|private
name|Options
name|buildOptions
parameter_list|(
name|CommandHandler
modifier|...
name|handlers
parameter_list|)
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
for|for
control|(
name|CommandHandler
name|handler
range|:
name|handlers
control|)
block|{
name|Options
name|handlerOpts
init|=
name|handler
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|handlerOpts
operator|.
name|getOptions
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|option
lambda|->
name|opts
operator|.
name|addOption
argument_list|(
operator|(
name|Option
operator|)
name|option
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|opts
return|;
block|}
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|AdminCommandHandler
name|adminCmdHandler
init|=
name|getAdminCommandHandler
argument_list|()
decl_stmt|;
name|ClientCommandHandler
name|clientCmdHandler
init|=
name|getClientCommandHandler
argument_list|()
decl_stmt|;
comment|// Build options
name|Options
name|opts
init|=
name|buildOptions
argument_list|(
name|adminCmdHandler
argument_list|,
name|clientCmdHandler
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|false
argument_list|,
name|adminCmdHandler
argument_list|,
name|clientCmdHandler
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// Handle command separate
if|if
condition|(
name|handleHelpCommand
argument_list|(
name|args
argument_list|,
name|adminCmdHandler
argument_list|,
name|clientCmdHandler
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
name|CommandLine
name|cliParser
decl_stmt|;
name|CommandHandler
name|handler
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|handler
operator|=
name|adminCmdHandler
operator|.
name|canHandleCommand
argument_list|(
name|cliParser
argument_list|)
condition|?
name|adminCmdHandler
else|:
name|clientCmdHandler
operator|.
name|canHandleCommand
argument_list|(
name|cliParser
argument_list|)
condition|?
name|clientCmdHandler
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|errOut
operator|.
name|println
argument_list|(
name|INVALID_COMMAND_USAGE
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|false
argument_list|,
name|adminCmdHandler
argument_list|,
name|clientCmdHandler
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
else|else
block|{
return|return
name|handler
operator|.
name|handleCommand
argument_list|(
name|cliParser
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|UnrecognizedOptionException
name|e
parameter_list|)
block|{
name|errOut
operator|.
name|println
argument_list|(
name|INVALID_COMMAND_USAGE
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|false
argument_list|,
name|adminCmdHandler
argument_list|,
name|clientCmdHandler
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|errOut
operator|.
name|println
argument_list|(
name|MISSING_ARGUMENT
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|true
argument_list|,
name|adminCmdHandler
argument_list|,
name|clientCmdHandler
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|errOut
operator|.
name|println
argument_list|(
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// print admin command detail
name|printUsage
argument_list|(
literal|true
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errOut
operator|.
name|println
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|true
argument_list|,
name|handler
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
DECL|method|handleHelpCommand (String[] args, CommandHandler... handlers)
specifier|private
name|boolean
name|handleHelpCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|CommandHandler
modifier|...
name|handlers
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|(
literal|true
argument_list|,
name|handlers
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|NodeAttributesCLI
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Abstract class for command handler.    */
DECL|class|CommandHandler
specifier|public
specifier|static
specifier|abstract
class|class
name|CommandHandler
extends|extends
name|Configured
block|{
DECL|field|options
specifier|private
name|Options
name|options
decl_stmt|;
DECL|field|order
specifier|private
name|LinkedList
argument_list|<
name|String
argument_list|>
name|order
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|header
specifier|private
name|String
name|header
decl_stmt|;
DECL|method|CommandHandler (String header)
specifier|protected
name|CommandHandler
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
block|}
DECL|method|CommandHandler (Configuration conf)
specifier|protected
name|CommandHandler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|options
operator|=
name|buildOptions
argument_list|()
expr_stmt|;
block|}
DECL|method|canHandleCommand (CommandLine parse)
specifier|public
name|boolean
name|canHandleCommand
parameter_list|(
name|CommandLine
name|parse
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Option
argument_list|>
name|arrayList
init|=
operator|new
name|ArrayList
argument_list|<
name|Option
argument_list|>
argument_list|(
name|options
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|arrayList
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|opt
lambda|->
name|parse
operator|.
name|hasOption
argument_list|(
name|opt
operator|.
name|getOpt
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|handleCommand (CommandLine parse)
specifier|public
specifier|abstract
name|int
name|handleCommand
parameter_list|(
name|CommandLine
name|parse
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
DECL|method|buildOptions ()
specifier|public
specifier|abstract
name|Options
name|buildOptions
parameter_list|()
function_decl|;
DECL|method|getOptions ()
specifier|public
name|Options
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
DECL|method|getHelp (String cmd, StringBuilder strcnd, boolean addDesc)
specifier|public
name|boolean
name|getHelp
parameter_list|(
name|String
name|cmd
parameter_list|,
name|StringBuilder
name|strcnd
parameter_list|,
name|boolean
name|addDesc
parameter_list|)
block|{
name|Option
name|opt
init|=
name|options
operator|.
name|getOption
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|!=
literal|null
condition|)
block|{
name|strcnd
operator|.
name|append
argument_list|(
name|DEFAULT_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|" -"
argument_list|)
operator|.
name|append
argument_list|(
name|opt
operator|.
name|getOpt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|hasArg
argument_list|()
condition|)
block|{
name|strcnd
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|opt
operator|.
name|getArgName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addDesc
condition|)
block|{
name|strcnd
operator|.
name|append
argument_list|(
name|DEFAULT_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
operator|.
name|append
argument_list|(
name|opt
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|opt
operator|==
literal|null
return|;
block|}
DECL|method|getHelp (StringBuilder builder, boolean description)
specifier|public
name|void
name|getHelp
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|boolean
name|description
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|DEFAULT_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|DEFAULT_SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|option
range|:
name|order
control|)
block|{
name|getHelp
argument_list|(
name|option
argument_list|,
name|builder
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addOrder (String key)
specifier|protected
name|void
name|addOrder
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|order
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Client commands handler.    */
DECL|class|ClientCommandHandler
specifier|public
specifier|static
class|class
name|ClientCommandHandler
extends|extends
name|CommandHandler
block|{
DECL|field|LIST_ALL_ATTRS
specifier|private
specifier|static
specifier|final
name|String
name|LIST_ALL_ATTRS
init|=
literal|"list"
decl_stmt|;
DECL|field|NODESTOATTR
specifier|private
specifier|static
specifier|final
name|String
name|NODESTOATTR
init|=
literal|"nodestoattributes"
decl_stmt|;
DECL|field|NODES
specifier|private
specifier|static
specifier|final
name|String
name|NODES
init|=
literal|"nodes"
decl_stmt|;
DECL|field|ATTRTONODES
specifier|private
specifier|static
specifier|final
name|String
name|ATTRTONODES
init|=
literal|"attributestonodes"
decl_stmt|;
DECL|field|ATTRIBUTES
specifier|private
specifier|static
specifier|final
name|String
name|ATTRIBUTES
init|=
literal|"attributes"
decl_stmt|;
DECL|field|SPLITPATTERN
specifier|public
specifier|static
specifier|final
name|String
name|SPLITPATTERN
init|=
literal|"/"
decl_stmt|;
DECL|field|NODEATTRIBUTE
specifier|private
specifier|static
specifier|final
name|String
name|NODEATTRIBUTE
init|=
literal|"%40s\t%10s\t%20s"
operator|+
name|DEFAULT_SEPARATOR
decl_stmt|;
DECL|field|NODEATTRIBUTEINFO
specifier|private
specifier|static
specifier|final
name|String
name|NODEATTRIBUTEINFO
init|=
literal|"%40s\t%15s"
operator|+
name|DEFAULT_SEPARATOR
decl_stmt|;
DECL|field|HOSTNAMEVAL
specifier|private
specifier|static
specifier|final
name|String
name|HOSTNAMEVAL
init|=
literal|"%40s\t%15s"
operator|+
name|DEFAULT_SEPARATOR
decl_stmt|;
DECL|field|sysOut
specifier|private
name|PrintStream
name|sysOut
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|method|ClientCommandHandler ()
specifier|public
name|ClientCommandHandler
parameter_list|()
block|{
name|super
argument_list|(
literal|"Client Commands:"
argument_list|)
expr_stmt|;
block|}
DECL|method|setSysOut (PrintStream out)
specifier|public
name|void
name|setSysOut
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|sysOut
operator|=
name|out
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleCommand (CommandLine parse)
specifier|public
name|int
name|handleCommand
parameter_list|(
name|CommandLine
name|parse
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|parse
operator|.
name|hasOption
argument_list|(
name|LIST_ALL_ATTRS
argument_list|)
condition|)
block|{
return|return
name|printClusterAttributes
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|parse
operator|.
name|hasOption
argument_list|(
name|NODESTOATTR
argument_list|)
condition|)
block|{
name|String
index|[]
name|nodes
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|parse
operator|.
name|hasOption
argument_list|(
name|NODES
argument_list|)
condition|)
block|{
name|nodes
operator|=
name|parse
operator|.
name|getOptionValues
argument_list|(
name|NODES
argument_list|)
expr_stmt|;
block|}
return|return
name|printAttributesByNode
argument_list|(
name|nodes
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|parse
operator|.
name|hasOption
argument_list|(
name|ATTRTONODES
argument_list|)
condition|)
block|{
name|String
index|[]
name|attrKeys
init|=
block|{}
decl_stmt|;
if|if
condition|(
name|parse
operator|.
name|hasOption
argument_list|(
name|ATTRIBUTES
argument_list|)
condition|)
block|{
name|attrKeys
operator|=
name|parse
operator|.
name|getOptionValues
argument_list|(
name|ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
return|return
name|printNodesByAttributes
argument_list|(
name|attrKeys
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|createApplicationProtocol ()
specifier|protected
name|ApplicationClientProtocol
name|createApplicationProtocol
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|printNodesByAttributes (String[] attrs)
specifier|public
name|int
name|printNodesByAttributes
parameter_list|(
name|String
index|[]
name|attrs
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationClientProtocol
name|protocol
init|=
name|createApplicationProtocol
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|NodeAttributeKey
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attr
range|:
name|attrs
control|)
block|{
name|String
index|[]
name|attrFields
init|=
name|attr
operator|.
name|split
argument_list|(
name|SPLITPATTERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrFields
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|NodeAttributeKey
operator|.
name|newInstance
argument_list|(
name|attrFields
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attrFields
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|NodeAttributeKey
operator|.
name|newInstance
argument_list|(
name|attrFields
index|[
literal|0
index|]
argument_list|,
name|attrFields
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|" Attribute format not correct. Should be<[prefix]/[name]> :"
operator|+
name|attr
argument_list|)
throw|;
block|}
block|}
name|GetAttributesToNodesRequest
name|request
init|=
name|GetAttributesToNodesRequest
operator|.
name|newInstance
argument_list|(
name|set
argument_list|)
decl_stmt|;
name|GetAttributesToNodesResponse
name|response
init|=
name|protocol
operator|.
name|getAttributesToNodes
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|format
argument_list|(
name|HOSTNAMEVAL
argument_list|,
literal|"Hostname"
argument_list|,
literal|"Attribute-value"
argument_list|)
expr_stmt|;
name|response
operator|.
name|getAttributesToNodes
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|attributeKey
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|writer
operator|.
name|println
argument_list|(
name|getKeyString
argument_list|(
name|attributeKey
argument_list|)
operator|+
literal|" :"
argument_list|)
expr_stmt|;
name|v
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|attrVal
lambda|->
name|writer
operator|.
name|format
argument_list|(
name|HOSTNAMEVAL
argument_list|,
name|attrVal
operator|.
name|getHostname
argument_list|()
argument_list|,
name|attrVal
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysOut
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|printAttributesByNode (String[] nodeArray)
specifier|private
name|int
name|printAttributesByNode
parameter_list|(
name|String
index|[]
name|nodeArray
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationClientProtocol
name|protocol
init|=
name|createApplicationProtocol
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nodeArray
argument_list|)
argument_list|)
decl_stmt|;
name|GetNodesToAttributesRequest
name|request
init|=
name|GetNodesToAttributesRequest
operator|.
name|newInstance
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
name|GetNodesToAttributesResponse
name|response
init|=
name|protocol
operator|.
name|getNodesToAttributes
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeToAttrs
init|=
name|response
operator|.
name|getNodeToAttributes
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|printf
argument_list|(
name|NODEATTRIBUTE
argument_list|,
literal|"Attribute"
argument_list|,
literal|"Type"
argument_list|,
literal|"Value"
argument_list|)
expr_stmt|;
name|nodeToAttrs
operator|.
name|forEach
argument_list|(
parameter_list|(
name|node
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
comment|// print node header
name|writer
operator|.
name|println
argument_list|(
name|node
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|v
operator|.
name|iterator
argument_list|()
operator|.
name|forEachRemaining
argument_list|(
name|attr
lambda|->
name|writer
operator|.
name|format
argument_list|(
name|NODEATTRIBUTE
argument_list|,
name|getKeyString
argument_list|(
name|attr
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
argument_list|,
name|attr
operator|.
name|getAttributeType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|attr
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysOut
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|printClusterAttributes ()
specifier|private
name|int
name|printClusterAttributes
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ApplicationClientProtocol
name|protocol
init|=
name|createApplicationProtocol
argument_list|()
decl_stmt|;
name|GetClusterNodeAttributesRequest
name|request
init|=
name|GetClusterNodeAttributesRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetClusterNodeAttributesResponse
name|response
init|=
name|protocol
operator|.
name|getClusterNodeAttributes
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|format
argument_list|(
name|NODEATTRIBUTEINFO
argument_list|,
literal|"Attribute"
argument_list|,
literal|"Type"
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeAttributeInfo
name|attr
range|:
name|response
operator|.
name|getNodeAttributes
argument_list|()
control|)
block|{
name|writer
operator|.
name|format
argument_list|(
name|NODEATTRIBUTEINFO
argument_list|,
name|getKeyString
argument_list|(
name|attr
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
argument_list|,
name|attr
operator|.
name|getAttributeType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysOut
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|getKeyString (NodeAttributeKey key)
specifier|private
name|String
name|getKeyString
parameter_list|(
name|NodeAttributeKey
name|key
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|key
operator|.
name|getAttributePrefix
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|key
operator|.
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|buildOptions ()
specifier|public
name|Options
name|buildOptions
parameter_list|()
block|{
name|Options
name|clientOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|clientOptions
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|LIST_ALL_ATTRS
argument_list|,
literal|false
argument_list|,
literal|"List all attributes in cluster"
argument_list|)
argument_list|)
expr_stmt|;
comment|// group by command
name|OptionGroup
name|nodeToAttr
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|Option
name|attrtonodes
init|=
operator|new
name|Option
argument_list|(
name|NODESTOATTR
argument_list|,
literal|false
argument_list|,
literal|"Lists all mapping to nodes to attributes"
argument_list|)
decl_stmt|;
name|Option
name|nodes
init|=
operator|new
name|Option
argument_list|(
name|NODES
argument_list|,
literal|"Works with ["
operator|+
name|LIST_ALL_ATTRS
operator|+
literal|"] to specify node hostnames "
operator|+
literal|"whose mappings are required to be displayed."
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|setValueSeparator
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|setArgName
argument_list|(
literal|"Host Names"
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|setArgs
argument_list|(
name|Option
operator|.
name|UNLIMITED_VALUES
argument_list|)
expr_stmt|;
name|nodeToAttr
operator|.
name|addOption
argument_list|(
name|attrtonodes
argument_list|)
expr_stmt|;
name|nodeToAttr
operator|.
name|addOption
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|clientOptions
operator|.
name|addOptionGroup
argument_list|(
name|nodeToAttr
argument_list|)
expr_stmt|;
comment|// Defines as groups to add extendability for later
name|OptionGroup
name|attrToNodes
init|=
operator|new
name|OptionGroup
argument_list|()
decl_stmt|;
name|attrToNodes
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|ATTRTONODES
argument_list|,
literal|false
argument_list|,
literal|"Displays mapping of "
operator|+
literal|"attributes to nodes and attribute values grouped by "
operator|+
literal|"attributes"
argument_list|)
argument_list|)
expr_stmt|;
name|Option
name|attrs
init|=
operator|new
name|Option
argument_list|(
name|ATTRIBUTES
argument_list|,
literal|"Works with ["
operator|+
name|ATTRTONODES
operator|+
literal|"] to specify attributes whose mapping "
operator|+
literal|"are required to be displayed."
argument_list|)
decl_stmt|;
name|attrs
operator|.
name|setValueSeparator
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|setArgName
argument_list|(
literal|"Attributes"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|setArgs
argument_list|(
name|Option
operator|.
name|UNLIMITED_VALUES
argument_list|)
expr_stmt|;
name|attrToNodes
operator|.
name|addOption
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
name|clientOptions
operator|.
name|addOptionGroup
argument_list|(
name|attrToNodes
argument_list|)
expr_stmt|;
comment|// DEFINE ORDER
name|addOrder
argument_list|(
name|LIST_ALL_ATTRS
argument_list|)
expr_stmt|;
name|addOrder
argument_list|(
name|NODESTOATTR
argument_list|)
expr_stmt|;
name|addOrder
argument_list|(
name|NODES
argument_list|)
expr_stmt|;
name|addOrder
argument_list|(
name|ATTRTONODES
argument_list|)
expr_stmt|;
name|addOrder
argument_list|(
name|ATTRIBUTES
argument_list|)
expr_stmt|;
return|return
name|clientOptions
return|;
block|}
block|}
comment|/**    * Admin commands handler.    */
DECL|class|AdminCommandHandler
specifier|public
specifier|static
class|class
name|AdminCommandHandler
extends|extends
name|CommandHandler
block|{
DECL|field|ADD
specifier|private
specifier|static
specifier|final
name|String
name|ADD
init|=
literal|"add"
decl_stmt|;
DECL|field|REMOVE
specifier|private
specifier|static
specifier|final
name|String
name|REMOVE
init|=
literal|"remove"
decl_stmt|;
DECL|field|REPLACE
specifier|private
specifier|static
specifier|final
name|String
name|REPLACE
init|=
literal|"replace"
decl_stmt|;
DECL|field|FAILUNKNOWNNODES
specifier|private
specifier|static
specifier|final
name|String
name|FAILUNKNOWNNODES
init|=
literal|"failOnUnknownNodes"
decl_stmt|;
DECL|method|AdminCommandHandler ()
name|AdminCommandHandler
parameter_list|()
block|{
name|super
argument_list|(
literal|"Admin Commands:"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|buildOptions ()
specifier|public
name|Options
name|buildOptions
parameter_list|()
block|{
name|Options
name|adminOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Option
name|replace
init|=
operator|new
name|Option
argument_list|(
name|REPLACE
argument_list|,
literal|true
argument_list|,
literal|"Replace the node to attributes mapping information at the"
operator|+
literal|" ResourceManager with the new mapping. Currently"
operator|+
literal|" supported attribute type. And string is the default"
operator|+
literal|" type too. Attribute value if not specified for string"
operator|+
literal|" type value will be considered as empty string."
operator|+
literal|" Replaced node-attributes should not violate the"
operator|+
literal|" existing attribute to attribute type mapping."
argument_list|)
decl_stmt|;
name|replace
operator|.
name|setArgName
argument_list|(
literal|"\"node1:attribute[(type)][=value],attribute1[=value],"
operator|+
literal|"attribute2  node2:attribute2[=value],attribute3\""
argument_list|)
expr_stmt|;
name|replace
operator|.
name|setArgs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adminOptions
operator|.
name|addOption
argument_list|(
name|replace
argument_list|)
expr_stmt|;
name|Option
name|add
init|=
operator|new
name|Option
argument_list|(
name|ADD
argument_list|,
literal|true
argument_list|,
literal|"Adds or updates the node to attributes mapping information"
operator|+
literal|" at the ResourceManager. Currently supported attribute"
operator|+
literal|" type is string. And string is the default type too."
operator|+
literal|" Attribute value if not specified for string type"
operator|+
literal|" value will be considered as empty string. Added or"
operator|+
literal|" updated node-attributes should not violate the"
operator|+
literal|" existing attribute to attribute type mapping."
argument_list|)
decl_stmt|;
name|add
operator|.
name|setArgName
argument_list|(
literal|"\"node1:attribute[(type)][=value],attribute1[=value],"
operator|+
literal|"attribute2  node2:attribute2[=value],attribute3\""
argument_list|)
expr_stmt|;
name|add
operator|.
name|setArgs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adminOptions
operator|.
name|addOption
argument_list|(
name|add
argument_list|)
expr_stmt|;
name|Option
name|remove
init|=
operator|new
name|Option
argument_list|(
name|REMOVE
argument_list|,
literal|true
argument_list|,
literal|"Removes the specified node to attributes mapping"
operator|+
literal|" information at the ResourceManager"
argument_list|)
decl_stmt|;
name|remove
operator|.
name|setArgName
argument_list|(
literal|"\"node1:attribute,attribute1 node2:attribute2\""
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setArgs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|adminOptions
operator|.
name|addOption
argument_list|(
name|remove
argument_list|)
expr_stmt|;
name|adminOptions
operator|.
name|addOption
argument_list|(
operator|new
name|Option
argument_list|(
name|FAILUNKNOWNNODES
argument_list|,
literal|false
argument_list|,
literal|"Can be used optionally along with [add,remove,replace] options. "
operator|+
literal|"When set, command will fail if specified nodes are unknown."
argument_list|)
argument_list|)
expr_stmt|;
comment|// DEFINE ORDER
name|addOrder
argument_list|(
name|REPLACE
argument_list|)
expr_stmt|;
name|addOrder
argument_list|(
name|ADD
argument_list|)
expr_stmt|;
name|addOrder
argument_list|(
name|REMOVE
argument_list|)
expr_stmt|;
name|addOrder
argument_list|(
name|FAILUNKNOWNNODES
argument_list|)
expr_stmt|;
return|return
name|adminOptions
return|;
block|}
DECL|method|createAdminProtocol ()
specifier|protected
name|ResourceManagerAdministrationProtocol
name|createAdminProtocol
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ResourceManagerAdministrationProtocol
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|handleCommand (CommandLine cliParser)
specifier|public
name|int
name|handleCommand
parameter_list|(
name|CommandLine
name|cliParser
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|String
name|operation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|ADD
argument_list|)
condition|)
block|{
name|operation
operator|=
name|ADD
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|REMOVE
argument_list|)
condition|)
block|{
name|operation
operator|=
name|REMOVE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|REPLACE
argument_list|)
condition|)
block|{
name|operation
operator|=
name|REPLACE
expr_stmt|;
block|}
if|if
condition|(
name|operation
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|buildNodeLabelsListFromStr
init|=
name|buildNodeLabelsListFromStr
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|operation
argument_list|)
argument_list|,
operator|!
name|operation
operator|.
name|equals
argument_list|(
name|REPLACE
argument_list|)
argument_list|,
name|operation
argument_list|)
decl_stmt|;
name|NodesToAttributesMappingRequest
name|request
init|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|AttributeMappingOperationType
operator|.
name|valueOf
argument_list|(
name|operation
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|,
name|buildNodeLabelsListFromStr
argument_list|,
name|cliParser
operator|.
name|hasOption
argument_list|(
name|FAILUNKNOWNNODES
argument_list|)
argument_list|)
decl_stmt|;
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|adminProtocol
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Handle case for only failOnUnknownNodes passed
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|getOptions
argument_list|()
operator|.
name|getOption
argument_list|(
name|FAILUNKNOWNNODES
argument_list|)
operator|.
name|getDescription
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|0
return|;
block|}
comment|/**      * args are expected to be of the format      * node1:java(string)=8,ssd(boolean)=false node2:ssd(boolean)=true.      */
DECL|method|buildNodeLabelsListFromStr (String args, boolean validateForAttributes, String operation)
specifier|private
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|buildNodeLabelsListFromStr
parameter_list|(
name|String
name|args
parameter_list|,
name|boolean
name|validateForAttributes
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|NodeToAttributes
argument_list|>
name|nodeToAttributesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeToAttributesStr
range|:
name|args
operator|.
name|split
argument_list|(
literal|"[ \n]"
argument_list|)
control|)
block|{
comment|// for each node to attribute mapping
name|nodeToAttributesStr
operator|=
name|nodeToAttributesStr
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeToAttributesStr
operator|.
name|isEmpty
argument_list|()
operator|||
name|nodeToAttributesStr
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeToAttributesStr
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|INVALID_MAPPING_ERR_MSG
operator|+
name|nodeToAttributesStr
argument_list|)
throw|;
block|}
name|String
index|[]
name|nodeToAttributes
init|=
name|nodeToAttributesStr
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|nodeToAttributes
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Node name cannot be empty"
argument_list|)
expr_stmt|;
name|String
name|node
init|=
name|nodeToAttributes
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|attributeNameValueType
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|NodeAttribute
argument_list|>
name|attributesList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|NodeAttributeType
name|attributeType
init|=
name|NodeAttributeType
operator|.
name|STRING
decl_stmt|;
name|String
name|attributeValue
decl_stmt|;
name|String
name|attributeName
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|attributeNamesMapped
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|attributesStr
decl_stmt|;
if|if
condition|(
name|nodeToAttributes
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// fetching multiple attributes for a node
name|attributesStr
operator|=
name|nodeToAttributes
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|attributeStr
range|:
name|attributesStr
control|)
block|{
comment|// get information about each attribute.
name|attributeNameValueType
operator|=
name|attributeStr
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
comment|// to find name
comment|// value
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
operator|(
name|attributeNameValueType
index|[
literal|0
index|]
operator|==
literal|null
operator|||
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
operator|)
argument_list|,
literal|"Attribute name cannot be null or empty"
argument_list|)
expr_stmt|;
name|attributeValue
operator|=
name|attributeNameValueType
operator|.
name|length
operator|>
literal|1
condition|?
name|attributeNameValueType
index|[
literal|1
index|]
else|:
literal|""
expr_stmt|;
name|int
name|indexOfOpenBracket
init|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfOpenBracket
operator|==
operator|-
literal|1
condition|)
block|{
name|attributeName
operator|=
name|attributeNameValueType
index|[
literal|0
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|indexOfOpenBracket
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute for node "
operator|+
name|node
operator|+
literal|" is not properly configured : "
operator|+
name|attributeStr
argument_list|)
throw|;
block|}
else|else
block|{
comment|// attribute type has been explicitly configured
name|int
name|indexOfCloseBracket
init|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexOfCloseBracket
operator|==
operator|-
literal|1
operator|||
name|indexOfCloseBracket
operator|<
name|indexOfOpenBracket
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute for node "
operator|+
name|node
operator|+
literal|" is not properly Configured : "
operator|+
name|attributeStr
argument_list|)
throw|;
block|}
name|String
name|attributeTypeStr
decl_stmt|;
name|attributeName
operator|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|indexOfOpenBracket
argument_list|)
expr_stmt|;
name|attributeTypeStr
operator|=
name|attributeNameValueType
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
name|indexOfOpenBracket
operator|+
literal|1
argument_list|,
name|indexOfCloseBracket
argument_list|)
expr_stmt|;
try|try
block|{
name|attributeType
operator|=
name|NodeAttributeType
operator|.
name|valueOf
argument_list|(
name|attributeTypeStr
operator|.
name|trim
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid Attribute type configuration : "
operator|+
name|attributeTypeStr
operator|+
literal|" in "
operator|+
name|attributeStr
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|attributeNamesMapped
operator|.
name|contains
argument_list|(
name|attributeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Attribute "
operator|+
name|attributeName
operator|+
literal|" has been mapped more than once in  : "
operator|+
name|nodeToAttributesStr
argument_list|)
throw|;
block|}
comment|// TODO when we support different type of attribute type we need to
comment|// cross verify whether input attributes itself is not violating
comment|// attribute Name to Type mapping.
name|attributesList
operator|.
name|add
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
name|attributeName
operator|.
name|trim
argument_list|()
argument_list|,
name|attributeType
argument_list|,
name|attributeValue
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|validateForAttributes
condition|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|attributesList
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
argument_list|,
literal|"Attributes cannot be null or empty for Operation ["
operator|+
name|operation
operator|+
literal|"] on the node "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
name|nodeToAttributesMap
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
name|node
argument_list|,
name|attributesList
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeToAttributesMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|NO_MAPPING_ERR_MSG
argument_list|)
throw|;
block|}
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|nodeToAttributesMap
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
name|addSecurityConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add the requisite security principal settings to the given Configuration,      * returning a copy.      *      * @param conf the original config      * @return a copy with the security settings added      */
DECL|method|addSecurityConfiguration (Configuration conf)
specifier|private
name|Configuration
name|addSecurityConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Make a copy so we don't mutate it. Also use an YarnConfiguration to
comment|// force loading of yarn-site.xml.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
block|}
end_class

end_unit

