begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * It manages NMTokens required for communicating with Node manager. Its a  * static token cache.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|NMTokenCache
specifier|public
class|class
name|NMTokenCache
block|{
DECL|field|nmTokens
specifier|private
specifier|static
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
name|nmTokens
decl_stmt|;
static|static
block|{
name|nmTokens
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Token
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns NMToken, null if absent    * @param nodeAddr    * @return {@link Token} NMToken required for communicating with node    * manager    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|getNMToken (String nodeAddr)
specifier|public
specifier|static
name|Token
name|getNMToken
parameter_list|(
name|String
name|nodeAddr
parameter_list|)
block|{
return|return
name|nmTokens
operator|.
name|get
argument_list|(
name|nodeAddr
argument_list|)
return|;
block|}
comment|/**    * Sets the NMToken for node address    * @param nodeAddr node address (host:port)    * @param token NMToken    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|setNMToken (String nodeAddr, Token token)
specifier|public
specifier|static
name|void
name|setNMToken
parameter_list|(
name|String
name|nodeAddr
parameter_list|,
name|Token
name|token
parameter_list|)
block|{
name|nmTokens
operator|.
name|put
argument_list|(
name|nodeAddr
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns true if NMToken is present in cache.    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|containsNMToken (String nodeAddr)
specifier|public
specifier|static
name|boolean
name|containsNMToken
parameter_list|(
name|String
name|nodeAddr
parameter_list|)
block|{
return|return
name|nmTokens
operator|.
name|containsKey
argument_list|(
name|nodeAddr
argument_list|)
return|;
block|}
comment|/**    * Returns the number of NMTokens present in cache.    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|numberOfNMTokensInCache ()
specifier|public
specifier|static
name|int
name|numberOfNMTokensInCache
parameter_list|()
block|{
return|return
name|nmTokens
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Removes NMToken for specified node manager    * @param nodeAddr node address (host:port)    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|removeNMToken (String nodeAddr)
specifier|public
specifier|static
name|void
name|removeNMToken
parameter_list|(
name|String
name|nodeAddr
parameter_list|)
block|{
name|nmTokens
operator|.
name|remove
argument_list|(
name|nodeAddr
argument_list|)
expr_stmt|;
block|}
comment|/**    * It will remove all the nm tokens from its cache    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|clearCache ()
specifier|public
specifier|static
name|void
name|clearCache
parameter_list|()
block|{
name|nmTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

