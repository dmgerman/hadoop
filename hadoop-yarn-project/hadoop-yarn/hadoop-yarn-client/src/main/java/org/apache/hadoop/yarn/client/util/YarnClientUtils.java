begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * This class is a container for utility methods that are useful when creating  * YARN clients.  */
end_comment

begin_class
DECL|class|YarnClientUtils
specifier|public
specifier|abstract
class|class
name|YarnClientUtils
block|{
comment|/**    * Look up and return the resource manager's principal. This method    * automatically does the<code>_HOST</code> replacement in the principal and    * correctly handles HA resource manager configurations.    *    * @param conf the {@link Configuration} file from which to read the    * principal    * @return the resource manager's principal string or null if the    * {@link YarnConfiguration#RM_PRINCIPAL} property is not set in the    * {@code conf} parameter    * @throws IOException thrown if there's an error replacing the host name    */
DECL|method|getRmPrincipal (Configuration conf)
specifier|public
specifier|static
name|String
name|getRmPrincipal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|principal
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|prepared
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
name|prepared
operator|=
name|getRmPrincipal
argument_list|(
name|principal
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|prepared
return|;
block|}
comment|/**    * Perform the<code>_HOST</code> replacement in the {@code principal},    * Returning the result. Correctly handles HA resource manager configurations.    *    * @param rmPrincipal the principal string to prepare    * @param conf the configuration    * @return the prepared principal string    * @throws IOException thrown if there's an error replacing the host name    */
DECL|method|getRmPrincipal (String rmPrincipal, Configuration conf)
specifier|public
specifier|static
name|String
name|getRmPrincipal
parameter_list|(
name|String
name|rmPrincipal
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rmPrincipal
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"RM principal string is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|=
name|getYarnConfWithRmHaId
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|String
name|hostname
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
operator|.
name|getHostName
argument_list|()
decl_stmt|;
return|return
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|rmPrincipal
argument_list|,
name|hostname
argument_list|)
return|;
block|}
comment|/**    * Returns a {@link YarnConfiguration} built from the {@code conf} parameter    * that is guaranteed to have the {@link YarnConfiguration#RM_HA_ID}    * property set.    *    * @param conf the base configuration    * @return a {@link YarnConfiguration} built from the base    * {@link Configuration}    * @throws IOException thrown if the {@code conf} parameter contains    * inconsistent properties    */
annotation|@
name|VisibleForTesting
DECL|method|getYarnConfWithRmHaId (Configuration conf)
specifier|static
name|YarnConfiguration
name|getYarnConfWithRmHaId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// If RM_HA_ID is not configured, use the first of RM_HA_IDS.
comment|// Any valid RM HA ID should work.
name|String
index|[]
name|rmIds
init|=
name|yarnConf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|rmIds
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rmIds
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmIds
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RM_HA_IDS property is not set for HA resource "
operator|+
literal|"manager"
argument_list|)
throw|;
block|}
block|}
return|return
name|yarnConf
return|;
block|}
block|}
end_class

end_unit

