begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is a container for utility methods that are useful when creating  * YARN clients.  */
end_comment

begin_class
DECL|class|YarnClientUtils
specifier|public
specifier|abstract
class|class
name|YarnClientUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnClientUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|BASE_64_CODEC
specifier|private
specifier|static
specifier|final
name|Base64
name|BASE_64_CODEC
init|=
operator|new
name|Base64
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|ADD_LABEL_FORMAT_ERR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|ADD_LABEL_FORMAT_ERR_MSG
init|=
literal|"Input format for adding node-labels is not correct, it should be "
operator|+
literal|"labelName1[(exclusive=true/false)],LabelName2[] .."
decl_stmt|;
DECL|field|NO_LABEL_ERR_MSG
specifier|public
specifier|static
specifier|final
name|String
name|NO_LABEL_ERR_MSG
init|=
literal|"No cluster node-labels are specified"
decl_stmt|;
comment|/**    * Look up and return the resource manager's principal. This method    * automatically does the<code>_HOST</code> replacement in the principal and    * correctly handles HA resource manager configurations.    *    * @param conf the {@link Configuration} file from which to read the    * principal    * @return the resource manager's principal string or null if the    * {@link YarnConfiguration#RM_PRINCIPAL} property is not set in the    * {@code conf} parameter    * @throws IOException thrown if there's an error replacing the host name    */
DECL|method|getRmPrincipal (Configuration conf)
specifier|public
specifier|static
name|String
name|getRmPrincipal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|principal
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|prepared
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
name|prepared
operator|=
name|getRmPrincipal
argument_list|(
name|principal
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|prepared
return|;
block|}
comment|/**    * Perform the<code>_HOST</code> replacement in the {@code principal},    * Returning the result. Correctly handles HA resource manager configurations.    *    * @param rmPrincipal the principal string to prepare    * @param conf the configuration    * @return the prepared principal string    * @throws IOException thrown if there's an error replacing the host name    */
DECL|method|getRmPrincipal (String rmPrincipal, Configuration conf)
specifier|public
specifier|static
name|String
name|getRmPrincipal
parameter_list|(
name|String
name|rmPrincipal
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rmPrincipal
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"RM principal string is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|conf
operator|=
name|getYarnConfWithRmHaId
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|String
name|hostname
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
operator|.
name|getHostName
argument_list|()
decl_stmt|;
return|return
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|rmPrincipal
argument_list|,
name|hostname
argument_list|)
return|;
block|}
comment|/**    * Creates node labels from string    * @param args nodelabels string to be parsed    * @return list of node labels    */
DECL|method|buildNodeLabelsFromStr (String args)
specifier|public
specifier|static
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|buildNodeLabelsFromStr
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|nodeLabels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|args
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|labelName
init|=
name|p
decl_stmt|;
comment|// Try to parse exclusive
name|boolean
name|exclusive
init|=
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_EXCLUSIVITY
decl_stmt|;
name|int
name|leftParenthesisIdx
init|=
name|p
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
name|int
name|rightParenthesisIdx
init|=
name|p
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|leftParenthesisIdx
operator|==
operator|-
literal|1
operator|&&
name|rightParenthesisIdx
operator|!=
operator|-
literal|1
operator|)
operator|||
operator|(
name|leftParenthesisIdx
operator|!=
operator|-
literal|1
operator|&&
name|rightParenthesisIdx
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
comment|// Parentheses not match
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ADD_LABEL_FORMAT_ERR_MSG
argument_list|)
throw|;
block|}
if|if
condition|(
name|leftParenthesisIdx
operator|>
literal|0
operator|&&
name|rightParenthesisIdx
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|leftParenthesisIdx
operator|>
name|rightParenthesisIdx
condition|)
block|{
comment|// Parentheses not match
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ADD_LABEL_FORMAT_ERR_MSG
argument_list|)
throw|;
block|}
name|String
name|property
init|=
name|p
operator|.
name|substring
argument_list|(
name|p
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|+
literal|1
argument_list|,
name|p
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|property
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|property
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|property
operator|.
name|substring
argument_list|(
name|property
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|property
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Now we only support one property, which is exclusive, so check if
comment|// key = exclusive and value = {true/false}
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"exclusive"
argument_list|)
operator|&&
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"true"
argument_list|,
literal|"false"
argument_list|)
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|exclusive
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ADD_LABEL_FORMAT_ERR_MSG
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|property
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ADD_LABEL_FORMAT_ERR_MSG
argument_list|)
throw|;
block|}
block|}
comment|// Try to get labelName if there's "(..)"
if|if
condition|(
name|labelName
operator|.
name|contains
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|labelName
operator|=
name|labelName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|labelName
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|nodeLabels
operator|.
name|add
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
name|labelName
argument_list|,
name|exclusive
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|NO_LABEL_ERR_MSG
argument_list|)
throw|;
block|}
return|return
name|nodeLabels
return|;
block|}
comment|/**    * Returns a {@link YarnConfiguration} built from the {@code conf} parameter    * that is guaranteed to have the {@link YarnConfiguration#RM_HA_ID}    * property set.    *    * @param conf the base configuration    * @return a {@link YarnConfiguration} built from the base    * {@link Configuration}    * @throws IOException thrown if the {@code conf} parameter contains    * inconsistent properties    */
annotation|@
name|VisibleForTesting
DECL|method|getYarnConfWithRmHaId (Configuration conf)
specifier|static
name|YarnConfiguration
name|getYarnConfWithRmHaId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// If RM_HA_ID is not configured, use the first of RM_HA_IDS.
comment|// Any valid RM HA ID should work.
name|String
index|[]
name|rmIds
init|=
name|yarnConf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|rmIds
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|rmIds
operator|.
name|length
operator|>
literal|0
operator|)
condition|)
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmIds
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"RM_HA_IDS property is not set for HA resource "
operator|+
literal|"manager"
argument_list|)
throw|;
block|}
block|}
return|return
name|yarnConf
return|;
block|}
comment|/**    * Generate SPNEGO challenge request token.    *    * @param server - hostname to contact    * @throws IOException thrown if doAs failed    * @throws InterruptedException thrown if doAs is interrupted    * @return SPNEGO token challenge    */
DECL|method|generateToken (String server)
specifier|public
specifier|static
name|String
name|generateToken
parameter_list|(
name|String
name|server
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The user credential is {}"
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|String
name|challenge
init|=
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// This Oid for Kerberos GSS-API mechanism.
name|Oid
name|mechOid
init|=
name|KerberosUtil
operator|.
name|getOidInstance
argument_list|(
literal|"GSS_KRB5_MECH_OID"
argument_list|)
decl_stmt|;
name|GSSManager
name|manager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// GSS name for server
name|GSSName
name|serverName
init|=
name|manager
operator|.
name|createName
argument_list|(
literal|"HTTP@"
operator|+
name|server
argument_list|,
name|GSSName
operator|.
name|NT_HOSTBASED_SERVICE
argument_list|)
decl_stmt|;
comment|// Create a GSSContext for authentication with the service.
comment|// We're passing client credentials as null since we want them to
comment|// be read from the Subject.
name|GSSContext
name|gssContext
init|=
name|manager
operator|.
name|createContext
argument_list|(
name|serverName
operator|.
name|canonicalize
argument_list|(
name|mechOid
argument_list|)
argument_list|,
name|mechOid
argument_list|,
literal|null
argument_list|,
name|GSSContext
operator|.
name|DEFAULT_LIFETIME
argument_list|)
decl_stmt|;
name|gssContext
operator|.
name|requestMutualAuth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|gssContext
operator|.
name|requestCredDeleg
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Establish context
name|byte
index|[]
name|inToken
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|outToken
init|=
name|gssContext
operator|.
name|initSecContext
argument_list|(
name|inToken
argument_list|,
literal|0
argument_list|,
name|inToken
operator|.
name|length
argument_list|)
decl_stmt|;
name|gssContext
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// Base64 encoded and stringified token for server
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got valid challenge for host {}"
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|BASE_64_CODEC
operator|.
name|encode
argument_list|(
name|outToken
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|GSSException
decl||
name|IllegalAccessException
decl||
name|NoSuchFieldException
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|challenge
return|;
block|}
block|}
end_class

end_unit

