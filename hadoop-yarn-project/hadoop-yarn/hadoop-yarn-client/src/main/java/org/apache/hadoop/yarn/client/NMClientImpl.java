begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerStatusResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StartContainerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|StopContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|RPCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  * This class implements {@link NMClient}. All the APIs are blocking.  *</p>  *  *<p>  * By default, this client stops all the running containers that are started by  * it when it stops. It can be disabled via  * {@link #cleanupRunningContainersOnStop}, in which case containers will  * continue to run even after this client is stopped and till the application  * runs at which point ResourceManager will forcefully kill them.  *</p>  *  *<p>  * Note that the blocking APIs ensure the RPC calls to<code>NodeManager</code>  * are executed immediately, and the responses are received before these APIs  * return. However, when {@link #startContainer} or {@link #stopContainer}  * returns,<code>NodeManager</code> may still need some time to either start  * or stop the container because of its asynchronous implementation. Therefore,  * {@link #getContainerStatus} is likely to return a transit container status  * if it is executed immediately after {@link #startContainer} or  * {@link #stopContainer}.  *</p>  */
end_comment

begin_class
DECL|class|NMClientImpl
specifier|public
class|class
name|NMClientImpl
extends|extends
name|AbstractService
implements|implements
name|NMClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NMClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The logically coherent operations on startedContainers is synchronized to
comment|// ensure they are atomic
DECL|field|startedContainers
specifier|protected
name|ConcurrentMap
argument_list|<
name|ContainerId
argument_list|,
name|StartedContainer
argument_list|>
name|startedContainers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ContainerId
argument_list|,
name|StartedContainer
argument_list|>
argument_list|()
decl_stmt|;
comment|//enabled by default
DECL|field|cleanupRunningContainers
specifier|protected
name|AtomicBoolean
name|cleanupRunningContainers
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|method|NMClientImpl ()
specifier|public
name|NMClientImpl
parameter_list|()
block|{
name|super
argument_list|(
name|NMClientImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|NMClientImpl (String name)
specifier|public
name|NMClientImpl
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
comment|// Usually, started-containers are stopped when this client stops. Unless
comment|// the flag cleanupRunningContainers is set to false.
if|if
condition|(
name|cleanupRunningContainers
operator|.
name|get
argument_list|()
condition|)
block|{
name|cleanupRunningContainers
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanupRunningContainers ()
specifier|protected
specifier|synchronized
name|void
name|cleanupRunningContainers
parameter_list|()
block|{
for|for
control|(
name|StartedContainer
name|startedContainer
range|:
name|startedContainers
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|stopContainer
argument_list|(
name|startedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|startedContainer
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|startedContainer
operator|.
name|getContainerToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop Container "
operator|+
name|startedContainer
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"when stopping NMClientImpl"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop Container "
operator|+
name|startedContainer
operator|.
name|getContainerId
argument_list|()
operator|+
literal|"when stopping NMClientImpl"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|cleanupRunningContainersOnStop (boolean enabled)
specifier|public
name|void
name|cleanupRunningContainersOnStop
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|cleanupRunningContainers
operator|.
name|set
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
DECL|class|StartedContainer
specifier|protected
specifier|static
class|class
name|StartedContainer
block|{
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|containerToken
specifier|private
name|Token
name|containerToken
decl_stmt|;
DECL|field|stopped
specifier|private
name|boolean
name|stopped
decl_stmt|;
DECL|method|StartedContainer (ContainerId containerId, NodeId nodeId, Token containerToken)
specifier|public
name|StartedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Token
name|containerToken
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|containerToken
operator|=
name|containerToken
expr_stmt|;
name|stopped
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|getContainerToken ()
specifier|public
name|Token
name|getContainerToken
parameter_list|()
block|{
return|return
name|containerToken
return|;
block|}
block|}
DECL|class|NMCommunicator
specifier|protected
specifier|static
specifier|final
class|class
name|NMCommunicator
extends|extends
name|AbstractService
block|{
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|containerToken
specifier|private
name|Token
name|containerToken
decl_stmt|;
DECL|field|containerManager
specifier|private
name|ContainerManager
name|containerManager
decl_stmt|;
DECL|method|NMCommunicator (ContainerId containerId, NodeId nodeId, Token containerToken)
specifier|public
name|NMCommunicator
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Token
name|containerToken
parameter_list|)
block|{
name|super
argument_list|(
name|NMCommunicator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|containerToken
operator|=
name|containerToken
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
block|{
specifier|final
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|containerAddress
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// the user in createRemoteUser in this context has to be ContainerId
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
name|token
init|=
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|containerToken
argument_list|,
name|containerAddress
argument_list|)
decl_stmt|;
name|currentUser
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|containerManager
operator|=
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ContainerManager
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContainerManager
name|run
parameter_list|()
block|{
return|return
operator|(
name|ContainerManager
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ContainerManager
operator|.
name|class
argument_list|,
name|containerAddress
argument_list|,
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connecting to ContainerManager at "
operator|+
name|containerAddress
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|containerManager
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|this
operator|.
name|containerManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|InetSocketAddress
name|containerAddress
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Disconnecting from ContainerManager at "
operator|+
name|containerAddress
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startContainer ( Container container, ContainerLaunchContext containerLaunchContext)
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|startContainer
parameter_list|(
name|Container
name|container
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|container
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"NMCommunicator's containerId  mismatches the given Container's"
argument_list|)
throw|;
block|}
name|StartContainerResponse
name|startResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|StartContainerRequest
name|startRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|startRequest
operator|.
name|setContainerToken
argument_list|(
name|container
operator|.
name|getContainerToken
argument_list|()
argument_list|)
expr_stmt|;
name|startRequest
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|startResponse
operator|=
name|containerManager
operator|.
name|startContainer
argument_list|(
name|startRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" failed to start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" failed to start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|startResponse
operator|.
name|getAllServiceResponse
argument_list|()
return|;
block|}
DECL|method|stopContainer ()
specifier|public
specifier|synchronized
name|void
name|stopContainer
parameter_list|()
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
try|try
block|{
name|StopContainerRequest
name|stopRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|StopContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|stopRequest
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|containerManager
operator|.
name|stopContainer
argument_list|(
name|stopRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopped Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" failed to stop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" failed to stop"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getContainerStatus ()
specifier|public
specifier|synchronized
name|ContainerStatus
name|getContainerStatus
parameter_list|()
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|GetContainerStatusResponse
name|statusResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|GetContainerStatusRequest
name|statusRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetContainerStatusRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|statusRequest
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|statusResponse
operator|=
name|containerManager
operator|.
name|getContainerStatus
argument_list|(
name|statusRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got the status of Container "
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get the status of Container "
operator|+
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to get the status of Container "
operator|+
name|containerId
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|statusResponse
operator|.
name|getStatus
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|startContainer ( Container container, ContainerLaunchContext containerLaunchContext)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|startContainer
parameter_list|(
name|Container
name|container
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
comment|// Do synchronization on StartedContainer to prevent race condition
comment|// between startContainer and stopContainer
synchronized|synchronized
init|(
name|addStartedContainer
argument_list|(
name|container
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|allServiceResponse
decl_stmt|;
name|NMCommunicator
name|nmCommunicator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nmCommunicator
operator|=
operator|new
name|NMCommunicator
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerToken
argument_list|()
argument_list|)
expr_stmt|;
name|nmCommunicator
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|nmCommunicator
operator|.
name|start
argument_list|()
expr_stmt|;
name|allServiceResponse
operator|=
name|nmCommunicator
operator|.
name|startContainer
argument_list|(
name|container
argument_list|,
name|containerLaunchContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
comment|// Remove the started container if it failed to start
name|removeStartedContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|removeStartedContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|removeStartedContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|nmCommunicator
operator|!=
literal|null
condition|)
block|{
name|nmCommunicator
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|allServiceResponse
return|;
block|}
comment|// Three choices:
comment|// 1. starting and releasing the proxy before and after each interaction
comment|// 2. starting the proxy when starting the container and releasing it when
comment|// stopping the container
comment|// 3. starting the proxy when starting the container and releasing it when
comment|// stopping the client
comment|// Adopt 1 currently
block|}
annotation|@
name|Override
DECL|method|stopContainer (ContainerId containerId, NodeId nodeId, Token containerToken)
specifier|public
name|void
name|stopContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Token
name|containerToken
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|StartedContainer
name|startedContainer
init|=
name|getStartedContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|startedContainer
operator|==
literal|null
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|containerId
operator|+
literal|" is either not started yet or already stopped"
argument_list|)
throw|;
block|}
comment|// Only allow one request of stopping the container to move forward
comment|// When entering the block, check whether the precursor has already stopped
comment|// the container
synchronized|synchronized
init|(
name|startedContainer
init|)
block|{
if|if
condition|(
name|startedContainer
operator|.
name|stopped
condition|)
block|{
return|return;
block|}
name|NMCommunicator
name|nmCommunicator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nmCommunicator
operator|=
operator|new
name|NMCommunicator
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|containerToken
argument_list|)
expr_stmt|;
name|nmCommunicator
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|nmCommunicator
operator|.
name|start
argument_list|()
expr_stmt|;
name|nmCommunicator
operator|.
name|stopContainer
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|nmCommunicator
operator|!=
literal|null
condition|)
block|{
name|nmCommunicator
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|startedContainer
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|removeStartedContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerStatus (ContainerId containerId, NodeId nodeId, Token containerToken)
specifier|public
name|ContainerStatus
name|getContainerStatus
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Token
name|containerToken
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|NMCommunicator
name|nmCommunicator
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nmCommunicator
operator|=
operator|new
name|NMCommunicator
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|containerToken
argument_list|)
expr_stmt|;
name|nmCommunicator
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|nmCommunicator
operator|.
name|start
argument_list|()
expr_stmt|;
name|ContainerStatus
name|containerStatus
init|=
name|nmCommunicator
operator|.
name|getContainerStatus
argument_list|()
decl_stmt|;
return|return
name|containerStatus
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|nmCommunicator
operator|!=
literal|null
condition|)
block|{
name|nmCommunicator
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|addStartedContainer ( Container container)
specifier|protected
specifier|synchronized
name|StartedContainer
name|addStartedContainer
parameter_list|(
name|Container
name|container
parameter_list|)
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
if|if
condition|(
name|startedContainers
operator|.
name|containsKey
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|RPCUtil
operator|.
name|getRemoteException
argument_list|(
literal|"Container "
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" is already started"
argument_list|)
throw|;
block|}
name|StartedContainer
name|startedContainer
init|=
operator|new
name|StartedContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|container
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
name|startedContainers
operator|.
name|put
argument_list|(
name|startedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|startedContainer
argument_list|)
expr_stmt|;
return|return
name|startedContainer
return|;
block|}
DECL|method|removeStartedContainer (ContainerId containerId)
specifier|protected
specifier|synchronized
name|void
name|removeStartedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|startedContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
DECL|method|getStartedContainer ( ContainerId containerId)
specifier|protected
specifier|synchronized
name|StartedContainer
name|getStartedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
return|return
name|startedContainers
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

