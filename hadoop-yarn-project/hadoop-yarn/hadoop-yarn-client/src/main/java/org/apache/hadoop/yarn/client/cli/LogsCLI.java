begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogCLIHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|LogsCLI
specifier|public
class|class
name|LogsCLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|CONTAINER_ID_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_ID_OPTION
init|=
literal|"containerId"
decl_stmt|;
DECL|field|APPLICATION_ID_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_ID_OPTION
init|=
literal|"applicationId"
decl_stmt|;
DECL|field|NODE_ADDRESS_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ADDRESS_OPTION
init|=
literal|"nodeAddress"
decl_stmt|;
DECL|field|APP_OWNER_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|APP_OWNER_OPTION
init|=
literal|"appOwner"
decl_stmt|;
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|Option
name|appIdOpt
init|=
operator|new
name|Option
argument_list|(
name|APPLICATION_ID_OPTION
argument_list|,
literal|true
argument_list|,
literal|"ApplicationId (required)"
argument_list|)
decl_stmt|;
name|appIdOpt
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|appIdOpt
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|,
literal|true
argument_list|,
literal|"ContainerId (must be specified if node address is specified)"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|,
literal|true
argument_list|,
literal|"NodeAddress in the format "
operator|+
literal|"nodename:port (must be specified if container id is specified)"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|APP_OWNER_OPTION
argument_list|,
literal|true
argument_list|,
literal|"AppOwner (assumed to be current user if not specified)"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|APPLICATION_ID_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Application ID"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Container ID"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Node Address"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|APP_OWNER_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Application Owner"
argument_list|)
expr_stmt|;
name|Options
name|printOpts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|opts
operator|.
name|getOption
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|opts
operator|.
name|getOption
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|opts
operator|.
name|getOption
argument_list|(
name|APP_OWNER_OPTION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|String
name|appIdStr
init|=
literal|null
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|null
decl_stmt|;
name|String
name|nodeAddress
init|=
literal|null
decl_stmt|;
name|String
name|appOwner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CommandLine
name|commandLine
init|=
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|appIdStr
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|APPLICATION_ID_OPTION
argument_list|)
expr_stmt|;
name|containerIdStr
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|)
expr_stmt|;
name|nodeAddress
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|)
expr_stmt|;
name|appOwner
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|APP_OWNER_OPTION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"options parsing failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|appIdStr
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ApplicationId cannot be null!"
argument_list|)
expr_stmt|;
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|ApplicationId
name|appId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appId
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid ApplicationId specified"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
name|int
name|resultCode
init|=
name|verifyApplicationState
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultCode
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Logs are not avaiable right now."
argument_list|)
expr_stmt|;
return|return
name|resultCode
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to get ApplicationState."
operator|+
literal|" Attempting to fetch logs directly from the filesystem."
argument_list|)
expr_stmt|;
block|}
name|LogCLIHelpers
name|logCliHelper
init|=
operator|new
name|LogCLIHelpers
argument_list|()
decl_stmt|;
name|logCliHelper
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|appOwner
operator|==
literal|null
operator|||
name|appOwner
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appOwner
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
name|int
name|resultCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|containerIdStr
operator|==
literal|null
operator|&&
name|nodeAddress
operator|==
literal|null
condition|)
block|{
name|resultCode
operator|=
name|logCliHelper
operator|.
name|dumpAllContainersLogs
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|containerIdStr
operator|==
literal|null
operator|&&
name|nodeAddress
operator|!=
literal|null
operator|)
operator|||
operator|(
name|containerIdStr
operator|!=
literal|null
operator|&&
name|nodeAddress
operator|==
literal|null
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ContainerId or NodeAddress cannot be null!"
argument_list|)
expr_stmt|;
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
name|resultCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|resultCode
operator|=
name|logCliHelper
operator|.
name|dumpAContainersLogs
argument_list|(
name|appIdStr
argument_list|,
name|containerIdStr
argument_list|,
name|nodeAddress
argument_list|,
name|appOwner
argument_list|)
expr_stmt|;
block|}
return|return
name|resultCode
return|;
block|}
DECL|method|verifyApplicationState (ApplicationId appId)
specifier|private
name|int
name|verifyApplicationState
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|YarnClient
name|yarnClient
init|=
name|createYarnClient
argument_list|()
decl_stmt|;
try|try
block|{
name|ApplicationReport
name|appReport
init|=
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
condition|)
block|{
case|case
name|NEW
case|:
case|case
name|NEW_SAVING
case|:
case|case
name|SUBMITTED
case|:
return|return
operator|-
literal|1
return|;
case|case
name|ACCEPTED
case|:
case|case
name|RUNNING
case|:
case|case
name|FAILED
case|:
case|case
name|FINISHED
case|:
case|case
name|KILLED
case|:
default|default:
break|break;
block|}
block|}
finally|finally
block|{
name|yarnClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createYarnClient ()
specifier|protected
name|YarnClient
name|createYarnClient
parameter_list|()
block|{
name|YarnClient
name|yarnClient
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|yarnClient
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|LogsCLI
name|logDumper
init|=
operator|new
name|LogsCLI
argument_list|()
decl_stmt|;
name|logDumper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|logDumper
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
DECL|method|printHelpMessage (Options options)
specifier|private
name|void
name|printHelpMessage
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Retrieve logs for completed YARN applications."
argument_list|)
expr_stmt|;
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"yarn logs -applicationId<application ID> [OPTIONS]"
argument_list|,
operator|new
name|Options
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setSyntaxPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"general options are:"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

