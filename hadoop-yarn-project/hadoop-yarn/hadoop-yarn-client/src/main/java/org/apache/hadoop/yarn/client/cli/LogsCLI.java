begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogCLIHelpers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientHandlerException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|LogsCLI
specifier|public
class|class
name|LogsCLI
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|CONTAINER_ID_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_ID_OPTION
init|=
literal|"containerId"
decl_stmt|;
DECL|field|APPLICATION_ID_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_ID_OPTION
init|=
literal|"applicationId"
decl_stmt|;
DECL|field|NODE_ADDRESS_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|NODE_ADDRESS_OPTION
init|=
literal|"nodeAddress"
decl_stmt|;
DECL|field|APP_OWNER_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|APP_OWNER_OPTION
init|=
literal|"appOwner"
decl_stmt|;
DECL|field|AM_CONTAINER_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|AM_CONTAINER_OPTION
init|=
literal|"am"
decl_stmt|;
DECL|field|CONTAINER_LOG_FILES
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_LOG_FILES
init|=
literal|"logFiles"
decl_stmt|;
DECL|field|SHOW_META_INFO
specifier|private
specifier|static
specifier|final
name|String
name|SHOW_META_INFO
init|=
literal|"show_meta_info"
decl_stmt|;
DECL|field|LIST_NODES_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|LIST_NODES_OPTION
init|=
literal|"list_nodes"
decl_stmt|;
DECL|field|OUT_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|OUT_OPTION
init|=
literal|"out"
decl_stmt|;
DECL|field|SIZE_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|SIZE_OPTION
init|=
literal|"size"
decl_stmt|;
DECL|field|HELP_CMD
specifier|public
specifier|static
specifier|final
name|String
name|HELP_CMD
init|=
literal|"help"
decl_stmt|;
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|opts
init|=
name|createCommandOpts
argument_list|()
decl_stmt|;
name|Options
name|printOpts
init|=
name|createPrintOpts
argument_list|(
name|opts
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|String
name|appIdStr
init|=
literal|null
decl_stmt|;
name|String
name|containerIdStr
init|=
literal|null
decl_stmt|;
name|String
name|nodeAddress
init|=
literal|null
decl_stmt|;
name|String
name|appOwner
init|=
literal|null
decl_stmt|;
name|boolean
name|getAMContainerLogs
init|=
literal|false
decl_stmt|;
name|boolean
name|showMetaInfo
init|=
literal|false
decl_stmt|;
name|boolean
name|nodesList
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|logFiles
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|amContainersList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|localDir
init|=
literal|null
decl_stmt|;
name|long
name|bytes
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
try|try
block|{
name|CommandLine
name|commandLine
init|=
name|parser
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|appIdStr
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|APPLICATION_ID_OPTION
argument_list|)
expr_stmt|;
name|containerIdStr
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|)
expr_stmt|;
name|nodeAddress
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|)
expr_stmt|;
name|appOwner
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|APP_OWNER_OPTION
argument_list|)
expr_stmt|;
name|getAMContainerLogs
operator|=
name|commandLine
operator|.
name|hasOption
argument_list|(
name|AM_CONTAINER_OPTION
argument_list|)
expr_stmt|;
name|showMetaInfo
operator|=
name|commandLine
operator|.
name|hasOption
argument_list|(
name|SHOW_META_INFO
argument_list|)
expr_stmt|;
name|nodesList
operator|=
name|commandLine
operator|.
name|hasOption
argument_list|(
name|LIST_NODES_OPTION
argument_list|)
expr_stmt|;
name|localDir
operator|=
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|OUT_OPTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAMContainerLogs
condition|)
block|{
try|try
block|{
name|amContainersList
operator|=
name|parseAMContainer
argument_list|(
name|commandLine
argument_list|,
name|printOpts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|CONTAINER_LOG_FILES
argument_list|)
condition|)
block|{
name|logFiles
operator|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
name|CONTAINER_LOG_FILES
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
name|SIZE_OPTION
argument_list|)
condition|)
block|{
name|bytes
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
name|SIZE_OPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"options parsing failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|appIdStr
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ApplicationId cannot be null!"
argument_list|)
expr_stmt|;
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|ApplicationId
name|appId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appId
operator|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid ApplicationId specified"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|LogCLIHelpers
name|logCliHelper
init|=
operator|new
name|LogCLIHelpers
argument_list|()
decl_stmt|;
name|logCliHelper
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|YarnApplicationState
name|appState
init|=
name|YarnApplicationState
operator|.
name|NEW
decl_stmt|;
name|ApplicationReport
name|appReport
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appReport
operator|=
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|appState
operator|=
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
expr_stmt|;
if|if
condition|(
name|appState
operator|==
name|YarnApplicationState
operator|.
name|NEW
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|NEW_SAVING
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|SUBMITTED
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Logs are not avaiable right now."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|YarnException
name|e
parameter_list|)
block|{
comment|// If we can not get appReport from either RM or ATS
comment|// We will assume that this app has already finished.
name|appState
operator|=
name|YarnApplicationState
operator|.
name|FINISHED
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to get ApplicationState."
operator|+
literal|" Attempting to fetch logs directly from the filesystem."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|appOwner
operator|==
literal|null
operator|||
name|appOwner
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appOwner
operator|=
name|guessAppOwner
argument_list|(
name|appReport
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|appOwner
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not find the appOwner. "
operator|+
literal|"Please specify the correct appOwner"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not locate application logs for "
operator|+
name|appId
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchAllLogFiles
argument_list|(
name|logFiles
argument_list|)
condition|)
block|{
name|logs
operator|.
name|add
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|logFiles
operator|!=
literal|null
operator|&&
name|logFiles
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|logs
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
block|}
name|ContainerLogsRequest
name|request
init|=
operator|new
name|ContainerLogsRequest
argument_list|(
name|appId
argument_list|,
name|isApplicationFinished
argument_list|(
name|appState
argument_list|)
argument_list|,
name|appOwner
argument_list|,
name|nodeAddress
argument_list|,
literal|null
argument_list|,
name|containerIdStr
argument_list|,
name|localDir
argument_list|,
name|logs
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|showMetaInfo
condition|)
block|{
return|return
name|showMetaInfo
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
if|if
condition|(
name|nodesList
condition|)
block|{
return|return
name|showNodeLists
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
comment|// To get am logs
if|if
condition|(
name|getAMContainerLogs
condition|)
block|{
return|return
name|fetchAMContainerLogs
argument_list|(
name|request
argument_list|,
name|amContainersList
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
name|int
name|resultCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|containerIdStr
operator|!=
literal|null
condition|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The Application:"
operator|+
name|appId
operator|+
literal|" does not have the container:"
operator|+
name|containerId
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|fetchContainerLogs
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|nodeAddress
operator|==
literal|null
condition|)
block|{
name|resultCode
operator|=
name|fetchApplicationLogs
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Should at least provide ContainerId!"
argument_list|)
expr_stmt|;
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
name|resultCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
return|return
name|resultCode
return|;
block|}
DECL|method|getApplicationReport (ApplicationId appId)
specifier|private
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|YarnClient
name|yarnClient
init|=
name|createYarnClient
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|yarnClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
return|;
block|}
finally|finally
block|{
name|yarnClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|createYarnClient ()
specifier|protected
name|YarnClient
name|createYarnClient
parameter_list|()
block|{
name|YarnClient
name|yarnClient
init|=
name|YarnClient
operator|.
name|createYarnClient
argument_list|()
decl_stmt|;
name|yarnClient
operator|.
name|init
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|yarnClient
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|yarnClient
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|LogsCLI
name|logDumper
init|=
operator|new
name|LogsCLI
argument_list|()
decl_stmt|;
name|logDumper
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|logDumper
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
DECL|method|printHelpMessage (Options options)
specifier|private
name|void
name|printHelpMessage
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Retrieve logs for completed YARN applications."
argument_list|)
expr_stmt|;
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"yarn logs -applicationId<application ID> [OPTIONS]"
argument_list|,
operator|new
name|Options
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|setSyntaxPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"general options are:"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|getAMContainerInfoForRMWebService ( Configuration conf, String appId)
specifier|private
name|List
argument_list|<
name|JSONObject
argument_list|>
name|getAMContainerInfoForRMWebService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|ClientHandlerException
throws|,
name|UniformInterfaceException
throws|,
name|JSONException
block|{
name|Client
name|webServiceClient
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|webAppAddress
init|=
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|WebResource
name|webResource
init|=
name|webServiceClient
operator|.
name|resource
argument_list|(
name|webAppAddress
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|webResource
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|"appAttempts"
argument_list|)
decl_stmt|;
name|JSONArray
name|requests
init|=
name|json
operator|.
name|getJSONArray
argument_list|(
literal|"appAttempt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JSONObject
argument_list|>
name|amContainersList
init|=
operator|new
name|ArrayList
argument_list|<
name|JSONObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requests
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|amContainersList
operator|.
name|add
argument_list|(
name|requests
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|amContainersList
return|;
block|}
DECL|method|getAMContainerInfoForAHSWebService ( Configuration conf, String appId)
specifier|private
name|List
argument_list|<
name|JSONObject
argument_list|>
name|getAMContainerInfoForAHSWebService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|appId
parameter_list|)
throws|throws
name|ClientHandlerException
throws|,
name|UniformInterfaceException
throws|,
name|JSONException
block|{
name|Client
name|webServiceClient
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|webAppAddress
init|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|WebAppUtils
operator|.
name|getAHSWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|WebResource
name|webResource
init|=
name|webServiceClient
operator|.
name|resource
argument_list|(
name|webAppAddress
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|webResource
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"applicationhistory"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|appId
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONArray
name|requests
init|=
name|json
operator|.
name|getJSONArray
argument_list|(
literal|"appAttempt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JSONObject
argument_list|>
name|amContainersList
init|=
operator|new
name|ArrayList
argument_list|<
name|JSONObject
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requests
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|amContainersList
operator|.
name|add
argument_list|(
name|requests
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|reverse
argument_list|(
name|amContainersList
argument_list|)
expr_stmt|;
return|return
name|amContainersList
return|;
block|}
DECL|method|fetchAllLogFiles (String[] logFiles)
specifier|private
name|boolean
name|fetchAllLogFiles
parameter_list|(
name|String
index|[]
name|logFiles
parameter_list|)
block|{
if|if
condition|(
name|logFiles
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|logs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|logFiles
argument_list|)
decl_stmt|;
if|if
condition|(
name|logs
operator|.
name|contains
argument_list|(
literal|"ALL"
argument_list|)
operator|||
name|logs
operator|.
name|contains
argument_list|(
literal|".*"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getContainerLogFiles (Configuration conf, String containerIdStr, String nodeHttpAddress)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getContainerLogFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|String
name|nodeHttpAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Client
name|webServiceClient
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|WebResource
name|webResource
init|=
name|webServiceClient
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|nodeHttpAddress
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|webResource
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"containers"
argument_list|)
operator|.
name|path
argument_list|(
name|containerIdStr
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getClientResponseStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|ClientResponse
operator|.
name|Status
operator|.
name|OK
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|elements
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"containerLogFiles"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|logFiles
operator|.
name|add
argument_list|(
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to parse xml from webservice. Error:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClientHandlerException
decl||
name|UniformInterfaceException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to fetch log files list"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|logFiles
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|printContainerLogsFromRunningApplication (Configuration conf, ContainerLogsRequest request, LogCLIHelpers logCliHelper)
specifier|public
name|void
name|printContainerLogsFromRunningApplication
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ContainerLogsRequest
name|request
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|containerIdStr
init|=
name|request
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|localDir
init|=
name|request
operator|.
name|getOutputLocalDir
argument_list|()
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
name|request
operator|.
name|getNodeHttpAddress
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|PrintStream
name|out
init|=
name|logCliHelper
operator|.
name|createPrintStream
argument_list|(
name|localDir
argument_list|,
name|nodeId
argument_list|,
name|containerIdStr
argument_list|)
decl_stmt|;
try|try
block|{
comment|// fetch all the log files for the container
comment|// filter the log files based on the given --logFiles pattern
name|List
argument_list|<
name|String
argument_list|>
name|allLogs
init|=
name|getContainerLogFiles
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|containerIdStr
argument_list|,
name|nodeHttpAddress
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|matchedFiles
init|=
name|getMatchedLogFiles
argument_list|(
name|request
argument_list|,
name|allLogs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|matchedFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ContainerLogsRequest
name|newOptions
init|=
operator|new
name|ContainerLogsRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|newOptions
operator|.
name|setLogTypes
argument_list|(
name|matchedFiles
argument_list|)
expr_stmt|;
name|Client
name|webServiceClient
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|String
name|containerString
init|=
literal|"\n\nContainer: "
operator|+
name|containerIdStr
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|containerString
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"="
argument_list|,
name|containerString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logFile
range|:
name|newOptions
operator|.
name|getLogTypes
argument_list|()
control|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"LogType:"
operator|+
name|logFile
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Log Upload Time:"
operator|+
name|Times
operator|.
name|format
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Log Contents:"
argument_list|)
expr_stmt|;
try|try
block|{
name|WebResource
name|webResource
init|=
name|webServiceClient
operator|.
name|resource
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|nodeHttpAddress
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|webResource
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"node"
argument_list|)
operator|.
name|path
argument_list|(
literal|"containerlogs"
argument_list|)
operator|.
name|path
argument_list|(
name|containerIdStr
argument_list|)
operator|.
name|path
argument_list|(
name|logFile
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"size"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|request
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"End of LogType:"
operator|+
name|logFile
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClientHandlerException
decl||
name|UniformInterfaceException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not find the log file:"
operator|+
name|logFile
operator|+
literal|" for the container:"
operator|+
name|containerIdStr
operator|+
literal|" in NodeManager:"
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for the case, we have already uploaded partial logs in HDFS
name|logCliHelper
operator|.
name|dumpAContainersLogsForALogType
argument_list|(
name|newOptions
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logCliHelper
operator|.
name|closePrintStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printContainerLogsForFinishedApplication ( ContainerLogsRequest request, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|printContainerLogsForFinishedApplication
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerLogsRequest
name|newOptions
init|=
name|getMatchedLogOptions
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOptions
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|logCliHelper
operator|.
name|dumpAContainersLogsForALogType
argument_list|(
name|newOptions
argument_list|)
return|;
block|}
DECL|method|printContainerLogsForFinishedApplicationWithoutNodeId ( ContainerLogsRequest request, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|printContainerLogsForFinishedApplicationWithoutNodeId
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerLogsRequest
name|newOptions
init|=
name|getMatchedLogOptions
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOptions
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|logCliHelper
operator|.
name|dumpAContainersLogsForALogTypeWithoutNodeId
argument_list|(
name|newOptions
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getContainerReport (String containerIdStr)
specifier|public
name|ContainerReport
name|getContainerReport
parameter_list|(
name|String
name|containerIdStr
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|YarnClient
name|yarnClient
init|=
name|createYarnClient
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|yarnClient
operator|.
name|getContainerReport
argument_list|(
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerIdStr
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|yarnClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isApplicationFinished (YarnApplicationState appState)
specifier|private
name|boolean
name|isApplicationFinished
parameter_list|(
name|YarnApplicationState
name|appState
parameter_list|)
block|{
return|return
name|appState
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|FAILED
operator|||
name|appState
operator|==
name|YarnApplicationState
operator|.
name|KILLED
return|;
block|}
DECL|method|printAMContainerLogs (Configuration conf, ContainerLogsRequest request, List<String> amContainers, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|printAMContainerLogs
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ContainerLogsRequest
name|request
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|amContainers
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|JSONObject
argument_list|>
name|amContainersList
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ContainerLogsRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerLogsRequest
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|getAMContainerLists
init|=
literal|false
decl_stmt|;
name|String
name|appId
init|=
name|request
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|errorMessage
init|=
literal|""
decl_stmt|;
try|try
block|{
name|amContainersList
operator|=
name|getAMContainerInfoForRMWebService
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|amContainersList
operator|!=
literal|null
operator|&&
operator|!
name|amContainersList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAMContainerLists
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|JSONObject
name|amContainer
range|:
name|amContainersList
control|)
block|{
name|ContainerLogsRequest
name|amRequest
init|=
operator|new
name|ContainerLogsRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|amRequest
operator|.
name|setContainerId
argument_list|(
name|amContainer
operator|.
name|getString
argument_list|(
literal|"containerId"
argument_list|)
argument_list|)
expr_stmt|;
name|amRequest
operator|.
name|setNodeHttpAddress
argument_list|(
name|amContainer
operator|.
name|getString
argument_list|(
literal|"nodeHttpAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|amRequest
operator|.
name|setNodeId
argument_list|(
name|amContainer
operator|.
name|getString
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|amRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|errorMessage
operator|=
name|ex
operator|.
name|getMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isAppFinished
argument_list|()
condition|)
block|{
try|try
block|{
name|amContainersList
operator|=
name|getAMContainerInfoForAHSWebService
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|)
expr_stmt|;
if|if
condition|(
name|amContainersList
operator|!=
literal|null
operator|&&
operator|!
name|amContainersList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAMContainerLists
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|JSONObject
name|amContainer
range|:
name|amContainersList
control|)
block|{
name|ContainerLogsRequest
name|amRequest
init|=
operator|new
name|ContainerLogsRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|amRequest
operator|.
name|setContainerId
argument_list|(
name|amContainer
operator|.
name|getString
argument_list|(
literal|"amContainerId"
argument_list|)
argument_list|)
expr_stmt|;
name|requests
operator|.
name|add
argument_list|(
name|amRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|getAMContainerLists
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to get AM container informations "
operator|+
literal|"for the application:"
operator|+
name|appId
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|amContainers
operator|.
name|contains
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
for|for
control|(
name|ContainerLogsRequest
name|amRequest
range|:
name|requests
control|)
block|{
name|outputAMContainerLogs
argument_list|(
name|amRequest
argument_list|,
name|conf
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Specified ALL for -am option. "
operator|+
literal|"Printed logs for all am containers."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|amContainer
range|:
name|amContainers
control|)
block|{
name|int
name|amContainerId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|amContainer
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|amContainerId
operator|==
operator|-
literal|1
condition|)
block|{
name|outputAMContainerLogs
argument_list|(
name|requests
operator|.
name|get
argument_list|(
name|requests
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|conf
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|amContainerId
operator|<=
name|requests
operator|.
name|size
argument_list|()
condition|)
block|{
name|outputAMContainerLogs
argument_list|(
name|requests
operator|.
name|get
argument_list|(
name|amContainerId
operator|-
literal|1
argument_list|)
argument_list|,
name|conf
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|outputAMContainerLogs (ContainerLogsRequest request, Configuration conf, LogCLIHelpers logCliHelper)
specifier|private
name|void
name|outputAMContainerLogs
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeHttpAddress
init|=
name|request
operator|.
name|getNodeHttpAddress
argument_list|()
decl_stmt|;
name|String
name|containerId
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isAppFinished
argument_list|()
condition|)
block|{
if|if
condition|(
name|containerId
operator|!=
literal|null
operator|&&
operator|!
name|containerId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|nodeId
operator|=
name|getContainerReport
argument_list|(
name|containerId
argument_list|)
operator|.
name|getAssignedNode
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|nodeId
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodeId
operator|!=
literal|null
operator|&&
operator|!
name|nodeId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printContainerLogsForFinishedApplication
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|nodeHttpAddress
operator|!=
literal|null
operator|&&
name|containerId
operator|!=
literal|null
operator|&&
operator|!
name|nodeHttpAddress
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|containerId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|printContainerLogsFromRunningApplication
argument_list|(
name|conf
argument_list|,
name|request
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|showMetaInfo (ContainerLogsRequest request, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|showMetaInfo
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|isAppFinished
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The -show_meta_info command can be only used "
operator|+
literal|"with finished applications"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|logCliHelper
operator|.
name|printLogMetadata
argument_list|(
name|request
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|method|showNodeLists (ContainerLogsRequest request, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|showNodeLists
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|isAppFinished
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The -list_nodes command can be only used with "
operator|+
literal|"finished applications"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
name|logCliHelper
operator|.
name|printNodesList
argument_list|(
name|request
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
DECL|method|createCommandOpts ()
specifier|private
name|Options
name|createCommandOpts
parameter_list|()
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|HELP_CMD
argument_list|,
literal|false
argument_list|,
literal|"Displays help for all commands."
argument_list|)
expr_stmt|;
name|Option
name|appIdOpt
init|=
operator|new
name|Option
argument_list|(
name|APPLICATION_ID_OPTION
argument_list|,
literal|true
argument_list|,
literal|"ApplicationId (required)"
argument_list|)
decl_stmt|;
name|appIdOpt
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|appIdOpt
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|,
literal|true
argument_list|,
literal|"ContainerId. "
operator|+
literal|"By default, it will only print syslog if the application is runing."
operator|+
literal|" Work with -logFiles to get other logs."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|,
literal|true
argument_list|,
literal|"NodeAddress in the format "
operator|+
literal|"nodename:port"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|APP_OWNER_OPTION
argument_list|,
literal|true
argument_list|,
literal|"AppOwner (assumed to be current user if not specified)"
argument_list|)
expr_stmt|;
name|Option
name|amOption
init|=
operator|new
name|Option
argument_list|(
name|AM_CONTAINER_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Prints the AM Container logs for this application. "
operator|+
literal|"Specify comma-separated value to get logs for related AM "
operator|+
literal|"Container. For example, If we specify -am 1,2, we will get "
operator|+
literal|"the logs for the first AM Container as well as the second "
operator|+
literal|"AM Container. To get logs for all AM Containers, use -am ALL. "
operator|+
literal|"To get logs for the latest AM Container, use -am -1. "
operator|+
literal|"By default, it will only print out syslog. Work with -logFiles "
operator|+
literal|"to get other logs"
argument_list|)
decl_stmt|;
name|amOption
operator|.
name|setValueSeparator
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|amOption
operator|.
name|setArgs
argument_list|(
name|Option
operator|.
name|UNLIMITED_VALUES
argument_list|)
expr_stmt|;
name|amOption
operator|.
name|setArgName
argument_list|(
literal|"AM Containers"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|amOption
argument_list|)
expr_stmt|;
name|Option
name|logFileOpt
init|=
operator|new
name|Option
argument_list|(
name|CONTAINER_LOG_FILES
argument_list|,
literal|true
argument_list|,
literal|"Work with -am/-containerId and specify comma-separated value "
operator|+
literal|"to get specified container log files. Use \"ALL\" to fetch all the "
operator|+
literal|"log files for the container. It also supports Java Regex."
argument_list|)
decl_stmt|;
name|logFileOpt
operator|.
name|setValueSeparator
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|logFileOpt
operator|.
name|setArgs
argument_list|(
name|Option
operator|.
name|UNLIMITED_VALUES
argument_list|)
expr_stmt|;
name|logFileOpt
operator|.
name|setArgName
argument_list|(
literal|"Log File Name"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|logFileOpt
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|SHOW_META_INFO
argument_list|,
literal|false
argument_list|,
literal|"Show the log metadata, "
operator|+
literal|"including log-file names, the size of the log files. "
operator|+
literal|"You can combine this with --containerId to get log metadata for "
operator|+
literal|"the specific container, or with --nodeAddress to get log metadata "
operator|+
literal|"for all the containers on the specific NodeManager. "
operator|+
literal|"Currently, this option can only be used for finished "
operator|+
literal|"applications."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|LIST_NODES_OPTION
argument_list|,
literal|false
argument_list|,
literal|"Show the list of nodes that successfully aggregated logs. "
operator|+
literal|"This option can only be used with finished applications."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|OUT_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Local directory for storing individual "
operator|+
literal|"container logs. The container logs will be stored based on the "
operator|+
literal|"node the container ran on."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|SIZE_OPTION
argument_list|,
literal|true
argument_list|,
literal|"Prints the log file's first 'n' bytes "
operator|+
literal|"or the last 'n' bytes. Use negative values as bytes to read from "
operator|+
literal|"the end and positive values as bytes to read from the beginning."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|APPLICATION_ID_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Application ID"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Container ID"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Node Address"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|APP_OWNER_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Application Owner"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|AM_CONTAINER_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"AM Containers"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|OUT_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Local Directory"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|SIZE_OPTION
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"size"
argument_list|)
expr_stmt|;
return|return
name|opts
return|;
block|}
DECL|method|createPrintOpts (Options commandOpts)
specifier|private
name|Options
name|createPrintOpts
parameter_list|(
name|Options
name|commandOpts
parameter_list|)
block|{
name|Options
name|printOpts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|HELP_CMD
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|CONTAINER_ID_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|NODE_ADDRESS_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|APP_OWNER_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|AM_CONTAINER_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|CONTAINER_LOG_FILES
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|SHOW_META_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|LIST_NODES_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|OUT_OPTION
argument_list|)
argument_list|)
expr_stmt|;
name|printOpts
operator|.
name|addOption
argument_list|(
name|commandOpts
operator|.
name|getOption
argument_list|(
name|SIZE_OPTION
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|printOpts
return|;
block|}
DECL|method|parseAMContainer (CommandLine commandLine, Options printOpts)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|parseAMContainer
parameter_list|(
name|CommandLine
name|commandLine
parameter_list|,
name|Options
name|printOpts
parameter_list|)
throws|throws
name|NumberFormatException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|amContainersList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|amContainers
init|=
name|commandLine
operator|.
name|getOptionValues
argument_list|(
name|AM_CONTAINER_OPTION
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|am
range|:
name|amContainers
control|)
block|{
name|boolean
name|errorInput
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|am
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ALL"
argument_list|)
condition|)
block|{
try|try
block|{
name|int
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|am
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
operator|-
literal|1
operator|&&
name|id
operator|<=
literal|0
condition|)
block|{
name|errorInput
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|errorInput
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|errorInput
condition|)
block|{
name|String
name|errMessage
init|=
literal|"Invalid input for option -am. Valid inputs are 'ALL', -1 "
operator|+
literal|"and any other integer which is larger than 0."
decl_stmt|;
name|printHelpMessage
argument_list|(
name|printOpts
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NumberFormatException
argument_list|(
name|errMessage
argument_list|)
throw|;
block|}
name|amContainersList
operator|.
name|add
argument_list|(
name|am
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|amContainersList
operator|.
name|add
argument_list|(
literal|"ALL"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|amContainersList
return|;
block|}
DECL|method|fetchAMContainerLogs (ContainerLogsRequest request, List<String> amContainersList, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|fetchAMContainerLogs
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|amContainersList
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
name|request
operator|.
name|getLogTypes
argument_list|()
decl_stmt|;
comment|// if we do not specify the value for CONTAINER_LOG_FILES option,
comment|// we will only output syslog
if|if
condition|(
name|logFiles
operator|==
literal|null
operator|||
name|logFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logFiles
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"syslog"
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setLogTypes
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
comment|// If the application is running, we will call the RM WebService
comment|// to get the AppAttempts which includes the nodeHttpAddress
comment|// and containerId for all the AM Containers.
comment|// After that, we will call NodeManager webService to get the
comment|// related logs
if|if
condition|(
operator|!
name|request
operator|.
name|isAppFinished
argument_list|()
condition|)
block|{
return|return
name|printAMContainerLogs
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|request
argument_list|,
name|amContainersList
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
else|else
block|{
comment|// If the application is in the final state, we will call RM webservice
comment|// to get all AppAttempts information first. If we get nothing,
comment|// we will try to call AHS webservice to get related AppAttempts
comment|// which includes nodeAddress for the AM Containers.
comment|// After that, we will use nodeAddress and containerId
comment|// to get logs from HDFS directly.
if|if
condition|(
name|getConf
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_HISTORY_ENABLED
argument_list|)
condition|)
block|{
return|return
name|printAMContainerLogs
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|request
argument_list|,
name|amContainersList
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
else|else
block|{
name|ApplicationId
name|appId
init|=
name|request
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|String
name|appOwner
init|=
name|request
operator|.
name|getAppOwner
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not get AMContainers logs for "
operator|+
literal|"the application:"
operator|+
name|appId
operator|+
literal|" with the appOwner:"
operator|+
name|appOwner
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This application:"
operator|+
name|appId
operator|+
literal|" has finished."
operator|+
literal|" Please enable the application-history service or explicitly"
operator|+
literal|" use 'yarn logs -applicationId<appId> "
operator|+
literal|"-containerId<containerId> --nodeAddress<nodeHttpAddress>' "
operator|+
literal|"to get the container logs."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
DECL|method|fetchContainerLogs (ContainerLogsRequest request, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|fetchContainerLogs
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|resultCode
init|=
literal|0
decl_stmt|;
name|String
name|appIdStr
init|=
name|request
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|request
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|nodeAddress
init|=
name|request
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|String
name|appOwner
init|=
name|request
operator|.
name|getAppOwner
argument_list|()
decl_stmt|;
name|boolean
name|isAppFinished
init|=
name|request
operator|.
name|isAppFinished
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
name|request
operator|.
name|getLogTypes
argument_list|()
decl_stmt|;
comment|// if we provide the node address and the application is in the final
comment|// state, we could directly get logs from HDFS.
if|if
condition|(
name|nodeAddress
operator|!=
literal|null
operator|&&
name|isAppFinished
condition|)
block|{
comment|// if user specified "ALL" as the logFiles param, pass empty list
comment|// to logCliHelper so that it fetches all the logs
return|return
name|printContainerLogsForFinishedApplication
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
name|String
name|nodeHttpAddress
init|=
literal|null
decl_stmt|;
name|String
name|nodeId
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// If the nodeAddress is not provided, we will try to get
comment|// the ContainerReport. In the containerReport, we could get
comment|// nodeAddress and nodeHttpAddress
name|ContainerReport
name|report
init|=
name|getContainerReport
argument_list|(
name|containerIdStr
argument_list|)
decl_stmt|;
name|nodeHttpAddress
operator|=
name|report
operator|.
name|getNodeHttpAddress
argument_list|()
operator|.
name|replaceFirst
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|nodeId
operator|=
name|report
operator|.
name|getAssignedNode
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeHttpAddress
argument_list|(
name|nodeHttpAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|YarnException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|isAppFinished
condition|)
block|{
return|return
name|printContainerLogsForFinishedApplicationWithoutNodeId
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
return|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to get logs for this container:"
operator|+
name|containerIdStr
operator|+
literal|"for the application:"
operator|+
name|appIdStr
operator|+
literal|" with the appOwner: "
operator|+
name|appOwner
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"The application: "
operator|+
name|appIdStr
operator|+
literal|" is still running, and we can not get Container report "
operator|+
literal|"for the container: "
operator|+
name|containerIdStr
operator|+
literal|". Please try later "
operator|+
literal|"or after the application finishes."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|// If the application is not in the final state,
comment|// we will provide the NodeHttpAddress and get the container logs
comment|// by calling NodeManager webservice.
if|if
condition|(
operator|!
name|isAppFinished
condition|)
block|{
comment|// if we do not specify the value for CONTAINER_LOG_FILES option,
comment|// we will only output syslog
if|if
condition|(
name|logFiles
operator|==
literal|null
operator|||
name|logFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logFiles
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"syslog"
argument_list|)
expr_stmt|;
block|}
name|request
operator|.
name|setLogTypes
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
name|printContainerLogsFromRunningApplication
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|request
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the application is in the final state, we will directly
comment|// get the container logs from HDFS.
name|resultCode
operator|=
name|printContainerLogsForFinishedApplication
argument_list|(
name|request
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
return|return
name|resultCode
return|;
block|}
DECL|method|fetchApplicationLogs (ContainerLogsRequest options, LogCLIHelpers logCliHelper)
specifier|private
name|int
name|fetchApplicationLogs
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// If the application has finished, we would fetch the logs
comment|// from HDFS.
comment|// If the application is still running, we would get the full
comment|// list of the containers first, then fetch the logs for each
comment|// container from NM.
name|int
name|resultCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|isAppFinished
argument_list|()
condition|)
block|{
name|ContainerLogsRequest
name|newOptions
init|=
name|getMatchedLogOptions
argument_list|(
name|options
argument_list|,
name|logCliHelper
argument_list|)
decl_stmt|;
if|if
condition|(
name|newOptions
operator|==
literal|null
condition|)
block|{
name|resultCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|resultCode
operator|=
name|logCliHelper
operator|.
name|dumpAllContainersLogs
argument_list|(
name|newOptions
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|ContainerLogsRequest
argument_list|>
name|containerLogRequests
init|=
name|getContainersLogRequestForRunningApplication
argument_list|(
name|options
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerLogsRequest
name|container
range|:
name|containerLogRequests
control|)
block|{
name|printContainerLogsFromRunningApplication
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|container
argument_list|,
name|logCliHelper
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resultCode
operator|==
operator|-
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not find the logs for the application: "
operator|+
name|options
operator|.
name|getAppId
argument_list|()
operator|+
literal|" with the appOwner: "
operator|+
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resultCode
return|;
block|}
DECL|method|guessAppOwner (ApplicationReport appReport, ApplicationId appId)
specifier|private
name|String
name|guessAppOwner
parameter_list|(
name|ApplicationReport
name|appReport
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|appOwner
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|appReport
operator|!=
literal|null
condition|)
block|{
comment|//always use the app owner from the app report if possible
name|appOwner
operator|=
name|appReport
operator|.
name|getUser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|appOwner
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|appOwner
operator|=
name|LogCLIHelpers
operator|.
name|getOwnerForAppIdOrNull
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|appOwner
return|;
block|}
DECL|method|getMatchedLogOptions ( ContainerLogsRequest request, LogCLIHelpers logCliHelper)
specifier|private
name|ContainerLogsRequest
name|getMatchedLogOptions
parameter_list|(
name|ContainerLogsRequest
name|request
parameter_list|,
name|LogCLIHelpers
name|logCliHelper
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerLogsRequest
name|newOptions
init|=
operator|new
name|ContainerLogsRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getLogTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getLogTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|matchedFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getLogTypes
argument_list|()
operator|.
name|contains
argument_list|(
literal|".*"
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
name|logCliHelper
operator|.
name|listContainerLogs
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|matchedFiles
operator|=
name|getMatchedLogFiles
argument_list|(
name|request
argument_list|,
name|files
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchedFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|newOptions
operator|.
name|setLogTypes
argument_list|(
name|matchedFiles
argument_list|)
expr_stmt|;
block|}
return|return
name|newOptions
return|;
block|}
DECL|method|getMatchedLogFiles (ContainerLogsRequest options, Collection<String> candidate, boolean printError)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getMatchedLogFiles
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|candidate
parameter_list|,
name|boolean
name|printError
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|matchedFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filePattern
init|=
name|options
operator|.
name|getLogTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|candidate
control|)
block|{
if|if
condition|(
name|isFileMatching
argument_list|(
name|file
argument_list|,
name|filePattern
argument_list|)
condition|)
block|{
name|matchedFiles
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|matchedFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|printError
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not find any log file matching the pattern: "
operator|+
name|options
operator|.
name|getLogTypes
argument_list|()
operator|+
literal|" for the application: "
operator|+
name|options
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matchedFiles
return|;
block|}
DECL|method|isFileMatching (String fileType, List<String> logTypes)
specifier|private
name|boolean
name|isFileMatching
parameter_list|(
name|String
name|fileType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|logTypes
parameter_list|)
block|{
for|for
control|(
name|String
name|logType
range|:
name|logTypes
control|)
block|{
name|Pattern
name|filterPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|logType
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
name|filterPattern
operator|.
name|matcher
argument_list|(
name|fileType
argument_list|)
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|List
argument_list|<
name|ContainerLogsRequest
argument_list|>
DECL|method|getContainersLogRequestForRunningApplication ( ContainerLogsRequest options)
name|getContainersLogRequestForRunningApplication
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ContainerLogsRequest
argument_list|>
name|newOptionsList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerLogsRequest
argument_list|>
argument_list|()
decl_stmt|;
name|YarnClient
name|yarnClient
init|=
name|createYarnClient
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|attempts
init|=
name|yarnClient
operator|.
name|getApplicationAttempts
argument_list|(
name|options
operator|.
name|getAppId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ApplicationAttemptReport
name|attempt
range|:
name|attempts
control|)
block|{
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|containers
init|=
name|yarnClient
operator|.
name|getContainers
argument_list|(
name|attempt
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerReport
name|container
range|:
name|containers
control|)
block|{
name|ContainerLogsRequest
name|newOptions
init|=
operator|new
name|ContainerLogsRequest
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|newOptions
operator|.
name|setContainerId
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newOptions
operator|.
name|setNodeId
argument_list|(
name|container
operator|.
name|getAssignedNode
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newOptions
operator|.
name|setNodeHttpAddress
argument_list|(
name|container
operator|.
name|getNodeHttpAddress
argument_list|()
operator|.
name|replaceFirst
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we do not specify the value for CONTAINER_LOG_FILES option,
comment|// we will only output syslog
name|List
argument_list|<
name|String
argument_list|>
name|logFiles
init|=
name|newOptions
operator|.
name|getLogTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|logFiles
operator|==
literal|null
operator|||
name|logFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logFiles
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"syslog"
argument_list|)
expr_stmt|;
name|newOptions
operator|.
name|setLogTypes
argument_list|(
name|logFiles
argument_list|)
expr_stmt|;
block|}
name|newOptionsList
operator|.
name|add
argument_list|(
name|newOptions
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newOptionsList
return|;
block|}
finally|finally
block|{
name|yarnClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

