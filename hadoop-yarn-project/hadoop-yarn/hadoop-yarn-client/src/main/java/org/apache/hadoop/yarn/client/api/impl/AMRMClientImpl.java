begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AMRMClient
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|InvalidContainerRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationMasterNotRegisteredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|RackResolver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|AMRMClientImpl
specifier|public
class|class
name|AMRMClientImpl
parameter_list|<
name|T
extends|extends
name|ContainerRequest
parameter_list|>
extends|extends
name|AMRMClient
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMRMClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ANY_LIST
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ANY_LIST
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
DECL|field|lastResponseId
specifier|private
name|int
name|lastResponseId
init|=
literal|0
decl_stmt|;
DECL|field|appHostName
specifier|protected
name|String
name|appHostName
decl_stmt|;
DECL|field|appHostPort
specifier|protected
name|int
name|appHostPort
decl_stmt|;
DECL|field|appTrackingUrl
specifier|protected
name|String
name|appTrackingUrl
decl_stmt|;
DECL|field|rmClient
specifier|protected
name|ApplicationMasterProtocol
name|rmClient
decl_stmt|;
DECL|field|clusterAvailableResources
specifier|protected
name|Resource
name|clusterAvailableResources
decl_stmt|;
DECL|field|clusterNodeCount
specifier|protected
name|int
name|clusterNodeCount
decl_stmt|;
comment|// blacklistedNodes is required for keeping history of blacklisted nodes that
comment|// are sent to RM. On RESYNC command from RM, blacklistedNodes are used to get
comment|// current blacklisted nodes and send back to RM.
DECL|field|blacklistedNodes
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|blacklistAdditions
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|blacklistRemovals
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|class|ResourceRequestInfo
class|class
name|ResourceRequestInfo
block|{
DECL|field|remoteRequest
name|ResourceRequest
name|remoteRequest
decl_stmt|;
DECL|field|containerRequests
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
name|containerRequests
decl_stmt|;
DECL|method|ResourceRequestInfo (Priority priority, String resourceName, Resource capability, boolean relaxLocality)
name|ResourceRequestInfo
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|)
block|{
name|remoteRequest
operator|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|,
name|resourceName
argument_list|,
name|capability
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|remoteRequest
operator|.
name|setRelaxLocality
argument_list|(
name|relaxLocality
argument_list|)
expr_stmt|;
name|containerRequests
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Class compares Resource by memory then cpu in reverse order    */
DECL|class|ResourceReverseMemoryThenCpuComparator
class|class
name|ResourceReverseMemoryThenCpuComparator
implements|implements
name|Comparator
argument_list|<
name|Resource
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (Resource arg0, Resource arg1)
specifier|public
name|int
name|compare
parameter_list|(
name|Resource
name|arg0
parameter_list|,
name|Resource
name|arg1
parameter_list|)
block|{
name|int
name|mem0
init|=
name|arg0
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|int
name|mem1
init|=
name|arg1
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|int
name|cpu0
init|=
name|arg0
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|int
name|cpu1
init|=
name|arg1
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
if|if
condition|(
name|mem0
operator|==
name|mem1
condition|)
block|{
if|if
condition|(
name|cpu0
operator|==
name|cpu1
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|cpu0
operator|<
name|cpu1
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|mem0
operator|<
name|mem1
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|canFit (Resource arg0, Resource arg1)
specifier|static
name|boolean
name|canFit
parameter_list|(
name|Resource
name|arg0
parameter_list|,
name|Resource
name|arg1
parameter_list|)
block|{
name|int
name|mem0
init|=
name|arg0
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|int
name|mem1
init|=
name|arg1
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|int
name|cpu0
init|=
name|arg0
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|int
name|cpu1
init|=
name|arg1
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
if|if
condition|(
name|mem0
operator|<=
name|mem1
operator|&&
name|cpu0
operator|<=
name|cpu1
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|//Key -> Priority
comment|//Value -> Map
comment|//Key->ResourceName (e.g., nodename, rackname, *)
comment|//Value->Map
comment|//Key->Resource Capability
comment|//Value->ResourceRequest
specifier|protected
specifier|final
name|Map
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
argument_list|>
DECL|field|remoteRequestsTable
name|remoteRequestsTable
init|=
operator|new
name|TreeMap
argument_list|<
name|Priority
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|ask
specifier|protected
specifier|final
name|Set
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|TreeSet
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
operator|.
name|ResourceRequestComparator
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|release
specifier|protected
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
comment|// pendingRelease holds history or release requests.request is removed only if
comment|// RM sends completedContainer.
comment|// How it different from release? --> release is for per allocate() request.
DECL|field|pendingRelease
specifier|protected
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|pendingRelease
init|=
operator|new
name|TreeSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|AMRMClientImpl ()
specifier|public
name|AMRMClientImpl
parameter_list|()
block|{
name|super
argument_list|(
name|AMRMClientImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|RackResolver
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rmClient
operator|=
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|this
operator|.
name|rmClient
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerApplicationMaster ( String appHostName, int appHostPort, String appTrackingUrl)
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|String
name|appHostName
parameter_list|,
name|int
name|appHostPort
parameter_list|,
name|String
name|appTrackingUrl
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|this
operator|.
name|appHostName
operator|=
name|appHostName
expr_stmt|;
name|this
operator|.
name|appHostPort
operator|=
name|appHostPort
expr_stmt|;
name|this
operator|.
name|appTrackingUrl
operator|=
name|appTrackingUrl
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|appHostName
operator|!=
literal|null
argument_list|,
literal|"The host name should not be null"
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|appHostPort
operator|>=
operator|-
literal|1
argument_list|,
literal|"Port number of the host"
operator|+
literal|" should be any integers larger than or equal to -1"
argument_list|)
expr_stmt|;
return|return
name|registerApplicationMaster
argument_list|()
return|;
block|}
DECL|method|registerApplicationMaster ()
specifier|private
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RegisterApplicationMasterRequest
name|request
init|=
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|appHostName
argument_list|,
name|this
operator|.
name|appHostPort
argument_list|,
name|this
operator|.
name|appTrackingUrl
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterResponse
name|response
init|=
name|rmClient
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|lastResponseId
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|populateNMTokens
argument_list|(
name|response
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
DECL|method|allocate (float progressIndicator)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|float
name|progressIndicator
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|progressIndicator
operator|>=
literal|0
argument_list|,
literal|"Progress indicator should not be negative"
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|releaseList
init|=
literal|null
decl_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistToAdd
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|blacklistToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|askList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|(
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|r
range|:
name|ask
control|)
block|{
comment|// create a copy of ResourceRequest as we might change it while the
comment|// RPC layer is using it to send info across
name|askList
operator|.
name|add
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|r
operator|.
name|getPriority
argument_list|()
argument_list|,
name|r
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|r
operator|.
name|getCapability
argument_list|()
argument_list|,
name|r
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|r
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|r
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|releaseList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|release
argument_list|)
expr_stmt|;
comment|// optimistically clear this collection assuming no RPC failure
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
name|release
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blacklistToAdd
operator|.
name|addAll
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
name|blacklistToRemove
operator|.
name|addAll
argument_list|(
name|blacklistRemovals
argument_list|)
expr_stmt|;
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
name|blacklistToAdd
argument_list|,
name|blacklistToRemove
argument_list|)
decl_stmt|;
name|allocateRequest
operator|=
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
name|lastResponseId
argument_list|,
name|progressIndicator
argument_list|,
name|askList
argument_list|,
name|releaseList
argument_list|,
name|blacklistRequest
argument_list|)
expr_stmt|;
comment|// clear blacklistAdditions and blacklistRemovals before
comment|// unsynchronized part
name|blacklistAdditions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blacklistRemovals
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|allocateResponse
operator|=
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ApplicationMaster is out of sync with ResourceManager,"
operator|+
literal|" hence resyncing."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|release
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|pendingRelease
argument_list|)
expr_stmt|;
name|blacklistAdditions
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|blacklistedNodes
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
name|rr
range|:
name|remoteRequestsTable
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
name|capabalities
range|:
name|rr
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ResourceRequestInfo
name|request
range|:
name|capabalities
operator|.
name|values
argument_list|()
control|)
block|{
name|addResourceRequestToAsk
argument_list|(
name|request
operator|.
name|remoteRequest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// re register with RM
name|registerApplicationMaster
argument_list|()
expr_stmt|;
name|allocateResponse
operator|=
name|allocate
argument_list|(
name|progressIndicator
argument_list|)
expr_stmt|;
return|return
name|allocateResponse
return|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// update these on successful RPC
name|clusterNodeCount
operator|=
name|allocateResponse
operator|.
name|getNumClusterNodes
argument_list|()
expr_stmt|;
name|lastResponseId
operator|=
name|allocateResponse
operator|.
name|getResponseId
argument_list|()
expr_stmt|;
name|clusterAvailableResources
operator|=
name|allocateResponse
operator|.
name|getAvailableResources
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|allocateResponse
operator|.
name|getNMTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|populateNMTokens
argument_list|(
name|allocateResponse
operator|.
name|getNMTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allocateResponse
operator|.
name|getAMRMToken
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|updateAMRMToken
argument_list|(
name|allocateResponse
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pendingRelease
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removePendingReleaseRequests
argument_list|(
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
comment|// TODO how to differentiate remote yarn exception vs error in rpc
if|if
condition|(
name|allocateResponse
operator|==
literal|null
condition|)
block|{
comment|// we hit an exception in allocate()
comment|// preserve ask and release for next call to allocate()
synchronized|synchronized
init|(
name|this
init|)
block|{
name|release
operator|.
name|addAll
argument_list|(
name|releaseList
argument_list|)
expr_stmt|;
comment|// requests could have been added or deleted during call to allocate
comment|// If requests were added/removed then there is nothing to do since
comment|// the ResourceRequest object in ask would have the actual new value.
comment|// If ask does not have this ResourceRequest then it was unchanged and
comment|// so we can add the value back safely.
comment|// This assumes that there will no concurrent calls to allocate() and
comment|// so we dont have to worry about ask being changed in the
comment|// synchronized block at the beginning of this method.
for|for
control|(
name|ResourceRequest
name|oldAsk
range|:
name|askList
control|)
block|{
if|if
condition|(
operator|!
name|ask
operator|.
name|contains
argument_list|(
name|oldAsk
argument_list|)
condition|)
block|{
name|ask
operator|.
name|add
argument_list|(
name|oldAsk
argument_list|)
expr_stmt|;
block|}
block|}
name|blacklistAdditions
operator|.
name|addAll
argument_list|(
name|blacklistToAdd
argument_list|)
expr_stmt|;
name|blacklistRemovals
operator|.
name|addAll
argument_list|(
name|blacklistToRemove
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|allocateResponse
return|;
block|}
DECL|method|removePendingReleaseRequests ( List<ContainerStatus> completedContainersStatuses)
specifier|protected
name|void
name|removePendingReleaseRequests
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainersStatuses
parameter_list|)
block|{
for|for
control|(
name|ContainerStatus
name|containerStatus
range|:
name|completedContainersStatuses
control|)
block|{
name|pendingRelease
operator|.
name|remove
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|populateNMTokens (List<NMToken> nmTokens)
specifier|protected
name|void
name|populateNMTokens
parameter_list|(
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokens
parameter_list|)
block|{
for|for
control|(
name|NMToken
name|token
range|:
name|nmTokens
control|)
block|{
name|String
name|nodeId
init|=
name|token
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|getNMTokenCache
argument_list|()
operator|.
name|containsToken
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Replacing token for : "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received new token for : "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|getNMTokenCache
argument_list|()
operator|.
name|setToken
argument_list|(
name|nodeId
argument_list|,
name|token
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|unregisterApplicationMaster (FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl)
specifier|public
name|void
name|unregisterApplicationMaster
parameter_list|(
name|FinalApplicationStatus
name|appStatus
parameter_list|,
name|String
name|appMessage
parameter_list|,
name|String
name|appTrackingUrl
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|appStatus
operator|!=
literal|null
argument_list|,
literal|"AppStatus should not be null."
argument_list|)
expr_stmt|;
name|FinishApplicationMasterRequest
name|request
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|appStatus
argument_list|,
name|appMessage
argument_list|,
name|appTrackingUrl
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|FinishApplicationMasterResponse
name|response
init|=
name|rmClient
operator|.
name|finishApplicationMaster
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getIsUnregistered
argument_list|()
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for application to be successfully unregistered."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted while waiting for application"
operator|+
literal|" to be removed from RMStateStore"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationMasterNotRegisteredException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ApplicationMaster is out of sync with ResourceManager,"
operator|+
literal|" hence resyncing."
argument_list|)
expr_stmt|;
comment|// re register with RM
name|registerApplicationMaster
argument_list|()
expr_stmt|;
name|unregisterApplicationMaster
argument_list|(
name|appStatus
argument_list|,
name|appMessage
argument_list|,
name|appTrackingUrl
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addContainerRequest (T req)
specifier|public
specifier|synchronized
name|void
name|addContainerRequest
parameter_list|(
name|T
name|req
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|req
operator|!=
literal|null
argument_list|,
literal|"Resource request can not be null."
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|dedupedRacks
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getRacks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dedupedRacks
operator|.
name|addAll
argument_list|(
name|req
operator|.
name|getRacks
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|getRacks
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|dedupedRacks
operator|.
name|size
argument_list|()
condition|)
block|{
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"ContainerRequest has duplicate racks: "
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|req
operator|.
name|getRacks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|inferredRacks
init|=
name|resolveRacks
argument_list|(
name|req
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
name|inferredRacks
operator|.
name|removeAll
argument_list|(
name|dedupedRacks
argument_list|)
expr_stmt|;
comment|// check that specific and non-specific requests cannot be mixed within a
comment|// priority
name|checkLocalityRelaxationConflict
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ANY_LIST
argument_list|,
name|req
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that specific rack cannot be mixed with specific node within a
comment|// priority. If node and its rack are both specified then they must be
comment|// in the same request.
comment|// For explicitly requested racks, we set locality relaxation to true
name|checkLocalityRelaxationConflict
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|dedupedRacks
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|checkLocalityRelaxationConflict
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|inferredRacks
argument_list|,
name|req
operator|.
name|getRelaxLocality
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the node label expression specified is valid
name|checkNodeLabelExpression
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|.
name|getNodes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|dedupedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|req
operator|.
name|getNodes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dedupedNodes
operator|.
name|size
argument_list|()
operator|!=
name|req
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"ContainerRequest has duplicate nodes: "
operator|+
name|joiner
operator|.
name|join
argument_list|(
name|req
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|node
range|:
name|dedupedNodes
control|)
block|{
name|addResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|node
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
argument_list|,
literal|true
argument_list|,
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|rack
range|:
name|dedupedRacks
control|)
block|{
name|addResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rack
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
argument_list|,
literal|true
argument_list|,
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure node requests are accompanied by requests for
comment|// corresponding rack
for|for
control|(
name|String
name|rack
range|:
name|inferredRacks
control|)
block|{
name|addResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rack
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
argument_list|,
name|req
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Off-switch
name|addResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
argument_list|,
name|req
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|req
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeContainerRequest (T req)
specifier|public
specifier|synchronized
name|void
name|removeContainerRequest
parameter_list|(
name|T
name|req
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|req
operator|!=
literal|null
argument_list|,
literal|"Resource request can not be null."
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allRacks
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getRacks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|allRacks
operator|.
name|addAll
argument_list|(
name|req
operator|.
name|getRacks
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allRacks
operator|.
name|addAll
argument_list|(
name|resolveRacks
argument_list|(
name|req
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update resource requests
if|if
condition|(
name|req
operator|.
name|getNodes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|node
range|:
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|req
operator|.
name|getNodes
argument_list|()
argument_list|)
control|)
block|{
name|decResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|node
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|rack
range|:
name|allRacks
control|)
block|{
name|decResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|rack
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
name|decResourceRequest
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|req
operator|.
name|getCapability
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|releaseAssignedContainer (ContainerId containerId)
specifier|public
specifier|synchronized
name|void
name|releaseAssignedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|containerId
operator|!=
literal|null
argument_list|,
literal|"ContainerId can not be null."
argument_list|)
expr_stmt|;
name|pendingRelease
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|release
operator|.
name|add
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAvailableResources ()
specifier|public
specifier|synchronized
name|Resource
name|getAvailableResources
parameter_list|()
block|{
return|return
name|clusterAvailableResources
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodeCount ()
specifier|public
specifier|synchronized
name|int
name|getClusterNodeCount
parameter_list|()
block|{
return|return
name|clusterNodeCount
return|;
block|}
annotation|@
name|Override
DECL|method|getMatchingRequests ( Priority priority, String resourceName, Resource capability)
specifier|public
specifier|synchronized
name|List
argument_list|<
name|?
extends|extends
name|Collection
argument_list|<
name|T
argument_list|>
argument_list|>
name|getMatchingRequests
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|Resource
name|capability
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|capability
operator|!=
literal|null
argument_list|,
literal|"The Resource to be requested should not be null "
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|priority
operator|!=
literal|null
argument_list|,
literal|"The priority at which to request containers should not be null "
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|LinkedHashSet
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
name|remoteRequests
init|=
name|this
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRequests
operator|==
literal|null
condition|)
block|{
return|return
name|list
return|;
block|}
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
name|reqMap
init|=
name|remoteRequests
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqMap
operator|==
literal|null
condition|)
block|{
return|return
name|list
return|;
block|}
name|ResourceRequestInfo
name|resourceRequestInfo
init|=
name|reqMap
operator|.
name|get
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceRequestInfo
operator|!=
literal|null
operator|&&
operator|!
name|resourceRequestInfo
operator|.
name|containerRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|resourceRequestInfo
operator|.
name|containerRequests
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
comment|// no exact match. Container may be larger than what was requested.
comment|// get all resources<= capability. map is reverse sorted.
name|SortedMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
name|tailMap
init|=
name|reqMap
operator|.
name|tailMap
argument_list|(
name|capability
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
name|entry
range|:
name|tailMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|canFit
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|capability
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|containerRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// match found that fits in the larger resource
name|list
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|containerRequests
argument_list|)
expr_stmt|;
block|}
block|}
comment|// no match found
return|return
name|list
return|;
block|}
DECL|method|resolveRacks (List<String> nodes)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|resolveRacks
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
comment|// Ensure node requests are accompanied by requests for
comment|// corresponding rack
name|String
name|rack
init|=
name|RackResolver
operator|.
name|resolve
argument_list|(
name|node
argument_list|)
operator|.
name|getNetworkLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|rack
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to resolve rack for node "
operator|+
name|node
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|racks
operator|.
name|add
argument_list|(
name|rack
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|racks
return|;
block|}
comment|/**    * ContainerRequests with locality relaxation cannot be made at the same    * priority as ContainerRequests without locality relaxation.    */
DECL|method|checkLocalityRelaxationConflict (Priority priority, Collection<String> locations, boolean relaxLocality)
specifier|private
name|void
name|checkLocalityRelaxationConflict
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|locations
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
name|remoteRequests
init|=
name|this
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRequests
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Locality relaxation will be set to relaxLocality for all implicitly
comment|// requested racks. Make sure that existing rack requests match this.
for|for
control|(
name|String
name|location
range|:
name|locations
control|)
block|{
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
name|reqs
init|=
name|remoteRequests
operator|.
name|get
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqs
operator|!=
literal|null
operator|&&
operator|!
name|reqs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|existingRelaxLocality
init|=
name|reqs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|remoteRequest
operator|.
name|getRelaxLocality
argument_list|()
decl_stmt|;
if|if
condition|(
name|relaxLocality
operator|!=
name|existingRelaxLocality
condition|)
block|{
throw|throw
operator|new
name|InvalidContainerRequestException
argument_list|(
literal|"Cannot submit a "
operator|+
literal|"ContainerRequest asking for location "
operator|+
name|location
operator|+
literal|" with locality relaxation "
operator|+
name|relaxLocality
operator|+
literal|" when it has "
operator|+
literal|"already been requested with locality relaxation "
operator|+
name|existingRelaxLocality
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * Valid if a node label expression specified on container request is valid or    * not    *     * @param containerRequest    */
DECL|method|checkNodeLabelExpression (T containerRequest)
specifier|private
name|void
name|checkNodeLabelExpression
parameter_list|(
name|T
name|containerRequest
parameter_list|)
block|{
name|String
name|exp
init|=
name|containerRequest
operator|.
name|getNodeLabelExpression
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|exp
operator|||
name|exp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Don't support specifying>= 2 node labels in a node label expression now
if|if
condition|(
name|exp
operator|.
name|contains
argument_list|(
literal|"&&"
argument_list|)
operator|||
name|exp
operator|.
name|contains
argument_list|(
literal|"||"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidContainerRequestException
argument_list|(
literal|"Cannot specify more than two node labels"
operator|+
literal|" in a single node label expression"
argument_list|)
throw|;
block|}
comment|// Don't allow specify node label against ANY request
if|if
condition|(
operator|(
name|containerRequest
operator|.
name|getRacks
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|containerRequest
operator|.
name|getRacks
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
operator|||
operator|(
name|containerRequest
operator|.
name|getNodes
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|containerRequest
operator|.
name|getNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|InvalidContainerRequestException
argument_list|(
literal|"Cannot specify node label with rack and node"
argument_list|)
throw|;
block|}
block|}
DECL|method|addResourceRequestToAsk (ResourceRequest remoteRequest)
specifier|private
name|void
name|addResourceRequestToAsk
parameter_list|(
name|ResourceRequest
name|remoteRequest
parameter_list|)
block|{
comment|// This code looks weird but is needed because of the following scenario.
comment|// A ResourceRequest is removed from the remoteRequestTable. A 0 container
comment|// request is added to 'ask' to notify the RM about not needing it any more.
comment|// Before the call to allocate, the user now requests more containers. If
comment|// the locations of the 0 size request and the new request are the same
comment|// (with the difference being only container count), then the set comparator
comment|// will consider both to be the same and not add the new request to ask. So
comment|// we need to check for the "same" request being present and remove it and
comment|// then add it back. The comparator is container count agnostic.
comment|// This should happen only rarely but we do need to guard against it.
if|if
condition|(
name|ask
operator|.
name|contains
argument_list|(
name|remoteRequest
argument_list|)
condition|)
block|{
name|ask
operator|.
name|remove
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
block|}
name|ask
operator|.
name|add
argument_list|(
name|remoteRequest
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
DECL|method|addResourceRequest (Priority priority, String resourceName, Resource capability, T req, boolean relaxLocality, String labelExpression)
name|addResourceRequest
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|T
name|req
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|,
name|String
name|labelExpression
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
name|remoteRequests
init|=
name|this
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRequests
operator|==
literal|null
condition|)
block|{
name|remoteRequests
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|remoteRequestsTable
operator|.
name|put
argument_list|(
name|priority
argument_list|,
name|remoteRequests
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Added priority="
operator|+
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
name|reqMap
init|=
name|remoteRequests
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqMap
operator|==
literal|null
condition|)
block|{
comment|// capabilities are stored in reverse sorted order. smallest last.
name|reqMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|(
operator|new
name|ResourceReverseMemoryThenCpuComparator
argument_list|()
argument_list|)
expr_stmt|;
name|remoteRequests
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|reqMap
argument_list|)
expr_stmt|;
block|}
name|ResourceRequestInfo
name|resourceRequestInfo
init|=
name|reqMap
operator|.
name|get
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceRequestInfo
operator|==
literal|null
condition|)
block|{
name|resourceRequestInfo
operator|=
operator|new
name|ResourceRequestInfo
argument_list|(
name|priority
argument_list|,
name|resourceName
argument_list|,
name|capability
argument_list|,
name|relaxLocality
argument_list|)
expr_stmt|;
name|reqMap
operator|.
name|put
argument_list|(
name|capability
argument_list|,
name|resourceRequestInfo
argument_list|)
expr_stmt|;
block|}
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|setNumContainers
argument_list|(
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|relaxLocality
condition|)
block|{
name|resourceRequestInfo
operator|.
name|containerRequests
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ResourceRequest
operator|.
name|ANY
operator|.
name|equals
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|setNodeLabelExpression
argument_list|(
name|labelExpression
argument_list|)
expr_stmt|;
block|}
comment|// Note this down for next interaction with ResourceManager
name|addResourceRequestToAsk
argument_list|(
name|resourceRequestInfo
operator|.
name|remoteRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"addResourceRequest:"
operator|+
literal|" applicationId="
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" resourceName="
operator|+
name|resourceName
operator|+
literal|" numContainers="
operator|+
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|" #asks="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|decResourceRequest (Priority priority, String resourceName, Resource capability, T req)
specifier|private
name|void
name|decResourceRequest
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|T
name|req
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TreeMap
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
argument_list|>
name|remoteRequests
init|=
name|this
operator|.
name|remoteRequestsTable
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteRequests
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not decrementing resource as priority "
operator|+
name|priority
operator|+
literal|" is not present in request table"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|Map
argument_list|<
name|Resource
argument_list|,
name|ResourceRequestInfo
argument_list|>
name|reqMap
init|=
name|remoteRequests
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqMap
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Not decrementing resource as "
operator|+
name|resourceName
operator|+
literal|" is not present in request table"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|ResourceRequestInfo
name|resourceRequestInfo
init|=
name|reqMap
operator|.
name|get
argument_list|(
name|capability
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"BEFORE decResourceRequest:"
operator|+
literal|" applicationId="
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" resourceName="
operator|+
name|resourceName
operator|+
literal|" numContainers="
operator|+
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|" #asks="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|setNumContainers
argument_list|(
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|resourceRequestInfo
operator|.
name|containerRequests
operator|.
name|remove
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|<
literal|0
condition|)
block|{
comment|// guard against spurious removals
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|setNumContainers
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// send the ResourceRequest to RM even if is 0 because it needs to override
comment|// a previously sent value. If ResourceRequest was not sent previously then
comment|// sending 0 aught to be a no-op on RM
name|addResourceRequestToAsk
argument_list|(
name|resourceRequestInfo
operator|.
name|remoteRequest
argument_list|)
expr_stmt|;
comment|// delete entries from map if no longer needed
if|if
condition|(
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|reqMap
operator|.
name|remove
argument_list|(
name|capability
argument_list|)
expr_stmt|;
if|if
condition|(
name|reqMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|remoteRequests
operator|.
name|remove
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteRequests
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|remoteRequestsTable
operator|.
name|remove
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"AFTER decResourceRequest:"
operator|+
literal|" applicationId="
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" resourceName="
operator|+
name|resourceName
operator|+
literal|" numContainers="
operator|+
name|resourceRequestInfo
operator|.
name|remoteRequest
operator|.
name|getNumContainers
argument_list|()
operator|+
literal|" #asks="
operator|+
name|ask
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|updateBlacklist (List<String> blacklistAdditions, List<String> blacklistRemovals)
specifier|public
specifier|synchronized
name|void
name|updateBlacklist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
parameter_list|)
block|{
if|if
condition|(
name|blacklistAdditions
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|blacklistAdditions
operator|.
name|addAll
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklistedNodes
operator|.
name|addAll
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
comment|// if some resources are also in blacklistRemovals updated before, we
comment|// should remove them here.
name|this
operator|.
name|blacklistRemovals
operator|.
name|removeAll
argument_list|(
name|blacklistAdditions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blacklistRemovals
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|blacklistRemovals
operator|.
name|addAll
argument_list|(
name|blacklistRemovals
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklistedNodes
operator|.
name|removeAll
argument_list|(
name|blacklistRemovals
argument_list|)
expr_stmt|;
comment|// if some resources are in blacklistAdditions before, we should remove
comment|// them here.
name|this
operator|.
name|blacklistAdditions
operator|.
name|removeAll
argument_list|(
name|blacklistRemovals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|blacklistAdditions
operator|!=
literal|null
operator|&&
name|blacklistRemovals
operator|!=
literal|null
operator|&&
name|blacklistAdditions
operator|.
name|removeAll
argument_list|(
name|blacklistRemovals
argument_list|)
condition|)
block|{
comment|// we allow resources to appear in addition list and removal list in the
comment|// same invocation of updateBlacklist(), but should get a warn here.
name|LOG
operator|.
name|warn
argument_list|(
literal|"The same resources appear in both blacklistAdditions and "
operator|+
literal|"blacklistRemovals in updateBlacklist."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateAMRMToken (Token token)
specifier|private
name|void
name|updateAMRMToken
parameter_list|(
name|Token
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Preserve the token service sent by the RM when adding the token
comment|// to ensure we replace the previous token setup by the RM.
comment|// Afterwards we can update the service address for the RPC layer.
name|UserGroupInformation
name|currentUGI
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|currentUGI
operator|.
name|addToken
argument_list|(
name|amrmToken
argument_list|)
expr_stmt|;
name|amrmToken
operator|.
name|setService
argument_list|(
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

