begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_interface
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|interface|AMRMClient
specifier|public
interface|interface
name|AMRMClient
extends|extends
name|Service
block|{
comment|/**    * Value used to define no locality    */
DECL|field|ANY
specifier|static
specifier|final
name|String
name|ANY
init|=
literal|"*"
decl_stmt|;
comment|/**    * Object to represent container request for resources.    * Resources may be localized to nodes and racks.    * Resources may be assigned priorities.    * Can ask for multiple containers of a given type.    */
DECL|class|ContainerRequest
specifier|public
specifier|static
class|class
name|ContainerRequest
block|{
DECL|field|capability
name|Resource
name|capability
decl_stmt|;
DECL|field|hosts
name|String
index|[]
name|hosts
decl_stmt|;
DECL|field|racks
name|String
index|[]
name|racks
decl_stmt|;
DECL|field|priority
name|Priority
name|priority
decl_stmt|;
DECL|field|containerCount
name|int
name|containerCount
decl_stmt|;
DECL|method|ContainerRequest (Resource capability, String[] hosts, String[] racks, Priority priority, int containerCount)
specifier|public
name|ContainerRequest
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|String
index|[]
name|hosts
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|int
name|containerCount
parameter_list|)
block|{
name|this
operator|.
name|capability
operator|=
name|capability
expr_stmt|;
name|this
operator|.
name|hosts
operator|=
operator|(
name|hosts
operator|!=
literal|null
condition|?
name|hosts
operator|.
name|clone
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
name|this
operator|.
name|racks
operator|=
operator|(
name|racks
operator|!=
literal|null
condition|?
name|racks
operator|.
name|clone
argument_list|()
else|:
literal|null
operator|)
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|containerCount
operator|=
name|containerCount
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Capability["
argument_list|)
operator|.
name|append
argument_list|(
name|capability
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Priority["
argument_list|)
operator|.
name|append
argument_list|(
name|priority
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ContainerCount["
argument_list|)
operator|.
name|append
argument_list|(
name|containerCount
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * Register the application master. This must be called before any     * other interaction    * @param appHostName Name of the host on which master is running    * @param appHostPort Port master is listening on    * @param appTrackingUrl URL at which the master info can be seen    * @return<code>RegisterApplicationMasterResponse</code>    * @throws YarnRemoteException    */
specifier|public
name|RegisterApplicationMasterResponse
DECL|method|registerApplicationMaster (String appHostName, int appHostPort, String appTrackingUrl)
name|registerApplicationMaster
parameter_list|(
name|String
name|appHostName
parameter_list|,
name|int
name|appHostPort
parameter_list|,
name|String
name|appTrackingUrl
parameter_list|)
throws|throws
name|YarnRemoteException
function_decl|;
comment|/**    * Request additional containers and receive new container allocations.    * Requests made via<code>addContainerRequest</code> are sent to the     *<code>ResourceManager</code>. New containers assigned to the master are     * retrieved. Status of completed containers and node health updates are     * also retrieved.    * This also doubles up as a heartbeat to the ResourceManager and must be     * made periodically.    * The call may not always return any new allocations of containers.    * App should not make concurrent allocate requests. May cause request loss.    * @param progressIndicator Indicates progress made by the master    * @return the response of the allocate request    * @throws YarnRemoteException    */
DECL|method|allocate (float progressIndicator)
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|float
name|progressIndicator
parameter_list|)
throws|throws
name|YarnRemoteException
function_decl|;
comment|/**    * Unregister the application master. This must be called in the end.    * @param appStatus Success/Failure status of the master    * @param appMessage Diagnostics message on failure    * @param appTrackingUrl New URL to get master info    * @throws YarnRemoteException    */
DECL|method|unregisterApplicationMaster (FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl)
specifier|public
name|void
name|unregisterApplicationMaster
parameter_list|(
name|FinalApplicationStatus
name|appStatus
parameter_list|,
name|String
name|appMessage
parameter_list|,
name|String
name|appTrackingUrl
parameter_list|)
throws|throws
name|YarnRemoteException
function_decl|;
comment|/**    * Request containers for resources before calling<code>allocate</code>    * @param req Resource request    */
DECL|method|addContainerRequest (ContainerRequest req)
specifier|public
name|void
name|addContainerRequest
parameter_list|(
name|ContainerRequest
name|req
parameter_list|)
function_decl|;
comment|/**    * Remove previous container request. The previous container request may have     * already been sent to the ResourceManager. So even after the remove request     * the app must be prepared to receive an allocation for the previous request     * even after the remove request    * @param req Resource request    */
DECL|method|removeContainerRequest (ContainerRequest req)
specifier|public
name|void
name|removeContainerRequest
parameter_list|(
name|ContainerRequest
name|req
parameter_list|)
function_decl|;
comment|/**    * Release containers assigned by the Resource Manager. If the app cannot use    * the container or wants to give up the container then it can release them.    * The app needs to make new requests for the released resource capability if    * it still needs it. eg. it released non-local resources    * @param containerId    */
DECL|method|releaseAssignedContainer (ContainerId containerId)
specifier|public
name|void
name|releaseAssignedContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
function_decl|;
comment|/**    * Get the currently available resources in the cluster.    * A valid value is available after a call to allocate has been made    * @return Currently available resources    */
DECL|method|getClusterAvailableResources ()
specifier|public
name|Resource
name|getClusterAvailableResources
parameter_list|()
function_decl|;
comment|/**    * Get the current number of nodes in the cluster.    * A valid values is available after a call to allocate has been made    * @return Current number of nodes in the cluster    */
DECL|method|getClusterNodeCount ()
specifier|public
name|int
name|getClusterNodeCount
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

