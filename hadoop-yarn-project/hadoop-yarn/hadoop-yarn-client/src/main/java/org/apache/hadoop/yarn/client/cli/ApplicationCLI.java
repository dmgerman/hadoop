begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ApplicationCLI
specifier|public
class|class
name|ApplicationCLI
extends|extends
name|YarnCLI
block|{
DECL|field|APPLICATIONS_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATIONS_PATTERN
init|=
literal|"%30s\t%20s\t%20s\t%10s\t%10s\t%18s\t%18s\t%15s\t%35s"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|APPLICATION_ATTEMPTS_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_ATTEMPTS_PATTERN
init|=
literal|"%30s\t%20s\t%35s\t%35s"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|CONTAINER_PATTERN
specifier|private
specifier|static
specifier|final
name|String
name|CONTAINER_PATTERN
init|=
literal|"%30s\t%20s\t%20s\t%20s\t%20s\t%35s"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|APP_TYPE_CMD
specifier|private
specifier|static
specifier|final
name|String
name|APP_TYPE_CMD
init|=
literal|"appTypes"
decl_stmt|;
DECL|field|APP_STATE_CMD
specifier|private
specifier|static
specifier|final
name|String
name|APP_STATE_CMD
init|=
literal|"appStates"
decl_stmt|;
DECL|field|ALLSTATES_OPTION
specifier|private
specifier|static
specifier|final
name|String
name|ALLSTATES_OPTION
init|=
literal|"ALL"
decl_stmt|;
DECL|field|QUEUE_CMD
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_CMD
init|=
literal|"queue"
decl_stmt|;
DECL|field|APPLICATION
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION
init|=
literal|"application"
decl_stmt|;
DECL|field|APPLICATION_ATTEMPT
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION_ATTEMPT
init|=
literal|"applicationattempt"
decl_stmt|;
DECL|field|CONTAINER
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINER
init|=
literal|"container"
decl_stmt|;
DECL|field|allAppStates
specifier|private
name|boolean
name|allAppStates
decl_stmt|;
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationCLI
name|cli
init|=
operator|new
name|ApplicationCLI
argument_list|()
decl_stmt|;
name|cli
operator|.
name|setSysOutPrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|cli
operator|.
name|setSysErrPrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|cli
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|cli
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|STATUS_CMD
argument_list|,
literal|true
argument_list|,
literal|"Prints the status of the application."
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
operator|&&
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|APPLICATION_ATTEMPT
argument_list|)
operator|==
literal|0
condition|)
block|{
name|opts
operator|.
name|addOption
argument_list|(
name|LIST_CMD
argument_list|,
literal|true
argument_list|,
literal|"List application attempts for aplication from AHS. "
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
operator|&&
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"container"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|opts
operator|.
name|addOption
argument_list|(
name|LIST_CMD
argument_list|,
literal|true
argument_list|,
literal|"List containers for application attempts from AHS. "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|opts
operator|.
name|addOption
argument_list|(
name|LIST_CMD
argument_list|,
literal|false
argument_list|,
literal|"List applications from the RM. "
operator|+
literal|"Supports optional use of -appTypes to filter applications "
operator|+
literal|"based on application type, "
operator|+
literal|"and -appStates to filter applications based on application state"
argument_list|)
expr_stmt|;
block|}
name|opts
operator|.
name|addOption
argument_list|(
name|KILL_CMD
argument_list|,
literal|true
argument_list|,
literal|"Kills the application."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|MOVE_TO_QUEUE_CMD
argument_list|,
literal|true
argument_list|,
literal|"Moves the application to a "
operator|+
literal|"different queue."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|QUEUE_CMD
argument_list|,
literal|true
argument_list|,
literal|"Works with the movetoqueue command to"
operator|+
literal|" specify which queue to move an application to."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|HELP_CMD
argument_list|,
literal|false
argument_list|,
literal|"Displays help for all commands."
argument_list|)
expr_stmt|;
name|Option
name|appTypeOpt
init|=
operator|new
name|Option
argument_list|(
name|APP_TYPE_CMD
argument_list|,
literal|true
argument_list|,
literal|"Works with -list to "
operator|+
literal|"filter applications based on "
operator|+
literal|"input comma-separated list of application types."
argument_list|)
decl_stmt|;
name|appTypeOpt
operator|.
name|setValueSeparator
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|appTypeOpt
operator|.
name|setArgs
argument_list|(
name|Option
operator|.
name|UNLIMITED_VALUES
argument_list|)
expr_stmt|;
name|appTypeOpt
operator|.
name|setArgName
argument_list|(
literal|"Types"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|appTypeOpt
argument_list|)
expr_stmt|;
name|Option
name|appStateOpt
init|=
operator|new
name|Option
argument_list|(
name|APP_STATE_CMD
argument_list|,
literal|true
argument_list|,
literal|"Works with -list "
operator|+
literal|"to filter applications based on input comma-separated list of "
operator|+
literal|"application states. "
operator|+
name|getAllValidApplicationStates
argument_list|()
argument_list|)
decl_stmt|;
name|appStateOpt
operator|.
name|setValueSeparator
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|appStateOpt
operator|.
name|setArgs
argument_list|(
name|Option
operator|.
name|UNLIMITED_VALUES
argument_list|)
expr_stmt|;
name|appStateOpt
operator|.
name|setArgName
argument_list|(
literal|"States"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|appStateOpt
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|KILL_CMD
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Application ID"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|MOVE_TO_QUEUE_CMD
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Application ID"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|QUEUE_CMD
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Queue Name"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
name|STATUS_CMD
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Application ID"
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|CommandLine
name|cliParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"Missing argument for options"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|STATUS_CMD
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|APPLICATION
argument_list|)
operator|==
literal|0
operator|)
operator|||
operator|(
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|APPLICATION_ATTEMPT
argument_list|)
operator|==
literal|0
operator|)
operator|||
operator|(
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|CONTAINER
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|APPLICATION_ATTEMPT
argument_list|)
operator|==
literal|0
condition|)
block|{
name|printApplicationAttemptReport
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|STATUS_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|CONTAINER
argument_list|)
operator|==
literal|0
condition|)
block|{
name|printContainerReport
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|STATUS_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printApplicationReport
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|STATUS_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|LIST_CMD
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|APPLICATION_ATTEMPT
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|listApplicationAttempts
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|LIST_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|compareToIgnoreCase
argument_list|(
name|CONTAINER
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|listContainers
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|LIST_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allAppStates
operator|=
literal|false
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|APP_TYPE_CMD
argument_list|)
condition|)
block|{
name|String
index|[]
name|types
init|=
name|cliParser
operator|.
name|getOptionValues
argument_list|(
name|APP_TYPE_CMD
argument_list|)
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appTypes
operator|.
name|add
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|YarnApplicationState
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|APP_STATE_CMD
argument_list|)
condition|)
block|{
name|String
index|[]
name|states
init|=
name|cliParser
operator|.
name|getOptionValues
argument_list|(
name|APP_STATE_CMD
argument_list|)
decl_stmt|;
if|if
condition|(
name|states
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|state
range|:
name|states
control|)
block|{
if|if
condition|(
operator|!
name|state
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|trim
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|ALLSTATES_OPTION
argument_list|)
condition|)
block|{
name|allAppStates
operator|=
literal|true
expr_stmt|;
break|break;
block|}
try|try
block|{
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|toUpperCase
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"The application state "
operator|+
name|state
operator|+
literal|" is invalid."
argument_list|)
expr_stmt|;
name|sysout
operator|.
name|println
argument_list|(
name|getAllValidApplicationStates
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
block|}
block|}
block|}
name|listApplications
argument_list|(
name|appTypes
argument_list|,
name|appStates
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|KILL_CMD
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|killApplication
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|KILL_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|MOVE_TO_QUEUE_CMD
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|cliParser
operator|.
name|hasOption
argument_list|(
name|QUEUE_CMD
argument_list|)
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|moveApplicationAcrossQueues
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|MOVE_TO_QUEUE_CMD
argument_list|)
argument_list|,
name|cliParser
operator|.
name|getOptionValue
argument_list|(
name|QUEUE_CMD
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|HELP_CMD
argument_list|)
condition|)
block|{
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|syserr
operator|.
name|println
argument_list|(
literal|"Invalid Command Usage : "
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|opts
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    * It prints the usage of the command    *     * @param opts    */
annotation|@
name|VisibleForTesting
DECL|method|printUsage (Options opts)
name|void
name|printUsage
parameter_list|(
name|Options
name|opts
parameter_list|)
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"application"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prints the application attempt report for an application attempt id.    *     * @param applicationAttemptId    * @throws YarnException    */
DECL|method|printApplicationAttemptReport (String applicationAttemptId)
specifier|private
name|void
name|printApplicationAttemptReport
parameter_list|(
name|String
name|applicationAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptReport
name|appAttemptReport
init|=
name|client
operator|.
name|getApplicationAttemptReport
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|applicationAttemptId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Use PrintWriter.println, which uses correct platform line ending.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|appAttemptReportStr
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
if|if
condition|(
name|appAttemptReport
operator|!=
literal|null
condition|)
block|{
name|appAttemptReportStr
operator|.
name|println
argument_list|(
literal|"Application Attempt Report : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"\tApplicationAttempt-Id : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|println
argument_list|(
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"\tState : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|println
argument_list|(
name|appAttemptReport
operator|.
name|getYarnApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"\tAMContainer : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|println
argument_list|(
name|appAttemptReport
operator|.
name|getAMContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"\tTracking-URL : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|println
argument_list|(
name|appAttemptReport
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"\tRPC Port : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|println
argument_list|(
name|appAttemptReport
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"\tAM Host : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|println
argument_list|(
name|appAttemptReport
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"\tDiagnostics : "
argument_list|)
expr_stmt|;
name|appAttemptReportStr
operator|.
name|print
argument_list|(
name|appAttemptReport
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appAttemptReportStr
operator|.
name|print
argument_list|(
literal|"Application Attempt with id '"
operator|+
name|applicationAttemptId
operator|+
literal|"' doesn't exist in History Server."
argument_list|)
expr_stmt|;
block|}
name|appAttemptReportStr
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysout
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prints the container report for an container id.    *     * @param containerId    * @throws YarnException    */
DECL|method|printContainerReport (String containerId)
specifier|private
name|void
name|printContainerReport
parameter_list|(
name|String
name|containerId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ContainerReport
name|containerReport
init|=
name|client
operator|.
name|getContainerReport
argument_list|(
operator|(
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerId
argument_list|)
operator|)
argument_list|)
decl_stmt|;
comment|// Use PrintWriter.println, which uses correct platform line ending.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|containerReportStr
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerReport
operator|!=
literal|null
condition|)
block|{
name|containerReportStr
operator|.
name|println
argument_list|(
literal|"Container Report : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"\tContainer-Id : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|println
argument_list|(
name|containerReport
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"\tStart-Time : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|println
argument_list|(
name|containerReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"\tFinish-Time : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|println
argument_list|(
name|containerReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"\tState : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|println
argument_list|(
name|containerReport
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"\tLOG-URL : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|println
argument_list|(
name|containerReport
operator|.
name|getLogUrl
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"\tHost : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|println
argument_list|(
name|containerReport
operator|.
name|getAssignedNode
argument_list|()
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"\tDiagnostics : "
argument_list|)
expr_stmt|;
name|containerReportStr
operator|.
name|print
argument_list|(
name|containerReport
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|containerReportStr
operator|.
name|print
argument_list|(
literal|"Container with id '"
operator|+
name|containerId
operator|+
literal|"' doesn't exist in Hostory Server."
argument_list|)
expr_stmt|;
block|}
name|containerReportStr
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysout
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Lists the applications matching the given application Types And application    * States present in the Resource Manager    *     * @param appTypes    * @param appStates    * @throws YarnException    * @throws IOException    */
DECL|method|listApplications (Set<String> appTypes, EnumSet<YarnApplicationState> appStates)
specifier|private
name|void
name|listApplications
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|appStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|sysout
argument_list|)
decl_stmt|;
if|if
condition|(
name|allAppStates
condition|)
block|{
for|for
control|(
name|YarnApplicationState
name|appState
range|:
name|YarnApplicationState
operator|.
name|values
argument_list|()
control|)
block|{
name|appStates
operator|.
name|add
argument_list|(
name|appState
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|appStates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|appStates
operator|.
name|add
argument_list|(
name|YarnApplicationState
operator|.
name|SUBMITTED
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appsReport
init|=
name|client
operator|.
name|getApplications
argument_list|(
name|appTypes
argument_list|,
name|appStates
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"Total number of applications (application-types: "
operator|+
name|appTypes
operator|+
literal|" and states: "
operator|+
name|appStates
operator|+
literal|")"
operator|+
literal|":"
operator|+
name|appsReport
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|printf
argument_list|(
name|APPLICATIONS_PATTERN
argument_list|,
literal|"Application-Id"
argument_list|,
literal|"Application-Name"
argument_list|,
literal|"Application-Type"
argument_list|,
literal|"User"
argument_list|,
literal|"Queue"
argument_list|,
literal|"State"
argument_list|,
literal|"Final-State"
argument_list|,
literal|"Progress"
argument_list|,
literal|"Tracking-URL"
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationReport
name|appReport
range|:
name|appsReport
control|)
block|{
name|DecimalFormat
name|formatter
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"###.##%"
argument_list|)
decl_stmt|;
name|String
name|progress
init|=
name|formatter
operator|.
name|format
argument_list|(
name|appReport
operator|.
name|getProgress
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|printf
argument_list|(
name|APPLICATIONS_PATTERN
argument_list|,
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appReport
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|appReport
operator|.
name|getUser
argument_list|()
argument_list|,
name|appReport
operator|.
name|getQueue
argument_list|()
argument_list|,
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|,
name|appReport
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|progress
argument_list|,
name|appReport
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Kills the application with the application id as appId    *     * @param applicationId    * @throws YarnException    * @throws IOException    */
DECL|method|killApplication (String applicationId)
specifier|private
name|void
name|killApplication
parameter_list|(
name|String
name|applicationId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|ApplicationReport
name|appReport
init|=
name|client
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
operator|||
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|KILLED
operator|||
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FAILED
condition|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"Killing application "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
name|client
operator|.
name|killApplication
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Kills the application with the application id as appId    *     * @param applicationId    * @throws YarnException    * @throws IOException    */
DECL|method|moveApplicationAcrossQueues (String applicationId, String queue)
specifier|private
name|void
name|moveApplicationAcrossQueues
parameter_list|(
name|String
name|applicationId
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|ApplicationReport
name|appReport
init|=
name|client
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FINISHED
operator|||
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|KILLED
operator|||
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|FAILED
condition|)
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"Application "
operator|+
name|applicationId
operator|+
literal|" has already finished "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sysout
operator|.
name|println
argument_list|(
literal|"Moving application "
operator|+
name|applicationId
operator|+
literal|" to queue "
operator|+
name|queue
argument_list|)
expr_stmt|;
name|client
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|appId
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|sysout
operator|.
name|println
argument_list|(
literal|"Successfully completed move."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Prints the application report for an application id.    *     * @param applicationId    * @throws YarnException    */
DECL|method|printApplicationReport (String applicationId)
specifier|private
name|void
name|printApplicationReport
parameter_list|(
name|String
name|applicationId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationReport
name|appReport
init|=
name|client
operator|.
name|getApplicationReport
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|applicationId
argument_list|)
argument_list|)
decl_stmt|;
comment|// Use PrintWriter.println, which uses correct platform line ending.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|appReportStr
init|=
operator|new
name|PrintWriter
argument_list|(
name|baos
argument_list|)
decl_stmt|;
if|if
condition|(
name|appReport
operator|!=
literal|null
condition|)
block|{
name|appReportStr
operator|.
name|println
argument_list|(
literal|"Application Report : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tApplication-Id : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tApplication-Name : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tApplication-Type : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tUser : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tQueue : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tStart-Time : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tFinish-Time : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tProgress : "
argument_list|)
expr_stmt|;
name|DecimalFormat
name|formatter
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"###.##%"
argument_list|)
decl_stmt|;
name|String
name|progress
init|=
name|formatter
operator|.
name|format
argument_list|(
name|appReport
operator|.
name|getProgress
argument_list|()
argument_list|)
decl_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tState : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tFinal-State : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tTracking-URL : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tRPC Port : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tAM Host : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|println
argument_list|(
name|appReport
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
literal|"\tDiagnostics : "
argument_list|)
expr_stmt|;
name|appReportStr
operator|.
name|print
argument_list|(
name|appReport
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appReportStr
operator|.
name|print
argument_list|(
literal|"Application with id '"
operator|+
name|applicationId
operator|+
literal|"' doesn't exist in RM."
argument_list|)
expr_stmt|;
block|}
name|appReportStr
operator|.
name|close
argument_list|()
expr_stmt|;
name|sysout
operator|.
name|println
argument_list|(
name|baos
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllValidApplicationStates ()
specifier|private
name|String
name|getAllValidApplicationStates
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"The valid application state can be"
operator|+
literal|" one of the following: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ALLSTATES_OPTION
operator|+
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|YarnApplicationState
name|appState
range|:
name|YarnApplicationState
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|appState
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
name|String
name|output
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|output
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|output
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Lists the application attempts matching the given applicationid    *     * @param applicationId    * @throws YarnException    * @throws IOException    */
DECL|method|listApplicationAttempts (String appId)
specifier|private
name|void
name|listApplicationAttempts
parameter_list|(
name|String
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|sysout
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|appAttemptsReport
init|=
name|client
operator|.
name|getApplicationAttempts
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"Total number of application attempts "
operator|+
literal|":"
operator|+
name|appAttemptsReport
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|printf
argument_list|(
name|APPLICATION_ATTEMPTS_PATTERN
argument_list|,
literal|"ApplicationAttempt-Id"
argument_list|,
literal|"State"
argument_list|,
literal|"AM-Container-Id"
argument_list|,
literal|"Tracking-URL"
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationAttemptReport
name|appAttemptReport
range|:
name|appAttemptsReport
control|)
block|{
name|writer
operator|.
name|printf
argument_list|(
name|APPLICATION_ATTEMPTS_PATTERN
argument_list|,
name|appAttemptReport
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAttemptReport
operator|.
name|getYarnApplicationAttemptState
argument_list|()
argument_list|,
name|appAttemptReport
operator|.
name|getAMContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|appAttemptReport
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Lists the containers matching the given application attempts    *     * @param appAttemptId    * @throws YarnException    * @throws IOException    */
DECL|method|listContainers (String appAttemptId)
specifier|private
name|void
name|listContainers
parameter_list|(
name|String
name|appAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
name|sysout
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|appsReport
init|=
name|client
operator|.
name|getContainers
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"Total number of containers "
operator|+
literal|":"
operator|+
name|appsReport
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|printf
argument_list|(
name|CONTAINER_PATTERN
argument_list|,
literal|"Container-Id"
argument_list|,
literal|"Start Time"
argument_list|,
literal|"Finish Time"
argument_list|,
literal|"State"
argument_list|,
literal|"Host"
argument_list|,
literal|"LOG-URL"
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerReport
name|containerReport
range|:
name|appsReport
control|)
block|{
name|writer
operator|.
name|printf
argument_list|(
name|CONTAINER_PATTERN
argument_list|,
name|containerReport
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|containerReport
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|containerReport
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|containerReport
operator|.
name|getContainerState
argument_list|()
argument_list|,
name|containerReport
operator|.
name|getAssignedNode
argument_list|()
argument_list|,
name|containerReport
operator|.
name|getLogUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

