begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailApplicationAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAllResourceProfilesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetAllResourceTypeInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterMetricsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueUserAclsInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetResourceProfileRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SignalContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SignalContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|AHSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|YarnClientApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationIdNotProvidedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ContainerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|YarnClientImpl
specifier|public
class|class
name|YarnClientImpl
extends|extends
name|YarnClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|YarnClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmClient
specifier|protected
name|ApplicationClientProtocol
name|rmClient
decl_stmt|;
DECL|field|submitPollIntervalMillis
specifier|protected
name|long
name|submitPollIntervalMillis
decl_stmt|;
DECL|field|asyncApiPollIntervalMillis
specifier|private
name|long
name|asyncApiPollIntervalMillis
decl_stmt|;
DECL|field|asyncApiPollTimeoutMillis
specifier|private
name|long
name|asyncApiPollTimeoutMillis
decl_stmt|;
DECL|field|historyClient
specifier|protected
name|AHSClient
name|historyClient
decl_stmt|;
DECL|field|historyServiceEnabled
specifier|private
name|boolean
name|historyServiceEnabled
decl_stmt|;
DECL|field|timelineClient
specifier|protected
specifier|volatile
name|TimelineClient
name|timelineClient
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|timelineService
name|Text
name|timelineService
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|timelineDTRenewer
name|String
name|timelineDTRenewer
decl_stmt|;
DECL|field|timelineV1ServiceEnabled
specifier|private
name|boolean
name|timelineV1ServiceEnabled
decl_stmt|;
DECL|field|timelineServiceBestEffort
specifier|protected
name|boolean
name|timelineServiceBestEffort
decl_stmt|;
DECL|field|loadResourceTypesFromServer
specifier|private
name|boolean
name|loadResourceTypesFromServer
decl_stmt|;
DECL|field|ROOT
specifier|private
specifier|static
specifier|final
name|String
name|ROOT
init|=
literal|"root"
decl_stmt|;
DECL|method|YarnClientImpl ()
specifier|public
name|YarnClientImpl
parameter_list|()
block|{
name|super
argument_list|(
name|YarnClientImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|asyncApiPollIntervalMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
argument_list|)
expr_stmt|;
name|asyncApiPollTimeoutMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|submitPollIntervalMillis
operator|=
name|asyncApiPollIntervalMillis
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|submitPollIntervalMillis
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV1Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|timelineV1ServiceEnabled
operator|=
literal|true
expr_stmt|;
name|timelineDTRenewer
operator|=
name|getTimelineDelegationTokenRenewer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|timelineService
operator|=
name|TimelineUtils
operator|.
name|buildTimelineTokenService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// The AHSClientService is enabled by default when we start the
comment|// TimelineServer which means we are able to get history information
comment|// for applications/applicationAttempts/containers by using ahsClient
comment|// when the TimelineServer is running.
if|if
condition|(
name|timelineV1ServiceEnabled
operator|||
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_HISTORY_ENABLED
argument_list|)
condition|)
block|{
name|historyServiceEnabled
operator|=
literal|true
expr_stmt|;
name|historyClient
operator|=
name|AHSClient
operator|.
name|createAHSClient
argument_list|()
expr_stmt|;
name|historyClient
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|timelineServiceBestEffort
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_BEST_EFFORT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT
argument_list|)
expr_stmt|;
name|loadResourceTypesFromServer
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createTimelineClient ()
name|TimelineClient
name|createTimelineClient
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|TimelineClient
operator|.
name|createTimelineClient
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|rmClient
operator|=
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|historyServiceEnabled
condition|)
block|{
name|historyClient
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Reinitialize local resource types cache from list of resources pulled from
comment|// RM.
if|if
condition|(
name|loadResourceTypesFromServer
condition|)
block|{
name|ResourceUtils
operator|.
name|reinitializeResources
argument_list|(
name|getResourceTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|this
operator|.
name|rmClient
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|historyServiceEnabled
condition|)
block|{
name|historyClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timelineClient
operator|!=
literal|null
condition|)
block|{
name|timelineClient
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|getNewApplication ()
specifier|private
name|GetNewApplicationResponse
name|getNewApplication
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetNewApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|rmClient
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createApplication ()
specifier|public
name|YarnClientApplication
name|createApplication
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|GetNewApplicationResponse
name|newApp
init|=
name|getNewApplication
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|newApp
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
return|return
operator|new
name|YarnClientApplication
argument_list|(
name|newApp
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ApplicationId
DECL|method|submitApplication (ApplicationSubmissionContext appContext)
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContext
name|appContext
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationId
name|applicationId
init|=
name|appContext
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
if|if
condition|(
name|applicationId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ApplicationIdNotProvidedException
argument_list|(
literal|"ApplicationId is not provided in ApplicationSubmissionContext"
argument_list|)
throw|;
block|}
name|SubmitApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|appContext
argument_list|)
expr_stmt|;
comment|// Automatically add the timeline DT into the CLC
comment|// Only when the security and the timeline service are both enabled
if|if
condition|(
name|isSecurityEnabled
argument_list|()
operator|&&
name|timelineV1ServiceEnabled
condition|)
block|{
name|addTimelineDelegationToken
argument_list|(
name|appContext
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//TODO: YARN-1763:Handle RM failovers during the submitApplication call.
name|rmClient
operator|.
name|submitApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|int
name|pollCount
init|=
literal|0
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|waitingStates
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|NEW
argument_list|,
name|YarnApplicationState
operator|.
name|NEW_SAVING
argument_list|,
name|YarnApplicationState
operator|.
name|SUBMITTED
argument_list|)
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|failToSubmitStates
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|FAILED
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|ApplicationReport
name|appReport
init|=
name|getApplicationReport
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|YarnApplicationState
name|state
init|=
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|waitingStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
condition|)
block|{
if|if
condition|(
name|failToSubmitStates
operator|.
name|contains
argument_list|(
name|state
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Failed to submit "
operator|+
name|applicationId
operator|+
literal|" to YARN : "
operator|+
name|appReport
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Submitted application "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
break|break;
block|}
name|long
name|elapsedMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|enforceAsyncAPITimeout
argument_list|()
operator|&&
name|elapsedMillis
operator|>=
name|asyncApiPollTimeoutMillis
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Timed out while waiting for application "
operator|+
name|applicationId
operator|+
literal|" to be submitted successfully"
argument_list|)
throw|;
block|}
comment|// Notify the client through the log every 10 poll, in case the client
comment|// is blocked here too long.
if|if
condition|(
operator|++
name|pollCount
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application submission is not finished, "
operator|+
literal|"submitted application "
operator|+
name|applicationId
operator|+
literal|" is still in "
operator|+
name|state
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|submitPollIntervalMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Interrupted while waiting for application "
operator|+
name|applicationId
operator|+
literal|" to be successfully submitted."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|,
name|ie
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
comment|// FailOver or RM restart happens before RMStateStore saves
comment|// ApplicationState
name|LOG
operator|.
name|info
argument_list|(
literal|"Re-submit application "
operator|+
name|applicationId
operator|+
literal|"with the "
operator|+
literal|"same ApplicationSubmissionContext"
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|submitApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|applicationId
return|;
block|}
DECL|method|addTimelineDelegationToken ( ContainerLaunchContext clc)
specifier|private
name|void
name|addTimelineDelegationToken
parameter_list|(
name|ContainerLaunchContext
name|clc
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|ByteBuffer
name|tokens
init|=
name|clc
operator|.
name|getTokens
argument_list|()
decl_stmt|;
if|if
condition|(
name|tokens
operator|!=
literal|null
condition|)
block|{
name|dibb
operator|.
name|reset
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
comment|// If the timeline delegation token is already in the CLC, no need to add
comment|// one more
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|credentials
operator|.
name|getAllTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|timelineDelegationToken
init|=
name|getTimelineDelegationToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|timelineDelegationToken
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|credentials
operator|.
name|addToken
argument_list|(
name|timelineService
argument_list|,
name|timelineDelegationToken
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Add timeline delegation token into credentials: "
operator|+
name|timelineDelegationToken
argument_list|)
expr_stmt|;
block|}
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|clc
operator|.
name|setTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
DECL|method|getTimelineDelegationToken ()
name|getTimelineDelegationToken
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
try|try
block|{
comment|// Only reachable when both security and timeline service are enabled.
if|if
condition|(
name|timelineClient
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|timelineClient
operator|==
literal|null
condition|)
block|{
name|TimelineClient
name|tlClient
init|=
name|createTimelineClient
argument_list|()
decl_stmt|;
name|tlClient
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|tlClient
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Assign value to timeline client variable only
comment|// when it is fully initiated. In order to avoid
comment|// other threads to see partially initialized object.
name|this
operator|.
name|timelineClient
operator|=
name|tlClient
expr_stmt|;
block|}
block|}
block|}
return|return
name|timelineClient
operator|.
name|getDelegationToken
argument_list|(
name|timelineDTRenewer
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|timelineServiceBestEffort
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get delegation token from the timeline server: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
name|NoClassDefFoundError
name|wrappedError
init|=
operator|new
name|NoClassDefFoundError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". It appears that the timeline client "
operator|+
literal|"failed to initiate because an incompatible dependency "
operator|+
literal|"in classpath. If timeline service is optional to this "
operator|+
literal|"client, try to work around by setting "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
operator|+
literal|" to false in client configuration."
argument_list|)
decl_stmt|;
name|wrappedError
operator|.
name|setStackTrace
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|wrappedError
throw|;
block|}
block|}
DECL|method|getTimelineDelegationTokenRenewer (Configuration conf)
specifier|private
specifier|static
name|String
name|getTimelineDelegationTokenRenewer
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Parse the RM daemon user if it exists in the config
name|String
name|rmPrincipal
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|)
decl_stmt|;
name|String
name|renewer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rmPrincipal
operator|!=
literal|null
operator|&&
name|rmPrincipal
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|rmHost
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|renewer
operator|=
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|rmPrincipal
argument_list|,
name|rmHost
argument_list|)
expr_stmt|;
block|}
return|return
name|renewer
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|isSecurityEnabled ()
specifier|protected
name|boolean
name|isSecurityEnabled
parameter_list|()
block|{
return|return
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|failApplicationAttempt (ApplicationAttemptId attemptId)
specifier|public
name|void
name|failApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failing application attempt "
operator|+
name|attemptId
argument_list|)
expr_stmt|;
name|FailApplicationAttemptRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FailApplicationAttemptRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|failApplicationAttempt
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|killApplication (ApplicationId applicationId)
specifier|public
name|void
name|killApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|killApplication
argument_list|(
name|applicationId
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|killApplication (ApplicationId applicationId, String diagnostics)
specifier|public
name|void
name|killApplication
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|diagnostics
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|KillApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|KillApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
if|if
condition|(
name|diagnostics
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|int
name|pollCount
init|=
literal|0
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|KillApplicationResponse
name|response
init|=
name|rmClient
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getIsKillCompleted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killed application "
operator|+
name|applicationId
argument_list|)
expr_stmt|;
break|break;
block|}
name|long
name|elapsedMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
if|if
condition|(
name|enforceAsyncAPITimeout
argument_list|()
operator|&&
name|elapsedMillis
operator|>=
name|this
operator|.
name|asyncApiPollTimeoutMillis
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Timed out while waiting for application "
operator|+
name|applicationId
operator|+
literal|" to be killed."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|++
name|pollCount
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for application "
operator|+
name|applicationId
operator|+
literal|" to be killed."
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|asyncApiPollIntervalMillis
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Interrupted while waiting for application "
operator|+
name|applicationId
operator|+
literal|" to be killed."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|enforceAsyncAPITimeout ()
name|boolean
name|enforceAsyncAPITimeout
parameter_list|()
block|{
return|return
name|asyncApiPollTimeoutMillis
operator|>=
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationReport (ApplicationId appId)
specifier|public
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetApplicationReportResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|GetApplicationReportRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|response
operator|=
name|rmClient
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|historyServiceEnabled
condition|)
block|{
comment|// Just throw it as usual if historyService is not enabled.
throw|throw
name|e
throw|;
block|}
return|return
name|historyClient
operator|.
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
return|;
block|}
return|return
name|response
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
DECL|method|getAMRMToken (ApplicationId appId)
name|getAMRMToken
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|Token
name|token
init|=
name|getApplicationReport
argument_list|(
name|appId
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|amrmToken
operator|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|token
argument_list|,
operator|(
name|Text
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|amrmToken
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ()
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|getApplications
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications (Set<String> applicationTypes)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|getApplications
argument_list|(
name|applicationTypes
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ( EnumSet<YarnApplicationState> applicationStates)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|getApplications
argument_list|(
literal|null
argument_list|,
name|applicationStates
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications (Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|applicationTypes
argument_list|,
name|applicationStates
argument_list|)
decl_stmt|;
name|GetApplicationsResponse
name|response
init|=
name|rmClient
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications (Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates, Set<String> applicationTags)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|applicationTypes
argument_list|,
name|applicationStates
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationTags
argument_list|(
name|applicationTags
argument_list|)
expr_stmt|;
name|GetApplicationsResponse
name|response
init|=
name|rmClient
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications (Set<String> queues, Set<String> users, Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|users
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTypes
parameter_list|,
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|applicationStates
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|applicationTypes
argument_list|,
name|applicationStates
argument_list|)
decl_stmt|;
name|request
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUsers
argument_list|(
name|users
argument_list|)
expr_stmt|;
name|GetApplicationsResponse
name|response
init|=
name|rmClient
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplications ( GetApplicationsRequest request)
specifier|public
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|getApplications
parameter_list|(
name|GetApplicationsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetApplicationsResponse
name|response
init|=
name|rmClient
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getYarnClusterMetrics ()
specifier|public
name|YarnClusterMetrics
name|getYarnClusterMetrics
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetClusterMetricsRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetClusterMetricsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|GetClusterMetricsResponse
name|response
init|=
name|rmClient
operator|.
name|getClusterMetrics
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getClusterMetrics
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeReports (NodeState... states)
specifier|public
name|List
argument_list|<
name|NodeReport
argument_list|>
name|getNodeReports
parameter_list|(
name|NodeState
modifier|...
name|states
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|EnumSet
argument_list|<
name|NodeState
argument_list|>
name|statesSet
init|=
operator|(
name|states
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|EnumSet
operator|.
name|allOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
else|:
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeState
name|state
range|:
name|states
control|)
block|{
name|statesSet
operator|.
name|add
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|GetClusterNodesRequest
name|request
init|=
name|GetClusterNodesRequest
operator|.
name|newInstance
argument_list|(
name|statesSet
argument_list|)
decl_stmt|;
name|GetClusterNodesResponse
name|response
init|=
name|rmClient
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getNodeReports
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRMDelegationToken (Text renewer)
specifier|public
name|Token
name|getRMDelegationToken
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
comment|/* get the token from RM */
name|GetDelegationTokenRequest
name|rmDTRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|rmDTRequest
operator|.
name|setRenewer
argument_list|(
name|renewer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|GetDelegationTokenResponse
name|response
init|=
name|rmClient
operator|.
name|getDelegationToken
argument_list|(
name|rmDTRequest
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getRMDelegationToken
argument_list|()
return|;
block|}
specifier|private
name|GetQueueInfoRequest
DECL|method|getQueueInfoRequest (String queueName, boolean includeApplications, boolean includeChildQueues, boolean recursive)
name|getQueueInfoRequest
parameter_list|(
name|String
name|queueName
parameter_list|,
name|boolean
name|includeApplications
parameter_list|,
name|boolean
name|includeChildQueues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|GetQueueInfoRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetQueueInfoRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setQueueName
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIncludeApplications
argument_list|(
name|includeApplications
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIncludeChildQueues
argument_list|(
name|includeChildQueues
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRecursive
argument_list|(
name|recursive
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueInfo (String queueName)
specifier|public
name|QueueInfo
name|getQueueInfo
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetQueueInfoRequest
name|request
init|=
name|getQueueInfoRequest
argument_list|(
name|queueName
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Records
operator|.
name|newRecord
argument_list|(
name|GetQueueInfoRequest
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|rmClient
operator|.
name|getQueueInfo
argument_list|(
name|request
argument_list|)
operator|.
name|getQueueInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueAclsInfo ()
specifier|public
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|getQueueAclsInfo
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetQueueUserAclsInfoRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetQueueUserAclsInfoRequest
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|rmClient
operator|.
name|getQueueUserAcls
argument_list|(
name|request
argument_list|)
operator|.
name|getUserAclsInfoList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getAllQueues ()
specifier|public
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|getAllQueues
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|QueueInfo
name|rootQueue
init|=
name|rmClient
operator|.
name|getQueueInfo
argument_list|(
name|getQueueInfoRequest
argument_list|(
name|ROOT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|getQueueInfo
argument_list|()
decl_stmt|;
name|getChildQueues
argument_list|(
name|rootQueue
argument_list|,
name|queues
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|queues
return|;
block|}
annotation|@
name|Override
DECL|method|getRootQueueInfos ()
specifier|public
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|getRootQueueInfos
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|QueueInfo
name|rootQueue
init|=
name|rmClient
operator|.
name|getQueueInfo
argument_list|(
name|getQueueInfoRequest
argument_list|(
name|ROOT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|getQueueInfo
argument_list|()
decl_stmt|;
name|getChildQueues
argument_list|(
name|rootQueue
argument_list|,
name|queues
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|queues
return|;
block|}
annotation|@
name|Override
DECL|method|getChildQueueInfos (String parent)
specifier|public
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|getChildQueueInfos
parameter_list|(
name|String
name|parent
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|queues
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueInfo
argument_list|>
argument_list|()
decl_stmt|;
name|QueueInfo
name|parentQueue
init|=
name|rmClient
operator|.
name|getQueueInfo
argument_list|(
name|getQueueInfoRequest
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|getQueueInfo
argument_list|()
decl_stmt|;
name|getChildQueues
argument_list|(
name|parentQueue
argument_list|,
name|queues
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|queues
return|;
block|}
DECL|method|getChildQueues (QueueInfo parent, List<QueueInfo> queues, boolean recursive)
specifier|private
name|void
name|getChildQueues
parameter_list|(
name|QueueInfo
name|parent
parameter_list|,
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|queues
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|childQueues
init|=
name|parent
operator|.
name|getChildQueues
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueInfo
name|child
range|:
name|childQueues
control|)
block|{
name|queues
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
name|getChildQueues
argument_list|(
name|child
argument_list|,
name|queues
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|setRMClient (ApplicationClientProtocol rmClient)
specifier|public
name|void
name|setRMClient
parameter_list|(
name|ApplicationClientProtocol
name|rmClient
parameter_list|)
block|{
name|this
operator|.
name|rmClient
operator|=
name|rmClient
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAttemptReport ( ApplicationAttemptId appAttemptId)
specifier|public
name|ApplicationAttemptReport
name|getApplicationAttemptReport
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
name|GetApplicationAttemptReportRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetApplicationAttemptReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationAttemptId
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|GetApplicationAttemptReportResponse
name|response
init|=
name|rmClient
operator|.
name|getApplicationAttemptReport
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationAttemptReport
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|historyServiceEnabled
condition|)
block|{
comment|// Just throw it as usual if historyService is not enabled.
throw|throw
name|e
throw|;
block|}
comment|// Even if history-service is enabled, treat all exceptions still the same
comment|// except the following
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|ApplicationNotFoundException
operator|.
name|class
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|historyClient
operator|.
name|getApplicationAttemptReport
argument_list|(
name|appAttemptId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApplicationAttempts ( ApplicationId appId)
specifier|public
name|List
argument_list|<
name|ApplicationAttemptReport
argument_list|>
name|getApplicationAttempts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
name|GetApplicationAttemptsRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetApplicationAttemptsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|GetApplicationAttemptsResponse
name|response
init|=
name|rmClient
operator|.
name|getApplicationAttempts
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationAttemptList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|historyServiceEnabled
condition|)
block|{
comment|// Just throw it as usual if historyService is not enabled.
throw|throw
name|e
throw|;
block|}
comment|// Even if history-service is enabled, treat all exceptions still the same
comment|// except the following
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|ApplicationNotFoundException
operator|.
name|class
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|historyClient
operator|.
name|getApplicationAttempts
argument_list|(
name|appId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainerReport (ContainerId containerId)
specifier|public
name|ContainerReport
name|getContainerReport
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
try|try
block|{
name|GetContainerReportRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetContainerReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|GetContainerReportResponse
name|response
init|=
name|rmClient
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getContainerReport
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|historyServiceEnabled
condition|)
block|{
comment|// Just throw it as usual if historyService is not enabled.
throw|throw
name|e
throw|;
block|}
comment|// Even if history-service is enabled, treat all exceptions still the same
comment|// except the following
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|ApplicationNotFoundException
operator|.
name|class
operator|&&
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|ContainerNotFoundException
operator|.
name|class
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return
name|historyClient
operator|.
name|getContainerReport
argument_list|(
name|containerId
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContainers ( ApplicationAttemptId applicationAttemptId)
specifier|public
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|getContainers
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|containersForAttempt
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerReport
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|appNotFoundInRM
init|=
literal|false
decl_stmt|;
try|try
block|{
name|GetContainersRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetContainersRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationAttemptId
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|GetContainersResponse
name|response
init|=
name|rmClient
operator|.
name|getContainers
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|containersForAttempt
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getContainerList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|ApplicationNotFoundException
operator|.
name|class
operator|||
operator|!
name|historyServiceEnabled
condition|)
block|{
comment|// If Application is not in RM and history service is enabled then we
comment|// need to check with history service else throw exception.
throw|throw
name|e
throw|;
block|}
name|appNotFoundInRM
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|historyServiceEnabled
condition|)
block|{
comment|// Check with AHS even if found in RM because to capture info of finished
comment|// containers also
name|List
argument_list|<
name|ContainerReport
argument_list|>
name|containersListFromAHS
init|=
literal|null
decl_stmt|;
try|try
block|{
name|containersListFromAHS
operator|=
name|historyClient
operator|.
name|getContainers
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// History service access might be enabled but system metrics publisher
comment|// is disabled hence app not found exception is possible
if|if
condition|(
name|appNotFoundInRM
condition|)
block|{
comment|// app not found in bothM and RM then propagate the exception.
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|containersListFromAHS
operator|&&
name|containersListFromAHS
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// remove duplicates
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containerIdsToBeKeptFromAHS
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|ContainerReport
argument_list|>
name|tmpItr
init|=
name|containersListFromAHS
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|tmpItr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|containerIdsToBeKeptFromAHS
operator|.
name|add
argument_list|(
name|tmpItr
operator|.
name|next
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|ContainerReport
argument_list|>
name|rmContainers
init|=
name|containersForAttempt
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|rmContainers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ContainerReport
name|tmp
init|=
name|rmContainers
operator|.
name|next
argument_list|()
decl_stmt|;
name|containerIdsToBeKeptFromAHS
operator|.
name|remove
argument_list|(
name|tmp
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove containers from AHS as container from RM will have latest
comment|// information
block|}
if|if
condition|(
name|containerIdsToBeKeptFromAHS
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|containersListFromAHS
operator|.
name|size
argument_list|()
operator|!=
name|containerIdsToBeKeptFromAHS
operator|.
name|size
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|ContainerReport
argument_list|>
name|containersFromHS
init|=
name|containersListFromAHS
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|containersFromHS
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ContainerReport
name|containerReport
init|=
name|containersFromHS
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|containerIdsToBeKeptFromAHS
operator|.
name|contains
argument_list|(
name|containerReport
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|containersForAttempt
operator|.
name|add
argument_list|(
name|containerReport
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|containersListFromAHS
operator|.
name|size
argument_list|()
operator|==
name|containerIdsToBeKeptFromAHS
operator|.
name|size
argument_list|()
condition|)
block|{
name|containersForAttempt
operator|.
name|addAll
argument_list|(
name|containersListFromAHS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|containersForAttempt
return|;
block|}
annotation|@
name|Override
DECL|method|moveApplicationAcrossQueues (ApplicationId appId, String queue)
specifier|public
name|void
name|moveApplicationAcrossQueues
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|MoveApplicationAcrossQueuesRequest
name|request
init|=
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|rmClient
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createReservation ()
specifier|public
name|GetNewReservationResponse
name|createReservation
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetNewReservationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewReservationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|rmClient
operator|.
name|getNewReservation
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|submitReservation ( ReservationSubmissionRequest request)
specifier|public
name|ReservationSubmissionResponse
name|submitReservation
parameter_list|(
name|ReservationSubmissionRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|submitReservation
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateReservation ( ReservationUpdateRequest request)
specifier|public
name|ReservationUpdateResponse
name|updateReservation
parameter_list|(
name|ReservationUpdateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|updateReservation
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|deleteReservation ( ReservationDeleteRequest request)
specifier|public
name|ReservationDeleteResponse
name|deleteReservation
parameter_list|(
name|ReservationDeleteRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|deleteReservation
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listReservations ( ReservationListRequest request)
specifier|public
name|ReservationListResponse
name|listReservations
parameter_list|(
name|ReservationListRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeToLabels ()
specifier|public
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getNodeToLabels
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|getNodeToLabels
argument_list|(
name|GetNodesToLabelsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
operator|.
name|getNodeToLabels
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLabelsToNodes ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|getLabelsToNodes
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|getLabelsToNodes
argument_list|(
name|GetLabelsToNodesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
operator|.
name|getLabelsToNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLabelsToNodes (Set<String> labels)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|getLabelsToNodes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|getLabelsToNodes
argument_list|(
name|GetLabelsToNodesRequest
operator|.
name|newInstance
argument_list|(
name|labels
argument_list|)
argument_list|)
operator|.
name|getLabelsToNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodeLabels ()
specifier|public
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|getClusterNodeLabels
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|getClusterNodeLabels
argument_list|(
name|GetClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
operator|.
name|getNodeLabelList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationPriority (ApplicationId applicationId, Priority priority)
specifier|public
name|Priority
name|updateApplicationPriority
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Priority
name|priority
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|UpdateApplicationPriorityRequest
name|request
init|=
name|UpdateApplicationPriorityRequest
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|priority
argument_list|)
decl_stmt|;
return|return
name|rmClient
operator|.
name|updateApplicationPriority
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationPriority
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|signalToContainer (ContainerId containerId, SignalContainerCommand command)
specifier|public
name|void
name|signalToContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|SignalContainerCommand
name|command
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Signalling container "
operator|+
name|containerId
operator|+
literal|" with command "
operator|+
name|command
argument_list|)
expr_stmt|;
name|SignalContainerRequest
name|request
init|=
name|SignalContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|rmClient
operator|.
name|signalToContainer
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationTimeouts ( UpdateApplicationTimeoutsRequest request)
specifier|public
name|UpdateApplicationTimeoutsResponse
name|updateApplicationTimeouts
parameter_list|(
name|UpdateApplicationTimeoutsRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
return|return
name|rmClient
operator|.
name|updateApplicationTimeouts
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceProfiles ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|getResourceProfiles
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetAllResourceProfilesRequest
name|request
init|=
name|GetAllResourceProfilesRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|rmClient
operator|.
name|getResourceProfiles
argument_list|(
name|request
argument_list|)
operator|.
name|getResourceProfiles
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceProfile (String profile)
specifier|public
name|Resource
name|getResourceProfile
parameter_list|(
name|String
name|profile
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetResourceProfileRequest
name|request
init|=
name|GetResourceProfileRequest
operator|.
name|newInstance
argument_list|(
name|profile
argument_list|)
decl_stmt|;
return|return
name|rmClient
operator|.
name|getResourceProfile
argument_list|(
name|request
argument_list|)
operator|.
name|getResource
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceTypeInfo ()
specifier|public
name|List
argument_list|<
name|ResourceTypeInfo
argument_list|>
name|getResourceTypeInfo
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|GetAllResourceTypeInfoRequest
name|request
init|=
name|GetAllResourceTypeInfoRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|rmClient
operator|.
name|getResourceTypeInfo
argument_list|(
name|request
argument_list|)
operator|.
name|getResourceTypeInfo
argument_list|()
return|;
block|}
block|}
end_class

end_unit

