begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|CacheBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|time
operator|.
name|DateFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|time
operator|.
name|DurationFormatUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|KerberosAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ssl
operator|.
name|SSLFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TopCLI
specifier|public
class|class
name|TopCLI
extends|extends
name|YarnCLI
block|{
DECL|field|CLUSTER_INFO_URL
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_INFO_URL
init|=
literal|"/ws/v1/cluster/info"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopCLI
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CLEAR
specifier|private
name|String
name|CLEAR
init|=
literal|"\u001b[2J"
decl_stmt|;
DECL|field|CLEAR_LINE
specifier|private
name|String
name|CLEAR_LINE
init|=
literal|"\u001b[2K"
decl_stmt|;
DECL|field|SET_CURSOR_HOME
specifier|private
name|String
name|SET_CURSOR_HOME
init|=
literal|"\u001b[H"
decl_stmt|;
DECL|field|CHANGE_BACKGROUND
specifier|private
name|String
name|CHANGE_BACKGROUND
init|=
literal|"\u001b[7m"
decl_stmt|;
DECL|field|RESET_BACKGROUND
specifier|private
name|String
name|RESET_BACKGROUND
init|=
literal|"\u001b[0m"
decl_stmt|;
DECL|field|SET_CURSOR_LINE_7_COLUMN_0
specifier|private
name|String
name|SET_CURSOR_LINE_7_COLUMN_0
init|=
literal|"\u001b[7;0f"
decl_stmt|;
comment|// guava cache for getapplications call
specifier|protected
name|Cache
argument_list|<
name|GetApplicationsRequest
argument_list|,
name|List
argument_list|<
name|ApplicationReport
argument_list|>
argument_list|>
DECL|field|applicationReportsCache
name|applicationReportsCache
init|=
name|CacheBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|expireAfterWrite
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
DECL|enum|DisplayScreen
enum|enum
name|DisplayScreen
block|{
DECL|enumConstant|TOP
DECL|enumConstant|HELP
DECL|enumConstant|SORT
DECL|enumConstant|FIELDS
name|TOP
block|,
name|HELP
block|,
name|SORT
block|,
name|FIELDS
block|}
DECL|enum|Columns
enum|enum
name|Columns
block|{
comment|// in the order in which they should be displayed
DECL|enumConstant|APPID
DECL|enumConstant|USER
DECL|enumConstant|TYPE
DECL|enumConstant|QUEUE
DECL|enumConstant|PRIORITY
DECL|enumConstant|CONT
DECL|enumConstant|RCONT
DECL|enumConstant|VCORES
DECL|enumConstant|RVCORES
DECL|enumConstant|MEM
name|APPID
block|,
name|USER
block|,
name|TYPE
block|,
name|QUEUE
block|,
name|PRIORITY
block|,
name|CONT
block|,
name|RCONT
block|,
name|VCORES
block|,
name|RVCORES
block|,
name|MEM
block|,
DECL|enumConstant|RMEM
DECL|enumConstant|VCORESECS
DECL|enumConstant|MEMSECS
DECL|enumConstant|PROGRESS
DECL|enumConstant|TIME
DECL|enumConstant|NAME
name|RMEM
block|,
name|VCORESECS
block|,
name|MEMSECS
block|,
name|PROGRESS
block|,
name|TIME
block|,
name|NAME
block|}
DECL|class|ColumnInformation
specifier|static
class|class
name|ColumnInformation
block|{
DECL|field|header
name|String
name|header
decl_stmt|;
DECL|field|format
name|String
name|format
decl_stmt|;
DECL|field|display
name|boolean
name|display
decl_stmt|;
comment|// should we show this field or not
DECL|field|description
name|String
name|description
decl_stmt|;
DECL|field|key
name|String
name|key
decl_stmt|;
comment|// key to press for sorting/toggling field
DECL|method|ColumnInformation (String header, String format, boolean display, String description, String key)
specifier|public
name|ColumnInformation
parameter_list|(
name|String
name|header
parameter_list|,
name|String
name|format
parameter_list|,
name|boolean
name|display
parameter_list|,
name|String
name|description
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|display
operator|=
name|display
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
block|}
DECL|class|ApplicationInformation
specifier|private
specifier|static
class|class
name|ApplicationInformation
block|{
DECL|field|appid
specifier|final
name|String
name|appid
decl_stmt|;
DECL|field|user
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|type
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|priority
specifier|final
name|int
name|priority
decl_stmt|;
DECL|field|usedContainers
specifier|final
name|int
name|usedContainers
decl_stmt|;
DECL|field|reservedContainers
specifier|final
name|int
name|reservedContainers
decl_stmt|;
DECL|field|usedMemory
specifier|final
name|long
name|usedMemory
decl_stmt|;
DECL|field|reservedMemory
specifier|final
name|long
name|reservedMemory
decl_stmt|;
DECL|field|usedVirtualCores
specifier|final
name|int
name|usedVirtualCores
decl_stmt|;
DECL|field|reservedVirtualCores
specifier|final
name|int
name|reservedVirtualCores
decl_stmt|;
DECL|field|attempts
specifier|final
name|int
name|attempts
decl_stmt|;
DECL|field|progress
specifier|final
name|float
name|progress
decl_stmt|;
DECL|field|state
specifier|final
name|String
name|state
decl_stmt|;
DECL|field|runningTime
name|long
name|runningTime
decl_stmt|;
DECL|field|time
specifier|final
name|String
name|time
decl_stmt|;
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|nodes
specifier|final
name|int
name|nodes
decl_stmt|;
DECL|field|queue
specifier|final
name|String
name|queue
decl_stmt|;
DECL|field|memorySeconds
specifier|final
name|long
name|memorySeconds
decl_stmt|;
DECL|field|vcoreSeconds
specifier|final
name|long
name|vcoreSeconds
decl_stmt|;
DECL|field|displayStringsMap
specifier|final
name|EnumMap
argument_list|<
name|Columns
argument_list|,
name|String
argument_list|>
name|displayStringsMap
decl_stmt|;
DECL|method|ApplicationInformation (ApplicationReport appReport)
name|ApplicationInformation
parameter_list|(
name|ApplicationReport
name|appReport
parameter_list|)
block|{
name|displayStringsMap
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Columns
operator|.
name|class
argument_list|)
expr_stmt|;
name|appid
operator|=
name|appReport
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|APPID
argument_list|,
name|appid
argument_list|)
expr_stmt|;
name|user
operator|=
name|appReport
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|type
operator|=
name|appReport
operator|.
name|getApplicationType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|state
operator|=
name|appReport
operator|.
name|getYarnApplicationState
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|name
operator|=
name|appReport
operator|.
name|getName
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|queue
operator|=
name|appReport
operator|.
name|getQueue
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|QUEUE
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|Priority
name|appPriority
init|=
name|appReport
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|priority
operator|=
literal|null
operator|!=
name|appPriority
condition|?
name|appPriority
operator|.
name|getPriority
argument_list|()
else|:
literal|0
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|PRIORITY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|usedContainers
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getNumUsedContainers
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|CONT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|usedContainers
argument_list|)
argument_list|)
expr_stmt|;
name|reservedContainers
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getNumReservedContainers
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|RCONT
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|reservedContainers
argument_list|)
argument_list|)
expr_stmt|;
name|usedVirtualCores
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|VCORES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|usedVirtualCores
argument_list|)
argument_list|)
expr_stmt|;
name|usedMemory
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|/
literal|1024
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|MEM
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|usedMemory
argument_list|)
operator|+
literal|"G"
argument_list|)
expr_stmt|;
name|reservedVirtualCores
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getReservedResources
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|RVCORES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|reservedVirtualCores
argument_list|)
argument_list|)
expr_stmt|;
name|reservedMemory
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getReservedResources
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|/
literal|1024
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|RMEM
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|reservedMemory
argument_list|)
operator|+
literal|"G"
argument_list|)
expr_stmt|;
name|attempts
operator|=
name|appReport
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
expr_stmt|;
name|nodes
operator|=
literal|0
expr_stmt|;
name|runningTime
operator|=
name|Time
operator|.
name|now
argument_list|()
operator|-
name|appReport
operator|.
name|getStartTime
argument_list|()
expr_stmt|;
name|time
operator|=
name|DurationFormatUtils
operator|.
name|formatDuration
argument_list|(
name|runningTime
argument_list|,
literal|"dd:HH:mm"
argument_list|)
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|TIME
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|progress
operator|=
name|appReport
operator|.
name|getProgress
argument_list|()
operator|*
literal|100
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|PROGRESS
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%.2f"
argument_list|,
name|progress
argument_list|)
argument_list|)
expr_stmt|;
comment|// store in GBSeconds
name|memorySeconds
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getMemorySeconds
argument_list|()
operator|/
literal|1024
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|MEMSECS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|memorySeconds
argument_list|)
argument_list|)
expr_stmt|;
name|vcoreSeconds
operator|=
name|appReport
operator|.
name|getApplicationResourceUsageReport
argument_list|()
operator|.
name|getVcoreSeconds
argument_list|()
expr_stmt|;
name|displayStringsMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|VCORESECS
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|vcoreSeconds
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// all the sort comparators
DECL|field|AppIDComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|AppIDComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|appid
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|appid
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|UserComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|UserComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|user
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|user
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|AppTypeComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|AppTypeComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|type
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|type
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|QueueNameComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|QueueNameComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|queue
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|queue
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|UsedContainersComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|UsedContainersComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|usedContainers
operator|-
name|a2
operator|.
name|usedContainers
return|;
block|}
block|}
decl_stmt|;
DECL|field|ReservedContainersComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|ReservedContainersComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|reservedContainers
operator|-
name|a2
operator|.
name|reservedContainers
return|;
block|}
block|}
decl_stmt|;
DECL|field|UsedMemoryComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|UsedMemoryComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|a1
operator|.
name|usedMemory
argument_list|,
name|a2
operator|.
name|usedMemory
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|ReservedMemoryComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|ReservedMemoryComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|a1
operator|.
name|reservedMemory
argument_list|,
name|a2
operator|.
name|reservedMemory
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|UsedVCoresComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|UsedVCoresComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|usedVirtualCores
operator|-
name|a2
operator|.
name|usedVirtualCores
return|;
block|}
block|}
decl_stmt|;
DECL|field|ReservedVCoresComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|ReservedVCoresComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|reservedVirtualCores
operator|-
name|a2
operator|.
name|reservedVirtualCores
return|;
block|}
block|}
decl_stmt|;
DECL|field|VCoreSecondsComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|VCoreSecondsComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|a1
operator|.
name|vcoreSeconds
argument_list|,
name|a2
operator|.
name|vcoreSeconds
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|MemorySecondsComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|MemorySecondsComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|a1
operator|.
name|memorySeconds
argument_list|,
name|a2
operator|.
name|memorySeconds
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|ProgressComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|ProgressComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|a1
operator|.
name|progress
argument_list|,
name|a2
operator|.
name|progress
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|RunningTimeComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|RunningTimeComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|a1
operator|.
name|runningTime
argument_list|,
name|a2
operator|.
name|runningTime
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|AppNameComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|AppNameComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|name
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|name
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|AppPriorityComparator
specifier|public
specifier|static
specifier|final
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|AppPriorityComparator
init|=
operator|new
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationInformation
name|a1
parameter_list|,
name|ApplicationInformation
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|priority
operator|-
name|a2
operator|.
name|priority
return|;
block|}
block|}
decl_stmt|;
DECL|class|NodesInformation
specifier|private
specifier|static
class|class
name|NodesInformation
block|{
DECL|field|totalNodes
name|int
name|totalNodes
decl_stmt|;
DECL|field|runningNodes
name|int
name|runningNodes
decl_stmt|;
DECL|field|unhealthyNodes
name|int
name|unhealthyNodes
decl_stmt|;
DECL|field|decommissionedNodes
name|int
name|decommissionedNodes
decl_stmt|;
DECL|field|lostNodes
name|int
name|lostNodes
decl_stmt|;
DECL|field|rebootedNodes
name|int
name|rebootedNodes
decl_stmt|;
block|}
DECL|class|QueueMetrics
specifier|private
specifier|static
class|class
name|QueueMetrics
block|{
DECL|field|appsSubmitted
name|long
name|appsSubmitted
decl_stmt|;
DECL|field|appsRunning
name|long
name|appsRunning
decl_stmt|;
DECL|field|appsPending
name|long
name|appsPending
decl_stmt|;
DECL|field|appsCompleted
name|long
name|appsCompleted
decl_stmt|;
DECL|field|appsKilled
name|long
name|appsKilled
decl_stmt|;
DECL|field|appsFailed
name|long
name|appsFailed
decl_stmt|;
DECL|field|activeUsers
name|long
name|activeUsers
decl_stmt|;
DECL|field|availableMemoryGB
name|long
name|availableMemoryGB
decl_stmt|;
DECL|field|allocatedMemoryGB
name|long
name|allocatedMemoryGB
decl_stmt|;
DECL|field|pendingMemoryGB
name|long
name|pendingMemoryGB
decl_stmt|;
DECL|field|reservedMemoryGB
name|long
name|reservedMemoryGB
decl_stmt|;
DECL|field|availableVCores
name|long
name|availableVCores
decl_stmt|;
DECL|field|allocatedVCores
name|long
name|allocatedVCores
decl_stmt|;
DECL|field|pendingVCores
name|long
name|pendingVCores
decl_stmt|;
DECL|field|reservedVCores
name|long
name|reservedVCores
decl_stmt|;
DECL|field|allocatedContainers
name|long
name|allocatedContainers
decl_stmt|;
DECL|field|reservedContainers
name|long
name|reservedContainers
decl_stmt|;
DECL|field|pendingContainers
name|long
name|pendingContainers
decl_stmt|;
block|}
DECL|class|KeyboardMonitor
specifier|private
class|class
name|KeyboardMonitor
extends|extends
name|Thread
block|{
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Scanner
name|keyboard
init|=
operator|new
name|Scanner
argument_list|(
name|System
operator|.
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
while|while
condition|(
name|runKeyboardMonitor
operator|.
name|get
argument_list|()
condition|)
block|{
name|String
name|in
init|=
name|keyboard
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|displayScreen
operator|==
name|DisplayScreen
operator|.
name|SORT
condition|)
block|{
name|handleSortScreenKeyPress
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayScreen
operator|==
name|DisplayScreen
operator|.
name|TOP
condition|)
block|{
name|handleTopScreenKeyPress
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayScreen
operator|==
name|DisplayScreen
operator|.
name|FIELDS
condition|)
block|{
name|handleFieldsScreenKeyPress
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handleHelpScreenKeyPress
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|field|refreshPeriod
name|long
name|refreshPeriod
init|=
literal|3
operator|*
literal|1000
decl_stmt|;
DECL|field|terminalWidth
name|int
name|terminalWidth
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|terminalHeight
name|int
name|terminalHeight
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|appsHeader
name|String
name|appsHeader
decl_stmt|;
DECL|field|ascendingSort
name|boolean
name|ascendingSort
decl_stmt|;
DECL|field|rmStartTime
name|long
name|rmStartTime
decl_stmt|;
DECL|field|comparator
name|Comparator
argument_list|<
name|ApplicationInformation
argument_list|>
name|comparator
decl_stmt|;
DECL|field|opts
name|Options
name|opts
decl_stmt|;
DECL|field|cliParser
name|CommandLine
name|cliParser
decl_stmt|;
DECL|field|queues
name|Set
argument_list|<
name|String
argument_list|>
name|queues
decl_stmt|;
DECL|field|users
name|Set
argument_list|<
name|String
argument_list|>
name|users
decl_stmt|;
DECL|field|types
name|Set
argument_list|<
name|String
argument_list|>
name|types
decl_stmt|;
DECL|field|displayScreen
name|DisplayScreen
name|displayScreen
decl_stmt|;
DECL|field|showingTopScreen
name|AtomicBoolean
name|showingTopScreen
decl_stmt|;
DECL|field|runMainLoop
name|AtomicBoolean
name|runMainLoop
decl_stmt|;
DECL|field|runKeyboardMonitor
name|AtomicBoolean
name|runKeyboardMonitor
decl_stmt|;
DECL|field|lock
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|currentSortField
name|String
name|currentSortField
decl_stmt|;
DECL|field|keyFieldsMap
name|Map
argument_list|<
name|String
argument_list|,
name|Columns
argument_list|>
name|keyFieldsMap
decl_stmt|;
DECL|field|sortedKeys
name|List
argument_list|<
name|String
argument_list|>
name|sortedKeys
decl_stmt|;
DECL|field|displayThread
name|Thread
name|displayThread
decl_stmt|;
DECL|field|columnInformationEnumMap
specifier|final
name|EnumMap
argument_list|<
name|Columns
argument_list|,
name|ColumnInformation
argument_list|>
name|columnInformationEnumMap
decl_stmt|;
DECL|method|TopCLI ()
specifier|public
name|TopCLI
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|()
expr_stmt|;
name|queues
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|users
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|types
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|comparator
operator|=
name|UsedContainersComparator
expr_stmt|;
name|ascendingSort
operator|=
literal|false
expr_stmt|;
name|displayScreen
operator|=
name|DisplayScreen
operator|.
name|TOP
expr_stmt|;
name|showingTopScreen
operator|=
operator|new
name|AtomicBoolean
argument_list|()
expr_stmt|;
name|showingTopScreen
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currentSortField
operator|=
literal|"c"
expr_stmt|;
name|keyFieldsMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|runKeyboardMonitor
operator|=
operator|new
name|AtomicBoolean
argument_list|()
expr_stmt|;
name|runMainLoop
operator|=
operator|new
name|AtomicBoolean
argument_list|()
expr_stmt|;
name|runKeyboardMonitor
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|runMainLoop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|displayThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
name|columnInformationEnumMap
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Columns
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateColumnInformationMap
argument_list|()
expr_stmt|;
name|generateKeyFieldsMap
argument_list|()
expr_stmt|;
name|sortedKeys
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|keyFieldsMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedKeys
argument_list|)
expr_stmt|;
name|setTerminalSequences
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|TopCLI
name|topImp
init|=
operator|new
name|TopCLI
argument_list|()
decl_stmt|;
name|topImp
operator|.
name|setSysOutPrintStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|topImp
operator|.
name|setSysErrPrintStream
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|topImp
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|topImp
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|parseOptions
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to parse options"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|setAppsHeader
argument_list|()
expr_stmt|;
name|Thread
name|keyboardMonitor
init|=
operator|new
name|KeyboardMonitor
argument_list|()
decl_stmt|;
name|keyboardMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|rmStartTime
operator|=
name|getRMStartTime
argument_list|()
expr_stmt|;
name|clearScreen
argument_list|()
expr_stmt|;
while|while
condition|(
name|runMainLoop
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|displayScreen
operator|==
name|DisplayScreen
operator|.
name|TOP
condition|)
block|{
name|showTopScreen
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|refreshPeriod
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|displayScreen
operator|==
name|DisplayScreen
operator|.
name|SORT
condition|)
block|{
name|showSortScreen
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|displayScreen
operator|==
name|DisplayScreen
operator|.
name|FIELDS
condition|)
block|{
name|showFieldsScreen
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rmStartTime
operator|==
operator|-
literal|1
condition|)
block|{
comment|// we were unable to get it the first time, try again
name|rmStartTime
operator|=
name|getRMStartTime
argument_list|()
expr_stmt|;
block|}
block|}
name|clearScreen
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|parseOptions (String[] args)
specifier|private
name|void
name|parseOptions
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|ParseException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Command line options
name|opts
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"queues"
argument_list|,
literal|true
argument_list|,
literal|"Comma separated list of queues to restrict applications"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"users"
argument_list|,
literal|true
argument_list|,
literal|"Comma separated list of users to restrict applications"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"types"
argument_list|,
literal|true
argument_list|,
literal|"Comma separated list of types to restrict"
operator|+
literal|" applications, case sensitive(though the display is lower case)"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"cols"
argument_list|,
literal|true
argument_list|,
literal|"Number of columns on the terminal"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"rows"
argument_list|,
literal|true
argument_list|,
literal|"Number of rows on the terminal"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print usage; for help while the tool is running press 'h' + Enter"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"delay"
argument_list|,
literal|true
argument_list|,
literal|"The refresh delay(in seconds), default is 3 seconds"
argument_list|)
expr_stmt|;
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|String
name|clqueues
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"queues"
argument_list|)
decl_stmt|;
name|String
index|[]
name|queuesArray
init|=
name|clqueues
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|queues
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|queuesArray
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"users"
argument_list|)
condition|)
block|{
name|String
name|clusers
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
name|users
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|clusers
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"types"
argument_list|)
condition|)
block|{
name|String
name|cltypes
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"types"
argument_list|)
decl_stmt|;
name|types
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cltypes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"cols"
argument_list|)
condition|)
block|{
name|terminalWidth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"cols"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setTerminalWidth
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"rows"
argument_list|)
condition|)
block|{
name|terminalHeight
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"rows"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setTerminalHeight
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"delay"
argument_list|)
condition|)
block|{
name|int
name|delay
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"delay"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|delay
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Delay set too low, using default"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refreshPeriod
operator|=
name|delay
operator|*
literal|1000
expr_stmt|;
block|}
block|}
block|}
DECL|method|printUsage ()
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"yarn top"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"'yarn top' is a tool to help cluster administrators"
operator|+
literal|" understand cluster usage better."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Some notes about the implementation:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  1. Fetching information for all the apps is an"
operator|+
literal|" expensive call for the RM."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"     To prevent a performance degradation, the results"
operator|+
literal|" are cached for 5 seconds,"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"     irrespective of the delay value. Information about"
operator|+
literal|" the NodeManager(s) and queue"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"     utilization stats are fetched at the specified"
operator|+
literal|" delay interval. Once we have a"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"     better understanding of the performance impact,"
operator|+
literal|" this might change."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  2. Since the tool is implemented in Java, you must"
operator|+
literal|" hit Enter for key presses to"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"     be processed."
argument_list|)
expr_stmt|;
block|}
DECL|method|setAppsHeader ()
specifier|private
name|void
name|setAppsHeader
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|formattedStrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|EnumMap
operator|.
name|Entry
argument_list|<
name|Columns
argument_list|,
name|ColumnInformation
argument_list|>
name|entry
range|:
name|columnInformationEnumMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|display
condition|)
block|{
name|formattedStrings
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|format
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|header
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|appsHeader
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|formattedStrings
operator|.
name|toArray
argument_list|()
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|appsHeader
operator|.
name|length
argument_list|()
operator|>
name|terminalWidth
condition|)
block|{
name|appsHeader
operator|=
name|appsHeader
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|terminalWidth
operator|-
name|System
operator|.
name|lineSeparator
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appsHeader
operator|+=
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|" "
argument_list|,
name|terminalWidth
operator|-
name|appsHeader
operator|.
name|length
argument_list|()
operator|-
name|System
operator|.
name|lineSeparator
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|appsHeader
operator|+=
name|System
operator|.
name|lineSeparator
argument_list|()
expr_stmt|;
block|}
DECL|method|setTerminalWidth ()
specifier|private
name|void
name|setTerminalWidth
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|terminalWidth
operator|!=
operator|-
literal|1
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|command
init|=
block|{
literal|"tput"
block|,
literal|"cols"
block|}
decl_stmt|;
name|String
name|op
init|=
name|getCommandOutput
argument_list|(
name|command
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
name|terminalWidth
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't determine terminal width, setting to 80"
argument_list|,
name|ne
argument_list|)
expr_stmt|;
name|terminalWidth
operator|=
literal|80
expr_stmt|;
block|}
block|}
DECL|method|setTerminalHeight ()
specifier|private
name|void
name|setTerminalHeight
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|terminalHeight
operator|!=
operator|-
literal|1
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|command
init|=
block|{
literal|"tput"
block|,
literal|"lines"
block|}
decl_stmt|;
name|String
name|op
init|=
name|getCommandOutput
argument_list|(
name|command
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
name|terminalHeight
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't determine terminal height, setting to 24"
argument_list|,
name|ne
argument_list|)
expr_stmt|;
name|terminalHeight
operator|=
literal|24
expr_stmt|;
block|}
block|}
DECL|method|setTerminalSequences ()
specifier|protected
name|void
name|setTerminalSequences
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
index|[]
name|tput_cursor_home
init|=
block|{
literal|"tput"
block|,
literal|"cup"
block|,
literal|"0"
block|,
literal|"0"
block|}
decl_stmt|;
name|String
index|[]
name|tput_clear
init|=
block|{
literal|"tput"
block|,
literal|"clear"
block|}
decl_stmt|;
name|String
index|[]
name|tput_clear_line
init|=
block|{
literal|"tput"
block|,
literal|"el"
block|}
decl_stmt|;
name|String
index|[]
name|tput_set_cursor_line_7_column_0
init|=
block|{
literal|"tput"
block|,
literal|"cup"
block|,
literal|"6"
block|,
literal|"0"
block|}
decl_stmt|;
name|String
index|[]
name|tput_change_background
init|=
block|{
literal|"tput"
block|,
literal|"smso"
block|}
decl_stmt|;
name|String
index|[]
name|tput_reset_background
init|=
block|{
literal|"tput"
block|,
literal|"rmso"
block|}
decl_stmt|;
name|SET_CURSOR_HOME
operator|=
name|getCommandOutput
argument_list|(
name|tput_cursor_home
argument_list|)
expr_stmt|;
name|CLEAR
operator|=
name|getCommandOutput
argument_list|(
name|tput_clear
argument_list|)
expr_stmt|;
name|CLEAR_LINE
operator|=
name|getCommandOutput
argument_list|(
name|tput_clear_line
argument_list|)
expr_stmt|;
name|SET_CURSOR_LINE_7_COLUMN_0
operator|=
name|getCommandOutput
argument_list|(
name|tput_set_cursor_line_7_column_0
argument_list|)
expr_stmt|;
name|CHANGE_BACKGROUND
operator|=
name|getCommandOutput
argument_list|(
name|tput_change_background
argument_list|)
expr_stmt|;
name|RESET_BACKGROUND
operator|=
name|getCommandOutput
argument_list|(
name|tput_reset_background
argument_list|)
expr_stmt|;
block|}
DECL|method|generateColumnInformationMap ()
specifier|private
name|void
name|generateColumnInformationMap
parameter_list|()
block|{
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|APPID
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"APPLICATIONID"
argument_list|,
literal|"%31s"
argument_list|,
literal|true
argument_list|,
literal|"Application Id"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|USER
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"USER"
argument_list|,
literal|"%-10s"
argument_list|,
literal|true
argument_list|,
literal|"Username"
argument_list|,
literal|"u"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|TYPE
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"TYPE"
argument_list|,
literal|"%10s"
argument_list|,
literal|true
argument_list|,
literal|"Application type"
argument_list|,
literal|"t"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|QUEUE
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"QUEUE"
argument_list|,
literal|"%10s"
argument_list|,
literal|true
argument_list|,
literal|"Application queue"
argument_list|,
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|PRIORITY
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"PRIOR"
argument_list|,
literal|"%5s"
argument_list|,
literal|true
argument_list|,
literal|"Application priority"
argument_list|,
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|CONT
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"#CONT"
argument_list|,
literal|"%7s"
argument_list|,
literal|true
argument_list|,
literal|"Number of containers"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|RCONT
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"#RCONT"
argument_list|,
literal|"%7s"
argument_list|,
literal|true
argument_list|,
literal|"Number of reserved containers"
argument_list|,
literal|"r"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|VCORES
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"VCORES"
argument_list|,
literal|"%7s"
argument_list|,
literal|true
argument_list|,
literal|"Allocated vcores"
argument_list|,
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|RVCORES
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"RVCORES"
argument_list|,
literal|"%7s"
argument_list|,
literal|true
argument_list|,
literal|"Reserved vcores"
argument_list|,
literal|"o"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|MEM
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"MEM"
argument_list|,
literal|"%7s"
argument_list|,
literal|true
argument_list|,
literal|"Allocated memory"
argument_list|,
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|RMEM
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"RMEM"
argument_list|,
literal|"%7s"
argument_list|,
literal|true
argument_list|,
literal|"Reserved memory"
argument_list|,
literal|"w"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|VCORESECS
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"VCORESECS"
argument_list|,
literal|"%10s"
argument_list|,
literal|true
argument_list|,
literal|"Vcore seconds"
argument_list|,
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|MEMSECS
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"MEMSECS"
argument_list|,
literal|"%10s"
argument_list|,
literal|true
argument_list|,
literal|"Memory seconds(in GBseconds)"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|PROGRESS
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"%PROGR"
argument_list|,
literal|"%6s"
argument_list|,
literal|true
argument_list|,
literal|"Progress(percentage)"
argument_list|,
literal|"p"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|TIME
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"TIME"
argument_list|,
literal|"%10s"
argument_list|,
literal|true
argument_list|,
literal|"Running time"
argument_list|,
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|columnInformationEnumMap
operator|.
name|put
argument_list|(
name|Columns
operator|.
name|NAME
argument_list|,
operator|new
name|ColumnInformation
argument_list|(
literal|"NAME"
argument_list|,
literal|"%s"
argument_list|,
literal|true
argument_list|,
literal|"Application name"
argument_list|,
literal|"n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generateKeyFieldsMap ()
specifier|private
name|void
name|generateKeyFieldsMap
parameter_list|()
block|{
for|for
control|(
name|EnumMap
operator|.
name|Entry
argument_list|<
name|Columns
argument_list|,
name|ColumnInformation
argument_list|>
name|entry
range|:
name|columnInformationEnumMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|keyFieldsMap
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|key
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNodesInfo ()
specifier|protected
name|NodesInformation
name|getNodesInfo
parameter_list|()
block|{
name|NodesInformation
name|nodeInfo
init|=
operator|new
name|NodesInformation
argument_list|()
decl_stmt|;
name|YarnClusterMetrics
name|yarnClusterMetrics
decl_stmt|;
try|try
block|{
name|yarnClusterMetrics
operator|=
name|client
operator|.
name|getYarnClusterMetrics
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to fetch cluster metrics"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
return|return
name|nodeInfo
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to fetch cluster metrics"
argument_list|,
name|ye
argument_list|)
expr_stmt|;
return|return
name|nodeInfo
return|;
block|}
name|nodeInfo
operator|.
name|decommissionedNodes
operator|=
name|yarnClusterMetrics
operator|.
name|getNumDecommissionedNodeManagers
argument_list|()
expr_stmt|;
name|nodeInfo
operator|.
name|totalNodes
operator|=
name|yarnClusterMetrics
operator|.
name|getNumNodeManagers
argument_list|()
expr_stmt|;
name|nodeInfo
operator|.
name|runningNodes
operator|=
name|yarnClusterMetrics
operator|.
name|getNumActiveNodeManagers
argument_list|()
expr_stmt|;
name|nodeInfo
operator|.
name|lostNodes
operator|=
name|yarnClusterMetrics
operator|.
name|getNumLostNodeManagers
argument_list|()
expr_stmt|;
name|nodeInfo
operator|.
name|unhealthyNodes
operator|=
name|yarnClusterMetrics
operator|.
name|getNumUnhealthyNodeManagers
argument_list|()
expr_stmt|;
name|nodeInfo
operator|.
name|rebootedNodes
operator|=
name|yarnClusterMetrics
operator|.
name|getNumRebootedNodeManagers
argument_list|()
expr_stmt|;
return|return
name|nodeInfo
return|;
block|}
DECL|method|getQueueMetrics ()
specifier|protected
name|QueueMetrics
name|getQueueMetrics
parameter_list|()
block|{
name|QueueMetrics
name|queueMetrics
init|=
operator|new
name|QueueMetrics
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueueInfo
argument_list|>
name|queuesInfo
decl_stmt|;
if|if
condition|(
name|queues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|queuesInfo
operator|=
name|client
operator|.
name|getRootQueueInfos
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get queue information"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
return|return
name|queueMetrics
return|;
block|}
block|}
else|else
block|{
name|queuesInfo
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|queueName
range|:
name|queues
control|)
block|{
try|try
block|{
name|QueueInfo
name|qInfo
init|=
name|client
operator|.
name|getQueueInfo
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|queuesInfo
operator|.
name|add
argument_list|(
name|qInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get queue information"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
return|return
name|queueMetrics
return|;
block|}
block|}
block|}
for|for
control|(
name|QueueInfo
name|childInfo
range|:
name|queuesInfo
control|)
block|{
name|QueueStatistics
name|stats
init|=
name|childInfo
operator|.
name|getQueueStatistics
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|queueMetrics
operator|.
name|appsSubmitted
operator|+=
name|stats
operator|.
name|getNumAppsSubmitted
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|appsRunning
operator|+=
name|stats
operator|.
name|getNumAppsRunning
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|appsPending
operator|+=
name|stats
operator|.
name|getNumAppsPending
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|appsCompleted
operator|+=
name|stats
operator|.
name|getNumAppsCompleted
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|appsKilled
operator|+=
name|stats
operator|.
name|getNumAppsKilled
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|appsFailed
operator|+=
name|stats
operator|.
name|getNumAppsFailed
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|activeUsers
operator|+=
name|stats
operator|.
name|getNumActiveUsers
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|availableMemoryGB
operator|+=
name|stats
operator|.
name|getAvailableMemoryMB
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|allocatedMemoryGB
operator|+=
name|stats
operator|.
name|getAllocatedMemoryMB
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|pendingMemoryGB
operator|+=
name|stats
operator|.
name|getPendingMemoryMB
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|reservedMemoryGB
operator|+=
name|stats
operator|.
name|getReservedMemoryMB
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|availableVCores
operator|+=
name|stats
operator|.
name|getAvailableVCores
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|allocatedVCores
operator|+=
name|stats
operator|.
name|getAllocatedVCores
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|pendingVCores
operator|+=
name|stats
operator|.
name|getPendingVCores
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|reservedVCores
operator|+=
name|stats
operator|.
name|getReservedVCores
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|allocatedContainers
operator|+=
name|stats
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|pendingContainers
operator|+=
name|stats
operator|.
name|getPendingContainers
argument_list|()
expr_stmt|;
name|queueMetrics
operator|.
name|reservedContainers
operator|+=
name|stats
operator|.
name|getReservedContainers
argument_list|()
expr_stmt|;
block|}
block|}
name|queueMetrics
operator|.
name|availableMemoryGB
operator|=
name|queueMetrics
operator|.
name|availableMemoryGB
operator|/
literal|1024
expr_stmt|;
name|queueMetrics
operator|.
name|allocatedMemoryGB
operator|=
name|queueMetrics
operator|.
name|allocatedMemoryGB
operator|/
literal|1024
expr_stmt|;
name|queueMetrics
operator|.
name|pendingMemoryGB
operator|=
name|queueMetrics
operator|.
name|pendingMemoryGB
operator|/
literal|1024
expr_stmt|;
name|queueMetrics
operator|.
name|reservedMemoryGB
operator|=
name|queueMetrics
operator|.
name|reservedMemoryGB
operator|/
literal|1024
expr_stmt|;
return|return
name|queueMetrics
return|;
block|}
DECL|method|getRMStartTime ()
name|long
name|getRMStartTime
parameter_list|()
block|{
try|try
block|{
comment|// connect with url
name|URL
name|url
init|=
name|getClusterUrl
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|url
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|JSONObject
name|clusterInfo
init|=
name|getJSONObject
argument_list|(
name|connect
argument_list|(
name|url
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|clusterInfo
operator|.
name|getLong
argument_list|(
literal|"startedOn"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not fetch RM start time"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getJSONObject (URLConnection conn)
specifier|private
name|JSONObject
name|getJSONObject
parameter_list|(
name|URLConnection
name|conn
parameter_list|)
throws|throws
name|IOException
throws|,
name|JSONException
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|conn
operator|.
name|getInputStream
argument_list|()
init|)
block|{
name|String
name|encoding
init|=
name|conn
operator|.
name|getContentEncoding
argument_list|()
decl_stmt|;
name|encoding
operator|=
name|encoding
operator|==
literal|null
condition|?
literal|"UTF-8"
else|:
name|encoding
expr_stmt|;
name|String
name|body
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|in
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
name|JSONObject
name|obj
init|=
operator|new
name|JSONObject
argument_list|(
name|body
argument_list|)
decl_stmt|;
name|JSONObject
name|clusterInfo
init|=
name|obj
operator|.
name|getJSONObject
argument_list|(
literal|"clusterInfo"
argument_list|)
decl_stmt|;
return|return
name|clusterInfo
return|;
block|}
block|}
DECL|method|getClusterUrl ()
specifier|private
name|URL
name|getClusterUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|haids
init|=
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rmhid
range|:
name|haids
control|)
block|{
try|try
block|{
name|url
operator|=
name|getHAClusterUrl
argument_list|(
name|conf
argument_list|,
name|rmhid
argument_list|)
expr_stmt|;
if|if
condition|(
name|isActive
argument_list|(
name|url
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|ConnectException
name|e
parameter_list|)
block|{
comment|// ignore and try second one when one of RM is down
block|}
block|}
block|}
else|else
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|WebAppUtils
operator|.
name|getRMWebAppURLWithScheme
argument_list|(
name|conf
argument_list|)
operator|+
name|CLUSTER_INFO_URL
argument_list|)
expr_stmt|;
block|}
return|return
name|url
return|;
block|}
DECL|method|isActive (URL url)
specifier|private
name|boolean
name|isActive
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|URLConnection
name|connect
init|=
name|connect
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|JSONObject
name|clusterInfo
init|=
name|getJSONObject
argument_list|(
name|connect
argument_list|)
decl_stmt|;
return|return
name|clusterInfo
operator|.
name|getString
argument_list|(
literal|"haState"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACTIVE"
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getHAClusterUrl (Configuration conf, String rmhid)
specifier|public
name|URL
name|getHAClusterUrl
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|rmhid
parameter_list|)
throws|throws
name|MalformedURLException
block|{
return|return
operator|new
name|URL
argument_list|(
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
name|conf
argument_list|)
operator|+
name|WebAppUtils
operator|.
name|getResolvedRemoteRMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|conf
argument_list|)
condition|?
name|Policy
operator|.
name|HTTPS_ONLY
else|:
name|Policy
operator|.
name|HTTP_ONLY
argument_list|,
name|rmhid
argument_list|)
operator|+
name|CLUSTER_INFO_URL
argument_list|)
return|;
block|}
DECL|method|connect (URL url)
specifier|private
name|URLConnection
name|connect
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
name|AuthenticatedURL
operator|.
name|Token
name|token
init|=
operator|new
name|AuthenticatedURL
operator|.
name|Token
argument_list|()
decl_stmt|;
name|AuthenticatedURL
name|authUrl
decl_stmt|;
name|SSLFactory
name|clientSslFactory
decl_stmt|;
name|URLConnection
name|connection
decl_stmt|;
comment|// If https is chosen, configures SSL client.
if|if
condition|(
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|clientSslFactory
operator|=
operator|new
name|SSLFactory
argument_list|(
name|SSLFactory
operator|.
name|Mode
operator|.
name|CLIENT
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|clientSslFactory
operator|.
name|init
argument_list|()
expr_stmt|;
name|SSLSocketFactory
name|sslSocktFact
init|=
name|clientSslFactory
operator|.
name|createSSLSocketFactory
argument_list|()
decl_stmt|;
name|authUrl
operator|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|KerberosAuthenticator
argument_list|()
argument_list|,
name|clientSslFactory
argument_list|)
expr_stmt|;
name|connection
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
name|HttpsURLConnection
name|httpsConn
init|=
operator|(
name|HttpsURLConnection
operator|)
name|connection
decl_stmt|;
name|httpsConn
operator|.
name|setSSLSocketFactory
argument_list|(
name|sslSocktFact
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|authUrl
operator|=
operator|new
name|AuthenticatedURL
argument_list|(
operator|new
name|KerberosAuthenticator
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|authUrl
operator|.
name|openConnection
argument_list|(
name|url
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
DECL|method|getHeader (QueueMetrics queueMetrics, NodesInformation nodes)
name|String
name|getHeader
parameter_list|(
name|QueueMetrics
name|queueMetrics
parameter_list|,
name|NodesInformation
name|nodes
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
literal|"root"
decl_stmt|;
if|if
condition|(
operator|!
name|queues
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|queue
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|queues
argument_list|,
literal|","
argument_list|)
expr_stmt|;
block|}
name|long
name|now
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|long
name|uptime
init|=
literal|0L
decl_stmt|;
if|if
condition|(
name|rmStartTime
operator|!=
operator|-
literal|1
condition|)
block|{
name|uptime
operator|=
name|now
operator|-
name|rmStartTime
expr_stmt|;
block|}
name|long
name|days
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toDays
argument_list|(
name|uptime
argument_list|)
decl_stmt|;
name|long
name|hours
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toHours
argument_list|(
name|uptime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toHours
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toDays
argument_list|(
name|uptime
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|minutes
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMinutes
argument_list|(
name|uptime
argument_list|)
operator|-
name|TimeUnit
operator|.
name|HOURS
operator|.
name|toMinutes
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toHours
argument_list|(
name|uptime
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|uptimeStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%dd, %d:%d"
argument_list|,
name|days
argument_list|,
name|hours
argument_list|,
name|minutes
argument_list|)
decl_stmt|;
name|String
name|currentTime
init|=
name|DateFormatUtils
operator|.
name|ISO_TIME_NO_T_FORMAT
operator|.
name|format
argument_list|(
name|now
argument_list|)
decl_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|limitLineLength
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"YARN top - %s, up %s, %d active users, queue(s): %s%n"
argument_list|,
name|currentTime
argument_list|,
name|uptimeStr
argument_list|,
name|queueMetrics
operator|.
name|activeUsers
argument_list|,
name|queue
argument_list|)
argument_list|,
name|terminalWidth
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|limitLineLength
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"NodeManager(s): %d total, %d active, %d unhealthy, %d decommissioned,"
operator|+
literal|" %d lost, %d rebooted%n"
argument_list|,
name|nodes
operator|.
name|totalNodes
argument_list|,
name|nodes
operator|.
name|runningNodes
argument_list|,
name|nodes
operator|.
name|unhealthyNodes
argument_list|,
name|nodes
operator|.
name|decommissionedNodes
argument_list|,
name|nodes
operator|.
name|lostNodes
argument_list|,
name|nodes
operator|.
name|rebootedNodes
argument_list|)
argument_list|,
name|terminalWidth
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|limitLineLength
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue(s) Applications: %d running, %d submitted, %d pending,"
operator|+
literal|" %d completed, %d killed, %d failed%n"
argument_list|,
name|queueMetrics
operator|.
name|appsRunning
argument_list|,
name|queueMetrics
operator|.
name|appsSubmitted
argument_list|,
name|queueMetrics
operator|.
name|appsPending
argument_list|,
name|queueMetrics
operator|.
name|appsCompleted
argument_list|,
name|queueMetrics
operator|.
name|appsKilled
argument_list|,
name|queueMetrics
operator|.
name|appsFailed
argument_list|)
argument_list|,
name|terminalWidth
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|limitLineLength
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue(s) Mem(GB): %d available,"
operator|+
literal|" %d allocated, %d pending, %d reserved%n"
argument_list|,
name|queueMetrics
operator|.
name|availableMemoryGB
argument_list|,
name|queueMetrics
operator|.
name|allocatedMemoryGB
argument_list|,
name|queueMetrics
operator|.
name|pendingMemoryGB
argument_list|,
name|queueMetrics
operator|.
name|reservedMemoryGB
argument_list|)
argument_list|,
name|terminalWidth
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|limitLineLength
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue(s) VCores: %d available,"
operator|+
literal|" %d allocated, %d pending, %d reserved%n"
argument_list|,
name|queueMetrics
operator|.
name|availableVCores
argument_list|,
name|queueMetrics
operator|.
name|allocatedVCores
argument_list|,
name|queueMetrics
operator|.
name|pendingVCores
argument_list|,
name|queueMetrics
operator|.
name|reservedVCores
argument_list|)
argument_list|,
name|terminalWidth
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|limitLineLength
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue(s) Containers: %d allocated, %d pending, %d reserved%n"
argument_list|,
name|queueMetrics
operator|.
name|allocatedContainers
argument_list|,
name|queueMetrics
operator|.
name|pendingContainers
argument_list|,
name|queueMetrics
operator|.
name|reservedContainers
argument_list|)
argument_list|,
name|terminalWidth
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getPrintableAppInformation (List<ApplicationInformation> appsInfo)
name|String
name|getPrintableAppInformation
parameter_list|(
name|List
argument_list|<
name|ApplicationInformation
argument_list|>
name|appsInfo
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|terminalHeight
operator|-
literal|9
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|appsInfo
operator|.
name|size
argument_list|()
condition|)
block|{
name|ApplicationInformation
name|appInfo
init|=
name|appsInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|columns
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|EnumMap
operator|.
name|Entry
argument_list|<
name|Columns
argument_list|,
name|ColumnInformation
argument_list|>
name|entry
range|:
name|columnInformationEnumMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|display
condition|)
block|{
name|String
name|value
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|appInfo
operator|.
name|displayStringsMap
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|value
operator|=
name|appInfo
operator|.
name|displayStringsMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|columns
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|format
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|append
argument_list|(
name|limitLineLength
argument_list|(
operator|(
name|StringUtils
operator|.
name|join
argument_list|(
name|columns
operator|.
name|toArray
argument_list|()
argument_list|,
literal|" "
argument_list|)
operator|+
name|System
operator|.
name|lineSeparator
argument_list|()
operator|)
argument_list|,
name|terminalWidth
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|append
argument_list|(
name|System
operator|.
name|lineSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|clearScreen ()
specifier|protected
name|void
name|clearScreen
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|CLEAR
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|clearScreenWithoutScroll ()
specifier|protected
name|void
name|clearScreenWithoutScroll
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|SET_CURSOR_HOME
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terminalHeight
condition|;
operator|++
name|i
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printHeader (String header)
specifier|protected
name|void
name|printHeader
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|SET_CURSOR_HOME
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|printApps (String appInfo)
specifier|protected
name|void
name|printApps
parameter_list|(
name|String
name|appInfo
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|CHANGE_BACKGROUND
operator|+
name|appsHeader
operator|+
name|RESET_BACKGROUND
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|appInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|showHelpScreen ()
specifier|private
name|void
name|showHelpScreen
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
operator|!
name|showingTopScreen
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// we've already printed the help screen
return|return;
block|}
name|showingTopScreen
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clearScreenWithoutScroll
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|SET_CURSOR_HOME
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Help for yarn top."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delay: "
operator|+
operator|(
name|refreshPeriod
operator|/
literal|1000
operator|)
operator|+
literal|" secs; Secure mode: "
operator|+
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  s + Enter: Select sort field"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  f + Enter: Select fields to display"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  R + Enter: Reverse current sort order"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  h + Enter: Display this screen"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  q + Enter: Quit"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Press any key followed by Enter to continue"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|showSortScreen ()
specifier|private
name|void
name|showSortScreen
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|showingTopScreen
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|SET_CURSOR_HOME
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLEAR_LINE
operator|+
literal|"Current Sort Field: "
operator|+
name|currentSortField
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLEAR_LINE
operator|+
literal|"Select sort field via letter followed by"
operator|+
literal|" Enter, type any other key followed by Enter to return"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|sortedKeys
control|)
block|{
name|String
name|prefix
init|=
literal|" "
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|currentSortField
argument_list|)
condition|)
block|{
name|prefix
operator|=
literal|"*"
expr_stmt|;
block|}
name|ColumnInformation
name|value
init|=
name|columnInformationEnumMap
operator|.
name|get
argument_list|(
name|keyFieldsMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s: %-15s = %s"
argument_list|,
name|prefix
argument_list|,
name|key
argument_list|,
name|value
operator|.
name|header
argument_list|,
name|value
operator|.
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|showFieldsScreen ()
specifier|protected
name|void
name|showFieldsScreen
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|showingTopScreen
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|SET_CURSOR_HOME
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLEAR_LINE
operator|+
literal|"Current Fields: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|CLEAR_LINE
operator|+
literal|"Toggle fields via field letter followed"
operator|+
literal|" by Enter, type any other key followed by Enter to return"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|sortedKeys
control|)
block|{
name|ColumnInformation
name|info
init|=
name|columnInformationEnumMap
operator|.
name|get
argument_list|(
name|keyFieldsMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
literal|" "
decl_stmt|;
name|String
name|letter
init|=
name|key
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|display
condition|)
block|{
name|prefix
operator|=
literal|"*"
expr_stmt|;
name|letter
operator|=
name|key
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s %s: %-15s = %s"
argument_list|,
name|prefix
argument_list|,
name|letter
argument_list|,
name|info
operator|.
name|header
argument_list|,
name|info
operator|.
name|description
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|showTopScreen ()
specifier|protected
name|void
name|showTopScreen
parameter_list|()
block|{
name|List
argument_list|<
name|ApplicationInformation
argument_list|>
name|appsInfo
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|apps
decl_stmt|;
try|try
block|{
name|apps
operator|=
name|fetchAppReports
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get application information"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|ApplicationReport
name|appReport
range|:
name|apps
control|)
block|{
name|ApplicationInformation
name|appInfo
init|=
operator|new
name|ApplicationInformation
argument_list|(
name|appReport
argument_list|)
decl_stmt|;
name|appsInfo
operator|.
name|add
argument_list|(
name|appInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ascendingSort
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|appsInfo
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|appsInfo
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|(
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodesInformation
name|nodesInfo
init|=
name|getNodesInfo
argument_list|()
decl_stmt|;
name|QueueMetrics
name|queueMetrics
init|=
name|getQueueMetrics
argument_list|()
decl_stmt|;
name|String
name|header
init|=
name|getHeader
argument_list|(
name|queueMetrics
argument_list|,
name|nodesInfo
argument_list|)
decl_stmt|;
name|String
name|appsStr
init|=
name|getPrintableAppInformation
argument_list|(
name|appsInfo
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|printApps
argument_list|(
name|appsStr
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|SET_CURSOR_LINE_7_COLUMN_0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|CLEAR_LINE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleSortScreenKeyPress (String input)
specifier|private
name|void
name|handleSortScreenKeyPress
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|f
init|=
name|currentSortField
decl_stmt|;
name|currentSortField
operator|=
name|input
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|input
operator|.
name|toLowerCase
argument_list|()
condition|)
block|{
case|case
literal|"a"
case|:
name|comparator
operator|=
name|AppIDComparator
expr_stmt|;
break|break;
case|case
literal|"u"
case|:
name|comparator
operator|=
name|UserComparator
expr_stmt|;
break|break;
case|case
literal|"t"
case|:
name|comparator
operator|=
name|AppTypeComparator
expr_stmt|;
break|break;
case|case
literal|"q"
case|:
name|comparator
operator|=
name|QueueNameComparator
expr_stmt|;
break|break;
case|case
literal|"c"
case|:
name|comparator
operator|=
name|UsedContainersComparator
expr_stmt|;
break|break;
case|case
literal|"r"
case|:
name|comparator
operator|=
name|ReservedContainersComparator
expr_stmt|;
break|break;
case|case
literal|"v"
case|:
name|comparator
operator|=
name|UsedVCoresComparator
expr_stmt|;
break|break;
case|case
literal|"o"
case|:
name|comparator
operator|=
name|ReservedVCoresComparator
expr_stmt|;
break|break;
case|case
literal|"m"
case|:
name|comparator
operator|=
name|UsedMemoryComparator
expr_stmt|;
break|break;
case|case
literal|"w"
case|:
name|comparator
operator|=
name|ReservedMemoryComparator
expr_stmt|;
break|break;
case|case
literal|"s"
case|:
name|comparator
operator|=
name|VCoreSecondsComparator
expr_stmt|;
break|break;
case|case
literal|"y"
case|:
name|comparator
operator|=
name|MemorySecondsComparator
expr_stmt|;
break|break;
case|case
literal|"p"
case|:
name|comparator
operator|=
name|ProgressComparator
expr_stmt|;
break|break;
case|case
literal|"i"
case|:
name|comparator
operator|=
name|RunningTimeComparator
expr_stmt|;
break|break;
case|case
literal|"n"
case|:
name|comparator
operator|=
name|AppNameComparator
expr_stmt|;
break|break;
case|case
literal|"l"
case|:
name|comparator
operator|=
name|AppPriorityComparator
expr_stmt|;
break|break;
default|default:
comment|// it wasn't a sort key
name|currentSortField
operator|=
name|f
expr_stmt|;
name|showTopScreen
argument_list|()
expr_stmt|;
name|showingTopScreen
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|displayScreen
operator|=
name|DisplayScreen
operator|.
name|TOP
expr_stmt|;
block|}
block|}
DECL|method|handleFieldsScreenKeyPress (String input)
specifier|private
name|void
name|handleFieldsScreenKeyPress
parameter_list|(
name|String
name|input
parameter_list|)
block|{
if|if
condition|(
name|keyFieldsMap
operator|.
name|containsKey
argument_list|(
name|input
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|toggleColumn
argument_list|(
name|keyFieldsMap
operator|.
name|get
argument_list|(
name|input
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setAppsHeader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|showTopScreen
argument_list|()
expr_stmt|;
name|showingTopScreen
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|displayScreen
operator|=
name|DisplayScreen
operator|.
name|TOP
expr_stmt|;
block|}
block|}
DECL|method|handleTopScreenKeyPress (String input)
specifier|private
name|void
name|handleTopScreenKeyPress
parameter_list|(
name|String
name|input
parameter_list|)
block|{
switch|switch
condition|(
name|input
operator|.
name|toLowerCase
argument_list|()
condition|)
block|{
case|case
literal|"q"
case|:
name|runMainLoop
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runKeyboardMonitor
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// wake up if it's sleeping
name|displayThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"s"
case|:
name|displayScreen
operator|=
name|DisplayScreen
operator|.
name|SORT
expr_stmt|;
name|showSortScreen
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"f"
case|:
name|displayScreen
operator|=
name|DisplayScreen
operator|.
name|FIELDS
expr_stmt|;
name|showFieldsScreen
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"r"
case|:
name|ascendingSort
operator|=
operator|!
name|ascendingSort
expr_stmt|;
break|break;
case|case
literal|"h"
case|:
name|displayScreen
operator|=
name|DisplayScreen
operator|.
name|HELP
expr_stmt|;
name|showHelpScreen
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
DECL|method|handleHelpScreenKeyPress ()
specifier|private
name|void
name|handleHelpScreenKeyPress
parameter_list|()
block|{
name|showTopScreen
argument_list|()
expr_stmt|;
name|showingTopScreen
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|displayScreen
operator|=
name|DisplayScreen
operator|.
name|TOP
expr_stmt|;
block|}
DECL|method|limitLineLength (String line, int length, boolean addNewline)
name|String
name|limitLineLength
parameter_list|(
name|String
name|line
parameter_list|,
name|int
name|length
parameter_list|,
name|boolean
name|addNewline
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
name|length
condition|)
block|{
name|String
name|tmp
decl_stmt|;
if|if
condition|(
name|addNewline
condition|)
block|{
name|tmp
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|length
operator|-
name|System
operator|.
name|lineSeparator
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|+=
name|System
operator|.
name|lineSeparator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
return|return
name|line
return|;
block|}
DECL|method|toggleColumn (Columns col)
name|void
name|toggleColumn
parameter_list|(
name|Columns
name|col
parameter_list|)
block|{
name|columnInformationEnumMap
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|display
operator|=
operator|!
name|columnInformationEnumMap
operator|.
name|get
argument_list|(
name|col
argument_list|)
operator|.
name|display
expr_stmt|;
block|}
DECL|method|fetchAppReports ()
specifier|protected
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|fetchAppReports
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|ret
decl_stmt|;
name|EnumSet
argument_list|<
name|YarnApplicationState
argument_list|>
name|states
init|=
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|ACCEPTED
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|GetApplicationsRequest
name|req
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|types
argument_list|,
name|states
argument_list|)
decl_stmt|;
name|req
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|req
operator|.
name|setUsers
argument_list|(
name|users
argument_list|)
expr_stmt|;
name|ret
operator|=
name|applicationReportsCache
operator|.
name|getIfPresent
argument_list|(
name|req
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|client
operator|.
name|getApplications
argument_list|(
name|queues
argument_list|,
name|users
argument_list|,
name|types
argument_list|,
name|states
argument_list|)
expr_stmt|;
name|applicationReportsCache
operator|.
name|put
argument_list|(
name|req
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|getCommandOutput (String[] command)
specifier|private
name|String
name|getCommandOutput
parameter_list|(
name|String
index|[]
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|byte
index|[]
name|output
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|p
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
argument_list|(
name|output
argument_list|,
literal|"ASCII"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

