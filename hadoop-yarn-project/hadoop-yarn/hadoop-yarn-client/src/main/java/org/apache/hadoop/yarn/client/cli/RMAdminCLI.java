begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.cli
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|MissingArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|DecommissionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|ClientRMProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|RMHAServiceTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
operator|.
name|YarnClientUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CheckForDecommissioningNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CheckForDecommissioningNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshClusterMaxPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResourcesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoveFromClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReplaceLabelsOnNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UnitsConversionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|util
operator|.
name|YarnClientUtils
operator|.
name|NO_LABEL_ERR_MSG
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|RMAdminCLI
specifier|public
class|class
name|RMAdminCLI
extends|extends
name|HAAdmin
block|{
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|localNodeLabelsManager
specifier|static
name|CommonNodeLabelsManager
name|localNodeLabelsManager
init|=
literal|null
decl_stmt|;
DECL|field|NO_MAPPING_ERR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|NO_MAPPING_ERR_MSG
init|=
literal|"No node-to-labels mappings are specified"
decl_stmt|;
DECL|field|INVALID_TIMEOUT_ERR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|INVALID_TIMEOUT_ERR_MSG
init|=
literal|"Invalid timeout specified : "
decl_stmt|;
DECL|field|RESOURCE_TYPES_ARGS_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|RESOURCE_TYPES_ARGS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[0-9]*$"
argument_list|)
decl_stmt|;
DECL|field|ADMIN_USAGE
specifier|protected
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|UsageInfo
argument_list|>
name|ADMIN_USAGE
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|UsageInfo
decl|>
name|builder
argument_list|()
decl|.
name|put
argument_list|(
literal|"-refreshQueues"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Reload the queues' acls, states and scheduler specific "
operator|+
literal|"properties. \n\t\tResourceManager will reload the "
operator|+
literal|"mapred-queues configuration file."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-refreshNodes"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"[-g|graceful [timeout in seconds] -client|server]"
argument_list|,
literal|"Refresh the hosts information at the ResourceManager. Here "
operator|+
literal|"[-g|graceful [timeout in seconds] -client|server] is optional,"
operator|+
literal|" if we specify the timeout then ResourceManager will wait for "
operator|+
literal|"timeout before marking the NodeManager as decommissioned."
operator|+
literal|" The -client|server indicates if the timeout tracking should"
operator|+
literal|" be handled by the client or the ResourceManager. The client"
operator|+
literal|"-side tracking is blocking, while the server-side tracking"
operator|+
literal|" is not. Omitting the timeout, or a timeout of -1, indicates"
operator|+
literal|" an infinite timeout. Known Issue: the server-side tracking"
operator|+
literal|" will immediately decommission if an RM HA failover occurs."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-refreshNodesResources"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Refresh resources of NodeManagers at the ResourceManager."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-refreshSuperUserGroupsConfiguration"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Refresh superuser proxy groups mappings"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-refreshUserToGroupsMappings"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Refresh user-to-groups mappings"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-refreshAdminAcls"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Refresh acls for administration of ResourceManager"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-refreshServiceAcl"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Reload the service-level authorization policy file. \n\t\t"
operator|+
literal|"ResourceManager will reload the authorization policy file."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-getGroups"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"[username]"
argument_list|,
literal|"Get the groups which given user belongs to."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-addToClusterNodeLabels"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"<\"label1(exclusive=true),"
operator|+
literal|"label2(exclusive=false),label3\">"
argument_list|,
literal|"add to cluster node labels. Default exclusivity is true"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-removeFromClusterNodeLabels"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"<label1,label2,label3> (label splitted by \",\")"
argument_list|,
literal|"remove from cluster node labels"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-replaceLabelsOnNode"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"<\"node1[:port]=label1,label2 node2[:port]=label1,label2\"> "
operator|+
literal|"[-failOnUnknownNodes] "
argument_list|,
literal|"replace labels on nodes"
operator|+
literal|" (please note that we do not support specifying multiple"
operator|+
literal|" labels on a single host for now.)\n\t\t"
operator|+
literal|"[-failOnUnknownNodes] is optional, when we set this"
operator|+
literal|" option, it will fail if specified nodes are unknown."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-directlyAccessNodeLabelStore"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"This is DEPRECATED, will be removed in future releases. Directly access node label store, "
operator|+
literal|"with this option, all node label related operations"
operator|+
literal|" will not connect RM. Instead, they will"
operator|+
literal|" access/modify stored node labels directly."
operator|+
literal|" By default, it is false (access via RM)."
operator|+
literal|" AND PLEASE NOTE: if you configured"
operator|+
literal|" yarn.node-labels.fs-store.root-dir to a local directory"
operator|+
literal|" (instead of NFS or HDFS), this option will only work"
operator|+
literal|" when the command run on the machine where RM is running."
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-refreshClusterMaxPriority"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|""
argument_list|,
literal|"Refresh cluster max priority"
argument_list|)
argument_list|)
decl|.
name|put
argument_list|(
literal|"-updateNodeResource"
argument_list|,
operator|new
name|UsageInfo
argument_list|(
literal|"[NodeID] [MemSize] [vCores] ([OvercommitTimeout])"
operator|+
literal|" \n\t\tor\n\t\t[NodeID] [resourcetypes] "
operator|+
literal|"([OvercommitTimeout]). "
argument_list|,
literal|"Update resource on specific node."
argument_list|)
argument_list|)
decl|.
name|build
argument_list|()
decl_stmt|;
DECL|method|RMAdminCLI ()
specifier|public
name|RMAdminCLI
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|RMAdminCLI (Configuration conf)
specifier|public
name|RMAdminCLI
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|setErrOut (PrintStream errOut)
specifier|protected
name|void
name|setErrOut
parameter_list|(
name|PrintStream
name|errOut
parameter_list|)
block|{
name|this
operator|.
name|errOut
operator|=
name|errOut
expr_stmt|;
block|}
DECL|method|setOut (PrintStream out)
specifier|protected
name|void
name|setOut
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
block|}
DECL|method|appendHAUsage (final StringBuilder usageBuilder)
specifier|private
specifier|static
name|void
name|appendHAUsage
parameter_list|(
specifier|final
name|StringBuilder
name|usageBuilder
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UsageInfo
argument_list|>
name|cmdEntry
range|:
name|USAGE
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
operator|||
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-failover"
argument_list|)
operator|||
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-transitionToObserver"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|UsageInfo
name|usageInfo
init|=
name|cmdEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|usageInfo
operator|.
name|args
operator|==
literal|null
condition|)
block|{
name|usageBuilder
operator|.
name|append
argument_list|(
literal|" ["
operator|+
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|usageBuilder
operator|.
name|append
argument_list|(
literal|" ["
operator|+
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|buildHelpMsg (String cmd, StringBuilder builder)
specifier|private
specifier|static
name|void
name|buildHelpMsg
parameter_list|(
name|String
name|cmd
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
name|UsageInfo
name|usageInfo
init|=
name|ADMIN_USAGE
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|usageInfo
operator|==
literal|null
condition|)
block|{
name|usageInfo
operator|=
name|USAGE
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|usageInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|usageInfo
operator|.
name|args
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmd
operator|+
literal|": "
operator|+
name|usageInfo
operator|.
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|space
init|=
operator|(
name|usageInfo
operator|.
name|args
operator|==
literal|""
operator|)
condition|?
literal|""
else|:
literal|" "
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmd
operator|+
name|space
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|": "
operator|+
name|usageInfo
operator|.
name|help
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildIndividualUsageMsg (String cmd, StringBuilder builder )
specifier|private
specifier|static
name|void
name|buildIndividualUsageMsg
parameter_list|(
name|String
name|cmd
parameter_list|,
name|StringBuilder
name|builder
parameter_list|)
block|{
name|boolean
name|isHACommand
init|=
literal|false
decl_stmt|;
name|UsageInfo
name|usageInfo
init|=
name|ADMIN_USAGE
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|usageInfo
operator|==
literal|null
condition|)
block|{
name|usageInfo
operator|=
name|USAGE
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|usageInfo
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|isHACommand
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|usageInfo
operator|.
name|args
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"Usage: yarn rmadmin ["
operator|+
name|cmd
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|space
init|=
operator|(
name|usageInfo
operator|.
name|args
operator|==
literal|""
operator|)
condition|?
literal|""
else|:
literal|" "
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Usage: yarn rmadmin ["
operator|+
name|cmd
operator|+
name|space
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|"]\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHACommand
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|cmd
operator|+
literal|" can only be used when RM HA is enabled"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|buildUsageMsg (StringBuilder builder, boolean isHAEnabled)
specifier|private
specifier|static
name|void
name|buildUsageMsg
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"Usage: yarn rmadmin\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UsageInfo
argument_list|>
name|cmdEntry
range|:
name|ADMIN_USAGE
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|UsageInfo
name|usageInfo
init|=
name|cmdEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmdEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHAEnabled
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|UsageInfo
argument_list|>
name|cmdEntry
range|:
name|USAGE
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|cmdKey
init|=
name|cmdEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cmdKey
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
condition|)
block|{
name|UsageInfo
name|usageInfo
init|=
name|cmdEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|usageInfo
operator|.
name|args
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmdKey
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"   "
operator|+
name|cmdKey
operator|+
literal|" "
operator|+
name|usageInfo
operator|.
name|args
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"   -help"
operator|+
literal|" [cmd]\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|printHelp (String cmd, boolean isHAEnabled)
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
block|{
name|StringBuilder
name|summary
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|summary
operator|.
name|append
argument_list|(
literal|"rmadmin is the command to execute YARN administrative "
operator|+
literal|"commands.\n"
argument_list|)
expr_stmt|;
name|summary
operator|.
name|append
argument_list|(
literal|"The full syntax is: \n\n"
operator|+
literal|"yarn rmadmin"
operator|+
literal|" [-refreshQueues]"
operator|+
literal|" [-refreshNodes [-g|graceful [timeout in seconds] -client|server]]"
operator|+
literal|" [-refreshNodesResources]"
operator|+
literal|" [-refreshSuperUserGroupsConfiguration]"
operator|+
literal|" [-refreshUserToGroupsMappings]"
operator|+
literal|" [-refreshAdminAcls]"
operator|+
literal|" [-refreshServiceAcl]"
operator|+
literal|" [-getGroup [username]]"
operator|+
literal|" [-addToClusterNodeLabels<\"label1(exclusive=true),"
operator|+
literal|"label2(exclusive=false),label3\">]"
operator|+
literal|" [-removeFromClusterNodeLabels<label1,label2,label3>]"
operator|+
literal|" [-replaceLabelsOnNode "
operator|+
literal|"<\"node1[:port]=label1,label2 node2[:port]=label1\"> "
operator|+
literal|"[-failOnUnknownNodes]]"
operator|+
literal|" [-directlyAccessNodeLabelStore]"
operator|+
literal|" [-refreshClusterMaxPriority]"
operator|+
literal|" [-updateNodeResource [NodeID] [MemSize] [vCores]"
operator|+
literal|" ([OvercommitTimeout]) or -updateNodeResource [NodeID] "
operator|+
literal|"[ResourceTypes] ([OvercommitTimeout])]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHAEnabled
condition|)
block|{
name|appendHAUsage
argument_list|(
name|summary
argument_list|)
expr_stmt|;
block|}
name|summary
operator|.
name|append
argument_list|(
literal|" [-help [cmd]]"
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|StringBuilder
name|helpBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cmdKey
range|:
name|ADMIN_USAGE
operator|.
name|keySet
argument_list|()
control|)
block|{
name|buildHelpMsg
argument_list|(
name|cmdKey
argument_list|,
name|helpBuilder
argument_list|)
expr_stmt|;
name|helpBuilder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isHAEnabled
condition|)
block|{
for|for
control|(
name|String
name|cmdKey
range|:
name|USAGE
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cmdKey
operator|.
name|equals
argument_list|(
literal|"-help"
argument_list|)
operator|&&
operator|!
name|cmdKey
operator|.
name|equals
argument_list|(
literal|"-failover"
argument_list|)
operator|&&
operator|!
name|cmdKey
operator|.
name|equals
argument_list|(
literal|"-transitionToObserver"
argument_list|)
condition|)
block|{
name|buildHelpMsg
argument_list|(
name|cmdKey
argument_list|,
name|helpBuilder
argument_list|)
expr_stmt|;
name|helpBuilder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|helpBuilder
operator|.
name|append
argument_list|(
literal|"   -help [cmd]: Displays help for the given command or all commands"
operator|+
literal|" if none is specified."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|helpBuilder
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * Displays format of commands.    * @param cmd The command that is being executed.    */
DECL|method|printUsage (String cmd, boolean isHAEnabled)
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
block|{
name|StringBuilder
name|usageBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|ADMIN_USAGE
operator|.
name|containsKey
argument_list|(
name|cmd
argument_list|)
operator|||
name|USAGE
operator|.
name|containsKey
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|buildIndividualUsageMsg
argument_list|(
name|cmd
argument_list|,
name|usageBuilder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildUsageMsg
argument_list|(
name|usageBuilder
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usageBuilder
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
DECL|method|createAdminProtocol ()
specifier|protected
name|ResourceManagerAdministrationProtocol
name|createAdminProtocol
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get the current configuration
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ResourceManagerAdministrationProtocol
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|refreshQueues ()
specifier|private
name|int
name|refreshQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh the queue properties
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshQueuesRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshQueuesRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshQueues
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshNodes (boolean graceful)
specifier|private
name|int
name|refreshNodes
parameter_list|(
name|boolean
name|graceful
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh the nodes
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshNodesRequest
name|request
init|=
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|graceful
condition|?
name|DecommissionType
operator|.
name|GRACEFUL
else|:
name|DecommissionType
operator|.
name|NORMAL
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshNodes (int timeout, String trackingMode)
specifier|private
name|int
name|refreshNodes
parameter_list|(
name|int
name|timeout
parameter_list|,
name|String
name|trackingMode
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|boolean
name|serverTracking
init|=
operator|!
literal|"client"
operator|.
name|equals
argument_list|(
name|trackingMode
argument_list|)
decl_stmt|;
comment|// Graceful decommissioning with timeout
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshNodesRequest
name|gracefulRequest
init|=
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|GRACEFUL
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshNodes
argument_list|(
name|gracefulRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverTracking
condition|)
block|{
return|return
literal|0
return|;
block|}
name|CheckForDecommissioningNodesRequest
name|checkForDecommissioningNodesRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|CheckForDecommissioningNodesRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|waitingTime
decl_stmt|;
name|boolean
name|nodesDecommissioning
init|=
literal|true
decl_stmt|;
comment|// As RM enforces timeout automatically, client usually don't need
comment|// to forcefully decommission nodes upon timeout.
comment|// Here we let the client waits a small additional seconds so to avoid
comment|// unnecessary double decommission.
specifier|final
name|int
name|gracePeriod
init|=
literal|5
decl_stmt|;
comment|// timeout=-1 means wait for all the nodes to be gracefully
comment|// decommissioned
for|for
control|(
name|waitingTime
operator|=
literal|0
init|;
name|timeout
operator|==
operator|-
literal|1
operator|||
operator|(
name|timeout
operator|>=
literal|0
operator|&&
name|waitingTime
operator|<
name|timeout
operator|+
name|gracePeriod
operator|)
condition|;
name|waitingTime
operator|++
control|)
block|{
comment|// wait for one second to check nodes decommissioning status
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Ignore the InterruptedException
block|}
name|CheckForDecommissioningNodesResponse
name|checkForDecommissioningNodes
init|=
name|adminProtocol
operator|.
name|checkForDecommissioningNodes
argument_list|(
name|checkForDecommissioningNodesRequest
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|decommissioningNodes
init|=
name|checkForDecommissioningNodes
operator|.
name|getDecommissioningNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|decommissioningNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesDecommissioning
operator|=
literal|false
expr_stmt|;
break|break;
block|}
else|else
block|{
name|StringBuilder
name|nodes
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|decommissioningNodes
control|)
block|{
name|nodes
operator|.
name|append
argument_list|(
name|nodeId
argument_list|)
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|nodes
operator|.
name|deleteCharAt
argument_list|(
name|nodes
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Nodes '"
operator|+
name|nodes
operator|+
literal|"' are still decommissioning."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nodesDecommissioning
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Graceful decommissioning not completed in "
operator|+
name|timeout
operator|+
literal|" seconds, issuing forceful decommissioning command."
argument_list|)
expr_stmt|;
name|RefreshNodesRequest
name|forcefulRequest
init|=
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|FORCEFUL
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshNodes
argument_list|(
name|forcefulRequest
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Graceful decommissioning completed in "
operator|+
name|waitingTime
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|refreshNodesResources ()
specifier|private
name|int
name|refreshNodesResources
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh the resources at the Nodemanager
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshNodesResourcesRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshNodesResourcesRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshNodesResources
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshNodes ()
specifier|private
name|int
name|refreshNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|refreshNodes
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|refreshUserToGroupsMappings ()
specifier|private
name|int
name|refreshUserToGroupsMappings
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh the user-to-groups mappings
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshUserToGroupsMappingsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshUserToGroupsMappingsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshUserToGroupsMappings
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshSuperUserGroupsConfiguration ()
specifier|private
name|int
name|refreshSuperUserGroupsConfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh the super-user groups
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshSuperUserGroupsConfigurationRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshAdminAcls ()
specifier|private
name|int
name|refreshAdminAcls
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh the admin acls
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshAdminAclsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshAdminAcls
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshServiceAcls ()
specifier|private
name|int
name|refreshServiceAcls
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh the service acls
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshServiceAclsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshServiceAclsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshServiceAcls
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|refreshClusterMaxPriority ()
specifier|private
name|int
name|refreshClusterMaxPriority
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// Refresh cluster max priority
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RefreshClusterMaxPriorityRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RefreshClusterMaxPriorityRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|refreshClusterMaxPriority
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|updateNodeResource (String nodeIdStr, Resource resource, int overCommitTimeout)
specifier|private
name|int
name|updateNodeResource
parameter_list|(
name|String
name|nodeIdStr
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|int
name|overCommitTimeout
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|UpdateNodeResourceRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|UpdateNodeResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
name|nodeIdStr
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
name|resourceMap
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
argument_list|()
decl_stmt|;
name|resourceMap
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource
argument_list|,
name|overCommitTimeout
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeResourceMap
argument_list|(
name|resourceMap
argument_list|)
expr_stmt|;
name|adminProtocol
operator|.
name|updateNodeResource
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|// complain negative value for cpu or memory.
DECL|method|invalidResourceValue (int memValue, int coreValue)
specifier|private
name|boolean
name|invalidResourceValue
parameter_list|(
name|int
name|memValue
parameter_list|,
name|int
name|coreValue
parameter_list|)
block|{
return|return
operator|(
name|memValue
operator|<
literal|0
operator|)
operator|||
operator|(
name|coreValue
operator|<
literal|0
operator|)
return|;
block|}
DECL|method|getGroups (String[] usernames)
specifier|private
name|int
name|getGroups
parameter_list|(
name|String
index|[]
name|usernames
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Get groups users belongs to
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
if|if
condition|(
name|usernames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|usernames
operator|=
operator|new
name|String
index|[]
block|{
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
block|}
expr_stmt|;
block|}
for|for
control|(
name|String
name|username
range|:
name|usernames
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|username
operator|+
literal|" :"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|group
range|:
name|adminProtocol
operator|.
name|getGroupsForUser
argument_list|(
name|username
argument_list|)
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|// Make it protected to make unit test can change it.
specifier|protected
specifier|static
specifier|synchronized
name|CommonNodeLabelsManager
DECL|method|getNodeLabelManagerInstance (Configuration conf)
name|getNodeLabelManagerInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|localNodeLabelsManager
operator|==
literal|null
condition|)
block|{
name|localNodeLabelsManager
operator|=
operator|new
name|CommonNodeLabelsManager
argument_list|()
expr_stmt|;
name|localNodeLabelsManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|localNodeLabelsManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|localNodeLabelsManager
return|;
block|}
DECL|method|buildNodeLabelNamesFromStr (String args)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|buildNodeLabelNamesFromStr
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|args
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|labels
operator|.
name|add
argument_list|(
name|p
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|NO_LABEL_ERR_MSG
argument_list|)
throw|;
block|}
return|return
name|labels
return|;
block|}
DECL|method|handleAddToClusterNodeLabels (String[] args, String cmd, boolean isHAEnabled)
specifier|private
name|int
name|handleAddToClusterNodeLabels
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|cmd
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|ParseException
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"addToClusterNodeLabels"
argument_list|,
literal|true
argument_list|,
literal|"Add to cluster node labels."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"directlyAccessNodeLabelStore"
argument_list|,
literal|false
argument_list|,
literal|"Directly access node label store."
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|CommandLine
name|cliParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|NO_LABEL_ERR_MSG
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|labels
init|=
name|YarnClientUtils
operator|.
name|buildNodeLabelsFromStr
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"addToClusterNodeLabels"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"directlyAccessNodeLabelStore"
argument_list|)
condition|)
block|{
name|getNodeLabelManagerInstance
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|addToCluserNodeLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|AddToClusterNodeLabelsRequest
name|request
init|=
name|AddToClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|(
name|labels
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|addToClusterNodeLabels
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|handleRemoveFromClusterNodeLabels (String[] args, String cmd, boolean isHAEnabled)
specifier|private
name|int
name|handleRemoveFromClusterNodeLabels
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|cmd
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|ParseException
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"removeFromClusterNodeLabels"
argument_list|,
literal|true
argument_list|,
literal|"Remove From cluster node labels."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"directlyAccessNodeLabelStore"
argument_list|,
literal|false
argument_list|,
literal|"Directly access node label store."
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|CommandLine
name|cliParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|NO_LABEL_ERR_MSG
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|buildNodeLabelNamesFromStr
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"removeFromClusterNodeLabels"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"directlyAccessNodeLabelStore"
argument_list|)
condition|)
block|{
name|getNodeLabelManagerInstance
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|RemoveFromClusterNodeLabelsRequest
name|request
init|=
name|RemoveFromClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|(
name|labels
argument_list|)
decl_stmt|;
name|adminProtocol
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|buildNodeLabelsMapFromStr (String args)
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|buildNodeLabelsMapFromStr
parameter_list|(
name|String
name|args
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeToLabels
range|:
name|args
operator|.
name|split
argument_list|(
literal|"[ \n]"
argument_list|)
control|)
block|{
name|nodeToLabels
operator|=
name|nodeToLabels
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeToLabels
operator|.
name|isEmpty
argument_list|()
operator|||
name|nodeToLabels
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
index|[]
name|splits
init|=
name|nodeToLabels
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|int
name|labelsStartIndex
init|=
literal|0
decl_stmt|;
name|String
name|nodeIdStr
init|=
name|splits
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|splits
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|splits
operator|=
name|splits
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeToLabels
operator|.
name|endsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
comment|//case where no labels are mapped to a node
name|splits
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// "," also supported for compatibility
name|splits
operator|=
name|nodeToLabels
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|nodeIdStr
operator|=
name|splits
index|[
literal|0
index|]
expr_stmt|;
name|labelsStartIndex
operator|=
literal|1
expr_stmt|;
block|}
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|!
name|nodeIdStr
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"node name cannot be empty"
argument_list|)
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
name|nodeIdStr
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|labelsStartIndex
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|splits
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|add
argument_list|(
name|splits
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|nLabels
init|=
name|map
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|nLabels
operator|<=
literal|1
argument_list|,
literal|"%s labels specified on host=%s"
operator|+
literal|", please note that we do not support specifying multiple"
operator|+
literal|" labels on a single host for now."
argument_list|,
name|nLabels
argument_list|,
name|nodeIdStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|NO_MAPPING_ERR_MSG
argument_list|)
throw|;
block|}
return|return
name|map
return|;
block|}
DECL|method|handleReplaceLabelsOnNodes (String[] args, String cmd, boolean isHAEnabled)
specifier|private
name|int
name|handleReplaceLabelsOnNodes
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|cmd
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|ParseException
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"replaceLabelsOnNode"
argument_list|,
literal|true
argument_list|,
literal|"Replace label on node."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"failOnUnknownNodes"
argument_list|,
literal|false
argument_list|,
literal|"Fail on unknown nodes."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"directlyAccessNodeLabelStore"
argument_list|,
literal|false
argument_list|,
literal|"Directly access node label store."
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|CommandLine
name|cliParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|NO_MAPPING_ERR_MSG
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|buildNodeLabelsMapFromStr
argument_list|(
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"replaceLabelsOnNode"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|replaceLabelsOnNodes
argument_list|(
name|map
argument_list|,
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"failOnUnknownNodes"
argument_list|)
argument_list|,
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"directlyAccessNodeLabelStore"
argument_list|)
argument_list|)
return|;
block|}
DECL|method|replaceLabelsOnNodes (Map<NodeId, Set<String>> map, boolean failOnUnknownNodes, boolean directlyAccessNodeLabelStore)
specifier|private
name|int
name|replaceLabelsOnNodes
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
parameter_list|,
name|boolean
name|failOnUnknownNodes
parameter_list|,
name|boolean
name|directlyAccessNodeLabelStore
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|directlyAccessNodeLabelStore
condition|)
block|{
name|getNodeLabelManagerInstance
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|replaceLabelsOnNode
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ResourceManagerAdministrationProtocol
name|adminProtocol
init|=
name|createAdminProtocol
argument_list|()
decl_stmt|;
name|ReplaceLabelsOnNodeRequest
name|request
init|=
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|request
operator|.
name|setFailOnUnknownNodes
argument_list|(
name|failOnUnknownNodes
argument_list|)
expr_stmt|;
name|adminProtocol
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|yarnConf
init|=
name|getConf
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|YarnConfiguration
argument_list|()
else|:
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isHAEnabled
init|=
name|yarnConf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_HA_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
name|exitCode
operator|=
literal|0
expr_stmt|;
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|printUsage
argument_list|(
name|args
index|[
name|i
index|]
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
literal|""
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
if|if
condition|(
name|USAGE
operator|.
name|containsKey
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|isHAEnabled
condition|)
block|{
return|return
name|super
operator|.
name|run
argument_list|(
name|args
argument_list|)
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot run "
operator|+
name|cmd
operator|+
literal|" when ResourceManager HA is not enabled"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|//
comment|// verify that we have enough command line parameters
comment|//
if|if
condition|(
literal|"-refreshAdminAcls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshQueues"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshNodesResources"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
try|try
block|{
if|if
condition|(
literal|"-refreshQueues"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshQueues
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNodes"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleRefreshNodes
argument_list|(
name|args
argument_list|,
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshNodesResources"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshNodesResources
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshUserToGroupsMappings"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshUserToGroupsMappings
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshSuperUserGroupsConfiguration"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshSuperUserGroupsConfiguration
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshAdminAcls"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshAdminAcls
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshServiceAcl"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshServiceAcls
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-refreshClusterMaxPriority"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|refreshClusterMaxPriority
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-getGroups"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|String
index|[]
name|usernames
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|args
argument_list|,
name|i
argument_list|,
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
name|exitCode
operator|=
name|getGroups
argument_list|(
name|usernames
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-updateNodeResource"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleUpdateNodeResource
argument_list|(
name|args
argument_list|,
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-addToClusterNodeLabels"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleAddToClusterNodeLabels
argument_list|(
name|args
argument_list|,
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-removeFromClusterNodeLabels"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleRemoveFromClusterNodeLabels
argument_list|(
name|args
argument_list|,
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-replaceLabelsOnNode"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|handleReplaceLabelsOnNodes
argument_list|(
name|args
argument_list|,
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error message, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|localNodeLabelsManager
condition|)
block|{
name|localNodeLabelsManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
comment|// A helper method to reduce the number of lines of run()
DECL|method|handleRefreshNodes (String[] args, String cmd, boolean isHAEnabled)
specifier|private
name|int
name|handleRefreshNodes
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|cmd
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|ParseException
block|{
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"refreshNodes"
argument_list|,
literal|false
argument_list|,
literal|"Refresh the hosts information at the ResourceManager."
argument_list|)
expr_stmt|;
name|Option
name|gracefulOpt
init|=
operator|new
name|Option
argument_list|(
literal|"g"
argument_list|,
literal|"graceful"
argument_list|,
literal|true
argument_list|,
literal|"Wait for timeout before marking the NodeManager as decommissioned."
argument_list|)
decl_stmt|;
name|gracefulOpt
operator|.
name|setOptionalArg
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|gracefulOpt
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"client"
argument_list|,
literal|false
argument_list|,
literal|"Indicates the timeout tracking should be handled by the client."
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"server"
argument_list|,
literal|false
argument_list|,
literal|"Indicates the timeout tracking should be handled by the RM."
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|CommandLine
name|cliParser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cliParser
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingArgumentException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Missing argument for options"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|int
name|timeout
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"g"
argument_list|)
condition|)
block|{
name|String
name|strTimeout
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"g"
argument_list|)
decl_stmt|;
if|if
condition|(
name|strTimeout
operator|!=
literal|null
condition|)
block|{
name|timeout
operator|=
name|validateTimeout
argument_list|(
name|strTimeout
argument_list|)
expr_stmt|;
block|}
name|String
name|trackingMode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"client"
argument_list|)
condition|)
block|{
name|trackingMode
operator|=
literal|"client"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"server"
argument_list|)
condition|)
block|{
name|trackingMode
operator|=
literal|"server"
expr_stmt|;
block|}
else|else
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|refreshNodes
argument_list|(
name|timeout
argument_list|,
name|trackingMode
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|refreshNodes
argument_list|()
return|;
block|}
block|}
comment|/**    * Handle resources of two different formats:    *    * 1. -updateNodeResource [NodeID] [MemSize] [vCores] ([overCommitTimeout])    * 2. -updateNodeResource [NodeID] [ResourceTypes] ([overCommitTimeout])    *    * Incase of No. of args is 4 or 5, 2nd arg should contain only numbers to    * satisfy the 1st format. Otherwise, 2nd format flow continues.    * @param args arguments of the command    * @param cmd whole command to be parsed    * @param isHAEnabled Is HA enabled or not?    * @return 1 on success, -1 on errors    * @throws IOException if any issues thrown from RPC layer    * @throws YarnException if any issues thrown from server    */
DECL|method|handleUpdateNodeResource ( String[] args, String cmd, boolean isHAEnabled)
specifier|private
name|int
name|handleUpdateNodeResource
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|String
name|cmd
parameter_list|,
name|boolean
name|isHAEnabled
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
name|int
name|overCommitTimeout
init|=
name|ResourceOption
operator|.
name|OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT
decl_stmt|;
name|String
name|nodeID
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
argument_list|<
literal|3
operator|||
name|args
operator|.
name|length
argument_list|>
literal|5
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Number of parameters specified for "
operator|+
literal|"updateNodeResource is wrong."
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|args
operator|.
name|length
operator|==
literal|4
operator|||
name|args
operator|.
name|length
operator|==
literal|5
operator|)
operator|&&
name|RESOURCE_TYPES_ARGS_PATTERN
operator|.
name|matcher
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|int
name|memSize
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
name|int
name|cores
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
operator|++
index|]
argument_list|)
decl_stmt|;
comment|// check resource value first
if|if
condition|(
name|invalidResourceValue
argument_list|(
name|memSize
argument_list|,
name|cores
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid resource value: "
operator|+
literal|"("
operator|+
name|memSize
operator|+
literal|","
operator|+
name|cores
operator|+
literal|") for updateNodeResource."
argument_list|)
throw|;
block|}
name|resource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|memSize
argument_list|,
name|cores
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|resourceTypes
init|=
name|args
index|[
name|i
operator|++
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|resourceTypes
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Resource Types parameter specified for "
operator|+
literal|"updateNodeResource is wrong. It should be comma-delimited "
operator|+
literal|"key value pairs. For example, memory-mb=1024Mi,"
operator|+
literal|"vcores=1,resource1=3Gi,resource2=2"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|,
name|isHAEnabled
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|resource
operator|=
name|parseCommandAndCreateResource
argument_list|(
name|resourceTypes
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|areMandatoryResourcesAvailable
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|args
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|overCommitTimeout
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|updateNodeResource
argument_list|(
name|nodeID
argument_list|,
name|resource
argument_list|,
name|overCommitTimeout
argument_list|)
return|;
block|}
DECL|method|parseCommandAndCreateResource (String resourceTypes)
specifier|private
name|Resource
name|parseCommandAndCreateResource
parameter_list|(
name|String
name|resourceTypes
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|resourceTypesFromRM
init|=
name|ResourceUtils
operator|.
name|getResourceTypes
argument_list|()
decl_stmt|;
name|String
index|[]
name|resourceTypesArr
init|=
name|resourceTypes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|resourceTypesArr
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|String
name|resourceType
init|=
name|resourceTypesArr
index|[
name|k
index|]
decl_stmt|;
name|String
index|[]
name|resourceTypeArray
init|=
name|resourceType
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceTypeArray
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|resName
init|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|resourceTypeArray
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|resValue
init|=
name|StringUtils
operator|.
name|trim
argument_list|(
name|resourceTypeArray
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceTypesFromRM
operator|.
name|containsKey
argument_list|(
name|resName
argument_list|)
condition|)
block|{
name|String
index|[]
name|resourceValue
init|=
name|ResourceUtils
operator|.
name|parseResourceValue
argument_list|(
name|resValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceValue
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|resourceValue
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resourceTypesFromRM
operator|.
name|get
argument_list|(
name|resName
argument_list|)
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|resourceValue
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|value
operator|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|resourceValue
index|[
literal|0
index|]
argument_list|,
name|resourceTypesFromRM
operator|.
name|get
argument_list|(
name|resName
argument_list|)
operator|.
name|getUnits
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|ResourceInformation
name|ri
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resName
argument_list|,
name|resourceValue
index|[
literal|0
index|]
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResourceInformation
argument_list|(
name|resName
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid resource value: "
operator|+
name|resValue
operator|+
literal|". Unable to extract unit and actual value."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid resource type: "
operator|+
name|resName
operator|+
literal|". Not allowed."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid resource type value: "
operator|+
literal|"("
operator|+
name|resourceType
operator|+
literal|") for updateNodeResource. "
operator|+
literal|"It should be key value pairs separated using '=' symbol."
argument_list|)
throw|;
block|}
block|}
return|return
name|resource
return|;
block|}
DECL|method|validateTimeout (String strTimeout)
specifier|private
name|int
name|validateTimeout
parameter_list|(
name|String
name|strTimeout
parameter_list|)
block|{
name|int
name|timeout
decl_stmt|;
try|try
block|{
name|timeout
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|INVALID_TIMEOUT_ERR_MSG
operator|+
name|strTimeout
argument_list|)
throw|;
block|}
if|if
condition|(
name|timeout
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|INVALID_TIMEOUT_ERR_MSG
operator|+
name|timeout
argument_list|)
throw|;
block|}
return|return
name|timeout
return|;
block|}
DECL|method|validateTrackingMode (String mode)
specifier|private
name|String
name|validateTrackingMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
if|if
condition|(
literal|"-client"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
return|return
literal|"client"
return|;
block|}
if|if
condition|(
literal|"-server"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
block|{
return|return
literal|"server"
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid mode specified: "
operator|+
name|mode
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|conf
operator|=
name|addSecurityConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add the requisite security principal settings to the given Configuration,    * returning a copy.    * @param conf the original config    * @return a copy with the security settings added    */
DECL|method|addSecurityConfiguration (Configuration conf)
specifier|private
specifier|static
name|Configuration
name|addSecurityConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Make a copy so we don't mutate it. Also use an YarnConfiguration to
comment|// force loading of yarn-site.xml.
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|resolveTarget (String rmId)
specifier|protected
name|HAServiceTarget
name|resolveTarget
parameter_list|(
name|String
name|rmId
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|rmIds
init|=
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rmIds
operator|.
name|contains
argument_list|(
name|rmId
argument_list|)
condition|)
block|{
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
name|rmId
operator|+
literal|" is not a valid serviceId. It should be one of "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|rmIds
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|id
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
return|return
operator|new
name|RMHAServiceTarget
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not connect to "
operator|+
name|rmId
operator|+
literal|"; the configuration for it might be missing"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not connect to RM HA Admin for node "
operator|+
name|rmId
argument_list|)
throw|;
block|}
block|}
comment|/**    * returns the list of all resourcemanager ids for the given configuration.    */
annotation|@
name|Override
DECL|method|getTargetIds (String targetNodeToActivate)
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|getTargetIds
parameter_list|(
name|String
name|targetNodeToActivate
parameter_list|)
block|{
return|return
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|getConf
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getUsageString ()
specifier|protected
name|String
name|getUsageString
parameter_list|()
block|{
return|return
literal|"Usage: rmadmin"
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|result
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|RMAdminCLI
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

