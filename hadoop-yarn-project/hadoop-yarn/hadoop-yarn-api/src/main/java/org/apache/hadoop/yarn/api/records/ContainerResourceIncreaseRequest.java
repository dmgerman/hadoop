begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * Used by Application Master, send a container resource increase request to  * Resource Manager  */
end_comment

begin_class
annotation|@
name|Public
DECL|class|ContainerResourceIncreaseRequest
specifier|public
specifier|abstract
class|class
name|ContainerResourceIncreaseRequest
block|{
annotation|@
name|Public
DECL|method|newInstance ( ContainerId existingContainerId, Resource targetCapability)
specifier|public
specifier|static
name|ContainerResourceIncreaseRequest
name|newInstance
parameter_list|(
name|ContainerId
name|existingContainerId
parameter_list|,
name|Resource
name|targetCapability
parameter_list|)
block|{
name|ContainerResourceIncreaseRequest
name|context
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerResourceIncreaseRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setContainerId
argument_list|(
name|existingContainerId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setCapability
argument_list|(
name|targetCapability
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Public
DECL|method|getContainerId ()
specifier|public
specifier|abstract
name|ContainerId
name|getContainerId
parameter_list|()
function_decl|;
annotation|@
name|Public
DECL|method|setContainerId (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
function_decl|;
annotation|@
name|Public
DECL|method|getCapability ()
specifier|public
specifier|abstract
name|Resource
name|getCapability
parameter_list|()
function_decl|;
annotation|@
name|Public
DECL|method|setCapability (Resource capability)
specifier|public
specifier|abstract
name|void
name|setCapability
parameter_list|(
name|Resource
name|capability
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getCapability
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|+
name|getContainerId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|ContainerResourceIncreaseRequest
condition|)
block|{
name|ContainerResourceIncreaseRequest
name|ctx
init|=
operator|(
name|ContainerResourceIncreaseRequest
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|getContainerId
argument_list|()
operator|==
literal|null
operator|&&
name|ctx
operator|.
name|getContainerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|ctx
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getCapability
argument_list|()
operator|==
literal|null
operator|&&
name|ctx
operator|.
name|getCapability
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|getCapability
argument_list|()
operator|.
name|equals
argument_list|(
name|ctx
operator|.
name|getCapability
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

