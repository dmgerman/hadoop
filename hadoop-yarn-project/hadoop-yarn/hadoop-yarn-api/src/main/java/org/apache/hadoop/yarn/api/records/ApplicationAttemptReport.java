begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  *<code>ApplicationAttemptReport</code> is a report of an application attempt.  *</p>  *   *<p>  * It includes details such as:  *<ul>  *<li>{@link ApplicationAttemptId} of the application.</li>  *<li>Host on which the<code>ApplicationMaster</code> of this attempt is  * running.</li>  *<li>RPC port of the<code>ApplicationMaster</code> of this attempt.</li>  *<li>Tracking URL.</li>  *<li>Diagnostic information in case of errors.</li>  *<li>{@link YarnApplicationAttemptState} of the application attempt.</li>  *<li>{@link ContainerId} of the master Container.</li>  *</ul>  *</p>  *   */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ApplicationAttemptReport
specifier|public
specifier|abstract
class|class
name|ApplicationAttemptReport
block|{
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance ( ApplicationAttemptId applicationAttemptId, String host, int rpcPort, String url, String oUrl, String diagnostics, YarnApplicationAttemptState state, ContainerId amContainerId)
specifier|public
specifier|static
name|ApplicationAttemptReport
name|newInstance
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|rpcPort
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|oUrl
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|YarnApplicationAttemptState
name|state
parameter_list|,
name|ContainerId
name|amContainerId
parameter_list|)
block|{
name|ApplicationAttemptReport
name|report
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationAttemptReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setApplicationAttemptId
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRpcPort
argument_list|(
name|rpcPort
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTrackingUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|report
operator|.
name|setOriginalTrackingUrl
argument_list|(
name|oUrl
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|report
operator|.
name|setYarnApplicationAttemptState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|report
operator|.
name|setAMContainerId
argument_list|(
name|amContainerId
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
comment|/**    * Get the<em>YarnApplicationAttemptState</em> of the application attempt.    *     * @return<em>YarnApplicationAttemptState</em> of the application attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getYarnApplicationAttemptState ()
specifier|public
specifier|abstract
name|YarnApplicationAttemptState
name|getYarnApplicationAttemptState
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setYarnApplicationAttemptState ( YarnApplicationAttemptState yarnApplicationAttemptState)
specifier|public
specifier|abstract
name|void
name|setYarnApplicationAttemptState
parameter_list|(
name|YarnApplicationAttemptState
name|yarnApplicationAttemptState
parameter_list|)
function_decl|;
comment|/**    * Get the<em>RPC port</em> of this attempt<code>ApplicationMaster</code>.    *     * @return<em>RPC port</em> of this attempt<code>ApplicationMaster</code>    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getRpcPort ()
specifier|public
specifier|abstract
name|int
name|getRpcPort
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setRpcPort (int rpcPort)
specifier|public
specifier|abstract
name|void
name|setRpcPort
parameter_list|(
name|int
name|rpcPort
parameter_list|)
function_decl|;
comment|/**    * Get the<em>host</em> on which this attempt of    *<code>ApplicationMaster</code> is running.    *     * @return<em>host</em> on which this attempt of    *<code>ApplicationMaster</code> is running    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getHost ()
specifier|public
specifier|abstract
name|String
name|getHost
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setHost (String host)
specifier|public
specifier|abstract
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
function_decl|;
comment|/**    * Get the<em>diagnositic information</em> of the application attempt in case    * of errors.    *     * @return<em>diagnositic information</em> of the application attempt in case    *         of errors    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getDiagnostics ()
specifier|public
specifier|abstract
name|String
name|getDiagnostics
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setDiagnostics (String diagnostics)
specifier|public
specifier|abstract
name|void
name|setDiagnostics
parameter_list|(
name|String
name|diagnostics
parameter_list|)
function_decl|;
comment|/**    * Get the<em>tracking url</em> for the application attempt.    *     * @return<em>tracking url</em> for the application attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getTrackingUrl ()
specifier|public
specifier|abstract
name|String
name|getTrackingUrl
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setTrackingUrl (String url)
specifier|public
specifier|abstract
name|void
name|setTrackingUrl
parameter_list|(
name|String
name|url
parameter_list|)
function_decl|;
comment|/**    * Get the<em>original tracking url</em> for the application attempt.    *     * @return<em>original tracking url</em> for the application attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getOriginalTrackingUrl ()
specifier|public
specifier|abstract
name|String
name|getOriginalTrackingUrl
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setOriginalTrackingUrl (String oUrl)
specifier|public
specifier|abstract
name|void
name|setOriginalTrackingUrl
parameter_list|(
name|String
name|oUrl
parameter_list|)
function_decl|;
comment|/**    * Get the<code>ApplicationAttemptId</code> of this attempt of the    * application    *     * @return<code>ApplicationAttemptId</code> of the attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getApplicationAttemptId ()
specifier|public
specifier|abstract
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setApplicationAttemptId ( ApplicationAttemptId applicationAttemptId)
specifier|public
specifier|abstract
name|void
name|setApplicationAttemptId
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
function_decl|;
comment|/**    * Get the<code>ContainerId</code> of AMContainer for this attempt    *     * @return<code>ContainerId</code> of the attempt    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAMContainerId ()
specifier|public
specifier|abstract
name|ContainerId
name|getAMContainerId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setAMContainerId (ContainerId amContainerId)
specifier|public
specifier|abstract
name|void
name|setAMContainerId
parameter_list|(
name|ContainerId
name|amContainerId
parameter_list|)
function_decl|;
block|}
end_class

end_unit

