begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|QueueACLProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|QueueUserACLInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|QueueUserACLInfoProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProtoUtils
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|QueueUserACLInfoPBImpl
specifier|public
class|class
name|QueueUserACLInfoPBImpl
extends|extends
name|QueueUserACLInfo
block|{
DECL|field|proto
name|QueueUserACLInfoProto
name|proto
init|=
name|QueueUserACLInfoProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
name|QueueUserACLInfoProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|userAclsList
name|List
argument_list|<
name|QueueACL
argument_list|>
name|userAclsList
decl_stmt|;
DECL|method|QueueUserACLInfoPBImpl ()
specifier|public
name|QueueUserACLInfoPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|QueueUserACLInfoProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|QueueUserACLInfoPBImpl (QueueUserACLInfoProto proto)
specifier|public
name|QueueUserACLInfoPBImpl
parameter_list|(
name|QueueUserACLInfoProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
name|QueueUserACLInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
operator|(
name|p
operator|.
name|hasQueueName
argument_list|()
operator|)
condition|?
name|p
operator|.
name|getQueueName
argument_list|()
else|:
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getUserAcls ()
specifier|public
name|List
argument_list|<
name|QueueACL
argument_list|>
name|getUserAcls
parameter_list|()
block|{
name|initLocalQueueUserAclsList
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|userAclsList
return|;
block|}
annotation|@
name|Override
DECL|method|setQueueName (String queueName)
specifier|public
name|void
name|setQueueName
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|queueName
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearQueueName
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setQueueName
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUserAcls (List<QueueACL> userAclsList)
specifier|public
name|void
name|setUserAcls
parameter_list|(
name|List
argument_list|<
name|QueueACL
argument_list|>
name|userAclsList
parameter_list|)
block|{
if|if
condition|(
name|userAclsList
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearUserAcls
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|userAclsList
operator|=
name|userAclsList
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|QueueUserACLInfoProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
literal|", "
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
DECL|method|initLocalQueueUserAclsList ()
specifier|private
name|void
name|initLocalQueueUserAclsList
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|userAclsList
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|QueueUserACLInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|QueueACLProto
argument_list|>
name|list
init|=
name|p
operator|.
name|getUserAclsList
argument_list|()
decl_stmt|;
name|userAclsList
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueueACL
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|QueueACLProto
name|a
range|:
name|list
control|)
block|{
name|userAclsList
operator|.
name|add
argument_list|(
name|convertFromProtoFormat
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addQueueACLsToProto ()
specifier|private
name|void
name|addQueueACLsToProto
parameter_list|()
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clearUserAcls
argument_list|()
expr_stmt|;
if|if
condition|(
name|userAclsList
operator|==
literal|null
condition|)
return|return;
name|Iterable
argument_list|<
name|QueueACLProto
argument_list|>
name|iterable
init|=
operator|new
name|Iterable
argument_list|<
name|QueueACLProto
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|QueueACLProto
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|QueueACLProto
argument_list|>
argument_list|()
block|{
name|Iterator
argument_list|<
name|QueueACL
argument_list|>
name|iter
init|=
name|userAclsList
operator|.
name|iterator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iter
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueueACLProto
name|next
parameter_list|()
block|{
return|return
name|convertToProtoFormat
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|builder
operator|.
name|addAllUserAcls
argument_list|(
name|iterable
argument_list|)
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|QueueUserACLInfoProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|userAclsList
operator|!=
literal|null
condition|)
block|{
name|addQueueACLsToProto
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat (QueueACLProto q)
specifier|private
name|QueueACL
name|convertFromProtoFormat
parameter_list|(
name|QueueACLProto
name|q
parameter_list|)
block|{
return|return
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|q
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (QueueACL queueAcl)
specifier|private
name|QueueACLProto
name|convertToProtoFormat
parameter_list|(
name|QueueACL
name|queueAcl
parameter_list|)
block|{
return|return
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|queueAcl
argument_list|)
return|;
block|}
block|}
end_class

end_unit

