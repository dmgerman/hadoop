begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * {@code ResourceSizing} contains information for the size of a  * {@link SchedulingRequest}, such as the number of requested allocations and  * the resources for each allocation.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ResourceSizing
specifier|public
specifier|abstract
class|class
name|ResourceSizing
block|{
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (Resource resources)
specifier|public
specifier|static
name|ResourceSizing
name|newInstance
parameter_list|(
name|Resource
name|resources
parameter_list|)
block|{
return|return
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|resources
argument_list|)
return|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (int numAllocations, Resource resources)
specifier|public
specifier|static
name|ResourceSizing
name|newInstance
parameter_list|(
name|int
name|numAllocations
parameter_list|,
name|Resource
name|resources
parameter_list|)
block|{
name|ResourceSizing
name|resourceSizing
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ResourceSizing
operator|.
name|class
argument_list|)
decl_stmt|;
name|resourceSizing
operator|.
name|setNumAllocations
argument_list|(
name|numAllocations
argument_list|)
expr_stmt|;
name|resourceSizing
operator|.
name|setResources
argument_list|(
name|resources
argument_list|)
expr_stmt|;
return|return
name|resourceSizing
return|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getNumAllocations ()
specifier|public
specifier|abstract
name|int
name|getNumAllocations
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setNumAllocations (int numAllocations)
specifier|public
specifier|abstract
name|void
name|setNumAllocations
parameter_list|(
name|int
name|numAllocations
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getResources ()
specifier|public
specifier|abstract
name|Resource
name|getResources
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setResources (Resource resources)
specifier|public
specifier|abstract
name|void
name|setResources
parameter_list|(
name|Resource
name|resources
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|getResources
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|getNumAllocations
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ResourceSizing
name|that
init|=
operator|(
name|ResourceSizing
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getNumAllocations
argument_list|()
operator|!=
name|that
operator|.
name|getNumAllocations
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|getResources
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getResources
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

