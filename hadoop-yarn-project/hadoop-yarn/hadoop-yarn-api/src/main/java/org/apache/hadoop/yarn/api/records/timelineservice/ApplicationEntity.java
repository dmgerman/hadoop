begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * This entity represents an application.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ApplicationEntity
specifier|public
class|class
name|ApplicationEntity
extends|extends
name|HierarchicalTimelineEntity
block|{
DECL|field|QUEUE_INFO_KEY
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_INFO_KEY
init|=
name|TimelineEntity
operator|.
name|SYSTEM_INFO_KEY_PREFIX
operator|+
literal|"QUEUE"
decl_stmt|;
DECL|method|ApplicationEntity ()
specifier|public
name|ApplicationEntity
parameter_list|()
block|{
name|super
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ApplicationEntity (TimelineEntity entity)
specifier|public
name|ApplicationEntity
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|entity
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Incompatible entity type: "
operator|+
name|getId
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
return|return
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|QUEUE_INFO_KEY
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|setQueue (String queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|addInfo
argument_list|(
name|QUEUE_INFO_KEY
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Checks if the input TimelineEntity object is an ApplicationEntity.    *    * @param te TimelineEntity object.    * @return true if input is an ApplicationEntity, false otherwise    */
DECL|method|isApplicationEntity (TimelineEntity te)
specifier|public
specifier|static
name|boolean
name|isApplicationEntity
parameter_list|(
name|TimelineEntity
name|te
parameter_list|)
block|{
return|return
operator|(
name|te
operator|==
literal|null
condition|?
literal|false
else|:
name|te
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
return|;
block|}
comment|/**    * @param te TimelineEntity object.    * @param eventId event with this id needs to be fetched    * @return TimelineEvent if TimelineEntity contains the desired event.    */
DECL|method|getApplicationEvent (TimelineEntity te, String eventId)
specifier|public
specifier|static
name|TimelineEvent
name|getApplicationEvent
parameter_list|(
name|TimelineEntity
name|te
parameter_list|,
name|String
name|eventId
parameter_list|)
block|{
if|if
condition|(
name|isApplicationEntity
argument_list|(
name|te
argument_list|)
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|te
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|eventId
argument_list|)
condition|)
block|{
return|return
name|event
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

