begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  * {@link ReservationId} represents the<em>globally unique</em> identifier for  * a reservation.  *</p>  *   *<p>  * The globally unique nature of the identifier is achieved by using the  *<em>cluster timestamp</em> i.e. start-time of the {@code ResourceManager}  * along with a monotonically increasing counter for the reservation.  *</p>  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ReservationId
specifier|public
specifier|abstract
class|class
name|ReservationId
implements|implements
name|Comparable
argument_list|<
name|ReservationId
argument_list|>
block|{
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|reserveIdStrPrefix
specifier|public
specifier|static
specifier|final
name|String
name|reserveIdStrPrefix
init|=
literal|"reservation_"
decl_stmt|;
DECL|field|clusterTimestamp
specifier|protected
name|long
name|clusterTimestamp
decl_stmt|;
DECL|field|id
specifier|protected
name|long
name|id
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance (long clusterTimestamp, long id)
specifier|public
specifier|static
name|ReservationId
name|newInstance
parameter_list|(
name|long
name|clusterTimestamp
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|ReservationId
name|reservationId
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ReservationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|reservationId
operator|.
name|setClusterTimestamp
argument_list|(
name|clusterTimestamp
argument_list|)
expr_stmt|;
name|reservationId
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|reservationId
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|reservationId
return|;
block|}
comment|/**    * Get the long identifier of the {@link ReservationId} which is unique for    * all Reservations started by a particular instance of the    * {@code ResourceManager}.    *     * @return long identifier of the {@link ReservationId}    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getId ()
specifier|public
specifier|abstract
name|long
name|getId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setId (long id)
specifier|protected
specifier|abstract
name|void
name|setId
parameter_list|(
name|long
name|id
parameter_list|)
function_decl|;
comment|/**    * Get the<em>start time</em> of the {@code ResourceManager} which is used to    * generate globally unique {@link ReservationId}.    *     * @return<em>start time</em> of the {@code ResourceManager}    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getClusterTimestamp ()
specifier|public
specifier|abstract
name|long
name|getClusterTimestamp
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setClusterTimestamp (long clusterTimestamp)
specifier|protected
specifier|abstract
name|void
name|setClusterTimestamp
parameter_list|(
name|long
name|clusterTimestamp
parameter_list|)
function_decl|;
DECL|method|build ()
specifier|protected
specifier|abstract
name|void
name|build
parameter_list|()
function_decl|;
DECL|field|reservIdFormat
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
name|reservIdFormat
init|=
operator|new
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NumberFormat
name|initialValue
parameter_list|()
block|{
name|NumberFormat
name|fmt
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|compareTo (ReservationId other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ReservationId
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|-
name|other
operator|.
name|getClusterTimestamp
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|getId
argument_list|()
operator|>
name|getId
argument_list|()
condition|?
literal|1
else|:
name|getId
argument_list|()
operator|<
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|>
name|other
operator|.
name|getClusterTimestamp
argument_list|()
condition|?
literal|1
else|:
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|<
name|other
operator|.
name|getClusterTimestamp
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|reserveIdStrPrefix
operator|+
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|+
literal|"_"
operator|+
name|reservIdFormat
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Parse the string argument as a {@link ReservationId}    *    * @param reservationId the string representation of the {@link ReservationId}    * @return the {@link ReservationId} corresponding to the input string if    *         valid, null if input is null    * @throws IOException if unable to parse the input string    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|parseReservationId (String reservationId)
specifier|public
specifier|static
name|ReservationId
name|parseReservationId
parameter_list|(
name|String
name|reservationId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|reservationId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|reservationId
operator|.
name|startsWith
argument_list|(
name|reserveIdStrPrefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The specified reservation id is invalid: "
operator|+
name|reservationId
argument_list|)
throw|;
block|}
name|String
index|[]
name|resFields
init|=
name|reservationId
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resFields
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The specified reservation id is not parseable: "
operator|+
name|reservationId
argument_list|)
throw|;
block|}
return|return
name|newInstance
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|resFields
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|resFields
index|[
literal|2
index|]
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// generated by eclipse
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|getClusterTimestamp
argument_list|()
operator|^
operator|(
name|getClusterTimestamp
argument_list|()
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|getId
argument_list|()
operator|^
operator|(
name|getId
argument_list|()
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// generated by eclipse
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ReservationId
name|other
init|=
operator|(
name|ReservationId
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getClusterTimestamp
argument_list|()
operator|!=
name|other
operator|.
name|getClusterTimestamp
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getId
argument_list|()
operator|!=
name|other
operator|.
name|getId
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

