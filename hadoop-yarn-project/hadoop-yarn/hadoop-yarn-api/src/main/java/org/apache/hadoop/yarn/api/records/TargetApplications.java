begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * This class is used by  * {@link AllocationTagNamespace#evaluate(TargetApplications)} to evaluate  * a namespace.  */
end_comment

begin_class
DECL|class|TargetApplications
specifier|public
class|class
name|TargetApplications
block|{
DECL|field|currentAppId
specifier|private
name|ApplicationId
name|currentAppId
decl_stmt|;
DECL|field|allAppIds
specifier|private
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|allAppIds
decl_stmt|;
DECL|method|TargetApplications (ApplicationId currentApplicationId, Set<ApplicationId> allApplicationIds)
specifier|public
name|TargetApplications
parameter_list|(
name|ApplicationId
name|currentApplicationId
parameter_list|,
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|allApplicationIds
parameter_list|)
block|{
name|this
operator|.
name|currentAppId
operator|=
name|currentApplicationId
expr_stmt|;
name|this
operator|.
name|allAppIds
operator|=
name|allApplicationIds
expr_stmt|;
block|}
DECL|method|getAllApplicationIds ()
specifier|public
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|getAllApplicationIds
parameter_list|()
block|{
return|return
name|this
operator|.
name|allAppIds
return|;
block|}
DECL|method|getCurrentApplicationId ()
specifier|public
name|ApplicationId
name|getCurrentApplicationId
parameter_list|()
block|{
return|return
name|this
operator|.
name|currentAppId
return|;
block|}
DECL|method|getOtherApplicationIds ()
specifier|public
name|Set
argument_list|<
name|ApplicationId
argument_list|>
name|getOtherApplicationIds
parameter_list|()
block|{
return|return
name|allAppIds
operator|==
literal|null
condition|?
literal|null
else|:
name|allAppIds
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|appId
lambda|->
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|getCurrentApplicationId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

