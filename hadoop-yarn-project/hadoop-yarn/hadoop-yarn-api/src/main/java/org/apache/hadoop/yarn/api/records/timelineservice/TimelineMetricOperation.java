begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Aggregation operations.  */
end_comment

begin_enum
DECL|enum|TimelineMetricOperation
specifier|public
enum|enum
name|TimelineMetricOperation
block|{
DECL|enumConstant|NOP
name|NOP
argument_list|(
literal|"NOP"
argument_list|)
block|{
comment|/**      * Do nothing on the base metric.      *      * @param incoming Metric a      * @param base Metric b      * @param state Operation state (not used)      * @return Metric b      */
annotation|@
name|Override
specifier|public
name|TimelineMetric
name|exec
parameter_list|(
name|TimelineMetric
name|incoming
parameter_list|,
name|TimelineMetric
name|base
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|state
parameter_list|)
block|{
return|return
name|base
return|;
block|}
block|}
block|,
DECL|enumConstant|MAX
name|MAX
argument_list|(
literal|"MAX"
argument_list|)
block|{
comment|/**      * Keep the greater value of incoming and base. Stateless operation.      *      * @param incoming Metric a      * @param base Metric b      * @param state Operation state (not used)      * @return the greater value of a and b      */
annotation|@
name|Override
specifier|public
name|TimelineMetric
name|exec
parameter_list|(
name|TimelineMetric
name|incoming
parameter_list|,
name|TimelineMetric
name|base
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|state
parameter_list|)
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
name|incoming
return|;
block|}
name|Number
name|incomingValue
init|=
name|incoming
operator|.
name|getSingleDataValue
argument_list|()
decl_stmt|;
name|Number
name|aggregateValue
init|=
name|base
operator|.
name|getSingleDataValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregateValue
operator|==
literal|null
condition|)
block|{
name|aggregateValue
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
if|if
condition|(
name|TimelineMetricCalculator
operator|.
name|compare
argument_list|(
name|incomingValue
argument_list|,
name|aggregateValue
argument_list|)
operator|>
literal|0
condition|)
block|{
name|base
operator|.
name|addValue
argument_list|(
name|incoming
operator|.
name|getSingleDataTimestamp
argument_list|()
argument_list|,
name|incomingValue
argument_list|)
expr_stmt|;
block|}
return|return
name|base
return|;
block|}
block|}
block|,
DECL|enumConstant|REPLACE
name|REPLACE
argument_list|(
literal|"REPLACE"
argument_list|)
block|{
comment|/**      * Replace the base metric with the incoming value. Stateless operation.      *      * @param incoming Metric a      * @param base Metric b      * @param state Operation state (not used)      * @return Metric a      */
annotation|@
name|Override
specifier|public
name|TimelineMetric
name|exec
parameter_list|(
name|TimelineMetric
name|incoming
parameter_list|,
name|TimelineMetric
name|base
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|state
parameter_list|)
block|{
return|return
name|incoming
return|;
block|}
block|}
block|,
DECL|enumConstant|SUM
name|SUM
argument_list|(
literal|"SUM"
argument_list|)
block|{
comment|/**      * Return the sum of the incoming metric and the base metric if the      * operation is stateless. For stateful operations, also subtract the      * value of the timeline metric mapped to the PREV_METRIC_STATE_KEY      * in the state object.      *      * @param incoming Metric a      * @param base Metric b      * @param state Operation state (PREV_METRIC_STATE_KEY's value as Metric p)      * @return A metric with value a + b - p      */
annotation|@
name|Override
specifier|public
name|TimelineMetric
name|exec
parameter_list|(
name|TimelineMetric
name|incoming
parameter_list|,
name|TimelineMetric
name|base
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|state
parameter_list|)
block|{
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
return|return
name|incoming
return|;
block|}
name|Number
name|incomingValue
init|=
name|incoming
operator|.
name|getSingleDataValue
argument_list|()
decl_stmt|;
name|Number
name|aggregateValue
init|=
name|base
operator|.
name|getSingleDataValue
argument_list|()
decl_stmt|;
name|Number
name|result
init|=
name|TimelineMetricCalculator
operator|.
name|sum
argument_list|(
name|incomingValue
argument_list|,
name|aggregateValue
argument_list|)
decl_stmt|;
comment|// If there are previous value in the state, we will take it off from the
comment|// sum
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|Object
name|prevMetric
init|=
name|state
operator|.
name|get
argument_list|(
name|PREV_METRIC_STATE_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevMetric
operator|instanceof
name|TimelineMetric
condition|)
block|{
name|result
operator|=
name|TimelineMetricCalculator
operator|.
name|sub
argument_list|(
name|result
argument_list|,
operator|(
operator|(
name|TimelineMetric
operator|)
name|prevMetric
operator|)
operator|.
name|getSingleDataValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|base
operator|.
name|addValue
argument_list|(
name|incoming
operator|.
name|getSingleDataTimestamp
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|base
return|;
block|}
block|}
block|,
DECL|enumConstant|AVG
name|AVG
argument_list|(
literal|"AVERAGE"
argument_list|)
block|{
comment|/**      * Return the average value of the incoming metric and the base metric,      * with a given state. Not supported yet.      *      * @param incoming Metric a      * @param base Metric b      * @param state Operation state      * @return Not finished yet      */
annotation|@
name|Override
specifier|public
name|TimelineMetric
name|exec
parameter_list|(
name|TimelineMetric
name|incoming
parameter_list|,
name|TimelineMetric
name|base
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|state
parameter_list|)
block|{
comment|// Not supported yet
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unsupported aggregation operation: AVERAGE"
argument_list|)
throw|;
block|}
block|}
block|;
DECL|field|PREV_METRIC_STATE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|PREV_METRIC_STATE_KEY
init|=
literal|"PREV_METRIC"
decl_stmt|;
comment|/**    * Perform the aggregation operation.    *    * @param incoming Incoming metric    * @param aggregate Base aggregation metric    * @param state Operation state    * @return Result metric for this aggregation operation    */
DECL|method|aggregate (TimelineMetric incoming, TimelineMetric aggregate, Map<Object, Object> state)
specifier|public
name|TimelineMetric
name|aggregate
parameter_list|(
name|TimelineMetric
name|incoming
parameter_list|,
name|TimelineMetric
name|aggregate
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|state
parameter_list|)
block|{
return|return
name|exec
argument_list|(
name|incoming
argument_list|,
name|aggregate
argument_list|,
name|state
argument_list|)
return|;
block|}
DECL|field|opName
specifier|private
specifier|final
name|String
name|opName
decl_stmt|;
DECL|method|TimelineMetricOperation (String opString)
name|TimelineMetricOperation
parameter_list|(
name|String
name|opString
parameter_list|)
block|{
name|opName
operator|=
name|opString
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|opName
return|;
block|}
DECL|method|exec (TimelineMetric incoming, TimelineMetric base, Map<Object, Object> state)
specifier|abstract
name|TimelineMetric
name|exec
parameter_list|(
name|TimelineMetric
name|incoming
parameter_list|,
name|TimelineMetric
name|base
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|state
parameter_list|)
function_decl|;
block|}
end_enum

end_unit

