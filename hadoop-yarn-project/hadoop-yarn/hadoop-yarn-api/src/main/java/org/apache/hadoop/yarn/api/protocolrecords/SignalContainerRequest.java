begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.protocolrecords
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SignalContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>The request sent by the client to the<code>ResourceManager</code>  * or by the<code>ApplicationMaster</code> to the<code>NodeManager</code>  * to signal a container.  * @see SignalContainerCommand</p>  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|SignalContainerRequest
specifier|public
specifier|abstract
class|class
name|SignalContainerRequest
block|{
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (ContainerId containerId, SignalContainerCommand signalContainerCommand)
specifier|public
specifier|static
name|SignalContainerRequest
name|newInstance
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|SignalContainerCommand
name|signalContainerCommand
parameter_list|)
block|{
name|SignalContainerRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SignalContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCommand
argument_list|(
name|signalContainerCommand
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Get the<code>ContainerId</code> of the container to signal.    * @return<code>ContainerId</code> of the container to signal.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getContainerId ()
specifier|public
specifier|abstract
name|ContainerId
name|getContainerId
parameter_list|()
function_decl|;
comment|/**    * Set the<code>ContainerId</code> of the container to signal.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setContainerId (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
function_decl|;
comment|/**    * Get the<code>SignalContainerCommand</code> of the signal request.    * @return<code>SignalContainerCommand</code> of the signal request.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getCommand ()
specifier|public
specifier|abstract
name|SignalContainerCommand
name|getCommand
parameter_list|()
function_decl|;
comment|/**    * Set the<code>SignalContainerCommand</code> of the signal request.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setCommand (SignalContainerCommand command)
specifier|public
specifier|abstract
name|void
name|setCommand
parameter_list|(
name|SignalContainerCommand
name|command
parameter_list|)
function_decl|;
block|}
end_class

end_unit

