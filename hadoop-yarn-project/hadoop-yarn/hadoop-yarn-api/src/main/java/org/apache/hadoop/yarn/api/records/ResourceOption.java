begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|ResourceOption
specifier|public
specifier|abstract
class|class
name|ResourceOption
block|{
DECL|method|newInstance (Resource resource, int overCommitTimeout)
specifier|public
specifier|static
name|ResourceOption
name|newInstance
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|int
name|overCommitTimeout
parameter_list|)
block|{
name|ResourceOption
name|resourceOption
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ResourceOption
operator|.
name|class
argument_list|)
decl_stmt|;
name|resourceOption
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|resourceOption
operator|.
name|setOverCommitTimeout
argument_list|(
name|overCommitTimeout
argument_list|)
expr_stmt|;
name|resourceOption
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|resourceOption
return|;
block|}
comment|/** Negative value means no timeout. */
DECL|field|OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT
specifier|public
specifier|static
specifier|final
name|int
name|OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Get the<em>resource</em> of the ResourceOption.    * @return<em>resource</em> of the ResourceOption    */
annotation|@
name|Private
annotation|@
name|Evolving
DECL|method|getResource ()
specifier|public
specifier|abstract
name|Resource
name|getResource
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Evolving
DECL|method|setResource (Resource resource)
specifier|protected
specifier|abstract
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
function_decl|;
comment|/**    * Get timeout for tolerant of resource over-commitment    * Note: negative value means no timeout so that allocated containers will    * keep running until the end even under resource over-commitment cases.    * @return<em>overCommitTimeout</em> of the ResourceOption    */
annotation|@
name|Private
annotation|@
name|Evolving
DECL|method|getOverCommitTimeout ()
specifier|public
specifier|abstract
name|int
name|getOverCommitTimeout
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Evolving
DECL|method|setOverCommitTimeout (int overCommitTimeout)
specifier|protected
specifier|abstract
name|void
name|setOverCommitTimeout
parameter_list|(
name|int
name|overCommitTimeout
parameter_list|)
function_decl|;
annotation|@
name|Private
annotation|@
name|Evolving
DECL|method|build ()
specifier|protected
specifier|abstract
name|void
name|build
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Resource:"
operator|+
name|getResource
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", overCommitTimeout:"
operator|+
name|getOverCommitTimeout
argument_list|()
return|;
block|}
block|}
end_class

end_unit

