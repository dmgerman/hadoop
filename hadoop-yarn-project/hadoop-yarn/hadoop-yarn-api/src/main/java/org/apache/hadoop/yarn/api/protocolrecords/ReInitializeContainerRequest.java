begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.protocolrecords
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * This encapsulates all the required fields needed for a Container  * ReInitialization.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ReInitializeContainerRequest
specifier|public
specifier|abstract
class|class
name|ReInitializeContainerRequest
block|{
comment|/**    * Creates a new instance of the ReInitializationContainerRequest.    * @param containerId Container Id.    * @param containerLaunchContext Container Launch Context.    * @param autoCommit AutoCommit.    * @return ReInitializationContainerRequest.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance ( ContainerId containerId, ContainerLaunchContext containerLaunchContext, boolean autoCommit)
specifier|public
specifier|static
name|ReInitializeContainerRequest
name|newInstance
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|,
name|boolean
name|autoCommit
parameter_list|)
block|{
name|ReInitializeContainerRequest
name|record
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ReInitializeContainerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|record
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|record
operator|.
name|setContainerLaunchContext
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|record
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
comment|/**    * Get the<code>ContainerId</code> of the container to re-initialize.    *    * @return<code>ContainerId</code> of the container to re-initialize.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getContainerId ()
specifier|public
specifier|abstract
name|ContainerId
name|getContainerId
parameter_list|()
function_decl|;
comment|/**    * Set the<code>ContainerId</code> of the container to re-initialize.    * @param containerId the containerId of the container.    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setContainerId (ContainerId containerId)
specifier|public
specifier|abstract
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
function_decl|;
comment|/**    * Get the<code>ContainerLaunchContext</code> to re-initialize the container    * with.    *    * @return<code>ContainerLaunchContext</code> of to re-initialize the    * container with.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getContainerLaunchContext ()
specifier|public
specifier|abstract
name|ContainerLaunchContext
name|getContainerLaunchContext
parameter_list|()
function_decl|;
comment|/**    * Set the<code>ContainerLaunchContext</code> to re-initialize the container    * with.    * @param containerLaunchContext the Launch Context.    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setContainerLaunchContext ( ContainerLaunchContext containerLaunchContext)
specifier|public
specifier|abstract
name|void
name|setContainerLaunchContext
parameter_list|(
name|ContainerLaunchContext
name|containerLaunchContext
parameter_list|)
function_decl|;
comment|/**    * Check if AutoCommit is set for this ReInitialization.    * @return If AutoCommit is set for this ReInitialization.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAutoCommit ()
specifier|public
specifier|abstract
name|boolean
name|getAutoCommit
parameter_list|()
function_decl|;
comment|/**    * Set AutoCommit flag for this ReInitialization.    * @param autoCommit Auto Commit.    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setAutoCommit (boolean autoCommit)
specifier|public
specifier|abstract
name|void
name|setAutoCommit
parameter_list|(
name|boolean
name|autoCommit
parameter_list|)
function_decl|;
block|}
end_class

end_unit

