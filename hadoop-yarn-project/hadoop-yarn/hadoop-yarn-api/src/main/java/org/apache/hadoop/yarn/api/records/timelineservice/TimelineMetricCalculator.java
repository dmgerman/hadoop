begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_comment
comment|/**  * A calculator for timeline metrics.  */
end_comment

begin_class
DECL|class|TimelineMetricCalculator
specifier|public
specifier|final
class|class
name|TimelineMetricCalculator
block|{
DECL|method|TimelineMetricCalculator ()
specifier|private
name|TimelineMetricCalculator
parameter_list|()
block|{
comment|// do nothing.
block|}
comment|/**    * Compare two not-null numbers.    * @param n1 Number n1    * @param n2 Number n2    * @return 0 if n1 equals n2, a negative int if n1 is less than n2, a    * positive int otherwise.    */
DECL|method|compare (Number n1, Number n2)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Number
name|n1
parameter_list|,
name|Number
name|n2
parameter_list|)
block|{
if|if
condition|(
name|n1
operator|==
literal|null
operator|||
name|n2
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Number to be compared shouldn't be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|n1
operator|instanceof
name|Integer
operator|||
name|n1
operator|instanceof
name|Long
condition|)
block|{
if|if
condition|(
name|n1
operator|.
name|longValue
argument_list|()
operator|==
name|n2
operator|.
name|longValue
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
name|n1
operator|.
name|longValue
argument_list|()
operator|<
name|n2
operator|.
name|longValue
argument_list|()
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
if|if
condition|(
name|n1
operator|instanceof
name|Float
operator|||
name|n1
operator|instanceof
name|Double
condition|)
block|{
if|if
condition|(
name|n1
operator|.
name|doubleValue
argument_list|()
operator|==
name|n2
operator|.
name|doubleValue
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
name|n1
operator|.
name|doubleValue
argument_list|()
operator|<
name|n2
operator|.
name|doubleValue
argument_list|()
operator|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
comment|// TODO throw warnings/exceptions for other types of number.
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unsupported types for number comparison: "
operator|+
name|n1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|n2
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Subtract operation between two Numbers.    * @param n1 Number n1    * @param n2 Number n2    * @return Number represent to (n1 - n2).    */
DECL|method|sub (Number n1, Number n2)
specifier|public
specifier|static
name|Number
name|sub
parameter_list|(
name|Number
name|n1
parameter_list|,
name|Number
name|n2
parameter_list|)
block|{
if|if
condition|(
name|n1
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Number to be subtracted shouldn't be null."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|n2
operator|==
literal|null
condition|)
block|{
return|return
name|n1
return|;
block|}
if|if
condition|(
name|n1
operator|instanceof
name|Integer
operator|||
name|n1
operator|instanceof
name|Long
condition|)
block|{
return|return
name|n1
operator|.
name|longValue
argument_list|()
operator|-
name|n2
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|n1
operator|instanceof
name|Float
operator|||
name|n1
operator|instanceof
name|Double
condition|)
block|{
return|return
name|n1
operator|.
name|doubleValue
argument_list|()
operator|-
name|n2
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|// TODO throw warnings/exceptions for other types of number.
return|return
literal|null
return|;
block|}
comment|/**    * Sum up two Numbers.    * @param n1 Number n1    * @param n2 Number n2    * @return Number represent to (n1 + n2).    */
DECL|method|sum (Number n1, Number n2)
specifier|public
specifier|static
name|Number
name|sum
parameter_list|(
name|Number
name|n1
parameter_list|,
name|Number
name|n2
parameter_list|)
block|{
if|if
condition|(
name|n1
operator|==
literal|null
condition|)
block|{
return|return
name|n2
return|;
block|}
elseif|else
if|if
condition|(
name|n2
operator|==
literal|null
condition|)
block|{
return|return
name|n1
return|;
block|}
if|if
condition|(
name|n1
operator|instanceof
name|Integer
operator|||
name|n1
operator|instanceof
name|Long
condition|)
block|{
return|return
name|n1
operator|.
name|longValue
argument_list|()
operator|+
name|n2
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|n1
operator|instanceof
name|Float
operator|||
name|n1
operator|instanceof
name|Double
condition|)
block|{
return|return
name|n1
operator|.
name|doubleValue
argument_list|()
operator|+
name|n2
operator|.
name|doubleValue
argument_list|()
return|;
block|}
comment|// TODO throw warnings/exceptions for other types of number.
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

