begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReleaseSharedCacheResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReleaseSharedCacheResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UseSharedCacheResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UseSharedCacheResourceResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_comment
comment|/**  *<p>  * The protocol between clients and the<code>SharedCacheManager</code> to claim  * and release resources in the shared cache.  *</p>  */
end_comment

begin_interface
annotation|@
name|Public
annotation|@
name|Unstable
DECL|interface|ClientSCMProtocol
specifier|public
interface|interface
name|ClientSCMProtocol
block|{
comment|/**    *<p>    * The interface used by clients to claim a resource with the    *<code>SharedCacheManager.</code> The client uses a checksum to identify the    * resource and an {@link ApplicationId} to identify which application will be    * using the resource.    *</p>    *    *<p>    * The<code>SharedCacheManager</code> responds with whether or not the    * resource exists in the cache. If the resource exists, a<code>Path</code>    * to the resource in the shared cache is returned. If the resource does not    * exist, the response is empty.    *</p>    *    * @param request request to claim a resource in the shared cache    * @return response indicating if the resource is already in the cache    * @throws YarnException    * @throws IOException    */
DECL|method|use ( UseSharedCacheResourceRequest request)
specifier|public
name|UseSharedCacheResourceResponse
name|use
parameter_list|(
name|UseSharedCacheResourceRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
comment|/**    *<p>    * The interface used by clients to release a resource with the    *<code>SharedCacheManager.</code> This method is called once an application    * is no longer using a claimed resource in the shared cache. The client uses    * a checksum to identify the resource and an {@link ApplicationId} to    * identify which application is releasing the resource.    *</p>    *    *<p>    * Note: This method is an optimization and the client is not required to call    * it for correctness.    *</p>    *    *<p>    * Currently the<code>SharedCacheManager</code> sends an empty response.    *</p>    *    * @param request request to release a resource in the shared cache    * @return (empty) response on releasing the resource    * @throws YarnException    * @throws IOException    */
DECL|method|release ( ReleaseSharedCacheResourceRequest request)
specifier|public
name|ReleaseSharedCacheResourceResponse
name|release
parameter_list|(
name|ReleaseSharedCacheResourceRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
function_decl|;
block|}
end_interface

end_unit

