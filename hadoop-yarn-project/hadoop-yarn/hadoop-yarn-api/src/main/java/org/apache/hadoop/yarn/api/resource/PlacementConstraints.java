begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeOpCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|AbstractConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|And
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|DelayedOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|Or
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|SingleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TargetExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TargetExpression
operator|.
name|TargetType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TimedPlacementConstraint
import|;
end_import

begin_comment
comment|/**  * This class contains various static methods for the applications to create  * placement constraints (see also {@link PlacementConstraint}).  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|PlacementConstraints
specifier|public
specifier|final
class|class
name|PlacementConstraints
block|{
comment|// Suppresses default constructor, ensuring non-instantiability.
DECL|method|PlacementConstraints ()
specifier|private
name|PlacementConstraints
parameter_list|()
block|{   }
comment|// Creation of simple constraints.
DECL|field|NODE
specifier|public
specifier|static
specifier|final
name|String
name|NODE
init|=
name|PlacementConstraint
operator|.
name|NODE_SCOPE
decl_stmt|;
DECL|field|RACK
specifier|public
specifier|static
specifier|final
name|String
name|RACK
init|=
name|PlacementConstraint
operator|.
name|RACK_SCOPE
decl_stmt|;
DECL|field|NODE_PARTITION
specifier|public
specifier|static
specifier|final
name|String
name|NODE_PARTITION
init|=
literal|"yarn_node_partition/"
decl_stmt|;
comment|/**    * Creates a constraint that requires allocations to be placed on nodes that    * satisfy all target expressions within the given scope (e.g., node or rack).    *    * For example, {@code targetIn(RACK, allocationTag("hbase-m"))}, allows    * allocations on nodes that belong to a rack that has at least one tag with    * value "hbase-m".    *    * @param scope the scope within which the target expressions should be    *          satisfied    * @param targetExpressions the expressions that need to be satisfied within    *          the scope    * @return the resulting placement constraint    */
DECL|method|targetIn (String scope, TargetExpression... targetExpressions)
specifier|public
specifier|static
name|AbstractConstraint
name|targetIn
parameter_list|(
name|String
name|scope
parameter_list|,
name|TargetExpression
modifier|...
name|targetExpressions
parameter_list|)
block|{
return|return
operator|new
name|SingleConstraint
argument_list|(
name|scope
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|targetExpressions
argument_list|)
return|;
block|}
comment|/**    * Creates a constraint that requires allocations to be placed on nodes that    * belong to a scope (e.g., node or rack) that does not satisfy any of the    * target expressions.    *    * @param scope the scope within which the target expressions should not be    *          true    * @param targetExpressions the expressions that need to not be true within    *          the scope    * @return the resulting placement constraint    */
DECL|method|targetNotIn (String scope, TargetExpression... targetExpressions)
specifier|public
specifier|static
name|AbstractConstraint
name|targetNotIn
parameter_list|(
name|String
name|scope
parameter_list|,
name|TargetExpression
modifier|...
name|targetExpressions
parameter_list|)
block|{
return|return
operator|new
name|SingleConstraint
argument_list|(
name|scope
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|targetExpressions
argument_list|)
return|;
block|}
comment|/**    * Creates a constraint that requires allocations to be placed on nodes that    * belong to a scope (e.g., node or rack) that satisfy any of the    * target expressions based on node attribute op code.    *    * @param scope the scope within which the target expressions should not be    *          true    * @param opCode Node Attribute code which could be equals, not equals.    * @param targetExpressions the expressions that need to not be true within    *          the scope    * @return the resulting placement constraint    */
DECL|method|targetNodeAttribute (String scope, NodeAttributeOpCode opCode, TargetExpression... targetExpressions)
specifier|public
specifier|static
name|AbstractConstraint
name|targetNodeAttribute
parameter_list|(
name|String
name|scope
parameter_list|,
name|NodeAttributeOpCode
name|opCode
parameter_list|,
name|TargetExpression
modifier|...
name|targetExpressions
parameter_list|)
block|{
return|return
operator|new
name|SingleConstraint
argument_list|(
name|scope
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|opCode
argument_list|,
name|targetExpressions
argument_list|)
return|;
block|}
comment|/**    * Creates a constraint that restricts the number of allocations within a    * given scope (e.g., node or rack).    *    * For example, {@code cardinality(NODE, 3, 10, "zk")} is satisfied on nodes    * where there are no less than 3 allocations with tag "zk" and no more than    * 10.    *    * @param scope the scope of the constraint    * @param minCardinality determines the minimum number of allocations within    *          the scope    * @param maxCardinality determines the maximum number of allocations within    *          the scope    * @param allocationTags the constraint targets allocations with these tags    * @return the resulting placement constraint    */
DECL|method|cardinality (String scope, int minCardinality, int maxCardinality, String... allocationTags)
specifier|public
specifier|static
name|AbstractConstraint
name|cardinality
parameter_list|(
name|String
name|scope
parameter_list|,
name|int
name|minCardinality
parameter_list|,
name|int
name|maxCardinality
parameter_list|,
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
operator|new
name|SingleConstraint
argument_list|(
name|scope
argument_list|,
name|minCardinality
argument_list|,
name|maxCardinality
argument_list|,
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
name|allocationTags
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Similar to {@link #cardinality(String, int, int, String...)}, but let you    * attach a namespace to the given allocation tags.    *    * @param scope the scope of the constraint    * @param namespace the namespace of the allocation tags    * @param minCardinality determines the minimum number of allocations within    *                       the scope    * @param maxCardinality determines the maximum number of allocations within    *                       the scope    * @param allocationTags allocation tags    * @return the resulting placement constraint    */
DECL|method|cardinality (String scope, String namespace, int minCardinality, int maxCardinality, String... allocationTags)
specifier|public
specifier|static
name|AbstractConstraint
name|cardinality
parameter_list|(
name|String
name|scope
parameter_list|,
name|String
name|namespace
parameter_list|,
name|int
name|minCardinality
parameter_list|,
name|int
name|maxCardinality
parameter_list|,
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
operator|new
name|SingleConstraint
argument_list|(
name|scope
argument_list|,
name|minCardinality
argument_list|,
name|maxCardinality
argument_list|,
name|PlacementTargets
operator|.
name|allocationTagWithNamespace
argument_list|(
name|namespace
argument_list|,
name|allocationTags
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Similar to {@link #cardinality(String, int, int, String...)}, but    * determines only the minimum cardinality (the maximum cardinality is    * unbound).    *    * @param scope the scope of the constraint    * @param minCardinality determines the minimum number of allocations within    *          the scope    * @param allocationTags the constraint targets allocations with these tags    * @return the resulting placement constraint    */
DECL|method|minCardinality (String scope, int minCardinality, String... allocationTags)
specifier|public
specifier|static
name|AbstractConstraint
name|minCardinality
parameter_list|(
name|String
name|scope
parameter_list|,
name|int
name|minCardinality
parameter_list|,
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
name|cardinality
argument_list|(
name|scope
argument_list|,
name|minCardinality
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|allocationTags
argument_list|)
return|;
block|}
comment|/**    * Similar to {@link #minCardinality(String, int, String...)}, but let you    * attach a namespace to the allocation tags.    *    * @param scope the scope of the constraint    * @param namespace the namespace of these tags    * @param minCardinality determines the minimum number of allocations within    *                       the scope    * @param allocationTags the constraint targets allocations with these tags    * @return the resulting placement constraint    */
DECL|method|minCardinality (String scope, String namespace, int minCardinality, String... allocationTags)
specifier|public
specifier|static
name|AbstractConstraint
name|minCardinality
parameter_list|(
name|String
name|scope
parameter_list|,
name|String
name|namespace
parameter_list|,
name|int
name|minCardinality
parameter_list|,
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
name|cardinality
argument_list|(
name|scope
argument_list|,
name|namespace
argument_list|,
name|minCardinality
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|allocationTags
argument_list|)
return|;
block|}
comment|/**    * Similar to {@link #cardinality(String, int, int, String...)}, but    * determines only the maximum cardinality (the minimum cardinality is 0).    *    * @param scope the scope of the constraint    * @param maxCardinality determines the maximum number of allocations within    *          the scope    * @param allocationTags the constraint targets allocations with these tags    * @return the resulting placement constraint    */
DECL|method|maxCardinality (String scope, int maxCardinality, String... allocationTags)
specifier|public
specifier|static
name|AbstractConstraint
name|maxCardinality
parameter_list|(
name|String
name|scope
parameter_list|,
name|int
name|maxCardinality
parameter_list|,
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
name|cardinality
argument_list|(
name|scope
argument_list|,
literal|0
argument_list|,
name|maxCardinality
argument_list|,
name|allocationTags
argument_list|)
return|;
block|}
comment|/**    * Similar to {@link #maxCardinality(String, int, String...)}, but let you    * specify a namespace for the tags, see supported namespaces in    * {@link AllocationTagNamespaceType}.    *    * @param scope the scope of the constraint    * @param tagNamespace the namespace of these tags    * @param maxCardinality determines the maximum number of allocations within    *          the scope    * @param allocationTags allocation tags    * @return the resulting placement constraint    */
DECL|method|maxCardinality (String scope, String tagNamespace, int maxCardinality, String... allocationTags)
specifier|public
specifier|static
name|AbstractConstraint
name|maxCardinality
parameter_list|(
name|String
name|scope
parameter_list|,
name|String
name|tagNamespace
parameter_list|,
name|int
name|maxCardinality
parameter_list|,
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
name|cardinality
argument_list|(
name|scope
argument_list|,
name|tagNamespace
argument_list|,
literal|0
argument_list|,
name|maxCardinality
argument_list|,
name|allocationTags
argument_list|)
return|;
block|}
comment|/**    * This constraint generalizes the cardinality and target constraints.    *    * Consider a set of nodes N that belongs to the scope specified in the    * constraint. If the target expressions are satisfied at least minCardinality    * times and at most maxCardinality times in the node set N, then the    * constraint is satisfied.    *    * For example, {@code targetCardinality(RACK, 2, 10, allocationTag("zk"))},    * requires an allocation to be placed within a rack that has at least 2 and    * at most 10 other allocations with tag "zk".    *    * @param scope the scope of the constraint    * @param minCardinality the minimum number of times the target expressions    *          have to be satisfied with the given scope    * @param maxCardinality the maximum number of times the target expressions    *          have to be satisfied with the given scope    * @param targetExpressions the target expressions    * @return the resulting placement constraint    */
DECL|method|targetCardinality (String scope, int minCardinality, int maxCardinality, TargetExpression... targetExpressions)
specifier|public
specifier|static
name|AbstractConstraint
name|targetCardinality
parameter_list|(
name|String
name|scope
parameter_list|,
name|int
name|minCardinality
parameter_list|,
name|int
name|maxCardinality
parameter_list|,
name|TargetExpression
modifier|...
name|targetExpressions
parameter_list|)
block|{
return|return
operator|new
name|SingleConstraint
argument_list|(
name|scope
argument_list|,
name|minCardinality
argument_list|,
name|maxCardinality
argument_list|,
name|targetExpressions
argument_list|)
return|;
block|}
comment|// Creation of target expressions to be used in simple constraints.
comment|/**    * Class with static methods for constructing target expressions to be used in    * placement constraints.    */
DECL|class|PlacementTargets
specifier|public
specifier|static
class|class
name|PlacementTargets
block|{
comment|/**      * Constructs a target expression on a node attribute. It is satisfied if      * the specified node attribute has one of the specified values.      *      * @param attributeKey the name of the node attribute      * @param attributeValues the set of values that the attribute should take      *          values from      * @return the resulting expression on the node attribute      */
DECL|method|nodeAttribute (String attributeKey, String... attributeValues)
specifier|public
specifier|static
name|TargetExpression
name|nodeAttribute
parameter_list|(
name|String
name|attributeKey
parameter_list|,
name|String
modifier|...
name|attributeValues
parameter_list|)
block|{
return|return
operator|new
name|TargetExpression
argument_list|(
name|TargetType
operator|.
name|NODE_ATTRIBUTE
argument_list|,
name|attributeKey
argument_list|,
name|attributeValues
argument_list|)
return|;
block|}
comment|/**      * Constructs a target expression on a node partition. It is satisfied if      * the specified node partition has one of the specified nodePartitions.      *      * @param nodePartitions the set of values that the attribute should take      *          values from      * @return the resulting expression on the node attribute      */
DECL|method|nodePartition ( String... nodePartitions)
specifier|public
specifier|static
name|TargetExpression
name|nodePartition
parameter_list|(
name|String
modifier|...
name|nodePartitions
parameter_list|)
block|{
return|return
operator|new
name|TargetExpression
argument_list|(
name|TargetType
operator|.
name|NODE_ATTRIBUTE
argument_list|,
name|NODE_PARTITION
argument_list|,
name|nodePartitions
argument_list|)
return|;
block|}
comment|/**      * Constructs a target expression on an allocation tag. It is satisfied if      * there are allocations with one of the given tags. The default namespace      * for these tags is {@link AllocationTagNamespaceType#SELF}, this only      * checks tags within the application.      *      * @param allocationTags the set of tags that the attribute should take      *          values from      * @return the resulting expression on the allocation tags      */
DECL|method|allocationTag (String... allocationTags)
specifier|public
specifier|static
name|TargetExpression
name|allocationTag
parameter_list|(
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
name|allocationTagWithNamespace
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|SELF
operator|.
name|toString
argument_list|()
argument_list|,
name|allocationTags
argument_list|)
return|;
block|}
comment|/**      * Constructs a target expression on a set of allocation tags under      * a certain namespace.      *      * @param namespace namespace of the allocation tags      * @param allocationTags allocation tags      * @return a target expression      */
DECL|method|allocationTagWithNamespace (String namespace, String... allocationTags)
specifier|public
specifier|static
name|TargetExpression
name|allocationTagWithNamespace
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
modifier|...
name|allocationTags
parameter_list|)
block|{
return|return
operator|new
name|TargetExpression
argument_list|(
name|TargetType
operator|.
name|ALLOCATION_TAG
argument_list|,
name|namespace
argument_list|,
name|allocationTags
argument_list|)
return|;
block|}
block|}
comment|// Creation of compound constraints.
comment|/**    * A conjunction of constraints.    *    * @param children the children constraints that should all be satisfied    * @return the resulting placement constraint    */
DECL|method|and (AbstractConstraint... children)
specifier|public
specifier|static
name|And
name|and
parameter_list|(
name|AbstractConstraint
modifier|...
name|children
parameter_list|)
block|{
return|return
operator|new
name|And
argument_list|(
name|children
argument_list|)
return|;
block|}
comment|/**    * A disjunction of constraints.    *    * @param children the children constraints, one of which should be satisfied    * @return the resulting placement constraint    */
DECL|method|or (AbstractConstraint... children)
specifier|public
specifier|static
name|Or
name|or
parameter_list|(
name|AbstractConstraint
modifier|...
name|children
parameter_list|)
block|{
return|return
operator|new
name|Or
argument_list|(
name|children
argument_list|)
return|;
block|}
comment|/**    * Creates a composite constraint that includes a list of timed placement    * constraints. The scheduler should try to satisfy first the first timed    * child constraint within the specified time window. If this is not possible,    * it should attempt to satisfy the second, and so on.    *    * @param children the timed children constraints    * @return the resulting composite constraint    */
DECL|method|delayedOr (TimedPlacementConstraint... children)
specifier|public
specifier|static
name|DelayedOr
name|delayedOr
parameter_list|(
name|TimedPlacementConstraint
modifier|...
name|children
parameter_list|)
block|{
return|return
operator|new
name|DelayedOr
argument_list|(
name|children
argument_list|)
return|;
block|}
comment|// Creation of timed constraints to be used in a DELAYED_OR constraint.
comment|/**    * Creates a placement constraint that has to be satisfied within a time    * window.    *    * @param constraint the placement constraint    * @param delay the length of the time window within which the constraint has    *          to be satisfied    * @param timeUnit the unit of time of the time window    * @return the resulting timed placement constraint    */
DECL|method|timedClockConstraint ( AbstractConstraint constraint, long delay, TimeUnit timeUnit)
specifier|public
specifier|static
name|TimedPlacementConstraint
name|timedClockConstraint
parameter_list|(
name|AbstractConstraint
name|constraint
parameter_list|,
name|long
name|delay
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
block|{
return|return
operator|new
name|TimedPlacementConstraint
argument_list|(
name|constraint
argument_list|,
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|delay
argument_list|)
argument_list|,
name|TimedPlacementConstraint
operator|.
name|DelayUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
comment|/**    * Creates a placement constraint that has to be satisfied within a number of    * placement opportunities (invocations of the scheduler).    *    * @param constraint the placement constraint    * @param delay the number of scheduling opportunities within which the    *          constraint has to be satisfied    * @return the resulting timed placement constraint    */
DECL|method|timedOpportunitiesConstraint ( AbstractConstraint constraint, long delay)
specifier|public
specifier|static
name|TimedPlacementConstraint
name|timedOpportunitiesConstraint
parameter_list|(
name|AbstractConstraint
name|constraint
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
return|return
operator|new
name|TimedPlacementConstraint
argument_list|(
name|constraint
argument_list|,
name|delay
argument_list|,
name|TimedPlacementConstraint
operator|.
name|DelayUnit
operator|.
name|OPPORTUNITIES
argument_list|)
return|;
block|}
comment|/**    * Creates a {@link PlacementConstraint} given a constraint expression.    *    * @param constraintExpr the constraint expression    * @return the placement constraint    */
DECL|method|build (AbstractConstraint constraintExpr)
specifier|public
specifier|static
name|PlacementConstraint
name|build
parameter_list|(
name|AbstractConstraint
name|constraintExpr
parameter_list|)
block|{
return|return
name|constraintExpr
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

