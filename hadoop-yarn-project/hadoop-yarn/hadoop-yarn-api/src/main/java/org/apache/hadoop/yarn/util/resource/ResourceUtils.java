begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|ConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|ConfigurationProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Helper class to read the resource-types to be supported by the system.  */
end_comment

begin_class
DECL|class|ResourceUtils
specifier|public
class|class
name|ResourceUtils
block|{
DECL|field|UNITS
specifier|public
specifier|static
specifier|final
name|String
name|UNITS
init|=
literal|".units"
decl_stmt|;
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|String
name|TYPE
init|=
literal|".type"
decl_stmt|;
DECL|field|MINIMUM_ALLOCATION
specifier|public
specifier|static
specifier|final
name|String
name|MINIMUM_ALLOCATION
init|=
literal|".minimum-allocation"
decl_stmt|;
DECL|field|MAXIMUM_ALLOCATION
specifier|public
specifier|static
specifier|final
name|String
name|MAXIMUM_ALLOCATION
init|=
literal|".maximum-allocation"
decl_stmt|;
DECL|field|MEMORY
specifier|private
specifier|static
specifier|final
name|String
name|MEMORY
init|=
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|VCORES
specifier|private
specifier|static
specifier|final
name|String
name|VCORES
init|=
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|RESOURCE_REQUEST_VALUE_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|RESOURCE_REQUEST_VALUE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9]+) ?([a-zA-Z]*)$"
argument_list|)
decl_stmt|;
DECL|field|initializedResources
specifier|private
specifier|static
specifier|volatile
name|boolean
name|initializedResources
init|=
literal|false
decl_stmt|;
DECL|field|RESOURCE_NAME_TO_INDEX
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|RESOURCE_NAME_TO_INDEX
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|resourceTypes
specifier|private
specifier|static
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|resourceTypes
decl_stmt|;
DECL|field|resourceTypesArray
specifier|private
specifier|static
specifier|volatile
name|ResourceInformation
index|[]
name|resourceTypesArray
decl_stmt|;
DECL|field|initializedNodeResources
specifier|private
specifier|static
specifier|volatile
name|boolean
name|initializedNodeResources
init|=
literal|false
decl_stmt|;
DECL|field|readOnlyNodeResources
specifier|private
specifier|static
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|readOnlyNodeResources
decl_stmt|;
DECL|field|numKnownResourceTypes
specifier|private
specifier|static
specifier|volatile
name|int
name|numKnownResourceTypes
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResourceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|ResourceUtils ()
specifier|private
name|ResourceUtils
parameter_list|()
block|{   }
DECL|method|checkMandatoryResources ( Map<String, ResourceInformation> resourceInformationMap)
specifier|private
specifier|static
name|void
name|checkMandatoryResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|resourceInformationMap
parameter_list|)
throws|throws
name|YarnRuntimeException
block|{
comment|/*      * Supporting 'memory' also as invalid resource name, in addition to      * 'MEMORY' for historical reasons      */
name|String
name|key
init|=
literal|"memory"
decl_stmt|;
if|if
condition|(
name|resourceInformationMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Attempt to define resource '"
operator|+
name|key
operator|+
literal|"', but it is not allowed."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Attempt to re-define mandatory resource '"
operator|+
name|key
operator|+
literal|"'."
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|mandatoryResourceEntry
range|:
name|ResourceInformation
operator|.
name|MANDATORY_RESOURCES
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|key
operator|=
name|mandatoryResourceEntry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|ResourceInformation
name|mandatoryRI
init|=
name|mandatoryResourceEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ResourceInformation
name|newDefinedRI
init|=
name|resourceInformationMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|newDefinedRI
operator|!=
literal|null
condition|)
block|{
name|String
name|expectedUnit
init|=
name|mandatoryRI
operator|.
name|getUnits
argument_list|()
decl_stmt|;
name|ResourceTypes
name|expectedType
init|=
name|mandatoryRI
operator|.
name|getResourceType
argument_list|()
decl_stmt|;
name|String
name|actualUnit
init|=
name|newDefinedRI
operator|.
name|getUnits
argument_list|()
decl_stmt|;
name|ResourceTypes
name|actualType
init|=
name|newDefinedRI
operator|.
name|getResourceType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expectedUnit
operator|.
name|equals
argument_list|(
name|actualUnit
argument_list|)
operator|||
operator|!
name|expectedType
operator|.
name|equals
argument_list|(
name|actualType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Defined mandatory resource type="
operator|+
name|key
operator|+
literal|" inside resource-types.xml, however its type or "
operator|+
literal|"unit is conflict to mandatory resource types, expected type="
operator|+
name|expectedType
operator|+
literal|", unit="
operator|+
name|expectedUnit
operator|+
literal|"; actual type="
operator|+
name|actualType
operator|+
literal|" actual unit="
operator|+
name|actualUnit
argument_list|)
throw|;
block|}
block|}
block|}
block|}
DECL|method|addMandatoryResources ( Map<String, ResourceInformation> res)
specifier|private
specifier|static
name|void
name|addMandatoryResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|res
parameter_list|)
block|{
name|ResourceInformation
name|ri
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|containsKey
argument_list|(
name|MEMORY
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding resource type - name = "
operator|+
name|MEMORY
operator|+
literal|", units = "
operator|+
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
operator|+
literal|", type = "
operator|+
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|)
expr_stmt|;
block|}
name|ri
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|MEMORY
argument_list|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|put
argument_list|(
name|MEMORY
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|res
operator|.
name|containsKey
argument_list|(
name|VCORES
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding resource type - name = "
operator|+
name|VCORES
operator|+
literal|", units = , type = "
operator|+
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|)
expr_stmt|;
block|}
name|ri
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|VCORES
argument_list|)
expr_stmt|;
name|res
operator|.
name|put
argument_list|(
name|VCORES
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setMinimumAllocationForMandatoryResources ( Map<String, ResourceInformation> res, Configuration conf)
specifier|private
specifier|static
name|void
name|setMinimumAllocationForMandatoryResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|res
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
index|[]
name|resourceTypesKeys
init|=
block|{
block|{
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
block|,
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
block|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
block|}
block|,
block|{
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
block|,
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
block|,
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
name|arr
range|:
name|resourceTypesKeys
control|)
block|{
name|String
name|resourceTypesKey
init|=
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|arr
index|[
literal|0
index|]
operator|+
name|MINIMUM_ALLOCATION
decl_stmt|;
name|long
name|minimumResourceTypes
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|resourceTypesKey
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|minimumConf
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|arr
index|[
literal|1
index|]
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|minimum
decl_stmt|;
if|if
condition|(
name|minimumResourceTypes
operator|!=
operator|-
literal|1
condition|)
block|{
name|minimum
operator|=
name|minimumResourceTypes
expr_stmt|;
if|if
condition|(
name|minimumConf
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using minimum allocation for memory specified in "
operator|+
literal|"resource-types config file with key "
operator|+
name|minimumResourceTypes
operator|+
literal|", ignoring minimum specified using "
operator|+
name|arr
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|minimum
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|arr
index|[
literal|1
index|]
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|arr
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResourceInformation
name|ri
init|=
name|res
operator|.
name|get
argument_list|(
name|arr
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|ri
operator|.
name|setMinimumAllocation
argument_list|(
name|minimum
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setMaximumAllocationForMandatoryResources ( Map<String, ResourceInformation> res, Configuration conf)
specifier|private
specifier|static
name|void
name|setMaximumAllocationForMandatoryResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|res
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
index|[]
index|[]
name|resourceTypesKeys
init|=
block|{
block|{
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
block|,
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
block|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
block|}
block|,
block|{
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
block|,
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
block|,
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
name|arr
range|:
name|resourceTypesKeys
control|)
block|{
name|String
name|resourceTypesKey
init|=
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|arr
index|[
literal|0
index|]
operator|+
name|MAXIMUM_ALLOCATION
decl_stmt|;
name|long
name|maximumResourceTypes
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|resourceTypesKey
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|maximumConf
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|arr
index|[
literal|1
index|]
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|maximum
decl_stmt|;
if|if
condition|(
name|maximumResourceTypes
operator|!=
operator|-
literal|1
condition|)
block|{
name|maximum
operator|=
name|maximumResourceTypes
expr_stmt|;
if|if
condition|(
name|maximumConf
operator|!=
operator|-
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using maximum allocation for memory specified in "
operator|+
literal|"resource-types config file with key "
operator|+
name|maximumResourceTypes
operator|+
literal|", ignoring maximum specified using "
operator|+
name|arr
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|maximum
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|arr
index|[
literal|1
index|]
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|arr
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResourceInformation
name|ri
init|=
name|res
operator|.
name|get
argument_list|(
name|arr
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|ri
operator|.
name|setMaximumAllocation
argument_list|(
name|maximum
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|initializeResourcesMap (Configuration conf)
specifier|static
name|void
name|initializeResourcesMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|resourceInformationMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|resourceNames
init|=
name|conf
operator|.
name|getStrings
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceNames
operator|!=
literal|null
operator|&&
name|resourceNames
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|String
name|resourceName
range|:
name|resourceNames
control|)
block|{
name|String
name|resourceUnits
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|resourceName
operator|+
name|UNITS
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|resourceTypeName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|resourceName
operator|+
name|TYPE
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|minimumAllocation
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|resourceName
operator|+
name|MINIMUM_ALLOCATION
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|Long
name|maximumAllocation
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|resourceName
operator|+
name|MAXIMUM_ALLOCATION
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceName
operator|==
literal|null
operator|||
name|resourceName
operator|.
name|isEmpty
argument_list|()
operator|||
name|resourceUnits
operator|==
literal|null
operator|||
name|resourceTypeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Incomplete configuration for resource type '"
operator|+
name|resourceName
operator|+
literal|"'. One of name, units or type is configured incorrectly."
argument_list|)
throw|;
block|}
name|ResourceTypes
name|resourceType
init|=
name|ResourceTypes
operator|.
name|valueOf
argument_list|(
name|resourceTypeName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding resource type - name = "
operator|+
name|resourceName
operator|+
literal|", units = "
operator|+
name|resourceUnits
operator|+
literal|", type = "
operator|+
name|resourceTypeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceInformationMap
operator|.
name|containsKey
argument_list|(
name|resourceName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Error in config, key '"
operator|+
name|resourceName
operator|+
literal|"' specified twice"
argument_list|)
throw|;
block|}
name|resourceInformationMap
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resourceName
argument_list|,
name|resourceUnits
argument_list|,
literal|0L
argument_list|,
name|resourceType
argument_list|,
name|minimumAllocation
argument_list|,
name|maximumAllocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|checkMandatoryResources
argument_list|(
name|resourceInformationMap
argument_list|)
expr_stmt|;
name|addMandatoryResources
argument_list|(
name|resourceInformationMap
argument_list|)
expr_stmt|;
name|setMinimumAllocationForMandatoryResources
argument_list|(
name|resourceInformationMap
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setMaximumAllocationForMandatoryResources
argument_list|(
name|resourceInformationMap
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|initializeResourcesFromResourceInformationMap
argument_list|(
name|resourceInformationMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method is visible for testing, unit test can construct a    * resourceInformationMap and pass it to this method to initialize multiple resources.    * @param resourceInformationMap constructed resource information map.    */
annotation|@
name|VisibleForTesting
DECL|method|initializeResourcesFromResourceInformationMap ( Map<String, ResourceInformation> resourceInformationMap)
specifier|public
specifier|static
name|void
name|initializeResourcesFromResourceInformationMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|resourceInformationMap
parameter_list|)
block|{
name|resourceTypes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|resourceInformationMap
argument_list|)
expr_stmt|;
name|updateKnownResources
argument_list|()
expr_stmt|;
name|updateResourceTypeIndex
argument_list|()
expr_stmt|;
name|initializedResources
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|updateKnownResources ()
specifier|private
specifier|static
name|void
name|updateKnownResources
parameter_list|()
block|{
comment|// Update resource names.
name|resourceTypesArray
operator|=
operator|new
name|ResourceInformation
index|[
name|resourceTypes
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|index
init|=
literal|2
decl_stmt|;
for|for
control|(
name|ResourceInformation
name|resInfo
range|:
name|resourceTypes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|resInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MEMORY
argument_list|)
condition|)
block|{
name|resourceTypesArray
index|[
literal|0
index|]
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resourceTypes
operator|.
name|get
argument_list|(
name|MEMORY
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resInfo
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|VCORES
argument_list|)
condition|)
block|{
name|resourceTypesArray
index|[
literal|1
index|]
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resourceTypes
operator|.
name|get
argument_list|(
name|VCORES
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resourceTypesArray
index|[
name|index
index|]
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resInfo
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
block|}
DECL|method|updateResourceTypeIndex ()
specifier|private
specifier|static
name|void
name|updateResourceTypeIndex
parameter_list|()
block|{
name|RESOURCE_NAME_TO_INDEX
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|resourceTypesArray
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|ResourceInformation
name|resInfo
init|=
name|resourceTypesArray
index|[
name|index
index|]
decl_stmt|;
name|RESOURCE_NAME_TO_INDEX
operator|.
name|put
argument_list|(
name|resInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get associate index of resource types such memory, cpu etc.    * This could help to access each resource types in a resource faster.    * @return Index map for all Resource Types.    */
DECL|method|getResourceTypeIndex ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|getResourceTypeIndex
parameter_list|()
block|{
return|return
name|RESOURCE_NAME_TO_INDEX
return|;
block|}
comment|/**    * Get the resource types to be supported by the system.    * @return A map of the resource name to a ResouceInformation object    *         which contains details such as the unit.    */
DECL|method|getResourceTypes ()
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|getResourceTypes
parameter_list|()
block|{
return|return
name|getResourceTypes
argument_list|(
literal|null
argument_list|,
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES_CONFIGURATION_FILE
argument_list|)
return|;
block|}
DECL|method|getResourceTypesArray ()
specifier|public
specifier|static
name|ResourceInformation
index|[]
name|getResourceTypesArray
parameter_list|()
block|{
name|initializeResourceTypesIfNeeded
argument_list|(
literal|null
argument_list|,
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
return|return
name|resourceTypesArray
return|;
block|}
DECL|method|getNumberOfKnownResourceTypes ()
specifier|public
specifier|static
name|int
name|getNumberOfKnownResourceTypes
parameter_list|()
block|{
if|if
condition|(
name|numKnownResourceTypes
operator|<
literal|0
condition|)
block|{
name|initializeResourceTypesIfNeeded
argument_list|(
literal|null
argument_list|,
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
block|}
return|return
name|numKnownResourceTypes
return|;
block|}
DECL|method|getResourceTypes ( Configuration conf)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|getResourceTypes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getResourceTypes
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES_CONFIGURATION_FILE
argument_list|)
return|;
block|}
DECL|method|initializeResourceTypesIfNeeded (Configuration conf, String resourceFile)
specifier|private
specifier|static
name|void
name|initializeResourceTypesIfNeeded
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|resourceFile
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initializedResources
condition|)
block|{
synchronized|synchronized
init|(
name|ResourceUtils
operator|.
name|class
init|)
block|{
if|if
condition|(
operator|!
name|initializedResources
condition|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|addResourcesFileToConf
argument_list|(
name|resourceFile
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fe
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to find '"
operator|+
name|resourceFile
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
block|}
name|initializeResourcesMap
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|numKnownResourceTypes
operator|=
name|resourceTypes
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|method|getResourceTypes ( Configuration conf, String resourceFile)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|getResourceTypes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|resourceFile
parameter_list|)
block|{
name|initializeResourceTypesIfNeeded
argument_list|(
name|conf
argument_list|,
name|resourceFile
argument_list|)
expr_stmt|;
return|return
name|resourceTypes
return|;
block|}
DECL|method|getConfInputStream (String resourceFile, Configuration conf)
specifier|private
specifier|static
name|InputStream
name|getConfInputStream
parameter_list|(
name|String
name|resourceFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ConfigurationProvider
name|provider
init|=
name|ConfigurationProviderFactory
operator|.
name|getConfigurationProvider
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|provider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|InputStream
name|ris
init|=
name|provider
operator|.
name|getConfigurationInputStream
argument_list|(
name|conf
argument_list|,
name|resourceFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|ris
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|conf
operator|.
name|getResource
argument_list|(
name|resourceFile
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Unable to find "
operator|+
name|resourceFile
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to open resource types file '"
operator|+
name|resourceFile
operator|+
literal|"'. Using provider "
operator|+
name|provider
argument_list|)
throw|;
block|}
return|return
name|ris
return|;
block|}
DECL|method|addResourcesFileToConf (String resourceFile, Configuration conf)
specifier|private
specifier|static
name|void
name|addResourcesFileToConf
parameter_list|(
name|String
name|resourceFile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
try|try
block|{
name|InputStream
name|ris
init|=
name|getConfInputStream
argument_list|(
name|resourceFile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|resourceFile
operator|+
literal|", adding to configuration"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|addResource
argument_list|(
name|ris
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fe
parameter_list|)
block|{
throw|throw
name|fe
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Exception trying to read resource types configuration '"
operator|+
name|resourceFile
operator|+
literal|"'."
argument_list|,
name|ie
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"YARN Exception trying to read resource types configuration '"
operator|+
name|resourceFile
operator|+
literal|"'."
argument_list|,
name|ye
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|ye
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|resetResourceTypes ()
specifier|synchronized
specifier|static
name|void
name|resetResourceTypes
parameter_list|()
block|{
name|initializedResources
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
DECL|method|resetResourceTypes (Configuration conf)
name|resetResourceTypes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
synchronized|synchronized
init|(
name|ResourceUtils
operator|.
name|class
init|)
block|{
name|initializedResources
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|getResourceTypes
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getUnits (String resourceValue)
specifier|public
specifier|static
name|String
name|getUnits
parameter_list|(
name|String
name|resourceValue
parameter_list|)
block|{
name|String
name|units
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceValue
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isAlphabetic
argument_list|(
name|resourceValue
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|units
operator|=
name|resourceValue
operator|.
name|substring
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isAlpha
argument_list|(
name|units
argument_list|)
condition|)
block|{
return|return
name|units
return|;
block|}
block|}
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Function to get the resources for a node. This function will look at the    * file {@link YarnConfiguration#NODE_RESOURCES_CONFIGURATION_FILE} to    * determine the node resources.    *    * @param conf configuration file    * @return a map to resource name to the ResourceInformation object. The map    * is guaranteed to have entries for memory and vcores    */
DECL|method|getNodeResourceInformation ( Configuration conf)
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|getNodeResourceInformation
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initializedNodeResources
condition|)
block|{
synchronized|synchronized
init|(
name|ResourceUtils
operator|.
name|class
init|)
block|{
if|if
condition|(
operator|!
name|initializedNodeResources
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|nodeResources
init|=
name|initializeNodeResourceInformation
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|addMandatoryResources
argument_list|(
name|nodeResources
argument_list|)
expr_stmt|;
name|checkMandatoryResources
argument_list|(
name|nodeResources
argument_list|)
expr_stmt|;
name|setMinimumAllocationForMandatoryResources
argument_list|(
name|nodeResources
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setMaximumAllocationForMandatoryResources
argument_list|(
name|nodeResources
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|readOnlyNodeResources
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|nodeResources
argument_list|)
expr_stmt|;
name|initializedNodeResources
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|readOnlyNodeResources
return|;
block|}
DECL|method|initializeNodeResourceInformation ( Configuration conf)
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|initializeNodeResourceInformation
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|nodeResources
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|addResourcesFileToConf
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_RESOURCES_CONFIGURATION_FILE
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|YarnConfiguration
operator|.
name|NM_RESOURCES_PREFIX
argument_list|)
condition|)
block|{
name|addResourceInformation
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|nodeResources
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fe
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't find node resources file: "
operator|+
name|YarnConfiguration
operator|.
name|NODE_RESOURCES_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodeResources
return|;
block|}
DECL|method|addResourceInformation (String prop, String value, Map<String, ResourceInformation> nodeResources)
specifier|private
specifier|static
name|void
name|addResourceInformation
parameter_list|(
name|String
name|prop
parameter_list|,
name|String
name|value
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|nodeResources
parameter_list|)
block|{
name|String
index|[]
name|parts
init|=
name|prop
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found resource entry "
operator|+
name|prop
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|4
condition|)
block|{
name|String
name|resourceType
init|=
name|parts
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|nodeResources
operator|.
name|containsKey
argument_list|(
name|resourceType
argument_list|)
condition|)
block|{
name|nodeResources
operator|.
name|put
argument_list|(
name|resourceType
argument_list|,
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resourceType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|units
init|=
name|getUnits
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|Long
name|resourceValue
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
name|units
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|nodeResources
operator|.
name|get
argument_list|(
name|resourceType
argument_list|)
operator|.
name|setValue
argument_list|(
name|resourceValue
argument_list|)
expr_stmt|;
name|nodeResources
operator|.
name|get
argument_list|(
name|resourceType
argument_list|)
operator|.
name|setUnits
argument_list|(
name|units
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting value for resource type "
operator|+
name|resourceType
operator|+
literal|" to "
operator|+
name|resourceValue
operator|+
literal|" with units "
operator|+
name|units
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|resetNodeResources ()
specifier|synchronized
specifier|public
specifier|static
name|void
name|resetNodeResources
parameter_list|()
block|{
name|initializedNodeResources
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|getResourceTypesMinimumAllocation ()
specifier|public
specifier|static
name|Resource
name|getResourceTypesMinimumAllocation
parameter_list|()
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceInformation
name|entry
range|:
name|resourceTypesArray
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setMemorySize
argument_list|(
name|entry
operator|.
name|getMinimumAllocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Long
name|tmp
init|=
name|entry
operator|.
name|getMinimumAllocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|tmp
operator|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|ret
operator|.
name|setVirtualCores
argument_list|(
name|tmp
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setResourceValue
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getMinimumAllocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Get a Resource object with for the maximum allocation possible.    * @return a Resource object with the maximum allocation for the scheduler    */
DECL|method|getResourceTypesMaximumAllocation ()
specifier|public
specifier|static
name|Resource
name|getResourceTypesMaximumAllocation
parameter_list|()
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceInformation
name|entry
range|:
name|resourceTypesArray
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setMemorySize
argument_list|(
name|entry
operator|.
name|getMaximumAllocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Long
name|tmp
init|=
name|entry
operator|.
name|getMaximumAllocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|tmp
operator|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|ret
operator|.
name|setVirtualCores
argument_list|(
name|tmp
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|ret
operator|.
name|setResourceValue
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getMaximumAllocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Get default unit by given resource type.    * @param resourceType resourceType    * @return default unit    */
DECL|method|getDefaultUnit (String resourceType)
specifier|public
specifier|static
name|String
name|getDefaultUnit
parameter_list|(
name|String
name|resourceType
parameter_list|)
block|{
name|ResourceInformation
name|ri
init|=
name|getResourceTypes
argument_list|()
operator|.
name|get
argument_list|(
name|resourceType
argument_list|)
decl_stmt|;
if|if
condition|(
name|ri
operator|!=
literal|null
condition|)
block|{
return|return
name|ri
operator|.
name|getUnits
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
comment|/**    * Get all resource types information from known resource types.    * @return List of ResourceTypeInfo    */
DECL|method|getResourcesTypeInfo ()
specifier|public
specifier|static
name|List
argument_list|<
name|ResourceTypeInfo
argument_list|>
name|getResourcesTypeInfo
parameter_list|()
block|{
name|List
argument_list|<
name|ResourceTypeInfo
argument_list|>
name|array
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add all resource types
name|Collection
argument_list|<
name|ResourceInformation
argument_list|>
name|resourcesInfo
init|=
name|ResourceUtils
operator|.
name|getResourceTypes
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceInformation
name|resourceInfo
range|:
name|resourcesInfo
control|)
block|{
name|array
operator|.
name|add
argument_list|(
name|ResourceTypeInfo
operator|.
name|newInstance
argument_list|(
name|resourceInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|resourceInfo
operator|.
name|getUnits
argument_list|()
argument_list|,
name|resourceInfo
operator|.
name|getResourceType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
comment|/**    * Reinitialize all resource types from external source (in case of client,    * server will send the updated list and local resourceutils cache will be    * updated as per server's list of resources)    *    * @param resourceTypeInfo    *          List of resource types    */
DECL|method|reinitializeResources ( List<ResourceTypeInfo> resourceTypeInfo)
specifier|public
specifier|static
name|void
name|reinitializeResources
parameter_list|(
name|List
argument_list|<
name|ResourceTypeInfo
argument_list|>
name|resourceTypeInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|resourceInformationMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceTypeInfo
name|resourceType
range|:
name|resourceTypeInfo
control|)
block|{
name|resourceInformationMap
operator|.
name|put
argument_list|(
name|resourceType
operator|.
name|getName
argument_list|()
argument_list|,
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resourceType
operator|.
name|getName
argument_list|()
argument_list|,
name|resourceType
operator|.
name|getDefaultUnit
argument_list|()
argument_list|,
name|resourceType
operator|.
name|getResourceType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResourceUtils
operator|.
name|initializeResourcesFromResourceInformationMap
argument_list|(
name|resourceInformationMap
argument_list|)
expr_stmt|;
block|}
comment|/**    * From a given configuration get all entries representing requested    * resources: entries that match the {prefix}{resourceName}={value}[{units}]    * pattern.    * @param configuration The configuration    * @param prefix Keys with this prefix are considered from the configuration    * @return The list of requested resources as described by the configuration    */
DECL|method|getRequestedResourcesFromConfig ( Configuration configuration, String prefix)
specifier|public
specifier|static
name|List
argument_list|<
name|ResourceInformation
argument_list|>
name|getRequestedResourcesFromConfig
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceInformation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customResourcesMap
init|=
name|configuration
operator|.
name|getValByRegex
argument_list|(
literal|"^"
operator|+
name|Pattern
operator|.
name|quote
argument_list|(
name|prefix
argument_list|)
operator|+
literal|"[^.]+$"
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resource
range|:
name|customResourcesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|resourceName
init|=
name|resource
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|RESOURCE_REQUEST_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|resource
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|errorMsg
init|=
literal|"Invalid resource request specified for property "
operator|+
name|resource
operator|.
name|getKey
argument_list|()
operator|+
literal|": \""
operator|+
name|resource
operator|.
name|getValue
argument_list|()
operator|+
literal|"\", expected format is: value[ ][units]"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|errorMsg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|errorMsg
argument_list|)
throw|;
block|}
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|unit
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|unit
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|unit
operator|=
name|ResourceUtils
operator|.
name|getDefaultUnit
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
block|}
name|ResourceInformation
name|resourceInformation
init|=
operator|new
name|ResourceInformation
argument_list|()
decl_stmt|;
name|resourceInformation
operator|.
name|setName
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|resourceInformation
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|resourceInformation
operator|.
name|setUnits
argument_list|(
name|unit
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|resourceInformation
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

