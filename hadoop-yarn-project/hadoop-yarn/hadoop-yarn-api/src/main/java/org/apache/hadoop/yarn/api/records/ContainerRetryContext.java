begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * {@code ContainerRetryContext} indicates how container retry after it fails  * to run.  *<p>  * It provides details such as:  *<ul>  *<li>  *     {@link ContainerRetryPolicy} :  *     - NEVER_RETRY(DEFAULT value): no matter what error code is when container  *       fails to run, just do not retry.  *     - RETRY_ON_ALL_ERRORS: no matter what error code is, when container fails  *       to run, just retry.  *     - RETRY_ON_SPECIFIC_ERROR_CODES: when container fails to run, do retry if  *       the error code is one of<em>errorCodes</em>, otherwise do not retry.  *  *     Note: if error code is 137(SIGKILL) or 143(SIGTERM), it will not retry  *     because it is usually killed on purpose.  *</li>  *<li>  *<em>maxRetries</em> specifies how many times to retry if need to retry.  *     If the value is -1, it means retry forever.  *</li>  *<li><em>retryInterval</em> specifies delaying some time before relaunch  *   container, the unit is millisecond.</li>  *<li>  *<em>failuresValidityInterval</em>: default value is -1.  *     When failuresValidityInterval in milliseconds is set to {@literal>} 0,  *     the failure number will not take failures which happen out of the  *     failuresValidityInterval into failure count. If failure count  *     reaches to<em>maxRetries</em>, the container will be failed.  *</li>  *</ul>  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ContainerRetryContext
specifier|public
specifier|abstract
class|class
name|ContainerRetryContext
block|{
DECL|field|RETRY_FOREVER
specifier|public
specifier|static
specifier|final
name|int
name|RETRY_FOREVER
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|RETRY_INVALID
specifier|public
specifier|static
specifier|final
name|int
name|RETRY_INVALID
init|=
operator|-
literal|1000
decl_stmt|;
DECL|field|NEVER_RETRY_CONTEXT
specifier|public
specifier|static
specifier|final
name|ContainerRetryContext
name|NEVER_RETRY_CONTEXT
init|=
name|newInstance
argument_list|(
name|ContainerRetryPolicy
operator|.
name|NEVER_RETRY
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance ( ContainerRetryPolicy retryPolicy, Set<Integer> errorCodes, int maxRetries, int retryInterval, long failuresValidityInterval)
specifier|public
specifier|static
name|ContainerRetryContext
name|newInstance
parameter_list|(
name|ContainerRetryPolicy
name|retryPolicy
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|errorCodes
parameter_list|,
name|int
name|maxRetries
parameter_list|,
name|int
name|retryInterval
parameter_list|,
name|long
name|failuresValidityInterval
parameter_list|)
block|{
name|ContainerRetryContext
name|containerRetryContext
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerRetryContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|containerRetryContext
operator|.
name|setRetryPolicy
argument_list|(
name|retryPolicy
argument_list|)
expr_stmt|;
name|containerRetryContext
operator|.
name|setErrorCodes
argument_list|(
name|errorCodes
argument_list|)
expr_stmt|;
name|containerRetryContext
operator|.
name|setMaxRetries
argument_list|(
name|maxRetries
argument_list|)
expr_stmt|;
name|containerRetryContext
operator|.
name|setRetryInterval
argument_list|(
name|retryInterval
argument_list|)
expr_stmt|;
name|containerRetryContext
operator|.
name|setFailuresValidityInterval
argument_list|(
name|failuresValidityInterval
argument_list|)
expr_stmt|;
return|return
name|containerRetryContext
return|;
block|}
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance ( ContainerRetryPolicy retryPolicy, Set<Integer> errorCodes, int maxRetries, int retryInterval)
specifier|public
specifier|static
name|ContainerRetryContext
name|newInstance
parameter_list|(
name|ContainerRetryPolicy
name|retryPolicy
parameter_list|,
name|Set
argument_list|<
name|Integer
argument_list|>
name|errorCodes
parameter_list|,
name|int
name|maxRetries
parameter_list|,
name|int
name|retryInterval
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|retryPolicy
argument_list|,
name|errorCodes
argument_list|,
name|maxRetries
argument_list|,
name|retryInterval
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
DECL|method|getRetryPolicy ()
specifier|public
specifier|abstract
name|ContainerRetryPolicy
name|getRetryPolicy
parameter_list|()
function_decl|;
DECL|method|setRetryPolicy (ContainerRetryPolicy retryPolicy)
specifier|public
specifier|abstract
name|void
name|setRetryPolicy
parameter_list|(
name|ContainerRetryPolicy
name|retryPolicy
parameter_list|)
function_decl|;
DECL|method|getErrorCodes ()
specifier|public
specifier|abstract
name|Set
argument_list|<
name|Integer
argument_list|>
name|getErrorCodes
parameter_list|()
function_decl|;
DECL|method|setErrorCodes (Set<Integer> errorCodes)
specifier|public
specifier|abstract
name|void
name|setErrorCodes
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|errorCodes
parameter_list|)
function_decl|;
DECL|method|getMaxRetries ()
specifier|public
specifier|abstract
name|int
name|getMaxRetries
parameter_list|()
function_decl|;
DECL|method|setMaxRetries (int maxRetries)
specifier|public
specifier|abstract
name|void
name|setMaxRetries
parameter_list|(
name|int
name|maxRetries
parameter_list|)
function_decl|;
DECL|method|getRetryInterval ()
specifier|public
specifier|abstract
name|int
name|getRetryInterval
parameter_list|()
function_decl|;
DECL|method|setRetryInterval (int retryInterval)
specifier|public
specifier|abstract
name|void
name|setRetryInterval
parameter_list|(
name|int
name|retryInterval
parameter_list|)
function_decl|;
DECL|method|getFailuresValidityInterval ()
specifier|public
specifier|abstract
name|long
name|getFailuresValidityInterval
parameter_list|()
function_decl|;
DECL|method|setFailuresValidityInterval ( long failuresValidityInterval)
specifier|public
specifier|abstract
name|void
name|setFailuresValidityInterval
parameter_list|(
name|long
name|failuresValidityInterval
parameter_list|)
function_decl|;
block|}
end_class

end_unit

