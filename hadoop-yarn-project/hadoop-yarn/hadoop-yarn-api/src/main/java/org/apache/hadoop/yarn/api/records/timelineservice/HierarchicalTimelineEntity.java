begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|NONE
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|HierarchicalTimelineEntity
specifier|public
specifier|abstract
class|class
name|HierarchicalTimelineEntity
extends|extends
name|TimelineEntity
block|{
DECL|field|parent
specifier|private
name|Identifier
name|parent
decl_stmt|;
DECL|field|children
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|children
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|HierarchicalTimelineEntity (String type)
name|HierarchicalTimelineEntity
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"parent"
argument_list|)
DECL|method|getParent ()
specifier|public
name|Identifier
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|setParent (Identifier parent)
specifier|public
name|void
name|setParent
parameter_list|(
name|Identifier
name|parent
parameter_list|)
block|{
name|validateParent
argument_list|(
name|parent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
DECL|method|setParent (String type, String id)
specifier|public
name|void
name|setParent
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|validateParent
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|parent
operator|=
operator|new
name|Identifier
argument_list|()
expr_stmt|;
name|parent
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"children"
argument_list|)
DECL|method|getChildren ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
DECL|method|setChildren (Map<String, Set<String>> children)
specifier|public
name|void
name|setChildren
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|children
parameter_list|)
block|{
name|validateChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
block|}
DECL|method|addChildren (Map<String, Set<String>> children)
specifier|public
name|void
name|addChildren
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|children
parameter_list|)
block|{
name|validateChildren
argument_list|(
name|children
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|children
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|this
operator|.
name|children
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|children
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addChild (String type, String id)
specifier|public
name|void
name|addChild
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|TimelineEntityType
name|thisType
init|=
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|TimelineEntityType
name|childType
init|=
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisType
operator|.
name|isChild
argument_list|(
name|childType
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|children
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|children
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|ids
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|type
operator|+
literal|" is not the acceptable child of "
operator|+
name|this
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|validateParent (String type)
specifier|private
name|void
name|validateParent
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|TimelineEntityType
name|parentType
init|=
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|TimelineEntityType
name|thisType
init|=
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|thisType
operator|.
name|isParent
argument_list|(
name|parentType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|type
operator|+
literal|" is not the acceptable parent of "
operator|+
name|this
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|validateChildren (Map<String, Set<String>> children)
specifier|private
name|void
name|validateChildren
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|children
parameter_list|)
block|{
name|TimelineEntityType
name|thisType
init|=
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|children
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TimelineEntityType
name|childType
init|=
name|TimelineEntityType
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|thisType
operator|.
name|isChild
argument_list|(
name|childType
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" is not the acceptable child of "
operator|+
name|this
operator|.
name|getType
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

