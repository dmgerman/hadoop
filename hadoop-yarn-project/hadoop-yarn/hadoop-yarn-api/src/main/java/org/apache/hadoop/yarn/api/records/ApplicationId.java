begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_comment
comment|/**  *<p><code>ApplicationId</code> represents the<em>globally unique</em>   * identifier for an application.</p>  *   *<p>The globally unique nature of the identifier is achieved by using the   *<em>cluster timestamp</em> i.e. start-time of the   *<code>ResourceManager</code> along with a monotonically increasing counter  * for the application.</p>  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|ApplicationId
specifier|public
specifier|abstract
class|class
name|ApplicationId
implements|implements
name|Comparable
argument_list|<
name|ApplicationId
argument_list|>
block|{
DECL|field|appIdStrPrefix
specifier|public
specifier|static
specifier|final
name|String
name|appIdStrPrefix
init|=
literal|"application_"
decl_stmt|;
comment|/**    * Get the short integer identifier of the<code>ApplicationId</code>    * which is unique for all applications started by a particular instance    * of the<code>ResourceManager</code>.    * @return short integer identifier of the<code>ApplicationId</code>    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getId ()
specifier|public
specifier|abstract
name|int
name|getId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setId (int id)
specifier|public
specifier|abstract
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
comment|/**    * Get the<em>start time</em> of the<code>ResourceManager</code> which is     * used to generate globally unique<code>ApplicationId</code>.    * @return<em>start time</em> of the<code>ResourceManager</code>    */
DECL|method|getClusterTimestamp ()
specifier|public
specifier|abstract
name|long
name|getClusterTimestamp
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setClusterTimestamp (long clusterTimestamp)
specifier|public
specifier|abstract
name|void
name|setClusterTimestamp
parameter_list|(
name|long
name|clusterTimestamp
parameter_list|)
function_decl|;
DECL|field|appIdFormat
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
name|appIdFormat
init|=
operator|new
name|ThreadLocal
argument_list|<
name|NumberFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|NumberFormat
name|initialValue
parameter_list|()
block|{
name|NumberFormat
name|fmt
init|=
name|NumberFormat
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setGroupingUsed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setMinimumIntegerDigits
argument_list|(
literal|4
argument_list|)
expr_stmt|;
return|return
name|fmt
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|compareTo (ApplicationId other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ApplicationId
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|-
name|other
operator|.
name|getClusterTimestamp
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|getId
argument_list|()
operator|-
name|other
operator|.
name|getId
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|>
name|other
operator|.
name|getClusterTimestamp
argument_list|()
condition|?
literal|1
else|:
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|<
name|other
operator|.
name|getClusterTimestamp
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|appIdStrPrefix
operator|+
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|+
literal|"_"
operator|+
name|appIdFormat
operator|.
name|get
argument_list|()
operator|.
name|format
argument_list|(
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
comment|// Generated by eclipse.
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|long
name|clusterTimestamp
init|=
name|getClusterTimestamp
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|clusterTimestamp
operator|^
operator|(
name|clusterTimestamp
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getId
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ApplicationId
name|other
init|=
operator|(
name|ApplicationId
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getClusterTimestamp
argument_list|()
operator|!=
name|other
operator|.
name|getClusterTimestamp
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|getId
argument_list|()
operator|!=
name|other
operator|.
name|getId
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

