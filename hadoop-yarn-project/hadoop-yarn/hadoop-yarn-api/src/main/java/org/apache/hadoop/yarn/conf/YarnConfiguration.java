begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
DECL|class|YarnConfiguration
specifier|public
class|class
name|YarnConfiguration
extends|extends
name|Configuration
block|{
DECL|field|JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|field|YARN_DEFAULT_XML_FILE
specifier|private
specifier|static
specifier|final
name|String
name|YARN_DEFAULT_XML_FILE
init|=
literal|"yarn-default.xml"
decl_stmt|;
DECL|field|YARN_SITE_XML_FILE
specifier|private
specifier|static
specifier|final
name|String
name|YARN_SITE_XML_FILE
init|=
literal|"yarn-site.xml"
decl_stmt|;
static|static
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|YARN_DEFAULT_XML_FILE
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|YARN_SITE_XML_FILE
argument_list|)
expr_stmt|;
block|}
comment|//Configurations
DECL|field|YARN_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|YARN_PREFIX
init|=
literal|"yarn."
decl_stmt|;
comment|/** Delay before deleting resource to ease debugging of NM issues */
DECL|field|DEBUG_NM_DELETE_DELAY_SEC
specifier|public
specifier|static
specifier|final
name|String
name|DEBUG_NM_DELETE_DELAY_SEC
init|=
name|YarnConfiguration
operator|.
name|NM_PREFIX
operator|+
literal|"delete.debug-delay-sec"
decl_stmt|;
comment|////////////////////////////////
comment|// IPC Configs
comment|////////////////////////////////
DECL|field|IPC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|IPC_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"ipc."
decl_stmt|;
comment|/** Factory to create client IPC classes.*/
DECL|field|IPC_CLIENT_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|IPC_CLIENT_FACTORY_CLASS
init|=
name|IPC_PREFIX
operator|+
literal|"client.factory.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_CLIENT_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_CLIENT_FACTORY_CLASS
init|=
literal|"org.apache.hadoop.yarn.factories.impl.pb.RpcClientFactoryPBImpl"
decl_stmt|;
comment|/** Factory to create server IPC classes.*/
DECL|field|IPC_SERVER_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|IPC_SERVER_FACTORY_CLASS
init|=
name|IPC_PREFIX
operator|+
literal|"server.factory.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_SERVER_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_SERVER_FACTORY_CLASS
init|=
literal|"org.apache.hadoop.yarn.factories.impl.pb.RpcServerFactoryPBImpl"
decl_stmt|;
comment|/** Factory to create serializeable records.*/
DECL|field|IPC_RECORD_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|IPC_RECORD_FACTORY_CLASS
init|=
name|IPC_PREFIX
operator|+
literal|"record.factory.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_RECORD_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_RECORD_FACTORY_CLASS
init|=
literal|"org.apache.hadoop.yarn.factories.impl.pb.RecordFactoryPBImpl"
decl_stmt|;
comment|/** RPC class implementation*/
DECL|field|IPC_RPC_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|IPC_RPC_IMPL
init|=
name|IPC_PREFIX
operator|+
literal|"rpc.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_RPC_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_RPC_IMPL
init|=
literal|"org.apache.hadoop.yarn.ipc.HadoopYarnProtoRPC"
decl_stmt|;
comment|////////////////////////////////
comment|// Resource Manager Configs
comment|////////////////////////////////
DECL|field|RM_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RM_PREFIX
init|=
literal|"yarn.resourcemanager."
decl_stmt|;
comment|/** The address of the applications manager interface in the RM.*/
DECL|field|RM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_RM_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_PORT
init|=
literal|8032
decl_stmt|;
DECL|field|DEFAULT_RM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_PORT
decl_stmt|;
comment|/** The number of threads used to handle applications manager requests.*/
DECL|field|RM_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_CLIENT_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** The Kerberos principal for the resource manager.*/
DECL|field|RM_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|RM_PRINCIPAL
init|=
name|RM_PREFIX
operator|+
literal|"principal"
decl_stmt|;
comment|/** The address of the scheduler interface.*/
DECL|field|RM_SCHEDULER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.address"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_PORT
init|=
literal|8030
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_SCHEDULER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_SCHEDULER_PORT
decl_stmt|;
comment|/** Miniumum request grant-able by the RM scheduler. */
DECL|field|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.minimum-allocation-mb"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
init|=
literal|1024
decl_stmt|;
DECL|field|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.minimum-allocation-vcores"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
init|=
literal|1
decl_stmt|;
comment|/** Maximum request grant-able by the RM scheduler. */
DECL|field|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.maximum-allocation-mb"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
init|=
literal|8192
decl_stmt|;
DECL|field|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.maximum-allocation-vcores"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
init|=
literal|4
decl_stmt|;
comment|/** Number of threads to handle scheduler interface.*/
DECL|field|RM_SCHEDULER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** The address of the RM web application.*/
DECL|field|RM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_WEBAPP_PORT
init|=
literal|8088
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_WEBAPP_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_WEBAPP_PORT
decl_stmt|;
DECL|field|RM_RESOURCE_TRACKER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESOURCE_TRACKER_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"resource-tracker.address"
decl_stmt|;
DECL|field|DEFAULT_RM_RESOURCE_TRACKER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_RESOURCE_TRACKER_PORT
init|=
literal|8031
decl_stmt|;
DECL|field|DEFAULT_RM_RESOURCE_TRACKER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_RESOURCE_TRACKER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_RESOURCE_TRACKER_PORT
decl_stmt|;
comment|/** The expiry interval for application master reporting.*/
DECL|field|RM_AM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_AM_EXPIRY_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"am.liveness-monitor.expiry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_AM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_AM_EXPIRY_INTERVAL_MS
init|=
literal|600000
decl_stmt|;
comment|/** How long to wait until a node manager is considered dead.*/
DECL|field|RM_NM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NM_EXPIRY_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"nm.liveness-monitor.expiry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
init|=
literal|600000
decl_stmt|;
comment|/** Are acls enabled.*/
DECL|field|YARN_ACL_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_ACL_ENABLE
init|=
name|YARN_PREFIX
operator|+
literal|"acl.enable"
decl_stmt|;
DECL|field|DEFAULT_YARN_ACL_ENABLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_ACL_ENABLE
init|=
literal|false
decl_stmt|;
comment|/** ACL of who can be admin of YARN cluster.*/
DECL|field|YARN_ADMIN_ACL
specifier|public
specifier|static
specifier|final
name|String
name|YARN_ADMIN_ACL
init|=
name|YARN_PREFIX
operator|+
literal|"admin.acl"
decl_stmt|;
DECL|field|DEFAULT_YARN_ADMIN_ACL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_ADMIN_ACL
init|=
literal|"*"
decl_stmt|;
comment|/** ACL used in case none is found. Allows nothing. */
DECL|field|DEFAULT_YARN_APP_ACL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_APP_ACL
init|=
literal|" "
decl_stmt|;
comment|/** The address of the RM admin interface.*/
DECL|field|RM_ADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_ADMIN_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"admin.address"
decl_stmt|;
DECL|field|DEFAULT_RM_ADMIN_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_ADMIN_PORT
init|=
literal|8033
decl_stmt|;
DECL|field|DEFAULT_RM_ADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_ADMIN_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_ADMIN_PORT
decl_stmt|;
comment|/**Number of threads used to handle RM admin interface.*/
DECL|field|RM_ADMIN_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_ADMIN_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"admin.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT
init|=
literal|1
decl_stmt|;
comment|/**    * The maximum number of application attempts.    * It's a global setting for all application masters.    */
DECL|field|RM_AM_MAX_ATTEMPTS
specifier|public
specifier|static
specifier|final
name|String
name|RM_AM_MAX_ATTEMPTS
init|=
name|RM_PREFIX
operator|+
literal|"am.max-attempts"
decl_stmt|;
DECL|field|DEFAULT_RM_AM_MAX_ATTEMPTS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_AM_MAX_ATTEMPTS
init|=
literal|2
decl_stmt|;
comment|/** The keytab for the resource manager.*/
DECL|field|RM_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|RM_KEYTAB
init|=
name|RM_PREFIX
operator|+
literal|"keytab"
decl_stmt|;
comment|/** How long to wait until a container is considered dead.*/
DECL|field|RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"rm.container-allocation.expiry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
init|=
literal|600000
decl_stmt|;
comment|/** Path to file with nodes to include.*/
DECL|field|RM_NODES_INCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODES_INCLUDE_FILE_PATH
init|=
name|RM_PREFIX
operator|+
literal|"nodes.include-path"
decl_stmt|;
DECL|field|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
init|=
literal|""
decl_stmt|;
comment|/** Path to file with nodes to exclude.*/
DECL|field|RM_NODES_EXCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODES_EXCLUDE_FILE_PATH
init|=
name|RM_PREFIX
operator|+
literal|"nodes.exclude-path"
decl_stmt|;
DECL|field|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
init|=
literal|""
decl_stmt|;
comment|/** Number of threads to handle resource tracker calls.*/
DECL|field|RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"resource-tracker.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** The class to use as the resource scheduler.*/
DECL|field|RM_SCHEDULER
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.class"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_SCHEDULER
init|=
literal|"org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler"
decl_stmt|;
comment|/** RM set next Heartbeat interval for NM */
DECL|field|RM_NM_HEARTBEAT_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NM_HEARTBEAT_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"nodemanagers.heartbeat-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
comment|//Delegation token related keys
DECL|field|DELEGATION_KEY_UPDATE_INTERVAL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_KEY_UPDATE_INTERVAL_KEY
init|=
name|RM_PREFIX
operator|+
literal|"delegation.key.update-interval"
decl_stmt|;
DECL|field|DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
DECL|field|DELEGATION_TOKEN_RENEW_INTERVAL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_RENEW_INTERVAL_KEY
init|=
name|RM_PREFIX
operator|+
literal|"delegation.token.renew-interval"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
DECL|field|DELEGATION_TOKEN_MAX_LIFETIME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_MAX_LIFETIME_KEY
init|=
name|RM_PREFIX
operator|+
literal|"delegation.token.max-lifetime"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 7 days
DECL|field|RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RECOVERY_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"recovery.enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_RECOVERY_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** The class to use as the persistent store.*/
DECL|field|RM_STORE
specifier|public
specifier|static
specifier|final
name|String
name|RM_STORE
init|=
name|RM_PREFIX
operator|+
literal|"store.class"
decl_stmt|;
comment|/** URI for FileSystemRMStateStore */
DECL|field|FS_RM_STATE_STORE_URI
specifier|public
specifier|static
specifier|final
name|String
name|FS_RM_STATE_STORE_URI
init|=
name|RM_PREFIX
operator|+
literal|"fs.rm-state-store.uri"
decl_stmt|;
comment|/** The maximum number of completed applications RM keeps. */
DECL|field|RM_MAX_COMPLETED_APPLICATIONS
specifier|public
specifier|static
specifier|final
name|String
name|RM_MAX_COMPLETED_APPLICATIONS
init|=
name|RM_PREFIX
operator|+
literal|"max-completed-applications"
decl_stmt|;
DECL|field|DEFAULT_RM_MAX_COMPLETED_APPLICATIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_MAX_COMPLETED_APPLICATIONS
init|=
literal|10000
decl_stmt|;
comment|/** Default application name */
DECL|field|DEFAULT_APPLICATION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_APPLICATION_NAME
init|=
literal|"N/A"
decl_stmt|;
comment|/** Default application type */
DECL|field|DEFAULT_APPLICATION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_APPLICATION_TYPE
init|=
literal|"YARN"
decl_stmt|;
comment|/** Default application type length */
DECL|field|APPLICATION_TYPE_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|APPLICATION_TYPE_LENGTH
init|=
literal|20
decl_stmt|;
comment|/** Default queue name */
DECL|field|DEFAULT_QUEUE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE_NAME
init|=
literal|"default"
decl_stmt|;
comment|/**    * Buckets (in minutes) for the number of apps running in each queue.    */
DECL|field|RM_METRICS_RUNTIME_BUCKETS
specifier|public
specifier|static
specifier|final
name|String
name|RM_METRICS_RUNTIME_BUCKETS
init|=
name|RM_PREFIX
operator|+
literal|"metrics.runtime.buckets"
decl_stmt|;
comment|/**    * Default sizes of the runtime metric buckets in minutes.    */
DECL|field|DEFAULT_RM_METRICS_RUNTIME_BUCKETS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_METRICS_RUNTIME_BUCKETS
init|=
literal|"60,300,1440"
decl_stmt|;
DECL|field|RM_APP_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_APP_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"application-tokens.master-key-rolling-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_APP_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_APP_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"container-tokens.master-key-rolling-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"nm-tokens.master-key-rolling-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|////////////////////////////////
comment|// Node Manager Configs
comment|////////////////////////////////
comment|/** Prefix for all node manager configs.*/
DECL|field|NM_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_PREFIX
init|=
literal|"yarn.nodemanager."
decl_stmt|;
comment|/** Environment variables that will be sent to containers.*/
DECL|field|NM_ADMIN_USER_ENV
specifier|public
specifier|static
specifier|final
name|String
name|NM_ADMIN_USER_ENV
init|=
name|NM_PREFIX
operator|+
literal|"admin-env"
decl_stmt|;
DECL|field|DEFAULT_NM_ADMIN_USER_ENV
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_ADMIN_USER_ENV
init|=
literal|"MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX"
decl_stmt|;
comment|/** Environment variables that containers may override rather than use NodeManager's default.*/
DECL|field|NM_ENV_WHITELIST
specifier|public
specifier|static
specifier|final
name|String
name|NM_ENV_WHITELIST
init|=
name|NM_PREFIX
operator|+
literal|"env-whitelist"
decl_stmt|;
DECL|field|DEFAULT_NM_ENV_WHITELIST
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_ENV_WHITELIST
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|JAVA_HOME
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/** address of node manager IPC.*/
DECL|field|NM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_NM_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_PORT
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_NM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_PORT
decl_stmt|;
comment|/** who will execute(launch) the containers.*/
DECL|field|NM_CONTAINER_EXECUTOR
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_EXECUTOR
init|=
name|NM_PREFIX
operator|+
literal|"container-executor.class"
decl_stmt|;
comment|/**      * Adjustment to make to the container os scheduling priority.    * The valid values for this could vary depending on the platform.    * On Linux, higher values mean run the containers at a less     * favorable priority than the NM.     * The value specified is an int.    */
DECL|field|NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
init|=
name|NM_PREFIX
operator|+
literal|"container-executor.os.sched.priority.adjustment"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
init|=
literal|0
decl_stmt|;
comment|/** Number of threads container manager uses.*/
DECL|field|NM_CONTAINER_MGR_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_MGR_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"container-manager.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT
init|=
literal|20
decl_stmt|;
comment|/** Number of threads used in cleanup.*/
DECL|field|NM_DELETE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_DELETE_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"delete.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_DELETE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_DELETE_THREAD_COUNT
init|=
literal|4
decl_stmt|;
comment|/** Keytab for NM.*/
DECL|field|NM_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|NM_KEYTAB
init|=
name|NM_PREFIX
operator|+
literal|"keytab"
decl_stmt|;
comment|/**List of directories to store localized files in.*/
DECL|field|NM_LOCAL_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCAL_DIRS
init|=
name|NM_PREFIX
operator|+
literal|"local-dirs"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCAL_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOCAL_DIRS
init|=
literal|"/tmp/nm-local-dir"
decl_stmt|;
comment|/**    * Number of files in each localized directories    * Avoid tuning this too low.     */
DECL|field|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
init|=
name|NM_PREFIX
operator|+
literal|"local-cache.max-files-per-directory"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
init|=
literal|8192
decl_stmt|;
comment|/** Address where the localizer IPC is.*/
DECL|field|NM_LOCALIZER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"localizer.address"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCALIZER_PORT
init|=
literal|8040
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOCALIZER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_LOCALIZER_PORT
decl_stmt|;
comment|/** Interval in between cache cleanups.*/
DECL|field|NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"localizer.cache.cleanup.interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/** Target size of localizer cache in MB, per local directory.*/
DECL|field|NM_LOCALIZER_CACHE_TARGET_SIZE_MB
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_CACHE_TARGET_SIZE_MB
init|=
name|NM_PREFIX
operator|+
literal|"localizer.cache.target-size-mb"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
comment|/** Number of threads to handle localization requests.*/
DECL|field|NM_LOCALIZER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_CLIENT_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"localizer.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCALIZER_CLIENT_THREAD_COUNT
init|=
literal|5
decl_stmt|;
comment|/** Number of threads to use for localization fetching.*/
DECL|field|NM_LOCALIZER_FETCH_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_FETCH_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"localizer.fetch.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_FETCH_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCALIZER_FETCH_THREAD_COUNT
init|=
literal|4
decl_stmt|;
comment|/** Where to store container logs.*/
DECL|field|NM_LOG_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_DIRS
init|=
name|NM_PREFIX
operator|+
literal|"log-dirs"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOG_DIRS
init|=
literal|"/tmp/logs"
decl_stmt|;
comment|/** Interval at which the delayed token removal thread runs */
DECL|field|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"delayed.delegation-token.removal-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
init|=
literal|30000l
decl_stmt|;
comment|/** Whether to enable log aggregation */
DECL|field|LOG_AGGREGATION_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_ENABLED
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation-enable"
decl_stmt|;
DECL|field|DEFAULT_LOG_AGGREGATION_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_LOG_AGGREGATION_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**     * How long to wait before deleting aggregated logs, -1 disables.    * Be careful set this too small and you will spam the name node.    */
DECL|field|LOG_AGGREGATION_RETAIN_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_RETAIN_SECONDS
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.retain-seconds"
decl_stmt|;
DECL|field|DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * How long to wait between aggregated log retention checks. If set to    * a value<= 0 then the value is computed as one-tenth of the log retention    * setting. Be careful set this too small and you will spam the name node.    */
DECL|field|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.retain-check-interval-seconds"
decl_stmt|;
DECL|field|DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Number of seconds to retain logs on the NodeManager. Only applicable if Log    * aggregation is disabled    */
DECL|field|NM_LOG_RETAIN_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_RETAIN_SECONDS
init|=
name|NM_PREFIX
operator|+
literal|"log.retain-seconds"
decl_stmt|;
comment|/**    * Number of threads used in log cleanup. Only applicable if Log aggregation    * is disabled    */
DECL|field|NM_LOG_DELETION_THREADS_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_DELETION_THREADS_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"log.deletion-threads-count"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_DELETE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOG_DELETE_THREAD_COUNT
init|=
literal|4
decl_stmt|;
comment|/** Where to aggregate logs to.*/
DECL|field|NM_REMOTE_APP_LOG_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_REMOTE_APP_LOG_DIR
init|=
name|NM_PREFIX
operator|+
literal|"remote-app-log-dir"
decl_stmt|;
DECL|field|DEFAULT_NM_REMOTE_APP_LOG_DIR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
init|=
literal|"/tmp/logs"
decl_stmt|;
comment|/**    * The remote log dir will be created at    * NM_REMOTE_APP_LOG_DIR/${user}/NM_REMOTE_APP_LOG_DIR_SUFFIX/${appId}    */
DECL|field|NM_REMOTE_APP_LOG_DIR_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
init|=
name|NM_PREFIX
operator|+
literal|"remote-app-log-dir-suffix"
decl_stmt|;
DECL|field|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
init|=
literal|"logs"
decl_stmt|;
DECL|field|YARN_LOG_SERVER_URL
specifier|public
specifier|static
specifier|final
name|String
name|YARN_LOG_SERVER_URL
init|=
name|YARN_PREFIX
operator|+
literal|"log.server.url"
decl_stmt|;
DECL|field|YARN_TRACKING_URL_GENERATOR
specifier|public
specifier|static
specifier|final
name|String
name|YARN_TRACKING_URL_GENERATOR
init|=
name|YARN_PREFIX
operator|+
literal|"tracking.url.generator"
decl_stmt|;
comment|/** Amount of memory in GB that can be allocated for containers.*/
DECL|field|NM_PMEM_MB
specifier|public
specifier|static
specifier|final
name|String
name|NM_PMEM_MB
init|=
name|NM_PREFIX
operator|+
literal|"resource.memory-mb"
decl_stmt|;
DECL|field|DEFAULT_NM_PMEM_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_PMEM_MB
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
comment|/** Specifies whether physical memory check is enabled. */
DECL|field|NM_PMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_PMEM_CHECK_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"pmem-check-enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_PMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_PMEM_CHECK_ENABLED
init|=
literal|true
decl_stmt|;
comment|/** Specifies whether physical memory check is enabled. */
DECL|field|NM_VMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_VMEM_CHECK_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"vmem-check-enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_VMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_VMEM_CHECK_ENABLED
init|=
literal|true
decl_stmt|;
comment|/** Conversion ratio for physical memory to virtual memory. */
DECL|field|NM_VMEM_PMEM_RATIO
specifier|public
specifier|static
specifier|final
name|String
name|NM_VMEM_PMEM_RATIO
init|=
name|NM_PREFIX
operator|+
literal|"vmem-pmem-ratio"
decl_stmt|;
DECL|field|DEFAULT_NM_VMEM_PMEM_RATIO
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_VMEM_PMEM_RATIO
init|=
literal|2.1f
decl_stmt|;
comment|/** Number of Physical CPU Cores which can be allocated for containers.*/
DECL|field|NM_VCORES
specifier|public
specifier|static
specifier|final
name|String
name|NM_VCORES
init|=
name|NM_PREFIX
operator|+
literal|"resource.cpu-cores"
decl_stmt|;
DECL|field|DEFAULT_NM_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_VCORES
init|=
literal|8
decl_stmt|;
comment|/** Conversion ratio for physical cores to virtual cores. */
DECL|field|NM_VCORES_PCORES_RATIO
specifier|public
specifier|static
specifier|final
name|String
name|NM_VCORES_PCORES_RATIO
init|=
name|NM_PREFIX
operator|+
literal|"vcores-pcores-ratio"
decl_stmt|;
DECL|field|DEFAULT_NM_VCORES_PCORES_RATIO
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_VCORES_PCORES_RATIO
init|=
literal|2.0f
decl_stmt|;
comment|/** NM Webapp address.**/
DECL|field|NM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_WEBAPP_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_NM_WEBAPP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_WEBAPP_PORT
init|=
literal|8042
decl_stmt|;
DECL|field|DEFAULT_NM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_WEBAPP_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_WEBAPP_PORT
decl_stmt|;
comment|/** How often to monitor containers.*/
DECL|field|NM_CONTAINER_MON_INTERVAL_MS
specifier|public
specifier|final
specifier|static
name|String
name|NM_CONTAINER_MON_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_MON_INTERVAL_MS
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_NM_CONTAINER_MON_INTERVAL_MS
init|=
literal|3000
decl_stmt|;
comment|/** Class that calculates containers current resource utilization.*/
DECL|field|NM_CONTAINER_MON_RESOURCE_CALCULATOR
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_MON_RESOURCE_CALCULATOR
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.resource-calculator.class"
decl_stmt|;
comment|/** Class that calculates process tree resource utilization.*/
DECL|field|NM_CONTAINER_MON_PROCESS_TREE
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_MON_PROCESS_TREE
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.process-tree.class"
decl_stmt|;
comment|/**    * Enable/Disable disks' health checker. Default is true.    * An expert level configuration property.    */
DECL|field|NM_DISK_HEALTH_CHECK_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|NM_DISK_HEALTH_CHECK_ENABLE
init|=
name|NM_PREFIX
operator|+
literal|"disk-health-checker.enable"
decl_stmt|;
comment|/** Frequency of running disks' health checker.*/
DECL|field|NM_DISK_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_DISK_HEALTH_CHECK_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"disk-health-checker.interval-ms"
decl_stmt|;
comment|/** By default, disks' health is checked every 2 minutes. */
DECL|field|DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**    * The minimum fraction of number of disks to be healthy for the nodemanager    * to launch new containers. This applies to nm-local-dirs and nm-log-dirs.    */
DECL|field|NM_MIN_HEALTHY_DISKS_FRACTION
specifier|public
specifier|static
specifier|final
name|String
name|NM_MIN_HEALTHY_DISKS_FRACTION
init|=
name|NM_PREFIX
operator|+
literal|"disk-health-checker.min-healthy-disks"
decl_stmt|;
comment|/**    * By default, at least 5% of disks are to be healthy to say that the node    * is healthy in terms of disks.    */
DECL|field|DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION
init|=
literal|0.25F
decl_stmt|;
comment|/** Frequency of running node health script.*/
DECL|field|NM_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/** Health check script time out period.*/
DECL|field|NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.script.timeout-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
init|=
literal|2
operator|*
name|DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS
decl_stmt|;
comment|/** The health check script to run.*/
DECL|field|NM_HEALTH_CHECK_SCRIPT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_SCRIPT_PATH
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.script.path"
decl_stmt|;
comment|/** The arguments to pass to the health check script.*/
DECL|field|NM_HEALTH_CHECK_SCRIPT_OPTS
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_SCRIPT_OPTS
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.script.opts"
decl_stmt|;
comment|/** The path to the Linux container executor.*/
DECL|field|NM_LINUX_CONTAINER_EXECUTOR_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.path"
decl_stmt|;
comment|/**     * The UNIX group that the linux-container-executor should run as.    * This is intended to be set as part of container-executor.cfg.     */
DECL|field|NM_LINUX_CONTAINER_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_GROUP
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.group"
decl_stmt|;
comment|/** The type of resource enforcement to use with the    *  linux container executor.    */
DECL|field|NM_LINUX_CONTAINER_RESOURCES_HANDLER
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_RESOURCES_HANDLER
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.resources-handler.class"
decl_stmt|;
comment|/** The path the linux container executor should use for cgroups */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.hierarchy"
decl_stmt|;
comment|/** Whether the linux container executor should mount cgroups if not found */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_MOUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.mount"
decl_stmt|;
comment|/** Where the linux container executor should mount cgroups if not found */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.mount-path"
decl_stmt|;
comment|/** T-file compression types used to compress aggregated logs.*/
DECL|field|NM_LOG_AGG_COMPRESSION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_AGG_COMPRESSION_TYPE
init|=
name|NM_PREFIX
operator|+
literal|"log-aggregation.compression-type"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE
init|=
literal|"none"
decl_stmt|;
comment|/** The kerberos principal for the node manager.*/
DECL|field|NM_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|NM_PRINCIPAL
init|=
name|NM_PREFIX
operator|+
literal|"principal"
decl_stmt|;
DECL|field|NM_AUX_SERVICES
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICES
init|=
name|NM_PREFIX
operator|+
literal|"aux-services"
decl_stmt|;
DECL|field|NM_AUX_SERVICE_FMT
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICE_FMT
init|=
name|NM_PREFIX
operator|+
literal|"aux-services.%s.class"
decl_stmt|;
DECL|field|NM_USER_HOME_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_USER_HOME_DIR
init|=
name|NM_PREFIX
operator|+
literal|"user-home-dir"
decl_stmt|;
DECL|field|DEFAULT_NM_USER_HOME_DIR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_USER_HOME_DIR
init|=
literal|"/home/"
decl_stmt|;
comment|////////////////////////////////
comment|// Web Proxy Configs
comment|////////////////////////////////
DECL|field|PROXY_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PREFIX
init|=
literal|"yarn.web-proxy."
decl_stmt|;
comment|/** The kerberos principal for the proxy.*/
DECL|field|PROXY_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PRINCIPAL
init|=
name|PROXY_PREFIX
operator|+
literal|"principal"
decl_stmt|;
comment|/** Keytab for Proxy.*/
DECL|field|PROXY_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_KEYTAB
init|=
name|PROXY_PREFIX
operator|+
literal|"keytab"
decl_stmt|;
comment|/** The address for the web proxy.*/
DECL|field|PROXY_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_ADDRESS
init|=
name|PROXY_PREFIX
operator|+
literal|"address"
decl_stmt|;
comment|/**    * YARN Service Level Authorization    */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCETRACKER
name|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCETRACKER
init|=
literal|"security.resourcetracker.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_CLIENT_RESOURCEMANAGER
name|YARN_SECURITY_SERVICE_AUTHORIZATION_CLIENT_RESOURCEMANAGER
init|=
literal|"security.client.resourcemanager.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_ADMIN
name|YARN_SECURITY_SERVICE_AUTHORIZATION_ADMIN
init|=
literal|"security.admin.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONMASTER_RESOURCEMANAGER
name|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONMASTER_RESOURCEMANAGER
init|=
literal|"security.applicationmaster.resourcemanager.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_CONTAINER_MANAGER
name|YARN_SECURITY_SERVICE_AUTHORIZATION_CONTAINER_MANAGER
init|=
literal|"security.containermanager.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCE_LOCALIZER
name|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCE_LOCALIZER
init|=
literal|"security.resourcelocalizer.protocol.acl"
decl_stmt|;
comment|/** No. of milliseconds to wait between sending a SIGTERM and SIGKILL    * to a running container */
DECL|field|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
init|=
name|NM_PREFIX
operator|+
literal|"sleep-delay-before-sigkill.ms"
decl_stmt|;
DECL|field|DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
init|=
literal|250
decl_stmt|;
comment|/** Max time to wait for a process to come up when trying to cleanup    * container resources */
DECL|field|NM_PROCESS_KILL_WAIT_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_PROCESS_KILL_WAIT_MS
init|=
name|NM_PREFIX
operator|+
literal|"process-kill-wait.ms"
decl_stmt|;
DECL|field|DEFAULT_NM_PROCESS_KILL_WAIT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_PROCESS_KILL_WAIT_MS
init|=
literal|2000
decl_stmt|;
comment|/** Max time to wait to establish a connection to RM when NM starts    */
DECL|field|RESOURCEMANAGER_CONNECT_WAIT_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCEMANAGER_CONNECT_WAIT_SECS
init|=
name|NM_PREFIX
operator|+
literal|"resourcemanager.connect.wait.secs"
decl_stmt|;
DECL|field|DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RESOURCEMANAGER_CONNECT_WAIT_SECS
init|=
literal|15
operator|*
literal|60
decl_stmt|;
comment|/** Time interval between each NM attempt to connect to RM    */
DECL|field|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
init|=
name|NM_PREFIX
operator|+
literal|"resourcemanager.connect.retry_interval.secs"
decl_stmt|;
DECL|field|DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS
init|=
literal|30
decl_stmt|;
comment|/**    * CLASSPATH for YARN applications. A comma-separated list of CLASSPATH    * entries    */
DECL|field|YARN_APPLICATION_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
name|YARN_APPLICATION_CLASSPATH
init|=
name|YARN_PREFIX
operator|+
literal|"application.classpath"
decl_stmt|;
comment|/**    * Default CLASSPATH for YARN applications. A comma-separated list of    * CLASSPATH entries    */
DECL|field|DEFAULT_YARN_APPLICATION_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_YARN_APPLICATION_CLASSPATH
init|=
block|{
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|$
argument_list|()
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/common/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/common/lib/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/hdfs/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/hdfs/lib/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/yarn/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/yarn/lib/*"
block|}
decl_stmt|;
comment|/** Container temp directory */
DECL|field|DEFAULT_CONTAINER_TEMP_DIR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONTAINER_TEMP_DIR
init|=
literal|"./tmp"
decl_stmt|;
DECL|field|IS_MINI_YARN_CLUSTER
specifier|public
specifier|static
specifier|final
name|String
name|IS_MINI_YARN_CLUSTER
init|=
name|YARN_PREFIX
operator|+
literal|"is.minicluster"
decl_stmt|;
comment|/** Whether to use fixed ports with the minicluster. */
DECL|field|YARN_MINICLUSTER_FIXED_PORTS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_MINICLUSTER_FIXED_PORTS
init|=
name|YARN_PREFIX
operator|+
literal|"minicluster.fixed.ports"
decl_stmt|;
comment|/**    * Default is false to be able to run tests concurrently without port    * conflicts.    */
DECL|field|DEFAULT_YARN_MINICLUSTER_FIXED_PORTS
specifier|public
specifier|static
name|boolean
name|DEFAULT_YARN_MINICLUSTER_FIXED_PORTS
init|=
literal|false
decl_stmt|;
comment|/** The log directory for the containers */
DECL|field|YARN_APP_CONTAINER_LOG_DIR
specifier|public
specifier|static
specifier|final
name|String
name|YARN_APP_CONTAINER_LOG_DIR
init|=
name|YARN_PREFIX
operator|+
literal|"app.container.log.dir"
decl_stmt|;
DECL|field|YARN_APP_CONTAINER_LOG_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_APP_CONTAINER_LOG_SIZE
init|=
name|YARN_PREFIX
operator|+
literal|"app.container.log.filesize"
decl_stmt|;
comment|////////////////////////////////
comment|// Other Configs
comment|////////////////////////////////
comment|/**    * The interval of the yarn client's querying application state after    * application submission. The unit is millisecond.    */
DECL|field|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"client.app-submission.poll-interval"
decl_stmt|;
DECL|field|DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
comment|/**    * Max number of threads in NMClientAsync to process container management    * events    */
DECL|field|NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
init|=
name|YARN_PREFIX
operator|+
literal|"client.nodemanager-client-async.thread-pool-max-size"
decl_stmt|;
DECL|field|DEFAULT_NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
init|=
literal|500
decl_stmt|;
DECL|method|YarnConfiguration ()
specifier|public
name|YarnConfiguration
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|YarnConfiguration (Configuration conf)
specifier|public
name|YarnConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|conf
operator|instanceof
name|YarnConfiguration
operator|)
condition|)
block|{
name|this
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getProxyHostAndPort (Configuration conf)
specifier|public
specifier|static
name|String
name|getProxyHostAndPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|PROXY_ADDRESS
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
operator|||
name|addr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addr
operator|=
name|getRMWebAppHostAndPort
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|addr
return|;
block|}
DECL|method|getRMWebAppHostAndPort (Configuration conf)
specifier|public
specifier|static
name|String
name|getRMWebAppHostAndPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|InetSocketAddress
name|address
init|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_PORT
argument_list|)
decl_stmt|;
name|address
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|InetAddress
name|resolved
init|=
name|address
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolved
operator|==
literal|null
operator|||
name|resolved
operator|.
name|isAnyLocalAddress
argument_list|()
operator|||
name|resolved
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
name|String
name|lh
init|=
name|address
operator|.
name|getHostName
argument_list|()
decl_stmt|;
try|try
block|{
name|lh
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|//Ignore and fallback.
block|}
name|sb
operator|.
name|append
argument_list|(
name|lh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getRMWebAppURL (Configuration conf)
specifier|public
specifier|static
name|String
name|getRMWebAppURL
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|JOINER
operator|.
name|join
argument_list|(
literal|"http://"
argument_list|,
name|getRMWebAppHostAndPort
argument_list|(
name|conf
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

