begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|HadoopIllegalArgumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ActiveStandbyElector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|BasicDiskValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|YarnConfiguration
specifier|public
class|class
name|YarnConfiguration
extends|extends
name|Configuration
block|{
annotation|@
name|Private
DECL|field|DR_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DR_CONFIGURATION_FILE
init|=
literal|"dynamic-resources.xml"
decl_stmt|;
annotation|@
name|Private
DECL|field|CS_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|CS_CONFIGURATION_FILE
init|=
literal|"capacity-scheduler.xml"
decl_stmt|;
annotation|@
name|Private
DECL|field|HADOOP_POLICY_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_POLICY_CONFIGURATION_FILE
init|=
literal|"hadoop-policy.xml"
decl_stmt|;
annotation|@
name|Private
DECL|field|YARN_SITE_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_SITE_CONFIGURATION_FILE
init|=
literal|"yarn-site.xml"
decl_stmt|;
DECL|field|YARN_DEFAULT_CONFIGURATION_FILE
specifier|private
specifier|static
specifier|final
name|String
name|YARN_DEFAULT_CONFIGURATION_FILE
init|=
literal|"yarn-default.xml"
decl_stmt|;
annotation|@
name|Private
DECL|field|CORE_SITE_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|CORE_SITE_CONFIGURATION_FILE
init|=
literal|"core-site.xml"
decl_stmt|;
annotation|@
name|Private
DECL|field|RESOURCE_TYPES_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCE_TYPES_CONFIGURATION_FILE
init|=
literal|"resource-types.xml"
decl_stmt|;
annotation|@
name|Private
DECL|field|NODE_RESOURCES_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|NODE_RESOURCES_CONFIGURATION_FILE
init|=
literal|"node-resources.xml"
decl_stmt|;
annotation|@
name|Private
DECL|field|RM_CONFIGURATION_FILES
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|RM_CONFIGURATION_FILES
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RESOURCE_TYPES_CONFIGURATION_FILE
argument_list|,
name|DR_CONFIGURATION_FILE
argument_list|,
name|CS_CONFIGURATION_FILE
argument_list|,
name|HADOOP_POLICY_CONFIGURATION_FILE
argument_list|,
name|YARN_SITE_CONFIGURATION_FILE
argument_list|,
name|CORE_SITE_CONFIGURATION_FILE
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Private
DECL|field|NM_CONFIGURATION_FILES
specifier|public
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|NM_CONFIGURATION_FILES
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NODE_RESOURCES_CONFIGURATION_FILE
argument_list|,
name|DR_CONFIGURATION_FILE
argument_list|,
name|CS_CONFIGURATION_FILE
argument_list|,
name|HADOOP_POLICY_CONFIGURATION_FILE
argument_list|,
name|YARN_SITE_CONFIGURATION_FILE
argument_list|,
name|CORE_SITE_CONFIGURATION_FILE
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Evolving
DECL|field|APPLICATION_MAX_TAGS
specifier|public
specifier|static
specifier|final
name|int
name|APPLICATION_MAX_TAGS
init|=
literal|10
decl_stmt|;
annotation|@
name|Evolving
DECL|field|APPLICATION_MAX_TAG_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|APPLICATION_MAX_TAG_LENGTH
init|=
literal|100
decl_stmt|;
static|static
block|{
name|addDeprecatedKeys
argument_list|()
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|YARN_DEFAULT_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
block|}
DECL|method|addDeprecatedKeys ()
specifier|private
specifier|static
name|void
name|addDeprecatedKeys
parameter_list|()
block|{
name|Configuration
operator|.
name|addDeprecations
argument_list|(
operator|new
name|DeprecationDelta
index|[]
block|{
operator|new
name|DeprecationDelta
argument_list|(
literal|"yarn.client.max-nodemanagers-proxies"
argument_list|,
name|NM_CLIENT_MAX_NM_PROXIES
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecations
argument_list|(
operator|new
name|DeprecationDelta
index|[]
block|{
operator|new
name|DeprecationDelta
argument_list|(
name|RM_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|)
block|,
operator|new
name|DeprecationDelta
argument_list|(
name|RM_ZK_ACL
argument_list|,
name|CommonConfigurationKeys
operator|.
name|ZK_ACL
argument_list|)
block|,
operator|new
name|DeprecationDelta
argument_list|(
name|RM_ZK_AUTH
argument_list|,
name|CommonConfigurationKeys
operator|.
name|ZK_AUTH
argument_list|)
block|,
operator|new
name|DeprecationDelta
argument_list|(
name|RM_ZK_ADDRESS
argument_list|,
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|)
block|,
operator|new
name|DeprecationDelta
argument_list|(
name|RM_ZK_NUM_RETRIES
argument_list|,
name|CommonConfigurationKeys
operator|.
name|ZK_NUM_RETRIES
argument_list|)
block|,
operator|new
name|DeprecationDelta
argument_list|(
name|RM_ZK_TIMEOUT_MS
argument_list|,
name|CommonConfigurationKeys
operator|.
name|ZK_TIMEOUT_MS
argument_list|)
block|,
operator|new
name|DeprecationDelta
argument_list|(
name|RM_ZK_RETRY_INTERVAL_MS
argument_list|,
name|CommonConfigurationKeys
operator|.
name|ZK_RETRY_INTERVAL_MS
argument_list|)
block|,     }
argument_list|)
expr_stmt|;
block|}
comment|//Configurations
DECL|field|YARN_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|YARN_PREFIX
init|=
literal|"yarn."
decl_stmt|;
comment|/////////////////////////////
comment|// Resource types configs
comment|////////////////////////////
DECL|field|RESOURCE_TYPES
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCE_TYPES
init|=
name|YarnConfiguration
operator|.
name|YARN_PREFIX
operator|+
literal|"resource-types"
decl_stmt|;
DECL|field|NM_RESOURCES_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_RESOURCES_PREFIX
init|=
name|YarnConfiguration
operator|.
name|NM_PREFIX
operator|+
literal|"resource-type."
decl_stmt|;
comment|/** Delay before deleting resource to ease debugging of NM issues */
DECL|field|DEBUG_NM_DELETE_DELAY_SEC
specifier|public
specifier|static
specifier|final
name|String
name|DEBUG_NM_DELETE_DELAY_SEC
init|=
name|YarnConfiguration
operator|.
name|NM_PREFIX
operator|+
literal|"delete.debug-delay-sec"
decl_stmt|;
DECL|field|NM_LOG_CONTAINER_DEBUG_INFO
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_CONTAINER_DEBUG_INFO
init|=
name|YarnConfiguration
operator|.
name|NM_PREFIX
operator|+
literal|"log-container-debug-info.enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_CONTAINER_DEBUG_INFO
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_LOG_CONTAINER_DEBUG_INFO
init|=
literal|true
decl_stmt|;
comment|////////////////////////////////
comment|// IPC Configs
comment|////////////////////////////////
DECL|field|IPC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|IPC_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"ipc."
decl_stmt|;
comment|/** Factory to create client IPC classes.*/
DECL|field|IPC_CLIENT_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|IPC_CLIENT_FACTORY_CLASS
init|=
name|IPC_PREFIX
operator|+
literal|"client.factory.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_CLIENT_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_CLIENT_FACTORY_CLASS
init|=
literal|"org.apache.hadoop.yarn.factories.impl.pb.RpcClientFactoryPBImpl"
decl_stmt|;
comment|/** Factory to create server IPC classes.*/
DECL|field|IPC_SERVER_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|IPC_SERVER_FACTORY_CLASS
init|=
name|IPC_PREFIX
operator|+
literal|"server.factory.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_SERVER_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_SERVER_FACTORY_CLASS
init|=
literal|"org.apache.hadoop.yarn.factories.impl.pb.RpcServerFactoryPBImpl"
decl_stmt|;
comment|/** Factory to create serializeable records.*/
DECL|field|IPC_RECORD_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|IPC_RECORD_FACTORY_CLASS
init|=
name|IPC_PREFIX
operator|+
literal|"record.factory.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_RECORD_FACTORY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_RECORD_FACTORY_CLASS
init|=
literal|"org.apache.hadoop.yarn.factories.impl.pb.RecordFactoryPBImpl"
decl_stmt|;
comment|/** RPC class implementation*/
DECL|field|IPC_RPC_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|IPC_RPC_IMPL
init|=
name|IPC_PREFIX
operator|+
literal|"rpc.class"
decl_stmt|;
DECL|field|DEFAULT_IPC_RPC_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_IPC_RPC_IMPL
init|=
literal|"org.apache.hadoop.yarn.ipc.HadoopYarnProtoRPC"
decl_stmt|;
comment|////////////////////////////////
comment|// Resource Manager Configs
comment|////////////////////////////////
DECL|field|RM_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RM_PREFIX
init|=
literal|"yarn.resourcemanager."
decl_stmt|;
DECL|field|RM_CLUSTER_ID
specifier|public
specifier|static
specifier|final
name|String
name|RM_CLUSTER_ID
init|=
name|RM_PREFIX
operator|+
literal|"cluster-id"
decl_stmt|;
DECL|field|DEFAULT_RM_CLUSTER_ID
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_CLUSTER_ID
init|=
literal|"yarn_cluster"
decl_stmt|;
DECL|field|RM_HOSTNAME
specifier|public
specifier|static
specifier|final
name|String
name|RM_HOSTNAME
init|=
name|RM_PREFIX
operator|+
literal|"hostname"
decl_stmt|;
DECL|field|RM_EPOCH
specifier|public
specifier|static
specifier|final
name|String
name|RM_EPOCH
init|=
name|RM_PREFIX
operator|+
literal|"epoch"
decl_stmt|;
DECL|field|DEFAULT_RM_EPOCH
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_EPOCH
init|=
literal|0L
decl_stmt|;
comment|/** The address of the applications manager interface in the RM.*/
DECL|field|RM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_RM_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_PORT
init|=
literal|8032
decl_stmt|;
DECL|field|DEFAULT_RM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_PORT
decl_stmt|;
DECL|field|RM_APPLICATION_MASTER_SERVICE_PROCESSORS
specifier|public
specifier|static
specifier|final
name|String
name|RM_APPLICATION_MASTER_SERVICE_PROCESSORS
init|=
name|RM_PREFIX
operator|+
literal|"application-master-service.processors"
decl_stmt|;
DECL|field|RM_AUTO_UPDATE_CONTAINERS
specifier|public
specifier|static
specifier|final
name|String
name|RM_AUTO_UPDATE_CONTAINERS
init|=
name|RM_PREFIX
operator|+
literal|"auto-update.containers"
decl_stmt|;
DECL|field|DEFAULT_RM_AUTO_UPDATE_CONTAINERS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_AUTO_UPDATE_CONTAINERS
init|=
literal|false
decl_stmt|;
comment|/** The actual bind address for the RM.*/
DECL|field|RM_BIND_HOST
specifier|public
specifier|static
specifier|final
name|String
name|RM_BIND_HOST
init|=
name|RM_PREFIX
operator|+
literal|"bind-host"
decl_stmt|;
comment|/** The number of threads used to handle applications manager requests.*/
DECL|field|RM_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_CLIENT_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** Number of threads used to launch/cleanup AM.*/
DECL|field|RM_AMLAUNCHER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_AMLAUNCHER_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"amlauncher.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_AMLAUNCHER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_AMLAUNCHER_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** Retry times to connect with NM.*/
DECL|field|RM_NODEMANAGER_CONNECT_RETRIES
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODEMANAGER_CONNECT_RETRIES
init|=
name|RM_PREFIX
operator|+
literal|"nodemanager-connect-retries"
decl_stmt|;
DECL|field|DEFAULT_RM_NODEMANAGER_CONNECT_RETRIES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_NODEMANAGER_CONNECT_RETRIES
init|=
literal|10
decl_stmt|;
comment|/** The Kerberos principal for the resource manager.*/
DECL|field|RM_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|RM_PRINCIPAL
init|=
name|RM_PREFIX
operator|+
literal|"principal"
decl_stmt|;
comment|/** The address of the scheduler interface.*/
DECL|field|RM_SCHEDULER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.address"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_PORT
init|=
literal|8030
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_SCHEDULER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_SCHEDULER_PORT
decl_stmt|;
comment|/** Miniumum request grant-able by the RM scheduler. */
DECL|field|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.minimum-allocation-mb"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
init|=
literal|1024
decl_stmt|;
DECL|field|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.minimum-allocation-vcores"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
init|=
literal|1
decl_stmt|;
comment|/** Maximum request grant-able by the RM scheduler. */
DECL|field|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.maximum-allocation-mb"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
init|=
literal|8192
decl_stmt|;
DECL|field|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.maximum-allocation-vcores"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
init|=
literal|4
decl_stmt|;
comment|/** Number of threads to handle scheduler interface.*/
DECL|field|RM_SCHEDULER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** If the port should be included or not in the node name. The node name    * is used by the scheduler for resource requests allocation location     * matching. Typically this is just the hostname, using the port is needed    * when using minicluster and specific NM are required.*/
DECL|field|RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.include-port-in-node-name"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_SCHEDULER_USE_PORT_FOR_NODE_NAME
init|=
literal|false
decl_stmt|;
comment|/** Configured scheduler queue placement rules. */
DECL|field|QUEUE_PLACEMENT_RULES
specifier|public
specifier|static
specifier|final
name|String
name|QUEUE_PLACEMENT_RULES
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.queue-placement-rules"
decl_stmt|;
comment|/** UserGroupMappingPlacementRule configuration string. */
DECL|field|USER_GROUP_PLACEMENT_RULE
specifier|public
specifier|static
specifier|final
name|String
name|USER_GROUP_PLACEMENT_RULE
init|=
literal|"user-group"
decl_stmt|;
DECL|field|APP_NAME_PLACEMENT_RULE
specifier|public
specifier|static
specifier|final
name|String
name|APP_NAME_PLACEMENT_RULE
init|=
literal|"app-name"
decl_stmt|;
comment|/** Enable Resource Manager webapp ui actions */
DECL|field|RM_WEBAPP_UI_ACTIONS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_UI_ACTIONS_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"webapp.ui-actions.enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED
init|=
literal|true
decl_stmt|;
comment|/** Whether the RM should enable Reservation System */
DECL|field|RM_RESERVATION_SYSTEM_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESERVATION_SYSTEM_ENABLE
init|=
name|RM_PREFIX
operator|+
literal|"reservation-system.enable"
decl_stmt|;
DECL|field|DEFAULT_RM_RESERVATION_SYSTEM_ENABLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_RESERVATION_SYSTEM_ENABLE
init|=
literal|false
decl_stmt|;
comment|/** The class to use as the Reservation System. */
DECL|field|RM_RESERVATION_SYSTEM_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESERVATION_SYSTEM_CLASS
init|=
name|RM_PREFIX
operator|+
literal|"reservation-system.class"
decl_stmt|;
comment|/** The PlanFollower for the Reservation System. */
DECL|field|RM_RESERVATION_SYSTEM_PLAN_FOLLOWER
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESERVATION_SYSTEM_PLAN_FOLLOWER
init|=
name|RM_PREFIX
operator|+
literal|"reservation-system.plan.follower"
decl_stmt|;
comment|/** The step size of the Reservation System. */
DECL|field|RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP
init|=
name|RM_PREFIX
operator|+
literal|"reservation-system.planfollower.time-step"
decl_stmt|;
DECL|field|DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_RESERVATION_SYSTEM_PLAN_FOLLOWER_TIME_STEP
init|=
literal|1000L
decl_stmt|;
comment|/** The maximum periodicity for the Reservation System. */
DECL|field|RM_RESERVATION_SYSTEM_MAX_PERIODICITY
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESERVATION_SYSTEM_MAX_PERIODICITY
init|=
name|RM_PREFIX
operator|+
literal|"reservation-system.max-periodicity"
decl_stmt|;
DECL|field|DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY
init|=
literal|86400000L
decl_stmt|;
comment|/**    * Enable periodic monitor threads.    * @see #RM_SCHEDULER_MONITOR_POLICIES    */
DECL|field|RM_SCHEDULER_ENABLE_MONITORS
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_ENABLE_MONITORS
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.monitor.enable"
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER_ENABLE_MONITORS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_SCHEDULER_ENABLE_MONITORS
init|=
literal|false
decl_stmt|;
comment|/** List of SchedulingEditPolicy classes affecting the scheduler. */
DECL|field|RM_SCHEDULER_MONITOR_POLICIES
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MONITOR_POLICIES
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.monitor.policies"
decl_stmt|;
comment|/** The address of the RM web application.*/
DECL|field|RM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_WEBAPP_PORT
init|=
literal|8088
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_WEBAPP_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_WEBAPP_PORT
decl_stmt|;
comment|/** The https address of the RM web application.*/
DECL|field|RM_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_HTTPS_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"webapp.https.address"
decl_stmt|;
DECL|field|YARN_SSL_CLIENT_HTTPS_NEED_AUTH_DEFAULT
specifier|public
specifier|static
specifier|final
name|boolean
name|YARN_SSL_CLIENT_HTTPS_NEED_AUTH_DEFAULT
init|=
literal|false
decl_stmt|;
DECL|field|YARN_SSL_SERVER_RESOURCE_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|YARN_SSL_SERVER_RESOURCE_DEFAULT
init|=
literal|"ssl-server.xml"
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_HTTPS_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_WEBAPP_HTTPS_PORT
init|=
literal|8090
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_WEBAPP_HTTPS_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_WEBAPP_HTTPS_PORT
decl_stmt|;
comment|/**    * Enable YARN WebApp V2.    */
DECL|field|YARN_WEBAPP_UI2_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_WEBAPP_UI2_ENABLE
init|=
literal|"yarn."
operator|+
literal|"webapp.ui2.enable"
decl_stmt|;
DECL|field|DEFAULT_YARN_WEBAPP_UI2_ENABLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_WEBAPP_UI2_ENABLE
init|=
literal|false
decl_stmt|;
DECL|field|YARN_WEBAPP_UI2_WARFILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|YARN_WEBAPP_UI2_WARFILE_PATH
init|=
literal|"yarn."
operator|+
literal|"webapp.ui2.war-file-path"
decl_stmt|;
DECL|field|YARN_API_SERVICES_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_API_SERVICES_ENABLE
init|=
literal|"yarn."
operator|+
literal|"webapp.api-service.enable"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_YARN_API_SYSTEM_SERVICES_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_API_SYSTEM_SERVICES_CLASS
init|=
literal|"org.apache.hadoop.yarn.service.client.SystemServiceManagerImpl"
decl_stmt|;
DECL|field|RM_RESOURCE_TRACKER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESOURCE_TRACKER_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"resource-tracker.address"
decl_stmt|;
DECL|field|DEFAULT_RM_RESOURCE_TRACKER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_RESOURCE_TRACKER_PORT
init|=
literal|8031
decl_stmt|;
DECL|field|DEFAULT_RM_RESOURCE_TRACKER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_RESOURCE_TRACKER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_RESOURCE_TRACKER_PORT
decl_stmt|;
comment|/** The expiry interval for application master reporting.*/
DECL|field|RM_AM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_AM_EXPIRY_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"am.liveness-monitor.expiry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_AM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_AM_EXPIRY_INTERVAL_MS
init|=
literal|600000
decl_stmt|;
comment|/** How long to wait until a node manager is considered dead.*/
DECL|field|RM_NM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NM_EXPIRY_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"nm.liveness-monitor.expiry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_NM_EXPIRY_INTERVAL_MS
init|=
literal|600000
decl_stmt|;
comment|/** Are acls enabled.*/
DECL|field|YARN_ACL_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_ACL_ENABLE
init|=
name|YARN_PREFIX
operator|+
literal|"acl.enable"
decl_stmt|;
DECL|field|DEFAULT_YARN_ACL_ENABLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_ACL_ENABLE
init|=
literal|false
decl_stmt|;
comment|/** Are reservation acls enabled.*/
DECL|field|YARN_RESERVATION_ACL_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_RESERVATION_ACL_ENABLE
init|=
name|YARN_PREFIX
operator|+
literal|"acl.reservation-enable"
decl_stmt|;
DECL|field|DEFAULT_YARN_RESERVATION_ACL_ENABLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_RESERVATION_ACL_ENABLE
init|=
literal|false
decl_stmt|;
DECL|method|isAclEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isAclEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YARN_ACL_ENABLE
argument_list|,
name|DEFAULT_YARN_ACL_ENABLE
argument_list|)
return|;
block|}
comment|/** ACL of who can be admin of YARN cluster.*/
DECL|field|YARN_ADMIN_ACL
specifier|public
specifier|static
specifier|final
name|String
name|YARN_ADMIN_ACL
init|=
name|YARN_PREFIX
operator|+
literal|"admin.acl"
decl_stmt|;
DECL|field|DEFAULT_YARN_ADMIN_ACL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_ADMIN_ACL
init|=
literal|"*"
decl_stmt|;
comment|/** ACL used in case none is found. Allows nothing. */
DECL|field|DEFAULT_YARN_APP_ACL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_APP_ACL
init|=
literal|" "
decl_stmt|;
comment|/** Setting that controls whether opportunistic container allocation    *  is enabled or not. */
annotation|@
name|Unstable
DECL|field|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"opportunistic-container-allocation.enabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
DECL|field|DEFAULT_OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
name|DEFAULT_OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** Number of nodes to be used by the Opportunistic Container allocator for    * dispatching containers during container allocation. */
annotation|@
name|Unstable
DECL|field|OPP_CONTAINER_ALLOCATION_NODES_NUMBER_USED
specifier|public
specifier|static
specifier|final
name|String
name|OPP_CONTAINER_ALLOCATION_NODES_NUMBER_USED
init|=
name|RM_PREFIX
operator|+
literal|"opportunistic-container-allocation.nodes-used"
decl_stmt|;
DECL|field|DEFAULT_OPP_CONTAINER_ALLOCATION_NODES_NUMBER_USED
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_OPP_CONTAINER_ALLOCATION_NODES_NUMBER_USED
init|=
literal|10
decl_stmt|;
comment|/** Frequency for computing least loaded NMs. */
annotation|@
name|Unstable
DECL|field|NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"nm-container-queuing.sorting-nodes-interval-ms"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS
name|DEFAULT_NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
comment|/** Comparator for determining node load for scheduling of opportunistic    * containers. */
annotation|@
name|Unstable
DECL|field|NM_CONTAINER_QUEUING_LOAD_COMPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_LOAD_COMPARATOR
init|=
name|RM_PREFIX
operator|+
literal|"nm-container-queuing.load-comparator"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_LOAD_COMPARATOR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_CONTAINER_QUEUING_LOAD_COMPARATOR
init|=
literal|"QUEUE_LENGTH"
decl_stmt|;
comment|/** Value of standard deviation used for calculation of queue limit    * thresholds. */
annotation|@
name|Unstable
DECL|field|NM_CONTAINER_QUEUING_LIMIT_STDEV
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_LIMIT_STDEV
init|=
name|RM_PREFIX
operator|+
literal|"nm-container-queuing.queue-limit-stdev"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_LIMIT_STDEV
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_CONTAINER_QUEUING_LIMIT_STDEV
init|=
literal|1.0f
decl_stmt|;
comment|/** Min length of container queue at NodeManager. This is a cluster-wide    * configuration that acts as the lower-bound of optimal queue length    * calculated by the NodeQueueLoadMonitor */
annotation|@
name|Unstable
DECL|field|NM_CONTAINER_QUEUING_MIN_QUEUE_LENGTH
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_MIN_QUEUE_LENGTH
init|=
name|RM_PREFIX
operator|+
literal|"nm-container-queuing.min-queue-length"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_MIN_QUEUE_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_QUEUING_MIN_QUEUE_LENGTH
init|=
literal|5
decl_stmt|;
comment|/** Max length of container queue at NodeManager. This is a cluster-wide    * configuration that acts as the upper-bound of optimal queue length    * calculated by the NodeQueueLoadMonitor */
annotation|@
name|Unstable
DECL|field|NM_CONTAINER_QUEUING_MAX_QUEUE_LENGTH
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_MAX_QUEUE_LENGTH
init|=
name|RM_PREFIX
operator|+
literal|"nm-container-queuing.max-queue-length"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_MAX_QUEUE_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_QUEUING_MAX_QUEUE_LENGTH
init|=
literal|15
decl_stmt|;
comment|/** Min queue wait time for a container at a NodeManager. */
annotation|@
name|Unstable
DECL|field|NM_CONTAINER_QUEUING_MIN_QUEUE_WAIT_TIME_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_MIN_QUEUE_WAIT_TIME_MS
init|=
name|RM_PREFIX
operator|+
literal|"nm-container-queuing.min-queue-wait-time-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_MIN_QUEUE_WAIT_TIME_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_QUEUING_MIN_QUEUE_WAIT_TIME_MS
init|=
literal|10
decl_stmt|;
comment|/** Max queue wait time for a container queue at a NodeManager. */
annotation|@
name|Unstable
DECL|field|NM_CONTAINER_QUEUING_MAX_QUEUE_WAIT_TIME_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_MAX_QUEUE_WAIT_TIME_MS
init|=
name|RM_PREFIX
operator|+
literal|"nm-container-queuing.max-queue-wait-time-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_MAX_QUEUE_WAIT_TIME_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_QUEUING_MAX_QUEUE_WAIT_TIME_MS
init|=
literal|100
decl_stmt|;
comment|/**    * Enable/disable intermediate-data encryption at YARN level. For now, this    * only is used by the FileSystemRMStateStore to setup right file-system    * security attributes.    */
annotation|@
name|Private
DECL|field|YARN_INTERMEDIATE_DATA_ENCRYPTION
specifier|public
specifier|static
specifier|final
name|String
name|YARN_INTERMEDIATE_DATA_ENCRYPTION
init|=
name|YARN_PREFIX
operator|+
literal|"intermediate-data-encryption.enable"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_INTERMEDIATE_DATA_ENCRYPTION
init|=
literal|false
decl_stmt|;
comment|/** The address of the RM admin interface.*/
DECL|field|RM_ADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_ADMIN_ADDRESS
init|=
name|RM_PREFIX
operator|+
literal|"admin.address"
decl_stmt|;
DECL|field|DEFAULT_RM_ADMIN_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_ADMIN_PORT
init|=
literal|8033
decl_stmt|;
DECL|field|DEFAULT_RM_ADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_ADMIN_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_RM_ADMIN_PORT
decl_stmt|;
comment|/**Number of threads used to handle RM admin interface.*/
DECL|field|RM_ADMIN_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_ADMIN_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"admin.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT
init|=
literal|1
decl_stmt|;
comment|/**    * The maximum number of application attempts.    * It's a global setting for all application masters.    */
DECL|field|RM_AM_MAX_ATTEMPTS
specifier|public
specifier|static
specifier|final
name|String
name|RM_AM_MAX_ATTEMPTS
init|=
name|RM_PREFIX
operator|+
literal|"am.max-attempts"
decl_stmt|;
DECL|field|DEFAULT_RM_AM_MAX_ATTEMPTS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_AM_MAX_ATTEMPTS
init|=
literal|2
decl_stmt|;
comment|/** The keytab for the resource manager.*/
DECL|field|RM_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|RM_KEYTAB
init|=
name|RM_PREFIX
operator|+
literal|"keytab"
decl_stmt|;
comment|/**The kerberos principal to be used for spnego filter for RM.*/
DECL|field|RM_WEBAPP_SPNEGO_USER_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_SPNEGO_USER_NAME_KEY
init|=
name|RM_PREFIX
operator|+
literal|"webapp.spnego-principal"
decl_stmt|;
comment|/**The kerberos keytab to be used for spnego filter for RM.*/
DECL|field|RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
init|=
name|RM_PREFIX
operator|+
literal|"webapp.spnego-keytab-file"
decl_stmt|;
comment|/**    * Flag to enable override of the default kerberos authentication filter with    * the RM authentication filter to allow authentication using delegation    * tokens(fallback to kerberos if the tokens are missing). Only applicable    * when the http authentication type is kerberos.    */
DECL|field|RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER
init|=
name|RM_PREFIX
operator|+
literal|"webapp.delegation-token-auth-filter.enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER
init|=
literal|true
decl_stmt|;
comment|/** Enable cross origin (CORS) support. **/
DECL|field|RM_WEBAPP_ENABLE_CORS_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|RM_WEBAPP_ENABLE_CORS_FILTER
init|=
name|RM_PREFIX
operator|+
literal|"webapp.cross-origin.enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER
init|=
literal|false
decl_stmt|;
comment|/** How long to wait until a container is considered dead.*/
DECL|field|RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"rm.container-allocation.expiry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS
init|=
literal|600000
decl_stmt|;
comment|/** Path to file with nodes to include.*/
DECL|field|RM_NODES_INCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODES_INCLUDE_FILE_PATH
init|=
name|RM_PREFIX
operator|+
literal|"nodes.include-path"
decl_stmt|;
DECL|field|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_NODES_INCLUDE_FILE_PATH
init|=
literal|""
decl_stmt|;
comment|/** Path to file with nodes to exclude.*/
DECL|field|RM_NODES_EXCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODES_EXCLUDE_FILE_PATH
init|=
name|RM_PREFIX
operator|+
literal|"nodes.exclude-path"
decl_stmt|;
DECL|field|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_NODES_EXCLUDE_FILE_PATH
init|=
literal|""
decl_stmt|;
comment|/** Number of threads to handle resource tracker calls.*/
DECL|field|RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"resource-tracker.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_RESOURCE_TRACKER_CLIENT_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** The class to use as the resource scheduler.*/
DECL|field|RM_SCHEDULER
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER
init|=
name|RM_PREFIX
operator|+
literal|"scheduler.class"
decl_stmt|;
comment|/**    * Specify which handler will be used to process PlacementConstraints.    * For details on PlacementConstraints, please refer to    * {@link org.apache.hadoop.yarn.api.resource.PlacementConstraint}    */
annotation|@
name|Private
DECL|field|RM_PLACEMENT_CONSTRAINTS_HANDLER
specifier|public
specifier|static
specifier|final
name|String
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
init|=
name|RM_PREFIX
operator|+
literal|"placement-constraints.handler"
decl_stmt|;
comment|/**    * This handler rejects all allocate calls made by an application, if they    * contain a {@link org.apache.hadoop.yarn.api.records.SchedulingRequest}.    */
annotation|@
name|Private
DECL|field|DISABLED_RM_PLACEMENT_CONSTRAINTS_HANDLER
specifier|public
specifier|static
specifier|final
name|String
name|DISABLED_RM_PLACEMENT_CONSTRAINTS_HANDLER
init|=
literal|"disabled"
decl_stmt|;
comment|/**    * Using this handler, the placement of containers with constraints is    * determined as a pre-processing step before the capacity or the fair    * scheduler is called. Once the placement is decided, the capacity/fair    * scheduler is invoked to perform the actual allocation. The advantage of    * this approach is that it supports all constraint types (affinity,    * anti-affinity, cardinality). Moreover, it considers multiple containers at    * a time, which allows to satisfy more constraints than a container-at-a-time    * approach can achieve. As it sits outside the main scheduler, it can be used    * by both the capacity and fair schedulers. Note that at the moment it does    * not account for task priorities within an application, given that such    * priorities might be conflicting with the placement constraints.    */
annotation|@
name|Private
DECL|field|PROCESSOR_RM_PLACEMENT_CONSTRAINTS_HANDLER
specifier|public
specifier|static
specifier|final
name|String
name|PROCESSOR_RM_PLACEMENT_CONSTRAINTS_HANDLER
init|=
literal|"placement-processor"
decl_stmt|;
comment|/**    * Using this handler, containers with constraints will be placed by the main    * scheduler. If the configured RM scheduler    *<pre>yarn.resourcemanager.scheduler.class</pre>    * cannot handle placement constraints, the corresponding SchedulingRequests    * will be rejected. As of now, only the capacity scheduler supports    * SchedulingRequests. In particular, it currently supports anti-affinity    * constraints (no affinity or cardinality) and places one container at a    * time. The advantage of this handler compared to the placement-processor is    * that it follows the same ordering rules for queues (sorted by utilization,    * priority) and apps (sorted by FIFO/fairness/priority) as the ones followed    * by the main scheduler.    */
annotation|@
name|Private
specifier|public
specifier|static
specifier|final
name|String
DECL|field|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
name|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
init|=
literal|"scheduler"
decl_stmt|;
comment|/** Placement Algorithm. */
DECL|field|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_CLASS
init|=
name|RM_PREFIX
operator|+
literal|"placement-constraints.algorithm.class"
decl_stmt|;
comment|/** Used for BasicPlacementAlgorithm - default SERIAL. **/
DECL|field|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR
specifier|public
specifier|static
specifier|final
name|String
name|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_ITERATOR
init|=
name|RM_PREFIX
operator|+
literal|"placement-constraints.algorithm.iterator"
decl_stmt|;
DECL|field|RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
specifier|public
specifier|static
specifier|final
name|String
name|RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
init|=
name|RM_PREFIX
operator|+
literal|"placement-constraints.retry-attempts"
decl_stmt|;
DECL|field|DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
init|=
literal|3
decl_stmt|;
DECL|field|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE
init|=
name|RM_PREFIX
operator|+
literal|"placement-constraints.algorithm.pool-size"
decl_stmt|;
DECL|field|DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_PLACEMENT_CONSTRAINTS_ALGORITHM_POOL_SIZE
init|=
literal|1
decl_stmt|;
DECL|field|RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE
init|=
name|RM_PREFIX
operator|+
literal|"placement-constraints.scheduler.pool-size"
decl_stmt|;
DECL|field|DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_PLACEMENT_CONSTRAINTS_SCHEDULER_POOL_SIZE
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_RM_SCHEDULER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_SCHEDULER
init|=
literal|"org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler"
decl_stmt|;
comment|/** RM set next Heartbeat interval for NM */
DECL|field|RM_NM_HEARTBEAT_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NM_HEARTBEAT_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"nodemanagers.heartbeat-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
comment|/** Number of worker threads that write the history data. */
DECL|field|RM_HISTORY_WRITER_MULTI_THREADED_DISPATCHER_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|RM_HISTORY_WRITER_MULTI_THREADED_DISPATCHER_POOL_SIZE
init|=
name|RM_PREFIX
operator|+
literal|"history-writer.multi-threaded-dispatcher.pool-size"
decl_stmt|;
DECL|field|DEFAULT_RM_HISTORY_WRITER_MULTI_THREADED_DISPATCHER_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_HISTORY_WRITER_MULTI_THREADED_DISPATCHER_POOL_SIZE
init|=
literal|10
decl_stmt|;
comment|/**    *  The setting that controls whether yarn system metrics is published on the    *  timeline server or not by RM. This configuration setting is for ATS V1.    *  This is now deprecated in favor of SYSTEM_METRICS_PUBLISHER_ENABLED.    */
DECL|field|RM_SYSTEM_METRICS_PUBLISHER_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_SYSTEM_METRICS_PUBLISHER_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"system-metrics-publisher.enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    *  The setting that controls whether yarn system metrics is published on the    *  timeline server or not by RM and NM. This configuration setting is for    *  ATS v2.    */
DECL|field|SYSTEM_METRICS_PUBLISHER_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|SYSTEM_METRICS_PUBLISHER_ENABLED
init|=
name|YARN_PREFIX
operator|+
literal|"system-metrics-publisher.enabled"
decl_stmt|;
DECL|field|DEFAULT_SYSTEM_METRICS_PUBLISHER_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SYSTEM_METRICS_PUBLISHER_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * The setting that controls whether yarn container events are published to    * the timeline service or not by RM. This configuration setting is for ATS    * V2    */
DECL|field|RM_PUBLISH_CONTAINER_EVENTS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_PUBLISH_CONTAINER_EVENTS_ENABLED
init|=
name|YARN_PREFIX
operator|+
literal|"rm.system-metrics-publisher.emit-container-events"
decl_stmt|;
DECL|field|DEFAULT_RM_PUBLISH_CONTAINER_EVENTS_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_PUBLISH_CONTAINER_EVENTS_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
init|=
name|RM_PREFIX
operator|+
literal|"system-metrics-publisher.dispatcher.pool-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
name|DEFAULT_RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
init|=
literal|10
decl_stmt|;
comment|//RM delegation token related keys
DECL|field|RM_DELEGATION_KEY_UPDATE_INTERVAL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RM_DELEGATION_KEY_UPDATE_INTERVAL_KEY
init|=
name|RM_PREFIX
operator|+
literal|"delegation.key.update-interval"
decl_stmt|;
DECL|field|RM_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|RM_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
DECL|field|RM_DELEGATION_TOKEN_RENEW_INTERVAL_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RM_DELEGATION_TOKEN_RENEW_INTERVAL_KEY
init|=
name|RM_PREFIX
operator|+
literal|"delegation.token.renew-interval"
decl_stmt|;
DECL|field|RM_DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|RM_DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
DECL|field|RM_DELEGATION_TOKEN_MAX_LIFETIME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RM_DELEGATION_TOKEN_MAX_LIFETIME_KEY
init|=
name|RM_PREFIX
operator|+
literal|"delegation.token.max-lifetime"
decl_stmt|;
DECL|field|RM_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|RM_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 7 days
DECL|field|RM_DELEGATION_TOKEN_MAX_CONF_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|RM_DELEGATION_TOKEN_MAX_CONF_SIZE
init|=
name|RM_PREFIX
operator|+
literal|"delegation-token.max-conf-size-bytes"
decl_stmt|;
DECL|field|DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES
init|=
literal|12800
decl_stmt|;
DECL|field|RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RECOVERY_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"recovery.enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_RECOVERY_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|YARN_FAIL_FAST
specifier|public
specifier|static
specifier|final
name|String
name|YARN_FAIL_FAST
init|=
name|YARN_PREFIX
operator|+
literal|"fail-fast"
decl_stmt|;
DECL|field|DEFAULT_YARN_FAIL_FAST
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_FAIL_FAST
init|=
literal|false
decl_stmt|;
DECL|field|RM_FAIL_FAST
specifier|public
specifier|static
specifier|final
name|String
name|RM_FAIL_FAST
init|=
name|RM_PREFIX
operator|+
literal|"fail-fast"
decl_stmt|;
annotation|@
name|Private
DECL|field|RM_WORK_PRESERVING_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"work-preserving-recovery.enabled"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED
init|=
literal|true
decl_stmt|;
DECL|field|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
init|=
name|RM_PREFIX
operator|+
literal|"work-preserving-recovery.scheduling-wait-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
init|=
literal|10000
decl_stmt|;
comment|/** Zookeeper interaction configs */
DECL|field|RM_ZK_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_PREFIX
init|=
name|RM_PREFIX
operator|+
literal|"zk-"
decl_stmt|;
DECL|field|RM_ZK_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_ADDRESS
init|=
name|RM_ZK_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|RM_ZK_NUM_RETRIES
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_NUM_RETRIES
init|=
name|RM_ZK_PREFIX
operator|+
literal|"num-retries"
decl_stmt|;
DECL|field|DEFAULT_ZK_RM_NUM_RETRIES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZK_RM_NUM_RETRIES
init|=
literal|1000
decl_stmt|;
comment|/** Zookeeper znode limit */
DECL|field|RM_ZK_ZNODE_SIZE_LIMIT_BYTES
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_ZNODE_SIZE_LIMIT_BYTES
init|=
name|RM_ZK_PREFIX
operator|+
literal|"max-znode-size.bytes"
decl_stmt|;
DECL|field|DEFAULT_RM_ZK_ZNODE_SIZE_LIMIT_BYTES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_ZK_ZNODE_SIZE_LIMIT_BYTES
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|RM_ZK_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_RETRY_INTERVAL_MS
init|=
name|RM_ZK_PREFIX
operator|+
literal|"retry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_ZK_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_ZK_RETRY_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
DECL|field|RM_ZK_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_TIMEOUT_MS
init|=
name|RM_ZK_PREFIX
operator|+
literal|"timeout-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_ZK_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_ZK_TIMEOUT_MS
init|=
literal|10000
decl_stmt|;
DECL|field|ZK_APPID_NODE_SPLIT_INDEX
specifier|public
specifier|static
specifier|final
name|String
name|ZK_APPID_NODE_SPLIT_INDEX
init|=
name|RM_ZK_PREFIX
operator|+
literal|"appid-node.split-index"
decl_stmt|;
DECL|field|DEFAULT_ZK_APPID_NODE_SPLIT_INDEX
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZK_APPID_NODE_SPLIT_INDEX
init|=
literal|0
decl_stmt|;
comment|/** Index at which the RM Delegation Token ids will be split so that the    * delegation token znodes stored in the zookeeper RM state store will be    * stored as two different znodes (parent-child). **/
DECL|field|ZK_DELEGATION_TOKEN_NODE_SPLIT_INDEX
specifier|public
specifier|static
specifier|final
name|String
name|ZK_DELEGATION_TOKEN_NODE_SPLIT_INDEX
init|=
name|RM_ZK_PREFIX
operator|+
literal|"delegation-token-node.split-index"
decl_stmt|;
DECL|field|DEFAULT_ZK_DELEGATION_TOKEN_NODE_SPLIT_INDEX
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ZK_DELEGATION_TOKEN_NODE_SPLIT_INDEX
init|=
literal|0
decl_stmt|;
DECL|field|RM_ZK_ACL
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_ACL
init|=
name|RM_ZK_PREFIX
operator|+
literal|"acl"
decl_stmt|;
DECL|field|DEFAULT_RM_ZK_ACL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_ZK_ACL
init|=
literal|"world:anyone:rwcda"
decl_stmt|;
DECL|field|RM_ZK_AUTH
specifier|public
specifier|static
specifier|final
name|String
name|RM_ZK_AUTH
init|=
name|RM_ZK_PREFIX
operator|+
literal|"auth"
decl_stmt|;
DECL|field|ZK_STATE_STORE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|ZK_STATE_STORE_PREFIX
init|=
name|RM_PREFIX
operator|+
literal|"zk-state-store."
decl_stmt|;
comment|/** Parent znode path under which ZKRMStateStore will create znodes */
DECL|field|ZK_RM_STATE_STORE_PARENT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|ZK_RM_STATE_STORE_PARENT_PATH
init|=
name|ZK_STATE_STORE_PREFIX
operator|+
literal|"parent-path"
decl_stmt|;
DECL|field|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
init|=
literal|"/rmstore"
decl_stmt|;
comment|/** Root node ACLs for fencing */
DECL|field|ZK_RM_STATE_STORE_ROOT_NODE_ACL
specifier|public
specifier|static
specifier|final
name|String
name|ZK_RM_STATE_STORE_ROOT_NODE_ACL
init|=
name|ZK_STATE_STORE_PREFIX
operator|+
literal|"root-node.acl"
decl_stmt|;
comment|/** HA related configs */
DECL|field|RM_HA_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RM_HA_PREFIX
init|=
name|RM_PREFIX
operator|+
literal|"ha."
decl_stmt|;
DECL|field|RM_HA_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_HA_ENABLED
init|=
name|RM_HA_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_HA_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_HA_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|RM_HA_IDS
specifier|public
specifier|static
specifier|final
name|String
name|RM_HA_IDS
init|=
name|RM_HA_PREFIX
operator|+
literal|"rm-ids"
decl_stmt|;
DECL|field|RM_HA_ID
specifier|public
specifier|static
specifier|final
name|String
name|RM_HA_ID
init|=
name|RM_HA_PREFIX
operator|+
literal|"id"
decl_stmt|;
comment|/** Store the related configuration files in File System */
DECL|field|FS_BASED_RM_CONF_STORE
specifier|public
specifier|static
specifier|final
name|String
name|FS_BASED_RM_CONF_STORE
init|=
name|RM_PREFIX
operator|+
literal|"configuration.file-system-based-store"
decl_stmt|;
DECL|field|DEFAULT_FS_BASED_RM_CONF_STORE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FS_BASED_RM_CONF_STORE
init|=
literal|"/yarn/conf"
decl_stmt|;
DECL|field|RM_CONFIGURATION_PROVIDER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|RM_CONFIGURATION_PROVIDER_CLASS
init|=
name|RM_PREFIX
operator|+
literal|"configuration.provider-class"
decl_stmt|;
DECL|field|DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS
init|=
literal|"org.apache.hadoop.yarn.LocalConfigurationProvider"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|SCHEDULER_CONFIGURATION_STORE_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|SCHEDULER_CONFIGURATION_STORE_CLASS
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.store.class"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|FILE_CONFIGURATION_STORE
specifier|public
specifier|static
specifier|final
name|String
name|FILE_CONFIGURATION_STORE
init|=
literal|"file"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|MEMORY_CONFIGURATION_STORE
specifier|public
specifier|static
specifier|final
name|String
name|MEMORY_CONFIGURATION_STORE
init|=
literal|"memory"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|FS_CONFIGURATION_STORE
specifier|public
specifier|static
specifier|final
name|String
name|FS_CONFIGURATION_STORE
init|=
literal|"fs"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|ZK_CONFIGURATION_STORE
specifier|public
specifier|static
specifier|final
name|String
name|ZK_CONFIGURATION_STORE
init|=
literal|"zk"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|LEVELDB_CONFIGURATION_STORE
specifier|public
specifier|static
specifier|final
name|String
name|LEVELDB_CONFIGURATION_STORE
init|=
literal|"leveldb"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_CONFIGURATION_STORE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIGURATION_STORE
init|=
name|FILE_CONFIGURATION_STORE
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|RM_SCHEDCONF_STORE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDCONF_STORE_PATH
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.leveldb-store.path"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.leveldb-store.compaction-interval-secs"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
specifier|public
specifier|static
specifier|final
name|long
DECL|field|DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS
name|DEFAULT_RM_SCHEDCONF_LEVELDB_COMPACTION_INTERVAL_SECS
init|=
literal|60
operator|*
literal|60
operator|*
literal|24L
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|RM_SCHEDCONF_MAX_LOGS
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDCONF_MAX_LOGS
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.store.max-logs"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_SCHEDCONF_LEVELDB_MAX_LOGS
init|=
literal|1000
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_SCHEDCONF_ZK_MAX_LOGS
init|=
literal|1000
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|SCHEDULER_CONFIGURATION_FS_PATH
specifier|public
specifier|static
specifier|final
name|String
name|SCHEDULER_CONFIGURATION_FS_PATH
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.fs.path"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|SCHEDULER_CONFIGURATION_FS_MAX_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|SCHEDULER_CONFIGURATION_FS_MAX_VERSION
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.max.version"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION
init|=
literal|100
decl_stmt|;
comment|/** Parent znode path under which ZKConfigurationStore will create znodes. */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|RM_SCHEDCONF_STORE_ZK_PARENT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDCONF_STORE_ZK_PARENT_PATH
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.zk-store.parent-path"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_SCHEDCONF_STORE_ZK_PARENT_PATH
init|=
literal|"/confstore"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
init|=
name|YARN_PREFIX
operator|+
literal|"scheduler.configuration.mutation.acl-policy.class"
decl_stmt|;
DECL|field|YARN_AUTHORIZATION_PROVIDER
specifier|public
specifier|static
specifier|final
name|String
name|YARN_AUTHORIZATION_PROVIDER
init|=
name|YARN_PREFIX
operator|+
literal|"authorization-provider"
decl_stmt|;
DECL|field|RM_SERVICES_ADDRESS_CONF_KEYS_HTTP
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|RM_SERVICES_ADDRESS_CONF_KEYS_HTTP
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RM_ADDRESS
argument_list|,
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|RM_ADMIN_ADDRESS
argument_list|,
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|RM_WEBAPP_ADDRESS
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|RM_SERVICES_ADDRESS_CONF_KEYS_HTTPS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|RM_SERVICES_ADDRESS_CONF_KEYS_HTTPS
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|RM_ADDRESS
argument_list|,
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|RM_ADMIN_ADDRESS
argument_list|,
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|,
name|RM_WEBAPP_HTTPS_ADDRESS
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|AUTO_FAILOVER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_FAILOVER_PREFIX
init|=
name|RM_HA_PREFIX
operator|+
literal|"automatic-failover."
decl_stmt|;
DECL|field|AUTO_FAILOVER_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_FAILOVER_ENABLED
init|=
name|AUTO_FAILOVER_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_AUTO_FAILOVER_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_AUTO_FAILOVER_ENABLED
init|=
literal|true
decl_stmt|;
comment|/**    * This property controls whether {@link ActiveStandbyElector} leader    * election should be used when {@link #CURATOR_LEADER_ELECTOR} is    * {@code false}.    *    * @deprecated This property should never be set to {@code false}.    */
annotation|@
name|Deprecated
DECL|field|AUTO_FAILOVER_EMBEDDED
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_FAILOVER_EMBEDDED
init|=
name|AUTO_FAILOVER_PREFIX
operator|+
literal|"embedded"
decl_stmt|;
comment|/**    * The default value for {@link #AUTO_FAILOVER_EMBEDDED}.    *    * @deprecated The {@link #AUTO_FAILOVER_EMBEDDED} property is deprecated.    */
annotation|@
name|Deprecated
DECL|field|DEFAULT_AUTO_FAILOVER_EMBEDDED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_AUTO_FAILOVER_EMBEDDED
init|=
literal|true
decl_stmt|;
DECL|field|AUTO_FAILOVER_ZK_BASE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_FAILOVER_ZK_BASE_PATH
init|=
name|AUTO_FAILOVER_PREFIX
operator|+
literal|"zk-base-path"
decl_stmt|;
DECL|field|DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_AUTO_FAILOVER_ZK_BASE_PATH
init|=
literal|"/yarn-leader-election"
decl_stmt|;
DECL|field|CLIENT_FAILOVER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_FAILOVER_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"client.failover-"
decl_stmt|;
DECL|field|CLIENT_FAILOVER_PROXY_PROVIDER
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_FAILOVER_PROXY_PROVIDER
init|=
name|CLIENT_FAILOVER_PREFIX
operator|+
literal|"proxy-provider"
decl_stmt|;
DECL|field|DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER
init|=
literal|"org.apache.hadoop.yarn.client.ConfiguredRMFailoverProxyProvider"
decl_stmt|;
DECL|field|CLIENT_FAILOVER_MAX_ATTEMPTS
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_FAILOVER_MAX_ATTEMPTS
init|=
name|CLIENT_FAILOVER_PREFIX
operator|+
literal|"max-attempts"
decl_stmt|;
DECL|field|CLIENT_FAILOVER_SLEEPTIME_BASE_MS
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_FAILOVER_SLEEPTIME_BASE_MS
init|=
name|CLIENT_FAILOVER_PREFIX
operator|+
literal|"sleep-base-ms"
decl_stmt|;
DECL|field|CLIENT_FAILOVER_SLEEPTIME_MAX_MS
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_FAILOVER_SLEEPTIME_MAX_MS
init|=
name|CLIENT_FAILOVER_PREFIX
operator|+
literal|"sleep-max-ms"
decl_stmt|;
DECL|field|CLIENT_FAILOVER_RETRIES
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_FAILOVER_RETRIES
init|=
name|CLIENT_FAILOVER_PREFIX
operator|+
literal|"retries"
decl_stmt|;
DECL|field|DEFAULT_CLIENT_FAILOVER_RETRIES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CLIENT_FAILOVER_RETRIES
init|=
literal|0
decl_stmt|;
DECL|field|CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS
init|=
name|CLIENT_FAILOVER_PREFIX
operator|+
literal|"retries-on-socket-timeouts"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS
name|DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS
init|=
literal|0
decl_stmt|;
comment|/** number of zookeeper operation retry times in ActiveStandbyElector */
DECL|field|RM_HA_FC_ELECTOR_ZK_RETRIES_KEY
specifier|public
specifier|static
specifier|final
name|String
name|RM_HA_FC_ELECTOR_ZK_RETRIES_KEY
init|=
name|RM_HA_PREFIX
operator|+
literal|"failover-controller.active-standby-elector.zk.retries"
decl_stmt|;
comment|/**    * Whether to use the Curator-based elector for leader election.    *    * @deprecated Eventually, we want to default to the curator-based    * implementation and remove the {@link ActiveStandbyElector} based    * implementation. We should remove this config then.    */
annotation|@
name|Unstable
annotation|@
name|Deprecated
DECL|field|CURATOR_LEADER_ELECTOR
specifier|public
specifier|static
specifier|final
name|String
name|CURATOR_LEADER_ELECTOR
init|=
name|RM_HA_PREFIX
operator|+
literal|"curator-leader-elector.enabled"
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED
init|=
literal|false
decl_stmt|;
comment|////////////////////////////////
comment|// RM state store configs
comment|////////////////////////////////
comment|/** The class to use as the persistent store.*/
DECL|field|RM_STORE
specifier|public
specifier|static
specifier|final
name|String
name|RM_STORE
init|=
name|RM_PREFIX
operator|+
literal|"store.class"
decl_stmt|;
comment|/** URI for FileSystemRMStateStore */
DECL|field|FS_RM_STATE_STORE_URI
specifier|public
specifier|static
specifier|final
name|String
name|FS_RM_STATE_STORE_URI
init|=
name|RM_PREFIX
operator|+
literal|"fs.state-store.uri"
decl_stmt|;
DECL|field|FS_RM_STATE_STORE_NUM_RETRIES
specifier|public
specifier|static
specifier|final
name|String
name|FS_RM_STATE_STORE_NUM_RETRIES
init|=
name|RM_PREFIX
operator|+
literal|"fs.state-store.num-retries"
decl_stmt|;
DECL|field|DEFAULT_FS_RM_STATE_STORE_NUM_RETRIES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FS_RM_STATE_STORE_NUM_RETRIES
init|=
literal|0
decl_stmt|;
DECL|field|FS_RM_STATE_STORE_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|FS_RM_STATE_STORE_RETRY_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"fs.state-store.retry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_FS_RM_STATE_STORE_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_FS_RM_STATE_STORE_RETRY_INTERVAL_MS
init|=
literal|1000L
decl_stmt|;
DECL|field|RM_LEVELDB_STORE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|RM_LEVELDB_STORE_PATH
init|=
name|RM_PREFIX
operator|+
literal|"leveldb-state-store.path"
decl_stmt|;
comment|/** The time in seconds between full compactions of the leveldb database.    *  Setting the interval to zero disables the full compaction cycles.    */
DECL|field|RM_LEVELDB_COMPACTION_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_LEVELDB_COMPACTION_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"leveldb-state-store.compaction-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_LEVELDB_COMPACTION_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_LEVELDB_COMPACTION_INTERVAL_SECS
init|=
literal|3600
decl_stmt|;
comment|/**    * The maximum number of completed applications RM keeps. By default equals    * to {@link #DEFAULT_RM_MAX_COMPLETED_APPLICATIONS}.    */
DECL|field|RM_MAX_COMPLETED_APPLICATIONS
specifier|public
specifier|static
specifier|final
name|String
name|RM_MAX_COMPLETED_APPLICATIONS
init|=
name|RM_PREFIX
operator|+
literal|"max-completed-applications"
decl_stmt|;
DECL|field|DEFAULT_RM_MAX_COMPLETED_APPLICATIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_MAX_COMPLETED_APPLICATIONS
init|=
literal|1000
decl_stmt|;
comment|/**    * The maximum number of completed applications RM state store keeps. By    * default equals to value of {@link #RM_MAX_COMPLETED_APPLICATIONS}.    */
DECL|field|RM_STATE_STORE_MAX_COMPLETED_APPLICATIONS
specifier|public
specifier|static
specifier|final
name|String
name|RM_STATE_STORE_MAX_COMPLETED_APPLICATIONS
init|=
name|RM_PREFIX
operator|+
literal|"state-store.max-completed-applications"
decl_stmt|;
comment|/**    * The default value for    * {@code yarn.resourcemanager.state-store.max-completed-applications}.    * @deprecated This default value is ignored and will be removed in a future    * release. The default value of    * {@code yarn.resourcemanager.state-store.max-completed-applications} is the    * value of {@link #RM_MAX_COMPLETED_APPLICATIONS}.    */
annotation|@
name|Deprecated
DECL|field|DEFAULT_RM_STATE_STORE_MAX_COMPLETED_APPLICATIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_STATE_STORE_MAX_COMPLETED_APPLICATIONS
init|=
name|DEFAULT_RM_MAX_COMPLETED_APPLICATIONS
decl_stmt|;
comment|/** Default application name */
DECL|field|DEFAULT_APPLICATION_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_APPLICATION_NAME
init|=
literal|"N/A"
decl_stmt|;
comment|/** Default application type */
DECL|field|DEFAULT_APPLICATION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_APPLICATION_TYPE
init|=
literal|"YARN"
decl_stmt|;
comment|/** Default application type length */
DECL|field|APPLICATION_TYPE_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|APPLICATION_TYPE_LENGTH
init|=
literal|20
decl_stmt|;
comment|/** Default queue name */
DECL|field|DEFAULT_QUEUE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE_NAME
init|=
literal|"default"
decl_stmt|;
comment|/**    * Buckets (in minutes) for the number of apps running in each queue.    */
DECL|field|RM_METRICS_RUNTIME_BUCKETS
specifier|public
specifier|static
specifier|final
name|String
name|RM_METRICS_RUNTIME_BUCKETS
init|=
name|RM_PREFIX
operator|+
literal|"metrics.runtime.buckets"
decl_stmt|;
comment|/**    * Default sizes of the runtime metric buckets in minutes.    */
DECL|field|DEFAULT_RM_METRICS_RUNTIME_BUCKETS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_METRICS_RUNTIME_BUCKETS
init|=
literal|"60,300,1440"
decl_stmt|;
DECL|field|RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"am-rm-tokens.master-key-rolling-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"container-tokens.master-key-rolling-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_CONTAINER_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"nm-tokens.master-key-rolling-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_NMTOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|RM_NODEMANAGER_MINIMUM_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODEMANAGER_MINIMUM_VERSION
init|=
name|RM_PREFIX
operator|+
literal|"nodemanager.minimum.version"
decl_stmt|;
DECL|field|DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION
init|=
literal|"NONE"
decl_stmt|;
comment|/**    * Timeout(msec) for an untracked node to remain in shutdown or decommissioned    * state.    */
DECL|field|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
init|=
name|RM_PREFIX
operator|+
literal|"node-removal-untracked.timeout-ms"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
name|DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
init|=
literal|60000
decl_stmt|;
comment|/**    * RM proxy users' prefix    */
DECL|field|RM_PROXY_USER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RM_PROXY_USER_PREFIX
init|=
name|RM_PREFIX
operator|+
literal|"proxyuser."
decl_stmt|;
comment|/**    * Enable/disable resource profiles.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|field|RM_RESOURCE_PROFILES_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESOURCE_PROFILES_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"resource-profiles.enabled"
decl_stmt|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|field|DEFAULT_RM_RESOURCE_PROFILES_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_RESOURCE_PROFILES_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * File containing resource profiles.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|field|RM_RESOURCE_PROFILES_SOURCE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|RM_RESOURCE_PROFILES_SOURCE_FILE
init|=
name|RM_PREFIX
operator|+
literal|"resource-profiles.source-file"
decl_stmt|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|field|DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE
init|=
literal|"resource-profiles.json"
decl_stmt|;
comment|/**    * Enable/disable loading resource-types.xml at client side.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|field|YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER
init|=
name|YARN_PREFIX
operator|+
literal|"client.load.resource-types.from-server"
decl_stmt|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|field|DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER
init|=
literal|false
decl_stmt|;
comment|/**    * Timeout in seconds for YARN node graceful decommission.    * This is the maximal time to wait for running containers and applications    * to complete before transition a DECOMMISSIONING node into DECOMMISSIONED.    */
DECL|field|RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
init|=
name|RM_PREFIX
operator|+
literal|"nodemanager-graceful-decommission-timeout-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
init|=
literal|3600
decl_stmt|;
comment|/**    * Period in seconds of the poll timer task inside DecommissioningNodesWatcher    * to identify and take care of DECOMMISSIONING nodes missing regular heart beat.    */
DECL|field|RM_DECOMMISSIONING_NODES_WATCHER_POLL_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|RM_DECOMMISSIONING_NODES_WATCHER_POLL_INTERVAL
init|=
name|RM_PREFIX
operator|+
literal|"decommissioning-nodes-watcher.poll-interval-secs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_RM_DECOMMISSIONING_NODES_WATCHER_POLL_INTERVAL
name|DEFAULT_RM_DECOMMISSIONING_NODES_WATCHER_POLL_INTERVAL
init|=
literal|20
decl_stmt|;
comment|////////////////////////////////
comment|// Node Manager Configs
comment|////////////////////////////////
comment|/** Prefix for all node manager configs.*/
DECL|field|NM_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_PREFIX
init|=
literal|"yarn.nodemanager."
decl_stmt|;
comment|/** Max Queue length of<code>OPPORTUNISTIC</code> containers on the NM. */
DECL|field|NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
specifier|public
specifier|static
specifier|final
name|String
name|NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
init|=
name|NM_PREFIX
operator|+
literal|"opportunistic-containers-max-queue-length"
decl_stmt|;
DECL|field|DEFAULT_NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH
init|=
literal|0
decl_stmt|;
comment|/** Setting that controls whether distributed scheduling is enabled or not. */
DECL|field|DIST_SCHEDULING_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|DIST_SCHEDULING_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"distributed-scheduling.enabled"
decl_stmt|;
DECL|field|DEFAULT_DIST_SCHEDULING_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DIST_SCHEDULING_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** Environment variables that will be sent to containers.*/
DECL|field|NM_ADMIN_USER_ENV
specifier|public
specifier|static
specifier|final
name|String
name|NM_ADMIN_USER_ENV
init|=
name|NM_PREFIX
operator|+
literal|"admin-env"
decl_stmt|;
DECL|field|DEFAULT_NM_ADMIN_USER_ENV
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_ADMIN_USER_ENV
init|=
literal|"MALLOC_ARENA_MAX=$MALLOC_ARENA_MAX"
decl_stmt|;
comment|/** Environment variables that containers may override rather than use NodeManager's default.*/
DECL|field|NM_ENV_WHITELIST
specifier|public
specifier|static
specifier|final
name|String
name|NM_ENV_WHITELIST
init|=
name|NM_PREFIX
operator|+
literal|"env-whitelist"
decl_stmt|;
DECL|field|DEFAULT_NM_ENV_WHITELIST
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_ENV_WHITELIST
init|=
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|JAVA_HOME
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|CLASSPATH_PREPEND_DISTCACHE
operator|.
name|key
argument_list|()
argument_list|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|/** address of node manager IPC.*/
DECL|field|NM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_NM_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_PORT
init|=
literal|0
decl_stmt|;
DECL|field|DEFAULT_NM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_PORT
decl_stmt|;
comment|/** The actual bind address or the NM.*/
DECL|field|NM_BIND_HOST
specifier|public
specifier|static
specifier|final
name|String
name|NM_BIND_HOST
init|=
name|NM_PREFIX
operator|+
literal|"bind-host"
decl_stmt|;
comment|/** who will execute(launch) the containers.*/
DECL|field|NM_CONTAINER_EXECUTOR
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_EXECUTOR
init|=
name|NM_PREFIX
operator|+
literal|"container-executor.class"
decl_stmt|;
comment|/** List of container state transition listeners.*/
DECL|field|NM_CONTAINER_STATE_TRANSITION_LISTENERS
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_STATE_TRANSITION_LISTENERS
init|=
name|NM_PREFIX
operator|+
literal|"container-state-transition-listener.classes"
decl_stmt|;
comment|/**      * Adjustment to make to the container os scheduling priority.    * The valid values for this could vary depending on the platform.    * On Linux, higher values mean run the containers at a less     * favorable priority than the NM.     * The value specified is an int.    */
DECL|field|NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
init|=
name|NM_PREFIX
operator|+
literal|"container-executor.os.sched.priority.adjustment"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY
init|=
literal|0
decl_stmt|;
comment|/** Number of threads container manager uses.*/
DECL|field|NM_CONTAINER_MGR_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_MGR_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"container-manager.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_MGR_THREAD_COUNT
init|=
literal|20
decl_stmt|;
comment|/** Number of threads container manager uses.*/
DECL|field|NM_COLLECTOR_SERVICE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_COLLECTOR_SERVICE_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"collector-service.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_COLLECTOR_SERVICE_THREAD_COUNT
init|=
literal|5
decl_stmt|;
comment|/** Number of threads used in cleanup.*/
DECL|field|NM_DELETE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_DELETE_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"delete.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_DELETE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_DELETE_THREAD_COUNT
init|=
literal|4
decl_stmt|;
comment|/** Keytab for NM.*/
DECL|field|NM_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|NM_KEYTAB
init|=
name|NM_PREFIX
operator|+
literal|"keytab"
decl_stmt|;
comment|/**List of directories to store localized files in.*/
DECL|field|NM_LOCAL_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCAL_DIRS
init|=
name|NM_PREFIX
operator|+
literal|"local-dirs"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCAL_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOCAL_DIRS
init|=
literal|"/tmp/nm-local-dir"
decl_stmt|;
comment|/**    * Number of files in each localized directories    * Avoid tuning this too low.     */
DECL|field|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
init|=
name|NM_PREFIX
operator|+
literal|"local-cache.max-files-per-directory"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY
init|=
literal|8192
decl_stmt|;
comment|/** Address where the localizer IPC is.*/
DECL|field|NM_LOCALIZER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"localizer.address"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCALIZER_PORT
init|=
literal|8040
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOCALIZER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_LOCALIZER_PORT
decl_stmt|;
comment|/** Address where the collector service IPC is.*/
DECL|field|NM_COLLECTOR_SERVICE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_COLLECTOR_SERVICE_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"collector-service.address"
decl_stmt|;
DECL|field|DEFAULT_NM_COLLECTOR_SERVICE_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_COLLECTOR_SERVICE_PORT
init|=
literal|8048
decl_stmt|;
DECL|field|DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_LOCALIZER_PORT
decl_stmt|;
comment|/** Interval in between cache cleanups.*/
DECL|field|NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"localizer.cache.cleanup.interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**    * Target size of localizer cache in MB, per nodemanager. It is a target    * retention size that only includes resources with PUBLIC and PRIVATE    * visibility and excludes resources with APPLICATION visibility    */
DECL|field|NM_LOCALIZER_CACHE_TARGET_SIZE_MB
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_CACHE_TARGET_SIZE_MB
init|=
name|NM_PREFIX
operator|+
literal|"localizer.cache.target-size-mb"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
comment|/** Number of threads to handle localization requests.*/
DECL|field|NM_LOCALIZER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_CLIENT_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"localizer.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCALIZER_CLIENT_THREAD_COUNT
init|=
literal|5
decl_stmt|;
comment|/** Number of threads to use for localization fetching.*/
DECL|field|NM_LOCALIZER_FETCH_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOCALIZER_FETCH_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"localizer.fetch.thread-count"
decl_stmt|;
DECL|field|DEFAULT_NM_LOCALIZER_FETCH_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOCALIZER_FETCH_THREAD_COUNT
init|=
literal|4
decl_stmt|;
comment|/** Where to store container logs.*/
DECL|field|NM_LOG_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_DIRS
init|=
name|NM_PREFIX
operator|+
literal|"log-dirs"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_DIRS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOG_DIRS
init|=
literal|"/tmp/logs"
decl_stmt|;
comment|/** The number of threads to handle log aggregation in node manager. */
DECL|field|NM_LOG_AGGREGATION_THREAD_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_AGGREGATION_THREAD_POOL_SIZE
init|=
name|NM_PREFIX
operator|+
literal|"logaggregation.threadpool-size-max"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOG_AGGREGATION_THREAD_POOL_SIZE
init|=
literal|100
decl_stmt|;
comment|/** Default permissions for container logs. */
DECL|field|NM_DEFAULT_CONTAINER_EXECUTOR_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_DEFAULT_CONTAINER_EXECUTOR_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"default-container-executor."
decl_stmt|;
DECL|field|NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS
specifier|public
specifier|static
specifier|final
name|String
name|NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS
init|=
name|NM_DEFAULT_CONTAINER_EXECUTOR_PREFIX
operator|+
literal|"log-dirs.permissions"
decl_stmt|;
DECL|field|NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|NM_DEFAULT_CONTAINER_EXECUTOR_LOG_DIRS_PERMISSIONS_DEFAULT
init|=
literal|"710"
decl_stmt|;
DECL|field|NM_RESOURCEMANAGER_MINIMUM_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|NM_RESOURCEMANAGER_MINIMUM_VERSION
init|=
name|NM_PREFIX
operator|+
literal|"resourcemanager.minimum.version"
decl_stmt|;
DECL|field|DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION
init|=
literal|"NONE"
decl_stmt|;
comment|/** Disk Validator. */
DECL|field|DISK_VALIDATOR
specifier|public
specifier|static
specifier|final
name|String
name|DISK_VALIDATOR
init|=
name|NM_PREFIX
operator|+
literal|"disk-validator"
decl_stmt|;
DECL|field|DEFAULT_DISK_VALIDATOR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DISK_VALIDATOR
init|=
name|BasicDiskValidator
operator|.
name|NAME
decl_stmt|;
comment|/**    * Maximum size of contain's diagnostics to keep for relaunching container    * case.    **/
DECL|field|NM_CONTAINER_DIAGNOSTICS_MAXIMUM_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_DIAGNOSTICS_MAXIMUM_SIZE
init|=
name|NM_PREFIX
operator|+
literal|"container-diagnostics-maximum-size"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_DIAGNOSTICS_MAXIMUM_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_DIAGNOSTICS_MAXIMUM_SIZE
init|=
literal|10000
decl_stmt|;
comment|/** Minimum container restart interval. */
DECL|field|NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"container-retry-minimum-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_RETRY_MINIMUM_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
comment|/**    * Use container pause as the preemption policy over kill in the container    * queue at a NodeManager.    **/
DECL|field|NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION
init|=
name|NM_PREFIX
operator|+
literal|"opportunistic-containers-use-pause-for-preemption"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
DECL|field|DEFAULT_NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION
name|DEFAULT_NM_CONTAINER_QUEUING_USE_PAUSE_FOR_PREEMPTION
init|=
literal|false
decl_stmt|;
comment|/** Interval at which the delayed token removal thread runs */
DECL|field|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"delayed.delegation-token.removal-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
init|=
literal|30000l
decl_stmt|;
comment|/** Delegation Token renewer thread count */
DECL|field|RM_DELEGATION_TOKEN_RENEWER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|RM_DELEGATION_TOKEN_RENEWER_THREAD_COUNT
init|=
name|RM_PREFIX
operator|+
literal|"delegation-token-renewer.thread-count"
decl_stmt|;
DECL|field|DEFAULT_RM_DELEGATION_TOKEN_RENEWER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_DELEGATION_TOKEN_RENEWER_THREAD_COUNT
init|=
literal|50
decl_stmt|;
DECL|field|RM_PROXY_USER_PRIVILEGES_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_PROXY_USER_PRIVILEGES_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"proxy-user-privileges.enabled"
decl_stmt|;
DECL|field|DEFAULT_RM_PROXY_USER_PRIVILEGES_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_RM_PROXY_USER_PRIVILEGES_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** The expiry interval for node IP caching. -1 disables the caching */
DECL|field|RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
init|=
name|RM_PREFIX
operator|+
literal|"node-ip-cache.expiry-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * How many diagnostics/failure messages can be saved in RM for    * log aggregation. It also defines the number of diagnostics/failure    * messages can be shown in log aggregation web ui.    */
DECL|field|RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
specifier|public
specifier|static
specifier|final
name|String
name|RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
init|=
name|RM_PREFIX
operator|+
literal|"max-log-aggregation-diagnostics-in-memory"
decl_stmt|;
DECL|field|DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY
init|=
literal|10
decl_stmt|;
comment|/** Whether to enable log aggregation */
DECL|field|LOG_AGGREGATION_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_ENABLED
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation-enable"
decl_stmt|;
DECL|field|DEFAULT_LOG_AGGREGATION_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_LOG_AGGREGATION_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|LOG_AGGREGATION_FILE_FORMATS
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_FILE_FORMATS
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.file-formats"
decl_stmt|;
DECL|field|LOG_AGGREGATION_FILE_CONTROLLER_FMT
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_FILE_CONTROLLER_FMT
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.file-controller.%s.class"
decl_stmt|;
DECL|field|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.%s.remote-app-log-dir"
decl_stmt|;
DECL|field|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.%s.remote-app-log-dir-suffix"
decl_stmt|;
comment|/**     * How long to wait before deleting aggregated logs, -1 disables.    * Be careful set this too small and you will spam the name node.    */
DECL|field|LOG_AGGREGATION_RETAIN_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_RETAIN_SECONDS
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.retain-seconds"
decl_stmt|;
DECL|field|DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * How long to wait between aggregated log retention checks. If set to    * a value {@literal<=} 0 then the value is computed as one-tenth of the    * log retention setting. Be careful set this too small and you will spam    * the name node.    */
DECL|field|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation.retain-check-interval-seconds"
decl_stmt|;
DECL|field|DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * How long for ResourceManager to wait for NodeManager to report its    * log aggregation status. If waiting time of which the log aggregation status    * is reported from NodeManager exceeds the configured value, RM will report    * log aggregation status for this NodeManager as TIME_OUT.    *    * This configuration will be used in NodeManager as well to decide    * whether and when to delete the cached log aggregation status.    */
DECL|field|LOG_AGGREGATION_STATUS_TIME_OUT_MS
specifier|public
specifier|static
specifier|final
name|String
name|LOG_AGGREGATION_STATUS_TIME_OUT_MS
init|=
name|YARN_PREFIX
operator|+
literal|"log-aggregation-status.time-out.ms"
decl_stmt|;
DECL|field|DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**    * Number of seconds to retain logs on the NodeManager. Only applicable if Log    * aggregation is disabled    */
DECL|field|NM_LOG_RETAIN_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_RETAIN_SECONDS
init|=
name|NM_PREFIX
operator|+
literal|"log.retain-seconds"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_RETAIN_SECONDS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_LOG_RETAIN_SECONDS
init|=
literal|3
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|/**    * Define how often NMs wake up and upload log files    */
DECL|field|NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS
init|=
name|NM_PREFIX
operator|+
literal|"log-aggregation.roll-monitoring-interval-seconds"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS
name|DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Number of threads used in log cleanup. Only applicable if Log aggregation    * is disabled    */
DECL|field|NM_LOG_DELETION_THREADS_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_DELETION_THREADS_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"log.deletion-threads-count"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_DELETE_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_LOG_DELETE_THREAD_COUNT
init|=
literal|4
decl_stmt|;
comment|/** Where to aggregate logs to.*/
DECL|field|NM_REMOTE_APP_LOG_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_REMOTE_APP_LOG_DIR
init|=
name|NM_PREFIX
operator|+
literal|"remote-app-log-dir"
decl_stmt|;
DECL|field|DEFAULT_NM_REMOTE_APP_LOG_DIR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
init|=
literal|"/tmp/logs"
decl_stmt|;
comment|/**    * The remote log dir will be created at    * NM_REMOTE_APP_LOG_DIR/${user}/NM_REMOTE_APP_LOG_DIR_SUFFIX/${appId}    */
DECL|field|NM_REMOTE_APP_LOG_DIR_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
init|=
name|NM_PREFIX
operator|+
literal|"remote-app-log-dir-suffix"
decl_stmt|;
DECL|field|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
init|=
literal|"logs"
decl_stmt|;
DECL|field|YARN_LOG_SERVER_URL
specifier|public
specifier|static
specifier|final
name|String
name|YARN_LOG_SERVER_URL
init|=
name|YARN_PREFIX
operator|+
literal|"log.server.url"
decl_stmt|;
DECL|field|YARN_LOG_SERVER_WEBSERVICE_URL
specifier|public
specifier|static
specifier|final
name|String
name|YARN_LOG_SERVER_WEBSERVICE_URL
init|=
name|YARN_PREFIX
operator|+
literal|"log.server.web-service.url"
decl_stmt|;
DECL|field|YARN_TRACKING_URL_GENERATOR
specifier|public
specifier|static
specifier|final
name|String
name|YARN_TRACKING_URL_GENERATOR
init|=
name|YARN_PREFIX
operator|+
literal|"tracking.url.generator"
decl_stmt|;
comment|/** Amount of memory in MB that can be allocated for containers.*/
DECL|field|NM_PMEM_MB
specifier|public
specifier|static
specifier|final
name|String
name|NM_PMEM_MB
init|=
name|NM_PREFIX
operator|+
literal|"resource.memory-mb"
decl_stmt|;
DECL|field|DEFAULT_NM_PMEM_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_PMEM_MB
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
comment|/** Amount of memory in MB that has been reserved for non-yarn use. */
DECL|field|NM_SYSTEM_RESERVED_PMEM_MB
specifier|public
specifier|static
specifier|final
name|String
name|NM_SYSTEM_RESERVED_PMEM_MB
init|=
name|NM_PREFIX
operator|+
literal|"resource.system-reserved-memory-mb"
decl_stmt|;
comment|/** Specifies whether physical memory check is enabled. */
DECL|field|NM_PMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_PMEM_CHECK_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"pmem-check-enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_PMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_PMEM_CHECK_ENABLED
init|=
literal|true
decl_stmt|;
comment|/** Specifies whether physical memory check is enabled. */
DECL|field|NM_VMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_VMEM_CHECK_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"vmem-check-enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_VMEM_CHECK_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_VMEM_CHECK_ENABLED
init|=
literal|true
decl_stmt|;
comment|/** Conversion ratio for physical memory to virtual memory. */
DECL|field|NM_VMEM_PMEM_RATIO
specifier|public
specifier|static
specifier|final
name|String
name|NM_VMEM_PMEM_RATIO
init|=
name|NM_PREFIX
operator|+
literal|"vmem-pmem-ratio"
decl_stmt|;
DECL|field|DEFAULT_NM_VMEM_PMEM_RATIO
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_VMEM_PMEM_RATIO
init|=
literal|2.1f
decl_stmt|;
comment|/** Number of Virtual CPU Cores which can be allocated for containers.*/
DECL|field|NM_VCORES
specifier|public
specifier|static
specifier|final
name|String
name|NM_VCORES
init|=
name|NM_PREFIX
operator|+
literal|"resource.cpu-vcores"
decl_stmt|;
DECL|field|DEFAULT_NM_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_VCORES
init|=
literal|8
decl_stmt|;
comment|/** Count logical processors(like hyperthreads) as cores. */
DECL|field|NM_COUNT_LOGICAL_PROCESSORS_AS_CORES
specifier|public
specifier|static
specifier|final
name|String
name|NM_COUNT_LOGICAL_PROCESSORS_AS_CORES
init|=
name|NM_PREFIX
operator|+
literal|"resource.count-logical-processors-as-cores"
decl_stmt|;
DECL|field|DEFAULT_NM_COUNT_LOGICAL_PROCESSORS_AS_CORES
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_COUNT_LOGICAL_PROCESSORS_AS_CORES
init|=
literal|false
decl_stmt|;
comment|/** Multiplier to convert physical cores to vcores. */
DECL|field|NM_PCORES_VCORES_MULTIPLIER
specifier|public
specifier|static
specifier|final
name|String
name|NM_PCORES_VCORES_MULTIPLIER
init|=
name|NM_PREFIX
operator|+
literal|"resource.pcores-vcores-multiplier"
decl_stmt|;
DECL|field|DEFAULT_NM_PCORES_VCORES_MULTIPLIER
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_PCORES_VCORES_MULTIPLIER
init|=
literal|1.0f
decl_stmt|;
comment|/** Percentage of overall CPU which can be allocated for containers. */
DECL|field|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
specifier|public
specifier|static
specifier|final
name|String
name|NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
init|=
name|NM_PREFIX
operator|+
literal|"resource.percentage-physical-cpu-limit"
decl_stmt|;
DECL|field|DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT
init|=
literal|100
decl_stmt|;
comment|/** Enable or disable node hardware capability detection. */
DECL|field|NM_ENABLE_HARDWARE_CAPABILITY_DETECTION
specifier|public
specifier|static
specifier|final
name|String
name|NM_ENABLE_HARDWARE_CAPABILITY_DETECTION
init|=
name|NM_PREFIX
operator|+
literal|"resource.detect-hardware-capabilities"
decl_stmt|;
DECL|field|DEFAULT_NM_ENABLE_HARDWARE_CAPABILITY_DETECTION
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_ENABLE_HARDWARE_CAPABILITY_DETECTION
init|=
literal|false
decl_stmt|;
annotation|@
name|Private
DECL|field|NM_MEMORY_RESOURCE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_MEMORY_RESOURCE_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"resource.memory."
decl_stmt|;
DECL|field|NM_MEMORY_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_MEMORY_RESOURCE_ENABLED
init|=
name|NM_MEMORY_RESOURCE_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_MEMORY_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_MEMORY_RESOURCE_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|NM_MEMORY_RESOURCE_ENFORCED
specifier|public
specifier|static
specifier|final
name|String
name|NM_MEMORY_RESOURCE_ENFORCED
init|=
name|NM_MEMORY_RESOURCE_PREFIX
operator|+
literal|"enforced"
decl_stmt|;
DECL|field|DEFAULT_NM_MEMORY_RESOURCE_ENFORCED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_MEMORY_RESOURCE_ENFORCED
init|=
literal|true
decl_stmt|;
DECL|field|NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS
init|=
name|NM_MEMORY_RESOURCE_PREFIX
operator|+
literal|"cgroups.swappiness"
decl_stmt|;
DECL|field|DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SWAPPINESS
init|=
literal|0
decl_stmt|;
DECL|field|NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE
specifier|public
specifier|static
specifier|final
name|String
name|NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE
init|=
name|NM_MEMORY_RESOURCE_PREFIX
operator|+
literal|"cgroups.soft-limit-percentage"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|float
DECL|field|DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE
name|DEFAULT_NM_MEMORY_RESOURCE_CGROUPS_SOFT_LIMIT_PERCENTAGE
init|=
literal|90.0f
decl_stmt|;
annotation|@
name|Private
DECL|field|NM_CPU_RESOURCE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_CPU_RESOURCE_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"resource.cpu."
decl_stmt|;
comment|/** Enable cpu isolation. */
annotation|@
name|Private
DECL|field|NM_CPU_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_CPU_RESOURCE_ENABLED
init|=
name|NM_CPU_RESOURCE_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_CPU_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_CPU_RESOURCE_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * Prefix for disk configurations. Work in progress: This configuration    * parameter may be changed/removed in the future.    */
annotation|@
name|Private
DECL|field|NM_DISK_RESOURCE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_DISK_RESOURCE_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"resource.disk."
decl_stmt|;
comment|/**    * This setting controls if resource handling for disk operations is enabled.    * Work in progress: This configuration parameter may be changed/removed in    * the future    */
annotation|@
name|Private
DECL|field|NM_DISK_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_DISK_RESOURCE_ENABLED
init|=
name|NM_DISK_RESOURCE_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
comment|/** Disk as a resource is disabled by default. **/
annotation|@
name|Private
DECL|field|DEFAULT_NM_DISK_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_DISK_RESOURCE_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|NM_NETWORK_RESOURCE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_RESOURCE_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"resource.network."
decl_stmt|;
comment|/**    * This setting controls if resource handling for network bandwidth is    * enabled. Work in progress: This configuration parameter may be    * changed/removed in the future    */
annotation|@
name|Private
DECL|field|NM_NETWORK_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_RESOURCE_ENABLED
init|=
name|NM_NETWORK_RESOURCE_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
comment|/** Network as a resource is disabled by default. **/
annotation|@
name|Private
DECL|field|DEFAULT_NM_NETWORK_RESOURCE_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_NETWORK_RESOURCE_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * Specifies the interface to be used for applying network throttling rules.    * Work in progress: This configuration parameter may be changed/removed in    * the future    */
annotation|@
name|Private
DECL|field|NM_NETWORK_RESOURCE_INTERFACE
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_RESOURCE_INTERFACE
init|=
name|NM_NETWORK_RESOURCE_PREFIX
operator|+
literal|"interface"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_NETWORK_RESOURCE_INTERFACE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_NETWORK_RESOURCE_INTERFACE
init|=
literal|"eth0"
decl_stmt|;
comment|/**    * Specifies the total available outbound bandwidth on the node. Work in    * progress: This configuration parameter may be changed/removed in the future    */
annotation|@
name|Private
DECL|field|NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT
init|=
name|NM_NETWORK_RESOURCE_PREFIX
operator|+
literal|"outbound-bandwidth-mbit"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT
init|=
literal|1000
decl_stmt|;
comment|/**    * Specifies the total outbound bandwidth available to YARN containers.    * defaults to NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT if not specified.    * Work in progress: This configuration parameter may be changed/removed in    * the future    */
annotation|@
name|Private
DECL|field|NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT
init|=
name|NM_NETWORK_RESOURCE_PREFIX
operator|+
literal|"outbound-bandwidth-yarn-mbit"
decl_stmt|;
comment|/**    * Prefix for computation resources, example of computation resources like    * GPU / FPGA / TPU, etc.    */
annotation|@
name|Private
DECL|field|NM_RESOURCE_PLUGINS
specifier|public
specifier|static
specifier|final
name|String
name|NM_RESOURCE_PLUGINS
init|=
name|NM_PREFIX
operator|+
literal|"resource-plugins"
decl_stmt|;
comment|/**    * Prefix for gpu configurations. Work in progress: This configuration    * parameter may be changed/removed in the future.    */
annotation|@
name|Private
DECL|field|NM_GPU_RESOURCE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_GPU_RESOURCE_PREFIX
init|=
name|NM_RESOURCE_PLUGINS
operator|+
literal|".gpu."
decl_stmt|;
annotation|@
name|Private
DECL|field|NM_GPU_ALLOWED_DEVICES
specifier|public
specifier|static
specifier|final
name|String
name|NM_GPU_ALLOWED_DEVICES
init|=
name|NM_GPU_RESOURCE_PREFIX
operator|+
literal|"allowed-gpu-devices"
decl_stmt|;
annotation|@
name|Private
DECL|field|AUTOMATICALLY_DISCOVER_GPU_DEVICES
specifier|public
specifier|static
specifier|final
name|String
name|AUTOMATICALLY_DISCOVER_GPU_DEVICES
init|=
literal|"auto"
decl_stmt|;
comment|/**    * This setting controls where to how to invoke GPU binaries    */
annotation|@
name|Private
DECL|field|NM_GPU_PATH_TO_EXEC
specifier|public
specifier|static
specifier|final
name|String
name|NM_GPU_PATH_TO_EXEC
init|=
name|NM_GPU_RESOURCE_PREFIX
operator|+
literal|"path-to-discovery-executables"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_GPU_PATH_TO_EXEC
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_GPU_PATH_TO_EXEC
init|=
literal|""
decl_stmt|;
comment|/**    * Settings to control which implementation of docker plugin for GPU will be    * used.    *    * By default uses NVIDIA docker v1.    */
annotation|@
name|Private
DECL|field|NM_GPU_DOCKER_PLUGIN_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|NM_GPU_DOCKER_PLUGIN_IMPL
init|=
name|NM_GPU_RESOURCE_PREFIX
operator|+
literal|"docker-plugin"
decl_stmt|;
annotation|@
name|Private
DECL|field|NVIDIA_DOCKER_V1
specifier|public
specifier|static
specifier|final
name|String
name|NVIDIA_DOCKER_V1
init|=
literal|"nvidia-docker-v1"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_GPU_DOCKER_PLUGIN_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_GPU_DOCKER_PLUGIN_IMPL
init|=
name|NVIDIA_DOCKER_V1
decl_stmt|;
comment|/**    * This setting controls end point of nvidia-docker-v1 plugin    */
annotation|@
name|Private
DECL|field|NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT
specifier|public
specifier|static
specifier|final
name|String
name|NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT
init|=
name|NM_GPU_RESOURCE_PREFIX
operator|+
literal|"docker-plugin."
operator|+
name|NVIDIA_DOCKER_V1
operator|+
literal|".endpoint"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NVIDIA_DOCKER_PLUGIN_V1_ENDPOINT
init|=
literal|"http://localhost:3476/v1.0/docker/cli"
decl_stmt|;
comment|/**    * Prefix for FPGA configurations. Work in progress: This configuration    * parameter may be changed/removed in the future.    */
annotation|@
name|Private
DECL|field|NM_FPGA_RESOURCE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_FPGA_RESOURCE_PREFIX
init|=
name|NM_RESOURCE_PLUGINS
operator|+
literal|".fpga."
decl_stmt|;
annotation|@
name|Private
DECL|field|NM_FPGA_ALLOWED_DEVICES
specifier|public
specifier|static
specifier|final
name|String
name|NM_FPGA_ALLOWED_DEVICES
init|=
name|NM_FPGA_RESOURCE_PREFIX
operator|+
literal|"allowed-fpga-devices"
decl_stmt|;
annotation|@
name|Private
DECL|field|NM_FPGA_PATH_TO_EXEC
specifier|public
specifier|static
specifier|final
name|String
name|NM_FPGA_PATH_TO_EXEC
init|=
name|NM_FPGA_RESOURCE_PREFIX
operator|+
literal|"path-to-discovery-executables"
decl_stmt|;
annotation|@
name|Private
DECL|field|NM_FPGA_VENDOR_PLUGIN
specifier|public
specifier|static
specifier|final
name|String
name|NM_FPGA_VENDOR_PLUGIN
init|=
name|NM_FPGA_RESOURCE_PREFIX
operator|+
literal|"vendor-plugin.class"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_FPGA_VENDOR_PLUGIN
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_FPGA_VENDOR_PLUGIN
init|=
literal|"org.apache.hadoop.yarn.server.nodemanager.containermanager.resourceplugin.fpga.IntelFpgaOpenclPlugin"
decl_stmt|;
DECL|field|NM_NETWORK_TAG_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_TAG_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"network-tagging"
decl_stmt|;
DECL|field|NM_NETWORK_TAG_HANDLER_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_TAG_HANDLER_ENABLED
init|=
name|NM_NETWORK_TAG_PREFIX
operator|+
literal|"-handler.enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_NETWORK_TAG_HANDLER_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_NETWORK_TAG_HANDLER_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|NM_NETWORK_TAG_MAPPING_MANAGER
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_TAG_MAPPING_MANAGER
init|=
name|NM_NETWORK_TAG_PREFIX
operator|+
literal|".mapping-mamager.class"
decl_stmt|;
DECL|field|NM_NETWORK_TAG_MAPPING_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_NETWORK_TAG_MAPPING_FILE_PATH
init|=
name|NM_NETWORK_TAG_PREFIX
operator|+
literal|".mapping-file.path"
decl_stmt|;
DECL|field|DEFAULT_NM_NETWORK_RESOURCE_TAG_MAPPING_FILE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_NETWORK_RESOURCE_TAG_MAPPING_FILE_PATH
init|=
literal|""
decl_stmt|;
comment|/** NM Webapp address.**/
DECL|field|NM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_WEBAPP_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_NM_WEBAPP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_WEBAPP_PORT
init|=
literal|8042
decl_stmt|;
DECL|field|DEFAULT_NM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_WEBAPP_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_WEBAPP_PORT
decl_stmt|;
comment|/** NM Webapp https address.**/
DECL|field|NM_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|NM_WEBAPP_HTTPS_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"webapp.https.address"
decl_stmt|;
DECL|field|DEFAULT_NM_WEBAPP_HTTPS_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_WEBAPP_HTTPS_PORT
init|=
literal|8044
decl_stmt|;
DECL|field|DEFAULT_NM_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_WEBAPP_HTTPS_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_NM_WEBAPP_HTTPS_PORT
decl_stmt|;
comment|/** Enable/disable CORS filter. */
DECL|field|NM_WEBAPP_ENABLE_CORS_FILTER
specifier|public
specifier|static
specifier|final
name|String
name|NM_WEBAPP_ENABLE_CORS_FILTER
init|=
name|NM_PREFIX
operator|+
literal|"webapp.cross-origin.enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER
init|=
literal|false
decl_stmt|;
comment|/** How often to monitor resource in a node.*/
DECL|field|NM_RESOURCE_MON_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_RESOURCE_MON_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"resource-monitor.interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_RESOURCE_MON_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_RESOURCE_MON_INTERVAL_MS
init|=
literal|3000
decl_stmt|;
DECL|field|NM_CONTAINER_MONITOR_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_MONITOR_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_MONITOR_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_CONTAINER_MONITOR_ENABLED
init|=
literal|true
decl_stmt|;
comment|/** How often to monitor containers.*/
DECL|field|NM_CONTAINER_MON_INTERVAL_MS
specifier|public
specifier|final
specifier|static
name|String
name|NM_CONTAINER_MON_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.interval-ms"
decl_stmt|;
annotation|@
name|Deprecated
DECL|field|DEFAULT_NM_CONTAINER_MON_INTERVAL_MS
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_NM_CONTAINER_MON_INTERVAL_MS
init|=
literal|3000
decl_stmt|;
comment|/** Class that calculates current resource utilization.*/
DECL|field|NM_MON_RESOURCE_CALCULATOR
specifier|public
specifier|static
specifier|final
name|String
name|NM_MON_RESOURCE_CALCULATOR
init|=
name|NM_PREFIX
operator|+
literal|"resource-calculator.class"
decl_stmt|;
comment|/** Class that calculates containers current resource utilization.*/
DECL|field|NM_CONTAINER_MON_RESOURCE_CALCULATOR
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_MON_RESOURCE_CALCULATOR
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.resource-calculator.class"
decl_stmt|;
comment|/** Class that calculates process tree resource utilization.*/
DECL|field|NM_CONTAINER_MON_PROCESS_TREE
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_MON_PROCESS_TREE
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.process-tree.class"
decl_stmt|;
DECL|field|PROCFS_USE_SMAPS_BASED_RSS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|PROCFS_USE_SMAPS_BASED_RSS_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"container-monitor.procfs-tree.smaps-based-rss.enabled"
decl_stmt|;
DECL|field|DEFAULT_PROCFS_USE_SMAPS_BASED_RSS_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_PROCFS_USE_SMAPS_BASED_RSS_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** Enable/disable container metrics. */
annotation|@
name|Private
DECL|field|NM_CONTAINER_METRICS_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_METRICS_ENABLE
init|=
name|NM_PREFIX
operator|+
literal|"container-metrics.enable"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_CONTAINER_METRICS_ENABLE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_CONTAINER_METRICS_ENABLE
init|=
literal|true
decl_stmt|;
comment|/** Container metrics flush period. -1 for flush on completion. */
annotation|@
name|Private
DECL|field|NM_CONTAINER_METRICS_PERIOD_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_METRICS_PERIOD_MS
init|=
name|NM_PREFIX
operator|+
literal|"container-metrics.period-ms"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS
init|=
operator|-
literal|1
decl_stmt|;
comment|/** The delay time ms to unregister container metrics after completion. */
annotation|@
name|Private
DECL|field|NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS
init|=
name|NM_PREFIX
operator|+
literal|"container-metrics.unregister-delay-ms"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS
init|=
literal|10000
decl_stmt|;
comment|/** Prefix for all node manager disk health checker configs. */
DECL|field|NM_DISK_HEALTH_CHECK_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NM_DISK_HEALTH_CHECK_PREFIX
init|=
literal|"yarn.nodemanager.disk-health-checker."
decl_stmt|;
comment|/**    * Enable/Disable disks' health checker. Default is true. An expert level    * configuration property.    */
DECL|field|NM_DISK_HEALTH_CHECK_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|NM_DISK_HEALTH_CHECK_ENABLE
init|=
name|NM_DISK_HEALTH_CHECK_PREFIX
operator|+
literal|"enable"
decl_stmt|;
comment|/** Frequency of running disks' health checker. */
DECL|field|NM_DISK_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_DISK_HEALTH_CHECK_INTERVAL_MS
init|=
name|NM_DISK_HEALTH_CHECK_PREFIX
operator|+
literal|"interval-ms"
decl_stmt|;
comment|/** By default, disks' health is checked every 2 minutes. */
DECL|field|DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_DISK_HEALTH_CHECK_INTERVAL_MS
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/**    * The minimum fraction of number of disks to be healthy for the nodemanager    * to launch new containers. This applies to nm-local-dirs and nm-log-dirs.    */
DECL|field|NM_MIN_HEALTHY_DISKS_FRACTION
specifier|public
specifier|static
specifier|final
name|String
name|NM_MIN_HEALTHY_DISKS_FRACTION
init|=
name|NM_DISK_HEALTH_CHECK_PREFIX
operator|+
literal|"min-healthy-disks"
decl_stmt|;
comment|/**    * By default, at least 25% of disks are to be healthy to say that the node is    * healthy in terms of disks.    */
DECL|field|DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_MIN_HEALTHY_DISKS_FRACTION
init|=
literal|0.25F
decl_stmt|;
comment|/**    * The maximum percentage of disk space that can be used after which a disk is    * marked as offline. Values can range from 0.0 to 100.0. If the value is    * greater than or equal to 100, NM will check for full disk. This applies to    * nm-local-dirs and nm-log-dirs.    */
DECL|field|NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
specifier|public
specifier|static
specifier|final
name|String
name|NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
init|=
name|NM_DISK_HEALTH_CHECK_PREFIX
operator|+
literal|"max-disk-utilization-per-disk-percentage"
decl_stmt|;
comment|/**    * By default, 90% of the disk can be used before it is marked as offline.    */
DECL|field|DEFAULT_NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE
init|=
literal|90.0F
decl_stmt|;
comment|/**    * The low threshold percentage of disk space used when an offline disk is    * marked as online. Values can range from 0.0 to 100.0. The value shouldn't    * be more than NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE. If its value is    * more than NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE or not set, it will be    * set to the same value as NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE.    * This applies to nm-local-dirs and nm-log-dirs.    */
DECL|field|NM_WM_LOW_PER_DISK_UTILIZATION_PERCENTAGE
specifier|public
specifier|static
specifier|final
name|String
name|NM_WM_LOW_PER_DISK_UTILIZATION_PERCENTAGE
init|=
name|NM_DISK_HEALTH_CHECK_PREFIX
operator|+
literal|"disk-utilization-watermark-low-per-disk-percentage"
decl_stmt|;
comment|/**    * The minimum space that must be available on a local dir for it to be used.    * This applies to nm-local-dirs and nm-log-dirs.    */
DECL|field|NM_MIN_PER_DISK_FREE_SPACE_MB
specifier|public
specifier|static
specifier|final
name|String
name|NM_MIN_PER_DISK_FREE_SPACE_MB
init|=
name|NM_DISK_HEALTH_CHECK_PREFIX
operator|+
literal|"min-free-space-per-disk-mb"
decl_stmt|;
comment|/**    * By default, all of the disk can be used before it is marked as offline.    */
DECL|field|DEFAULT_NM_MIN_PER_DISK_FREE_SPACE_MB
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_MIN_PER_DISK_FREE_SPACE_MB
init|=
literal|0
decl_stmt|;
comment|/** Frequency of running node health script.*/
DECL|field|NM_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_INTERVAL_MS
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/** Health check script time out period.*/
DECL|field|NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.script.timeout-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_HEALTH_CHECK_SCRIPT_TIMEOUT_MS
init|=
literal|2
operator|*
name|DEFAULT_NM_HEALTH_CHECK_INTERVAL_MS
decl_stmt|;
comment|/** The health check script to run.*/
DECL|field|NM_HEALTH_CHECK_SCRIPT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_SCRIPT_PATH
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.script.path"
decl_stmt|;
comment|/** The arguments to pass to the health check script.*/
DECL|field|NM_HEALTH_CHECK_SCRIPT_OPTS
specifier|public
specifier|static
specifier|final
name|String
name|NM_HEALTH_CHECK_SCRIPT_OPTS
init|=
name|NM_PREFIX
operator|+
literal|"health-checker.script.opts"
decl_stmt|;
comment|/** The JVM options used on forking ContainerLocalizer process       by container executor. */
DECL|field|NM_CONTAINER_LOCALIZER_JAVA_OPTS_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_LOCALIZER_JAVA_OPTS_KEY
init|=
name|NM_PREFIX
operator|+
literal|"container-localizer.java.opts"
decl_stmt|;
DECL|field|NM_CONTAINER_LOCALIZER_JAVA_OPTS_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_LOCALIZER_JAVA_OPTS_DEFAULT
init|=
literal|"-Xmx256m"
decl_stmt|;
comment|/** The log level of container localizer process. */
DECL|field|NM_CONTAINER_LOCALIZER_LOG_LEVEL
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_LOCALIZER_LOG_LEVEL
init|=
name|NM_PREFIX
operator|+
literal|"container-localizer.log.level"
decl_stmt|;
DECL|field|NM_CONTAINER_LOCALIZER_LOG_LEVEL_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_LOCALIZER_LOG_LEVEL_DEFAULT
init|=
literal|"INFO"
decl_stmt|;
comment|/** Prefix for runtime configuration constants. */
DECL|field|LINUX_CONTAINER_RUNTIME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|LINUX_CONTAINER_RUNTIME_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"runtime.linux."
decl_stmt|;
comment|/**    * Comma separated list of runtimes that are allowed when using    * LinuxContainerExecutor. The allowed values are:    *<ul>    *<li>default</li>    *<li>docker</li>    *<li>javasandbox</li>    *</ul>    */
DECL|field|LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES
specifier|public
specifier|static
specifier|final
name|String
name|LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES
init|=
name|LINUX_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"allowed-runtimes"
decl_stmt|;
comment|/** The default list of allowed runtimes when using LinuxContainerExecutor. */
DECL|field|DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_LINUX_CONTAINER_RUNTIME_ALLOWED_RUNTIMES
init|=
block|{
literal|"default"
block|}
decl_stmt|;
DECL|field|DOCKER_CONTAINER_RUNTIME_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|DOCKER_CONTAINER_RUNTIME_PREFIX
init|=
name|LINUX_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"docker."
decl_stmt|;
comment|/** Capabilities allowed (and added by default) for docker containers. **/
DECL|field|NM_DOCKER_CONTAINER_CAPABILITIES
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_CONTAINER_CAPABILITIES
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"capabilities"
decl_stmt|;
comment|/** These are the default capabilities added by docker. We'll use the same    * set here. While these may not be case-sensitive from a docker    * perspective, it is best to keep these uppercase.    */
DECL|field|DEFAULT_NM_DOCKER_CONTAINER_CAPABILITIES
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_NM_DOCKER_CONTAINER_CAPABILITIES
init|=
block|{
literal|"CHOWN"
block|,
literal|"DAC_OVERRIDE"
block|,
literal|"FSETID"
block|,
literal|"FOWNER"
block|,
literal|"MKNOD"
block|,
literal|"NET_RAW"
block|,
literal|"SETGID"
block|,
literal|"SETUID"
block|,
literal|"SETFCAP"
block|,
literal|"SETPCAP"
block|,
literal|"NET_BIND_SERVICE"
block|,
literal|"SYS_CHROOT"
block|,
literal|"KILL"
block|,
literal|"AUDIT_WRITE"
block|}
decl_stmt|;
comment|/** Allow privileged containers. Use with extreme care. */
DECL|field|NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"privileged-containers.allowed"
decl_stmt|;
comment|/** Privileged containers are disabled by default. */
DECL|field|DEFAULT_NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_DOCKER_ALLOW_PRIVILEGED_CONTAINERS
init|=
literal|false
decl_stmt|;
comment|/** enable user remapping. */
DECL|field|NM_DOCKER_ENABLE_USER_REMAPPING
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_ENABLE_USER_REMAPPING
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"enable-userremapping.allowed"
decl_stmt|;
comment|/** Set enable user remapping as false by default. */
DECL|field|DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING
init|=
literal|true
decl_stmt|;
comment|/** lower limit for acceptable uids of user remapped user. */
DECL|field|NM_DOCKER_USER_REMAPPING_UID_THRESHOLD
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_USER_REMAPPING_UID_THRESHOLD
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"userremapping-uid-threshold"
decl_stmt|;
comment|/** Set user remapping lower uid limit to 1 by default. */
DECL|field|DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD
init|=
literal|1
decl_stmt|;
comment|/** lower limit for acceptable gids of user remapped user. */
DECL|field|NM_DOCKER_USER_REMAPPING_GID_THRESHOLD
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_USER_REMAPPING_GID_THRESHOLD
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"userremapping-gid-threshold"
decl_stmt|;
comment|/** Set user remapping lower gid limit to 1 by default. */
DECL|field|DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD
init|=
literal|1
decl_stmt|;
comment|/** ACL list for users allowed to run privileged containers. */
DECL|field|NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"privileged-containers.acl"
decl_stmt|;
comment|/** Default list for users allowed to run privileged containers is empty. */
DECL|field|DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL
init|=
literal|""
decl_stmt|;
comment|/** The set of networks allowed when launching containers using the    * DockerContainerRuntime. */
DECL|field|NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"allowed-container-networks"
decl_stmt|;
comment|/** The set of networks allowed when launching containers using the    * DockerContainerRuntime. */
DECL|field|DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS
init|=
block|{
literal|"host"
block|,
literal|"none"
block|,
literal|"bridge"
block|}
decl_stmt|;
comment|/** The network used when launching containers using the    * DockerContainerRuntime when no network is specified in the request. This    *  network must be one of the (configurable) set of allowed container    *  networks. */
DECL|field|NM_DOCKER_DEFAULT_CONTAINER_NETWORK
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_DEFAULT_CONTAINER_NETWORK
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"default-container-network"
decl_stmt|;
comment|/** The network used when launching containers using the    * DockerContainerRuntime when no network is specified in the request and    * no default network is configured.    * . */
DECL|field|DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK
init|=
literal|"host"
decl_stmt|;
comment|/** Allow host pid namespace for containers. Use with care. */
DECL|field|NM_DOCKER_ALLOW_HOST_PID_NAMESPACE
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_ALLOW_HOST_PID_NAMESPACE
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"host-pid-namespace.allowed"
decl_stmt|;
comment|/** Host pid namespace for containers is disabled by default. */
DECL|field|DEFAULT_NM_DOCKER_ALLOW_HOST_PID_NAMESPACE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_DOCKER_ALLOW_HOST_PID_NAMESPACE
init|=
literal|false
decl_stmt|;
comment|/**    * Whether or not users are allowed to request that Docker containers honor    * the debug deletion delay. This is useful for troubleshooting Docker    * container related launch failures.    */
DECL|field|NM_DOCKER_ALLOW_DELAYED_REMOVAL
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_ALLOW_DELAYED_REMOVAL
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"delayed-removal.allowed"
decl_stmt|;
comment|/**    * The default value on whether or not a user can request that Docker    * containers honor the debug deletion delay.    */
DECL|field|DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL
init|=
literal|false
decl_stmt|;
comment|/**    * A configurable value to pass to the Docker Stop command. This value    * defines the number of seconds between the docker stop command sending    * a SIGTERM and a SIGKILL.    */
DECL|field|NM_DOCKER_STOP_GRACE_PERIOD
specifier|public
specifier|static
specifier|final
name|String
name|NM_DOCKER_STOP_GRACE_PERIOD
init|=
name|DOCKER_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"stop.grace-period"
decl_stmt|;
comment|/**    * The default value for the grace period between the SIGTERM and the    * SIGKILL in the Docker Stop command.    */
DECL|field|DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD
init|=
literal|10
decl_stmt|;
comment|/** The mode in which the Java Container Sandbox should run detailed by    *  the JavaSandboxLinuxContainerRuntime. */
DECL|field|YARN_CONTAINER_SANDBOX
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CONTAINER_SANDBOX
init|=
name|LINUX_CONTAINER_RUNTIME_PREFIX
operator|+
literal|"sandbox-mode"
decl_stmt|;
DECL|field|DEFAULT_YARN_CONTAINER_SANDBOX
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_CONTAINER_SANDBOX
init|=
literal|"disabled"
decl_stmt|;
comment|/** Permissions for application local directories.*/
DECL|field|YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS
init|=
name|YARN_CONTAINER_SANDBOX
operator|+
literal|".local-dirs.permissions"
decl_stmt|;
DECL|field|DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_CONTAINER_SANDBOX_FILE_PERMISSIONS
init|=
literal|"read"
decl_stmt|;
comment|/** Location for non-default java policy file.*/
DECL|field|YARN_CONTAINER_SANDBOX_POLICY
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CONTAINER_SANDBOX_POLICY
init|=
name|YARN_CONTAINER_SANDBOX
operator|+
literal|".policy"
decl_stmt|;
comment|/** Prefix for group to policy file mapping.*/
DECL|field|YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CONTAINER_SANDBOX_POLICY_GROUP_PREFIX
init|=
name|YARN_CONTAINER_SANDBOX_POLICY
operator|+
literal|".group."
decl_stmt|;
comment|/** The group which will run by default without the java security manager.*/
DECL|field|YARN_CONTAINER_SANDBOX_WHITELIST_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CONTAINER_SANDBOX_WHITELIST_GROUP
init|=
name|YARN_CONTAINER_SANDBOX
operator|+
literal|".whitelist-group"
decl_stmt|;
comment|/** The path to the Linux container executor.*/
DECL|field|NM_LINUX_CONTAINER_EXECUTOR_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_EXECUTOR_PATH
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.path"
decl_stmt|;
comment|/**     * The UNIX group that the linux-container-executor should run as.    * This is intended to be set as part of container-executor.cfg.     */
DECL|field|NM_LINUX_CONTAINER_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_GROUP
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.group"
decl_stmt|;
comment|/**    * True if linux-container-executor should limit itself to one user    * when running in non-secure mode.    */
DECL|field|NM_NONSECURE_MODE_LIMIT_USERS
specifier|public
specifier|static
specifier|final
name|String
name|NM_NONSECURE_MODE_LIMIT_USERS
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.nonsecure-mode.limit-users"
decl_stmt|;
DECL|field|DEFAULT_NM_NONSECURE_MODE_LIMIT_USERS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_NONSECURE_MODE_LIMIT_USERS
init|=
literal|true
decl_stmt|;
comment|/**    * The UNIX user that containers will run as when Linux-container-executor    * is used in nonsecure mode (a use case for this is using cgroups).    */
DECL|field|NM_NONSECURE_MODE_LOCAL_USER_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NM_NONSECURE_MODE_LOCAL_USER_KEY
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.nonsecure-mode.local-user"
decl_stmt|;
DECL|field|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_NONSECURE_MODE_LOCAL_USER
init|=
literal|"nobody"
decl_stmt|;
comment|/**    * The allowed pattern for UNIX user names enforced by     * Linux-container-executor when used in nonsecure mode (use case for this     * is using cgroups). The default value is taken from /usr/sbin/adduser    */
DECL|field|NM_NONSECURE_MODE_USER_PATTERN_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NM_NONSECURE_MODE_USER_PATTERN_KEY
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.nonsecure-mode.user-pattern"
decl_stmt|;
DECL|field|DEFAULT_NM_NONSECURE_MODE_USER_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_NONSECURE_MODE_USER_PATTERN
init|=
literal|"^[_.A-Za-z0-9][-@_.A-Za-z0-9]{0,255}?[$]?$"
decl_stmt|;
comment|/** The type of resource enforcement to use with the    *  linux container executor.    */
DECL|field|NM_LINUX_CONTAINER_RESOURCES_HANDLER
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_RESOURCES_HANDLER
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.resources-handler.class"
decl_stmt|;
comment|/** The path the linux container executor should use for cgroups */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_HIERARCHY
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.hierarchy"
decl_stmt|;
comment|/** Whether the linux container executor should mount cgroups if not found */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_MOUNT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.mount"
decl_stmt|;
comment|/** Where the linux container executor should mount cgroups if not found */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_MOUNT_PATH
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.mount-path"
decl_stmt|;
comment|/**    * Whether the apps should run in strict resource usage mode(not allowed to    * use spare CPU)    */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.strict-resource-usage"
decl_stmt|;
DECL|field|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE
init|=
literal|false
decl_stmt|;
comment|// Configurations for applicaiton life time monitor feature
DECL|field|RM_APPLICATION_MONITOR_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_APPLICATION_MONITOR_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"application-timeouts.monitor.interval-ms"
decl_stmt|;
DECL|field|DEFAULT_RM_APPLICATION_MONITOR_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_APPLICATION_MONITOR_INTERVAL_MS
init|=
literal|3000
decl_stmt|;
comment|/**    * Interval of time the linux container executor should try cleaning up    * cgroups entry when cleaning up a container. This is required due to what     * it seems a race condition because the SIGTERM/SIGKILL is asynch.    */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.delete-timeout-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT
init|=
literal|1000
decl_stmt|;
comment|/**    * Delay between attempts to remove linux cgroup.    */
DECL|field|NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY
specifier|public
specifier|static
specifier|final
name|String
name|NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY
init|=
name|NM_PREFIX
operator|+
literal|"linux-container-executor.cgroups.delete-delay-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_DELAY
init|=
literal|20
decl_stmt|;
comment|/**    * Indicates if memory and CPU limits will be set for the Windows Job    * Object for the containers launched by the default container executor.    */
DECL|field|NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"windows-container.memory-limit.enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"windows-container.cpu-limit.enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    /* The Windows group that the windows-secure-container-executor should run as.   */
DECL|field|NM_WINDOWS_SECURE_CONTAINER_GROUP
specifier|public
specifier|static
specifier|final
name|String
name|NM_WINDOWS_SECURE_CONTAINER_GROUP
init|=
name|NM_PREFIX
operator|+
literal|"windows-secure-container-executor.group"
decl_stmt|;
comment|/** T-file compression types used to compress aggregated logs.*/
DECL|field|NM_LOG_AGG_COMPRESSION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_AGG_COMPRESSION_TYPE
init|=
name|NM_PREFIX
operator|+
literal|"log-aggregation.compression-type"
decl_stmt|;
DECL|field|DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE
init|=
literal|"none"
decl_stmt|;
comment|/** The kerberos principal for the node manager.*/
DECL|field|NM_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|NM_PRINCIPAL
init|=
name|NM_PREFIX
operator|+
literal|"principal"
decl_stmt|;
DECL|field|NM_AUX_SERVICES
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICES
init|=
name|NM_PREFIX
operator|+
literal|"aux-services"
decl_stmt|;
DECL|field|NM_AUX_SERVICE_FMT
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICE_FMT
init|=
name|NM_PREFIX
operator|+
literal|"aux-services.%s.class"
decl_stmt|;
DECL|field|NM_AUX_SERVICES_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICES_CLASSPATH
init|=
name|NM_AUX_SERVICES
operator|+
literal|".%s.classpath"
decl_stmt|;
DECL|field|NM_AUX_SERVICE_REMOTE_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICE_REMOTE_CLASSPATH
init|=
name|NM_AUX_SERVICES
operator|+
literal|".%s.remote-classpath"
decl_stmt|;
DECL|field|NM_AUX_SERVICES_SYSTEM_CLASSES
specifier|public
specifier|static
specifier|final
name|String
name|NM_AUX_SERVICES_SYSTEM_CLASSES
init|=
name|NM_AUX_SERVICES
operator|+
literal|".%s.system-classes"
decl_stmt|;
DECL|field|NM_USER_HOME_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_USER_HOME_DIR
init|=
name|NM_PREFIX
operator|+
literal|"user-home-dir"
decl_stmt|;
DECL|field|NM_CONTAINER_STDERR_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_STDERR_PATTERN
init|=
name|NM_PREFIX
operator|+
literal|"container.stderr.pattern"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_STDERR_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_CONTAINER_STDERR_PATTERN
init|=
literal|"{*stderr*,*STDERR*}"
decl_stmt|;
DECL|field|NM_CONTAINER_STDERR_BYTES
specifier|public
specifier|static
specifier|final
name|String
name|NM_CONTAINER_STDERR_BYTES
init|=
name|NM_PREFIX
operator|+
literal|"container.stderr.tail.bytes"
decl_stmt|;
DECL|field|DEFAULT_NM_CONTAINER_STDERR_BYTES
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_CONTAINER_STDERR_BYTES
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
comment|/**The kerberos principal to be used for spnego filter for NM.*/
DECL|field|NM_WEBAPP_SPNEGO_USER_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NM_WEBAPP_SPNEGO_USER_NAME_KEY
init|=
name|NM_PREFIX
operator|+
literal|"webapp.spnego-principal"
decl_stmt|;
comment|/**The kerberos keytab to be used for spnego filter for NM.*/
DECL|field|NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
init|=
name|NM_PREFIX
operator|+
literal|"webapp.spnego-keytab-file"
decl_stmt|;
DECL|field|DEFAULT_NM_USER_HOME_DIR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_USER_HOME_DIR
init|=
literal|"/home/"
decl_stmt|;
DECL|field|NM_RECOVERY_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_RECOVERY_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"recovery."
decl_stmt|;
DECL|field|NM_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_RECOVERY_ENABLED
init|=
name|NM_RECOVERY_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_RECOVERY_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|NM_RECOVERY_DIR
specifier|public
specifier|static
specifier|final
name|String
name|NM_RECOVERY_DIR
init|=
name|NM_RECOVERY_PREFIX
operator|+
literal|"dir"
decl_stmt|;
comment|/** The time in seconds between full compactions of the NM state database.    *  Setting the interval to zero disables the full compaction cycles.    */
DECL|field|NM_RECOVERY_COMPACTION_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|NM_RECOVERY_COMPACTION_INTERVAL_SECS
init|=
name|NM_RECOVERY_PREFIX
operator|+
literal|"compaction-interval-secs"
decl_stmt|;
DECL|field|DEFAULT_NM_RECOVERY_COMPACTION_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_RECOVERY_COMPACTION_INTERVAL_SECS
init|=
literal|3600
decl_stmt|;
DECL|field|NM_RECOVERY_SUPERVISED
specifier|public
specifier|static
specifier|final
name|String
name|NM_RECOVERY_SUPERVISED
init|=
name|NM_RECOVERY_PREFIX
operator|+
literal|"supervised"
decl_stmt|;
DECL|field|DEFAULT_NM_RECOVERY_SUPERVISED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_RECOVERY_SUPERVISED
init|=
literal|false
decl_stmt|;
DECL|field|NM_LOG_AGG_POLICY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_AGG_POLICY_CLASS
init|=
name|NM_PREFIX
operator|+
literal|"log-aggregation.policy.class"
decl_stmt|;
DECL|field|NM_LOG_AGG_POLICY_CLASS_PARAMETERS
specifier|public
specifier|static
specifier|final
name|String
name|NM_LOG_AGG_POLICY_CLASS_PARAMETERS
init|=
name|NM_PREFIX
operator|+
literal|"log-aggregation.policy.parameters"
decl_stmt|;
comment|////////////////////////////////
comment|// Web Proxy Configs
comment|////////////////////////////////
DECL|field|PROXY_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PREFIX
init|=
literal|"yarn.web-proxy."
decl_stmt|;
comment|/** The kerberos principal for the proxy.*/
DECL|field|PROXY_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_PRINCIPAL
init|=
name|PROXY_PREFIX
operator|+
literal|"principal"
decl_stmt|;
comment|/** Keytab for Proxy.*/
DECL|field|PROXY_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_KEYTAB
init|=
name|PROXY_PREFIX
operator|+
literal|"keytab"
decl_stmt|;
comment|/** The address for the web proxy.*/
DECL|field|PROXY_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|PROXY_ADDRESS
init|=
name|PROXY_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_PROXY_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PROXY_PORT
init|=
literal|9099
decl_stmt|;
DECL|field|DEFAULT_PROXY_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PROXY_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_PROXY_PORT
decl_stmt|;
comment|/**    * YARN Service Level Authorization    */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCETRACKER_PROTOCOL
name|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCETRACKER_PROTOCOL
init|=
literal|"security.resourcetracker.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONCLIENT_PROTOCOL
name|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONCLIENT_PROTOCOL
init|=
literal|"security.applicationclient.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCEMANAGER_ADMINISTRATION_PROTOCOL
name|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCEMANAGER_ADMINISTRATION_PROTOCOL
init|=
literal|"security.resourcemanager-administration.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONMASTER_PROTOCOL
name|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONMASTER_PROTOCOL
init|=
literal|"security.applicationmaster.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_CONTAINER_MANAGEMENT_PROTOCOL
name|YARN_SECURITY_SERVICE_AUTHORIZATION_CONTAINER_MANAGEMENT_PROTOCOL
init|=
literal|"security.containermanagement.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCE_LOCALIZER
name|YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCE_LOCALIZER
init|=
literal|"security.resourcelocalizer.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONHISTORY_PROTOCOL
name|YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONHISTORY_PROTOCOL
init|=
literal|"security.applicationhistory.protocol.acl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|YARN_SECURITY_SERVICE_AUTHORIZATION_COLLECTOR_NODEMANAGER_PROTOCOL
name|YARN_SECURITY_SERVICE_AUTHORIZATION_COLLECTOR_NODEMANAGER_PROTOCOL
init|=
literal|"security.collector-nodemanager.protocol.acl"
decl_stmt|;
comment|/** No. of milliseconds to wait between sending a SIGTERM and SIGKILL    * to a running container */
DECL|field|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
init|=
name|NM_PREFIX
operator|+
literal|"sleep-delay-before-sigkill.ms"
decl_stmt|;
DECL|field|DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_SLEEP_DELAY_BEFORE_SIGKILL_MS
init|=
literal|250
decl_stmt|;
comment|/** Max time to wait for a process to come up when trying to cleanup    * container resources */
DECL|field|NM_PROCESS_KILL_WAIT_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_PROCESS_KILL_WAIT_MS
init|=
name|NM_PREFIX
operator|+
literal|"process-kill-wait.ms"
decl_stmt|;
DECL|field|DEFAULT_NM_PROCESS_KILL_WAIT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_PROCESS_KILL_WAIT_MS
init|=
literal|5000
decl_stmt|;
comment|/** Max time to wait to establish a connection to RM */
DECL|field|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
init|=
name|RM_PREFIX
operator|+
literal|"connect.max-wait.ms"
decl_stmt|;
DECL|field|DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
init|=
literal|15
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/** Time interval between each attempt to connect to RM */
DECL|field|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
init|=
name|RM_PREFIX
operator|+
literal|"connect.retry-interval.ms"
decl_stmt|;
DECL|field|DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
DECL|field|DISPATCHER_DRAIN_EVENTS_TIMEOUT
specifier|public
specifier|static
specifier|final
name|String
name|DISPATCHER_DRAIN_EVENTS_TIMEOUT
init|=
name|YARN_PREFIX
operator|+
literal|"dispatcher.drain-events.timeout"
decl_stmt|;
DECL|field|DEFAULT_DISPATCHER_DRAIN_EVENTS_TIMEOUT
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_DISPATCHER_DRAIN_EVENTS_TIMEOUT
init|=
literal|300000
decl_stmt|;
comment|/**    * CLASSPATH for YARN applications. A comma-separated list of CLASSPATH    * entries    */
DECL|field|YARN_APPLICATION_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
name|YARN_APPLICATION_CLASSPATH
init|=
name|YARN_PREFIX
operator|+
literal|"application.classpath"
decl_stmt|;
comment|/** The setting that controls whether AMRMProxy is enabled or not. */
DECL|field|AMRM_PROXY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|AMRM_PROXY_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"amrmproxy.enabled"
decl_stmt|;
DECL|field|DEFAULT_AMRM_PROXY_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_AMRM_PROXY_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|AMRM_PROXY_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|AMRM_PROXY_ADDRESS
init|=
name|NM_PREFIX
operator|+
literal|"amrmproxy.address"
decl_stmt|;
DECL|field|DEFAULT_AMRM_PROXY_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_AMRM_PROXY_PORT
init|=
literal|8049
decl_stmt|;
DECL|field|DEFAULT_AMRM_PROXY_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_AMRM_PROXY_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_AMRM_PROXY_PORT
decl_stmt|;
DECL|field|AMRM_PROXY_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|AMRM_PROXY_CLIENT_THREAD_COUNT
init|=
name|NM_PREFIX
operator|+
literal|"amrmproxy.client.thread-count"
decl_stmt|;
DECL|field|DEFAULT_AMRM_PROXY_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_AMRM_PROXY_CLIENT_THREAD_COUNT
init|=
literal|3
decl_stmt|;
DECL|field|AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
specifier|public
specifier|static
specifier|final
name|String
name|AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
init|=
name|NM_PREFIX
operator|+
literal|"amrmproxy.interceptor-class.pipeline"
decl_stmt|;
DECL|field|DEFAULT_AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_AMRM_PROXY_INTERCEPTOR_CLASS_PIPELINE
init|=
literal|"org.apache.hadoop.yarn.server.nodemanager.amrmproxy."
operator|+
literal|"DefaultRequestInterceptor"
decl_stmt|;
DECL|field|AMRM_PROXY_HA_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|AMRM_PROXY_HA_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"amrmproxy.ha.enable"
decl_stmt|;
DECL|field|DEFAULT_AMRM_PROXY_HA_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_AMRM_PROXY_HA_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * Default platform-agnostic CLASSPATH for YARN applications. A    * comma-separated list of CLASSPATH entries. The parameter expansion marker    * will be replaced with real parameter expansion marker ('%' for Windows and    * '$' for Linux) by NodeManager on container launch. For example: {{VAR}}    * will be replaced as $VAR on Linux, and %VAR% on Windows.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|field|DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH
init|=
block|{
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|$$
argument_list|()
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|$$
argument_list|()
operator|+
literal|"/share/hadoop/common/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|$$
argument_list|()
operator|+
literal|"/share/hadoop/common/lib/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|$$
argument_list|()
operator|+
literal|"/share/hadoop/hdfs/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|$$
argument_list|()
operator|+
literal|"/share/hadoop/hdfs/lib/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|$$
argument_list|()
operator|+
literal|"/share/hadoop/yarn/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|$$
argument_list|()
operator|+
literal|"/share/hadoop/yarn/lib/*"
block|}
decl_stmt|;
comment|/**    *<p>    * Default platform-specific CLASSPATH for YARN applications. A    * comma-separated list of CLASSPATH entries constructed based on the client    * OS environment expansion syntax.    *</p>    *<p>    * Note: Use {@link #DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH} for    * cross-platform practice i.e. submit an application from a Windows client to    * a Linux/Unix server or vice versa.    *</p>    */
DECL|field|DEFAULT_YARN_APPLICATION_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|DEFAULT_YARN_APPLICATION_CLASSPATH
init|=
block|{
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_CONF_DIR
operator|.
name|$
argument_list|()
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/common/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_COMMON_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/common/lib/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/hdfs/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_HDFS_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/hdfs/lib/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/yarn/*"
block|,
name|ApplicationConstants
operator|.
name|Environment
operator|.
name|HADOOP_YARN_HOME
operator|.
name|$
argument_list|()
operator|+
literal|"/share/hadoop/yarn/lib/*"
block|}
decl_stmt|;
comment|/** Container temp directory */
DECL|field|DEFAULT_CONTAINER_TEMP_DIR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONTAINER_TEMP_DIR
init|=
literal|"./tmp"
decl_stmt|;
DECL|field|IS_MINI_YARN_CLUSTER
specifier|public
specifier|static
specifier|final
name|String
name|IS_MINI_YARN_CLUSTER
init|=
name|YARN_PREFIX
operator|+
literal|"is.minicluster"
decl_stmt|;
DECL|field|YARN_MC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|YARN_MC_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"minicluster."
decl_stmt|;
comment|/** Whether to use fixed ports with the minicluster. */
DECL|field|YARN_MINICLUSTER_FIXED_PORTS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_MINICLUSTER_FIXED_PORTS
init|=
name|YARN_MC_PREFIX
operator|+
literal|"fixed.ports"
decl_stmt|;
comment|/**    * Default is false to be able to run tests concurrently without port    * conflicts.    */
DECL|field|DEFAULT_YARN_MINICLUSTER_FIXED_PORTS
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_MINICLUSTER_FIXED_PORTS
init|=
literal|false
decl_stmt|;
comment|/**    * Whether the NM should use RPC to connect to the RM. Default is false.    * Can be set to true only when using fixed ports.    */
DECL|field|YARN_MINICLUSTER_USE_RPC
specifier|public
specifier|static
specifier|final
name|String
name|YARN_MINICLUSTER_USE_RPC
init|=
name|YARN_MC_PREFIX
operator|+
literal|"use-rpc"
decl_stmt|;
DECL|field|DEFAULT_YARN_MINICLUSTER_USE_RPC
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_YARN_MINICLUSTER_USE_RPC
init|=
literal|false
decl_stmt|;
comment|/**    * Whether users are explicitly trying to control resource monitoring    * configuration for the MiniYARNCluster. Disabled by default.    */
DECL|field|YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
specifier|public
specifier|static
specifier|final
name|String
name|YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
init|=
name|YARN_MC_PREFIX
operator|+
literal|"control-resource-monitoring"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
DECL|field|DEFAULT_YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
name|DEFAULT_YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING
init|=
literal|false
decl_stmt|;
comment|/** Allow changing the memory for the NodeManager in the MiniYARNCluster */
DECL|field|YARN_MINICLUSTER_NM_PMEM_MB
specifier|public
specifier|static
specifier|final
name|String
name|YARN_MINICLUSTER_NM_PMEM_MB
init|=
name|YARN_MC_PREFIX
operator|+
name|YarnConfiguration
operator|.
name|NM_PMEM_MB
decl_stmt|;
DECL|field|DEFAULT_YARN_MINICLUSTER_NM_PMEM_MB
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_YARN_MINICLUSTER_NM_PMEM_MB
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
comment|/** The log directory for the containers */
DECL|field|YARN_APP_CONTAINER_LOG_DIR
specifier|public
specifier|static
specifier|final
name|String
name|YARN_APP_CONTAINER_LOG_DIR
init|=
name|YARN_PREFIX
operator|+
literal|"app.container.log.dir"
decl_stmt|;
DECL|field|YARN_APP_CONTAINER_LOG_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|YARN_APP_CONTAINER_LOG_SIZE
init|=
name|YARN_PREFIX
operator|+
literal|"app.container.log.filesize"
decl_stmt|;
DECL|field|YARN_APP_CONTAINER_LOG_BACKUPS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_APP_CONTAINER_LOG_BACKUPS
init|=
name|YARN_PREFIX
operator|+
literal|"app.container.log.backups"
decl_stmt|;
comment|////////////////////////////////
comment|// Timeline Service Configs
comment|////////////////////////////////
DECL|field|TIMELINE_SERVICE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"timeline-service."
decl_stmt|;
DECL|field|TIMELINE_SERVICE_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_VERSION
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"version"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_VERSION
specifier|public
specifier|static
specifier|final
name|float
name|DEFAULT_TIMELINE_SERVICE_VERSION
init|=
literal|1.0f
decl_stmt|;
DECL|field|TIMELINE_SERVICE_VERSIONS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_VERSIONS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"versions"
decl_stmt|;
comment|/**    * Comma separated list of names for UIs hosted in the timeline server    * (For pluggable UIs).    */
DECL|field|TIMELINE_SERVICE_UI_NAMES
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_UI_NAMES
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"ui-names"
decl_stmt|;
comment|/** Relative web path that will serve up this UI (For pluggable UIs). */
DECL|field|TIMELINE_SERVICE_UI_WEB_PATH_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_UI_WEB_PATH_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"ui-web-path."
decl_stmt|;
comment|/** Timeline client settings. */
DECL|field|TIMELINE_SERVICE_CLIENT_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_CLIENT_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"client."
decl_stmt|;
comment|/**    * Path to war file or static content directory for this UI    * (For pluggable UIs).    */
DECL|field|TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"ui-on-disk-path."
decl_stmt|;
comment|/**    * The setting for timeline service v1.5    */
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"entity-group-fs-store."
decl_stmt|;
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CACHE_STORE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CACHE_STORE
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"cache-store-class"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"active-dir"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT
init|=
literal|"/tmp/entity-file-history/active"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"done-dir"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT
init|=
literal|"/tmp/entity-file-history/done"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"group-id-plugin-classes"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"group-id-plugin-classpath"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"group-id-plugin-system-classes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_STORE
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_STORE
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"summary-store"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_ENTITY_TYPES
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_ENTITY_TYPES
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"summary-entity-types"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"scan-interval-seconds"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT
init|=
literal|60
decl_stmt|;
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"threads"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT
init|=
literal|16
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"app-cache-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE_DEFAULT
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"cleaner-interval-seconds"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT
init|=
literal|60
operator|*
literal|60
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"retain-seconds"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS_DEFAULT
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|// how old the most recent log of an UNKNOWN app needs to be in the active
comment|// directory before we treat it as COMPLETED
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"unknown-active-seconds"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS_DEFAULT
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS_DEFAULT
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
DECL|field|TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"leveldb-cache-read-cache-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE
init|=
literal|10
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|TIMELINE_SERVICE_CLIENT_FD_FLUSH_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_CLIENT_FD_FLUSH_INTERVAL_SECS
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"fd-flush-interval-secs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|TIMELINE_SERVICE_CLIENT_FD_FLUSH_INTERVAL_SECS_DEFAULT
name|TIMELINE_SERVICE_CLIENT_FD_FLUSH_INTERVAL_SECS_DEFAULT
init|=
literal|10
decl_stmt|;
DECL|field|TIMELINE_SERVICE_CLIENT_FD_CLEAN_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_CLIENT_FD_CLEAN_INTERVAL_SECS
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"fd-clean-interval-secs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|TIMELINE_SERVICE_CLIENT_FD_CLEAN_INTERVAL_SECS_DEFAULT
name|TIMELINE_SERVICE_CLIENT_FD_CLEAN_INTERVAL_SECS_DEFAULT
init|=
literal|60
decl_stmt|;
DECL|field|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"fd-retain-secs"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS_DEFAULT
init|=
literal|5
operator|*
literal|60
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS
name|TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"internal-timers-ttl-secs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS_DEFAULT
name|TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS_DEFAULT
init|=
literal|7
operator|*
literal|60
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE
name|TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"internal-attempt-dir-cache-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE
name|DEFAULT_TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE
init|=
literal|1000
decl_stmt|;
comment|// This is temporary solution. The configuration will be deleted once we have
comment|// the FileSystem API to check whether append operation is supported or not.
DECL|field|TIMELINE_SERVICE_ENTITYFILE_FS_SUPPORT_APPEND
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENTITYFILE_FS_SUPPORT_APPEND
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"entity-file.fs-support-append"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_WITH_USER_DIR
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_WITH_USER_DIR
init|=
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_PREFIX
operator|+
literal|"with-user-dir"
decl_stmt|;
comment|/**    * Settings for timeline service v2.0.    */
DECL|field|TIMELINE_SERVICE_READER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_READER_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"reader."
decl_stmt|;
DECL|field|TIMELINE_SERVICE_WRITER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_WRITER_CLASS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"writer.class"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_WRITER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_WRITER_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.timelineservice"
operator|+
literal|".storage.HBaseTimelineWriterImpl"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_READER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_READER_CLASS
init|=
name|TIMELINE_SERVICE_READER_PREFIX
operator|+
literal|"class"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_READER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_READER_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.timelineservice.storage"
operator|+
literal|".HBaseTimelineReaderImpl"
decl_stmt|;
comment|/**    * default schema prefix for hbase tables.    */
DECL|field|DEFAULT_TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX
init|=
literal|"prod."
decl_stmt|;
comment|/**    * config param name to override schema prefix.    */
DECL|field|TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_HBASE_SCHEMA_PREFIX_NAME
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"hbase-schema.prefix"
decl_stmt|;
comment|/** The setting that controls how often the timeline collector flushes the    * timeline writer.    */
DECL|field|TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"writer.flush-interval-seconds"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
name|DEFAULT_TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS
init|=
literal|60
decl_stmt|;
comment|/**    * The name for setting that controls how long the final value of    * a metric of a completed app is retained before merging    * into the flow sum.    */
DECL|field|APP_FINAL_VALUE_RETENTION_THRESHOLD
specifier|public
specifier|static
specifier|final
name|String
name|APP_FINAL_VALUE_RETENTION_THRESHOLD
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"hbase.coprocessor.app-final-value-retention-milliseconds"
decl_stmt|;
comment|/**    * The name of the setting for the location of the coprocessor    * jar on hdfs.    */
DECL|field|FLOW_RUN_COPROCESSOR_JAR_HDFS_LOCATION
specifier|public
specifier|static
specifier|final
name|String
name|FLOW_RUN_COPROCESSOR_JAR_HDFS_LOCATION
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"hbase.coprocessor.jar.hdfs.location"
decl_stmt|;
comment|/** default hdfs location for flowrun coprocessor jar. */
DECL|field|DEFAULT_HDFS_LOCATION_FLOW_RUN_COPROCESSOR_JAR
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_HDFS_LOCATION_FLOW_RUN_COPROCESSOR_JAR
init|=
literal|"/hbase/coprocessor/hadoop-yarn-server-timelineservice.jar"
decl_stmt|;
comment|/**    * The name for setting that points to an optional HBase configuration    * (hbase-site.xml file) with settings that will override the ones found on    * the classpath.    */
DECL|field|TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_HBASE_CONFIGURATION_FILE
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"hbase.configuration.file"
decl_stmt|;
comment|/**    * The name for setting that enables or disables authentication checks    * for reading timeline service v2 data.    */
DECL|field|TIMELINE_SERVICE_READ_AUTH_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_READ_AUTH_ENABLED
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"read.authentication.enabled"
decl_stmt|;
comment|/**    * The default setting for authentication checks for reading timeline    * service v2 data.    */
DECL|field|DEFAULT_TIMELINE_SERVICE_READ_AUTH_ENABLED
specifier|public
specifier|static
specifier|final
name|Boolean
name|DEFAULT_TIMELINE_SERVICE_READ_AUTH_ENABLED
init|=
literal|false
decl_stmt|;
comment|/**    * The name for setting that lists the users and groups who are allowed    * to read timeline service v2 data. It is a comma separated list of    * user, followed by space, then comma separated list of groups.    * It will allow this list of users and groups to read the data    * and reject everyone else.    */
DECL|field|TIMELINE_SERVICE_READ_ALLOWED_USERS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_READ_ALLOWED_USERS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"read.allowed.users"
decl_stmt|;
comment|/**    * The default value for list of the users who are allowed to read    * timeline service v2 data.    */
DECL|field|DEFAULT_TIMELINE_SERVICE_READ_ALLOWED_USERS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_READ_ALLOWED_USERS
init|=
literal|""
decl_stmt|;
comment|/**    * The setting that controls how long the final value of a metric of a    * completed app is retained before merging into the flow sum. Up to this time    * after an application is completed out-of-order values that arrive can be    * recognized and discarded at the cost of increased storage.    */
DECL|field|DEFAULT_APP_FINAL_VALUE_RETENTION_THRESHOLD
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_APP_FINAL_VALUE_RETENTION_THRESHOLD
init|=
literal|3
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
DECL|field|ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS
specifier|public
specifier|static
specifier|final
name|String
name|ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"app-collector.linger-period.ms"
decl_stmt|;
DECL|field|DEFAULT_ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS
init|=
literal|1000
decl_stmt|;
DECL|field|NUMBER_OF_ASYNC_ENTITIES_TO_MERGE
specifier|public
specifier|static
specifier|final
name|String
name|NUMBER_OF_ASYNC_ENTITIES_TO_MERGE
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"timeline-client.number-of-async-entities-to-merge"
decl_stmt|;
DECL|field|DEFAULT_NUMBER_OF_ASYNC_ENTITIES_TO_MERGE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUMBER_OF_ASYNC_ENTITIES_TO_MERGE
init|=
literal|10
decl_stmt|;
comment|/** default version for any flow. */
DECL|field|DEFAULT_FLOW_VERSION
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FLOW_VERSION
init|=
literal|"1"
decl_stmt|;
comment|/**    * The time period for which timeline v2 client will wait for draining    * leftover entities after stop.    */
DECL|field|TIMELINE_V2_CLIENT_DRAIN_TIME_MILLIS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_V2_CLIENT_DRAIN_TIME_MILLIS
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"drain-entities.timeout.ms"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_V2_CLIENT_DRAIN_TIME_MILLIS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMELINE_V2_CLIENT_DRAIN_TIME_MILLIS
init|=
literal|2000L
decl_stmt|;
comment|// mark app-history related configs @Private as application history is going
comment|// to be integrated into the timeline service
annotation|@
name|Private
DECL|field|APPLICATION_HISTORY_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION_HISTORY_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"generic-application-history."
decl_stmt|;
comment|/**    *  The setting that controls whether application history service is    *  enabled or not.    */
annotation|@
name|Private
DECL|field|APPLICATION_HISTORY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION_HISTORY_ENABLED
init|=
name|APPLICATION_HISTORY_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_APPLICATION_HISTORY_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_APPLICATION_HISTORY_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** Application history store class */
annotation|@
name|Private
DECL|field|APPLICATION_HISTORY_STORE
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION_HISTORY_STORE
init|=
name|APPLICATION_HISTORY_PREFIX
operator|+
literal|"store-class"
decl_stmt|;
comment|/** Save container meta-info in the application history store. */
annotation|@
name|Private
specifier|public
specifier|static
specifier|final
name|String
DECL|field|APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
name|APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
init|=
name|APPLICATION_HISTORY_PREFIX
operator|+
literal|"save-non-am-container-meta-info"
decl_stmt|;
annotation|@
name|Private
specifier|public
specifier|static
specifier|final
name|boolean
DECL|field|DEFAULT_APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
name|DEFAULT_APPLICATION_HISTORY_SAVE_NON_AM_CONTAINER_META_INFO
init|=
literal|true
decl_stmt|;
comment|/** URI for FileSystemApplicationHistoryStore */
annotation|@
name|Private
DECL|field|FS_APPLICATION_HISTORY_STORE_URI
specifier|public
specifier|static
specifier|final
name|String
name|FS_APPLICATION_HISTORY_STORE_URI
init|=
name|APPLICATION_HISTORY_PREFIX
operator|+
literal|"fs-history-store.uri"
decl_stmt|;
comment|/** T-file compression types used to compress history data.*/
annotation|@
name|Private
DECL|field|FS_APPLICATION_HISTORY_STORE_COMPRESSION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|FS_APPLICATION_HISTORY_STORE_COMPRESSION_TYPE
init|=
name|APPLICATION_HISTORY_PREFIX
operator|+
literal|"fs-history-store.compression-type"
decl_stmt|;
annotation|@
name|Private
specifier|public
specifier|static
specifier|final
name|String
DECL|field|DEFAULT_FS_APPLICATION_HISTORY_STORE_COMPRESSION_TYPE
name|DEFAULT_FS_APPLICATION_HISTORY_STORE_COMPRESSION_TYPE
init|=
literal|"none"
decl_stmt|;
comment|/** The setting that controls whether timeline service is enabled or not. */
DECL|field|TIMELINE_SERVICE_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ENABLED
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_TIMELINE_SERVICE_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** host:port address for timeline service RPC APIs. */
DECL|field|TIMELINE_SERVICE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ADDRESS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMELINE_SERVICE_PORT
init|=
literal|10200
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_TIMELINE_SERVICE_PORT
decl_stmt|;
comment|/** The listening endpoint for the timeline service application.*/
DECL|field|TIMELINE_SERVICE_BIND_HOST
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_BIND_HOST
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"bind-host"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_BIND_HOST
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_BIND_HOST
init|=
literal|"0.0.0.0"
decl_stmt|;
comment|/** The number of threads to handle client RPC API requests. */
DECL|field|TIMELINE_SERVICE_HANDLER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_HANDLER_THREAD_COUNT
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"handler-thread-count"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT
init|=
literal|10
decl_stmt|;
comment|/** The address of the timeline service web application.*/
DECL|field|TIMELINE_SERVICE_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_WEBAPP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_PORT
init|=
literal|8188
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_PORT
decl_stmt|;
comment|/** The https address of the timeline service web application.*/
DECL|field|TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"webapp.https.address"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_PORT
init|=
literal|8190
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_PORT
decl_stmt|;
comment|/**    * Defines the max number of applications could be fetched using    * REST API or application history protocol and shown in timeline    * server web ui.    */
DECL|field|APPLICATION_HISTORY_MAX_APPS
specifier|public
specifier|static
specifier|final
name|String
name|APPLICATION_HISTORY_MAX_APPS
init|=
name|APPLICATION_HISTORY_PREFIX
operator|+
literal|"max-applications"
decl_stmt|;
DECL|field|DEFAULT_APPLICATION_HISTORY_MAX_APPS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_APPLICATION_HISTORY_MAX_APPS
init|=
literal|10000
decl_stmt|;
comment|/** Timeline service store class. */
DECL|field|TIMELINE_SERVICE_STORE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_STORE
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"store-class"
decl_stmt|;
comment|/** Timeline service enable data age off */
DECL|field|TIMELINE_SERVICE_TTL_ENABLE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_TTL_ENABLE
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"ttl-enable"
decl_stmt|;
comment|/** Timeline service length of time to retain data */
DECL|field|TIMELINE_SERVICE_TTL_MS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_TTL_MS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"ttl-ms"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_TTL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMELINE_SERVICE_TTL_MS
init|=
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|*
literal|7
decl_stmt|;
comment|/** Timeline service rolling period. Valid values are daily, half_daily,    * quarter_daily, and hourly. */
DECL|field|TIMELINE_SERVICE_ROLLING_PERIOD
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_ROLLING_PERIOD
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"rolling-period"
decl_stmt|;
comment|/** Roll a new database each hour. */
DECL|field|DEFAULT_TIMELINE_SERVICE_ROLLING_PERIOD
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_ROLLING_PERIOD
init|=
literal|"hourly"
decl_stmt|;
comment|/** Implementation specific configuration prefix for Timeline Service    * leveldb.    */
DECL|field|TIMELINE_SERVICE_LEVELDB_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"leveldb-timeline-store."
decl_stmt|;
comment|/** Timeline service leveldb path */
DECL|field|TIMELINE_SERVICE_LEVELDB_PATH
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_PATH
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"path"
decl_stmt|;
comment|/** Timeline service leveldb read cache (uncompressed blocks). This is    * per rolling instance so should be tuned if using rolling leveldb    * timeline store */
DECL|field|TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"read-cache-size"
decl_stmt|;
comment|/** Default leveldb read cache size if no configuration is specified. */
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE
init|=
literal|100
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/** Timeline service leveldb write buffer size. */
DECL|field|TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"write-buffer-size"
decl_stmt|;
comment|/** Default leveldb write buffer size if no configuration is specified. This    * is per rolling instance so should be tuned if using rolling leveldb    * timeline store. */
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE
init|=
literal|16
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|/** Timeline service leveldb write batch size. This value can be tuned down    * to reduce lock time for ttl eviction. */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_LEVELDB_WRITE_BATCH_SIZE
name|TIMELINE_SERVICE_LEVELDB_WRITE_BATCH_SIZE
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"write-batch-size"
decl_stmt|;
comment|/** Default leveldb write batch size is no configuration is specified */
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BATCH_SIZE
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BATCH_SIZE
init|=
literal|10000
decl_stmt|;
comment|/** Timeline service leveldb start time read cache (number of entities) */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE
name|TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"start-time-read-cache-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_READ_CACHE_SIZE
init|=
literal|10000
decl_stmt|;
comment|/** Timeline service leveldb start time write cache (number of entities) */
specifier|public
specifier|static
specifier|final
name|String
DECL|field|TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE
name|TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"start-time-write-cache-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_START_TIME_WRITE_CACHE_SIZE
init|=
literal|10000
decl_stmt|;
comment|/** Timeline service leveldb interval to wait between deletion rounds */
DECL|field|TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"ttl-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_TTL_INTERVAL_MS
init|=
literal|1000
operator|*
literal|60
operator|*
literal|5
decl_stmt|;
comment|/** Timeline service leveldb number of concurrent open files. Tuned this    * configuration to stay within system limits. This is per rolling instance    * so should be tuned if using rolling leveldb timeline store. */
DECL|field|TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES
init|=
name|TIMELINE_SERVICE_LEVELDB_PREFIX
operator|+
literal|"max-open-files"
decl_stmt|;
comment|/** Default leveldb max open files if no configuration is specified. */
DECL|field|DEFAULT_TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES
init|=
literal|1000
decl_stmt|;
comment|/** The Kerberos principal for the timeline server.*/
DECL|field|TIMELINE_SERVICE_PRINCIPAL
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_PRINCIPAL
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"principal"
decl_stmt|;
comment|/** The Kerberos keytab for the timeline server.*/
DECL|field|TIMELINE_SERVICE_KEYTAB
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_KEYTAB
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"keytab"
decl_stmt|;
comment|/** Enables cross origin support for timeline server.*/
DECL|field|TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"http-cross-origin.enabled"
decl_stmt|;
comment|/** Default value for cross origin support for timeline server.*/
specifier|public
specifier|static
specifier|final
name|boolean
DECL|field|TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT
name|TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT
init|=
literal|false
decl_stmt|;
comment|/** Timeline client call, max retries (-1 means no limit) */
DECL|field|TIMELINE_SERVICE_CLIENT_MAX_RETRIES
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_CLIENT_MAX_RETRIES
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"max-retries"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES
init|=
literal|30
decl_stmt|;
comment|/** Timeline client call, retry interval */
DECL|field|TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"retry-interval-ms"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
DECL|field|DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS
name|DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS
init|=
literal|1000
decl_stmt|;
comment|/** Timeline client policy for whether connections are fatal */
DECL|field|TIMELINE_SERVICE_CLIENT_BEST_EFFORT
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_CLIENT_BEST_EFFORT
init|=
name|TIMELINE_SERVICE_CLIENT_PREFIX
operator|+
literal|"best-effort"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
DECL|field|DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT
name|DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT
init|=
literal|false
decl_stmt|;
comment|/** Flag to enable recovery of timeline service */
DECL|field|TIMELINE_SERVICE_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_RECOVERY_ENABLED
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"recovery.enabled"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_RECOVERY_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_TIMELINE_SERVICE_RECOVERY_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** Timeline service state store class */
DECL|field|TIMELINE_SERVICE_STATE_STORE_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_STATE_STORE_CLASS
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"state-store-class"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_LEVELDB_STATE_STORE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_STATE_STORE_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"leveldb-state-store."
decl_stmt|;
comment|/** Timeline service state store leveldb path */
DECL|field|TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH
init|=
name|TIMELINE_SERVICE_LEVELDB_STATE_STORE_PREFIX
operator|+
literal|"path"
decl_stmt|;
comment|// Timeline delegation token related keys
DECL|field|TIMELINE_DELEGATION_KEY_UPDATE_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_DELEGATION_KEY_UPDATE_INTERVAL
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"delegation.key.update-interval"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_DELEGATION_KEY_UPDATE_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMELINE_DELEGATION_KEY_UPDATE_INTERVAL
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
DECL|field|TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"delegation.token.renew-interval"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 1 day
DECL|field|TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"delegation.token.max-lifetime"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 7 days
comment|// Timeline service v2 offlien aggregation related keys
DECL|field|TIMELINE_OFFLINE_AGGREGATION_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_OFFLINE_AGGREGATION_PREFIX
init|=
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"aggregation.offline."
decl_stmt|;
DECL|field|PHOENIX_OFFLINE_STORAGE_CONN_STR
specifier|public
specifier|static
specifier|final
name|String
name|PHOENIX_OFFLINE_STORAGE_CONN_STR
init|=
name|TIMELINE_OFFLINE_AGGREGATION_PREFIX
operator|+
literal|"phoenix.connectionString"
decl_stmt|;
DECL|field|PHOENIX_OFFLINE_STORAGE_CONN_STR_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|PHOENIX_OFFLINE_STORAGE_CONN_STR_DEFAULT
init|=
literal|"jdbc:phoenix:localhost:2181:/hbase"
decl_stmt|;
comment|// ///////////////////////////////
comment|// Shared Cache Configs
comment|// ///////////////////////////////
DECL|field|SHARED_CACHE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_PREFIX
init|=
literal|"yarn.sharedcache."
decl_stmt|;
comment|// common configs
comment|/** whether the shared cache is enabled/disabled */
DECL|field|SHARED_CACHE_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_ENABLED
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_SHARED_CACHE_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_SHARED_CACHE_ENABLED
init|=
literal|false
decl_stmt|;
comment|/** The config key for the shared cache root directory. */
DECL|field|SHARED_CACHE_ROOT
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_ROOT
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"root-dir"
decl_stmt|;
DECL|field|DEFAULT_SHARED_CACHE_ROOT
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SHARED_CACHE_ROOT
init|=
literal|"/sharedcache"
decl_stmt|;
comment|/** The config key for the level of nested directories before getting to the    * checksum directory. */
DECL|field|SHARED_CACHE_NESTED_LEVEL
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_NESTED_LEVEL
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"nested-level"
decl_stmt|;
DECL|field|DEFAULT_SHARED_CACHE_NESTED_LEVEL
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHARED_CACHE_NESTED_LEVEL
init|=
literal|3
decl_stmt|;
comment|// Shared Cache Manager Configs
DECL|field|SCM_STORE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|SCM_STORE_PREFIX
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"store."
decl_stmt|;
DECL|field|SCM_STORE_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_STORE_CLASS
init|=
name|SCM_STORE_PREFIX
operator|+
literal|"class"
decl_stmt|;
DECL|field|DEFAULT_SCM_STORE_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCM_STORE_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.sharedcachemanager.store.InMemorySCMStore"
decl_stmt|;
DECL|field|SCM_APP_CHECKER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_APP_CHECKER_CLASS
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"app-checker.class"
decl_stmt|;
DECL|field|DEFAULT_SCM_APP_CHECKER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCM_APP_CHECKER_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.sharedcachemanager.RemoteAppChecker"
decl_stmt|;
comment|/** The address of the SCM admin interface. */
DECL|field|SCM_ADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_ADMIN_ADDRESS
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"admin.address"
decl_stmt|;
DECL|field|DEFAULT_SCM_ADMIN_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_ADMIN_PORT
init|=
literal|8047
decl_stmt|;
DECL|field|DEFAULT_SCM_ADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCM_ADMIN_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_SCM_ADMIN_PORT
decl_stmt|;
comment|/** Number of threads used to handle SCM admin interface. */
DECL|field|SCM_ADMIN_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|SCM_ADMIN_CLIENT_THREAD_COUNT
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"admin.thread-count"
decl_stmt|;
DECL|field|DEFAULT_SCM_ADMIN_CLIENT_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_ADMIN_CLIENT_THREAD_COUNT
init|=
literal|1
decl_stmt|;
comment|/** The address of the SCM web application. */
DECL|field|SCM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_WEBAPP_ADDRESS
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_SCM_WEBAPP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_WEBAPP_PORT
init|=
literal|8788
decl_stmt|;
DECL|field|DEFAULT_SCM_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCM_WEBAPP_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_SCM_WEBAPP_PORT
decl_stmt|;
comment|// In-memory SCM store configuration
DECL|field|IN_MEMORY_STORE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|IN_MEMORY_STORE_PREFIX
init|=
name|SCM_STORE_PREFIX
operator|+
literal|"in-memory."
decl_stmt|;
comment|/**    * A resource in the InMemorySCMStore is considered stale if the time since    * the last reference exceeds the staleness period. This value is specified in    * minutes.    */
DECL|field|IN_MEMORY_STALENESS_PERIOD_MINS
specifier|public
specifier|static
specifier|final
name|String
name|IN_MEMORY_STALENESS_PERIOD_MINS
init|=
name|IN_MEMORY_STORE_PREFIX
operator|+
literal|"staleness-period-mins"
decl_stmt|;
DECL|field|DEFAULT_IN_MEMORY_STALENESS_PERIOD_MINS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_IN_MEMORY_STALENESS_PERIOD_MINS
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
decl_stmt|;
comment|/**    * Initial delay before the in-memory store runs its first check to remove    * dead initial applications. Specified in minutes.    */
DECL|field|IN_MEMORY_INITIAL_DELAY_MINS
specifier|public
specifier|static
specifier|final
name|String
name|IN_MEMORY_INITIAL_DELAY_MINS
init|=
name|IN_MEMORY_STORE_PREFIX
operator|+
literal|"initial-delay-mins"
decl_stmt|;
DECL|field|DEFAULT_IN_MEMORY_INITIAL_DELAY_MINS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_IN_MEMORY_INITIAL_DELAY_MINS
init|=
literal|10
decl_stmt|;
comment|/**    * The frequency at which the in-memory store checks to remove dead initial    * applications. Specified in minutes.    */
DECL|field|IN_MEMORY_CHECK_PERIOD_MINS
specifier|public
specifier|static
specifier|final
name|String
name|IN_MEMORY_CHECK_PERIOD_MINS
init|=
name|IN_MEMORY_STORE_PREFIX
operator|+
literal|"check-period-mins"
decl_stmt|;
DECL|field|DEFAULT_IN_MEMORY_CHECK_PERIOD_MINS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_IN_MEMORY_CHECK_PERIOD_MINS
init|=
literal|12
operator|*
literal|60
decl_stmt|;
comment|// SCM Cleaner service configuration
DECL|field|SCM_CLEANER_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SCM_CLEANER_PREFIX
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"cleaner."
decl_stmt|;
comment|/**    * The frequency at which a cleaner task runs. Specified in minutes.    */
DECL|field|SCM_CLEANER_PERIOD_MINS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_CLEANER_PERIOD_MINS
init|=
name|SCM_CLEANER_PREFIX
operator|+
literal|"period-mins"
decl_stmt|;
DECL|field|DEFAULT_SCM_CLEANER_PERIOD_MINS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_CLEANER_PERIOD_MINS
init|=
literal|24
operator|*
literal|60
decl_stmt|;
comment|/**    * Initial delay before the first cleaner task is scheduled. Specified in    * minutes.    */
DECL|field|SCM_CLEANER_INITIAL_DELAY_MINS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_CLEANER_INITIAL_DELAY_MINS
init|=
name|SCM_CLEANER_PREFIX
operator|+
literal|"initial-delay-mins"
decl_stmt|;
DECL|field|DEFAULT_SCM_CLEANER_INITIAL_DELAY_MINS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_CLEANER_INITIAL_DELAY_MINS
init|=
literal|10
decl_stmt|;
comment|/**    * The time to sleep between processing each shared cache resource. Specified    * in milliseconds.    */
DECL|field|SCM_CLEANER_RESOURCE_SLEEP_MS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_CLEANER_RESOURCE_SLEEP_MS
init|=
name|SCM_CLEANER_PREFIX
operator|+
literal|"resource-sleep-ms"
decl_stmt|;
DECL|field|DEFAULT_SCM_CLEANER_RESOURCE_SLEEP_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SCM_CLEANER_RESOURCE_SLEEP_MS
init|=
literal|0L
decl_stmt|;
comment|/** The address of the node manager interface in the SCM. */
DECL|field|SCM_UPLOADER_SERVER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_UPLOADER_SERVER_ADDRESS
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"uploader.server.address"
decl_stmt|;
DECL|field|DEFAULT_SCM_UPLOADER_SERVER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_UPLOADER_SERVER_PORT
init|=
literal|8046
decl_stmt|;
DECL|field|DEFAULT_SCM_UPLOADER_SERVER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCM_UPLOADER_SERVER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_SCM_UPLOADER_SERVER_PORT
decl_stmt|;
comment|/**    * The number of SCM threads used to handle notify requests from the node    * manager.    */
DECL|field|SCM_UPLOADER_SERVER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|SCM_UPLOADER_SERVER_THREAD_COUNT
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"uploader.server.thread-count"
decl_stmt|;
DECL|field|DEFAULT_SCM_UPLOADER_SERVER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_UPLOADER_SERVER_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** The address of the client interface in the SCM. */
DECL|field|SCM_CLIENT_SERVER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|SCM_CLIENT_SERVER_ADDRESS
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"client-server.address"
decl_stmt|;
DECL|field|DEFAULT_SCM_CLIENT_SERVER_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_CLIENT_SERVER_PORT
init|=
literal|8045
decl_stmt|;
DECL|field|DEFAULT_SCM_CLIENT_SERVER_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SCM_CLIENT_SERVER_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_SCM_CLIENT_SERVER_PORT
decl_stmt|;
comment|/** The number of threads used to handle shared cache manager requests. */
DECL|field|SCM_CLIENT_SERVER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|SCM_CLIENT_SERVER_THREAD_COUNT
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"client-server.thread-count"
decl_stmt|;
DECL|field|DEFAULT_SCM_CLIENT_SERVER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SCM_CLIENT_SERVER_THREAD_COUNT
init|=
literal|50
decl_stmt|;
comment|/** the checksum algorithm implementation **/
DECL|field|SHARED_CACHE_CHECKSUM_ALGO_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_CHECKSUM_ALGO_IMPL
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"checksum.algo.impl"
decl_stmt|;
DECL|field|DEFAULT_SHARED_CACHE_CHECKSUM_ALGO_IMPL
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_SHARED_CACHE_CHECKSUM_ALGO_IMPL
init|=
literal|"org.apache.hadoop.yarn.sharedcache.ChecksumSHA256Impl"
decl_stmt|;
comment|// node manager (uploader) configs
comment|/**    * The replication factor for the node manager uploader for the shared cache.    */
DECL|field|SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"nm.uploader.replication.factor"
decl_stmt|;
DECL|field|DEFAULT_SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHARED_CACHE_NM_UPLOADER_REPLICATION_FACTOR
init|=
literal|10
decl_stmt|;
DECL|field|SHARED_CACHE_NM_UPLOADER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|SHARED_CACHE_NM_UPLOADER_THREAD_COUNT
init|=
name|SHARED_CACHE_PREFIX
operator|+
literal|"nm.uploader.thread-count"
decl_stmt|;
DECL|field|DEFAULT_SHARED_CACHE_NM_UPLOADER_THREAD_COUNT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SHARED_CACHE_NM_UPLOADER_THREAD_COUNT
init|=
literal|20
decl_stmt|;
comment|////////////////////////////////
comment|// Federation Configs
comment|////////////////////////////////
DECL|field|FEDERATION_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"federation."
decl_stmt|;
DECL|field|FEDERATION_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_ENABLED
init|=
name|FEDERATION_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FEDERATION_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|FEDERATION_FAILOVER_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_FAILOVER_ENABLED
init|=
name|FEDERATION_PREFIX
operator|+
literal|"failover.enabled"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_FAILOVER_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FEDERATION_FAILOVER_ENABLED
init|=
literal|true
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_CLIENT_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_CLIENT_CLASS
init|=
name|FEDERATION_PREFIX
operator|+
literal|"state-store.class"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_STATESTORE_CLIENT_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_STATESTORE_CLIENT_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.federation.store.impl.MemoryFederationStateStore"
decl_stmt|;
DECL|field|FEDERATION_CACHE_TIME_TO_LIVE_SECS
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_CACHE_TIME_TO_LIVE_SECS
init|=
name|FEDERATION_PREFIX
operator|+
literal|"cache-ttl.secs"
decl_stmt|;
comment|// 5 minutes
DECL|field|DEFAULT_FEDERATION_CACHE_TIME_TO_LIVE_SECS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FEDERATION_CACHE_TIME_TO_LIVE_SECS
init|=
literal|5
operator|*
literal|60
decl_stmt|;
DECL|field|FEDERATION_FLUSH_CACHE_FOR_RM_ADDR
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_FLUSH_CACHE_FOR_RM_ADDR
init|=
name|FEDERATION_PREFIX
operator|+
literal|"flush-cache-for-rm-addr"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_FLUSH_CACHE_FOR_RM_ADDR
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_FEDERATION_FLUSH_CACHE_FOR_RM_ADDR
init|=
literal|true
decl_stmt|;
DECL|field|FEDERATION_REGISTRY_BASE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_REGISTRY_BASE_KEY
init|=
name|FEDERATION_PREFIX
operator|+
literal|"registry.base-dir"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_REGISTRY_BASE_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_REGISTRY_BASE_KEY
init|=
literal|"yarnfederation/"
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_HEARTBEAT_INTERVAL_SECS
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_HEARTBEAT_INTERVAL_SECS
init|=
name|FEDERATION_PREFIX
operator|+
literal|"state-store.heartbeat-interval-secs"
decl_stmt|;
comment|// 5 minutes
specifier|public
specifier|static
specifier|final
name|int
DECL|field|DEFAULT_FEDERATION_STATESTORE_HEARTBEAT_INTERVAL_SECS
name|DEFAULT_FEDERATION_STATESTORE_HEARTBEAT_INTERVAL_SECS
init|=
literal|5
operator|*
literal|60
decl_stmt|;
DECL|field|FEDERATION_MACHINE_LIST
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_MACHINE_LIST
init|=
name|FEDERATION_PREFIX
operator|+
literal|"machine-list"
decl_stmt|;
DECL|field|FEDERATION_CLUSTER_RESOLVER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_CLUSTER_RESOLVER_CLASS
init|=
name|FEDERATION_PREFIX
operator|+
literal|"subcluster-resolver.class"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_CLUSTER_RESOLVER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_CLUSTER_RESOLVER_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.federation.resolver."
operator|+
literal|"DefaultSubClusterResolverImpl"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_POLICY_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_POLICY_KEY
init|=
literal|"*"
decl_stmt|;
DECL|field|FEDERATION_POLICY_MANAGER
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_POLICY_MANAGER
init|=
name|FEDERATION_PREFIX
operator|+
literal|"policy-manager"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_POLICY_MANAGER
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_POLICY_MANAGER
init|=
literal|"org.apache"
operator|+
literal|".hadoop.yarn.server.federation.policies"
operator|+
literal|".manager.UniformBroadcastPolicyManager"
decl_stmt|;
DECL|field|FEDERATION_POLICY_MANAGER_PARAMS
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_POLICY_MANAGER_PARAMS
init|=
name|FEDERATION_PREFIX
operator|+
literal|"policy-manager-params"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_POLICY_MANAGER_PARAMS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_POLICY_MANAGER_PARAMS
init|=
literal|""
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_ZK_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_ZK_PREFIX
init|=
name|FEDERATION_PREFIX
operator|+
literal|"zk-state-store."
decl_stmt|;
comment|/** Parent znode path under which ZKRMStateStore will create znodes. */
DECL|field|FEDERATION_STATESTORE_ZK_PARENT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_ZK_PARENT_PATH
init|=
name|FEDERATION_STATESTORE_ZK_PREFIX
operator|+
literal|"parent-path"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_STATESTORE_ZK_PARENT_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_STATESTORE_ZK_PARENT_PATH
init|=
literal|"/federationstore"
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_SQL_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_SQL_PREFIX
init|=
name|FEDERATION_PREFIX
operator|+
literal|"state-store.sql."
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_SQL_USERNAME
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_SQL_USERNAME
init|=
name|FEDERATION_STATESTORE_SQL_PREFIX
operator|+
literal|"username"
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_SQL_PASSWORD
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_SQL_PASSWORD
init|=
name|FEDERATION_STATESTORE_SQL_PREFIX
operator|+
literal|"password"
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_SQL_URL
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_SQL_URL
init|=
name|FEDERATION_STATESTORE_SQL_PREFIX
operator|+
literal|"url"
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_SQL_JDBC_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_SQL_JDBC_CLASS
init|=
name|FEDERATION_STATESTORE_SQL_PREFIX
operator|+
literal|"jdbc-class"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_STATESTORE_SQL_JDBC_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEDERATION_STATESTORE_SQL_JDBC_CLASS
init|=
literal|"org.hsqldb.jdbc.JDBCDataSource"
decl_stmt|;
DECL|field|FEDERATION_STATESTORE_SQL_MAXCONNECTIONS
specifier|public
specifier|static
specifier|final
name|String
name|FEDERATION_STATESTORE_SQL_MAXCONNECTIONS
init|=
name|FEDERATION_STATESTORE_SQL_PREFIX
operator|+
literal|"max-connections"
decl_stmt|;
DECL|field|DEFAULT_FEDERATION_STATESTORE_SQL_MAXCONNECTIONS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_FEDERATION_STATESTORE_SQL_MAXCONNECTIONS
init|=
literal|1
decl_stmt|;
DECL|field|ROUTER_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"router."
decl_stmt|;
DECL|field|ROUTER_BIND_HOST
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_BIND_HOST
init|=
name|ROUTER_PREFIX
operator|+
literal|"bind-host"
decl_stmt|;
DECL|field|ROUTER_CLIENTRM_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_CLIENTRM_PREFIX
init|=
name|ROUTER_PREFIX
operator|+
literal|"clientrm."
decl_stmt|;
DECL|field|ROUTER_CLIENTRM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_CLIENTRM_ADDRESS
init|=
name|ROUTER_CLIENTRM_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_CLIENTRM_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ROUTER_CLIENTRM_PORT
init|=
literal|8050
decl_stmt|;
DECL|field|DEFAULT_ROUTER_CLIENTRM_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_CLIENTRM_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_ROUTER_CLIENTRM_PORT
decl_stmt|;
DECL|field|ROUTER_CLIENTRM_INTERCEPTOR_CLASS_PIPELINE
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_CLIENTRM_INTERCEPTOR_CLASS_PIPELINE
init|=
name|ROUTER_CLIENTRM_PREFIX
operator|+
literal|"interceptor-class.pipeline"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_CLIENTRM_INTERCEPTOR_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_CLIENTRM_INTERCEPTOR_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.router.clientrm."
operator|+
literal|"DefaultClientRequestInterceptor"
decl_stmt|;
DECL|field|ROUTER_PIPELINE_CACHE_MAX_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_PIPELINE_CACHE_MAX_SIZE
init|=
name|ROUTER_PREFIX
operator|+
literal|"pipeline.cache-max-size"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ROUTER_PIPELINE_CACHE_MAX_SIZE
init|=
literal|25
decl_stmt|;
DECL|field|ROUTER_RMADMIN_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_RMADMIN_PREFIX
init|=
name|ROUTER_PREFIX
operator|+
literal|"rmadmin."
decl_stmt|;
DECL|field|ROUTER_RMADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_RMADMIN_ADDRESS
init|=
name|ROUTER_RMADMIN_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_RMADMIN_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ROUTER_RMADMIN_PORT
init|=
literal|8052
decl_stmt|;
DECL|field|DEFAULT_ROUTER_RMADMIN_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_RMADMIN_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_ROUTER_RMADMIN_PORT
decl_stmt|;
DECL|field|ROUTER_RMADMIN_INTERCEPTOR_CLASS_PIPELINE
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_RMADMIN_INTERCEPTOR_CLASS_PIPELINE
init|=
name|ROUTER_RMADMIN_PREFIX
operator|+
literal|"interceptor-class.pipeline"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_RMADMIN_INTERCEPTOR_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_RMADMIN_INTERCEPTOR_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.router.rmadmin."
operator|+
literal|"DefaultRMAdminRequestInterceptor"
decl_stmt|;
comment|/**    * The number of retries for GetNewApplication and SubmitApplication in    * {@code FederationClientInterceptor}.    */
DECL|field|ROUTER_CLIENTRM_SUBMIT_RETRY
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_CLIENTRM_SUBMIT_RETRY
init|=
name|ROUTER_PREFIX
operator|+
literal|"submit.retry"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_CLIENTRM_SUBMIT_RETRY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ROUTER_CLIENTRM_SUBMIT_RETRY
init|=
literal|3
decl_stmt|;
DECL|field|ROUTER_WEBAPP_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_WEBAPP_PREFIX
init|=
name|ROUTER_PREFIX
operator|+
literal|"webapp."
decl_stmt|;
comment|/** The address of the Router web application. */
DECL|field|ROUTER_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_WEBAPP_ADDRESS
init|=
name|ROUTER_WEBAPP_PREFIX
operator|+
literal|"address"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_WEBAPP_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ROUTER_WEBAPP_PORT
init|=
literal|8089
decl_stmt|;
DECL|field|DEFAULT_ROUTER_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_WEBAPP_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_ROUTER_WEBAPP_PORT
decl_stmt|;
comment|/** The https address of the Router web application. */
DECL|field|ROUTER_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_WEBAPP_HTTPS_ADDRESS
init|=
name|ROUTER_WEBAPP_PREFIX
operator|+
literal|"https.address"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_WEBAPP_HTTPS_PORT
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_ROUTER_WEBAPP_HTTPS_PORT
init|=
literal|8091
decl_stmt|;
DECL|field|DEFAULT_ROUTER_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_WEBAPP_HTTPS_ADDRESS
init|=
literal|"0.0.0.0:"
operator|+
name|DEFAULT_ROUTER_WEBAPP_HTTPS_PORT
decl_stmt|;
DECL|field|ROUTER_WEBAPP_INTERCEPTOR_CLASS_PIPELINE
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_WEBAPP_INTERCEPTOR_CLASS_PIPELINE
init|=
name|ROUTER_WEBAPP_PREFIX
operator|+
literal|"interceptor-class.pipeline"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_WEBAPP_INTERCEPTOR_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_WEBAPP_INTERCEPTOR_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.router.webapp."
operator|+
literal|"DefaultRequestInterceptorREST"
decl_stmt|;
comment|/**    * The interceptor class used in FederationInterceptorREST to communicate with    * each SubCluster.    */
DECL|field|ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS
init|=
name|ROUTER_WEBAPP_PREFIX
operator|+
literal|"default-interceptor-class"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS
init|=
literal|"org.apache.hadoop.yarn.server.router.webapp."
operator|+
literal|"DefaultRequestInterceptorREST"
decl_stmt|;
comment|/**    * The interceptor class used in FederationInterceptorREST should return    * partial AppReports.    */
DECL|field|ROUTER_WEBAPP_PARTIAL_RESULTS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER_WEBAPP_PARTIAL_RESULTS_ENABLED
init|=
name|ROUTER_WEBAPP_PREFIX
operator|+
literal|"partial-result.enabled"
decl_stmt|;
DECL|field|DEFAULT_ROUTER_WEBAPP_PARTIAL_RESULTS_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_ROUTER_WEBAPP_PARTIAL_RESULTS_ENABLED
init|=
literal|false
decl_stmt|;
comment|////////////////////////////////
comment|// Other Configs
comment|////////////////////////////////
DECL|field|YARN_REGISTRY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_REGISTRY_CLASS
init|=
name|YARN_PREFIX
operator|+
literal|"registry.class"
decl_stmt|;
DECL|field|DEFAULT_YARN_REGISTRY_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_YARN_REGISTRY_CLASS
init|=
literal|"org.apache.hadoop.registry.client.impl.FSRegistryOperationsService"
decl_stmt|;
comment|/**    * Use YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS instead.    * The interval of the yarn client's querying application state after    * application submission. The unit is millisecond.    */
annotation|@
name|Deprecated
DECL|field|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"client.app-submission.poll-interval"
decl_stmt|;
comment|/**    * The interval that the yarn client library uses to poll the completion    * status of the asynchronous API of application client protocol.    */
DECL|field|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"client.application-client-protocol.poll-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS
init|=
literal|200
decl_stmt|;
comment|/**    * The duration that the yarn client library waits, cumulatively across polls,    * for an expected state change to occur. Defaults to -1, which indicates no    * limit.    */
DECL|field|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|String
name|YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
init|=
name|YARN_PREFIX
operator|+
literal|"client.application-client-protocol.poll-timeout-ms"
decl_stmt|;
DECL|field|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * Max number of threads in NMClientAsync to process container management    * events    */
DECL|field|NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
init|=
name|YARN_PREFIX
operator|+
literal|"client.nodemanager-client-async.thread-pool-max-size"
decl_stmt|;
DECL|field|DEFAULT_NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE
init|=
literal|500
decl_stmt|;
comment|/**    * Maximum number of proxy connections to cache for node managers. If set    * to a value greater than zero then the cache is enabled and the NMClient    * and MRAppMaster will cache the specified number of node manager proxies.    * There will be at max one proxy per node manager. Ex. configuring it to a    * value of 5 will make sure that client will at max have 5 proxies cached    * with 5 different node managers. These connections for these proxies will    * be timed out if idle for more than the system wide idle timeout period.    * Note that this could cause issues on large clusters as many connections    * could linger simultaneously and lead to a large number of connection    * threads. The token used for authentication will be used only at    * connection creation time. If a new token is received then the earlier    * connection should be closed in order to use the new token. This and    * {@link YarnConfiguration#NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE} are related    * and should be in sync (no need for them to be equal).    * If the value of this property is zero then the connection cache is    * disabled and connections will use a zero idle timeout to prevent too    * many connection threads on large clusters.    */
DECL|field|NM_CLIENT_MAX_NM_PROXIES
specifier|public
specifier|static
specifier|final
name|String
name|NM_CLIENT_MAX_NM_PROXIES
init|=
name|YARN_PREFIX
operator|+
literal|"client.max-cached-nodemanagers-proxies"
decl_stmt|;
DECL|field|DEFAULT_NM_CLIENT_MAX_NM_PROXIES
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NM_CLIENT_MAX_NM_PROXIES
init|=
literal|0
decl_stmt|;
comment|/** Max time to wait to establish a connection to NM */
DECL|field|CLIENT_NM_CONNECT_MAX_WAIT_MS
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_NM_CONNECT_MAX_WAIT_MS
init|=
name|YARN_PREFIX
operator|+
literal|"client.nodemanager-connect.max-wait-ms"
decl_stmt|;
DECL|field|DEFAULT_CLIENT_NM_CONNECT_MAX_WAIT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CLIENT_NM_CONNECT_MAX_WAIT_MS
init|=
literal|3
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|/** Time interval between each attempt to connect to NM */
DECL|field|CLIENT_NM_CONNECT_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_NM_CONNECT_RETRY_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"client.nodemanager-connect.retry-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_CLIENT_NM_CONNECT_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_CLIENT_NM_CONNECT_RETRY_INTERVAL_MS
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
DECL|field|YARN_HTTP_POLICY_KEY
specifier|public
specifier|static
specifier|final
name|String
name|YARN_HTTP_POLICY_KEY
init|=
name|YARN_PREFIX
operator|+
literal|"http.policy"
decl_stmt|;
DECL|field|YARN_HTTP_POLICY_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|YARN_HTTP_POLICY_DEFAULT
init|=
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTP_ONLY
operator|.
name|name
argument_list|()
decl_stmt|;
comment|/**    * Max time to wait for NM to connection to RM.    * When not set, proxy will fall back to use value of    * RESOURCEMANAGER_CONNECT_MAX_WAIT_MS.    */
DECL|field|NM_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
init|=
name|YARN_PREFIX
operator|+
literal|"nodemanager.resourcemanager.connect.max-wait.ms"
decl_stmt|;
comment|/**    * Time interval between each NM attempt to connection to RM.    * When not set, proxy will fall back to use value of    * RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS.    */
DECL|field|NM_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
init|=
name|YARN_PREFIX
operator|+
literal|"nodemanager.resourcemanager.connect.retry-interval.ms"
decl_stmt|;
comment|/**    * Node-labels configurations    */
DECL|field|NODE_LABELS_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NODE_LABELS_PREFIX
init|=
name|YARN_PREFIX
operator|+
literal|"node-labels."
decl_stmt|;
comment|/** Node label store implementation class */
DECL|field|FS_NODE_LABELS_STORE_IMPL_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|FS_NODE_LABELS_STORE_IMPL_CLASS
init|=
name|NODE_LABELS_PREFIX
operator|+
literal|"fs-store.impl.class"
decl_stmt|;
DECL|field|DEFAULT_FS_NODE_LABELS_STORE_IMPL_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FS_NODE_LABELS_STORE_IMPL_CLASS
init|=
literal|"org.apache.hadoop.yarn.nodelabels.FileSystemNodeLabelsStore"
decl_stmt|;
comment|/** URI for NodeLabelManager */
DECL|field|FS_NODE_LABELS_STORE_ROOT_DIR
specifier|public
specifier|static
specifier|final
name|String
name|FS_NODE_LABELS_STORE_ROOT_DIR
init|=
name|NODE_LABELS_PREFIX
operator|+
literal|"fs-store.root-dir"
decl_stmt|;
comment|/**    * Flag to indicate if the node labels feature enabled, by default it's    * disabled    */
DECL|field|NODE_LABELS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NODE_LABELS_ENABLED
init|=
name|NODE_LABELS_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|DEFAULT_NODE_LABELS_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NODE_LABELS_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|NODELABEL_CONFIGURATION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|NODELABEL_CONFIGURATION_TYPE
init|=
name|NODE_LABELS_PREFIX
operator|+
literal|"configuration-type"
decl_stmt|;
DECL|field|CENTRALIZED_NODELABEL_CONFIGURATION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|CENTRALIZED_NODELABEL_CONFIGURATION_TYPE
init|=
literal|"centralized"
decl_stmt|;
DECL|field|DELEGATED_CENTALIZED_NODELABEL_CONFIGURATION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATED_CENTALIZED_NODELABEL_CONFIGURATION_TYPE
init|=
literal|"delegated-centralized"
decl_stmt|;
DECL|field|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
init|=
literal|"distributed"
decl_stmt|;
DECL|field|DEFAULT_NODELABEL_CONFIGURATION_TYPE
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NODELABEL_CONFIGURATION_TYPE
init|=
name|CENTRALIZED_NODELABEL_CONFIGURATION_TYPE
decl_stmt|;
DECL|field|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
init|=
name|YARN_PREFIX
operator|+
literal|"cluster.max-application-priority"
decl_stmt|;
DECL|field|DEFAULT_CLUSTER_LEVEL_APPLICATION_PRIORITY
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CLUSTER_LEVEL_APPLICATION_PRIORITY
init|=
literal|0
decl_stmt|;
DECL|field|APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC
specifier|public
specifier|static
specifier|final
name|String
name|APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC
init|=
name|YARN_PREFIX
operator|+
literal|"app.attempt.diagnostics.limit.kc"
decl_stmt|;
DECL|field|DEFAULT_APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_APP_ATTEMPT_DIAGNOSTICS_LIMIT_KC
init|=
literal|64
decl_stmt|;
annotation|@
name|Private
DECL|method|isDistributedNodeLabelConfiguration (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isDistributedNodeLabelConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|DEFAULT_NODELABEL_CONFIGURATION_TYPE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|isCentralizedNodeLabelConfiguration ( Configuration conf)
specifier|public
specifier|static
name|boolean
name|isCentralizedNodeLabelConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|CENTRALIZED_NODELABEL_CONFIGURATION_TYPE
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|DEFAULT_NODELABEL_CONFIGURATION_TYPE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|isDelegatedCentralizedNodeLabelConfiguration ( Configuration conf)
specifier|public
specifier|static
name|boolean
name|isDelegatedCentralizedNodeLabelConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|DELEGATED_CENTALIZED_NODELABEL_CONFIGURATION_TYPE
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|DEFAULT_NODELABEL_CONFIGURATION_TYPE
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|areNodeLabelsEnabled ( Configuration conf)
specifier|public
specifier|static
name|boolean
name|areNodeLabelsEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|NODE_LABELS_ENABLED
argument_list|,
name|DEFAULT_NODE_LABELS_ENABLED
argument_list|)
return|;
block|}
DECL|field|NM_NODE_LABELS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NM_NODE_LABELS_PREFIX
init|=
name|NM_PREFIX
operator|+
literal|"node-labels."
decl_stmt|;
DECL|field|NM_NODE_LABELS_PROVIDER_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|NM_NODE_LABELS_PROVIDER_CONFIG
init|=
name|NM_NODE_LABELS_PREFIX
operator|+
literal|"provider"
decl_stmt|;
comment|// whitelist names for the yarn.nodemanager.node-labels.provider
DECL|field|CONFIG_NODE_LABELS_PROVIDER
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_NODE_LABELS_PROVIDER
init|=
literal|"config"
decl_stmt|;
DECL|field|SCRIPT_NODE_LABELS_PROVIDER
specifier|public
specifier|static
specifier|final
name|String
name|SCRIPT_NODE_LABELS_PROVIDER
init|=
literal|"script"
decl_stmt|;
DECL|field|NM_NODE_LABELS_PROVIDER_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NM_NODE_LABELS_PROVIDER_PREFIX
init|=
name|NM_NODE_LABELS_PREFIX
operator|+
literal|"provider."
decl_stmt|;
DECL|field|NM_NODE_LABELS_RESYNC_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|NM_NODE_LABELS_RESYNC_INTERVAL
init|=
name|NM_NODE_LABELS_PREFIX
operator|+
literal|"resync-interval-ms"
decl_stmt|;
DECL|field|DEFAULT_NM_NODE_LABELS_RESYNC_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_NODE_LABELS_RESYNC_INTERVAL
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// If -1 is configured then no timer task should be created
DECL|field|NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
init|=
name|NM_NODE_LABELS_PROVIDER_PREFIX
operator|+
literal|"fetch-interval-ms"
decl_stmt|;
DECL|field|NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|String
name|NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
init|=
name|NM_NODE_LABELS_PROVIDER_PREFIX
operator|+
literal|"fetch-timeout-ms"
decl_stmt|;
comment|// once in 10 mins
DECL|field|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// Twice of default interval time
DECL|field|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_TIMEOUT_MS
init|=
name|DEFAULT_NM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
operator|*
literal|2
decl_stmt|;
DECL|field|NM_PROVIDER_CONFIGURED_NODE_PARTITION
specifier|public
specifier|static
specifier|final
name|String
name|NM_PROVIDER_CONFIGURED_NODE_PARTITION
init|=
name|NM_NODE_LABELS_PROVIDER_PREFIX
operator|+
literal|"configured-node-partition"
decl_stmt|;
DECL|field|RM_NODE_LABELS_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RM_NODE_LABELS_PREFIX
init|=
name|RM_PREFIX
operator|+
literal|"node-labels."
decl_stmt|;
DECL|field|RM_NODE_LABELS_PROVIDER_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODE_LABELS_PROVIDER_CONFIG
init|=
name|RM_NODE_LABELS_PREFIX
operator|+
literal|"provider"
decl_stmt|;
DECL|field|RM_NODE_LABELS_PROVIDER_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|RM_NODE_LABELS_PROVIDER_PREFIX
init|=
name|RM_NODE_LABELS_PREFIX
operator|+
literal|"provider."
decl_stmt|;
comment|//If -1 is configured then no timer task should be created
DECL|field|RM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|String
name|RM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
init|=
name|RM_NODE_LABELS_PROVIDER_PREFIX
operator|+
literal|"fetch-interval-ms"
decl_stmt|;
comment|//once in 30 mins
DECL|field|DEFAULT_RM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_RM_NODE_LABELS_PROVIDER_FETCH_INTERVAL_MS
init|=
literal|30
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
annotation|@
name|Private
comment|/**    * This is a private feature that isn't supposed to be used by end-users.    */
DECL|field|AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
init|=
name|RM_PREFIX
operator|+
literal|"am-scheduling.node-blacklisting-enabled"
decl_stmt|;
annotation|@
name|Private
DECL|field|DEFAULT_AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
init|=
literal|false
decl_stmt|;
annotation|@
name|Private
comment|/**    * This is a private feature that isn't supposed to be used by end-users.    */
DECL|field|AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
specifier|public
specifier|static
specifier|final
name|String
name|AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
init|=
name|RM_PREFIX
operator|+
literal|"am-scheduling.node-blacklisting-disable-threshold"
decl_stmt|;
annotation|@
name|Private
specifier|public
specifier|static
specifier|final
name|float
DECL|field|DEFAULT_AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
name|DEFAULT_AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
init|=
literal|0.2f
decl_stmt|;
DECL|field|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PREFIX
init|=
name|NM_NODE_LABELS_PROVIDER_PREFIX
operator|+
literal|"script."
decl_stmt|;
DECL|field|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PATH
specifier|public
specifier|static
specifier|final
name|String
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PATH
init|=
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PREFIX
operator|+
literal|"path"
decl_stmt|;
DECL|field|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_SCRIPT_OPTS
specifier|public
specifier|static
specifier|final
name|String
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_SCRIPT_OPTS
init|=
name|NM_SCRIPT_BASED_NODE_LABELS_PROVIDER_PREFIX
operator|+
literal|"opts"
decl_stmt|;
comment|/*    * Support to view apps for given user in secure cluster.    */
DECL|field|DISPLAY_APPS_FOR_LOGGED_IN_USER
specifier|public
specifier|static
specifier|final
name|String
name|DISPLAY_APPS_FOR_LOGGED_IN_USER
init|=
name|RM_PREFIX
operator|+
literal|"display.per-user-apps"
decl_stmt|;
DECL|field|DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_DISPLAY_APPS_FOR_LOGGED_IN_USER
init|=
literal|false
decl_stmt|;
comment|// RM and NM CSRF props
DECL|field|REST_CSRF
specifier|public
specifier|static
specifier|final
name|String
name|REST_CSRF
init|=
literal|"webapp.rest-csrf."
decl_stmt|;
DECL|field|RM_CSRF_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RM_CSRF_PREFIX
init|=
name|RM_PREFIX
operator|+
name|REST_CSRF
decl_stmt|;
DECL|field|NM_CSRF_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_CSRF_PREFIX
init|=
name|NM_PREFIX
operator|+
name|REST_CSRF
decl_stmt|;
DECL|field|TIMELINE_CSRF_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_CSRF_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
name|REST_CSRF
decl_stmt|;
DECL|field|RM_CSRF_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|RM_CSRF_ENABLED
init|=
name|RM_CSRF_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|NM_CSRF_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_CSRF_ENABLED
init|=
name|NM_CSRF_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|TIMELINE_CSRF_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_CSRF_ENABLED
init|=
name|TIMELINE_CSRF_PREFIX
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|RM_CSRF_CUSTOM_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|RM_CSRF_CUSTOM_HEADER
init|=
name|RM_CSRF_PREFIX
operator|+
literal|"custom-header"
decl_stmt|;
DECL|field|NM_CSRF_CUSTOM_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|NM_CSRF_CUSTOM_HEADER
init|=
name|NM_CSRF_PREFIX
operator|+
literal|"custom-header"
decl_stmt|;
DECL|field|TIMELINE_CSRF_CUSTOM_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_CSRF_CUSTOM_HEADER
init|=
name|TIMELINE_CSRF_PREFIX
operator|+
literal|"custom-header"
decl_stmt|;
DECL|field|RM_CSRF_METHODS_TO_IGNORE
specifier|public
specifier|static
specifier|final
name|String
name|RM_CSRF_METHODS_TO_IGNORE
init|=
name|RM_CSRF_PREFIX
operator|+
literal|"methods-to-ignore"
decl_stmt|;
DECL|field|NM_CSRF_METHODS_TO_IGNORE
specifier|public
specifier|static
specifier|final
name|String
name|NM_CSRF_METHODS_TO_IGNORE
init|=
name|NM_CSRF_PREFIX
operator|+
literal|"methods-to-ignore"
decl_stmt|;
DECL|field|TIMELINE_CSRF_METHODS_TO_IGNORE
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_CSRF_METHODS_TO_IGNORE
init|=
name|TIMELINE_CSRF_PREFIX
operator|+
literal|"methods-to-ignore"
decl_stmt|;
comment|// RM and NM XFS props
DECL|field|XFS
specifier|public
specifier|static
specifier|final
name|String
name|XFS
init|=
literal|"webapp.xfs-filter."
decl_stmt|;
DECL|field|YARN_XFS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|YARN_XFS_ENABLED
init|=
literal|"yarn."
operator|+
name|XFS
operator|+
literal|"enabled"
decl_stmt|;
DECL|field|RM_XFS_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|RM_XFS_PREFIX
init|=
name|RM_PREFIX
operator|+
name|XFS
decl_stmt|;
DECL|field|NM_XFS_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|NM_XFS_PREFIX
init|=
name|NM_PREFIX
operator|+
name|XFS
decl_stmt|;
DECL|field|TIMELINE_XFS_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_XFS_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
name|XFS
decl_stmt|;
DECL|field|RM_XFS_OPTIONS
specifier|public
specifier|static
specifier|final
name|String
name|RM_XFS_OPTIONS
init|=
name|RM_XFS_PREFIX
operator|+
literal|"xframe-options"
decl_stmt|;
DECL|field|NM_XFS_OPTIONS
specifier|public
specifier|static
specifier|final
name|String
name|NM_XFS_OPTIONS
init|=
name|NM_XFS_PREFIX
operator|+
literal|"xframe-options"
decl_stmt|;
DECL|field|TIMELINE_XFS_OPTIONS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_XFS_OPTIONS
init|=
name|TIMELINE_XFS_PREFIX
operator|+
literal|"xframe-options"
decl_stmt|;
comment|/**    * Settings for timeline reader.    */
DECL|field|TIMELINE_SERVICE_READER_BIND_HOST
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_READER_BIND_HOST
init|=
name|TIMELINE_SERVICE_READER_PREFIX
operator|+
literal|"bind-host"
decl_stmt|;
DECL|field|TIMELINE_SERVICE_READER_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_READER_WEBAPP_ADDRESS
init|=
name|TIMELINE_SERVICE_READER_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_READER_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_READER_WEBAPP_ADDRESS
init|=
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS
decl_stmt|;
DECL|field|TIMELINE_SERVICE_READER_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_READER_WEBAPP_HTTPS_ADDRESS
init|=
name|TIMELINE_SERVICE_READER_PREFIX
operator|+
literal|"webapp.https.address"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|DEFAULT_TIMELINE_SERVICE_READER_WEBAPP_HTTPS_ADDRESS
name|DEFAULT_TIMELINE_SERVICE_READER_WEBAPP_HTTPS_ADDRESS
init|=
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
decl_stmt|;
comment|/**    * Marked collector properties as Private since it run as auxillary service.    */
DECL|field|TIMELINE_SERVICE_COLLECTOR_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_COLLECTOR_PREFIX
init|=
name|TIMELINE_SERVICE_PREFIX
operator|+
literal|"collector."
decl_stmt|;
annotation|@
name|Private
DECL|field|TIMELINE_SERVICE_COLLECTOR_BIND_HOST
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_COLLECTOR_BIND_HOST
init|=
name|TIMELINE_SERVICE_COLLECTOR_PREFIX
operator|+
literal|"bind-host"
decl_stmt|;
annotation|@
name|Private
DECL|field|TIMELINE_SERVICE_COLLECTOR_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_COLLECTOR_WEBAPP_ADDRESS
init|=
name|TIMELINE_SERVICE_COLLECTOR_PREFIX
operator|+
literal|"webapp.address"
decl_stmt|;
DECL|field|DEFAULT_TIMELINE_SERVICE_COLLECTOR_WEBAPP_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TIMELINE_SERVICE_COLLECTOR_WEBAPP_ADDRESS
init|=
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS
decl_stmt|;
annotation|@
name|Private
DECL|field|TIMELINE_SERVICE_COLLECTOR_WEBAPP_HTTPS_ADDRESS
specifier|public
specifier|static
specifier|final
name|String
name|TIMELINE_SERVICE_COLLECTOR_WEBAPP_HTTPS_ADDRESS
init|=
name|TIMELINE_SERVICE_COLLECTOR_PREFIX
operator|+
literal|"webapp.https.address"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
DECL|field|DEFAULT_TIMELINE_SERVICE_COLLECTOR_WEBAPP_HTTPS_ADDRESS
name|DEFAULT_TIMELINE_SERVICE_COLLECTOR_WEBAPP_HTTPS_ADDRESS
init|=
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
decl_stmt|;
comment|/**    * Settings for NUMA awareness.    */
DECL|field|NM_NUMA_AWARENESS_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|NM_NUMA_AWARENESS_ENABLED
init|=
name|NM_PREFIX
operator|+
literal|"numa-awareness.enabled"
decl_stmt|;
DECL|field|DEFAULT_NM_NUMA_AWARENESS_ENABLED
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_NUMA_AWARENESS_ENABLED
init|=
literal|false
decl_stmt|;
DECL|field|NM_NUMA_AWARENESS_READ_TOPOLOGY
specifier|public
specifier|static
specifier|final
name|String
name|NM_NUMA_AWARENESS_READ_TOPOLOGY
init|=
name|NM_PREFIX
operator|+
literal|"numa-awareness.read-topology"
decl_stmt|;
DECL|field|DEFAULT_NM_NUMA_AWARENESS_READ_TOPOLOGY
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NM_NUMA_AWARENESS_READ_TOPOLOGY
init|=
literal|false
decl_stmt|;
DECL|field|NM_NUMA_AWARENESS_NODE_IDS
specifier|public
specifier|static
specifier|final
name|String
name|NM_NUMA_AWARENESS_NODE_IDS
init|=
name|NM_PREFIX
operator|+
literal|"numa-awareness.node-ids"
decl_stmt|;
DECL|field|NM_NUMA_AWARENESS_NUMACTL_CMD
specifier|public
specifier|static
specifier|final
name|String
name|NM_NUMA_AWARENESS_NUMACTL_CMD
init|=
name|NM_PREFIX
operator|+
literal|"numa-awareness.numactl.cmd"
decl_stmt|;
DECL|field|DEFAULT_NM_NUMA_AWARENESS_NUMACTL_CMD
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NM_NUMA_AWARENESS_NUMACTL_CMD
init|=
literal|"/usr/bin/numactl"
decl_stmt|;
DECL|method|YarnConfiguration ()
specifier|public
name|YarnConfiguration
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
DECL|method|YarnConfiguration (Configuration conf)
specifier|public
name|YarnConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|conf
operator|instanceof
name|YarnConfiguration
operator|)
condition|)
block|{
name|this
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|getServiceAddressConfKeys (Configuration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getServiceAddressConfKeys
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|useHttps
argument_list|(
name|conf
argument_list|)
condition|?
name|RM_SERVICES_ADDRESS_CONF_KEYS_HTTPS
else|:
name|RM_SERVICES_ADDRESS_CONF_KEYS_HTTP
return|;
block|}
comment|/**    * Get the socket address for<code>name</code> property as a    *<code>InetSocketAddress</code>. On an HA cluster,    * this fetches the address corresponding to the RM identified by    * {@link #RM_HA_ID}.    * @param name property name.    * @param defaultAddress the default value    * @param defaultPort the default port    * @return InetSocketAddress    */
annotation|@
name|Override
DECL|method|getSocketAddr ( String name, String defaultAddress, int defaultPort)
specifier|public
name|InetSocketAddress
name|getSocketAddr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultAddress
parameter_list|,
name|int
name|defaultPort
parameter_list|)
block|{
name|String
name|address
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|this
argument_list|)
operator|&&
name|getServiceAddressConfKeys
argument_list|(
name|this
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|address
operator|=
name|HAUtil
operator|.
name|getConfValueForRMInstance
argument_list|(
name|name
argument_list|,
name|defaultAddress
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|address
operator|=
name|get
argument_list|(
name|name
argument_list|,
name|defaultAddress
argument_list|)
expr_stmt|;
block|}
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|address
argument_list|,
name|defaultPort
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateConnectAddr (String name, InetSocketAddress addr)
specifier|public
name|InetSocketAddress
name|updateConnectAddr
parameter_list|(
name|String
name|name
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|)
block|{
name|String
name|prefix
init|=
name|name
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|this
argument_list|)
operator|&&
name|getServiceAddressConfKeys
argument_list|(
name|this
argument_list|)
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|prefix
argument_list|,
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|updateConnectAddr
argument_list|(
name|prefix
argument_list|,
name|addr
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|getRMDefaultPortNumber (String addressPrefix, Configuration conf)
specifier|public
specifier|static
name|int
name|getRMDefaultPortNumber
parameter_list|(
name|String
name|addressPrefix
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|addressPrefix
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|)
condition|)
block|{
return|return
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
return|;
block|}
elseif|else
if|if
condition|(
name|addressPrefix
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|)
condition|)
block|{
return|return
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_PORT
return|;
block|}
elseif|else
if|if
condition|(
name|addressPrefix
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|)
condition|)
block|{
return|return
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_PORT
return|;
block|}
elseif|else
if|if
condition|(
name|addressPrefix
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_HTTPS_ADDRESS
argument_list|)
condition|)
block|{
return|return
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_HTTPS_PORT
return|;
block|}
elseif|else
if|if
condition|(
name|addressPrefix
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_TRACKER_ADDRESS
argument_list|)
condition|)
block|{
return|return
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_TRACKER_PORT
return|;
block|}
elseif|else
if|if
condition|(
name|addressPrefix
operator|.
name|equals
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|)
condition|)
block|{
return|return
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_PORT
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Invalid RM RPC address Prefix: "
operator|+
name|addressPrefix
operator|+
literal|". The valid value should be one of "
operator|+
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|useHttps (Configuration conf)
specifier|public
specifier|static
name|boolean
name|useHttps
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|HttpConfig
operator|.
name|Policy
operator|.
name|HTTPS_ONLY
operator|==
name|HttpConfig
operator|.
name|Policy
operator|.
name|fromString
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YARN_HTTP_POLICY_KEY
argument_list|,
name|YARN_HTTP_POLICY_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
DECL|method|shouldRMFailFast (Configuration conf)
specifier|public
specifier|static
name|boolean
name|shouldRMFailFast
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_FAIL_FAST
argument_list|,
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_FAIL_FAST
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_FAIL_FAST
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|getClusterId (Configuration conf)
specifier|public
specifier|static
name|String
name|getClusterId
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|clusterId
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|HadoopIllegalArgumentException
argument_list|(
literal|"Configuration doesn't specify "
operator|+
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|)
throw|;
block|}
return|return
name|clusterId
return|;
block|}
DECL|method|isDistSchedulingEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isDistSchedulingEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|DIST_SCHEDULING_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_DIST_SCHEDULING_ENABLED
argument_list|)
return|;
block|}
DECL|method|isOpportunisticContainerAllocationEnabled ( Configuration conf)
specifier|public
specifier|static
name|boolean
name|isOpportunisticContainerAllocationEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
argument_list|)
return|;
block|}
comment|// helper methods for timeline service configuration
comment|/**    * Returns whether the timeline service is enabled via configuration.    *    * @param conf the configuration    * @return whether the timeline service is enabled.    */
DECL|method|timelineServiceEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|timelineServiceEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_ENABLED
argument_list|)
return|;
block|}
comment|/**    * Returns the timeline service version. It does not check whether the    * timeline service itself is enabled.    *    * @param conf the configuration    * @return the timeline service version as a float.    */
DECL|method|getTimelineServiceVersion (Configuration conf)
specifier|public
specifier|static
name|float
name|getTimelineServiceVersion
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getFloat
argument_list|(
name|TIMELINE_SERVICE_VERSION
argument_list|,
name|DEFAULT_TIMELINE_SERVICE_VERSION
argument_list|)
return|;
block|}
comment|/**    * Returns whether the timeline service v.2 is enabled via configuration.    *    * @param conf the configuration    * @return whether the timeline service v.2 is enabled. V.2 refers to a    * version greater than equal to 2 but smaller than 3.    */
DECL|method|timelineServiceV2Enabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|timelineServiceV2Enabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|timelineServiceEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|Float
argument_list|>
name|versions
init|=
name|getTimelineServiceVersions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Float
name|version
range|:
name|versions
control|)
block|{
if|if
condition|(
name|version
operator|.
name|intValue
argument_list|()
operator|==
literal|2
condition|)
block|{
name|enabled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|enabled
return|;
block|}
comment|/**    * Returns whether the timeline service v.1 is enabled via configuration.    *    * @param conf the configuration    * @return whether the timeline service v.1 is enabled. V.1 refers to a    * version greater than equal to 1 but smaller than 2.    */
DECL|method|timelineServiceV1Enabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|timelineServiceV1Enabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|timelineServiceEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|Float
argument_list|>
name|versions
init|=
name|getTimelineServiceVersions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Float
name|version
range|:
name|versions
control|)
block|{
if|if
condition|(
name|version
operator|.
name|intValue
argument_list|()
operator|==
literal|1
condition|)
block|{
name|enabled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|enabled
return|;
block|}
comment|/**    * Returns whether the timeline service v.1,5 is enabled via configuration.    *    * @param conf the configuration    * @return whether the timeline service v.1.5 is enabled. V.1.5 refers to a    * version equal to 1.5.    */
DECL|method|timelineServiceV15Enabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|timelineServiceV15Enabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|timelineServiceEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|Collection
argument_list|<
name|Float
argument_list|>
name|versions
init|=
name|getTimelineServiceVersions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|Float
name|version
range|:
name|versions
control|)
block|{
if|if
condition|(
name|Float
operator|.
name|compare
argument_list|(
name|version
argument_list|,
literal|1.5f
argument_list|)
operator|==
literal|0
condition|)
block|{
name|enabled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|enabled
return|;
block|}
comment|/**    * Returns all the active timeline service versions. It does not check    * whether the timeline service itself is enabled.    *    * @param conf the configuration    * @return the timeline service versions as a collection of floats.    */
DECL|method|getTimelineServiceVersions ( Configuration conf)
specifier|private
specifier|static
name|Collection
argument_list|<
name|Float
argument_list|>
name|getTimelineServiceVersions
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|versions
init|=
name|conf
operator|.
name|get
argument_list|(
name|TIMELINE_SERVICE_VERSIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|versions
operator|==
literal|null
condition|)
block|{
name|versions
operator|=
name|Float
operator|.
name|toString
argument_list|(
name|getTimelineServiceVersion
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|versions
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|floatList
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|stringList
control|)
block|{
name|Float
name|f
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|floatList
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|floatList
return|;
block|}
comment|/**    * Returns whether the system publisher is enabled.    *    * @param conf the configuration    * @return whether the system publisher is enabled.    */
DECL|method|systemMetricsPublisherEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|systemMetricsPublisherEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|)
return|;
block|}
comment|/**    * Returns whether the NUMA awareness is enabled.    *    * @param conf the configuration    * @return whether the NUMA awareness is enabled.    */
DECL|method|numaAwarenessEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|numaAwarenessEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|NM_NUMA_AWARENESS_ENABLED
argument_list|,
name|DEFAULT_NM_NUMA_AWARENESS_ENABLED
argument_list|)
return|;
block|}
comment|/* For debugging. mp configurations to system output as XML format. */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|YarnConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|.
name|writeXml
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

