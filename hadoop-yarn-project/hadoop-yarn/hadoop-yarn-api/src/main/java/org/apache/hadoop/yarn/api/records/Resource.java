begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p><code>Resource</code> models a set of computer resources in the   * cluster.</p>  *   *<p>Currrently it only models<em>memory</em>.</p>  *   *<p>Typically, applications request<code>Resource</code> of suitable  * capability to run their component tasks.</p>  *   * @see ResourceRequest  * @see ApplicationMasterProtocol#allocate(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest)  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|Resource
specifier|public
specifier|abstract
class|class
name|Resource
implements|implements
name|Comparable
argument_list|<
name|Resource
argument_list|>
block|{
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance (int memory, int vCores)
specifier|public
specifier|static
name|Resource
name|newInstance
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemory
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVirtualCores
argument_list|(
name|vCores
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
comment|/**    * Get<em>memory</em> of the resource.    * @return<em>memory</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getMemory ()
specifier|public
specifier|abstract
name|int
name|getMemory
parameter_list|()
function_decl|;
comment|/**    * Set<em>memory</em> of the resource.    * @param memory<em>memory</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setMemory (int memory)
specifier|public
specifier|abstract
name|void
name|setMemory
parameter_list|(
name|int
name|memory
parameter_list|)
function_decl|;
comment|/**    * Get<em>number of virtual cpu cores</em> of the resource.    *     * We refer to<em>virtual cores</em> to clarify that these represent    *<em>normalized</em> cores which may have a m:n relationship w.r.t    * physical cores available on the compute nodes. Furthermore, they also     * represent<em>idealized</em> cores since the cluster might be composed    * of<em>heterogenous</em> nodes.    *       * @return<em>num of virtual cpu cores</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|getVirtualCores ()
specifier|public
specifier|abstract
name|int
name|getVirtualCores
parameter_list|()
function_decl|;
comment|/**    * Set<em>number of virtual cpu cores</em> of the resource.    *     * We refer to<em>virtual cores</em> to clarify that these represent    *<em>normalized</em> cores which may have a m:n relationship w.r.t    * physical cores available on the compute nodes. Furthermore, they also     * represent<em>idealized</em> cores since the cluster might be composed    * of<em>heterogenous</em> nodes.    *       * @param vCores<em>number of virtual cpu cores</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|setVirtualCores (int vCores)
specifier|public
specifier|abstract
name|void
name|setVirtualCores
parameter_list|(
name|int
name|vCores
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|263167
decl_stmt|;
name|int
name|result
init|=
literal|3571
decl_stmt|;
name|result
operator|=
literal|939769357
operator|+
name|getMemory
argument_list|()
expr_stmt|;
comment|// prime * result = 939769357 initially
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getVirtualCores
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Resource
operator|)
condition|)
return|return
literal|false
return|;
name|Resource
name|other
init|=
operator|(
name|Resource
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getMemory
argument_list|()
operator|!=
name|other
operator|.
name|getMemory
argument_list|()
operator|||
name|getVirtualCores
argument_list|()
operator|!=
name|other
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<memory:"
operator|+
name|getMemory
argument_list|()
operator|+
literal|", vCores:"
operator|+
name|getVirtualCores
argument_list|()
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

