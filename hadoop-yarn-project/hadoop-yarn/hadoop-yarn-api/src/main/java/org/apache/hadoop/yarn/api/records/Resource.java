begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *<p><code>Resource</code> models a set of computer resources in the   * cluster.</p>  *   *<p>Currently it models both<em>memory</em> and<em>CPU</em>.</p>  *   *<p>The unit for memory is megabytes. CPU is modeled with virtual cores  * (vcores), a unit for expressing parallelism. A node's capacity should  * be configured with virtual cores equal to its number of physical cores. A  * container should be requested with the number of cores it can saturate, i.e.  * the average number of threads it expects to have runnable at a time.</p>  *   *<p>Virtual cores take integer values and thus currently CPU-scheduling is  * very coarse.  A complementary axis for CPU requests that represents  * processing power will likely be added in the future to enable finer-grained  * resource configuration.</p>  *  *<p>Typically, applications request<code>Resource</code> of suitable  * capability to run their component tasks.</p>  *   * @see ResourceRequest  * @see ApplicationMasterProtocol#allocate(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest)  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|Resource
specifier|public
specifier|abstract
class|class
name|Resource
implements|implements
name|Comparable
argument_list|<
name|Resource
argument_list|>
block|{
DECL|class|SimpleResource
specifier|private
specifier|static
class|class
name|SimpleResource
extends|extends
name|Resource
block|{
DECL|field|memory
specifier|private
name|long
name|memory
decl_stmt|;
DECL|field|vcores
specifier|private
name|long
name|vcores
decl_stmt|;
DECL|method|SimpleResource (long memory, long vcores)
name|SimpleResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|long
name|vcores
parameter_list|)
block|{
name|this
operator|.
name|memory
operator|=
name|memory
expr_stmt|;
name|this
operator|.
name|vcores
operator|=
name|vcores
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMemory ()
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|memory
return|;
block|}
annotation|@
name|Override
DECL|method|setMemory (int memory)
specifier|public
name|void
name|setMemory
parameter_list|(
name|int
name|memory
parameter_list|)
block|{
name|this
operator|.
name|memory
operator|=
name|memory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMemorySize ()
specifier|public
name|long
name|getMemorySize
parameter_list|()
block|{
return|return
name|memory
return|;
block|}
annotation|@
name|Override
DECL|method|setMemorySize (long memory)
specifier|public
name|void
name|setMemorySize
parameter_list|(
name|long
name|memory
parameter_list|)
block|{
name|this
operator|.
name|memory
operator|=
name|memory
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVirtualCores ()
specifier|public
name|int
name|getVirtualCores
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|vcores
return|;
block|}
annotation|@
name|Override
DECL|method|setVirtualCores (int vcores)
specifier|public
name|void
name|setVirtualCores
parameter_list|(
name|int
name|vcores
parameter_list|)
block|{
name|this
operator|.
name|vcores
operator|=
name|vcores
expr_stmt|;
block|}
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance (int memory, int vCores)
specifier|public
specifier|static
name|Resource
name|newInstance
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|)
block|{
return|return
operator|new
name|SimpleResource
argument_list|(
name|memory
argument_list|,
name|vCores
argument_list|)
return|;
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance (long memory, int vCores)
specifier|public
specifier|static
name|Resource
name|newInstance
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|)
block|{
return|return
operator|new
name|SimpleResource
argument_list|(
name|memory
argument_list|,
name|vCores
argument_list|)
return|;
block|}
comment|/**    * This method is DEPRECATED:    * Use {@link Resource#getMemorySize()} instead    *    * Get<em>memory</em> of the resource. Note - while memory has    * never had a unit specified, all YARN configurations have specified memory    * in MB. The assumption has been that the daemons and applications are always    * using the same units. With the introduction of the ResourceInformation    * class we have support for units - so this function will continue to return    * memory but in the units of MB    *    * @return<em>memory</em>(in MB) of the resource    */
annotation|@
name|Public
annotation|@
name|Deprecated
DECL|method|getMemory ()
specifier|public
specifier|abstract
name|int
name|getMemory
parameter_list|()
function_decl|;
comment|/**    * Get<em>memory</em> of the resource. Note - while memory has    * never had a unit specified, all YARN configurations have specified memory    * in MB. The assumption has been that the daemons and applications are always    * using the same units. With the introduction of the ResourceInformation    * class we have support for units - so this function will continue to return    * memory but in the units of MB    *    * @return<em>memory</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getMemorySize ()
specifier|public
name|long
name|getMemorySize
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"This method is implemented by ResourcePBImpl"
argument_list|)
throw|;
block|}
comment|/**    * Set<em>memory</em> of the resource. Note - while memory has    * never had a unit specified, all YARN configurations have specified memory    * in MB. The assumption has been that the daemons and applications are always    * using the same units. With the introduction of the ResourceInformation    * class we have support for units - so this function will continue to set    * memory but the assumption is that the value passed is in units of MB.    *    * @param memory<em>memory</em>(in MB) of the resource    */
annotation|@
name|Public
annotation|@
name|Deprecated
DECL|method|setMemory (int memory)
specifier|public
specifier|abstract
name|void
name|setMemory
parameter_list|(
name|int
name|memory
parameter_list|)
function_decl|;
comment|/**    * Set<em>memory</em> of the resource.    * @param memory<em>memory</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setMemorySize (long memory)
specifier|public
name|void
name|setMemorySize
parameter_list|(
name|long
name|memory
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"This method is implemented by ResourcePBImpl"
argument_list|)
throw|;
block|}
comment|/**    * Get<em>number of virtual cpu cores</em> of the resource.    *     * Virtual cores are a unit for expressing CPU parallelism. A node's capacity    * should be configured with virtual cores equal to its number of physical    * cores. A container should be requested with the number of cores it can    * saturate, i.e. the average number of threads it expects to have runnable    * at a time.    *    * @return<em>num of virtual cpu cores</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|getVirtualCores ()
specifier|public
specifier|abstract
name|int
name|getVirtualCores
parameter_list|()
function_decl|;
comment|/**    * Set<em>number of virtual cpu cores</em> of the resource.    *     * Virtual cores are a unit for expressing CPU parallelism. A node's capacity    * should be configured with virtual cores equal to its number of physical    * cores. A container should be requested with the number of cores it can    * saturate, i.e. the average number of threads it expects to have runnable    * at a time.    *    * @param vCores<em>number of virtual cpu cores</em> of the resource    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|setVirtualCores (int vCores)
specifier|public
specifier|abstract
name|void
name|setVirtualCores
parameter_list|(
name|int
name|vCores
parameter_list|)
function_decl|;
comment|/**    * Get ResourceInformation for all resources.    *    * @return Map of resource name to ResourceInformation    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|getResources ()
specifier|public
specifier|abstract
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|getResources
parameter_list|()
function_decl|;
comment|/**    * Get ResourceInformation for a specified resource.    *    * @param resource name of the resource    * @return the ResourceInformation object for the resource    * @throws YarnException if the resource can't be found    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|getResourceInformation (String resource)
specifier|public
specifier|abstract
name|ResourceInformation
name|getResourceInformation
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Get the value for a specified resource. No information about the units is    * returned.    *    * @param resource name of the resource    * @return the value for the resource    * @throws YarnException if the resource can't be found    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|getResourceValue (String resource)
specifier|public
specifier|abstract
name|Long
name|getResourceValue
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|YarnException
function_decl|;
comment|/**    * Set the ResourceInformation object for a particular resource.    *    * @param resource the resource for which the ResourceInformation is provided    * @param resourceInformation ResourceInformation object    * @throws ResourceNotFoundException if the resource is not found    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|setResourceInformation (String resource, ResourceInformation resourceInformation)
specifier|public
specifier|abstract
name|void
name|setResourceInformation
parameter_list|(
name|String
name|resource
parameter_list|,
name|ResourceInformation
name|resourceInformation
parameter_list|)
throws|throws
name|ResourceNotFoundException
function_decl|;
comment|/**    * Set the value of a resource in the ResourceInformation object. The unit of    * the value is assumed to be the one in the ResourceInformation object.    *    * @param resource the resource for which the value is provided.    * @param value    the value to set    * @throws ResourceNotFoundException if the resource is not found    */
annotation|@
name|Public
annotation|@
name|Evolving
DECL|method|setResourceValue (String resource, Long value)
specifier|public
specifier|abstract
name|void
name|setResourceValue
parameter_list|(
name|String
name|resource
parameter_list|,
name|Long
name|value
parameter_list|)
throws|throws
name|ResourceNotFoundException
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|263167
decl_stmt|;
name|int
name|result
init|=
call|(
name|int
call|)
argument_list|(
literal|939769357
operator|+
name|getMemorySize
argument_list|()
argument_list|)
decl_stmt|;
comment|// prime * result = 939769357 initially
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getVirtualCores
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|entry
range|:
name|getResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Resource
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Resource
name|other
init|=
operator|(
name|Resource
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getMemorySize
argument_list|()
operator|!=
name|other
operator|.
name|getMemorySize
argument_list|()
operator|||
name|getVirtualCores
argument_list|()
operator|!=
name|other
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|this
operator|.
name|getResources
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getResources
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Resource other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Resource
name|other
parameter_list|)
block|{
name|long
name|diff
init|=
name|this
operator|.
name|getMemorySize
argument_list|()
operator|-
name|other
operator|.
name|getMemorySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|this
operator|.
name|getVirtualCores
argument_list|()
operator|-
name|other
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
block|}
return|return
name|diff
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|diff
operator|>
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<memory:"
argument_list|)
operator|.
name|append
argument_list|(
name|getMemorySize
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", vCores:"
argument_list|)
operator|.
name|append
argument_list|(
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|entry
range|:
name|getResources
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getUnits
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Resource other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Resource
name|other
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|thisResources
decl_stmt|,
name|otherResources
decl_stmt|;
name|thisResources
operator|=
name|this
operator|.
name|getResources
argument_list|()
expr_stmt|;
name|otherResources
operator|=
name|other
operator|.
name|getResources
argument_list|()
expr_stmt|;
name|long
name|diff
init|=
name|thisResources
operator|.
name|size
argument_list|()
operator|-
name|otherResources
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|thisResources
operator|.
name|keySet
argument_list|()
operator|.
name|equals
argument_list|(
name|otherResources
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|diff
operator|=
name|this
operator|.
name|getMemorySize
argument_list|()
operator|-
name|other
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|this
operator|.
name|getVirtualCores
argument_list|()
operator|-
name|other
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|entry
range|:
name|thisResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|diff
operator|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|otherResources
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
return|return
name|Long
operator|.
name|compare
argument_list|(
name|diff
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

