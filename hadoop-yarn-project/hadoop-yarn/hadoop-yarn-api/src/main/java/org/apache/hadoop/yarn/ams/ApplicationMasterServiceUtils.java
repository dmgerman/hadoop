begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.ams
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ams
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdatedContainer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utility methods to be used by {@link ApplicationMasterServiceProcessor}.  */
end_comment

begin_class
DECL|class|ApplicationMasterServiceUtils
specifier|public
specifier|final
class|class
name|ApplicationMasterServiceUtils
block|{
DECL|method|ApplicationMasterServiceUtils ()
specifier|private
name|ApplicationMasterServiceUtils
parameter_list|()
block|{ }
comment|/**    * Add update container errors to {@link AllocateResponse}.    * @param allocateResponse Allocate Response.    * @param updateContainerErrors Errors.    */
DECL|method|addToUpdateContainerErrors ( AllocateResponse allocateResponse, List<UpdateContainerError> updateContainerErrors)
specifier|public
specifier|static
name|void
name|addToUpdateContainerErrors
parameter_list|(
name|AllocateResponse
name|allocateResponse
parameter_list|,
name|List
argument_list|<
name|UpdateContainerError
argument_list|>
name|updateContainerErrors
parameter_list|)
block|{
if|if
condition|(
operator|!
name|updateContainerErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateContainerErrors
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allocateResponse
operator|.
name|setUpdateErrors
argument_list|(
name|updateContainerErrors
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add updated containers to {@link AllocateResponse}.    * @param allocateResponse Allocate Response.    * @param updateType Update Type.    * @param updatedContainers Updated Containers.    */
DECL|method|addToUpdatedContainers (AllocateResponse allocateResponse, ContainerUpdateType updateType, List<Container> updatedContainers)
specifier|public
specifier|static
name|void
name|addToUpdatedContainers
parameter_list|(
name|AllocateResponse
name|allocateResponse
parameter_list|,
name|ContainerUpdateType
name|updateType
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|updatedContainers
parameter_list|)
block|{
if|if
condition|(
name|updatedContainers
operator|!=
literal|null
operator|&&
name|updatedContainers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ArrayList
argument_list|<
name|UpdatedContainer
argument_list|>
name|containersToSet
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|containersToSet
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Container
name|updatedContainer
range|:
name|updatedContainers
control|)
block|{
name|containersToSet
operator|.
name|add
argument_list|(
name|UpdatedContainer
operator|.
name|newInstance
argument_list|(
name|updateType
argument_list|,
name|updatedContainer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|allocateResponse
operator|.
name|setUpdatedContainers
argument_list|(
name|containersToSet
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Add allocated containers to {@link AllocateResponse}.    * @param allocateResponse Allocate Response.    * @param allocatedContainers Allocated Containers.    */
DECL|method|addToAllocatedContainers (AllocateResponse allocateResponse, List<Container> allocatedContainers)
specifier|public
specifier|static
name|void
name|addToAllocatedContainers
parameter_list|(
name|AllocateResponse
name|allocateResponse
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|)
block|{
if|if
condition|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|allocateResponse
operator|.
name|setAllocatedContainers
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

