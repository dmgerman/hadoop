begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  *<code>ResourceUtilization</code> models the utilization of a set of computer  * resources in the cluster.  *</p>  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ResourceUtilization
specifier|public
specifier|abstract
class|class
name|ResourceUtilization
implements|implements
name|Comparable
argument_list|<
name|ResourceUtilization
argument_list|>
block|{
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (int pmem, int vmem, float cpu)
specifier|public
specifier|static
name|ResourceUtilization
name|newInstance
parameter_list|(
name|int
name|pmem
parameter_list|,
name|int
name|vmem
parameter_list|,
name|float
name|cpu
parameter_list|)
block|{
name|ResourceUtilization
name|utilization
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ResourceUtilization
operator|.
name|class
argument_list|)
decl_stmt|;
name|utilization
operator|.
name|setPhysicalMemory
argument_list|(
name|pmem
argument_list|)
expr_stmt|;
name|utilization
operator|.
name|setVirtualMemory
argument_list|(
name|vmem
argument_list|)
expr_stmt|;
name|utilization
operator|.
name|setCPU
argument_list|(
name|cpu
argument_list|)
expr_stmt|;
return|return
name|utilization
return|;
block|}
comment|/**    * Get used<em>virtual memory</em>.    *    * @return<em>virtual memory</em> in MB    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getVirtualMemory ()
specifier|public
specifier|abstract
name|int
name|getVirtualMemory
parameter_list|()
function_decl|;
comment|/**    * Set used<em>virtual memory</em>.    *    * @param vmem<em>virtual memory</em> in MB    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setVirtualMemory (int vmem)
specifier|public
specifier|abstract
name|void
name|setVirtualMemory
parameter_list|(
name|int
name|vmem
parameter_list|)
function_decl|;
comment|/**    * Get<em>physical memory</em>.    *    * @return<em>physical memory</em> in MB    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getPhysicalMemory ()
specifier|public
specifier|abstract
name|int
name|getPhysicalMemory
parameter_list|()
function_decl|;
comment|/**    * Set<em>physical memory</em>.    *    * @param pmem<em>physical memory</em> in MB    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setPhysicalMemory (int pmem)
specifier|public
specifier|abstract
name|void
name|setPhysicalMemory
parameter_list|(
name|int
name|pmem
parameter_list|)
function_decl|;
comment|/**    * Get<em>CPU</em> utilization.    *    * @return<em>CPU utilization</em> normalized to 1 CPU    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getCPU ()
specifier|public
specifier|abstract
name|float
name|getCPU
parameter_list|()
function_decl|;
comment|/**    * Set<em>CPU</em> utilization.    *    * @param cpu<em>CPU utilization</em> normalized to 1 CPU    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setCPU (float cpu)
specifier|public
specifier|abstract
name|void
name|setCPU
parameter_list|(
name|float
name|cpu
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|263167
decl_stmt|;
name|int
name|result
init|=
literal|3571
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getVirtualMemory
argument_list|()
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getPhysicalMemory
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|Float
operator|.
name|valueOf
argument_list|(
name|getCPU
argument_list|()
argument_list|)
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ResourceUtilization
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ResourceUtilization
name|other
init|=
operator|(
name|ResourceUtilization
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getVirtualMemory
argument_list|()
operator|!=
name|other
operator|.
name|getVirtualMemory
argument_list|()
operator|||
name|getPhysicalMemory
argument_list|()
operator|!=
name|other
operator|.
name|getPhysicalMemory
argument_list|()
operator|||
name|getCPU
argument_list|()
operator|!=
name|other
operator|.
name|getCPU
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"<pmem:"
operator|+
name|getPhysicalMemory
argument_list|()
operator|+
literal|", vmem:"
operator|+
name|getVirtualMemory
argument_list|()
operator|+
literal|", vCores:"
operator|+
name|getCPU
argument_list|()
operator|+
literal|">"
return|;
block|}
comment|/**    * Add utilization to the current one.    * @param pmem Physical memory used to add.    * @param vmem Virtual memory used to add.    * @param cpu CPU utilization to add.    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|addTo (int pmem, int vmem, float cpu)
specifier|public
name|void
name|addTo
parameter_list|(
name|int
name|pmem
parameter_list|,
name|int
name|vmem
parameter_list|,
name|float
name|cpu
parameter_list|)
block|{
name|this
operator|.
name|setPhysicalMemory
argument_list|(
name|this
operator|.
name|getPhysicalMemory
argument_list|()
operator|+
name|pmem
argument_list|)
expr_stmt|;
name|this
operator|.
name|setVirtualMemory
argument_list|(
name|this
operator|.
name|getVirtualMemory
argument_list|()
operator|+
name|vmem
argument_list|)
expr_stmt|;
name|this
operator|.
name|setCPU
argument_list|(
name|this
operator|.
name|getCPU
argument_list|()
operator|+
name|cpu
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

