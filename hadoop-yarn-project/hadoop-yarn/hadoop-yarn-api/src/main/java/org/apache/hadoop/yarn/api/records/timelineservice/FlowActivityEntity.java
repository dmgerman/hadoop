begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_comment
comment|/**  * Entity that represents a record for flow activity. It's essentially a  * container entity for flow runs with limited information.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|FlowActivityEntity
specifier|public
class|class
name|FlowActivityEntity
extends|extends
name|TimelineEntity
block|{
DECL|field|CLUSTER_INFO_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_INFO_KEY
init|=
name|TimelineEntity
operator|.
name|SYSTEM_INFO_KEY_PREFIX
operator|+
literal|"CLUSTER"
decl_stmt|;
DECL|field|DATE_INFO_KEY
specifier|public
specifier|static
specifier|final
name|String
name|DATE_INFO_KEY
init|=
name|TimelineEntity
operator|.
name|SYSTEM_INFO_KEY_PREFIX
operator|+
literal|"DATE"
decl_stmt|;
DECL|field|USER_INFO_KEY
specifier|public
specifier|static
specifier|final
name|String
name|USER_INFO_KEY
init|=
name|TimelineEntity
operator|.
name|SYSTEM_INFO_KEY_PREFIX
operator|+
literal|"USER"
decl_stmt|;
DECL|field|FLOW_NAME_INFO_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FLOW_NAME_INFO_KEY
init|=
name|TimelineEntity
operator|.
name|SYSTEM_INFO_KEY_PREFIX
operator|+
literal|"FLOW_NAME"
decl_stmt|;
DECL|field|flowRuns
specifier|private
specifier|final
name|NavigableSet
argument_list|<
name|FlowRunEntity
argument_list|>
name|flowRuns
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FlowActivityEntity ()
specifier|public
name|FlowActivityEntity
parameter_list|()
block|{
name|super
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// set config to null
name|setConfigs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FlowActivityEntity (String cluster, long time, String user, String flowName)
specifier|public
name|FlowActivityEntity
parameter_list|(
name|String
name|cluster
parameter_list|,
name|long
name|time
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|flowName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setCluster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|setDate
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|setFlowName
argument_list|(
name|flowName
argument_list|)
expr_stmt|;
block|}
DECL|method|FlowActivityEntity (TimelineEntity entity)
specifier|public
name|FlowActivityEntity
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
name|super
argument_list|(
name|entity
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|TimelineEntityType
operator|.
name|YARN_FLOW_ACTIVITY
operator|.
name|matches
argument_list|(
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Incompatible entity type: "
operator|+
name|getId
argument_list|()
argument_list|)
throw|;
block|}
comment|// set config to null
name|setConfigs
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"id"
argument_list|)
annotation|@
name|Override
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
comment|// flow activity: cluster/day/user@flow_name
name|String
name|id
init|=
name|super
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getCluster
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getFlowName
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (TimelineEntity entity)
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
name|int
name|comparison
init|=
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|entity
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|comparison
operator|==
literal|0
condition|)
block|{
comment|// order by cluster, date (descending), user, and flow name
name|FlowActivityEntity
name|other
init|=
operator|(
name|FlowActivityEntity
operator|)
name|entity
decl_stmt|;
name|int
name|clusterComparison
init|=
name|getCluster
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getCluster
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|clusterComparison
return|;
block|}
name|int
name|dateComparisonDescending
init|=
call|(
name|int
call|)
argument_list|(
name|other
operator|.
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
operator|-
name|getDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
comment|// descending
if|if
condition|(
name|dateComparisonDescending
operator|!=
literal|0
condition|)
block|{
return|return
name|dateComparisonDescending
return|;
comment|// descending
block|}
name|int
name|userComparison
init|=
name|getUser
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|userComparison
return|;
block|}
return|return
name|getFlowName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getFlowName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|comparison
return|;
block|}
block|}
comment|/**    * Reuse the base class equals method.    */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
comment|/**    * Reuse the base class hashCode method.    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|getCluster ()
specifier|public
name|String
name|getCluster
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CLUSTER_INFO_KEY
argument_list|)
return|;
block|}
DECL|method|setCluster (String cluster)
specifier|public
name|void
name|setCluster
parameter_list|(
name|String
name|cluster
parameter_list|)
block|{
name|addInfo
argument_list|(
name|CLUSTER_INFO_KEY
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
DECL|method|getDate ()
specifier|public
name|Date
name|getDate
parameter_list|()
block|{
name|Object
name|date
init|=
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|DATE_INFO_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|date
operator|instanceof
name|Long
condition|)
block|{
return|return
operator|new
name|Date
argument_list|(
operator|(
name|Long
operator|)
name|date
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|date
operator|instanceof
name|Date
condition|)
block|{
return|return
operator|(
name|Date
operator|)
name|date
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|setDate (long time)
specifier|public
name|void
name|setDate
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|Date
name|date
init|=
operator|new
name|Date
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|addInfo
argument_list|(
name|DATE_INFO_KEY
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|USER_INFO_KEY
argument_list|)
return|;
block|}
DECL|method|setUser (String user)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|addInfo
argument_list|(
name|USER_INFO_KEY
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|getFlowName ()
specifier|public
name|String
name|getFlowName
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|FLOW_NAME_INFO_KEY
argument_list|)
return|;
block|}
DECL|method|setFlowName (String flowName)
specifier|public
name|void
name|setFlowName
parameter_list|(
name|String
name|flowName
parameter_list|)
block|{
name|addInfo
argument_list|(
name|FLOW_NAME_INFO_KEY
argument_list|,
name|flowName
argument_list|)
expr_stmt|;
block|}
DECL|method|addFlowRun (FlowRunEntity run)
specifier|public
name|void
name|addFlowRun
parameter_list|(
name|FlowRunEntity
name|run
parameter_list|)
block|{
name|flowRuns
operator|.
name|add
argument_list|(
name|run
argument_list|)
expr_stmt|;
block|}
DECL|method|addFlowRuns (Collection<FlowRunEntity> runs)
specifier|public
name|void
name|addFlowRuns
parameter_list|(
name|Collection
argument_list|<
name|FlowRunEntity
argument_list|>
name|runs
parameter_list|)
block|{
name|flowRuns
operator|.
name|addAll
argument_list|(
name|runs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"flowruns"
argument_list|)
DECL|method|getFlowRuns ()
specifier|public
name|NavigableSet
argument_list|<
name|FlowRunEntity
argument_list|>
name|getFlowRuns
parameter_list|()
block|{
return|return
name|flowRuns
return|;
block|}
DECL|method|getNumberOfRuns ()
specifier|public
name|int
name|getNumberOfRuns
parameter_list|()
block|{
return|return
name|flowRuns
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

