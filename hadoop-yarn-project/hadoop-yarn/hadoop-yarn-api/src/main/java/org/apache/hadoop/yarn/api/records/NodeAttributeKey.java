begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  * Node AttributeKey uniquely identifies a given Node Attribute. Node Attribute  * is identified based on attribute prefix and name.  *</p>  *<p>  * Node Attribute Prefix is used as namespace to segregate the attributes.  *</p>  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|NodeAttributeKey
specifier|public
specifier|abstract
class|class
name|NodeAttributeKey
block|{
DECL|method|newInstance (String attributeName)
specifier|public
specifier|static
name|NodeAttributeKey
name|newInstance
parameter_list|(
name|String
name|attributeName
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
name|attributeName
argument_list|)
return|;
block|}
DECL|method|newInstance (String attributePrefix, String attributeName)
specifier|public
specifier|static
name|NodeAttributeKey
name|newInstance
parameter_list|(
name|String
name|attributePrefix
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|NodeAttributeKey
name|nodeAttributeKey
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeAttributeKey
operator|.
name|class
argument_list|)
decl_stmt|;
name|nodeAttributeKey
operator|.
name|setAttributePrefix
argument_list|(
name|attributePrefix
argument_list|)
expr_stmt|;
name|nodeAttributeKey
operator|.
name|setAttributeName
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
return|return
name|nodeAttributeKey
return|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAttributePrefix ()
specifier|public
specifier|abstract
name|String
name|getAttributePrefix
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setAttributePrefix (String attributePrefix)
specifier|public
specifier|abstract
name|void
name|setAttributePrefix
parameter_list|(
name|String
name|attributePrefix
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getAttributeName ()
specifier|public
specifier|abstract
name|String
name|getAttributeName
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setAttributeName (String attributeName)
specifier|public
specifier|abstract
name|void
name|setAttributeName
parameter_list|(
name|String
name|attributeName
parameter_list|)
function_decl|;
block|}
end_class

end_unit

