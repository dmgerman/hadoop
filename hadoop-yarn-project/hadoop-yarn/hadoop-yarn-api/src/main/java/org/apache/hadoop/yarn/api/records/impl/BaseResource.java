begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  *<p>  *<code>BaseResource</code> extends Resource to handle base resources such  * as memory and CPU.  * TODO: We have a long term plan to use AbstractResource when additional  * resource types are to be handled as well.  *</p>  *  *<p>  * Currently it models both<em>memory</em> and<em>CPU</em>.  *</p>  *  *<p>  * The unit for memory is megabytes. CPU is modeled with virtual cores (vcores),  * a unit for expressing parallelism. A node's capacity should be configured  * with virtual cores equal to its number of physical cores. A container should  * be requested with the number of cores it can saturate, i.e. the average  * number of threads it expects to have runnable at a time.  *</p>  *  *<p>  * Virtual cores take integer values and thus currently CPU-scheduling is very  * coarse. A complementary axis for CPU requests that represents processing  * power will likely be added in the future to enable finer-grained resource  * configuration.  *</p>  *  * @see Resource  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|BaseResource
specifier|public
class|class
name|BaseResource
extends|extends
name|Resource
block|{
DECL|field|memoryResInfo
specifier|private
name|ResourceInformation
name|memoryResInfo
decl_stmt|;
DECL|field|vcoresResInfo
specifier|private
name|ResourceInformation
name|vcoresResInfo
decl_stmt|;
DECL|field|resources
specifier|protected
name|ResourceInformation
index|[]
name|resources
init|=
literal|null
decl_stmt|;
DECL|field|readOnlyResources
specifier|protected
name|ResourceInformation
index|[]
name|readOnlyResources
init|=
literal|null
decl_stmt|;
DECL|enum|MandatoryResources
specifier|protected
enum|enum
name|MandatoryResources
block|{
DECL|enumConstant|MEMORY
DECL|enumConstant|VCORES
name|MEMORY
argument_list|(
literal|0
argument_list|)
block|,
name|VCORES
argument_list|(
literal|1
argument_list|)
block|;
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|method|MandatoryResources (int id)
name|MandatoryResources
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
DECL|method|getId ()
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|this
operator|.
name|id
return|;
block|}
block|}
DECL|method|BaseResource ()
specifier|public
name|BaseResource
parameter_list|()
block|{
comment|// Base constructor.
block|}
DECL|method|BaseResource (long memory, long vcores)
specifier|public
name|BaseResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|long
name|vcores
parameter_list|)
block|{
name|this
operator|.
name|memoryResInfo
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|MEMORY
argument_list|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|this
operator|.
name|vcoresResInfo
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|VCORES
argument_list|,
literal|""
argument_list|,
name|vcores
argument_list|)
expr_stmt|;
name|resources
operator|=
operator|new
name|ResourceInformation
index|[
name|MandatoryResources
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|readOnlyResources
operator|=
operator|new
name|ResourceInformation
index|[
name|MandatoryResources
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
name|resources
index|[
name|MandatoryResources
operator|.
name|MEMORY
operator|.
name|id
index|]
operator|=
name|memoryResInfo
expr_stmt|;
name|resources
index|[
name|MandatoryResources
operator|.
name|VCORES
operator|.
name|id
index|]
operator|=
name|vcoresResInfo
expr_stmt|;
name|readOnlyResources
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|resources
argument_list|,
name|resources
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getMemory ()
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|memoryResInfo
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setMemory (int memory)
specifier|public
name|void
name|setMemory
parameter_list|(
name|int
name|memory
parameter_list|)
block|{
name|this
operator|.
name|memoryResInfo
operator|.
name|setValue
argument_list|(
name|memory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMemorySize ()
specifier|public
name|long
name|getMemorySize
parameter_list|()
block|{
return|return
name|memoryResInfo
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setMemorySize (long memory)
specifier|public
name|void
name|setMemorySize
parameter_list|(
name|long
name|memory
parameter_list|)
block|{
name|this
operator|.
name|memoryResInfo
operator|.
name|setValue
argument_list|(
name|memory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVirtualCores ()
specifier|public
name|int
name|getVirtualCores
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|vcoresResInfo
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setVirtualCores (int vcores)
specifier|public
name|void
name|setVirtualCores
parameter_list|(
name|int
name|vcores
parameter_list|)
block|{
name|this
operator|.
name|vcoresResInfo
operator|.
name|setValue
argument_list|(
name|vcores
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResources ()
specifier|public
name|ResourceInformation
index|[]
name|getResources
parameter_list|()
block|{
return|return
name|readOnlyResources
return|;
block|}
block|}
end_class

end_unit

