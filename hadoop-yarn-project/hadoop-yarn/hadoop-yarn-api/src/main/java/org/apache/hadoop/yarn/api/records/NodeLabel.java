begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|NodeLabel
specifier|public
specifier|abstract
class|class
name|NodeLabel
block|{
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (String nodeLabel, boolean isExclusive)
specifier|public
specifier|static
name|NodeLabel
name|newInstance
parameter_list|(
name|String
name|nodeLabel
parameter_list|,
name|boolean
name|isExclusive
parameter_list|)
block|{
name|NodeLabel
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeLabel
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNodeLabel
argument_list|(
name|nodeLabel
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIsExclusive
argument_list|(
name|isExclusive
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getNodeLabel ()
specifier|public
specifier|abstract
name|String
name|getNodeLabel
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setNodeLabel (String nodeLabel)
specifier|public
specifier|abstract
name|void
name|setNodeLabel
parameter_list|(
name|String
name|nodeLabel
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getIsExclusive ()
specifier|public
specifier|abstract
name|boolean
name|getIsExclusive
parameter_list|()
function_decl|;
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setIsExclusive (boolean isExclusive)
specifier|public
specifier|abstract
name|void
name|setIsExclusive
parameter_list|(
name|boolean
name|isExclusive
parameter_list|)
function_decl|;
block|}
end_class

end_unit

