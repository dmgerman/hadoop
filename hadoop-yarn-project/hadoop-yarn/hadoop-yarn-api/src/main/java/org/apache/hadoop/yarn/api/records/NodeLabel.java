begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|NodeLabel
specifier|public
specifier|abstract
class|class
name|NodeLabel
implements|implements
name|Comparable
argument_list|<
name|NodeLabel
argument_list|>
block|{
comment|/**    * Default node label partition used for displaying.    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_NODE_LABEL_PARTITION
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_NODE_LABEL_PARTITION
init|=
literal|"<DEFAULT_PARTITION>"
decl_stmt|;
comment|/**    * Node Label expression not set .    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|NODE_LABEL_EXPRESSION_NOT_SET
specifier|public
specifier|static
specifier|final
name|String
name|NODE_LABEL_EXPRESSION_NOT_SET
init|=
literal|"<Not set>"
decl_stmt|;
comment|/**    * By default, node label is exclusive or not    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|field|DEFAULT_NODE_LABEL_EXCLUSIVITY
specifier|public
specifier|static
specifier|final
name|boolean
name|DEFAULT_NODE_LABEL_EXCLUSIVITY
init|=
literal|true
decl_stmt|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance (String name)
specifier|public
specifier|static
name|NodeLabel
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|name
argument_list|,
name|DEFAULT_NODE_LABEL_EXCLUSIVITY
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance (String name, boolean isExclusive)
specifier|public
specifier|static
name|NodeLabel
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isExclusive
parameter_list|)
block|{
name|NodeLabel
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeLabel
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|request
operator|.
name|setExclusivity
argument_list|(
name|isExclusive
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getName ()
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setName (String name)
specifier|public
specifier|abstract
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|isExclusive ()
specifier|public
specifier|abstract
name|boolean
name|isExclusive
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setExclusivity (boolean isExclusive)
specifier|public
specifier|abstract
name|void
name|setExclusivity
parameter_list|(
name|boolean
name|isExclusive
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|compareTo (NodeLabel other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|NodeLabel
name|other
parameter_list|)
block|{
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|NodeLabel
condition|)
block|{
name|NodeLabel
name|nl
init|=
operator|(
name|NodeLabel
operator|)
name|obj
decl_stmt|;
return|return
name|nl
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|&&
name|nl
operator|.
name|isExclusive
argument_list|()
operator|==
name|isExclusive
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":exclusivity="
argument_list|)
operator|.
name|append
argument_list|(
name|isExclusive
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|<<
literal|16
operator|)
operator|+
operator|(
name|isExclusive
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
block|}
end_class

end_unit

