begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * Class to encapsulate information about a ResourceType - the name of the  * resource, the units(milli, micro, etc), the type(countable).  */
end_comment

begin_class
DECL|class|ResourceTypeInfo
specifier|public
specifier|abstract
class|class
name|ResourceTypeInfo
implements|implements
name|Comparable
argument_list|<
name|ResourceTypeInfo
argument_list|>
block|{
comment|/**    * Get the name for the resource.    *    * @return resource name    */
DECL|method|getName ()
specifier|public
specifier|abstract
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**    * Set the name for the resource.    *    * @param rName    *          name for the resource    */
DECL|method|setName (String rName)
specifier|public
specifier|abstract
name|void
name|setName
parameter_list|(
name|String
name|rName
parameter_list|)
function_decl|;
comment|/**    * Get units for the resource.    *    * @return units for the resource    */
DECL|method|getDefaultUnit ()
specifier|public
specifier|abstract
name|String
name|getDefaultUnit
parameter_list|()
function_decl|;
comment|/**    * Set the units for the resource.    *    * @param rUnits    *          units for the resource    */
DECL|method|setDefaultUnit (String rUnits)
specifier|public
specifier|abstract
name|void
name|setDefaultUnit
parameter_list|(
name|String
name|rUnits
parameter_list|)
function_decl|;
comment|/**    * Get the resource type.    *    * @return the resource type    */
DECL|method|getResourceType ()
specifier|public
specifier|abstract
name|ResourceTypes
name|getResourceType
parameter_list|()
function_decl|;
comment|/**    * Set the resource type.    *    * @param type    *          the resource type    */
DECL|method|setResourceType (ResourceTypes type)
specifier|public
specifier|abstract
name|void
name|setResourceType
parameter_list|(
name|ResourceTypes
name|type
parameter_list|)
function_decl|;
comment|/**    * Create a new instance of ResourceTypeInfo from another object.    *    * @param other    *          the object from which the new object should be created    * @return the new ResourceTypeInfo object    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|newInstance (ResourceTypeInfo other)
specifier|public
specifier|static
name|ResourceTypeInfo
name|newInstance
parameter_list|(
name|ResourceTypeInfo
name|other
parameter_list|)
block|{
name|ResourceTypeInfo
name|resourceType
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ResourceTypeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|other
argument_list|,
name|resourceType
argument_list|)
expr_stmt|;
return|return
name|resourceType
return|;
block|}
comment|/**    * Create a new instance of ResourceTypeInfo from name, units and type.    *    * @param name name of resource type    * @param units units of resource type    * @param type such as countable, etc.    * @return the new ResourceTypeInfo object    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|newInstance (String name, String units, ResourceTypes type)
specifier|public
specifier|static
name|ResourceTypeInfo
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|units
parameter_list|,
name|ResourceTypes
name|type
parameter_list|)
block|{
name|ResourceTypeInfo
name|resourceType
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ResourceTypeInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|resourceType
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|resourceType
operator|.
name|setResourceType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|resourceType
operator|.
name|setDefaultUnit
argument_list|(
name|units
argument_list|)
expr_stmt|;
return|return
name|resourceType
return|;
block|}
comment|/**    * Create a new instance of ResourceTypeInfo from name, units.    *    * @param name name of resource type    * @param units units of resource type    * @return the new ResourceTypeInfo object    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|newInstance (String name, String units)
specifier|public
specifier|static
name|ResourceTypeInfo
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|units
parameter_list|)
block|{
return|return
name|ResourceTypeInfo
operator|.
name|newInstance
argument_list|(
name|name
argument_list|,
name|units
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|)
return|;
block|}
comment|/**    * Create a new instance of ResourceTypeInfo from name.    *    * @param name name of resource type    * @return the new ResourceTypeInfo object    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|method|newInstance (String name)
specifier|public
specifier|static
name|ResourceTypeInfo
name|newInstance
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ResourceTypeInfo
operator|.
name|newInstance
argument_list|(
name|name
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Copies the content of the source ResourceTypeInfo object to the    * destination object, overwriting all properties of the destination object.    *    * @param src    *          Source ResourceTypeInfo object    * @param dst    *          Destination ResourceTypeInfo object    */
DECL|method|copy (ResourceTypeInfo src, ResourceTypeInfo dst)
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|ResourceTypeInfo
name|src
parameter_list|,
name|ResourceTypeInfo
name|dst
parameter_list|)
block|{
name|dst
operator|.
name|setName
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setResourceType
argument_list|(
name|src
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|dst
operator|.
name|setDefaultUnit
argument_list|(
name|src
operator|.
name|getDefaultUnit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|getDefaultUnit
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" (unit="
argument_list|)
operator|.
name|append
argument_list|(
name|this
operator|.
name|getDefaultUnit
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|ResourceTypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ResourceTypeInfo
name|r
init|=
operator|(
name|ResourceTypeInfo
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getResourceType
argument_list|()
argument_list|)
operator|&&
name|this
operator|.
name|getDefaultUnit
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getDefaultUnit
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|47
decl_stmt|;
name|int
name|result
init|=
name|prime
operator|+
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getResourceType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ResourceTypeInfo other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ResourceTypeInfo
name|other
parameter_list|)
block|{
name|int
name|diff
init|=
name|this
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|this
operator|.
name|getDefaultUnit
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getDefaultUnit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
name|diff
operator|=
name|this
operator|.
name|getResourceType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|diff
return|;
block|}
block|}
end_class

end_unit

