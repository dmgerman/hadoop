begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  *<p><code>ApplicationSubmissionContext</code> represents all of the  * information needed by the<code>ResourceManager</code> to launch   * the<code>ApplicationMaster</code> for an application.</p>  *   *<p>It includes details such as:  *<ul>  *<li>{@link ApplicationId} of the application.</li>  *<li>Application user.</li>  *<li>Application name.</li>  *<li>{@link Priority} of the application.</li>  *<li>  *       {@link ContainerLaunchContext} of the container in which the   *<code>ApplicationMaster</code> is executed.  *</li>  *<li>maxAppAttempts. The maximum number of application attempts.  *     It should be no larger than the global number of max attempts in the  *     Yarn configuration.</li>  *<li>attemptFailuresValidityInterval. The default value is -1.  *     when attemptFailuresValidityInterval in milliseconds is set to> 0,  *     the failure number will no take failures which happen out of the  *     validityInterval into failure count. If failure count reaches to  *     maxAppAttempts, the application will be failed.  *</li>  *<li>Optional, application-specific {@link LogAggregationContext}</li>  *</ul>  *</p>  *   * @see ContainerLaunchContext  * @see ApplicationClientProtocol#submitApplication(org.apache.hadoop.yarn.api.protocolrecords.SubmitApplicationRequest)  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|ApplicationSubmissionContext
specifier|public
specifier|abstract
class|class
name|ApplicationSubmissionContext
block|{
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance ( ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource, String applicationType, boolean keepContainers)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|newInstance
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerLaunchContext
name|amContainer
parameter_list|,
name|boolean
name|isUnmanagedAM
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
name|applicationType
parameter_list|,
name|boolean
name|keepContainers
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationName
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
name|context
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|context
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|context
operator|.
name|setUnmanagedAM
argument_list|(
name|isUnmanagedAM
argument_list|)
expr_stmt|;
name|context
operator|.
name|setCancelTokensWhenComplete
argument_list|(
name|cancelTokensWhenComplete
argument_list|)
expr_stmt|;
name|context
operator|.
name|setMaxAppAttempts
argument_list|(
name|maxAppAttempts
argument_list|)
expr_stmt|;
name|context
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationType
argument_list|(
name|applicationType
argument_list|)
expr_stmt|;
name|context
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
name|keepContainers
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance ( ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource, String applicationType)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|newInstance
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerLaunchContext
name|amContainer
parameter_list|,
name|boolean
name|isUnmanagedAM
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
name|applicationType
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|applicationName
argument_list|,
name|queue
argument_list|,
name|priority
argument_list|,
name|amContainer
argument_list|,
name|isUnmanagedAM
argument_list|,
name|cancelTokensWhenComplete
argument_list|,
name|maxAppAttempts
argument_list|,
name|resource
argument_list|,
name|applicationType
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance ( ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|newInstance
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerLaunchContext
name|amContainer
parameter_list|,
name|boolean
name|isUnmanagedAM
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|applicationName
argument_list|,
name|queue
argument_list|,
name|priority
argument_list|,
name|amContainer
argument_list|,
name|isUnmanagedAM
argument_list|,
name|cancelTokensWhenComplete
argument_list|,
name|maxAppAttempts
argument_list|,
name|resource
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance ( ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource, String applicationType, boolean keepContainers, long attemptFailuresValidityInterval)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|newInstance
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerLaunchContext
name|amContainer
parameter_list|,
name|boolean
name|isUnmanagedAM
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
name|applicationType
parameter_list|,
name|boolean
name|keepContainers
parameter_list|,
name|long
name|attemptFailuresValidityInterval
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|applicationName
argument_list|,
name|queue
argument_list|,
name|priority
argument_list|,
name|amContainer
argument_list|,
name|isUnmanagedAM
argument_list|,
name|cancelTokensWhenComplete
argument_list|,
name|maxAppAttempts
argument_list|,
name|resource
argument_list|,
name|applicationType
argument_list|,
name|keepContainers
argument_list|)
decl_stmt|;
name|context
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|attemptFailuresValidityInterval
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance ( ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource, String applicationType, boolean keepContainers, LogAggregationContext logAggregationContext)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|newInstance
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerLaunchContext
name|amContainer
parameter_list|,
name|boolean
name|isUnmanagedAM
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
name|applicationType
parameter_list|,
name|boolean
name|keepContainers
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|applicationName
argument_list|,
name|queue
argument_list|,
name|priority
argument_list|,
name|amContainer
argument_list|,
name|isUnmanagedAM
argument_list|,
name|cancelTokensWhenComplete
argument_list|,
name|maxAppAttempts
argument_list|,
name|resource
argument_list|,
name|applicationType
argument_list|,
name|keepContainers
argument_list|)
decl_stmt|;
name|context
operator|.
name|setLogAggregationContext
argument_list|(
name|logAggregationContext
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
comment|/**    * Get the<code>ApplicationId</code> of the submitted application.    * @return<code>ApplicationId</code> of the submitted application    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getApplicationId ()
specifier|public
specifier|abstract
name|ApplicationId
name|getApplicationId
parameter_list|()
function_decl|;
comment|/**    * Set the<code>ApplicationId</code> of the submitted application.    * @param applicationId<code>ApplicationId</code> of the submitted    *                      application    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setApplicationId (ApplicationId applicationId)
specifier|public
specifier|abstract
name|void
name|setApplicationId
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
function_decl|;
comment|/**    * Get the application<em>name</em>.    * @return application name    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getApplicationName ()
specifier|public
specifier|abstract
name|String
name|getApplicationName
parameter_list|()
function_decl|;
comment|/**    * Set the application<em>name</em>.    * @param applicationName application name    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setApplicationName (String applicationName)
specifier|public
specifier|abstract
name|void
name|setApplicationName
parameter_list|(
name|String
name|applicationName
parameter_list|)
function_decl|;
comment|/**    * Get the<em>queue</em> to which the application is being submitted.    * @return<em>queue</em> to which the application is being submitted    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getQueue ()
specifier|public
specifier|abstract
name|String
name|getQueue
parameter_list|()
function_decl|;
comment|/**    * Set the<em>queue</em> to which the application is being submitted    * @param queue<em>queue</em> to which the application is being submitted    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setQueue (String queue)
specifier|public
specifier|abstract
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
function_decl|;
comment|/**    * Get the<code>Priority</code> of the application.    * @return<code>Priority</code> of the application    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getPriority ()
specifier|public
specifier|abstract
name|Priority
name|getPriority
parameter_list|()
function_decl|;
comment|/**    * Set the<code>Priority</code> of the application.    * @param priority<code>Priority</code> of the application    */
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setPriority (Priority priority)
specifier|public
specifier|abstract
name|void
name|setPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
function_decl|;
comment|/**    * Get the<code>ContainerLaunchContext</code> to describe the     *<code>Container</code> with which the<code>ApplicationMaster</code> is    * launched.    * @return<code>ContainerLaunchContext</code> for the     *<code>ApplicationMaster</code> container    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getAMContainerSpec ()
specifier|public
specifier|abstract
name|ContainerLaunchContext
name|getAMContainerSpec
parameter_list|()
function_decl|;
comment|/**    * Set the<code>ContainerLaunchContext</code> to describe the     *<code>Container</code> with which the<code>ApplicationMaster</code> is    * launched.    * @param amContainer<code>ContainerLaunchContext</code> for the     *<code>ApplicationMaster</code> container    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setAMContainerSpec (ContainerLaunchContext amContainer)
specifier|public
specifier|abstract
name|void
name|setAMContainerSpec
parameter_list|(
name|ContainerLaunchContext
name|amContainer
parameter_list|)
function_decl|;
comment|/**    * Get if the RM should manage the execution of the AM.     * If true, then the RM     * will not allocate a container for the AM and start it. It will expect the     * AM to be launched and connect to the RM within the AM liveliness period and     * fail the app otherwise. The client should launch the AM only after the RM     * has ACCEPTED the application and changed the<code>YarnApplicationState</code>.    * Such apps will not be retried by the RM on app attempt failure.    * The default value is false.    * @return true if the AM is not managed by the RM    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getUnmanagedAM ()
specifier|public
specifier|abstract
name|boolean
name|getUnmanagedAM
parameter_list|()
function_decl|;
comment|/**    * @param value true if RM should not manage the AM    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setUnmanagedAM (boolean value)
specifier|public
specifier|abstract
name|void
name|setUnmanagedAM
parameter_list|(
name|boolean
name|value
parameter_list|)
function_decl|;
comment|/**    * @return true if tokens should be canceled when the app completes.    */
annotation|@
name|LimitedPrivate
argument_list|(
literal|"mapreduce"
argument_list|)
annotation|@
name|Unstable
DECL|method|getCancelTokensWhenComplete ()
specifier|public
specifier|abstract
name|boolean
name|getCancelTokensWhenComplete
parameter_list|()
function_decl|;
comment|/**    * Set to false if tokens should not be canceled when the app finished else    * false.  WARNING: this is not recommended unless you want your single job    * tokens to be reused by others jobs.    * @param cancel true if tokens should be canceled when the app finishes.     */
annotation|@
name|LimitedPrivate
argument_list|(
literal|"mapreduce"
argument_list|)
annotation|@
name|Unstable
DECL|method|setCancelTokensWhenComplete (boolean cancel)
specifier|public
specifier|abstract
name|void
name|setCancelTokensWhenComplete
parameter_list|(
name|boolean
name|cancel
parameter_list|)
function_decl|;
comment|/**    * @return the number of max attempts of the application to be submitted    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getMaxAppAttempts ()
specifier|public
specifier|abstract
name|int
name|getMaxAppAttempts
parameter_list|()
function_decl|;
comment|/**    * Set the number of max attempts of the application to be submitted. WARNING:    * it should be no larger than the global number of max attempts in the Yarn    * configuration.    * @param maxAppAttempts the number of max attempts of the application    * to be submitted.    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setMaxAppAttempts (int maxAppAttempts)
specifier|public
specifier|abstract
name|void
name|setMaxAppAttempts
parameter_list|(
name|int
name|maxAppAttempts
parameter_list|)
function_decl|;
comment|/**    * Get the resource required by the<code>ApplicationMaster</code> for this    * application.    *     * @return the resource required by the<code>ApplicationMaster</code> for    *         this application.    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getResource ()
specifier|public
specifier|abstract
name|Resource
name|getResource
parameter_list|()
function_decl|;
comment|/**    * Set the resource required by the<code>ApplicationMaster</code> for this    * application.    *    * @param resource the resource required by the<code>ApplicationMaster</code>    * for this application.    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setResource (Resource resource)
specifier|public
specifier|abstract
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
function_decl|;
comment|/**    * Get the application type    *     * @return the application type    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getApplicationType ()
specifier|public
specifier|abstract
name|String
name|getApplicationType
parameter_list|()
function_decl|;
comment|/**    * Set the application type    *     * @param applicationType the application type    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setApplicationType (String applicationType)
specifier|public
specifier|abstract
name|void
name|setApplicationType
parameter_list|(
name|String
name|applicationType
parameter_list|)
function_decl|;
comment|/**    * Get the flag which indicates whether to keep containers across application    * attempts or not.    *     * @return the flag which indicates whether to keep containers across    *         application attempts or not.    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getKeepContainersAcrossApplicationAttempts ()
specifier|public
specifier|abstract
name|boolean
name|getKeepContainersAcrossApplicationAttempts
parameter_list|()
function_decl|;
comment|/**    * Set the flag which indicates whether to keep containers across application    * attempts.    *<p>    * If the flag is true, running containers will not be killed when application    * attempt fails and these containers will be retrieved by the new application    * attempt on registration via    * {@link ApplicationMasterProtocol#registerApplicationMaster(RegisterApplicationMasterRequest)}.    *</p>    *     * @param keepContainers    *          the flag which indicates whether to keep containers across    *          application attempts.    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setKeepContainersAcrossApplicationAttempts ( boolean keepContainers)
specifier|public
specifier|abstract
name|void
name|setKeepContainersAcrossApplicationAttempts
parameter_list|(
name|boolean
name|keepContainers
parameter_list|)
function_decl|;
comment|/**    * Get tags for the application    *    * @return the application tags    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getApplicationTags ()
specifier|public
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|getApplicationTags
parameter_list|()
function_decl|;
comment|/**    * Set tags for the application. A maximum of    * {@link YarnConfiguration#APPLICATION_MAX_TAGS} are allowed    * per application. Each tag can be at most    * {@link YarnConfiguration#APPLICATION_MAX_TAG_LENGTH}    * characters, and can contain only ASCII characters.    *    * @param tags tags to set    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setApplicationTags (Set<String> tags)
specifier|public
specifier|abstract
name|void
name|setApplicationTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
function_decl|;
comment|/**    * Get the attemptFailuresValidityInterval in milliseconds for the application    *    * @return the attemptFailuresValidityInterval    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getAttemptFailuresValidityInterval ()
specifier|public
specifier|abstract
name|long
name|getAttemptFailuresValidityInterval
parameter_list|()
function_decl|;
comment|/**    * Set the attemptFailuresValidityInterval in milliseconds for the application    * @param attemptFailuresValidityInterval    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setAttemptFailuresValidityInterval ( long attemptFailuresValidityInterval)
specifier|public
specifier|abstract
name|void
name|setAttemptFailuresValidityInterval
parameter_list|(
name|long
name|attemptFailuresValidityInterval
parameter_list|)
function_decl|;
comment|/**    * Get<code>LogAggregationContext</code> of the application    *    * @return<code>LogAggregationContext</code> of the application    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getLogAggregationContext ()
specifier|public
specifier|abstract
name|LogAggregationContext
name|getLogAggregationContext
parameter_list|()
function_decl|;
comment|/**    * Set<code>LogAggregationContext</code> for the application    *    * @param logAggregationContext    *          for the application    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setLogAggregationContext ( LogAggregationContext logAggregationContext)
specifier|public
specifier|abstract
name|void
name|setLogAggregationContext
parameter_list|(
name|LogAggregationContext
name|logAggregationContext
parameter_list|)
function_decl|;
comment|/**    * Get the reservation id, that corresponds to a valid resource allocation in    * the scheduler (between start and end time of the corresponding reservation)    *     * @return the reservation id representing the unique id of the corresponding    *         reserved resource allocation in the scheduler    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getReservationID ()
specifier|public
specifier|abstract
name|ReservationId
name|getReservationID
parameter_list|()
function_decl|;
comment|/**    * Set the reservation id, that correspond to a valid resource allocation in    * the scheduler (between start and end time of the corresponding reservation)    *     * @param reservationId representing the unique id of the    *          corresponding reserved resource allocation in the scheduler    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setReservationID (ReservationId reservationID)
specifier|public
specifier|abstract
name|void
name|setReservationID
parameter_list|(
name|ReservationId
name|reservationID
parameter_list|)
function_decl|;
block|}
end_class

end_unit

