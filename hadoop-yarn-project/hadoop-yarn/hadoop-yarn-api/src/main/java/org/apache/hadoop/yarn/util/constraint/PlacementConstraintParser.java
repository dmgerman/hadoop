begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|AbstractConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Placement constraint expression parser.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|PlacementConstraintParser
specifier|public
specifier|final
class|class
name|PlacementConstraintParser
block|{
DECL|field|EXPRESSION_DELIM
specifier|private
specifier|static
specifier|final
name|char
name|EXPRESSION_DELIM
init|=
literal|':'
decl_stmt|;
DECL|field|KV_SPLIT_DELIM
specifier|private
specifier|static
specifier|final
name|char
name|KV_SPLIT_DELIM
init|=
literal|'='
decl_stmt|;
DECL|field|EXPRESSION_VAL_DELIM
specifier|private
specifier|static
specifier|final
name|char
name|EXPRESSION_VAL_DELIM
init|=
literal|','
decl_stmt|;
DECL|field|BRACKET_START
specifier|private
specifier|static
specifier|final
name|char
name|BRACKET_START
init|=
literal|'('
decl_stmt|;
DECL|field|BRACKET_END
specifier|private
specifier|static
specifier|final
name|char
name|BRACKET_END
init|=
literal|')'
decl_stmt|;
DECL|field|IN
specifier|private
specifier|static
specifier|final
name|String
name|IN
init|=
literal|"in"
decl_stmt|;
DECL|field|NOT_IN
specifier|private
specifier|static
specifier|final
name|String
name|NOT_IN
init|=
literal|"notin"
decl_stmt|;
DECL|field|AND
specifier|private
specifier|static
specifier|final
name|String
name|AND
init|=
literal|"and"
decl_stmt|;
DECL|field|OR
specifier|private
specifier|static
specifier|final
name|String
name|OR
init|=
literal|"or"
decl_stmt|;
DECL|field|CARDINALITY
specifier|private
specifier|static
specifier|final
name|String
name|CARDINALITY
init|=
literal|"cardinality"
decl_stmt|;
DECL|field|SCOPE_NODE
specifier|private
specifier|static
specifier|final
name|String
name|SCOPE_NODE
init|=
name|PlacementConstraints
operator|.
name|NODE
decl_stmt|;
DECL|field|SCOPE_RACK
specifier|private
specifier|static
specifier|final
name|String
name|SCOPE_RACK
init|=
name|PlacementConstraints
operator|.
name|RACK
decl_stmt|;
DECL|method|PlacementConstraintParser ()
specifier|private
name|PlacementConstraintParser
parameter_list|()
block|{
comment|// Private constructor for this utility class.
block|}
comment|/**    * Constraint Parser used to parse placement constraints from a    * given expression.    */
DECL|class|ConstraintParser
specifier|public
specifier|static
specifier|abstract
class|class
name|ConstraintParser
block|{
DECL|field|tokenizer
specifier|private
specifier|final
name|ConstraintTokenizer
name|tokenizer
decl_stmt|;
DECL|method|ConstraintParser (ConstraintTokenizer tk)
specifier|public
name|ConstraintParser
parameter_list|(
name|ConstraintTokenizer
name|tk
parameter_list|)
block|{
name|this
operator|.
name|tokenizer
operator|=
name|tk
expr_stmt|;
block|}
DECL|method|validate ()
name|void
name|validate
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
name|tokenizer
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
DECL|method|shouldHaveNext ()
name|void
name|shouldHaveNext
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
if|if
condition|(
operator|!
name|tokenizer
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Expecting more tokens"
argument_list|)
throw|;
block|}
block|}
DECL|method|nextToken ()
name|String
name|nextToken
parameter_list|()
block|{
return|return
name|this
operator|.
name|tokenizer
operator|.
name|nextElement
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
DECL|method|hasMoreTokens ()
name|boolean
name|hasMoreTokens
parameter_list|()
block|{
return|return
name|this
operator|.
name|tokenizer
operator|.
name|hasMoreElements
argument_list|()
return|;
block|}
DECL|method|toInt (String name)
name|int
name|toInt
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|PlacementConstraintParseException
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Expecting an Integer, but get "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
DECL|method|parseScope (String scopeString)
name|String
name|parseScope
parameter_list|(
name|String
name|scopeString
parameter_list|)
throws|throws
name|PlacementConstraintParseException
block|{
if|if
condition|(
name|scopeString
operator|.
name|equalsIgnoreCase
argument_list|(
name|SCOPE_NODE
argument_list|)
condition|)
block|{
return|return
name|SCOPE_NODE
return|;
block|}
elseif|else
if|if
condition|(
name|scopeString
operator|.
name|equalsIgnoreCase
argument_list|(
name|SCOPE_RACK
argument_list|)
condition|)
block|{
return|return
name|SCOPE_RACK
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"expecting scope to "
operator|+
name|SCOPE_NODE
operator|+
literal|" or "
operator|+
name|SCOPE_RACK
operator|+
literal|", but met "
operator|+
name|scopeString
argument_list|)
throw|;
block|}
block|}
DECL|method|tryParse ()
specifier|public
name|AbstractConstraint
name|tryParse
parameter_list|()
block|{
try|try
block|{
return|return
name|parse
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|PlacementConstraintParseException
name|e
parameter_list|)
block|{
comment|// unable to parse, simply return null
return|return
literal|null
return|;
block|}
block|}
DECL|method|parse ()
specifier|public
specifier|abstract
name|AbstractConstraint
name|parse
parameter_list|()
throws|throws
name|PlacementConstraintParseException
function_decl|;
block|}
comment|/**    * Tokenizer interface that used to parse an expression. It first    * validates if the syntax of the given expression is valid, then traverse    * the expression and parse it to an enumeration of strings. Each parsed    * string can be further consumed by a {@link ConstraintParser} and    * transformed to a {@link AbstractConstraint}.    */
DECL|interface|ConstraintTokenizer
specifier|public
interface|interface
name|ConstraintTokenizer
extends|extends
name|Enumeration
argument_list|<
name|String
argument_list|>
block|{
comment|/**      * Validate the schema before actual parsing the expression.      * @throws PlacementConstraintParseException      */
DECL|method|validate ()
specifier|default
name|void
name|validate
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
comment|// do nothing
block|}
block|}
comment|/**    * A basic tokenizer that splits an expression by a given delimiter.    */
DECL|class|BaseStringTokenizer
specifier|public
specifier|static
class|class
name|BaseStringTokenizer
implements|implements
name|ConstraintTokenizer
block|{
DECL|field|tokenizer
specifier|private
specifier|final
name|StringTokenizer
name|tokenizer
decl_stmt|;
DECL|method|BaseStringTokenizer (String expr, String delimiter)
name|BaseStringTokenizer
parameter_list|(
name|String
name|expr
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
name|this
operator|.
name|tokenizer
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|expr
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasMoreElements ()
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextElement ()
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|tokenizer
operator|.
name|nextToken
argument_list|()
return|;
block|}
block|}
comment|/**    * Tokenizer used to parse conjunction form of a constraint expression,    * [AND|OR](C1:C2:...:Cn). Each Cn is a constraint expression.    */
DECL|class|ConjunctionTokenizer
specifier|public
specifier|static
specifier|final
class|class
name|ConjunctionTokenizer
implements|implements
name|ConstraintTokenizer
block|{
DECL|field|expression
specifier|private
specifier|final
name|String
name|expression
decl_stmt|;
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
decl_stmt|;
DECL|method|ConjunctionTokenizer (String expr)
specifier|private
name|ConjunctionTokenizer
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expr
expr_stmt|;
block|}
comment|// Traverse the expression and try to get a list of parsed elements
comment|// based on schema.
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parsedElements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// expression should start with AND or OR
name|String
name|op
decl_stmt|;
if|if
condition|(
name|expression
operator|.
name|startsWith
argument_list|(
name|AND
argument_list|)
operator|||
name|expression
operator|.
name|startsWith
argument_list|(
name|AND
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
name|op
operator|=
name|AND
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expression
operator|.
name|startsWith
argument_list|(
name|OR
argument_list|)
operator|||
name|expression
operator|.
name|startsWith
argument_list|(
name|OR
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
name|op
operator|=
name|OR
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Excepting starting with \""
operator|+
name|AND
operator|+
literal|"\" or \""
operator|+
name|OR
operator|+
literal|"\","
operator|+
literal|" but met "
operator|+
name|expression
argument_list|)
throw|;
block|}
name|parsedElements
operator|.
name|add
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\((.*)\\)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|expression
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Unexpected format,"
operator|+
literal|" expecting [AND|OR](A:B...) "
operator|+
literal|"but current expression is "
operator|+
name|expression
argument_list|)
throw|;
block|}
name|String
name|childStrs
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|MultipleConstraintsTokenizer
name|ct
init|=
operator|new
name|MultipleConstraintsTokenizer
argument_list|(
name|childStrs
argument_list|)
decl_stmt|;
name|ct
operator|.
name|validate
argument_list|()
expr_stmt|;
while|while
condition|(
name|ct
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|parsedElements
operator|.
name|add
argument_list|(
name|ct
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|iterator
operator|=
name|parsedElements
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasMoreElements ()
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextElement ()
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
comment|/**    * Tokenizer used to parse allocation tags expression, which should be    * in tag=numOfAllocations syntax.    */
DECL|class|SourceTagsTokenizer
specifier|public
specifier|static
class|class
name|SourceTagsTokenizer
implements|implements
name|ConstraintTokenizer
block|{
DECL|field|expression
specifier|private
specifier|final
name|String
name|expression
decl_stmt|;
DECL|field|st
specifier|private
name|StringTokenizer
name|st
decl_stmt|;
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
decl_stmt|;
DECL|method|SourceTagsTokenizer (String expr)
specifier|public
name|SourceTagsTokenizer
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expr
expr_stmt|;
name|st
operator|=
operator|new
name|StringTokenizer
argument_list|(
name|expr
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|KV_SPLIT_DELIM
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|parsedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|countTokens
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Expecting source allocation tag to be specified"
operator|+
literal|" sourceTag=numOfAllocations syntax,"
operator|+
literal|" but met "
operator|+
name|expression
argument_list|)
throw|;
block|}
name|String
name|sourceTag
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|parsedValues
operator|.
name|add
argument_list|(
name|sourceTag
argument_list|)
expr_stmt|;
name|String
name|num
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|num
argument_list|)
expr_stmt|;
name|parsedValues
operator|.
name|add
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Value of the expression"
operator|+
literal|" must be an integer, but met "
operator|+
name|num
argument_list|)
throw|;
block|}
name|iterator
operator|=
name|parsedValues
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasMoreElements ()
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextElement ()
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
comment|/**    * Tokenizer used to handle a placement spec composed by multiple    * constraint expressions. Each of them is delimited with the    * given delimiter, e.g ':'.    */
DECL|class|MultipleConstraintsTokenizer
specifier|public
specifier|static
class|class
name|MultipleConstraintsTokenizer
implements|implements
name|ConstraintTokenizer
block|{
DECL|field|expr
specifier|private
specifier|final
name|String
name|expr
decl_stmt|;
DECL|field|iterator
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
decl_stmt|;
DECL|method|MultipleConstraintsTokenizer (String expression)
specifier|public
name|MultipleConstraintsTokenizer
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate ()
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|parsedElements
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|char
index|[]
name|arr
init|=
name|expr
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
comment|// Memorize the location of each delimiter in a stack,
comment|// removes invalid delimiters that embraced in brackets.
name|Stack
argument_list|<
name|Integer
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|char
name|current
init|=
name|arr
index|[
name|i
index|]
decl_stmt|;
switch|switch
condition|(
name|current
condition|)
block|{
case|case
name|EXPRESSION_DELIM
case|:
name|stack
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|BRACKET_START
case|:
name|stack
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|BRACKET_END
case|:
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|arr
index|[
name|stack
operator|.
name|pop
argument_list|()
index|]
operator|==
name|BRACKET_START
condition|)
block|{
break|break;
block|}
block|}
break|break;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Single element
name|parsedElements
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|stack
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|currentPos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|pos
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|sub
init|=
name|expr
operator|.
name|substring
argument_list|(
name|currentPos
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
operator|&&
operator|!
name|sub
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|parsedElements
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
name|currentPos
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|currentPos
operator|<
name|expr
operator|.
name|length
argument_list|()
condition|)
block|{
name|parsedElements
operator|.
name|add
argument_list|(
name|expr
operator|.
name|substring
argument_list|(
name|currentPos
argument_list|,
name|expr
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iterator
operator|=
name|parsedElements
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hasMoreElements ()
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextElement ()
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
comment|/**    * Constraint parser used to parse a given target expression, such as    * "NOTIN, NODE, foo, bar".    */
DECL|class|TargetConstraintParser
specifier|public
specifier|static
class|class
name|TargetConstraintParser
extends|extends
name|ConstraintParser
block|{
DECL|method|TargetConstraintParser (String expression)
specifier|public
name|TargetConstraintParser
parameter_list|(
name|String
name|expression
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|BaseStringTokenizer
argument_list|(
name|expression
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|EXPRESSION_VAL_DELIM
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse ()
specifier|public
name|AbstractConstraint
name|parse
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
name|PlacementConstraint
operator|.
name|AbstractConstraint
name|placementConstraints
decl_stmt|;
name|String
name|op
init|=
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|IN
argument_list|)
operator|||
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|NOT_IN
argument_list|)
condition|)
block|{
name|String
name|scope
init|=
name|nextToken
argument_list|()
decl_stmt|;
name|scope
operator|=
name|parseScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|tag
init|=
name|nextToken
argument_list|()
decl_stmt|;
name|allocationTags
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
name|PlacementConstraint
operator|.
name|TargetExpression
name|target
init|=
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
name|allocationTags
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allocationTags
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|IN
argument_list|)
condition|)
block|{
name|placementConstraints
operator|=
name|PlacementConstraints
operator|.
name|targetIn
argument_list|(
name|scope
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|placementConstraints
operator|=
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|scope
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"expecting "
operator|+
name|IN
operator|+
literal|" or "
operator|+
name|NOT_IN
operator|+
literal|", but get "
operator|+
name|op
argument_list|)
throw|;
block|}
return|return
name|placementConstraints
return|;
block|}
block|}
comment|/**    * Constraint parser used to parse a given target expression, such as    * "cardinality, NODE, foo, 0, 1".    */
DECL|class|CardinalityConstraintParser
specifier|public
specifier|static
class|class
name|CardinalityConstraintParser
extends|extends
name|ConstraintParser
block|{
DECL|method|CardinalityConstraintParser (String expr)
specifier|public
name|CardinalityConstraintParser
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|BaseStringTokenizer
argument_list|(
name|expr
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|EXPRESSION_VAL_DELIM
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse ()
specifier|public
name|AbstractConstraint
name|parse
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
name|String
name|op
init|=
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|op
operator|.
name|equalsIgnoreCase
argument_list|(
name|CARDINALITY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"expecting "
operator|+
name|CARDINALITY
operator|+
literal|" , but met "
operator|+
name|op
argument_list|)
throw|;
block|}
name|shouldHaveNext
argument_list|()
expr_stmt|;
name|String
name|scope
init|=
name|nextToken
argument_list|()
decl_stmt|;
name|scope
operator|=
name|parseScope
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|Stack
argument_list|<
name|String
argument_list|>
name|resetElements
init|=
operator|new
name|Stack
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|resetElements
operator|.
name|add
argument_list|(
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// At least 3 elements
if|if
condition|(
name|resetElements
operator|.
name|size
argument_list|()
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Invalid syntax for a cardinality expression, expecting"
operator|+
literal|" \"cardinality,SCOPE,TARGET_TAG,...,TARGET_TAG,"
operator|+
literal|"MIN_CARDINALITY,MAX_CARDINALITY\" at least 5 elements,"
operator|+
literal|" but only "
operator|+
operator|(
name|resetElements
operator|.
name|size
argument_list|()
operator|+
literal|2
operator|)
operator|+
literal|" is given."
argument_list|)
throw|;
block|}
name|String
name|maxCardinalityStr
init|=
name|resetElements
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Integer
name|max
init|=
name|toInt
argument_list|(
name|maxCardinalityStr
argument_list|)
decl_stmt|;
name|String
name|minCardinalityStr
init|=
name|resetElements
operator|.
name|pop
argument_list|()
decl_stmt|;
name|Integer
name|min
init|=
name|toInt
argument_list|(
name|minCardinalityStr
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|targetTags
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|resetElements
operator|.
name|empty
argument_list|()
condition|)
block|{
name|targetTags
operator|.
name|add
argument_list|(
name|resetElements
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|PlacementConstraints
operator|.
name|cardinality
argument_list|(
name|scope
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|targetTags
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|targetTags
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Parser used to parse conjunction form of constraints, such as    * AND(A, ..., B), OR(A, ..., B).    */
DECL|class|ConjunctionConstraintParser
specifier|public
specifier|static
class|class
name|ConjunctionConstraintParser
extends|extends
name|ConstraintParser
block|{
DECL|method|ConjunctionConstraintParser (String expr)
specifier|public
name|ConjunctionConstraintParser
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ConjunctionTokenizer
argument_list|(
name|expr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse ()
specifier|public
name|AbstractConstraint
name|parse
parameter_list|()
throws|throws
name|PlacementConstraintParseException
block|{
comment|// do pre-process, validate input.
name|validate
argument_list|()
expr_stmt|;
name|String
name|op
init|=
name|nextToken
argument_list|()
decl_stmt|;
name|shouldHaveNext
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|AbstractConstraint
argument_list|>
name|constraints
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|hasMoreTokens
argument_list|()
condition|)
block|{
comment|// each child expression can be any valid form of
comment|// constraint expressions.
name|String
name|constraintStr
init|=
name|nextToken
argument_list|()
decl_stmt|;
name|AbstractConstraint
name|constraint
init|=
name|parseExpression
argument_list|(
name|constraintStr
argument_list|)
decl_stmt|;
name|constraints
operator|.
name|add
argument_list|(
name|constraint
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|AND
operator|.
name|equalsIgnoreCase
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|PlacementConstraints
operator|.
name|and
argument_list|(
name|constraints
operator|.
name|toArray
argument_list|(
operator|new
name|AbstractConstraint
index|[
name|constraints
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|OR
operator|.
name|equalsIgnoreCase
argument_list|(
name|op
argument_list|)
condition|)
block|{
return|return
name|PlacementConstraints
operator|.
name|or
argument_list|(
name|constraints
operator|.
name|toArray
argument_list|(
operator|new
name|AbstractConstraint
index|[
name|constraints
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Unexpected conjunction operator : "
operator|+
name|op
operator|+
literal|", expecting "
operator|+
name|AND
operator|+
literal|" or "
operator|+
name|OR
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * A helper class to encapsulate source tags and allocations in the    * placement specification.    */
DECL|class|SourceTags
specifier|public
specifier|static
specifier|final
class|class
name|SourceTags
block|{
DECL|field|tag
specifier|private
name|String
name|tag
decl_stmt|;
DECL|field|num
specifier|private
name|int
name|num
decl_stmt|;
DECL|method|SourceTags (String sourceTag, int number)
specifier|private
name|SourceTags
parameter_list|(
name|String
name|sourceTag
parameter_list|,
name|int
name|number
parameter_list|)
block|{
name|this
operator|.
name|tag
operator|=
name|sourceTag
expr_stmt|;
name|this
operator|.
name|num
operator|=
name|number
expr_stmt|;
block|}
DECL|method|getTag ()
specifier|public
name|String
name|getTag
parameter_list|()
block|{
return|return
name|this
operator|.
name|tag
return|;
block|}
DECL|method|getNumOfAllocations ()
specifier|public
name|int
name|getNumOfAllocations
parameter_list|()
block|{
return|return
name|this
operator|.
name|num
return|;
block|}
comment|/**      * Parses source tags from expression "sourceTags=numOfAllocations".      * @param expr      * @return source tags, see {@link SourceTags}      * @throws PlacementConstraintParseException      */
DECL|method|parseFrom (String expr)
specifier|public
specifier|static
name|SourceTags
name|parseFrom
parameter_list|(
name|String
name|expr
parameter_list|)
throws|throws
name|PlacementConstraintParseException
block|{
name|SourceTagsTokenizer
name|stt
init|=
operator|new
name|SourceTagsTokenizer
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|stt
operator|.
name|validate
argument_list|()
expr_stmt|;
comment|// During validation we already checked the number of parsed elements.
name|String
name|allocTag
init|=
name|stt
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|allocNum
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|stt
operator|.
name|nextElement
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SourceTags
argument_list|(
name|allocTag
argument_list|,
name|allocNum
argument_list|)
return|;
block|}
block|}
comment|/**    * Parses a given constraint expression to a {@link AbstractConstraint},    * this expression can be any valid form of constraint expressions.    *    * @param constraintStr expression string    * @return a parsed {@link AbstractConstraint}    * @throws PlacementConstraintParseException when given expression    * is malformed    */
DECL|method|parseExpression (String constraintStr)
specifier|public
specifier|static
name|AbstractConstraint
name|parseExpression
parameter_list|(
name|String
name|constraintStr
parameter_list|)
throws|throws
name|PlacementConstraintParseException
block|{
comment|// Try parse given expression with all allowed constraint parsers,
comment|// fails if no one could parse it.
name|TargetConstraintParser
name|tp
init|=
operator|new
name|TargetConstraintParser
argument_list|(
name|constraintStr
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|AbstractConstraint
argument_list|>
name|constraintOptional
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|tp
operator|.
name|tryParse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|constraintOptional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|CardinalityConstraintParser
name|cp
init|=
operator|new
name|CardinalityConstraintParser
argument_list|(
name|constraintStr
argument_list|)
decl_stmt|;
name|constraintOptional
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|cp
operator|.
name|tryParse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|constraintOptional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ConjunctionConstraintParser
name|jp
init|=
operator|new
name|ConjunctionConstraintParser
argument_list|(
name|constraintStr
argument_list|)
decl_stmt|;
name|constraintOptional
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|jp
operator|.
name|tryParse
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|constraintOptional
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Invalid constraint expression "
operator|+
name|constraintStr
argument_list|)
throw|;
block|}
block|}
return|return
name|constraintOptional
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Parses a placement constraint specification. A placement constraint spec    * is a composite expression which is composed by multiple sub constraint    * expressions delimited by ":". With following syntax:    *    *<p>Tag1=N1,P1:Tag2=N2,P2:...:TagN=Nn,Pn</p>    *    * where<b>TagN=Nn</b> is a key value pair to determine the source    * allocation tag and the number of allocations, such as:    *    *<p>foo=3</p>    *    * and where<b>Pn</b> can be any form of a valid constraint expression,    * such as:    *    *<ul>    *<li>in,node,foo,bar</li>    *<li>notin,node,foo,bar,1,2</li>    *<li>and(notin,node,foo:notin,node,bar)</li>    *</ul>    * @param expression expression string.    * @return a map of source tags to placement constraint mapping.    * @throws PlacementConstraintParseException    */
DECL|method|parsePlacementSpec ( String expression)
specifier|public
specifier|static
name|Map
argument_list|<
name|SourceTags
argument_list|,
name|PlacementConstraint
argument_list|>
name|parsePlacementSpec
parameter_list|(
name|String
name|expression
parameter_list|)
throws|throws
name|PlacementConstraintParseException
block|{
comment|// Respect insertion order.
name|Map
argument_list|<
name|SourceTags
argument_list|,
name|PlacementConstraint
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|PlacementConstraintParser
operator|.
name|ConstraintTokenizer
name|tokenizer
init|=
operator|new
name|PlacementConstraintParser
operator|.
name|MultipleConstraintsTokenizer
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|validate
argument_list|()
expr_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|specStr
init|=
name|tokenizer
operator|.
name|nextElement
argument_list|()
decl_stmt|;
comment|// each spec starts with sourceAllocationTag=numOfContainers and
comment|// followed by a constraint expression.
comment|// foo=4,Pn
name|String
index|[]
name|splitted
init|=
name|specStr
operator|.
name|split
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|EXPRESSION_VAL_DELIM
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitted
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|PlacementConstraintParseException
argument_list|(
literal|"Unexpected placement constraint expression "
operator|+
name|specStr
argument_list|)
throw|;
block|}
name|String
name|tagAlloc
init|=
name|splitted
index|[
literal|0
index|]
decl_stmt|;
name|SourceTags
name|st
init|=
name|SourceTags
operator|.
name|parseFrom
argument_list|(
name|tagAlloc
argument_list|)
decl_stmt|;
name|String
name|exprs
init|=
name|splitted
index|[
literal|1
index|]
decl_stmt|;
name|AbstractConstraint
name|constraint
init|=
name|PlacementConstraintParser
operator|.
name|parseExpression
argument_list|(
name|exprs
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|st
argument_list|,
name|constraint
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

