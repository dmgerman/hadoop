begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>  *<code>LightWeightResource</code> extends Resource to handle base resources such  * as memory and CPU.  * TODO: We have a long term plan to use AbstractResource when additional  * resource types are to be handled as well.  * This will be used to speed up internal calculation to avoid creating  * costly PB-backed Resource object:<code>ResourcePBImpl</code>  *</p>  *  *<p>  * Currently it models both<em>memory</em> and<em>CPU</em>.  *</p>  *  *<p>  * The unit for memory is megabytes. CPU is modeled with virtual cores (vcores),  * a unit for expressing parallelism. A node's capacity should be configured  * with virtual cores equal to its number of physical cores. A container should  * be requested with the number of cores it can saturate, i.e. the average  * number of threads it expects to have runnable at a time.  *</p>  *  *<p>  * Virtual cores take integer values and thus currently CPU-scheduling is very  * coarse. A complementary axis for CPU requests that represents processing  * power will likely be added in the future to enable finer-grained resource  * configuration.  *</p>  *  * @see Resource  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Unstable
DECL|class|LightWeightResource
specifier|public
class|class
name|LightWeightResource
extends|extends
name|Resource
block|{
DECL|field|memoryResInfo
specifier|private
name|ResourceInformation
name|memoryResInfo
decl_stmt|;
DECL|field|vcoresResInfo
specifier|private
name|ResourceInformation
name|vcoresResInfo
decl_stmt|;
DECL|method|LightWeightResource (long memory, int vcores)
specifier|public
name|LightWeightResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|vcores
parameter_list|)
block|{
name|int
name|numberOfKnownResourceTypes
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
name|initResourceInformations
argument_list|(
name|memory
argument_list|,
name|vcores
argument_list|,
name|numberOfKnownResourceTypes
argument_list|)
expr_stmt|;
if|if
condition|(
name|numberOfKnownResourceTypes
operator|>
literal|2
condition|)
block|{
name|ResourceInformation
index|[]
name|types
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|numberOfKnownResourceTypes
condition|;
name|i
operator|++
control|)
block|{
name|resources
index|[
name|i
index|]
operator|=
operator|new
name|ResourceInformation
argument_list|()
expr_stmt|;
name|ResourceInformation
operator|.
name|copy
argument_list|(
name|types
index|[
name|i
index|]
argument_list|,
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|LightWeightResource (long memory, int vcores, ResourceInformation[] source)
specifier|public
name|LightWeightResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|vcores
parameter_list|,
name|ResourceInformation
index|[]
name|source
parameter_list|)
block|{
name|int
name|numberOfKnownResourceTypes
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
name|initResourceInformations
argument_list|(
name|memory
argument_list|,
name|vcores
argument_list|,
name|numberOfKnownResourceTypes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|numberOfKnownResourceTypes
condition|;
name|i
operator|++
control|)
block|{
name|resources
index|[
name|i
index|]
operator|=
operator|new
name|ResourceInformation
argument_list|()
expr_stmt|;
name|ResourceInformation
operator|.
name|copy
argument_list|(
name|source
index|[
name|i
index|]
argument_list|,
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initResourceInformations (long memory, int vcores, int numberOfKnownResourceTypes)
specifier|private
name|void
name|initResourceInformations
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|vcores
parameter_list|,
name|int
name|numberOfKnownResourceTypes
parameter_list|)
block|{
name|this
operator|.
name|memoryResInfo
operator|=
name|newDefaultInformation
argument_list|(
name|MEMORY_URI
argument_list|,
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|this
operator|.
name|vcoresResInfo
operator|=
name|newDefaultInformation
argument_list|(
name|VCORES_URI
argument_list|,
name|VCORES
operator|.
name|getUnits
argument_list|()
argument_list|,
name|vcores
argument_list|)
expr_stmt|;
name|resources
operator|=
operator|new
name|ResourceInformation
index|[
name|numberOfKnownResourceTypes
index|]
expr_stmt|;
name|resources
index|[
name|MEMORY_INDEX
index|]
operator|=
name|memoryResInfo
expr_stmt|;
name|resources
index|[
name|VCORES_INDEX
index|]
operator|=
name|vcoresResInfo
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getMemory ()
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|castToIntSafely
argument_list|(
name|memoryResInfo
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setMemory (int memory)
specifier|public
name|void
name|setMemory
parameter_list|(
name|int
name|memory
parameter_list|)
block|{
name|this
operator|.
name|memoryResInfo
operator|.
name|setValue
argument_list|(
name|memory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMemorySize ()
specifier|public
name|long
name|getMemorySize
parameter_list|()
block|{
return|return
name|memoryResInfo
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setMemorySize (long memory)
specifier|public
name|void
name|setMemorySize
parameter_list|(
name|long
name|memory
parameter_list|)
block|{
name|this
operator|.
name|memoryResInfo
operator|.
name|setValue
argument_list|(
name|memory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVirtualCores ()
specifier|public
name|int
name|getVirtualCores
parameter_list|()
block|{
return|return
name|castToIntSafely
argument_list|(
name|vcoresResInfo
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setVirtualCores (int vcores)
specifier|public
name|void
name|setVirtualCores
parameter_list|(
name|int
name|vcores
parameter_list|)
block|{
name|this
operator|.
name|vcoresResInfo
operator|.
name|setValue
argument_list|(
name|vcores
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|Resource
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Resource
name|other
init|=
operator|(
name|Resource
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getMemorySize
argument_list|()
operator|!=
name|other
operator|.
name|getMemorySize
argument_list|()
operator|||
name|getVirtualCores
argument_list|()
operator|!=
name|other
operator|.
name|getVirtualCores
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|resources
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|ResourceInformation
index|[]
name|otherVectors
init|=
name|other
operator|.
name|getResources
argument_list|()
decl_stmt|;
if|if
condition|(
name|resources
operator|.
name|length
operator|!=
name|otherVectors
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|a
init|=
name|resources
index|[
name|i
index|]
decl_stmt|;
name|ResourceInformation
name|b
init|=
name|otherVectors
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|!=
name|b
operator|)
operator|&&
operator|(
operator|(
name|a
operator|==
literal|null
operator|)
operator|||
operator|!
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Resource other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Resource
name|other
parameter_list|)
block|{
comment|// compare memory and vcores first(in that order) to preserve
comment|// existing behavior.
if|if
condition|(
name|resources
operator|.
name|length
operator|<=
literal|2
condition|)
block|{
name|long
name|diff
init|=
name|this
operator|.
name|getMemorySize
argument_list|()
operator|-
name|other
operator|.
name|getMemorySize
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|getVirtualCores
argument_list|()
operator|-
name|other
operator|.
name|getVirtualCores
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|super
operator|.
name|compareTo
argument_list|(
name|other
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|47
decl_stmt|;
return|return
name|prime
operator|*
operator|(
name|prime
operator|+
name|Long
operator|.
name|hashCode
argument_list|(
name|getMemorySize
argument_list|()
argument_list|)
operator|)
operator|+
name|getVirtualCores
argument_list|()
return|;
block|}
block|}
end_class

end_unit

