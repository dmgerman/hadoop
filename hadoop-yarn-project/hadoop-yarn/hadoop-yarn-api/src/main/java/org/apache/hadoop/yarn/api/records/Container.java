begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManagementProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * {@code Container} represents an allocated resource in the cluster.  *<p>  * The {@code ResourceManager} is the sole authority to allocate any  * {@code Container} to applications. The allocated {@code Container}  * is always on a single node and has a unique {@link ContainerId}. It has  * a specific amount of {@link Resource} allocated.  *<p>  * It includes details such as:  *<ul>  *<li>{@link ContainerId} for the container, which is globally unique.</li>  *<li>  *     {@link NodeId} of the node on which it is allocated.  *</li>  *<li>HTTP uri of the node.</li>  *<li>{@link Resource} allocated to the container.</li>  *<li>{@link Priority} at which the container was allocated.</li>  *<li>  *     Container {@link Token} of the container, used to securely verify  *     authenticity of the allocation.  *</li>  *</ul>  *   * Typically, an {@code ApplicationMaster} receives the {@code Container}  * from the {@code ResourceManager} during resource-negotiation and then  * talks to the {@code NodeManager} to start/stop containers.  *   * @see ApplicationMasterProtocol#allocate(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest)  * @see ContainerManagementProtocol#startContainers(org.apache.hadoop.yarn.api.protocolrecords.StartContainersRequest)  * @see ContainerManagementProtocol#stopContainers(org.apache.hadoop.yarn.api.protocolrecords.StopContainersRequest)  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|Container
specifier|public
specifier|abstract
class|class
name|Container
implements|implements
name|Comparable
argument_list|<
name|Container
argument_list|>
block|{
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|newInstance (ContainerId containerId, NodeId nodeId, String nodeHttpAddress, Resource resource, Priority priority, Token containerToken)
specifier|public
specifier|static
name|Container
name|newInstance
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|nodeHttpAddress
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Token
name|containerToken
parameter_list|)
block|{
name|Container
name|container
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|container
operator|.
name|setNodeHttpAddress
argument_list|(
name|nodeHttpAddress
argument_list|)
expr_stmt|;
name|container
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|container
operator|.
name|setContainerToken
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
comment|/**    * Get the globally unique identifier for the container.    * @return globally unique identifier for the container    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getId ()
specifier|public
specifier|abstract
name|ContainerId
name|getId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setId (ContainerId id)
specifier|public
specifier|abstract
name|void
name|setId
parameter_list|(
name|ContainerId
name|id
parameter_list|)
function_decl|;
comment|/**    * Get the identifier of the node on which the container is allocated.    * @return identifier of the node on which the container is allocated    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getNodeId ()
specifier|public
specifier|abstract
name|NodeId
name|getNodeId
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setNodeId (NodeId nodeId)
specifier|public
specifier|abstract
name|void
name|setNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
function_decl|;
comment|/**    * Get the http uri of the node on which the container is allocated.    * @return http uri of the node on which the container is allocated    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getNodeHttpAddress ()
specifier|public
specifier|abstract
name|String
name|getNodeHttpAddress
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setNodeHttpAddress (String nodeHttpAddress)
specifier|public
specifier|abstract
name|void
name|setNodeHttpAddress
parameter_list|(
name|String
name|nodeHttpAddress
parameter_list|)
function_decl|;
comment|/**    * Get the<code>Resource</code> allocated to the container.    * @return<code>Resource</code> allocated to the container    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getResource ()
specifier|public
specifier|abstract
name|Resource
name|getResource
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setResource (Resource resource)
specifier|public
specifier|abstract
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
function_decl|;
comment|/**    * Get the<code>Priority</code> at which the<code>Container</code> was    * allocated.    * @return<code>Priority</code> at which the<code>Container</code> was    *         allocated    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getPriority ()
specifier|public
specifier|abstract
name|Priority
name|getPriority
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setPriority (Priority priority)
specifier|public
specifier|abstract
name|void
name|setPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
function_decl|;
comment|/**    * Get the<code>ContainerToken</code> for the container.    *<p><code>ContainerToken</code> is the security token used by the framework    * to verify authenticity of any<code>Container</code>.</p>    *    *<p>The<code>ResourceManager</code>, on container allocation provides a    * secure token which is verified by the<code>NodeManager</code> on    * container launch.</p>    *    *<p>Applications do not need to care about<code>ContainerToken</code>, they    * are transparently handled by the framework - the allocated    *<code>Container</code> includes the<code>ContainerToken</code>.</p>    *    * @see ApplicationMasterProtocol#allocate(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest)    * @see ContainerManagementProtocol#startContainers(org.apache.hadoop.yarn.api.protocolrecords.StartContainersRequest)    *    * @return<code>ContainerToken</code> for the container    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getContainerToken ()
specifier|public
specifier|abstract
name|Token
name|getContainerToken
parameter_list|()
function_decl|;
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setContainerToken (Token containerToken)
specifier|public
specifier|abstract
name|void
name|setContainerToken
parameter_list|(
name|Token
name|containerToken
parameter_list|)
function_decl|;
block|}
end_class

end_unit

