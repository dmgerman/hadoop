begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  * {@link ReservationRequest} represents the request made by an application to  * the {@link ResourceManager} to reserve {@link Resource}s.  *</p>  *   *<p>  * It includes:  *<ul>  *<li>{@link Resource} required for each request.</li>  *<li>  * Number of containers, of above specifications, which are required by the  * application.</li>  *<li>  * Concurrency that indicates the gang size of the request.</li>  *</ul>  *</p>  *   */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ReservationRequest
specifier|public
specifier|abstract
class|class
name|ReservationRequest
implements|implements
name|Comparable
argument_list|<
name|ReservationRequest
argument_list|>
block|{
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (Resource capability, int numContainers)
specifier|public
specifier|static
name|ReservationRequest
name|newInstance
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|capability
argument_list|,
name|numContainers
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|newInstance (Resource capability, int numContainers, int concurrency, long duration)
specifier|public
specifier|static
name|ReservationRequest
name|newInstance
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|int
name|concurrency
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
name|ReservationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ReservationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumContainers
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|request
operator|.
name|setConcurrency
argument_list|(
name|concurrency
argument_list|)
expr_stmt|;
name|request
operator|.
name|setDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ReservationRequestComparator
specifier|public
specifier|static
class|class
name|ReservationRequestComparator
implements|implements
name|java
operator|.
name|util
operator|.
name|Comparator
argument_list|<
name|ReservationRequest
argument_list|>
implements|,
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
DECL|method|compare (ReservationRequest r1, ReservationRequest r2)
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationRequest
name|r1
parameter_list|,
name|ReservationRequest
name|r2
parameter_list|)
block|{
comment|// Compare numContainers, concurrency and capability
name|int
name|ret
init|=
name|r1
operator|.
name|getNumContainers
argument_list|()
operator|-
name|r2
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|r1
operator|.
name|getConcurrency
argument_list|()
operator|-
name|r2
operator|.
name|getConcurrency
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|r1
operator|.
name|getCapability
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
comment|/**    * Get the {@link Resource} capability of the request.    *     * @return {@link Resource} capability of the request    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getCapability ()
specifier|public
specifier|abstract
name|Resource
name|getCapability
parameter_list|()
function_decl|;
comment|/**    * Set the {@link Resource} capability of the request    *     * @param capability {@link Resource} capability of the request    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setCapability (Resource capability)
specifier|public
specifier|abstract
name|void
name|setCapability
parameter_list|(
name|Resource
name|capability
parameter_list|)
function_decl|;
comment|/**    * Get the number of containers required with the given specifications.    *     * @return number of containers required with the given specifications    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getNumContainers ()
specifier|public
specifier|abstract
name|int
name|getNumContainers
parameter_list|()
function_decl|;
comment|/**    * Set the number of containers required with the given specifications    *     * @param numContainers number of containers required with the given    *          specifications    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setNumContainers (int numContainers)
specifier|public
specifier|abstract
name|void
name|setNumContainers
parameter_list|(
name|int
name|numContainers
parameter_list|)
function_decl|;
comment|/**    * Get the number of containers that need to be scheduled concurrently. The    * default value of 1 would fall back to the current non concurrency    * constraints on the scheduling behavior.    *     * @return the number of containers to be concurrently scheduled    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getConcurrency ()
specifier|public
specifier|abstract
name|int
name|getConcurrency
parameter_list|()
function_decl|;
comment|/**    * Set the number of containers that need to be scheduled concurrently. The    * default value of 1 would fall back to the current non concurrency    * constraints on the scheduling behavior.    *     * @param numContainers the number of containers to be concurrently scheduled    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setConcurrency (int numContainers)
specifier|public
specifier|abstract
name|void
name|setConcurrency
parameter_list|(
name|int
name|numContainers
parameter_list|)
function_decl|;
comment|/**    * Get the duration in milliseconds for which the resource is required. A    * default value of -1, indicates an unspecified lease duration, and fallback    * to current behavior.    *     * @return the duration in milliseconds for which the resource is required    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|getDuration ()
specifier|public
specifier|abstract
name|long
name|getDuration
parameter_list|()
function_decl|;
comment|/**    * Set the duration in milliseconds for which the resource is required.    *     * @param duration the duration in milliseconds for which the resource is    *          required    */
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|setDuration (long duration)
specifier|public
specifier|abstract
name|void
name|setDuration
parameter_list|(
name|long
name|duration
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|2153
decl_stmt|;
name|int
name|result
init|=
literal|2459
decl_stmt|;
name|Resource
name|capability
init|=
name|getCapability
argument_list|()
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|capability
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|capability
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getNumContainers
argument_list|()
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getConcurrency
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ReservationRequest
name|other
init|=
operator|(
name|ReservationRequest
operator|)
name|obj
decl_stmt|;
name|Resource
name|capability
init|=
name|getCapability
argument_list|()
decl_stmt|;
if|if
condition|(
name|capability
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|getCapability
argument_list|()
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|capability
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getCapability
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getNumContainers
argument_list|()
operator|!=
name|other
operator|.
name|getNumContainers
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getConcurrency
argument_list|()
operator|!=
name|other
operator|.
name|getConcurrency
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (ReservationRequest other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|ReservationRequest
name|other
parameter_list|)
block|{
name|int
name|numContainersComparison
init|=
name|this
operator|.
name|getNumContainers
argument_list|()
operator|-
name|other
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
if|if
condition|(
name|numContainersComparison
operator|==
literal|0
condition|)
block|{
name|int
name|concurrencyComparison
init|=
name|this
operator|.
name|getConcurrency
argument_list|()
operator|-
name|other
operator|.
name|getConcurrency
argument_list|()
decl_stmt|;
if|if
condition|(
name|concurrencyComparison
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|getCapability
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getCapability
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|concurrencyComparison
return|;
block|}
block|}
else|else
block|{
return|return
name|numContainersComparison
return|;
block|}
block|}
block|}
end_class

end_unit

