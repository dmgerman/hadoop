begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.protocolrecords
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ContainerManagementProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  *<p>  * The request which contains a list of {@link StartContainerRequest} sent by  * the<code>ApplicationMaster</code> to the<code>NodeManager</code> to  *<em>start</em> containers.  *</p>  *   *<p>  * In each {@link StartContainerRequest}, the<code>ApplicationMaster</code> has  * to provide details such as allocated resource capability, security tokens (if  * enabled), command to be executed to start the container, environment for the  * process, necessary binaries/jar/shared-objects etc. via the  * {@link ContainerLaunchContext}.  *</p>  *   * @see ContainerManagementProtocol#startContainers(StartContainersRequest)  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|StartContainersRequest
specifier|public
specifier|abstract
class|class
name|StartContainersRequest
block|{
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance ( List<StartContainerRequest> requests)
specifier|public
specifier|static
name|StartContainersRequest
name|newInstance
parameter_list|(
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|requests
parameter_list|)
block|{
name|StartContainersRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|StartContainersRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setStartContainerRequests
argument_list|(
name|requests
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Get a list of {@link StartContainerRequest} to start containers.    * @return a list of {@link StartContainerRequest} to start containers.    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getStartContainerRequests ()
specifier|public
specifier|abstract
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|getStartContainerRequests
parameter_list|()
function_decl|;
comment|/**    * Set a list of {@link StartContainerRequest} to start containers.    * @param request a list of {@link StartContainerRequest} to start containers    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setStartContainerRequests ( List<StartContainerRequest> request)
specifier|public
specifier|abstract
name|void
name|setStartContainerRequests
parameter_list|(
name|List
argument_list|<
name|StartContainerRequest
argument_list|>
name|request
parameter_list|)
function_decl|;
block|}
end_class

end_unit

