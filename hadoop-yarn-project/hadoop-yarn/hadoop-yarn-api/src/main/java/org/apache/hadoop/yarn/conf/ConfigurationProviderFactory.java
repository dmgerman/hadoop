begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
comment|/**  * Factory for {@link ConfigurationProvider} implementations.  */
DECL|class|ConfigurationProviderFactory
specifier|public
class|class
name|ConfigurationProviderFactory
block|{
comment|/**    * Creates an instance of {@link ConfigurationProvider} using given    * configuration.    * @param bootstrapConf    * @return configurationProvider    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|static
name|ConfigurationProvider
DECL|method|getConfigurationProvider (Configuration bootstrapConf)
name|getConfigurationProvider
parameter_list|(
name|Configuration
name|bootstrapConf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationProvider
argument_list|>
name|defaultProviderClass
decl_stmt|;
try|try
block|{
name|defaultProviderClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|ConfigurationProvider
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid default configuration provider class"
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|ConfigurationProvider
name|configurationProvider
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|bootstrapConf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
name|defaultProviderClass
argument_list|,
name|ConfigurationProvider
operator|.
name|class
argument_list|)
argument_list|,
name|bootstrapConf
argument_list|)
decl_stmt|;
return|return
name|configurationProvider
return|;
block|}
block|}
end_class

end_unit

