begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Stable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * The priority assigned to a ResourceRequest or Application or Container   * allocation   *  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Stable
DECL|class|Priority
specifier|public
specifier|abstract
class|class
name|Priority
implements|implements
name|Comparable
argument_list|<
name|Priority
argument_list|>
block|{
DECL|field|UNDEFINED
specifier|public
specifier|static
specifier|final
name|Priority
name|UNDEFINED
init|=
name|newInstance
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|newInstance (int p)
specifier|public
specifier|static
name|Priority
name|newInstance
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|priority
operator|.
name|setPriority
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|priority
return|;
block|}
comment|/**    * Get the assigned priority    * @return the assigned priority    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|getPriority ()
specifier|public
specifier|abstract
name|int
name|getPriority
parameter_list|()
function_decl|;
comment|/**    * Set the assigned priority    * @param priority the assigned priority    */
annotation|@
name|Public
annotation|@
name|Stable
DECL|method|setPriority (int priority)
specifier|public
specifier|abstract
name|void
name|setPriority
parameter_list|(
name|int
name|priority
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|517861
decl_stmt|;
name|int
name|result
init|=
literal|9511
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getPriority
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Priority
name|other
init|=
operator|(
name|Priority
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|getPriority
argument_list|()
operator|!=
name|other
operator|.
name|getPriority
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (Priority other)
specifier|public
name|int
name|compareTo
parameter_list|(
name|Priority
name|other
parameter_list|)
block|{
return|return
name|this
operator|.
name|getPriority
argument_list|()
operator|-
name|other
operator|.
name|getPriority
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{Priority: "
operator|+
name|getPriority
argument_list|()
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

