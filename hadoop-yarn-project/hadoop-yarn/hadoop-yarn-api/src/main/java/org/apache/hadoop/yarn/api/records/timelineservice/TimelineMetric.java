begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  * This class contains the information of a metric that is related to some  * entity. Metric can either be a time series or single value.  */
end_comment

begin_class
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"metric"
argument_list|)
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|NONE
argument_list|)
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|TimelineMetric
specifier|public
class|class
name|TimelineMetric
block|{
comment|/**    * Type of metric.    */
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enumConstant|SINGLE_VALUE
name|SINGLE_VALUE
block|,
DECL|enumConstant|TIME_SERIES
name|TIME_SERIES
block|}
DECL|field|type
specifier|private
name|Type
name|type
decl_stmt|;
DECL|field|id
specifier|private
name|String
name|id
decl_stmt|;
DECL|field|reverseComparator
specifier|private
name|Comparator
argument_list|<
name|Long
argument_list|>
name|reverseComparator
init|=
operator|new
name|Comparator
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Long
name|l1
parameter_list|,
name|Long
name|l2
parameter_list|)
block|{
return|return
name|l2
operator|.
name|compareTo
argument_list|(
name|l1
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|values
specifier|private
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|values
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|reverseComparator
argument_list|)
decl_stmt|;
DECL|method|TimelineMetric ()
specifier|public
name|TimelineMetric
parameter_list|()
block|{
name|this
argument_list|(
name|Type
operator|.
name|SINGLE_VALUE
argument_list|)
expr_stmt|;
block|}
DECL|method|TimelineMetric (Type type)
specifier|public
name|TimelineMetric
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"type"
argument_list|)
DECL|method|getType ()
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
DECL|method|setType (Type metricType)
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|metricType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|metricType
expr_stmt|;
block|}
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"id"
argument_list|)
DECL|method|getId ()
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
DECL|method|setId (String metricId)
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|metricId
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|metricId
expr_stmt|;
block|}
comment|// required by JAXB
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"values"
argument_list|)
DECL|method|getValuesJAXB ()
specifier|public
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|getValuesJAXB
parameter_list|()
block|{
return|return
name|values
return|;
block|}
DECL|method|getValues ()
specifier|public
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
DECL|method|setValues (Map<Long, Number> vals)
specifier|public
name|void
name|setValues
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|vals
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|SINGLE_VALUE
condition|)
block|{
name|overwrite
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|values
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
argument_list|(
name|reverseComparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|values
operator|.
name|putAll
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|addValues (Map<Long, Number> vals)
specifier|public
name|void
name|addValues
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|vals
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|SINGLE_VALUE
condition|)
block|{
name|overwrite
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|values
operator|.
name|putAll
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addValue (long timestamp, Number value)
specifier|public
name|void
name|addValue
parameter_list|(
name|long
name|timestamp
parameter_list|,
name|Number
name|value
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|SINGLE_VALUE
condition|)
block|{
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|put
argument_list|(
name|timestamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|overwrite (Map<Long, Number> vals)
specifier|private
name|void
name|overwrite
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|Number
argument_list|>
name|vals
parameter_list|)
block|{
if|if
condition|(
name|vals
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Values cannot contain more than one point in "
operator|+
name|Type
operator|.
name|SINGLE_VALUE
operator|+
literal|" mode"
argument_list|)
throw|;
block|}
name|this
operator|.
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|.
name|putAll
argument_list|(
name|vals
argument_list|)
expr_stmt|;
block|}
DECL|method|isValid ()
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|(
name|id
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|id
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|type
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Only check if type and id are equal
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|TimelineMetric
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|TimelineMetric
name|m
init|=
operator|(
name|TimelineMetric
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|id
operator|.
name|equals
argument_list|(
name|m
operator|.
name|id
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|type
operator|!=
name|m
operator|.
name|type
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|str
init|=
literal|"{id:"
operator|+
name|id
operator|+
literal|", type:"
operator|+
name|type
decl_stmt|;
if|if
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|str
operator|+=
literal|", values:"
operator|+
name|values
expr_stmt|;
block|}
name|str
operator|+=
literal|"}"
expr_stmt|;
return|return
name|str
return|;
block|}
block|}
end_class

end_unit

