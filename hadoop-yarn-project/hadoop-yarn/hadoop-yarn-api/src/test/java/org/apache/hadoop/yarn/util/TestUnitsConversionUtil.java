begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestUnitsConversionUtil
specifier|public
class|class
name|TestUnitsConversionUtil
block|{
annotation|@
name|Test
DECL|method|testUnitsConversion ()
specifier|public
name|void
name|testUnitsConversion
parameter_list|()
block|{
name|int
name|value
init|=
literal|5
decl_stmt|;
name|String
name|fromUnit
init|=
literal|""
decl_stmt|;
name|long
name|test
init|=
name|value
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"pico test failed"
argument_list|,
name|value
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"p"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nano test failed"
argument_list|,
name|value
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"n"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"micro test failed"
argument_list|,
name|value
operator|*
literal|1000L
operator|*
literal|1000L
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"u"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"milli test failed"
argument_list|,
name|value
operator|*
literal|1000L
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"m"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|=
name|value
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
expr_stmt|;
name|fromUnit
operator|=
literal|""
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"kilo test failed"
argument_list|,
name|test
operator|/
literal|1000L
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"k"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"mega test failed"
argument_list|,
name|test
operator|/
operator|(
literal|1000L
operator|*
literal|1000L
operator|)
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"M"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"giga test failed"
argument_list|,
name|test
operator|/
operator|(
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|)
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"G"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"tera test failed"
argument_list|,
name|test
operator|/
operator|(
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|)
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"T"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"peta test failed"
argument_list|,
name|test
operator|/
operator|(
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|)
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|fromUnit
argument_list|,
literal|"P"
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nano to pico test failed"
argument_list|,
name|value
operator|*
literal|1000L
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"n"
argument_list|,
literal|"p"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"mega to giga test failed"
argument_list|,
name|value
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"M"
argument_list|,
literal|"G"
argument_list|,
name|value
operator|*
literal|1000L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mi to Gi test failed"
argument_list|,
name|value
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"Mi"
argument_list|,
literal|"Gi"
argument_list|,
name|value
operator|*
literal|1024L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mi to Ki test failed"
argument_list|,
name|value
operator|*
literal|1024
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"Mi"
argument_list|,
literal|"Ki"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Ki to base units test failed"
argument_list|,
literal|5
operator|*
literal|1024
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"Ki"
argument_list|,
literal|""
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mi to k test failed"
argument_list|,
literal|1073741
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"Mi"
argument_list|,
literal|"k"
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"M to Mi test failed"
argument_list|,
literal|953
argument_list|,
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"M"
argument_list|,
literal|"Mi"
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverflow ()
specifier|public
name|void
name|testOverflow
parameter_list|()
block|{
name|long
name|test
init|=
literal|5
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
operator|*
literal|1000L
decl_stmt|;
try|try
block|{
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"P"
argument_list|,
literal|"p"
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"this operation should result in an overflow"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
empty_stmt|;
comment|// do nothing
block|}
try|try
block|{
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
literal|"m"
argument_list|,
literal|"p"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"this operation should result in an overflow"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
empty_stmt|;
comment|// do nothing
block|}
block|}
annotation|@
name|Test
DECL|method|testCompare ()
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
name|String
name|unitA
init|=
literal|"P"
decl_stmt|;
name|long
name|valueA
init|=
literal|1
decl_stmt|;
name|String
name|unitB
init|=
literal|"p"
decl_stmt|;
name|long
name|valueB
init|=
literal|2
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
name|valueA
argument_list|,
name|unitB
argument_list|,
name|valueB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitB
argument_list|,
name|valueB
argument_list|,
name|unitA
argument_list|,
name|valueA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
name|valueA
argument_list|,
name|unitA
argument_list|,
name|valueA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
name|valueA
argument_list|,
name|unitA
argument_list|,
name|valueB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
name|valueB
argument_list|,
name|unitA
argument_list|,
name|valueA
argument_list|)
argument_list|)
expr_stmt|;
name|unitB
operator|=
literal|"T"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
name|valueA
argument_list|,
name|unitB
argument_list|,
name|valueB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitB
argument_list|,
name|valueB
argument_list|,
name|unitA
argument_list|,
name|valueA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
name|valueA
argument_list|,
name|unitB
argument_list|,
literal|1000L
argument_list|)
argument_list|)
expr_stmt|;
name|unitA
operator|=
literal|"p"
expr_stmt|;
name|unitB
operator|=
literal|"n"
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
name|valueA
argument_list|,
name|unitB
argument_list|,
name|valueB
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitB
argument_list|,
name|valueB
argument_list|,
name|unitA
argument_list|,
name|valueA
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|UnitsConversionUtil
operator|.
name|compare
argument_list|(
name|unitA
argument_list|,
literal|1000L
argument_list|,
name|unitB
argument_list|,
name|valueA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

