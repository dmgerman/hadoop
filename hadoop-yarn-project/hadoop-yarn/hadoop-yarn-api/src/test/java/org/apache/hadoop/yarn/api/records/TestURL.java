begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test for the URL class. */
end_comment

begin_class
DECL|class|TestURL
class|class
name|TestURL
block|{
annotation|@
name|Test
DECL|method|testConversion ()
name|void
name|testConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|IPC_RECORD_FACTORY_CLASS
argument_list|,
name|RecordFactoryForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|pathStrs
init|=
operator|new
name|String
index|[]
block|{
literal|"/"
block|,
literal|"."
block|,
literal|"foo/bar"
block|,
literal|"foo"
block|,
literal|"/foo/bar/baz"
block|,
literal|"moo://bar/baz"
block|,
literal|"moo://bar:123/baz"
block|,
literal|"moo:///foo"
block|,
literal|"moo://foo@bar:123/baz/foo"
block|,
literal|"moo://foo@bar/baz/foo"
block|,
literal|"moo://foo@bar"
block|,
literal|"moo://foo:123"
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|pathStrs
control|)
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|path
argument_list|,
name|URL
operator|.
name|fromPath
argument_list|(
name|path
argument_list|,
name|conf
argument_list|)
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/foo/bar#baz"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|URL
operator|.
name|fromPath
argument_list|(
name|p
argument_list|,
name|conf
argument_list|)
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Record factory that instantiates URLs for this test. */
DECL|class|RecordFactoryForTest
specifier|public
specifier|static
class|class
name|RecordFactoryForTest
implements|implements
name|RecordFactory
block|{
DECL|field|SELF
specifier|private
specifier|static
specifier|final
name|RecordFactoryForTest
name|SELF
init|=
operator|new
name|RecordFactoryForTest
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|newRecordInstance (Class<T> clazz)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|newRecordInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
operator|(
name|T
operator|)
operator|new
name|URLForTest
argument_list|()
return|;
block|}
DECL|method|get ()
specifier|public
specifier|static
name|RecordFactory
name|get
parameter_list|()
block|{
return|return
name|SELF
return|;
block|}
block|}
comment|/** URL fake for this test; sidesteps proto-URL dependency. */
DECL|class|URLForTest
specifier|public
specifier|static
class|class
name|URLForTest
extends|extends
name|URL
block|{
DECL|field|scheme
DECL|field|userInfo
DECL|field|host
DECL|field|file
specifier|private
name|String
name|scheme
decl_stmt|,
name|userInfo
decl_stmt|,
name|host
decl_stmt|,
name|file
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
decl_stmt|;
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
DECL|method|setScheme (String scheme)
specifier|public
name|void
name|setScheme
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
DECL|method|getUserInfo ()
specifier|public
name|String
name|getUserInfo
parameter_list|()
block|{
return|return
name|userInfo
return|;
block|}
DECL|method|setUserInfo (String userInfo)
specifier|public
name|void
name|setUserInfo
parameter_list|(
name|String
name|userInfo
parameter_list|)
block|{
name|this
operator|.
name|userInfo
operator|=
name|userInfo
expr_stmt|;
block|}
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|getFile ()
specifier|public
name|String
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
DECL|method|setFile (String file)
specifier|public
name|void
name|setFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|setPort (int port)
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

