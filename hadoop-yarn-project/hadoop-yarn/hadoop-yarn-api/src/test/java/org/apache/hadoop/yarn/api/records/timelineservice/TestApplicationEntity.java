begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.timelineservice
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Various tests for the ApplicationEntity class.  *  */
end_comment

begin_class
DECL|class|TestApplicationEntity
specifier|public
class|class
name|TestApplicationEntity
block|{
annotation|@
name|Test
DECL|method|testIsApplicationEntity ()
specifier|public
name|void
name|testIsApplicationEntity
parameter_list|()
block|{
name|TimelineEntity
name|te
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|te
operator|.
name|setType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ApplicationEntity
operator|.
name|isApplicationEntity
argument_list|(
name|te
argument_list|)
argument_list|)
expr_stmt|;
name|te
operator|=
literal|null
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|ApplicationEntity
operator|.
name|isApplicationEntity
argument_list|(
name|te
argument_list|)
argument_list|)
expr_stmt|;
name|te
operator|=
operator|new
name|TimelineEntity
argument_list|()
expr_stmt|;
name|te
operator|.
name|setType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_CLUSTER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|ApplicationEntity
operator|.
name|isApplicationEntity
argument_list|(
name|te
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationEvent ()
specifier|public
name|void
name|testGetApplicationEvent
parameter_list|()
block|{
name|TimelineEntity
name|te
init|=
literal|null
decl_stmt|;
name|TimelineEvent
name|tEvent
init|=
name|ApplicationEntity
operator|.
name|getApplicationEvent
argument_list|(
name|te
argument_list|,
literal|"no event"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tEvent
argument_list|)
expr_stmt|;
name|te
operator|=
operator|new
name|TimelineEntity
argument_list|()
expr_stmt|;
name|te
operator|.
name|setType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_APPLICATION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEvent
name|event
init|=
operator|new
name|TimelineEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|setId
argument_list|(
literal|"start_event"
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|te
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|tEvent
operator|=
name|ApplicationEntity
operator|.
name|getApplicationEvent
argument_list|(
name|te
argument_list|,
literal|"start_event"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|event
argument_list|,
name|tEvent
argument_list|)
expr_stmt|;
name|te
operator|=
operator|new
name|TimelineEntity
argument_list|()
expr_stmt|;
name|te
operator|.
name|setType
argument_list|(
name|TimelineEntityType
operator|.
name|YARN_CLUSTER
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|TimelineEvent
argument_list|()
expr_stmt|;
name|event
operator|.
name|setId
argument_list|(
literal|"start_event_cluster"
argument_list|)
expr_stmt|;
name|event
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|te
operator|.
name|addEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|tEvent
operator|=
name|ApplicationEntity
operator|.
name|getApplicationEvent
argument_list|(
name|te
argument_list|,
literal|"start_event_cluster"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|tEvent
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

