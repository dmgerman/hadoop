begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * The class to test {@link Resource}.  */
end_comment

begin_class
DECL|class|TestResource
class|class
name|TestResource
block|{
annotation|@
name|Test
DECL|method|testCastToIntSafely ()
name|void
name|testCastToIntSafely
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Resource
operator|.
name|castToIntSafely
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|castToIntSafely
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Resource
operator|.
name|castToIntSafely
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Resource
operator|.
name|castToIntSafely
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
argument_list|,
literal|"Cast to Integer.MAX_VALUE if the long is greater than "
operator|+
literal|"Integer.MAX_VALUE"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Resource
operator|.
name|castToIntSafely
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
literal|"Cast to Integer.MAX_VALUE if the long is greater than "
operator|+
literal|"Integer.MAX_VALUE"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

