begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NoRouteToHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|RMProxy
specifier|public
class|class
name|RMProxy
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMProxy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|RMProxy ()
specifier|protected
name|RMProxy
parameter_list|()
block|{}
comment|/**    * Verify the passed protocol is supported.    */
annotation|@
name|Private
DECL|method|checkAllowedProtocols (Class<?> protocol)
specifier|protected
name|void
name|checkAllowedProtocols
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|)
block|{}
comment|/**    * Get the ResourceManager address from the provided Configuration for the    * given protocol.    */
annotation|@
name|Private
DECL|method|getRMAddress ( YarnConfiguration conf, Class<?> protocol)
specifier|protected
name|InetSocketAddress
name|getRMAddress
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"This method should be invoked "
operator|+
literal|"from an instance of ClientRMProxy or ServerRMProxy"
argument_list|)
throw|;
block|}
comment|/**    * Create a proxy for the specified protocol. For non-HA,    * this is a direct connection to the ResourceManager address. When HA is    * enabled, the proxy handles the failover between the ResourceManagers as    * well.    */
annotation|@
name|Private
DECL|method|createRMProxy (final Configuration configuration, final Class<T> protocol, RMProxy instance)
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createRMProxy
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|RMProxy
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|(
name|configuration
operator|instanceof
name|YarnConfiguration
operator|)
condition|?
operator|(
name|YarnConfiguration
operator|)
name|configuration
else|:
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|RetryPolicy
name|retryPolicy
init|=
name|createRetryPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|RMFailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|instance
operator|.
name|createRMFailoverProxyProvider
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|protocol
argument_list|,
name|provider
argument_list|,
name|retryPolicy
argument_list|)
return|;
block|}
else|else
block|{
name|InetSocketAddress
name|rmAddress
init|=
name|instance
operator|.
name|getRMAddress
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|rmAddress
argument_list|)
expr_stmt|;
name|T
name|proxy
init|=
name|RMProxy
operator|.
expr|<
name|T
operator|>
name|getProxy
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|rmAddress
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|protocol
argument_list|,
name|proxy
argument_list|,
name|retryPolicy
argument_list|)
return|;
block|}
block|}
comment|/**    * @deprecated    * This method is deprecated and is not used by YARN internally any more.    * To create a proxy to the RM, use ClientRMProxy#createRMProxy or    * ServerRMProxy#createRMProxy.    *    * Create a proxy to the ResourceManager at the specified address.    *    * @param conf Configuration to generate retry policy    * @param protocol Protocol for the proxy    * @param rmAddress Address of the ResourceManager    * @param<T> Type information of the proxy    * @return Proxy to the RM    * @throws IOException    */
annotation|@
name|Deprecated
DECL|method|createRMProxy (final Configuration conf, final Class<T> protocol, InetSocketAddress rmAddress)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createRMProxy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|InetSocketAddress
name|rmAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|RetryPolicy
name|retryPolicy
init|=
name|createRetryPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|T
name|proxy
init|=
name|RMProxy
operator|.
expr|<
name|T
operator|>
name|getProxy
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|rmAddress
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|rmAddress
argument_list|)
expr_stmt|;
return|return
operator|(
name|T
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|protocol
argument_list|,
name|proxy
argument_list|,
name|retryPolicy
argument_list|)
return|;
block|}
comment|/**    * Get a proxy to the RM at the specified address. To be used to create a    * RetryProxy.    */
annotation|@
name|Private
DECL|method|getProxy (final Configuration conf, final Class<T> protocol, final InetSocketAddress rmAddress)
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getProxy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
specifier|final
name|InetSocketAddress
name|rmAddress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
operator|.
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**    * Helper method to create FailoverProxyProvider.    */
DECL|method|createRMFailoverProxyProvider ( Configuration conf, Class<T> protocol)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|RMFailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|createRMFailoverProxyProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|RMFailoverProxyProvider
argument_list|<
name|T
argument_list|>
argument_list|>
name|defaultProviderClass
decl_stmt|;
try|try
block|{
name|defaultProviderClass
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RMFailoverProxyProvider
argument_list|<
name|T
argument_list|>
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid default failover provider class"
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|RMFailoverProxyProvider
argument_list|<
name|T
argument_list|>
name|provider
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_PROXY_PROVIDER
argument_list|,
name|defaultProviderClass
argument_list|,
name|RMFailoverProxyProvider
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|provider
operator|.
name|init
argument_list|(
name|conf
argument_list|,
operator|(
name|RMProxy
argument_list|<
name|T
argument_list|>
operator|)
name|this
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
return|return
name|provider
return|;
block|}
comment|/**    * Fetch retry policy from Configuration    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|createRetryPolicy (Configuration conf)
specifier|public
specifier|static
name|RetryPolicy
name|createRetryPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|long
name|rmConnectWaitMS
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
argument_list|)
decl_stmt|;
name|long
name|rmConnectionRetryIntervalMS
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
argument_list|)
decl_stmt|;
name|boolean
name|waitForEver
init|=
operator|(
name|rmConnectWaitMS
operator|==
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|waitForEver
condition|)
block|{
if|if
condition|(
name|rmConnectWaitMS
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid Configuration. "
operator|+
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
operator|+
literal|" can be -1, but can not be other negative numbers"
argument_list|)
throw|;
block|}
comment|// try connect once
if|if
condition|(
name|rmConnectWaitMS
operator|<
name|rmConnectionRetryIntervalMS
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
operator|+
literal|" is smaller than "
operator|+
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
operator|+
literal|". Only try connect once."
argument_list|)
expr_stmt|;
name|rmConnectWaitMS
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// Handle HA case first
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
specifier|final
name|long
name|failoverSleepBaseMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_SLEEPTIME_BASE_MS
argument_list|,
name|rmConnectionRetryIntervalMS
argument_list|)
decl_stmt|;
specifier|final
name|long
name|failoverSleepMaxMs
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_SLEEPTIME_MAX_MS
argument_list|,
name|rmConnectionRetryIntervalMS
argument_list|)
decl_stmt|;
name|int
name|maxFailoverAttempts
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_MAX_ATTEMPTS
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxFailoverAttempts
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|waitForEver
condition|)
block|{
name|maxFailoverAttempts
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
else|else
block|{
name|maxFailoverAttempts
operator|=
call|(
name|int
call|)
argument_list|(
name|rmConnectWaitMS
operator|/
name|failoverSleepBaseMs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RetryPolicies
operator|.
name|failoverOnNetworkException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|maxFailoverAttempts
argument_list|,
name|failoverSleepBaseMs
argument_list|,
name|failoverSleepMaxMs
argument_list|)
return|;
block|}
if|if
condition|(
name|waitForEver
condition|)
block|{
return|return
name|RetryPolicies
operator|.
name|RETRY_FOREVER
return|;
block|}
if|if
condition|(
name|rmConnectionRetryIntervalMS
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Invalid Configuration. "
operator|+
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
operator|+
literal|" should not be negative."
argument_list|)
throw|;
block|}
name|RetryPolicy
name|retryPolicy
init|=
name|RetryPolicies
operator|.
name|retryUpToMaximumTimeWithFixedSleep
argument_list|(
name|rmConnectWaitMS
argument_list|,
name|rmConnectionRetryIntervalMS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|exceptionToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|ConnectException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|NoRouteToHostException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|UnknownHostException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|ConnectTimeoutException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|RetriableException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|SocketException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
return|return
name|RetryPolicies
operator|.
name|retryByException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|exceptionToPolicyMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

