begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An implementation of the interface will provide authorization related  * information and enforce permission check. It is excepted that any of the  * methods defined in this interface should be non-blocking call and should not  * involve expensive computation as these method could be invoked in RPC.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|YarnAuthorizationProvider
specifier|public
specifier|abstract
class|class
name|YarnAuthorizationProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|YarnAuthorizationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|authorizer
specifier|private
specifier|static
name|YarnAuthorizationProvider
name|authorizer
init|=
literal|null
decl_stmt|;
DECL|method|getInstance (Configuration conf)
specifier|public
specifier|static
name|YarnAuthorizationProvider
name|getInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
synchronized|synchronized
init|(
name|YarnAuthorizationProvider
operator|.
name|class
init|)
block|{
if|if
condition|(
name|authorizer
operator|==
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|authorizerClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_AUTHORIZATION_PROVIDER
argument_list|,
name|ConfiguredYarnAuthorizer
operator|.
name|class
argument_list|)
decl_stmt|;
name|authorizer
operator|=
operator|(
name|YarnAuthorizationProvider
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|authorizerClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|authorizer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|authorizerClass
operator|.
name|getName
argument_list|()
operator|+
literal|" is instantiated."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|authorizer
return|;
block|}
comment|/**    * Destroy the {@link YarnAuthorizationProvider} instance.    * This method is called only in Tests.    */
annotation|@
name|VisibleForTesting
DECL|method|destroy ()
specifier|public
specifier|static
name|void
name|destroy
parameter_list|()
block|{
synchronized|synchronized
init|(
name|YarnAuthorizationProvider
operator|.
name|class
init|)
block|{
if|if
condition|(
name|authorizer
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|authorizer
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is destroyed."
argument_list|)
expr_stmt|;
name|authorizer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Initialize the provider. Invoked on daemon startup. DefaultYarnAuthorizer is    * initialized based on configurations.    */
DECL|method|init (Configuration conf)
specifier|public
specifier|abstract
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
function_decl|;
comment|/**    * Check if user has the permission to access the target object.    *     * @param accessRequest    *          the request object which contains all the access context info.    * @return true if user can access the object, otherwise false.    */
DECL|method|checkPermission (AccessRequest accessRequest)
specifier|public
specifier|abstract
name|boolean
name|checkPermission
parameter_list|(
name|AccessRequest
name|accessRequest
parameter_list|)
function_decl|;
comment|/**    * Set permissions for the target object.    *    * @param permissions    *        A list of permissions on the target object.    * @param ugi User who sets the permissions.    */
DECL|method|setPermission (List<Permission> permissions, UserGroupInformation ugi)
specifier|public
specifier|abstract
name|void
name|setPermission
parameter_list|(
name|List
argument_list|<
name|Permission
argument_list|>
name|permissions
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
function_decl|;
comment|/**    * Set a list of users/groups who have admin access    *     * @param acls  users/groups who have admin access    * @param ugi User who sets the admin acls.    */
DECL|method|setAdmins (AccessControlList acls, UserGroupInformation ugi)
specifier|public
specifier|abstract
name|void
name|setAdmins
parameter_list|(
name|AccessControlList
name|acls
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
function_decl|;
comment|/**    * Check if the user is an admin.    *     * @param ugi the user to be determined if it is an admin    * @return true if the given user is an admin    */
DECL|method|isAdmin (UserGroupInformation ugi)
specifier|public
specifier|abstract
name|boolean
name|isAdmin
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
function_decl|;
block|}
end_class

end_unit

