begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_class
DECL|class|RMNodeLabel
specifier|public
class|class
name|RMNodeLabel
implements|implements
name|Comparable
argument_list|<
name|RMNodeLabel
argument_list|>
block|{
DECL|field|resource
specifier|private
name|Resource
name|resource
decl_stmt|;
DECL|field|numActiveNMs
specifier|private
name|int
name|numActiveNMs
decl_stmt|;
DECL|field|labelName
specifier|private
name|String
name|labelName
decl_stmt|;
DECL|field|nodeIds
specifier|private
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
decl_stmt|;
DECL|field|exclusive
specifier|private
name|boolean
name|exclusive
decl_stmt|;
DECL|field|nodeLabel
specifier|private
name|NodeLabel
name|nodeLabel
decl_stmt|;
DECL|method|RMNodeLabel (NodeLabel nodeLabel)
specifier|public
name|RMNodeLabel
parameter_list|(
name|NodeLabel
name|nodeLabel
parameter_list|)
block|{
name|this
argument_list|(
name|nodeLabel
operator|.
name|getName
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|nodeLabel
operator|.
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|RMNodeLabel (String labelName)
specifier|public
name|RMNodeLabel
parameter_list|(
name|String
name|labelName
parameter_list|)
block|{
name|this
argument_list|(
name|labelName
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_EXCLUSIVITY
argument_list|)
expr_stmt|;
block|}
DECL|method|RMNodeLabel (String labelName, Resource res, int activeNMs, boolean exclusive)
specifier|protected
name|RMNodeLabel
parameter_list|(
name|String
name|labelName
parameter_list|,
name|Resource
name|res
parameter_list|,
name|int
name|activeNMs
parameter_list|,
name|boolean
name|exclusive
parameter_list|)
block|{
name|this
operator|.
name|labelName
operator|=
name|labelName
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|res
expr_stmt|;
name|this
operator|.
name|numActiveNMs
operator|=
name|activeNMs
expr_stmt|;
name|this
operator|.
name|nodeIds
operator|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|exclusive
operator|=
name|exclusive
expr_stmt|;
name|this
operator|.
name|nodeLabel
operator|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
name|labelName
argument_list|,
name|exclusive
argument_list|)
expr_stmt|;
block|}
DECL|method|addNodeId (NodeId node)
specifier|public
name|void
name|addNodeId
parameter_list|(
name|NodeId
name|node
parameter_list|)
block|{
name|nodeIds
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|removeNodeId (NodeId node)
specifier|public
name|void
name|removeNodeId
parameter_list|(
name|NodeId
name|node
parameter_list|)
block|{
name|nodeIds
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|getAssociatedNodeIds ()
specifier|public
name|Set
argument_list|<
name|NodeId
argument_list|>
name|getAssociatedNodeIds
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|(
name|nodeIds
argument_list|)
return|;
block|}
DECL|method|addNode (Resource nodeRes)
specifier|public
name|void
name|addNode
parameter_list|(
name|Resource
name|nodeRes
parameter_list|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|resource
argument_list|,
name|nodeRes
argument_list|)
expr_stmt|;
name|numActiveNMs
operator|++
expr_stmt|;
block|}
DECL|method|removeNode (Resource nodeRes)
specifier|public
name|void
name|removeNode
parameter_list|(
name|Resource
name|nodeRes
parameter_list|)
block|{
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|resource
argument_list|,
name|nodeRes
argument_list|)
expr_stmt|;
name|numActiveNMs
operator|--
expr_stmt|;
block|}
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|this
operator|.
name|resource
return|;
block|}
DECL|method|getNumActiveNMs ()
specifier|public
name|int
name|getNumActiveNMs
parameter_list|()
block|{
return|return
name|numActiveNMs
return|;
block|}
DECL|method|getLabelName ()
specifier|public
name|String
name|getLabelName
parameter_list|()
block|{
return|return
name|labelName
return|;
block|}
DECL|method|setIsExclusive (boolean exclusive)
specifier|public
name|void
name|setIsExclusive
parameter_list|(
name|boolean
name|exclusive
parameter_list|)
block|{
name|this
operator|.
name|exclusive
operator|=
name|exclusive
expr_stmt|;
block|}
DECL|method|getIsExclusive ()
specifier|public
name|boolean
name|getIsExclusive
parameter_list|()
block|{
return|return
name|this
operator|.
name|exclusive
return|;
block|}
DECL|method|getCopy ()
specifier|public
name|RMNodeLabel
name|getCopy
parameter_list|()
block|{
return|return
operator|new
name|RMNodeLabel
argument_list|(
name|labelName
argument_list|,
name|resource
argument_list|,
name|numActiveNMs
argument_list|,
name|exclusive
argument_list|)
return|;
block|}
DECL|method|getNodeLabel ()
specifier|public
name|NodeLabel
name|getNodeLabel
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodeLabel
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (RMNodeLabel o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|RMNodeLabel
name|o
parameter_list|)
block|{
comment|// We should always put empty label entry first after sorting
if|if
condition|(
name|labelName
operator|.
name|isEmpty
argument_list|()
operator|!=
name|o
operator|.
name|getLabelName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|labelName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|1
return|;
block|}
return|return
name|labelName
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getLabelName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|RMNodeLabel
condition|)
block|{
name|RMNodeLabel
name|other
init|=
operator|(
name|RMNodeLabel
operator|)
name|obj
decl_stmt|;
return|return
name|Resources
operator|.
name|equals
argument_list|(
name|resource
argument_list|,
name|other
operator|.
name|getResource
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|equals
argument_list|(
name|labelName
argument_list|,
name|other
operator|.
name|getLabelName
argument_list|()
argument_list|)
operator|&&
operator|(
name|other
operator|.
name|getNumActiveNMs
argument_list|()
operator|==
name|numActiveNMs
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|502357
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
operator|(
name|long
operator|)
name|labelName
operator|.
name|hashCode
argument_list|()
operator|<<
literal|8
operator|)
operator|+
operator|(
name|resource
operator|.
name|hashCode
argument_list|()
operator|<<
literal|4
operator|)
operator|+
name|numActiveNMs
operator|)
operator|%
name|prime
argument_list|)
return|;
block|}
block|}
end_class

end_unit

