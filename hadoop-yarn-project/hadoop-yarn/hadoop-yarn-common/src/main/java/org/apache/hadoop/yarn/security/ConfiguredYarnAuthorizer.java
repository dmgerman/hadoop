begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|PrivilegedEntity
operator|.
name|EntityType
import|;
end_import

begin_comment
comment|/**  * A YarnAuthorizationProvider implementation based on configuration files.  *  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ConfiguredYarnAuthorizer
specifier|public
class|class
name|ConfiguredYarnAuthorizer
extends|extends
name|YarnAuthorizationProvider
block|{
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|PrivilegedEntity
argument_list|,
name|Map
argument_list|<
name|AccessType
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
DECL|field|allAcls
name|allAcls
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|adminAcl
specifier|private
specifier|volatile
name|AccessControlList
name|adminAcl
init|=
literal|null
decl_stmt|;
DECL|field|lock
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
empty_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|ReadLock
name|readLock
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|writeLock
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|adminAcl
operator|=
operator|new
name|AccessControlList
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_YARN_ADMIN_ACL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setPermission (List<Permission> permissions, UserGroupInformation user)
specifier|public
name|void
name|setPermission
parameter_list|(
name|List
argument_list|<
name|Permission
argument_list|>
name|permissions
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Permission
name|perm
range|:
name|permissions
control|)
block|{
name|allAcls
operator|.
name|put
argument_list|(
name|perm
operator|.
name|getTarget
argument_list|()
argument_list|,
name|perm
operator|.
name|getAcls
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkPermissionInternal (AccessType accessType, PrivilegedEntity target, UserGroupInformation user)
specifier|private
name|boolean
name|checkPermissionInternal
parameter_list|(
name|AccessType
name|accessType
parameter_list|,
name|PrivilegedEntity
name|target
parameter_list|,
name|UserGroupInformation
name|user
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|AccessType
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
name|allAcls
operator|.
name|get
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|acls
operator|!=
literal|null
condition|)
block|{
name|AccessControlList
name|list
init|=
name|acls
operator|.
name|get
argument_list|(
name|accessType
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|list
operator|.
name|isUserAllowed
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
comment|// recursively look up the queue to see if parent queue has the permission.
if|if
condition|(
name|target
operator|.
name|getType
argument_list|()
operator|==
name|EntityType
operator|.
name|QUEUE
operator|&&
operator|!
name|ret
condition|)
block|{
name|String
name|queueName
init|=
name|target
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|queueName
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
return|return
name|ret
return|;
block|}
name|String
name|parentQueueName
init|=
name|queueName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|queueName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|checkPermissionInternal
argument_list|(
name|accessType
argument_list|,
operator|new
name|PrivilegedEntity
argument_list|(
name|target
operator|.
name|getType
argument_list|()
argument_list|,
name|parentQueueName
argument_list|)
argument_list|,
name|user
argument_list|)
return|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|checkPermission (AccessRequest accessRequest)
specifier|public
name|boolean
name|checkPermission
parameter_list|(
name|AccessRequest
name|accessRequest
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|checkPermissionInternal
argument_list|(
name|accessRequest
operator|.
name|getAccessType
argument_list|()
argument_list|,
name|accessRequest
operator|.
name|getEntity
argument_list|()
argument_list|,
name|accessRequest
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setAdmins (AccessControlList acls, UserGroupInformation ugi)
specifier|public
name|void
name|setAdmins
parameter_list|(
name|AccessControlList
name|acls
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|adminAcl
operator|=
name|acls
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isAdmin (UserGroupInformation ugi)
specifier|public
name|boolean
name|isAdmin
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
return|return
name|adminAcl
operator|.
name|isUserAllowed
argument_list|(
name|ugi
argument_list|)
return|;
block|}
DECL|method|getAdminAcls ()
specifier|public
name|AccessControlList
name|getAdminAcls
parameter_list|()
block|{
return|return
name|this
operator|.
name|adminAcl
return|;
block|}
block|}
end_class

end_unit

