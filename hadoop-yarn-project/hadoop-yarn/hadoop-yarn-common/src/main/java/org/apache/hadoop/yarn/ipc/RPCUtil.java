begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
DECL|class|RPCUtil
specifier|public
class|class
name|RPCUtil
block|{
comment|/**    * Returns an instance of YarnRemoteException     */
DECL|method|getRemoteException (Throwable t)
specifier|public
specifier|static
name|YarnRemoteException
name|getRemoteException
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
return|return
operator|new
name|YarnRemoteException
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/**    * Returns an instance of YarnRemoteException    */
DECL|method|getRemoteException (String message)
specifier|public
specifier|static
name|YarnRemoteException
name|getRemoteException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|YarnRemoteException
argument_list|(
name|message
argument_list|)
return|;
block|}
comment|/**    * Utility method that unwraps and throws appropriate exception.    *     * @param se ServiceException    * @throws YarnRemoteException    * @throws UndeclaredThrowableException    */
DECL|method|unwrapAndThrowException (ServiceException se)
specifier|public
specifier|static
name|YarnRemoteException
name|unwrapAndThrowException
parameter_list|(
name|ServiceException
name|se
parameter_list|)
throws|throws
name|UndeclaredThrowableException
block|{
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RemoteException
condition|)
block|{
try|try
block|{
name|RemoteException
name|re
init|=
operator|(
name|RemoteException
operator|)
name|se
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|re
operator|.
name|getClassName
argument_list|()
argument_list|)
decl_stmt|;
comment|//YarnRemoteException is not rooted as IOException.
comment|//Do the explicitly check if it is YarnRemoteException
if|if
condition|(
name|YarnRemoteException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|realClass
argument_list|)
condition|)
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|YarnRemoteException
argument_list|>
name|cn
init|=
name|realClass
operator|.
name|asSubclass
argument_list|(
name|YarnRemoteException
operator|.
name|class
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|cn
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|YarnRemoteException
name|ex
init|=
name|cn
operator|.
name|newInstance
argument_list|(
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|re
argument_list|)
expr_stmt|;
return|return
name|ex
return|;
block|}
else|else
block|{
comment|// TODO Fix in YARN-628.
throw|throw
operator|new
name|IOException
argument_list|(
operator|(
name|RemoteException
operator|)
name|se
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|UndeclaredThrowableException
argument_list|(
name|e1
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|UndeclaredThrowableException
argument_list|(
operator|(
name|RemoteException
operator|)
name|se
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|YarnRemoteException
condition|)
block|{
return|return
operator|(
name|YarnRemoteException
operator|)
name|se
operator|.
name|getCause
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|UndeclaredThrowableException
condition|)
block|{
throw|throw
operator|(
name|UndeclaredThrowableException
operator|)
name|se
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|UndeclaredThrowableException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

