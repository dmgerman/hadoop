begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticatedURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomains
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntityGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|TimelineClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnJacksonJaxbJsonProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Evolving
DECL|class|TimelineClientImpl
specifier|public
class|class
name|TimelineClientImpl
extends|extends
name|TimelineClient
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineClientImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAPPER
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
DECL|field|RESOURCE_URI_STR_V1
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_URI_STR_V1
init|=
literal|"/ws/v1/timeline/"
decl_stmt|;
DECL|field|opts
specifier|private
specifier|static
name|Options
name|opts
decl_stmt|;
DECL|field|ENTITY_DATA_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|ENTITY_DATA_TYPE
init|=
literal|"entity"
decl_stmt|;
DECL|field|DOMAIN_DATA_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|DOMAIN_DATA_TYPE
init|=
literal|"domain"
decl_stmt|;
static|static
block|{
name|opts
operator|=
operator|new
name|Options
argument_list|()
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"put"
argument_list|,
literal|true
argument_list|,
literal|"Put the timeline entities/domain in a JSON file"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|getOption
argument_list|(
literal|"put"
argument_list|)
operator|.
name|setArgName
argument_list|(
literal|"Path to the JSON file"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|ENTITY_DATA_TYPE
argument_list|,
literal|false
argument_list|,
literal|"Specify the JSON file contains the entities"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
name|DOMAIN_DATA_TYPE
argument_list|,
literal|false
argument_list|,
literal|"Specify the JSON file contains the domain"
argument_list|)
expr_stmt|;
name|opts
operator|.
name|addOption
argument_list|(
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print usage"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|field|token
specifier|protected
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
name|token
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|authUgi
specifier|protected
name|UserGroupInformation
name|authUgi
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|doAsUser
specifier|protected
name|String
name|doAsUser
decl_stmt|;
DECL|field|timelineServiceV15Enabled
specifier|private
name|boolean
name|timelineServiceV15Enabled
decl_stmt|;
DECL|field|timelineWriter
specifier|private
name|TimelineWriter
name|timelineWriter
decl_stmt|;
DECL|field|timelineServiceAddress
specifier|private
name|String
name|timelineServiceAddress
decl_stmt|;
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|field|connector
name|TimelineConnector
name|connector
decl_stmt|;
DECL|method|TimelineClientImpl ()
specifier|public
name|TimelineClientImpl
parameter_list|()
block|{
name|super
argument_list|(
name|TimelineClientImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|YarnConfiguration
operator|.
name|timelineServiceV1Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Timeline V1 client is not properly configured. "
operator|+
literal|"Either timeline service is not enabled or version is not set to"
operator|+
literal|" 1.x"
argument_list|)
throw|;
block|}
name|timelineServiceV15Enabled
operator|=
name|YarnConfiguration
operator|.
name|timelineServiceV15Enabled
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|realUgi
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|realUgi
operator|!=
literal|null
condition|)
block|{
name|authUgi
operator|=
name|realUgi
expr_stmt|;
name|doAsUser
operator|=
name|ugi
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|authUgi
operator|=
name|ugi
expr_stmt|;
name|doAsUser
operator|=
literal|null
expr_stmt|;
block|}
name|token
operator|=
operator|new
name|DelegationTokenAuthenticatedURL
operator|.
name|Token
argument_list|()
expr_stmt|;
name|connector
operator|=
name|createTimelineConnector
argument_list|()
expr_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|timelineServiceAddress
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timelineServiceAddress
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeline service address: "
operator|+
name|getTimelineServiceAddress
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createTimelineConnector ()
specifier|protected
name|TimelineConnector
name|createTimelineConnector
parameter_list|()
block|{
name|TimelineConnector
name|newConnector
init|=
operator|new
name|TimelineConnector
argument_list|(
literal|true
argument_list|,
name|authUgi
argument_list|,
name|doAsUser
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|addIfService
argument_list|(
name|newConnector
argument_list|)
expr_stmt|;
return|return
name|newConnector
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|timelineWriter
operator|=
name|createTimelineWriter
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|authUgi
argument_list|,
name|connector
operator|.
name|getClient
argument_list|()
argument_list|,
name|TimelineConnector
operator|.
name|constructResURI
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|timelineServiceAddress
argument_list|,
name|RESOURCE_URI_STR_V1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTimelineWriter (Configuration conf, UserGroupInformation ugi, Client webClient, URI uri)
specifier|protected
name|TimelineWriter
name|createTimelineWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|Client
name|webClient
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timelineServiceV15Enabled
condition|)
block|{
return|return
operator|new
name|FileSystemTimelineWriter
argument_list|(
name|conf
argument_list|,
name|ugi
argument_list|,
name|webClient
argument_list|,
name|uri
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DirectTimelineWriter
argument_list|(
name|ugi
argument_list|,
name|webClient
argument_list|,
name|uri
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|timelineWriter
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|timelineWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|timelineWriter
operator|!=
literal|null
condition|)
block|{
name|timelineWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|putEntities (TimelineEntity... entities)
specifier|public
name|TimelinePutResponse
name|putEntities
parameter_list|(
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
return|return
name|timelineWriter
operator|.
name|putEntities
argument_list|(
name|entities
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putDomain (TimelineDomain domain)
specifier|public
name|void
name|putDomain
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|timelineWriter
operator|.
name|putDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimelineServiceAddress ()
specifier|private
name|String
name|getTimelineServiceAddress
parameter_list|()
block|{
return|return
name|this
operator|.
name|timelineServiceAddress
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getDelegationToken ( final String renewer)
specifier|public
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|>
name|getDTAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegationTokenAuthenticatedURL
name|authUrl
init|=
name|connector
operator|.
name|getDelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
comment|// TODO we should add retry logic here if timelineServiceAddress is
comment|// not available immediately.
return|return
operator|(
name|Token
operator|)
name|authUrl
operator|.
name|getDelegationToken
argument_list|(
name|TimelineConnector
operator|.
name|constructResURI
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|getTimelineServiceAddress
argument_list|()
argument_list|,
name|RESOURCE_URI_STR_V1
argument_list|)
operator|.
name|toURL
argument_list|()
argument_list|,
name|token
argument_list|,
name|renewer
argument_list|,
name|doAsUser
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
operator|(
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
operator|)
name|connector
operator|.
name|operateDelegationToken
argument_list|(
name|getDTAction
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|renewDelegationToken ( final Token<TimelineDelegationTokenIdentifier> timelineDT)
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|timelineDT
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
specifier|final
name|boolean
name|isTokenServiceAddrEmpty
init|=
name|timelineDT
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|final
name|String
name|scheme
init|=
name|isTokenServiceAddrEmpty
condition|?
literal|null
else|:
operator|(
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|this
operator|.
name|getConfig
argument_list|()
argument_list|)
condition|?
literal|"https"
else|:
literal|"http"
operator|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|isTokenServiceAddrEmpty
condition|?
literal|null
else|:
name|SecurityUtil
operator|.
name|getTokenServiceAddr
argument_list|(
name|timelineDT
argument_list|)
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
name|renewDTAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// If the timeline DT to renew is different than cached, replace it.
comment|// Token to set every time for retry, because when exception
comment|// happens, DelegationTokenAuthenticatedURL will reset it to null;
if|if
condition|(
operator|!
name|timelineDT
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
condition|)
block|{
name|token
operator|.
name|setDelegationToken
argument_list|(
operator|(
name|Token
operator|)
name|timelineDT
argument_list|)
expr_stmt|;
block|}
name|DelegationTokenAuthenticatedURL
name|authUrl
init|=
name|connector
operator|.
name|getDelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
comment|// If the token service address is not available, fall back to use
comment|// the configured service address.
specifier|final
name|URI
name|serviceURI
init|=
name|isTokenServiceAddrEmpty
condition|?
name|TimelineConnector
operator|.
name|constructResURI
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|getTimelineServiceAddress
argument_list|()
argument_list|,
name|RESOURCE_URI_STR_V1
argument_list|)
else|:
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|RESOURCE_URI_STR_V1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|authUrl
operator|.
name|renewDelegationToken
argument_list|(
name|serviceURI
operator|.
name|toURL
argument_list|()
argument_list|,
name|token
argument_list|,
name|doAsUser
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
operator|(
name|Long
operator|)
name|connector
operator|.
name|operateDelegationToken
argument_list|(
name|renewDTAction
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|cancelDelegationToken ( final Token<TimelineDelegationTokenIdentifier> timelineDT)
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
specifier|final
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|timelineDT
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
specifier|final
name|boolean
name|isTokenServiceAddrEmpty
init|=
name|timelineDT
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|final
name|String
name|scheme
init|=
name|isTokenServiceAddrEmpty
condition|?
literal|null
else|:
operator|(
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|this
operator|.
name|getConfig
argument_list|()
argument_list|)
condition|?
literal|"https"
else|:
literal|"http"
operator|)
decl_stmt|;
specifier|final
name|InetSocketAddress
name|address
init|=
name|isTokenServiceAddrEmpty
condition|?
literal|null
else|:
name|SecurityUtil
operator|.
name|getTokenServiceAddr
argument_list|(
name|timelineDT
argument_list|)
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|cancelDTAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// If the timeline DT to cancel is different than cached, replace
comment|// it.
comment|// Token to set every time for retry, because when exception
comment|// happens, DelegationTokenAuthenticatedURL will reset it to null;
if|if
condition|(
operator|!
name|timelineDT
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getDelegationToken
argument_list|()
argument_list|)
condition|)
block|{
name|token
operator|.
name|setDelegationToken
argument_list|(
operator|(
name|Token
operator|)
name|timelineDT
argument_list|)
expr_stmt|;
block|}
name|DelegationTokenAuthenticatedURL
name|authUrl
init|=
name|connector
operator|.
name|getDelegationTokenAuthenticatedURL
argument_list|()
decl_stmt|;
comment|// If the token service address is not available, fall back to use
comment|// the configured service address.
specifier|final
name|URI
name|serviceURI
init|=
name|isTokenServiceAddrEmpty
condition|?
name|TimelineConnector
operator|.
name|constructResURI
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|getTimelineServiceAddress
argument_list|()
argument_list|,
name|RESOURCE_URI_STR_V1
argument_list|)
else|:
operator|new
name|URI
argument_list|(
name|scheme
argument_list|,
literal|null
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|RESOURCE_URI_STR_V1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|authUrl
operator|.
name|cancelDelegationToken
argument_list|(
name|serviceURI
operator|.
name|toURL
argument_list|()
argument_list|,
name|token
argument_list|,
name|doAsUser
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|connector
operator|.
name|operateDelegationToken
argument_list|(
name|cancelDTAction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" with timeline server "
operator|+
name|TimelineConnector
operator|.
name|constructResURI
argument_list|(
name|getConfig
argument_list|()
argument_list|,
name|getTimelineServiceAddress
argument_list|()
argument_list|,
name|RESOURCE_URI_STR_V1
argument_list|)
operator|+
literal|" and writer "
operator|+
name|timelineWriter
return|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandLine
name|cliParser
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
literal|"put"
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|cliParser
operator|.
name|getOptionValue
argument_list|(
literal|"put"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|ENTITY_DATA_TYPE
argument_list|)
condition|)
block|{
name|putTimelineDataInJSONFile
argument_list|(
name|path
argument_list|,
name|ENTITY_DATA_TYPE
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|cliParser
operator|.
name|hasOption
argument_list|(
name|DOMAIN_DATA_TYPE
argument_list|)
condition|)
block|{
name|putTimelineDataInJSONFile
argument_list|(
name|path
argument_list|,
name|DOMAIN_DATA_TYPE
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|printUsage
argument_list|()
expr_stmt|;
block|}
comment|/**    * Put timeline data in a JSON file via command line.    *     * @param path    *          path to the timeline data JSON file    * @param type    *          the type of the timeline data in the JSON file    */
DECL|method|putTimelineDataInJSONFile (String path, String type)
specifier|private
specifier|static
name|void
name|putTimelineDataInJSONFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|File
name|jsonFile
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jsonFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"File ["
operator|+
name|jsonFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"] doesn't exist"
argument_list|)
expr_stmt|;
return|return;
block|}
name|YarnJacksonJaxbJsonProvider
operator|.
name|configObjectMapper
argument_list|(
name|MAPPER
argument_list|)
expr_stmt|;
name|TimelineEntities
name|entities
init|=
literal|null
decl_stmt|;
name|TimelineDomains
name|domains
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ENTITY_DATA_TYPE
argument_list|)
condition|)
block|{
name|entities
operator|=
name|MAPPER
operator|.
name|readValue
argument_list|(
name|jsonFile
argument_list|,
name|TimelineEntities
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|DOMAIN_DATA_TYPE
argument_list|)
condition|)
block|{
name|domains
operator|=
name|MAPPER
operator|.
name|readValue
argument_list|(
name|jsonFile
argument_list|,
name|TimelineDomains
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when reading  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|TimelineClient
name|client
init|=
name|TimelineClient
operator|.
name|createTimelineClient
argument_list|()
decl_stmt|;
name|client
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
operator|&&
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|token
init|=
name|client
operator|.
name|getDelegationToken
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|ENTITY_DATA_TYPE
argument_list|)
condition|)
block|{
name|TimelinePutResponse
name|response
init|=
name|client
operator|.
name|putEntities
argument_list|(
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|TimelineEntity
index|[
name|entities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeline entities are successfully put"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|TimelinePutResponse
operator|.
name|TimelinePutError
name|error
range|:
name|response
operator|.
name|getErrors
argument_list|()
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"TimelineEntity ["
operator|+
name|error
operator|.
name|getEntityType
argument_list|()
operator|+
literal|":"
operator|+
name|error
operator|.
name|getEntityId
argument_list|()
operator|+
literal|"] is not successfully put. Error code: "
operator|+
name|error
operator|.
name|getErrorCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|DOMAIN_DATA_TYPE
argument_list|)
operator|&&
name|domains
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasError
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TimelineDomain
name|domain
range|:
name|domains
operator|.
name|getDomains
argument_list|()
control|)
block|{
try|try
block|{
name|client
operator|.
name|putDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when putting domain "
operator|+
name|domain
operator|.
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|hasError
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasError
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Timeline domains are successfully put"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when putting the timeline data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error when putting the timeline data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Helper function to print out usage    */
DECL|method|printUsage ()
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"TimelineClient"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
DECL|method|getUgi ()
specifier|public
name|UserGroupInformation
name|getUgi
parameter_list|()
block|{
return|return
name|authUgi
return|;
block|}
annotation|@
name|Override
DECL|method|putEntities (ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities)
specifier|public
name|TimelinePutResponse
name|putEntities
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineEntityGroupId
name|groupId
parameter_list|,
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
operator|!
name|timelineServiceV15Enabled
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"This API is not supported under current Timeline Service Version:"
argument_list|)
throw|;
block|}
return|return
name|timelineWriter
operator|.
name|putEntities
argument_list|(
name|appAttemptId
argument_list|,
name|groupId
argument_list|,
name|entities
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putDomain (ApplicationAttemptId appAttemptId, TimelineDomain domain)
specifier|public
name|void
name|putDomain
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
operator|!
name|timelineServiceV15Enabled
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"This API is not supported under current Timeline Service Version:"
argument_list|)
throw|;
block|}
name|timelineWriter
operator|.
name|putDomain
argument_list|(
name|appAttemptId
argument_list|,
name|domain
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|setTimelineWriter (TimelineWriter writer)
specifier|public
name|void
name|setTimelineWriter
parameter_list|(
name|TimelineWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|timelineWriter
operator|=
name|writer
expr_stmt|;
block|}
block|}
end_class

end_unit

