begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SerializedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|SerializedExceptionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|SerializedExceptionProtoOrBuilder
import|;
end_import

begin_class
DECL|class|SerializedExceptionPBImpl
specifier|public
class|class
name|SerializedExceptionPBImpl
extends|extends
name|SerializedException
block|{
DECL|field|proto
name|SerializedExceptionProto
name|proto
init|=
literal|null
decl_stmt|;
DECL|field|builder
name|SerializedExceptionProto
operator|.
name|Builder
name|builder
init|=
name|SerializedExceptionProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|method|SerializedExceptionPBImpl ()
specifier|public
name|SerializedExceptionPBImpl
parameter_list|()
block|{   }
DECL|method|SerializedExceptionPBImpl (SerializedExceptionProto proto)
specifier|public
name|SerializedExceptionPBImpl
parameter_list|(
name|SerializedExceptionProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|SerializedExceptionPBImpl (Throwable t)
specifier|private
name|SerializedExceptionPBImpl
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|init
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|method|init (String message)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|init (Throwable t)
specifier|public
name|void
name|init
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|t
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{     }
else|else
block|{
name|builder
operator|.
name|setCause
argument_list|(
operator|new
name|SerializedExceptionPBImpl
argument_list|(
name|t
operator|.
name|getCause
argument_list|()
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|sw
operator|.
name|toString
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setTrace
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setMessage
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setClassName
argument_list|(
name|t
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|init (String message, Throwable t)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|init
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|deSerialize ()
specifier|public
name|Throwable
name|deSerialize
parameter_list|()
block|{
name|SerializedException
name|cause
init|=
name|getCause
argument_list|()
decl_stmt|;
name|SerializedExceptionProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|realClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|realClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|p
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Class
name|classType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|YarnException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|realClass
argument_list|)
condition|)
block|{
name|classType
operator|=
name|YarnException
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IOException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|realClass
argument_list|)
condition|)
block|{
name|classType
operator|=
name|IOException
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RuntimeException
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|realClass
argument_list|)
condition|)
block|{
name|classType
operator|=
name|RuntimeException
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|classType
operator|=
name|Exception
operator|.
name|class
expr_stmt|;
block|}
return|return
name|instantiateException
argument_list|(
name|realClass
operator|.
name|asSubclass
argument_list|(
name|classType
argument_list|)
argument_list|,
name|getMessage
argument_list|()
argument_list|,
name|cause
operator|==
literal|null
condition|?
literal|null
else|:
name|cause
operator|.
name|deSerialize
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
name|SerializedExceptionProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteTrace ()
specifier|public
name|String
name|getRemoteTrace
parameter_list|()
block|{
name|SerializedExceptionProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getTrace
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getCause ()
specifier|public
name|SerializedException
name|getCause
parameter_list|()
block|{
name|SerializedExceptionProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|hasCause
argument_list|()
condition|)
block|{
return|return
operator|new
name|SerializedExceptionPBImpl
argument_list|(
name|p
operator|.
name|getCause
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|getProto ()
specifier|public
name|SerializedExceptionProto
name|getProto
parameter_list|()
block|{
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|SerializedExceptionProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|instantiateException ( Class<? extends T> cls, String message, Throwable cause)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|T
name|instantiateException
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|cls
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|cn
decl_stmt|;
name|T
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cn
operator|=
name|cls
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|cn
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ex
operator|=
name|cn
operator|.
name|newInstance
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|ex
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ex
return|;
block|}
block|}
end_class

end_unit

