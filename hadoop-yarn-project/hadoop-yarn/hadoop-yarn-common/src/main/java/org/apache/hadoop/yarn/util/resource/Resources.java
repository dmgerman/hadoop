begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ResourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UnitsConversionUtil
import|;
end_import

begin_comment
comment|/**  * Resources is a computation class which provides a set of apis to do  * mathematical operations on Resource object.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"YARN"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|Unstable
DECL|class|Resources
specifier|public
class|class
name|Resources
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Resources
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Helper class to create a resource with a fixed value for all resource    * types. For example, a NONE resource which returns 0 for any resource type.    */
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|Unstable
DECL|class|FixedValueResource
specifier|static
class|class
name|FixedValueResource
extends|extends
name|Resource
block|{
DECL|field|resourceValue
specifier|private
specifier|final
name|long
name|resourceValue
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|/**      * Constructor for a fixed value resource.      * @param rName the name of the resource      * @param value the fixed value to be returned for all resource types      */
DECL|method|FixedValueResource (String rName, long value)
name|FixedValueResource
parameter_list|(
name|String
name|rName
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|resourceValue
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|rName
expr_stmt|;
name|initResourceMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getMemory ()
specifier|public
name|int
name|getMemory
parameter_list|()
block|{
return|return
name|castToIntSafely
argument_list|(
name|resourceValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMemorySize ()
specifier|public
name|long
name|getMemorySize
parameter_list|()
block|{
return|return
name|this
operator|.
name|resourceValue
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|setMemory (int memory)
specifier|public
name|void
name|setMemory
parameter_list|(
name|int
name|memory
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" cannot be modified!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setMemorySize (long memory)
specifier|public
name|void
name|setMemorySize
parameter_list|(
name|long
name|memory
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" cannot be modified!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getVirtualCores ()
specifier|public
name|int
name|getVirtualCores
parameter_list|()
block|{
return|return
name|castToIntSafely
argument_list|(
name|resourceValue
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setVirtualCores (int virtualCores)
specifier|public
name|void
name|setVirtualCores
parameter_list|(
name|int
name|virtualCores
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" cannot be modified!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setResourceInformation (int index, ResourceInformation resourceInformation)
specifier|public
name|void
name|setResourceInformation
parameter_list|(
name|int
name|index
parameter_list|,
name|ResourceInformation
name|resourceInformation
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" cannot be modified!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setResourceValue (int index, long value)
specifier|public
name|void
name|setResourceValue
parameter_list|(
name|int
name|index
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" cannot be modified!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setResourceInformation (String resource, ResourceInformation resourceInformation)
specifier|public
name|void
name|setResourceInformation
parameter_list|(
name|String
name|resource
parameter_list|,
name|ResourceInformation
name|resourceInformation
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" cannot be modified!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setResourceValue (String resource, long value)
specifier|public
name|void
name|setResourceValue
parameter_list|(
name|String
name|resource
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|name
operator|+
literal|" cannot be modified!"
argument_list|)
throw|;
block|}
comment|/*      *  FixedValueResource cannot be updated when any resource types refresh      *  by using approach introduced by YARN-7307 and do operations like      *  Resources.compare(resource_x, Resources.none()) will throw exceptions.      *      *  That's why we do reinitialize resource maps for following methods.      */
annotation|@
name|Override
DECL|method|getResourceInformation (int index)
specifier|public
name|ResourceInformation
name|getResourceInformation
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
name|ResourceInformation
name|ri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ri
operator|=
name|super
operator|.
name|getResourceInformation
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
comment|// Retry once to reinitialize resource information.
name|initResourceMap
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|super
operator|.
name|getResourceInformation
argument_list|(
name|index
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ee
parameter_list|)
block|{
name|throwExceptionWhenArrayOutOfBound
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ri
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceInformation (String resource)
specifier|public
name|ResourceInformation
name|getResourceInformation
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|ResourceNotFoundException
block|{
name|ResourceInformation
name|ri
decl_stmt|;
try|try
block|{
name|ri
operator|=
name|super
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|e
parameter_list|)
block|{
comment|// Retry once to reinitialize resource information.
name|initResourceMap
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|super
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ee
parameter_list|)
block|{
throw|throw
name|ee
throw|;
block|}
block|}
return|return
name|ri
return|;
block|}
annotation|@
name|Override
DECL|method|getResources ()
specifier|public
name|ResourceInformation
index|[]
name|getResources
parameter_list|()
block|{
if|if
condition|(
name|resources
operator|.
name|length
operator|!=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
condition|)
block|{
comment|// Retry once to reinitialize resource information.
name|initResourceMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|resources
operator|.
name|length
operator|!=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceNotFoundException
argument_list|(
literal|"Failed to reinitialize "
operator|+
literal|"FixedValueResource to get number of resource types same "
operator|+
literal|"as configured"
argument_list|)
throw|;
block|}
block|}
return|return
name|resources
return|;
block|}
DECL|method|initResourceMap ()
specifier|private
name|void
name|initResourceMap
parameter_list|()
block|{
name|ResourceInformation
index|[]
name|types
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
name|resources
operator|=
operator|new
name|ResourceInformation
index|[
name|types
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|types
operator|.
name|length
condition|;
name|index
operator|++
control|)
block|{
name|resources
index|[
name|index
index|]
operator|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|types
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|resources
index|[
name|index
index|]
operator|.
name|setValue
argument_list|(
name|resourceValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createResource (int memory)
specifier|public
specifier|static
name|Resource
name|createResource
parameter_list|(
name|int
name|memory
parameter_list|)
block|{
return|return
name|createResource
argument_list|(
name|memory
argument_list|,
operator|(
name|memory
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|)
return|;
block|}
DECL|method|createResource (int memory, int cores)
specifier|public
specifier|static
name|Resource
name|createResource
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|cores
parameter_list|)
block|{
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|cores
argument_list|)
return|;
block|}
DECL|field|UNBOUNDED
specifier|private
specifier|static
specifier|final
name|Resource
name|UNBOUNDED
init|=
operator|new
name|FixedValueResource
argument_list|(
literal|"UNBOUNDED"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|NONE
specifier|private
specifier|static
specifier|final
name|Resource
name|NONE
init|=
operator|new
name|FixedValueResource
argument_list|(
literal|"NONE"
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
DECL|method|createResource (long memory)
specifier|public
specifier|static
name|Resource
name|createResource
parameter_list|(
name|long
name|memory
parameter_list|)
block|{
return|return
name|createResource
argument_list|(
name|memory
argument_list|,
operator|(
name|memory
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
argument_list|)
return|;
block|}
DECL|method|createResource (long memory, int cores)
specifier|public
specifier|static
name|Resource
name|createResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|cores
parameter_list|)
block|{
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|cores
argument_list|)
return|;
block|}
DECL|method|none ()
specifier|public
specifier|static
name|Resource
name|none
parameter_list|()
block|{
return|return
name|NONE
return|;
block|}
comment|/**    * Check whether a resource object is empty (0 memory and 0 virtual cores).    * @param other The resource to check    * @return {@code true} if {@code other} has 0 memory and 0 virtual cores,    * {@code false} otherwise    */
DECL|method|isNone (Resource other)
specifier|public
specifier|static
name|boolean
name|isNone
parameter_list|(
name|Resource
name|other
parameter_list|)
block|{
return|return
name|NONE
operator|.
name|equals
argument_list|(
name|other
argument_list|)
return|;
block|}
DECL|method|unbounded ()
specifier|public
specifier|static
name|Resource
name|unbounded
parameter_list|()
block|{
return|return
name|UNBOUNDED
return|;
block|}
DECL|method|clone (Resource res)
specifier|public
specifier|static
name|Resource
name|clone
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
return|return
name|Resource
operator|.
name|newInstance
argument_list|(
name|res
argument_list|)
return|;
block|}
DECL|method|addTo (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|addTo
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rhsValue
init|=
name|rhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|lhsValue
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|convertedRhs
init|=
operator|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|)
condition|?
name|rhsValue
operator|.
name|getValue
argument_list|()
else|:
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rhsValue
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|lhs
operator|.
name|setResourceValue
argument_list|(
name|i
argument_list|,
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|+
name|convertedRhs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|lhs
return|;
block|}
DECL|method|add (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|add
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|addTo
argument_list|(
name|clone
argument_list|(
name|lhs
argument_list|)
argument_list|,
name|rhs
argument_list|)
return|;
block|}
DECL|method|subtractFrom (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|subtractFrom
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rhsValue
init|=
name|rhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|lhsValue
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|convertedRhs
init|=
operator|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|)
condition|?
name|rhsValue
operator|.
name|getValue
argument_list|()
else|:
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rhsValue
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|lhs
operator|.
name|setResourceValue
argument_list|(
name|i
argument_list|,
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|-
name|convertedRhs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|lhs
return|;
block|}
DECL|method|subtract (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|subtract
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|subtractFrom
argument_list|(
name|clone
argument_list|(
name|lhs
argument_list|)
argument_list|,
name|rhs
argument_list|)
return|;
block|}
comment|/**    * Subtract<code>rhs</code> from<code>lhs</code> and reset any negative    * values to zero.    * @param lhs {@link Resource} to subtract from    * @param rhs {@link Resource} to subtract    * @return the value of lhs after subtraction    */
DECL|method|subtractFromNonNegative (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|subtractFromNonNegative
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
name|subtractFrom
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
if|if
condition|(
name|lhs
operator|.
name|getMemorySize
argument_list|()
operator|<
literal|0
condition|)
block|{
name|lhs
operator|.
name|setMemorySize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lhs
operator|.
name|getVirtualCores
argument_list|()
operator|<
literal|0
condition|)
block|{
name|lhs
operator|.
name|setVirtualCores
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|lhs
return|;
block|}
DECL|method|negate (Resource resource)
specifier|public
specifier|static
name|Resource
name|negate
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|subtract
argument_list|(
name|NONE
argument_list|,
name|resource
argument_list|)
return|;
block|}
DECL|method|multiplyTo (Resource lhs, double by)
specifier|public
specifier|static
name|Resource
name|multiplyTo
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|double
name|by
parameter_list|)
block|{
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|lhsValue
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|lhs
operator|.
name|setResourceValue
argument_list|(
name|i
argument_list|,
call|(
name|long
call|)
argument_list|(
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|*
name|by
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|lhs
return|;
block|}
DECL|method|multiply (Resource lhs, double by)
specifier|public
specifier|static
name|Resource
name|multiply
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|double
name|by
parameter_list|)
block|{
return|return
name|multiplyTo
argument_list|(
name|clone
argument_list|(
name|lhs
argument_list|)
argument_list|,
name|by
argument_list|)
return|;
block|}
comment|/**    * Multiply {@code rhs} by {@code by}, and add the result to {@code lhs}    * without creating any new {@link Resource} object    */
DECL|method|multiplyAndAddTo ( Resource lhs, Resource rhs, double by)
specifier|public
specifier|static
name|Resource
name|multiplyAndAddTo
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|,
name|double
name|by
parameter_list|)
block|{
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rhsValue
init|=
name|rhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|lhsValue
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|convertedRhs
init|=
call|(
name|long
call|)
argument_list|(
operator|(
operator|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|)
condition|?
name|rhsValue
operator|.
name|getValue
argument_list|()
else|:
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rhsValue
operator|.
name|getValue
argument_list|()
argument_list|)
operator|)
operator|*
name|by
argument_list|)
decl_stmt|;
name|lhs
operator|.
name|setResourceValue
argument_list|(
name|i
argument_list|,
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|+
name|convertedRhs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|lhs
return|;
block|}
DECL|method|multiplyAndNormalizeUp (ResourceCalculator calculator, Resource lhs, double[] by, Resource factor)
specifier|public
specifier|static
name|Resource
name|multiplyAndNormalizeUp
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|double
index|[]
name|by
parameter_list|,
name|Resource
name|factor
parameter_list|)
block|{
return|return
name|calculator
operator|.
name|multiplyAndNormalizeUp
argument_list|(
name|lhs
argument_list|,
name|by
argument_list|,
name|factor
argument_list|)
return|;
block|}
DECL|method|multiplyAndNormalizeUp ( ResourceCalculator calculator,Resource lhs, double by, Resource factor)
specifier|public
specifier|static
name|Resource
name|multiplyAndNormalizeUp
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|factor
parameter_list|)
block|{
return|return
name|calculator
operator|.
name|multiplyAndNormalizeUp
argument_list|(
name|lhs
argument_list|,
name|by
argument_list|,
name|factor
argument_list|)
return|;
block|}
DECL|method|multiplyAndNormalizeDown ( ResourceCalculator calculator,Resource lhs, double by, Resource factor)
specifier|public
specifier|static
name|Resource
name|multiplyAndNormalizeDown
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|factor
parameter_list|)
block|{
return|return
name|calculator
operator|.
name|multiplyAndNormalizeDown
argument_list|(
name|lhs
argument_list|,
name|by
argument_list|,
name|factor
argument_list|)
return|;
block|}
DECL|method|multiplyAndRoundDown (Resource lhs, double by)
specifier|public
specifier|static
name|Resource
name|multiplyAndRoundDown
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|double
name|by
parameter_list|)
block|{
name|Resource
name|out
init|=
name|clone
argument_list|(
name|lhs
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|lhsValue
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|out
operator|.
name|setResourceValue
argument_list|(
name|i
argument_list|,
call|(
name|long
call|)
argument_list|(
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|*
name|by
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|multiplyAndRoundUp (Resource lhs, double by)
specifier|public
specifier|static
name|Resource
name|multiplyAndRoundUp
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|double
name|by
parameter_list|)
block|{
name|Resource
name|out
init|=
name|clone
argument_list|(
name|lhs
argument_list|)
decl_stmt|;
name|out
operator|.
name|setMemorySize
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|lhs
operator|.
name|getMemorySize
argument_list|()
operator|*
name|by
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|setVirtualCores
argument_list|(
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|lhs
operator|.
name|getVirtualCores
argument_list|()
operator|*
name|by
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
DECL|method|normalize ( ResourceCalculator calculator, Resource lhs, Resource min, Resource max, Resource increment)
specifier|public
specifier|static
name|Resource
name|normalize
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|min
parameter_list|,
name|Resource
name|max
parameter_list|,
name|Resource
name|increment
parameter_list|)
block|{
return|return
name|calculator
operator|.
name|normalize
argument_list|(
name|lhs
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
return|;
block|}
DECL|method|roundUp ( ResourceCalculator calculator, Resource lhs, Resource factor)
specifier|public
specifier|static
name|Resource
name|roundUp
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|factor
parameter_list|)
block|{
return|return
name|calculator
operator|.
name|roundUp
argument_list|(
name|lhs
argument_list|,
name|factor
argument_list|)
return|;
block|}
DECL|method|roundDown ( ResourceCalculator calculator, Resource lhs, Resource factor)
specifier|public
specifier|static
name|Resource
name|roundDown
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|factor
parameter_list|)
block|{
return|return
name|calculator
operator|.
name|roundDown
argument_list|(
name|lhs
argument_list|,
name|factor
argument_list|)
return|;
block|}
DECL|method|isInvalidDivisor ( ResourceCalculator resourceCalculator, Resource divisor)
specifier|public
specifier|static
name|boolean
name|isInvalidDivisor
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|divisor
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|isInvalidDivisor
argument_list|(
name|divisor
argument_list|)
return|;
block|}
DECL|method|ratio ( ResourceCalculator resourceCalculator, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|float
name|ratio
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|ratio
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
DECL|method|divide ( ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|float
name|divide
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|divide
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
DECL|method|divideAndCeil ( ResourceCalculator resourceCalculator, Resource lhs, int rhs)
specifier|public
specifier|static
name|Resource
name|divideAndCeil
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|int
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|divideAndCeil
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
DECL|method|divideAndCeil ( ResourceCalculator resourceCalculator, Resource lhs, float rhs)
specifier|public
specifier|static
name|Resource
name|divideAndCeil
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|float
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|divideAndCeil
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
DECL|method|equals (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|boolean
name|equals
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
return|;
block|}
DECL|method|lessThan ( ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|boolean
name|lessThan
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
operator|(
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
DECL|method|lessThanOrEqual ( ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|boolean
name|lessThanOrEqual
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
operator|(
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
DECL|method|greaterThan ( ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|boolean
name|greaterThan
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|>
literal|0
return|;
block|}
DECL|method|greaterThanOrEqual ( ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|boolean
name|greaterThanOrEqual
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|>=
literal|0
return|;
block|}
DECL|method|min ( ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|min
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|<=
literal|0
condition|?
name|lhs
else|:
name|rhs
return|;
block|}
DECL|method|max ( ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|max
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
return|return
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
operator|>=
literal|0
condition|?
name|lhs
else|:
name|rhs
return|;
block|}
DECL|method|fitsIn (Resource smaller, Resource bigger)
specifier|public
specifier|static
name|boolean
name|fitsIn
parameter_list|(
name|Resource
name|smaller
parameter_list|,
name|Resource
name|bigger
parameter_list|)
block|{
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rhsValue
init|=
name|bigger
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|lhsValue
init|=
name|smaller
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|convertedRhs
init|=
operator|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|)
condition|?
name|rhsValue
operator|.
name|getValue
argument_list|()
else|:
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rhsValue
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|>
name|convertedRhs
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|fitsIn (ResourceCalculator rc, Resource smaller, Resource bigger)
specifier|public
specifier|static
name|boolean
name|fitsIn
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|smaller
parameter_list|,
name|Resource
name|bigger
parameter_list|)
block|{
return|return
name|rc
operator|.
name|fitsIn
argument_list|(
name|smaller
argument_list|,
name|bigger
argument_list|)
return|;
block|}
DECL|method|componentwiseMin (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|componentwiseMin
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rhsValue
init|=
name|rhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|lhsValue
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|convertedRhs
init|=
operator|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|)
condition|?
name|rhsValue
operator|.
name|getValue
argument_list|()
else|:
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rhsValue
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceInformation
name|outInfo
init|=
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|<
name|convertedRhs
condition|?
name|lhsValue
else|:
name|rhsValue
decl_stmt|;
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|i
argument_list|,
name|outInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|componentwiseMax (Resource lhs, Resource rhs)
specifier|public
specifier|static
name|Resource
name|componentwiseMax
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rhsValue
init|=
name|rhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|lhsValue
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|convertedRhs
init|=
operator|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|)
operator|)
condition|?
name|rhsValue
operator|.
name|getValue
argument_list|()
else|:
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|rhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|lhsValue
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rhsValue
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceInformation
name|outInfo
init|=
name|lhsValue
operator|.
name|getValue
argument_list|()
operator|>
name|convertedRhs
condition|?
name|lhsValue
else|:
name|rhsValue
decl_stmt|;
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|i
argument_list|,
name|outInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceNotFoundException
name|ye
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource is missing:"
operator|+
name|ye
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|isAnyMajorResourceZero (ResourceCalculator rc, Resource resource)
specifier|public
specifier|static
name|boolean
name|isAnyMajorResourceZero
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|rc
operator|.
name|isAnyMajorResourceZero
argument_list|(
name|resource
argument_list|)
return|;
block|}
DECL|method|normalizeDown (ResourceCalculator calculator, Resource resource, Resource factor)
specifier|public
specifier|static
name|Resource
name|normalizeDown
parameter_list|(
name|ResourceCalculator
name|calculator
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|Resource
name|factor
parameter_list|)
block|{
return|return
name|calculator
operator|.
name|normalizeDown
argument_list|(
name|resource
argument_list|,
name|factor
argument_list|)
return|;
block|}
block|}
end_class

end_unit

