begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.nodelabels.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|op
operator|.
name|FSNodeStoreLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|FSStoreOpHandler
operator|.
name|StoreType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Abstract class for File System based store.  *  * @param<M> manager filesystem store.Currently nodelabel will use  *           CommonNodeLabelManager.  */
end_comment

begin_class
DECL|class|AbstractFSNodeStore
specifier|public
specifier|abstract
class|class
name|AbstractFSNodeStore
parameter_list|<
name|M
parameter_list|>
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractFSNodeStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|storeType
specifier|private
name|StoreType
name|storeType
decl_stmt|;
DECL|field|editlogOs
specifier|private
name|FSDataOutputStream
name|editlogOs
decl_stmt|;
DECL|field|editLogPath
specifier|private
name|Path
name|editLogPath
decl_stmt|;
DECL|field|schema
specifier|private
name|StoreSchema
name|schema
decl_stmt|;
DECL|field|manager
specifier|protected
name|M
name|manager
decl_stmt|;
DECL|field|fsWorkingPath
specifier|protected
name|Path
name|fsWorkingPath
decl_stmt|;
DECL|field|fs
specifier|protected
name|FileSystem
name|fs
decl_stmt|;
DECL|method|AbstractFSNodeStore (StoreType storeType)
specifier|public
name|AbstractFSNodeStore
parameter_list|(
name|StoreType
name|storeType
parameter_list|)
block|{
name|this
operator|.
name|storeType
operator|=
name|storeType
expr_stmt|;
block|}
DECL|method|initStore (Configuration conf, Path fsStorePath, StoreSchema schma, M mgr)
specifier|protected
name|void
name|initStore
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|fsStorePath
parameter_list|,
name|StoreSchema
name|schma
parameter_list|,
name|M
name|mgr
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|schema
operator|=
name|schma
expr_stmt|;
name|this
operator|.
name|fsWorkingPath
operator|=
name|fsStorePath
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|mgr
expr_stmt|;
name|initFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// mkdir of root dir path
name|fs
operator|.
name|mkdirs
argument_list|(
name|fsWorkingPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Filesystem store schema define the log name and mirror name.    */
DECL|class|StoreSchema
specifier|public
specifier|static
class|class
name|StoreSchema
block|{
DECL|field|editLogName
specifier|private
name|String
name|editLogName
decl_stmt|;
DECL|field|mirrorName
specifier|private
name|String
name|mirrorName
decl_stmt|;
DECL|method|StoreSchema (String editLogName, String mirrorName)
specifier|public
name|StoreSchema
parameter_list|(
name|String
name|editLogName
parameter_list|,
name|String
name|mirrorName
parameter_list|)
block|{
name|this
operator|.
name|editLogName
operator|=
name|editLogName
expr_stmt|;
name|this
operator|.
name|mirrorName
operator|=
name|mirrorName
expr_stmt|;
block|}
block|}
DECL|method|initFileSystem (Configuration conf)
specifier|public
name|void
name|initFileSystem
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|confCopy
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|=
name|fsWorkingPath
operator|.
name|getFileSystem
argument_list|(
name|confCopy
argument_list|)
expr_stmt|;
comment|// if it's local file system, use RawLocalFileSystem instead of
comment|// LocalFileSystem, the latter one doesn't support append.
if|if
condition|(
name|fs
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"file"
argument_list|)
condition|)
block|{
name|fs
operator|=
operator|(
operator|(
name|LocalFileSystem
operator|)
name|fs
operator|)
operator|.
name|getRaw
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeToLog (FSNodeStoreLogOp op)
specifier|protected
name|void
name|writeToLog
parameter_list|(
name|FSNodeStoreLogOp
name|op
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ensureAppendEditLogFile
argument_list|()
expr_stmt|;
name|editlogOs
operator|.
name|writeInt
argument_list|(
name|op
operator|.
name|getOpCode
argument_list|()
argument_list|)
expr_stmt|;
name|op
operator|.
name|write
argument_list|(
name|editlogOs
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ensureCloseEditlogFile
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|ensureAppendEditLogFile ()
specifier|protected
name|void
name|ensureAppendEditLogFile
parameter_list|()
throws|throws
name|IOException
block|{
name|editlogOs
operator|=
name|fs
operator|.
name|append
argument_list|(
name|editLogPath
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureCloseEditlogFile ()
specifier|protected
name|void
name|ensureCloseEditlogFile
parameter_list|()
throws|throws
name|IOException
block|{
name|editlogOs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|loadFromMirror (Path newMirrorPath, Path oldMirrorPath)
specifier|protected
name|void
name|loadFromMirror
parameter_list|(
name|Path
name|newMirrorPath
parameter_list|,
name|Path
name|oldMirrorPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If mirror.new exists, read from mirror.new
name|Path
name|mirrorToRead
init|=
name|fs
operator|.
name|exists
argument_list|(
name|newMirrorPath
argument_list|)
condition|?
name|newMirrorPath
else|:
name|fs
operator|.
name|exists
argument_list|(
name|oldMirrorPath
argument_list|)
condition|?
name|oldMirrorPath
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|mirrorToRead
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|mirrorToRead
argument_list|)
init|)
block|{
name|StoreOp
name|op
init|=
name|FSStoreOpHandler
operator|.
name|getMirrorOp
argument_list|(
name|storeType
argument_list|)
decl_stmt|;
name|op
operator|.
name|recover
argument_list|(
name|is
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getStoreType ()
specifier|protected
name|StoreType
name|getStoreType
parameter_list|()
block|{
return|return
name|storeType
return|;
block|}
DECL|method|getFsWorkingPath ()
specifier|public
name|Path
name|getFsWorkingPath
parameter_list|()
block|{
return|return
name|fsWorkingPath
return|;
block|}
DECL|method|recoverFromStore ()
specifier|protected
name|void
name|recoverFromStore
parameter_list|()
throws|throws
name|IOException
block|{
comment|/*      * Steps of recover      * 1) Read from last mirror (from mirror or mirror.old)      * 2) Read from last edit log, and apply such edit log      * 3) Write new mirror to mirror.writing      * 4) Rename mirror to mirror.old      * 5) Move mirror.writing to mirror      * 6) Remove mirror.old      * 7) Remove edit log and create a new empty edit log      */
comment|// Open mirror from serialized file
name|Path
name|mirrorPath
init|=
operator|new
name|Path
argument_list|(
name|fsWorkingPath
argument_list|,
name|schema
operator|.
name|mirrorName
argument_list|)
decl_stmt|;
name|Path
name|oldMirrorPath
init|=
operator|new
name|Path
argument_list|(
name|fsWorkingPath
argument_list|,
name|schema
operator|.
name|mirrorName
operator|+
literal|".old"
argument_list|)
decl_stmt|;
name|loadFromMirror
argument_list|(
name|mirrorPath
argument_list|,
name|oldMirrorPath
argument_list|)
expr_stmt|;
comment|// Open and process editlog
name|editLogPath
operator|=
operator|new
name|Path
argument_list|(
name|fsWorkingPath
argument_list|,
name|schema
operator|.
name|editLogName
argument_list|)
expr_stmt|;
name|loadManagerFromEditLog
argument_list|(
name|editLogPath
argument_list|)
expr_stmt|;
comment|// Serialize current mirror to mirror.writing
name|Path
name|writingMirrorPath
init|=
operator|new
name|Path
argument_list|(
name|fsWorkingPath
argument_list|,
name|schema
operator|.
name|mirrorName
operator|+
literal|".writing"
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|os
init|=
name|fs
operator|.
name|create
argument_list|(
name|writingMirrorPath
argument_list|,
literal|true
argument_list|)
init|)
block|{
name|StoreOp
name|op
init|=
name|FSStoreOpHandler
operator|.
name|getMirrorOp
argument_list|(
name|storeType
argument_list|)
decl_stmt|;
name|op
operator|.
name|write
argument_list|(
name|os
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
comment|// Move mirror to mirror.old
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mirrorPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|oldMirrorPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|mirrorPath
argument_list|,
name|oldMirrorPath
argument_list|)
expr_stmt|;
block|}
comment|// move mirror.writing to mirror
name|fs
operator|.
name|rename
argument_list|(
name|writingMirrorPath
argument_list|,
name|mirrorPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|writingMirrorPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove mirror.old
name|fs
operator|.
name|delete
argument_list|(
name|oldMirrorPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// create a new editlog file
name|editlogOs
operator|=
name|fs
operator|.
name|create
argument_list|(
name|editLogPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|editlogOs
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished write mirror at:"
operator|+
name|mirrorPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished create editlog file at:"
operator|+
name|editLogPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|loadManagerFromEditLog (Path editLogPath)
specifier|protected
name|void
name|loadManagerFromEditLog
parameter_list|(
name|Path
name|editLogPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|editLogPath
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
init|(
name|FSDataInputStream
name|is
init|=
name|fs
operator|.
name|open
argument_list|(
name|editLogPath
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|StoreOp
name|storeOp
init|=
name|FSStoreOpHandler
operator|.
name|get
argument_list|(
name|is
operator|.
name|readInt
argument_list|()
argument_list|,
name|storeType
argument_list|)
decl_stmt|;
name|storeOp
operator|.
name|recover
argument_list|(
name|is
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// EOF hit, break
break|break;
block|}
block|}
block|}
block|}
DECL|method|getFs ()
specifier|public
name|FileSystem
name|getFs
parameter_list|()
block|{
return|return
name|fs
return|;
block|}
DECL|method|setFs (FileSystem fs)
specifier|public
name|void
name|setFs
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
block|}
DECL|method|closeFSStore ()
specifier|protected
name|void
name|closeFSStore
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeStreams
argument_list|(
name|fs
argument_list|,
name|editlogOs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

