begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NoRouteToHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RetriableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|NMNotYetReadyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ServerProxy
specifier|public
class|class
name|ServerProxy
block|{
DECL|method|createRetryPolicy (Configuration conf, String maxWaitTimeStr, long defMaxWaitTime, String connectRetryIntervalStr, long defRetryInterval)
specifier|protected
specifier|static
name|RetryPolicy
name|createRetryPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|maxWaitTimeStr
parameter_list|,
name|long
name|defMaxWaitTime
parameter_list|,
name|String
name|connectRetryIntervalStr
parameter_list|,
name|long
name|defRetryInterval
parameter_list|)
block|{
name|long
name|maxWaitTime
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|maxWaitTimeStr
argument_list|,
name|defMaxWaitTime
argument_list|)
decl_stmt|;
name|long
name|retryIntervalMS
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|connectRetryIntervalStr
argument_list|,
name|defRetryInterval
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
operator|(
name|maxWaitTime
operator|==
operator|-
literal|1
operator|||
name|maxWaitTime
operator|>
literal|0
operator|)
argument_list|,
literal|"Invalid Configuration. "
operator|+
name|maxWaitTimeStr
operator|+
literal|" should be either"
operator|+
literal|" positive value or -1."
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|retryIntervalMS
operator|>
literal|0
argument_list|,
literal|"Invalid Configuration. "
operator|+
name|connectRetryIntervalStr
operator|+
literal|"should be a positive value."
argument_list|)
expr_stmt|;
name|RetryPolicy
name|retryPolicy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|maxWaitTime
operator|==
operator|-
literal|1
condition|)
block|{
comment|// wait forever.
name|retryPolicy
operator|=
name|RetryPolicies
operator|.
name|retryForeverWithFixedSleep
argument_list|(
name|retryIntervalMS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|retryPolicy
operator|=
name|RetryPolicies
operator|.
name|retryUpToMaximumTimeWithFixedSleep
argument_list|(
name|maxWaitTime
argument_list|,
name|retryIntervalMS
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|exceptionToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|EOFException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|ConnectException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|NoRouteToHostException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|UnknownHostException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|ConnectTimeoutException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|RetriableException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|SocketException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
comment|/*      * Still keeping this to cover case like newer client talking      * to an older version of server      */
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|NMNotYetReadyException
operator|.
name|class
argument_list|,
name|retryPolicy
argument_list|)
expr_stmt|;
return|return
name|RetryPolicies
operator|.
name|retryByException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|exceptionToPolicyMap
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createRetriableProxy (final Configuration conf, final Class<T> protocol, final UserGroupInformation user, final YarnRPC rpc, final InetSocketAddress serverAddress, RetryPolicy retryPolicy)
specifier|protected
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createRetriableProxy
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
specifier|final
name|UserGroupInformation
name|user
parameter_list|,
specifier|final
name|YarnRPC
name|rpc
parameter_list|,
specifier|final
name|InetSocketAddress
name|serverAddress
parameter_list|,
name|RetryPolicy
name|retryPolicy
parameter_list|)
block|{
name|T
name|proxy
init|=
name|user
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|T
name|run
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|serverAddress
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|protocol
argument_list|,
name|proxy
argument_list|,
name|retryPolicy
argument_list|)
return|;
block|}
block|}
end_class

end_unit

