begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|RMHAServiceTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|RMHAUtils
specifier|public
class|class
name|RMHAUtils
block|{
DECL|method|findActiveRMHAId (YarnConfiguration conf)
specifier|public
specifier|static
name|String
name|findActiveRMHAId
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|)
block|{
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|rmIds
init|=
name|yarnConf
operator|.
name|getStringCollection
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|currentId
range|:
name|rmIds
control|)
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|currentId
argument_list|)
expr_stmt|;
try|try
block|{
name|HAServiceState
name|haState
init|=
name|getHAState
argument_list|(
name|yarnConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|haState
operator|.
name|equals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
condition|)
block|{
return|return
name|currentId
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Couldn't check if this RM is active. Do nothing. Worst case,
comment|// we wouldn't find an Active RM and return null.
block|}
block|}
return|return
literal|null
return|;
comment|// Couldn't find an Active RM
block|}
DECL|method|getHAState (YarnConfiguration yarnConf)
specifier|private
specifier|static
name|HAServiceState
name|getHAState
parameter_list|(
name|YarnConfiguration
name|yarnConf
parameter_list|)
throws|throws
name|Exception
block|{
name|HAServiceTarget
name|haServiceTarget
decl_stmt|;
name|int
name|rpcTimeoutForChecks
init|=
name|yarnConf
operator|.
name|getInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HA_FC_CLI_CHECK_TIMEOUT_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|HA_FC_CLI_CHECK_TIMEOUT_DEFAULT
argument_list|)
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_SERVICE_USER_NAME_KEY
argument_list|,
name|yarnConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|haServiceTarget
operator|=
operator|new
name|RMHAServiceTarget
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|HAServiceProtocol
name|proto
init|=
name|haServiceTarget
operator|.
name|getProxy
argument_list|(
name|yarnConf
argument_list|,
name|rpcTimeoutForChecks
argument_list|)
decl_stmt|;
name|HAServiceState
name|haState
init|=
name|proto
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
return|return
name|haState
return|;
block|}
DECL|method|getRMHAWebappAddresses ( final YarnConfiguration conf)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getRMHAWebappAddresses
parameter_list|(
specifier|final
name|YarnConfiguration
name|conf
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|rmIds
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|addrs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|useHttps
argument_list|(
name|conf
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|id
range|:
name|rmIds
control|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_HTTPS_ADDRESS
operator|+
literal|"."
operator|+
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|addrs
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|id
range|:
name|rmIds
control|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
operator|+
literal|"."
operator|+
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|addrs
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|addrs
return|;
block|}
block|}
end_class

end_unit

