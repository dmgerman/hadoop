begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|BoundedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|WriterOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SecureIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|AggregatedLogFormat
specifier|public
class|class
name|AggregatedLogFormat
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AggregatedLogFormat
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|APPLICATION_ACL_KEY
specifier|private
specifier|static
specifier|final
name|LogKey
name|APPLICATION_ACL_KEY
init|=
operator|new
name|LogKey
argument_list|(
literal|"APPLICATION_ACL"
argument_list|)
decl_stmt|;
DECL|field|APPLICATION_OWNER_KEY
specifier|private
specifier|static
specifier|final
name|LogKey
name|APPLICATION_OWNER_KEY
init|=
operator|new
name|LogKey
argument_list|(
literal|"APPLICATION_OWNER"
argument_list|)
decl_stmt|;
DECL|field|VERSION_KEY
specifier|private
specifier|static
specifier|final
name|LogKey
name|VERSION_KEY
init|=
operator|new
name|LogKey
argument_list|(
literal|"VERSION"
argument_list|)
decl_stmt|;
DECL|field|RESERVED_KEYS
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LogKey
argument_list|>
name|RESERVED_KEYS
decl_stmt|;
comment|//Maybe write out the retention policy.
comment|//Maybe write out a list of containerLogs skipped by the retention policy.
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
comment|/**    * Umask for the log file.    */
DECL|field|APP_LOG_FILE_UMASK
specifier|private
specifier|static
specifier|final
name|FsPermission
name|APP_LOG_FILE_UMASK
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
call|(
name|short
call|)
argument_list|(
literal|0640
operator|^
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
comment|/** Default permission for the log file. */
DECL|field|APP_LOG_FILE_PERM
specifier|private
specifier|static
specifier|final
name|FsPermission
name|APP_LOG_FILE_PERM
init|=
name|FsPermission
operator|.
name|getFileDefault
argument_list|()
operator|.
name|applyUMask
argument_list|(
name|APP_LOG_FILE_UMASK
argument_list|)
decl_stmt|;
static|static
block|{
name|RESERVED_KEYS
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|AggregatedLogFormat
operator|.
name|LogKey
argument_list|>
argument_list|()
expr_stmt|;
name|RESERVED_KEYS
operator|.
name|put
argument_list|(
name|APPLICATION_ACL_KEY
operator|.
name|toString
argument_list|()
argument_list|,
name|APPLICATION_ACL_KEY
argument_list|)
expr_stmt|;
name|RESERVED_KEYS
operator|.
name|put
argument_list|(
name|APPLICATION_OWNER_KEY
operator|.
name|toString
argument_list|()
argument_list|,
name|APPLICATION_OWNER_KEY
argument_list|)
expr_stmt|;
name|RESERVED_KEYS
operator|.
name|put
argument_list|(
name|VERSION_KEY
operator|.
name|toString
argument_list|()
argument_list|,
name|VERSION_KEY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Public
DECL|class|LogKey
specifier|public
specifier|static
class|class
name|LogKey
implements|implements
name|Writable
block|{
DECL|field|keyString
specifier|private
name|String
name|keyString
decl_stmt|;
DECL|method|LogKey ()
specifier|public
name|LogKey
parameter_list|()
block|{      }
DECL|method|LogKey (ContainerId containerId)
specifier|public
name|LogKey
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|keyString
operator|=
name|containerId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|LogKey (String keyString)
specifier|public
name|LogKey
parameter_list|(
name|String
name|keyString
parameter_list|)
block|{
name|this
operator|.
name|keyString
operator|=
name|keyString
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|keyString
operator|==
literal|null
condition|?
literal|0
else|:
name|keyString
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|LogKey
condition|)
block|{
name|LogKey
name|other
init|=
operator|(
name|LogKey
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|keyString
operator|==
literal|null
condition|)
block|{
return|return
name|other
operator|.
name|keyString
operator|==
literal|null
return|;
block|}
return|return
name|this
operator|.
name|keyString
operator|.
name|equals
argument_list|(
name|other
operator|.
name|keyString
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Private
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|keyString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|keyString
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|keyString
return|;
block|}
block|}
annotation|@
name|Private
DECL|class|LogValue
specifier|public
specifier|static
class|class
name|LogValue
block|{
DECL|field|rootLogDirs
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
decl_stmt|;
DECL|field|containerId
specifier|private
specifier|final
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|user
specifier|private
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|logAggregationContext
specifier|private
specifier|final
name|LogAggregationContext
name|logAggregationContext
decl_stmt|;
DECL|field|uploadedFiles
specifier|private
name|Set
argument_list|<
name|File
argument_list|>
name|uploadedFiles
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|alreadyUploadedLogFiles
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|alreadyUploadedLogFiles
decl_stmt|;
DECL|field|allExistingFileMeta
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|allExistingFileMeta
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|appFinished
specifier|private
specifier|final
name|boolean
name|appFinished
decl_stmt|;
DECL|field|containerFinished
specifier|private
specifier|final
name|boolean
name|containerFinished
decl_stmt|;
comment|/**      * The retention context to determine if log files are older than      * the retention policy configured.      */
DECL|field|logRetentionContext
specifier|private
specifier|final
name|LogRetentionContext
name|logRetentionContext
decl_stmt|;
comment|/**      * The set of log files that are older than retention policy that will      * not be uploaded but ready for deletion.      */
DECL|field|obseleteRetentionLogFiles
specifier|private
specifier|final
name|Set
argument_list|<
name|File
argument_list|>
name|obseleteRetentionLogFiles
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
comment|// TODO Maybe add a version string here. Instead of changing the version of
comment|// the entire k-v format
DECL|method|LogValue (List<String> rootLogDirs, ContainerId containerId, String user)
specifier|public
name|LogValue
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|this
argument_list|(
name|rootLogDirs
argument_list|,
name|containerId
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|LogValue (List<String> rootLogDirs, ContainerId containerId, String user, LogAggregationContext logAggregationContext, Set<String> alreadyUploadedLogFiles, LogRetentionContext retentionContext, boolean appFinished, boolean containerFinished)
specifier|public
name|LogValue
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|String
name|user
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|alreadyUploadedLogFiles
parameter_list|,
name|LogRetentionContext
name|retentionContext
parameter_list|,
name|boolean
name|appFinished
parameter_list|,
name|boolean
name|containerFinished
parameter_list|)
block|{
name|this
operator|.
name|rootLogDirs
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|rootLogDirs
argument_list|)
expr_stmt|;
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
comment|// Ensure logs are processed in lexical order
name|Collections
operator|.
name|sort
argument_list|(
name|this
operator|.
name|rootLogDirs
argument_list|)
expr_stmt|;
name|this
operator|.
name|logAggregationContext
operator|=
name|logAggregationContext
expr_stmt|;
name|this
operator|.
name|alreadyUploadedLogFiles
operator|=
name|alreadyUploadedLogFiles
expr_stmt|;
name|this
operator|.
name|appFinished
operator|=
name|appFinished
expr_stmt|;
name|this
operator|.
name|containerFinished
operator|=
name|containerFinished
expr_stmt|;
name|this
operator|.
name|logRetentionContext
operator|=
name|retentionContext
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getPendingLogFilesToUploadForThisContainer ()
specifier|public
name|Set
argument_list|<
name|File
argument_list|>
name|getPendingLogFilesToUploadForThisContainer
parameter_list|()
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|pendingUploadFiles
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|rootLogDir
range|:
name|this
operator|.
name|rootLogDirs
control|)
block|{
name|File
name|appLogDir
init|=
operator|new
name|File
argument_list|(
name|rootLogDir
argument_list|,
name|this
operator|.
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|containerLogDir
init|=
operator|new
name|File
argument_list|(
name|appLogDir
argument_list|,
name|this
operator|.
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containerLogDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
comment|// ContainerDir may have been deleted by the user.
block|}
name|pendingUploadFiles
operator|.
name|addAll
argument_list|(
name|getPendingLogFilesToUpload
argument_list|(
name|containerLogDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|pendingUploadFiles
return|;
block|}
DECL|method|write (DataOutputStream out, Set<File> pendingUploadFiles)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|pendingUploadFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|File
argument_list|>
name|fileList
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|(
name|pendingUploadFiles
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|fileList
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|logFile
range|:
name|fileList
control|)
block|{
comment|// We only aggregate top level files.
comment|// Ignore anything inside sub-folders.
if|if
condition|(
name|logFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|logFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is a directory. Ignore it."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|secureOpenFile
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logErrorMessage
argument_list|(
name|logFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|long
name|fileLength
init|=
name|logFile
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// Write the logFile Type
name|out
operator|.
name|writeUTF
argument_list|(
name|logFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write the log length as UTF so that it is printable
name|out
operator|.
name|writeUTF
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|fileLength
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write the log itself
try|try
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|65535
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|long
name|bytesLeft
init|=
name|fileLength
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//If buffer contents within fileLength, write
if|if
condition|(
name|len
operator|<
name|bytesLeft
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|bytesLeft
operator|-=
name|len
expr_stmt|;
block|}
comment|//else only write contents within fileLength, then exit early
else|else
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|bytesLeft
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|long
name|newLength
init|=
name|logFile
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileLength
operator|<
name|newLength
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Aggregated logs truncated by approximately "
operator|+
operator|(
name|newLength
operator|-
name|fileLength
operator|)
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|uploadedFiles
operator|.
name|add
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|logErrorMessage
argument_list|(
name|logFile
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|message
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|secureOpenFile (File logFile)
specifier|public
name|FileInputStream
name|secureOpenFile
parameter_list|(
name|File
name|logFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SecureIOUtils
operator|.
name|openForRead
argument_list|(
name|logFile
argument_list|,
name|getUser
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|logErrorMessage (File logFile, Exception e)
specifier|private
specifier|static
name|String
name|logErrorMessage
parameter_list|(
name|File
name|logFile
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Error aggregating log file. Log file : "
operator|+
name|logFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|". "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
comment|// Added for testing purpose.
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
DECL|method|getPendingLogFilesToUpload (File containerLogDir)
specifier|private
name|Set
argument_list|<
name|File
argument_list|>
name|getPendingLogFilesToUpload
parameter_list|(
name|File
name|containerLogDir
parameter_list|)
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|candidates
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|containerLogDir
operator|.
name|listFiles
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|logFile
range|:
name|candidates
control|)
block|{
name|this
operator|.
name|allExistingFileMeta
operator|.
name|add
argument_list|(
name|getLogFileMetaData
argument_list|(
name|logFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// if log files are older than retention policy, do not upload them.
comment|// but schedule them for deletion.
if|if
condition|(
name|logRetentionContext
operator|!=
literal|null
operator|&&
operator|!
name|logRetentionContext
operator|.
name|shouldRetainLog
argument_list|()
condition|)
block|{
name|obseleteRetentionLogFiles
operator|.
name|addAll
argument_list|(
name|candidates
argument_list|)
expr_stmt|;
name|candidates
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|candidates
return|;
block|}
name|Set
argument_list|<
name|File
argument_list|>
name|fileCandidates
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|(
name|candidates
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|logAggregationContext
operator|!=
literal|null
operator|&&
name|candidates
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fileCandidates
operator|=
name|getFileCandidates
argument_list|(
name|fileCandidates
argument_list|,
name|this
operator|.
name|appFinished
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|appFinished
operator|&&
name|this
operator|.
name|containerFinished
condition|)
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|addition
init|=
operator|new
name|HashSet
argument_list|<
name|File
argument_list|>
argument_list|(
name|candidates
argument_list|)
decl_stmt|;
name|addition
operator|=
name|getFileCandidates
argument_list|(
name|addition
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileCandidates
operator|.
name|addAll
argument_list|(
name|addition
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fileCandidates
return|;
block|}
DECL|method|getFileCandidates (Set<File> candidates, boolean useRegularPattern)
specifier|private
name|Set
argument_list|<
name|File
argument_list|>
name|getFileCandidates
parameter_list|(
name|Set
argument_list|<
name|File
argument_list|>
name|candidates
parameter_list|,
name|boolean
name|useRegularPattern
parameter_list|)
block|{
name|filterFiles
argument_list|(
name|useRegularPattern
condition|?
name|this
operator|.
name|logAggregationContext
operator|.
name|getIncludePattern
argument_list|()
else|:
name|this
operator|.
name|logAggregationContext
operator|.
name|getRolledLogsIncludePattern
argument_list|()
argument_list|,
name|candidates
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|filterFiles
argument_list|(
name|useRegularPattern
condition|?
name|this
operator|.
name|logAggregationContext
operator|.
name|getExcludePattern
argument_list|()
else|:
name|this
operator|.
name|logAggregationContext
operator|.
name|getRolledLogsExcludePattern
argument_list|()
argument_list|,
name|candidates
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Iterable
argument_list|<
name|File
argument_list|>
name|mask
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|candidates
argument_list|,
operator|new
name|Predicate
argument_list|<
name|File
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|File
name|next
parameter_list|)
block|{
return|return
operator|!
name|alreadyUploadedLogFiles
operator|.
name|contains
argument_list|(
name|getLogFileMetaData
argument_list|(
name|next
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|mask
argument_list|)
return|;
block|}
DECL|method|filterFiles (String pattern, Set<File> candidates, boolean exclusion)
specifier|private
name|void
name|filterFiles
parameter_list|(
name|String
name|pattern
parameter_list|,
name|Set
argument_list|<
name|File
argument_list|>
name|candidates
parameter_list|,
name|boolean
name|exclusion
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
operator|!
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Pattern
name|filterPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|File
argument_list|>
name|candidatesItr
init|=
name|candidates
operator|.
name|iterator
argument_list|()
init|;
name|candidatesItr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|candidate
init|=
name|candidatesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
name|filterPattern
operator|.
name|matcher
argument_list|(
name|candidate
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|match
operator|&&
operator|!
name|exclusion
operator|)
operator|||
operator|(
name|match
operator|&&
name|exclusion
operator|)
condition|)
block|{
name|candidatesItr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getCurrentUpLoadedFilesPath ()
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|getCurrentUpLoadedFilesPath
parameter_list|()
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|path
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|this
operator|.
name|uploadedFiles
control|)
block|{
name|path
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|method|getCurrentUpLoadedFileMeta ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getCurrentUpLoadedFileMeta
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|info
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|this
operator|.
name|uploadedFiles
control|)
block|{
name|info
operator|.
name|add
argument_list|(
name|getLogFileMetaData
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
DECL|method|getObseleteRetentionLogFiles ()
specifier|public
name|Set
argument_list|<
name|Path
argument_list|>
name|getObseleteRetentionLogFiles
parameter_list|()
block|{
name|Set
argument_list|<
name|Path
argument_list|>
name|path
init|=
operator|new
name|HashSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|this
operator|.
name|obseleteRetentionLogFiles
control|)
block|{
name|path
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
DECL|method|getAllExistingFilesMeta ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllExistingFilesMeta
parameter_list|()
block|{
return|return
name|this
operator|.
name|allExistingFileMeta
return|;
block|}
DECL|method|getLogFileMetaData (File file)
specifier|private
name|String
name|getLogFileMetaData
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|containerId
operator|.
name|toString
argument_list|()
operator|+
literal|"_"
operator|+
name|file
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|file
operator|.
name|lastModified
argument_list|()
return|;
block|}
block|}
comment|/**    * A context for log retention to determine if files are older than    * the retention policy configured in YarnConfiguration.    */
DECL|class|LogRetentionContext
specifier|public
specifier|static
class|class
name|LogRetentionContext
block|{
comment|/**      * The time used with logRetentionMillis, to determine ages of      * log files and if files need to be uploaded.      */
DECL|field|logInitedTimeMillis
specifier|private
specifier|final
name|long
name|logInitedTimeMillis
decl_stmt|;
comment|/**      * The numbers of milli seconds since a log file is created to determine      * if we should upload it. -1 if disabled.      * see YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS for details.      */
DECL|field|logRetentionMillis
specifier|private
specifier|final
name|long
name|logRetentionMillis
decl_stmt|;
DECL|method|LogRetentionContext (long logInitedTimeMillis, long logRetentionMillis)
specifier|public
name|LogRetentionContext
parameter_list|(
name|long
name|logInitedTimeMillis
parameter_list|,
name|long
name|logRetentionMillis
parameter_list|)
block|{
name|this
operator|.
name|logInitedTimeMillis
operator|=
name|logInitedTimeMillis
expr_stmt|;
name|this
operator|.
name|logRetentionMillis
operator|=
name|logRetentionMillis
expr_stmt|;
block|}
DECL|method|isDisabled ()
specifier|public
name|boolean
name|isDisabled
parameter_list|()
block|{
return|return
name|logInitedTimeMillis
operator|<
literal|0
operator|||
name|logRetentionMillis
operator|<
literal|0
return|;
block|}
DECL|method|shouldRetainLog ()
specifier|public
name|boolean
name|shouldRetainLog
parameter_list|()
block|{
return|return
name|isDisabled
argument_list|()
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|logInitedTimeMillis
operator|<
name|logRetentionMillis
return|;
block|}
block|}
comment|/**    * The writer that writes out the aggregated logs.    */
annotation|@
name|Private
DECL|class|LogWriter
specifier|public
specifier|static
class|class
name|LogWriter
block|{
DECL|field|fsDataOStream
specifier|private
specifier|final
name|FSDataOutputStream
name|fsDataOStream
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|TFile
operator|.
name|Writer
name|writer
decl_stmt|;
DECL|field|fc
specifier|private
name|FileContext
name|fc
decl_stmt|;
DECL|method|LogWriter (final Configuration conf, final Path remoteAppLogFile, UserGroupInformation userUgi)
specifier|public
name|LogWriter
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Path
name|remoteAppLogFile
parameter_list|,
name|UserGroupInformation
name|userUgi
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|this
operator|.
name|fsDataOStream
operator|=
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FSDataOutputStream
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|remoteAppLogFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|fc
operator|.
name|create
argument_list|(
name|remoteAppLogFile
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
name|Options
operator|.
name|CreateOpts
operator|.
name|perms
argument_list|(
name|APP_LOG_FILE_PERM
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Keys are not sorted: null arg
comment|// 256KB minBlockSize : Expected log size for each container too
name|this
operator|.
name|writer
operator|=
operator|new
name|TFile
operator|.
name|Writer
argument_list|(
name|this
operator|.
name|fsDataOStream
argument_list|,
literal|256
operator|*
literal|1024
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_COMPRESSION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE
argument_list|)
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//Write the version string
name|writeVersion
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getWriter ()
specifier|public
name|TFile
operator|.
name|Writer
name|getWriter
parameter_list|()
block|{
return|return
name|this
operator|.
name|writer
return|;
block|}
DECL|method|writeVersion ()
specifier|private
name|void
name|writeVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|VERSION_KEY
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeApplicationOwner (String user)
specifier|public
name|void
name|writeApplicationOwner
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|APPLICATION_OWNER_KEY
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|writeApplicationACLs (Map<ApplicationAccessType, String> appAcls)
specifier|public
name|void
name|writeApplicationACLs
parameter_list|(
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|APPLICATION_ACL_KEY
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|appAcls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|append (LogKey logKey, LogValue logValue)
specifier|public
name|void
name|append
parameter_list|(
name|LogKey
name|logKey
parameter_list|,
name|LogValue
name|logValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|File
argument_list|>
name|pendingUploadFiles
init|=
name|logValue
operator|.
name|getPendingLogFilesToUploadForThisContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|pendingUploadFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|DataOutputStream
name|out
init|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|logKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|this
operator|.
name|writer
operator|.
name|prepareAppendValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|logValue
operator|.
name|write
argument_list|(
name|out
argument_list|,
name|pendingUploadFiles
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception closing writer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fsDataOStream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|LogReader
specifier|public
specifier|static
class|class
name|LogReader
block|{
DECL|field|fsDataIStream
specifier|private
specifier|final
name|FSDataInputStream
name|fsDataIStream
decl_stmt|;
DECL|field|scanner
specifier|private
specifier|final
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
name|scanner
decl_stmt|;
DECL|field|reader
specifier|private
specifier|final
name|TFile
operator|.
name|Reader
name|reader
decl_stmt|;
DECL|method|LogReader (Configuration conf, Path remoteAppLogFile)
specifier|public
name|LogReader
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|remoteAppLogFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FileContext
name|fileContext
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|remoteAppLogFile
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|fsDataIStream
operator|=
name|fileContext
operator|.
name|open
argument_list|(
name|remoteAppLogFile
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|TFile
operator|.
name|Reader
argument_list|(
name|this
operator|.
name|fsDataIStream
argument_list|,
name|fileContext
operator|.
name|getFileStatus
argument_list|(
name|remoteAppLogFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|scanner
operator|=
name|reader
operator|.
name|createScanner
argument_list|()
expr_stmt|;
block|}
DECL|field|atBeginning
specifier|private
name|boolean
name|atBeginning
init|=
literal|true
decl_stmt|;
comment|/**      * Returns the owner of the application.      *       * @return the application owner.      * @throws IOException      */
DECL|method|getApplicationOwner ()
specifier|public
name|String
name|getApplicationOwner
parameter_list|()
throws|throws
name|IOException
block|{
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
name|ownerScanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ownerScanner
operator|=
name|reader
operator|.
name|createScanner
argument_list|()
expr_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|ownerScanner
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
operator|.
name|Entry
name|entry
init|=
name|ownerScanner
operator|.
name|entry
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|entry
operator|.
name|getKeyStream
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|APPLICATION_OWNER_KEY
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|DataInputStream
name|valueStream
init|=
name|entry
operator|.
name|getValueStream
argument_list|()
decl_stmt|;
return|return
name|valueStream
operator|.
name|readUTF
argument_list|()
return|;
block|}
name|ownerScanner
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|ownerScanner
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns ACLs for the application. An empty map is returned if no ACLs are      * found.      *       * @return a map of the Application ACLs.      * @throws IOException      */
DECL|method|getApplicationAcls ()
specifier|public
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|getApplicationAcls
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO Seek directly to the key once a comparator is specified.
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
name|aclScanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|aclScanner
operator|=
name|reader
operator|.
name|createScanner
argument_list|()
expr_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|aclScanner
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
operator|.
name|Entry
name|entry
init|=
name|aclScanner
operator|.
name|entry
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|entry
operator|.
name|getKeyStream
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|APPLICATION_ACL_KEY
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|DataInputStream
name|valueStream
init|=
name|entry
operator|.
name|getValueStream
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|appAccessOp
init|=
literal|null
decl_stmt|;
name|String
name|aclString
init|=
literal|null
decl_stmt|;
try|try
block|{
name|appAccessOp
operator|=
name|valueStream
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// Valid end of stream.
break|break;
block|}
try|try
block|{
name|aclString
operator|=
name|valueStream
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Error reading ACLs"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|valueOf
argument_list|(
name|appAccessOp
argument_list|)
argument_list|,
name|aclString
argument_list|)
expr_stmt|;
block|}
block|}
name|aclScanner
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
return|return
name|acls
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|aclScanner
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read the next key and return the value-stream.      *       * @param key      * @return the valueStream if there are more keys or null otherwise.      * @throws IOException      */
DECL|method|next (LogKey key)
specifier|public
name|DataInputStream
name|next
parameter_list|(
name|LogKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|atBeginning
condition|)
block|{
name|this
operator|.
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|atBeginning
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|scanner
operator|.
name|atEnd
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
operator|.
name|Entry
name|entry
init|=
name|this
operator|.
name|scanner
operator|.
name|entry
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|entry
operator|.
name|getKeyStream
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skip META keys
if|if
condition|(
name|RESERVED_KEYS
operator|.
name|containsKey
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|next
argument_list|(
name|key
argument_list|)
return|;
block|}
name|DataInputStream
name|valueStream
init|=
name|entry
operator|.
name|getValueStream
argument_list|()
decl_stmt|;
return|return
name|valueStream
return|;
block|}
comment|/**      * Get a ContainerLogsReader to read the logs for      * the specified container.      *      * @param containerId      * @return object to read the container's logs or null if the      *         logs could not be found      * @throws IOException      */
annotation|@
name|Private
DECL|method|getContainerLogsReader ( ContainerId containerId)
specifier|public
name|ContainerLogsReader
name|getContainerLogsReader
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerLogsReader
name|logReader
init|=
literal|null
decl_stmt|;
specifier|final
name|LogKey
name|containerKey
init|=
operator|new
name|LogKey
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|DataInputStream
name|valueStream
init|=
name|next
argument_list|(
name|key
argument_list|)
decl_stmt|;
while|while
condition|(
name|valueStream
operator|!=
literal|null
operator|&&
operator|!
name|key
operator|.
name|equals
argument_list|(
name|containerKey
argument_list|)
condition|)
block|{
name|valueStream
operator|=
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueStream
operator|!=
literal|null
condition|)
block|{
name|logReader
operator|=
operator|new
name|ContainerLogsReader
argument_list|(
name|valueStream
argument_list|)
expr_stmt|;
block|}
return|return
name|logReader
return|;
block|}
comment|//TODO  Change Log format and interfaces to be containerId specific.
comment|// Avoid returning completeValueStreams.
comment|//    public List<String> getTypesForContainer(DataInputStream valueStream){}
comment|//
comment|//    /**
comment|//     * @param valueStream
comment|//     *          The Log stream for the container.
comment|//     * @param fileType
comment|//     *          the log type required.
comment|//     * @return An InputStreamReader for the required log type or null if the
comment|//     *         type is not found.
comment|//     * @throws IOException
comment|//     */
comment|//    public InputStreamReader getLogStreamForType(DataInputStream valueStream,
comment|//        String fileType) throws IOException {
comment|//      valueStream.reset();
comment|//      try {
comment|//        while (true) {
comment|//          String ft = valueStream.readUTF();
comment|//          String fileLengthStr = valueStream.readUTF();
comment|//          long fileLength = Long.parseLong(fileLengthStr);
comment|//          if (ft.equals(fileType)) {
comment|//            BoundedInputStream bis =
comment|//                new BoundedInputStream(valueStream, fileLength);
comment|//            return new InputStreamReader(bis);
comment|//          } else {
comment|//            long totalSkipped = 0;
comment|//            long currSkipped = 0;
comment|//            while (currSkipped != -1&& totalSkipped< fileLength) {
comment|//              currSkipped = valueStream.skip(fileLength - totalSkipped);
comment|//              totalSkipped += currSkipped;
comment|//            }
comment|//            // TODO Verify skip behaviour.
comment|//            if (currSkipped == -1) {
comment|//              return null;
comment|//            }
comment|//          }
comment|//        }
comment|//      } catch (EOFException e) {
comment|//        return null;
comment|//      }
comment|//    }
comment|/**      * Writes all logs for a single container to the provided writer.      * @param valueStream      * @param writer      * @param logUploadedTime      * @throws IOException      */
DECL|method|readAcontainerLogs (DataInputStream valueStream, Writer writer, long logUploadedTime)
specifier|public
specifier|static
name|void
name|readAcontainerLogs
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|Writer
name|writer
parameter_list|,
name|long
name|logUploadedTime
parameter_list|)
throws|throws
name|IOException
block|{
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
name|PrintStream
name|ps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|WriterOutputStream
argument_list|(
name|writer
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|ps
operator|=
operator|new
name|PrintStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|readContainerLogs
argument_list|(
name|valueStream
argument_list|,
name|ps
argument_list|,
name|logUploadedTime
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
comment|// EndOfFile
return|return;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|ps
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Writes all logs for a single container to the provided writer.      * @param valueStream      * @param writer      * @throws IOException      */
DECL|method|readAcontainerLogs (DataInputStream valueStream, Writer writer)
specifier|public
specifier|static
name|void
name|readAcontainerLogs
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|readAcontainerLogs
argument_list|(
name|valueStream
argument_list|,
name|writer
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|readContainerLogs (DataInputStream valueStream, PrintStream out, long logUploadedTime, long bytes)
specifier|private
specifier|static
name|void
name|readContainerLogs
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|long
name|logUploadedTime
parameter_list|,
name|long
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|65535
index|]
decl_stmt|;
name|String
name|fileType
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|fileLengthStr
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|long
name|fileLength
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fileLengthStr
argument_list|)
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"LogType:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|fileType
argument_list|)
expr_stmt|;
if|if
condition|(
name|logUploadedTime
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Log Upload Time:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Times
operator|.
name|format
argument_list|(
name|logUploadedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"LogLength:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|fileLengthStr
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Log Contents:"
argument_list|)
expr_stmt|;
name|long
name|toSkip
init|=
literal|0
decl_stmt|;
name|long
name|totalBytesToRead
init|=
name|fileLength
decl_stmt|;
name|long
name|skipAfterRead
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bytes
operator|<
literal|0
condition|)
block|{
name|long
name|absBytes
init|=
name|Math
operator|.
name|abs
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|absBytes
operator|<
name|fileLength
condition|)
block|{
name|toSkip
operator|=
name|fileLength
operator|-
name|absBytes
expr_stmt|;
name|totalBytesToRead
operator|=
name|absBytes
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|valueStream
argument_list|,
name|toSkip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bytes
operator|<
name|fileLength
condition|)
block|{
name|totalBytesToRead
operator|=
name|bytes
expr_stmt|;
name|skipAfterRead
operator|=
name|fileLength
operator|-
name|bytes
expr_stmt|;
block|}
block|}
name|long
name|curRead
init|=
literal|0
decl_stmt|;
name|long
name|pendingRead
init|=
name|totalBytesToRead
operator|-
name|curRead
decl_stmt|;
name|int
name|toRead
init|=
name|pendingRead
operator|>
name|buf
operator|.
name|length
condition|?
name|buf
operator|.
name|length
else|:
operator|(
name|int
operator|)
name|pendingRead
decl_stmt|;
name|int
name|len
init|=
name|valueStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|!=
operator|-
literal|1
operator|&&
name|curRead
operator|<
name|totalBytesToRead
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|curRead
operator|+=
name|len
expr_stmt|;
name|pendingRead
operator|=
name|totalBytesToRead
operator|-
name|curRead
expr_stmt|;
name|toRead
operator|=
name|pendingRead
operator|>
name|buf
operator|.
name|length
condition|?
name|buf
operator|.
name|length
else|:
operator|(
name|int
operator|)
name|pendingRead
expr_stmt|;
name|len
operator|=
name|valueStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|valueStream
argument_list|,
name|skipAfterRead
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\nEnd of LogType:"
operator|+
name|fileType
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**      * Keep calling this till you get a {@link EOFException} for getting logs of      * all types for a single container.      *       * @param valueStream      * @param out      * @param logUploadedTime      * @throws IOException      */
DECL|method|readAContainerLogsForALogType ( DataInputStream valueStream, PrintStream out, long logUploadedTime)
specifier|public
specifier|static
name|void
name|readAContainerLogsForALogType
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|long
name|logUploadedTime
parameter_list|)
throws|throws
name|IOException
block|{
name|readContainerLogs
argument_list|(
name|valueStream
argument_list|,
name|out
argument_list|,
name|logUploadedTime
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Keep calling this till you get a {@link EOFException} for getting logs of      * all types for a single container for the specific bytes.      *      * @param valueStream      * @param out      * @param logUploadedTime      * @param bytes      * @throws IOException      */
DECL|method|readAContainerLogsForALogType ( DataInputStream valueStream, PrintStream out, long logUploadedTime, long bytes)
specifier|public
specifier|static
name|void
name|readAContainerLogsForALogType
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|long
name|logUploadedTime
parameter_list|,
name|long
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|readContainerLogs
argument_list|(
name|valueStream
argument_list|,
name|out
argument_list|,
name|logUploadedTime
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Keep calling this till you get a {@link EOFException} for getting logs of      * all types for a single container.      *       * @param valueStream      * @param out      * @throws IOException      */
DECL|method|readAContainerLogsForALogType ( DataInputStream valueStream, PrintStream out)
specifier|public
specifier|static
name|void
name|readAContainerLogsForALogType
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|readAContainerLogsForALogType
argument_list|(
name|valueStream
argument_list|,
name|out
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Keep calling this till you get a {@link EOFException} for getting logs of      * the specific types for a single container.      * @param valueStream      * @param out      * @param logUploadedTime      * @param logType      * @throws IOException      */
DECL|method|readContainerLogsForALogType ( DataInputStream valueStream, PrintStream out, long logUploadedTime, List<String> logType)
specifier|public
specifier|static
name|int
name|readContainerLogsForALogType
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|long
name|logUploadedTime
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|logType
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readContainerLogsForALogType
argument_list|(
name|valueStream
argument_list|,
name|out
argument_list|,
name|logUploadedTime
argument_list|,
name|logType
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * Keep calling this till you get a {@link EOFException} for getting logs of      * the specific types for a single container.      * @param valueStream      * @param out      * @param logUploadedTime      * @param logType      * @throws IOException      */
DECL|method|readContainerLogsForALogType ( DataInputStream valueStream, PrintStream out, long logUploadedTime, List<String> logType, long bytes)
specifier|public
specifier|static
name|int
name|readContainerLogsForALogType
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|long
name|logUploadedTime
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|logType
parameter_list|,
name|long
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|65535
index|]
decl_stmt|;
name|String
name|fileType
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|fileLengthStr
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|long
name|fileLength
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fileLengthStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|logType
operator|.
name|contains
argument_list|(
name|fileType
argument_list|)
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"LogType:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|fileType
argument_list|)
expr_stmt|;
if|if
condition|(
name|logUploadedTime
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"Log Upload Time:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|Times
operator|.
name|format
argument_list|(
name|logUploadedTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|print
argument_list|(
literal|"LogLength:"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|fileLengthStr
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Log Contents:"
argument_list|)
expr_stmt|;
name|long
name|toSkip
init|=
literal|0
decl_stmt|;
name|long
name|totalBytesToRead
init|=
name|fileLength
decl_stmt|;
name|long
name|skipAfterRead
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|bytes
operator|<
literal|0
condition|)
block|{
name|long
name|absBytes
init|=
name|Math
operator|.
name|abs
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|absBytes
operator|<
name|fileLength
condition|)
block|{
name|toSkip
operator|=
name|fileLength
operator|-
name|absBytes
expr_stmt|;
name|totalBytesToRead
operator|=
name|absBytes
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|valueStream
argument_list|,
name|toSkip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|bytes
operator|<
name|fileLength
condition|)
block|{
name|totalBytesToRead
operator|=
name|bytes
expr_stmt|;
name|skipAfterRead
operator|=
name|fileLength
operator|-
name|bytes
expr_stmt|;
block|}
block|}
name|long
name|curRead
init|=
literal|0
decl_stmt|;
name|long
name|pendingRead
init|=
name|totalBytesToRead
operator|-
name|curRead
decl_stmt|;
name|int
name|toRead
init|=
name|pendingRead
operator|>
name|buf
operator|.
name|length
condition|?
name|buf
operator|.
name|length
else|:
operator|(
name|int
operator|)
name|pendingRead
decl_stmt|;
name|int
name|len
init|=
name|valueStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|!=
operator|-
literal|1
operator|&&
name|curRead
operator|<
name|totalBytesToRead
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|curRead
operator|+=
name|len
expr_stmt|;
name|pendingRead
operator|=
name|totalBytesToRead
operator|-
name|curRead
expr_stmt|;
name|toRead
operator|=
name|pendingRead
operator|>
name|buf
operator|.
name|length
condition|?
name|buf
operator|.
name|length
else|:
operator|(
name|int
operator|)
name|pendingRead
expr_stmt|;
name|len
operator|=
name|valueStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|valueStream
argument_list|,
name|skipAfterRead
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"\nEnd of LogType:"
operator|+
name|fileType
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|long
name|totalSkipped
init|=
literal|0
decl_stmt|;
name|long
name|currSkipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|currSkipped
operator|!=
operator|-
literal|1
operator|&&
name|totalSkipped
operator|<
name|fileLength
condition|)
block|{
name|currSkipped
operator|=
name|valueStream
operator|.
name|skip
argument_list|(
name|fileLength
operator|-
name|totalSkipped
argument_list|)
expr_stmt|;
name|totalSkipped
operator|+=
name|currSkipped
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Private
DECL|method|readContainerMetaDataAndSkipData ( DataInputStream valueStream, PrintStream out)
specifier|public
specifier|static
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readContainerMetaDataAndSkipData
parameter_list|(
name|DataInputStream
name|valueStream
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileType
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|fileLengthStr
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|long
name|fileLength
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fileLengthStr
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|logMeta
init|=
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|fileType
argument_list|,
name|fileLengthStr
argument_list|)
decl_stmt|;
name|long
name|totalSkipped
init|=
literal|0
decl_stmt|;
name|long
name|currSkipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|currSkipped
operator|!=
operator|-
literal|1
operator|&&
name|totalSkipped
operator|<
name|fileLength
condition|)
block|{
name|currSkipped
operator|=
name|valueStream
operator|.
name|skip
argument_list|(
name|fileLength
operator|-
name|totalSkipped
argument_list|)
expr_stmt|;
name|totalSkipped
operator|+=
name|currSkipped
expr_stmt|;
block|}
return|return
name|logMeta
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|scanner
argument_list|,
name|reader
argument_list|,
name|fsDataIStream
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|class|ContainerLogsReader
specifier|public
specifier|static
class|class
name|ContainerLogsReader
block|{
DECL|field|valueStream
specifier|private
name|DataInputStream
name|valueStream
decl_stmt|;
DECL|field|currentLogType
specifier|private
name|String
name|currentLogType
init|=
literal|null
decl_stmt|;
DECL|field|currentLogLength
specifier|private
name|long
name|currentLogLength
init|=
literal|0
decl_stmt|;
DECL|field|currentLogData
specifier|private
name|BoundedInputStream
name|currentLogData
init|=
literal|null
decl_stmt|;
DECL|field|currentLogISR
specifier|private
name|InputStreamReader
name|currentLogISR
decl_stmt|;
DECL|method|ContainerLogsReader (DataInputStream stream)
specifier|public
name|ContainerLogsReader
parameter_list|(
name|DataInputStream
name|stream
parameter_list|)
block|{
name|valueStream
operator|=
name|stream
expr_stmt|;
block|}
DECL|method|nextLog ()
specifier|public
name|String
name|nextLog
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|currentLogData
operator|!=
literal|null
operator|&&
name|currentLogLength
operator|>
literal|0
condition|)
block|{
comment|// seek to the end of the current log, relying on BoundedInputStream
comment|// to prevent seeking past the end of the current log
do|do
block|{
if|if
condition|(
name|currentLogData
operator|.
name|skip
argument_list|(
name|currentLogLength
argument_list|)
operator|<
literal|0
condition|)
block|{
break|break;
block|}
block|}
do|while
condition|(
name|currentLogData
operator|.
name|read
argument_list|()
operator|!=
operator|-
literal|1
condition|)
do|;
block|}
name|currentLogType
operator|=
literal|null
expr_stmt|;
name|currentLogLength
operator|=
literal|0
expr_stmt|;
name|currentLogData
operator|=
literal|null
expr_stmt|;
name|currentLogISR
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|String
name|logType
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|logLengthStr
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|currentLogLength
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|logLengthStr
argument_list|)
expr_stmt|;
name|currentLogData
operator|=
operator|new
name|BoundedInputStream
argument_list|(
name|valueStream
argument_list|,
name|currentLogLength
argument_list|)
expr_stmt|;
name|currentLogData
operator|.
name|setPropagateClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|currentLogISR
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|currentLogData
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|currentLogType
operator|=
name|logType
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{       }
return|return
name|currentLogType
return|;
block|}
DECL|method|getCurrentLogType ()
specifier|public
name|String
name|getCurrentLogType
parameter_list|()
block|{
return|return
name|currentLogType
return|;
block|}
DECL|method|getCurrentLogLength ()
specifier|public
name|long
name|getCurrentLogLength
parameter_list|()
block|{
return|return
name|currentLogLength
return|;
block|}
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|currentLogData
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|currentLogData
operator|.
name|read
argument_list|()
return|;
block|}
DECL|method|read (byte[] buf, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|currentLogData
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|method|read (char[] buf, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|currentLogISR
operator|.
name|read
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

