begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Attribute value for String NodeAttributeType.  */
end_comment

begin_class
DECL|class|StringAttributeValue
specifier|public
class|class
name|StringAttributeValue
implements|implements
name|AttributeValue
block|{
DECL|field|value
specifier|private
name|String
name|value
init|=
literal|""
decl_stmt|;
annotation|@
name|Override
DECL|method|compareForOperation (AttributeValue other, AttributeExpressionOperation op)
specifier|public
name|boolean
name|compareForOperation
parameter_list|(
name|AttributeValue
name|other
parameter_list|,
name|AttributeExpressionOperation
name|op
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|StringAttributeValue
condition|)
block|{
name|StringAttributeValue
name|otherString
init|=
operator|(
name|StringAttributeValue
operator|)
name|other
decl_stmt|;
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|IN
case|:
return|return
name|value
operator|.
name|equals
argument_list|(
name|otherString
operator|.
name|value
argument_list|)
return|;
case|case
name|NOTIN
case|:
return|return
operator|!
name|value
operator|.
name|equals
argument_list|(
name|otherString
operator|.
name|value
argument_list|)
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|validateAndInitializeValue (String valueStr)
specifier|public
name|void
name|validateAndInitializeValue
parameter_list|(
name|String
name|valueStr
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeLabelUtil
operator|.
name|checkAndThrowAttributeValue
argument_list|(
name|valueStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|valueStr
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValue ()
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

