begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Flushable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntityGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonInclude
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|util
operator|.
name|MinimalPrettyPrinter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|SerializationFeature
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|type
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|module
operator|.
name|jaxb
operator|.
name|JaxbAnnotationIntrospector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_comment
comment|/**  * A simple writer class for storing Timeline data in any storage that  * implements a basic FileSystem interface.  * This writer is used for ATSv1.5.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FileSystemTimelineWriter
specifier|public
class|class
name|FileSystemTimelineWriter
extends|extends
name|TimelineWriter
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileSystemTimelineWriter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// App log directory must be readable by group so server can access logs
comment|// and writable by group so it can be deleted by server
DECL|field|APP_LOG_DIR_PERMISSIONS
specifier|private
specifier|static
specifier|final
name|short
name|APP_LOG_DIR_PERMISSIONS
init|=
literal|0770
decl_stmt|;
comment|// Logs must be readable by group so server can access them
DECL|field|FILE_LOG_PERMISSIONS
specifier|private
specifier|static
specifier|final
name|short
name|FILE_LOG_PERMISSIONS
init|=
literal|0640
decl_stmt|;
DECL|field|DOMAIN_LOG_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|DOMAIN_LOG_PREFIX
init|=
literal|"domainlog-"
decl_stmt|;
DECL|field|SUMMARY_LOG_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|SUMMARY_LOG_PREFIX
init|=
literal|"summarylog-"
decl_stmt|;
DECL|field|ENTITY_LOG_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|ENTITY_LOG_PREFIX
init|=
literal|"entitylog-"
decl_stmt|;
DECL|field|activePath
specifier|private
name|Path
name|activePath
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|summaryEntityTypes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|summaryEntityTypes
decl_stmt|;
DECL|field|objMapper
specifier|private
name|ObjectMapper
name|objMapper
init|=
literal|null
decl_stmt|;
DECL|field|flushIntervalSecs
specifier|private
name|long
name|flushIntervalSecs
decl_stmt|;
DECL|field|cleanIntervalSecs
specifier|private
name|long
name|cleanIntervalSecs
decl_stmt|;
DECL|field|ttl
specifier|private
name|long
name|ttl
decl_stmt|;
DECL|field|logFDsCache
specifier|private
name|LogFDsCache
name|logFDsCache
init|=
literal|null
decl_stmt|;
DECL|field|isAppendSupported
specifier|private
name|boolean
name|isAppendSupported
decl_stmt|;
DECL|field|attemptDirCache
specifier|private
specifier|final
name|AttemptDirCache
name|attemptDirCache
decl_stmt|;
DECL|method|FileSystemTimelineWriter (Configuration conf, UserGroupInformation authUgi, Client client, URI resURI)
specifier|public
name|FileSystemTimelineWriter
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserGroupInformation
name|authUgi
parameter_list|,
name|Client
name|client
parameter_list|,
name|URI
name|resURI
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|authUgi
argument_list|,
name|client
argument_list|,
name|resURI
argument_list|)
expr_stmt|;
name|Configuration
name|fsConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|activePath
operator|=
operator|new
name|Path
argument_list|(
name|fsConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|newInstance
argument_list|(
name|activePath
operator|.
name|toUri
argument_list|()
argument_list|,
name|fsConf
argument_list|)
expr_stmt|;
comment|// raise FileNotFoundException if the path is not found
name|fs
operator|.
name|getFileStatus
argument_list|(
name|activePath
argument_list|)
expr_stmt|;
name|summaryEntityTypes
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|conf
operator|.
name|getStringCollection
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_ENTITY_TYPES
argument_list|)
argument_list|)
expr_stmt|;
name|flushIntervalSecs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_FLUSH_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_FLUSH_INTERVAL_SECS_DEFAULT
argument_list|)
expr_stmt|;
name|cleanIntervalSecs
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_CLEAN_INTERVAL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_CLEAN_INTERVAL_SECS_DEFAULT
argument_list|)
expr_stmt|;
name|ttl
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS_DEFAULT
argument_list|)
expr_stmt|;
name|long
name|timerTaskTTL
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS
argument_list|,
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS_DEFAULT
argument_list|)
decl_stmt|;
name|logFDsCache
operator|=
operator|new
name|LogFDsCache
argument_list|(
name|flushIntervalSecs
argument_list|,
name|cleanIntervalSecs
argument_list|,
name|ttl
argument_list|,
name|timerTaskTTL
argument_list|)
expr_stmt|;
name|this
operator|.
name|isAppendSupported
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYFILE_FS_SUPPORT_APPEND
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|storeInsideUserDir
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_WITH_USER_DIR
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|objMapper
operator|=
name|createObjectMapper
argument_list|()
expr_stmt|;
name|int
name|attemptDirCacheSize
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_TIMELINE_SERVICE_CLIENT_INTERNAL_ATTEMPT_DIR_CACHE_SIZE
argument_list|)
decl_stmt|;
name|attemptDirCache
operator|=
operator|new
name|AttemptDirCache
argument_list|(
name|attemptDirCacheSize
argument_list|,
name|fs
argument_list|,
name|activePath
argument_list|,
name|authUgi
argument_list|,
name|storeInsideUserDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|StringBuilder
name|debugMSG
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|debugMSG
operator|.
name|append
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_FLUSH_INTERVAL_SECS
operator|+
literal|"="
operator|+
name|flushIntervalSecs
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_CLEAN_INTERVAL_SECS
operator|+
literal|"="
operator|+
name|cleanIntervalSecs
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS
operator|+
literal|"="
operator|+
name|ttl
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYFILE_FS_SUPPORT_APPEND
operator|+
literal|"="
operator|+
name|isAppendSupported
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_WITH_USER_DIR
operator|+
literal|"="
operator|+
name|storeInsideUserDir
operator|+
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR
operator|+
literal|"="
operator|+
name|activePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|summaryEntityTypes
operator|!=
literal|null
operator|&&
operator|!
name|summaryEntityTypes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|debugMSG
operator|.
name|append
argument_list|(
literal|", "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_ENTITY_TYPES
operator|+
literal|" = "
operator|+
name|summaryEntityTypes
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|debugMSG
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FileSystemTimelineWriter writing to "
operator|+
name|activePath
return|;
block|}
annotation|@
name|Override
DECL|method|putEntities ( ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities)
specifier|public
name|TimelinePutResponse
name|putEntities
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineEntityGroupId
name|groupId
parameter_list|,
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|appAttemptId
operator|==
literal|null
condition|)
block|{
return|return
name|putEntities
argument_list|(
name|entities
argument_list|)
return|;
block|}
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitiesToDBStore
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitiesToSummaryCache
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitiesToEntityCache
init|=
operator|new
name|ArrayList
argument_list|<
name|TimelineEntity
argument_list|>
argument_list|()
decl_stmt|;
name|Path
name|attemptDir
init|=
name|attemptDirCache
operator|.
name|getAppAttemptDir
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
if|if
condition|(
name|summaryEntityTypes
operator|.
name|contains
argument_list|(
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
condition|)
block|{
name|entitiesToSummaryCache
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|groupId
operator|!=
literal|null
condition|)
block|{
name|entitiesToEntityCache
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entitiesToDBStore
operator|.
name|add
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|entitiesToSummaryCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|summaryLogPath
init|=
operator|new
name|Path
argument_list|(
name|attemptDir
argument_list|,
name|SUMMARY_LOG_PREFIX
operator|+
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing summary log for {} to {}"
argument_list|,
name|appAttemptId
argument_list|,
name|summaryLogPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|logFDsCache
operator|.
name|writeSummaryEntityLogs
argument_list|(
name|fs
argument_list|,
name|summaryLogPath
argument_list|,
name|objMapper
argument_list|,
name|appAttemptId
argument_list|,
name|entitiesToSummaryCache
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entitiesToEntityCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|entityLogPath
init|=
operator|new
name|Path
argument_list|(
name|attemptDir
argument_list|,
name|ENTITY_LOG_PREFIX
operator|+
name|groupId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing entity log for {} to {}"
argument_list|,
name|groupId
argument_list|,
name|entityLogPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|logFDsCache
operator|.
name|writeEntityLogs
argument_list|(
name|fs
argument_list|,
name|entityLogPath
argument_list|,
name|objMapper
argument_list|,
name|appAttemptId
argument_list|,
name|groupId
argument_list|,
name|entitiesToEntityCache
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entitiesToDBStore
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|putEntities
argument_list|(
name|entitiesToDBStore
operator|.
name|toArray
argument_list|(
operator|new
name|TimelineEntity
index|[
name|entitiesToDBStore
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TimelinePutResponse
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|putDomain (ApplicationAttemptId appAttemptId, TimelineDomain domain)
specifier|public
name|void
name|putDomain
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|appAttemptId
operator|==
literal|null
condition|)
block|{
name|putDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeDomain
argument_list|(
name|appAttemptId
argument_list|,
name|domain
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|logFDsCache
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing cache"
argument_list|)
expr_stmt|;
name|logFDsCache
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|logFDsCache
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|logFDsCache
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|logFDsCache
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createObjectMapper ()
specifier|private
name|ObjectMapper
name|createObjectMapper
parameter_list|()
block|{
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|setAnnotationIntrospector
argument_list|(
operator|new
name|JaxbAnnotationIntrospector
argument_list|(
name|TypeFactory
operator|.
name|defaultInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|setSerializationInclusion
argument_list|(
name|JsonInclude
operator|.
name|Include
operator|.
name|NON_NULL
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|configure
argument_list|(
name|SerializationFeature
operator|.
name|FLUSH_AFTER_WRITE_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|mapper
return|;
block|}
DECL|method|writeDomain (ApplicationAttemptId appAttemptId, TimelineDomain domain)
specifier|private
name|void
name|writeDomain
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|domainLogPath
init|=
operator|new
name|Path
argument_list|(
name|attemptDirCache
operator|.
name|getAppAttemptDir
argument_list|(
name|appAttemptId
argument_list|)
argument_list|,
name|DOMAIN_LOG_PREFIX
operator|+
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing domains for {} to {}"
argument_list|,
name|appAttemptId
argument_list|,
name|domainLogPath
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|logFDsCache
operator|.
name|writeDomainLog
argument_list|(
name|fs
argument_list|,
name|domainLogPath
argument_list|,
name|objMapper
argument_list|,
name|domain
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
block|}
DECL|class|DomainLogFD
specifier|private
specifier|static
class|class
name|DomainLogFD
extends|extends
name|LogFD
block|{
DECL|method|DomainLogFD (FileSystem fs, Path logPath, ObjectMapper objMapper, boolean isAppendSupported)
specifier|public
name|DomainLogFD
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDomain (TimelineDomain domain)
specifier|public
name|void
name|writeDomain
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
block|{
name|getObjectMapper
argument_list|()
operator|.
name|writeValue
argument_list|(
name|getJsonGenerator
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|updateLastModifiedTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|EntityLogFD
specifier|private
specifier|static
class|class
name|EntityLogFD
extends|extends
name|LogFD
block|{
DECL|method|EntityLogFD (FileSystem fs, Path logPath, ObjectMapper objMapper, boolean isAppendSupported)
specifier|public
name|EntityLogFD
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
block|}
DECL|method|writeEntities (List<TimelineEntity> entities)
specifier|public
name|void
name|writeEntities
parameter_list|(
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writerClosed
argument_list|()
condition|)
block|{
name|prepareForWrite
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing entity list of size {}"
argument_list|,
name|entities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
name|getObjectMapper
argument_list|()
operator|.
name|writeValue
argument_list|(
name|getJsonGenerator
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
name|updateLastModifiedTime
argument_list|(
name|Time
operator|.
name|monotonicNow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LogFD
specifier|private
specifier|static
class|class
name|LogFD
block|{
DECL|field|stream
specifier|private
name|FSDataOutputStream
name|stream
decl_stmt|;
DECL|field|objMapper
specifier|private
name|ObjectMapper
name|objMapper
decl_stmt|;
DECL|field|jsonGenerator
specifier|private
name|JsonGenerator
name|jsonGenerator
decl_stmt|;
DECL|field|lastModifiedTime
specifier|private
name|long
name|lastModifiedTime
decl_stmt|;
DECL|field|isAppendSupported
specifier|private
specifier|final
name|boolean
name|isAppendSupported
decl_stmt|;
DECL|field|fdLock
specifier|private
specifier|final
name|ReentrantLock
name|fdLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|logPath
specifier|private
specifier|final
name|Path
name|logPath
decl_stmt|;
DECL|method|LogFD (FileSystem fs, Path logPath, ObjectMapper objMapper, boolean isAppendSupported)
specifier|public
name|LogFD
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|logPath
operator|=
name|logPath
expr_stmt|;
name|this
operator|.
name|isAppendSupported
operator|=
name|isAppendSupported
expr_stmt|;
name|this
operator|.
name|objMapper
operator|=
name|objMapper
expr_stmt|;
name|prepareForWrite
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|jsonGenerator
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
literal|null
expr_stmt|;
name|jsonGenerator
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|jsonGenerator
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stream
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getLastModifiedTime ()
specifier|public
name|long
name|getLastModifiedTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastModifiedTime
return|;
block|}
DECL|method|prepareForWrite ()
specifier|protected
name|void
name|prepareForWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|stream
operator|=
name|createLogFileStream
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
name|this
operator|.
name|jsonGenerator
operator|=
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createGenerator
argument_list|(
operator|(
name|OutputStream
operator|)
name|stream
argument_list|)
expr_stmt|;
name|this
operator|.
name|jsonGenerator
operator|.
name|setPrettyPrinter
argument_list|(
operator|new
name|MinimalPrettyPrinter
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastModifiedTime
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
block|}
DECL|method|writerClosed ()
specifier|protected
name|boolean
name|writerClosed
parameter_list|()
block|{
return|return
name|stream
operator|==
literal|null
return|;
block|}
DECL|method|createLogFileStream (FileSystem fileSystem, Path logPathToCreate)
specifier|private
name|FSDataOutputStream
name|createLogFileStream
parameter_list|(
name|FileSystem
name|fileSystem
parameter_list|,
name|Path
name|logPathToCreate
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|streamToCreate
decl_stmt|;
if|if
condition|(
operator|!
name|isAppendSupported
condition|)
block|{
name|logPathToCreate
operator|=
operator|new
name|Path
argument_list|(
name|logPathToCreate
operator|.
name|getParent
argument_list|()
argument_list|,
operator|(
name|logPathToCreate
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|logPathToCreate
argument_list|)
condition|)
block|{
name|streamToCreate
operator|=
name|fileSystem
operator|.
name|create
argument_list|(
name|logPathToCreate
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fileSystem
operator|.
name|setPermission
argument_list|(
name|logPathToCreate
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|FILE_LOG_PERMISSIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|streamToCreate
operator|=
name|fileSystem
operator|.
name|append
argument_list|(
name|logPathToCreate
argument_list|)
expr_stmt|;
block|}
return|return
name|streamToCreate
return|;
block|}
DECL|method|lock ()
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|this
operator|.
name|fdLock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|method|unlock ()
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|this
operator|.
name|fdLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|getJsonGenerator ()
specifier|protected
name|JsonGenerator
name|getJsonGenerator
parameter_list|()
block|{
return|return
name|jsonGenerator
return|;
block|}
DECL|method|getObjectMapper ()
specifier|protected
name|ObjectMapper
name|getObjectMapper
parameter_list|()
block|{
return|return
name|objMapper
return|;
block|}
DECL|method|updateLastModifiedTime (long updatedTime)
specifier|protected
name|void
name|updateLastModifiedTime
parameter_list|(
name|long
name|updatedTime
parameter_list|)
block|{
name|this
operator|.
name|lastModifiedTime
operator|=
name|updatedTime
expr_stmt|;
block|}
block|}
DECL|class|LogFDsCache
specifier|private
specifier|static
class|class
name|LogFDsCache
implements|implements
name|Closeable
implements|,
name|Flushable
block|{
DECL|field|domainLogFD
specifier|private
name|DomainLogFD
name|domainLogFD
decl_stmt|;
DECL|field|summanyLogFDs
specifier|private
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|summanyLogFDs
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
DECL|field|entityLogFDs
name|EntityLogFD
argument_list|>
argument_list|>
name|entityLogFDs
decl_stmt|;
DECL|field|flushTimer
specifier|private
name|Timer
name|flushTimer
init|=
literal|null
decl_stmt|;
DECL|field|cleanInActiveFDsTimer
specifier|private
name|Timer
name|cleanInActiveFDsTimer
init|=
literal|null
decl_stmt|;
DECL|field|monitorTaskTimer
specifier|private
name|Timer
name|monitorTaskTimer
init|=
literal|null
decl_stmt|;
DECL|field|ttl
specifier|private
specifier|final
name|long
name|ttl
decl_stmt|;
DECL|field|domainFDLocker
specifier|private
specifier|final
name|ReentrantLock
name|domainFDLocker
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|summaryTableLocker
specifier|private
specifier|final
name|ReentrantLock
name|summaryTableLocker
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|entityTableLocker
specifier|private
specifier|final
name|ReentrantLock
name|entityTableLocker
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|summaryTableCopyLocker
specifier|private
specifier|final
name|ReentrantLock
name|summaryTableCopyLocker
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|entityTableCopyLocker
specifier|private
specifier|final
name|ReentrantLock
name|entityTableCopyLocker
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|serviceStopped
specifier|private
specifier|volatile
name|boolean
name|serviceStopped
init|=
literal|false
decl_stmt|;
DECL|field|timerTaskStarted
specifier|private
specifier|volatile
name|boolean
name|timerTaskStarted
init|=
literal|false
decl_stmt|;
DECL|field|timerTaskLocker
specifier|private
specifier|final
name|ReentrantLock
name|timerTaskLocker
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|flushIntervalSecs
specifier|private
specifier|final
name|long
name|flushIntervalSecs
decl_stmt|;
DECL|field|cleanIntervalSecs
specifier|private
specifier|final
name|long
name|cleanIntervalSecs
decl_stmt|;
DECL|field|timerTaskRetainTTL
specifier|private
specifier|final
name|long
name|timerTaskRetainTTL
decl_stmt|;
DECL|field|timeStampOfLastWrite
specifier|private
specifier|volatile
name|long
name|timeStampOfLastWrite
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
DECL|field|timerTasksMonitorReadLock
specifier|private
specifier|final
name|ReadLock
name|timerTasksMonitorReadLock
decl_stmt|;
DECL|field|timerTasksMonitorWriteLock
specifier|private
specifier|final
name|WriteLock
name|timerTasksMonitorWriteLock
decl_stmt|;
DECL|method|LogFDsCache (long flushIntervalSecs, long cleanIntervalSecs, long ttl, long timerTaskRetainTTL)
specifier|public
name|LogFDsCache
parameter_list|(
name|long
name|flushIntervalSecs
parameter_list|,
name|long
name|cleanIntervalSecs
parameter_list|,
name|long
name|ttl
parameter_list|,
name|long
name|timerTaskRetainTTL
parameter_list|)
block|{
name|domainLogFD
operator|=
literal|null
expr_stmt|;
name|summanyLogFDs
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|()
expr_stmt|;
name|entityLogFDs
operator|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|ttl
operator|*
literal|1000
expr_stmt|;
name|this
operator|.
name|flushIntervalSecs
operator|=
name|flushIntervalSecs
expr_stmt|;
name|this
operator|.
name|cleanIntervalSecs
operator|=
name|cleanIntervalSecs
expr_stmt|;
name|long
name|timerTaskRetainTTLVar
init|=
name|timerTaskRetainTTL
operator|*
literal|1000
decl_stmt|;
if|if
condition|(
name|timerTaskRetainTTLVar
operator|>
name|this
operator|.
name|ttl
condition|)
block|{
name|this
operator|.
name|timerTaskRetainTTL
operator|=
name|timerTaskRetainTTLVar
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|timerTaskRetainTTL
operator|=
name|this
operator|.
name|ttl
operator|+
literal|2
operator|*
literal|60
operator|*
literal|1000
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"The specific "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_INTERNAL_TIMERS_TTL_SECS
operator|+
literal|" : "
operator|+
name|timerTaskRetainTTL
operator|+
literal|" is invalid, because it is less than or "
operator|+
literal|"equal to "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS
operator|+
literal|" : "
operator|+
name|ttl
operator|+
literal|". Use "
operator|+
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_FD_RETAIN_SECS
operator|+
literal|" : "
operator|+
name|ttl
operator|+
literal|" + 120s instead."
argument_list|)
expr_stmt|;
block|}
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|this
operator|.
name|timerTasksMonitorReadLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|timerTasksMonitorWriteLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|domainFDLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|domainLogFD
operator|!=
literal|null
condition|)
block|{
name|domainLogFD
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|domainFDLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|flushSummaryFDMap
argument_list|(
name|copySummaryLogFDs
argument_list|(
name|summanyLogFDs
argument_list|)
argument_list|)
expr_stmt|;
name|flushEntityFDMap
argument_list|(
name|copyEntityLogFDs
argument_list|(
name|entityLogFDs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copySummaryLogFDs ( Map<ApplicationAttemptId, EntityLogFD> summanyLogFDsToCopy)
specifier|private
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|copySummaryLogFDs
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|summanyLogFDsToCopy
parameter_list|)
block|{
name|summaryTableCopyLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|(
name|summanyLogFDsToCopy
argument_list|)
return|;
block|}
finally|finally
block|{
name|summaryTableCopyLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
DECL|method|copyEntityLogFDs (Map<ApplicationAttemptId, HashMap<TimelineEntityGroupId, EntityLogFD>> entityLogFDsToCopy)
name|EntityLogFD
argument_list|>
argument_list|>
name|copyEntityLogFDs
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|entityLogFDsToCopy
parameter_list|)
block|{
name|entityTableCopyLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
argument_list|(
name|entityLogFDsToCopy
argument_list|)
return|;
block|}
finally|finally
block|{
name|entityTableCopyLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|flushSummaryFDMap (Map<ApplicationAttemptId, EntityLogFD> logFDs)
specifier|private
name|void
name|flushSummaryFDMap
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|logFDs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDEntry
range|:
name|logFDs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityLogFD
name|logFD
init|=
name|logFDEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|logFD
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|flushEntityFDMap (Map<ApplicationAttemptId, HashMap< TimelineEntityGroupId, EntityLogFD>> logFDs)
specifier|private
name|void
name|flushEntityFDMap
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|logFDs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDMapEntry
range|:
name|logFDs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDMap
init|=
name|logFDMapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDEntry
range|:
name|logFDMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityLogFD
name|logFD
init|=
name|logFDEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|logFD
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|FlushTimerTask
specifier|private
class|class
name|FlushTimerTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|cleanInActiveFDs ()
specifier|private
name|void
name|cleanInActiveFDs
parameter_list|()
block|{
name|long
name|currentTimeStamp
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|this
operator|.
name|domainFDLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|domainLogFD
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentTimeStamp
operator|-
name|domainLogFD
operator|.
name|getLastModifiedTime
argument_list|()
operator|>=
name|ttl
condition|)
block|{
name|domainLogFD
operator|.
name|close
argument_list|()
expr_stmt|;
name|domainLogFD
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|domainFDLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|cleanInActiveSummaryFDsforMap
argument_list|(
name|copySummaryLogFDs
argument_list|(
name|summanyLogFDs
argument_list|)
argument_list|,
name|currentTimeStamp
argument_list|)
expr_stmt|;
name|cleanInActiveEntityFDsforMap
argument_list|(
name|copyEntityLogFDs
argument_list|(
name|entityLogFDs
argument_list|)
argument_list|,
name|currentTimeStamp
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanInActiveSummaryFDsforMap ( Map<ApplicationAttemptId, EntityLogFD> logFDs, long currentTimeStamp)
specifier|private
name|void
name|cleanInActiveSummaryFDsforMap
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDs
parameter_list|,
name|long
name|currentTimeStamp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|logFDs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDEntry
range|:
name|logFDs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityLogFD
name|logFD
init|=
name|logFDEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|currentTimeStamp
operator|-
name|logFD
operator|.
name|getLastModifiedTime
argument_list|()
operator|>=
name|ttl
condition|)
block|{
name|logFD
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|cleanInActiveEntityFDsforMap (Map<ApplicationAttemptId, HashMap<TimelineEntityGroupId, EntityLogFD>> logFDs, long currentTimeStamp)
specifier|private
name|void
name|cleanInActiveEntityFDsforMap
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDs
parameter_list|,
name|long
name|currentTimeStamp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|logFDs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDMapEntry
range|:
name|logFDs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDMap
init|=
name|logFDMapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDEntry
range|:
name|logFDMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityLogFD
name|logFD
init|=
name|logFDEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|currentTimeStamp
operator|-
name|logFD
operator|.
name|getLastModifiedTime
argument_list|()
operator|>=
name|ttl
condition|)
block|{
name|logFD
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|CleanInActiveFDsTask
specifier|private
class|class
name|CleanInActiveFDsTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|cleanInActiveFDs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TimerMonitorTask
specifier|private
class|class
name|TimerMonitorTask
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|timerTasksMonitorWriteLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|monitorTimerTasks
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|timerTasksMonitorWriteLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|monitorTimerTasks ()
specifier|private
name|void
name|monitorTimerTasks
parameter_list|()
block|{
if|if
condition|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|this
operator|.
name|timeStampOfLastWrite
operator|>=
name|this
operator|.
name|timerTaskRetainTTL
condition|)
block|{
name|cancelAndCloseTimerTasks
argument_list|()
expr_stmt|;
name|timerTaskStarted
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|monitorTaskTimer
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|monitorTaskTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerMonitorTask
argument_list|()
argument_list|,
name|this
operator|.
name|timerTaskRetainTTL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|serviceStopped
operator|=
literal|true
expr_stmt|;
name|cancelAndCloseTimerTasks
argument_list|()
expr_stmt|;
block|}
DECL|method|cancelAndCloseTimerTasks ()
specifier|private
name|void
name|cancelAndCloseTimerTasks
parameter_list|()
block|{
if|if
condition|(
name|flushTimer
operator|!=
literal|null
condition|)
block|{
name|flushTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|flushTimer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cleanInActiveFDsTimer
operator|!=
literal|null
condition|)
block|{
name|cleanInActiveFDsTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|cleanInActiveFDsTimer
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|monitorTaskTimer
operator|!=
literal|null
condition|)
block|{
name|monitorTaskTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|monitorTaskTimer
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|domainFDLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|domainLogFD
operator|!=
literal|null
condition|)
block|{
name|domainLogFD
operator|.
name|close
argument_list|()
expr_stmt|;
name|domainLogFD
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|domainFDLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|closeSummaryFDs
argument_list|(
name|summanyLogFDs
argument_list|)
expr_stmt|;
name|closeEntityFDs
argument_list|(
name|entityLogFDs
argument_list|)
expr_stmt|;
block|}
DECL|method|closeEntityFDs (Map<ApplicationAttemptId, HashMap<TimelineEntityGroupId, EntityLogFD>> logFDs)
specifier|private
name|void
name|closeEntityFDs
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDs
parameter_list|)
block|{
name|entityTableLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|logFDs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDMapEntry
range|:
name|logFDs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDMap
init|=
name|logFDMapEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDEntry
range|:
name|logFDMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityLogFD
name|logFD
init|=
name|logFDEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
name|logFD
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|entityTableLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|closeSummaryFDs ( Map<ApplicationAttemptId, EntityLogFD> logFDs)
specifier|private
name|void
name|closeSummaryFDs
parameter_list|(
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDs
parameter_list|)
block|{
name|summaryTableLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|logFDs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDEntry
range|:
name|logFDs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|EntityLogFD
name|logFD
init|=
name|logFDEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
name|logFD
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|summaryTableLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeDomainLog (FileSystem fs, Path logPath, ObjectMapper objMapper, TimelineDomain domain, boolean isAppendSupported)
specifier|public
name|void
name|writeDomainLog
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|TimelineDomain
name|domain
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAndStartTimeTasks
argument_list|()
expr_stmt|;
name|this
operator|.
name|domainFDLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|domainLogFD
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|domainLogFD
operator|.
name|writeDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|domainLogFD
operator|=
operator|new
name|DomainLogFD
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
name|this
operator|.
name|domainLogFD
operator|.
name|writeDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|domainFDLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeEntityLogs (FileSystem fs, Path entityLogPath, ObjectMapper objMapper, ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, List<TimelineEntity> entitiesToEntity, boolean isAppendSupported)
specifier|public
name|void
name|writeEntityLogs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|entityLogPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineEntityGroupId
name|groupId
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entitiesToEntity
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAndStartTimeTasks
argument_list|()
expr_stmt|;
name|writeEntityLogs
argument_list|(
name|fs
argument_list|,
name|entityLogPath
argument_list|,
name|objMapper
argument_list|,
name|appAttemptId
argument_list|,
name|groupId
argument_list|,
name|entitiesToEntity
argument_list|,
name|isAppendSupported
argument_list|,
name|this
operator|.
name|entityLogFDs
argument_list|)
expr_stmt|;
block|}
DECL|method|writeEntityLogs (FileSystem fs, Path logPath, ObjectMapper objMapper, ApplicationAttemptId attemptId, TimelineEntityGroupId groupId, List<TimelineEntity> entities, boolean isAppendSupported, Map<ApplicationAttemptId, HashMap< TimelineEntityGroupId, EntityLogFD>> logFDs)
specifier|private
name|void
name|writeEntityLogs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|TimelineEntityGroupId
name|groupId
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDs
parameter_list|)
throws|throws
name|IOException
block|{
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logMapFD
init|=
name|logFDs
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logMapFD
operator|!=
literal|null
condition|)
block|{
name|EntityLogFD
name|logFD
init|=
name|logMapFD
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logFD
operator|!=
literal|null
condition|)
block|{
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceStopped
condition|)
block|{
return|return;
block|}
name|logFD
operator|.
name|writeEntities
argument_list|(
name|entities
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|createEntityFDandWrite
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|attemptId
argument_list|,
name|groupId
argument_list|,
name|entities
argument_list|,
name|isAppendSupported
argument_list|,
name|logFDs
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|createEntityFDandWrite
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|attemptId
argument_list|,
name|groupId
argument_list|,
name|entities
argument_list|,
name|isAppendSupported
argument_list|,
name|logFDs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createEntityFDandWrite (FileSystem fs, Path logPath, ObjectMapper objMapper, ApplicationAttemptId attemptId, TimelineEntityGroupId groupId, List<TimelineEntity> entities, boolean isAppendSupported, Map<ApplicationAttemptId, HashMap< TimelineEntityGroupId, EntityLogFD>> logFDs)
specifier|private
name|void
name|createEntityFDandWrite
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|TimelineEntityGroupId
name|groupId
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|>
name|logFDs
parameter_list|)
throws|throws
name|IOException
block|{
name|entityTableLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceStopped
condition|)
block|{
return|return;
block|}
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDMap
init|=
name|logFDs
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logFDMap
operator|==
literal|null
condition|)
block|{
name|logFDMap
operator|=
operator|new
name|HashMap
argument_list|<
name|TimelineEntityGroupId
argument_list|,
name|EntityLogFD
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|EntityLogFD
name|logFD
init|=
name|logFDMap
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logFD
operator|==
literal|null
condition|)
block|{
name|logFD
operator|=
operator|new
name|EntityLogFD
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
block|}
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|logFD
operator|.
name|writeEntities
argument_list|(
name|entities
argument_list|)
expr_stmt|;
name|entityTableCopyLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|logFDMap
operator|.
name|put
argument_list|(
name|groupId
argument_list|,
name|logFD
argument_list|)
expr_stmt|;
name|logFDs
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|logFDMap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|entityTableCopyLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|entityTableLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeSummaryEntityLogs (FileSystem fs, Path logPath, ObjectMapper objMapper, ApplicationAttemptId attemptId, List<TimelineEntity> entities, boolean isAppendSupported)
specifier|public
name|void
name|writeSummaryEntityLogs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAndStartTimeTasks
argument_list|()
expr_stmt|;
name|writeSummmaryEntityLogs
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|attemptId
argument_list|,
name|entities
argument_list|,
name|isAppendSupported
argument_list|,
name|this
operator|.
name|summanyLogFDs
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSummmaryEntityLogs (FileSystem fs, Path logPath, ObjectMapper objMapper, ApplicationAttemptId attemptId, List<TimelineEntity> entities, boolean isAppendSupported, Map<ApplicationAttemptId, EntityLogFD> logFDs)
specifier|private
name|void
name|writeSummmaryEntityLogs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDs
parameter_list|)
throws|throws
name|IOException
block|{
name|EntityLogFD
name|logFD
init|=
literal|null
decl_stmt|;
name|logFD
operator|=
name|logFDs
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|logFD
operator|!=
literal|null
condition|)
block|{
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceStopped
condition|)
block|{
return|return;
block|}
name|logFD
operator|.
name|writeEntities
argument_list|(
name|entities
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|createSummaryFDAndWrite
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|attemptId
argument_list|,
name|entities
argument_list|,
name|isAppendSupported
argument_list|,
name|logFDs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSummaryFDAndWrite (FileSystem fs, Path logPath, ObjectMapper objMapper, ApplicationAttemptId attemptId, List<TimelineEntity> entities, boolean isAppendSupported, Map<ApplicationAttemptId, EntityLogFD> logFDs)
specifier|private
name|void
name|createSummaryFDAndWrite
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logPath
parameter_list|,
name|ObjectMapper
name|objMapper
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|entities
parameter_list|,
name|boolean
name|isAppendSupported
parameter_list|,
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|EntityLogFD
argument_list|>
name|logFDs
parameter_list|)
throws|throws
name|IOException
block|{
name|summaryTableLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceStopped
condition|)
block|{
return|return;
block|}
name|EntityLogFD
name|logFD
init|=
name|logFDs
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logFD
operator|==
literal|null
condition|)
block|{
name|logFD
operator|=
operator|new
name|EntityLogFD
argument_list|(
name|fs
argument_list|,
name|logPath
argument_list|,
name|objMapper
argument_list|,
name|isAppendSupported
argument_list|)
expr_stmt|;
block|}
name|logFD
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|logFD
operator|.
name|writeEntities
argument_list|(
name|entities
argument_list|)
expr_stmt|;
name|summaryTableCopyLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|logFDs
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|logFD
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|summaryTableCopyLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|logFD
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|summaryTableLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createAndStartTimerTasks ()
specifier|private
name|void
name|createAndStartTimerTasks
parameter_list|()
block|{
name|this
operator|.
name|flushTimer
operator|=
operator|new
name|Timer
argument_list|(
name|LogFDsCache
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"FlushTimer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|flushTimer
operator|.
name|schedule
argument_list|(
operator|new
name|FlushTimerTask
argument_list|()
argument_list|,
name|flushIntervalSecs
operator|*
literal|1000
argument_list|,
name|flushIntervalSecs
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanInActiveFDsTimer
operator|=
operator|new
name|Timer
argument_list|(
name|LogFDsCache
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"cleanInActiveFDsTimer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|cleanInActiveFDsTimer
operator|.
name|schedule
argument_list|(
operator|new
name|CleanInActiveFDsTask
argument_list|()
argument_list|,
name|cleanIntervalSecs
operator|*
literal|1000
argument_list|,
name|cleanIntervalSecs
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|monitorTaskTimer
operator|=
operator|new
name|Timer
argument_list|(
name|LogFDsCache
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"MonitorTimer"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|monitorTaskTimer
operator|.
name|schedule
argument_list|(
operator|new
name|TimerMonitorTask
argument_list|()
argument_list|,
name|this
operator|.
name|timerTaskRetainTTL
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAndStartTimeTasks ()
specifier|private
name|void
name|checkAndStartTimeTasks
parameter_list|()
block|{
name|this
operator|.
name|timerTasksMonitorReadLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|timeStampOfLastWrite
operator|=
name|Time
operator|.
name|monotonicNow
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|timerTaskStarted
condition|)
block|{
name|timerTaskLocker
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|timerTaskStarted
condition|)
block|{
name|createAndStartTimerTasks
argument_list|()
expr_stmt|;
name|timerTaskStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|timerTaskLocker
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|timerTasksMonitorReadLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|AttemptDirCache
specifier|private
specifier|static
class|class
name|AttemptDirCache
block|{
DECL|field|attemptDirCacheSize
specifier|private
specifier|final
name|int
name|attemptDirCacheSize
decl_stmt|;
DECL|field|attemptDirCache
specifier|private
specifier|final
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Path
argument_list|>
name|attemptDirCache
decl_stmt|;
DECL|field|fs
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|activePath
specifier|private
specifier|final
name|Path
name|activePath
decl_stmt|;
DECL|field|authUgi
specifier|private
specifier|final
name|UserGroupInformation
name|authUgi
decl_stmt|;
DECL|field|storeInsideUserDir
specifier|private
specifier|final
name|boolean
name|storeInsideUserDir
decl_stmt|;
DECL|method|AttemptDirCache (int cacheSize, FileSystem fs, Path activePath, UserGroupInformation ugi, boolean storeInsideUserDir)
specifier|public
name|AttemptDirCache
parameter_list|(
name|int
name|cacheSize
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|activePath
parameter_list|,
name|UserGroupInformation
name|ugi
parameter_list|,
name|boolean
name|storeInsideUserDir
parameter_list|)
block|{
name|this
operator|.
name|attemptDirCacheSize
operator|=
name|cacheSize
expr_stmt|;
name|this
operator|.
name|attemptDirCache
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Path
argument_list|>
argument_list|(
name|attemptDirCacheSize
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|Path
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>
name|attemptDirCacheSize
return|;
block|}
block|}
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|activePath
operator|=
name|activePath
expr_stmt|;
name|this
operator|.
name|authUgi
operator|=
name|ugi
expr_stmt|;
name|this
operator|.
name|storeInsideUserDir
operator|=
name|storeInsideUserDir
expr_stmt|;
block|}
DECL|method|getAppAttemptDir (ApplicationAttemptId attemptId)
specifier|public
name|Path
name|getAppAttemptDir
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|attemptDir
init|=
name|this
operator|.
name|attemptDirCache
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptDir
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|attemptDir
operator|=
name|this
operator|.
name|attemptDirCache
operator|.
name|get
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptDir
operator|==
literal|null
condition|)
block|{
name|attemptDir
operator|=
name|createAttemptDir
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|attemptDirCache
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|attemptDir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|attemptDir
return|;
block|}
DECL|method|createAttemptDir (ApplicationAttemptId appAttemptId)
specifier|private
name|Path
name|createAttemptDir
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appDir
init|=
name|createApplicationDir
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|attemptDir
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|attemptDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|APP_LOG_DIR_PERMISSIONS
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New attempt directory created - {}"
argument_list|,
name|attemptDir
argument_list|)
expr_stmt|;
block|}
return|return
name|attemptDir
return|;
block|}
DECL|method|createApplicationDir (ApplicationId appId)
specifier|private
name|Path
name|createApplicationDir
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|appRootDir
init|=
name|getAppRootDir
argument_list|(
name|authUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|appDir
init|=
operator|new
name|Path
argument_list|(
name|appRootDir
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|appDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|APP_LOG_DIR_PERMISSIONS
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New app directory created - {}"
argument_list|,
name|appDir
argument_list|)
expr_stmt|;
block|}
return|return
name|appDir
return|;
block|}
DECL|method|getAppRootDir (String user)
specifier|private
name|Path
name|getAppRootDir
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|storeInsideUserDir
condition|)
block|{
return|return
name|activePath
return|;
block|}
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|activePath
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|FileSystem
operator|.
name|mkdirs
argument_list|(
name|fs
argument_list|,
name|userDir
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|APP_LOG_DIR_PERMISSIONS
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New user directory created - {}"
argument_list|,
name|userDir
argument_list|)
expr_stmt|;
block|}
return|return
name|userDir
return|;
block|}
block|}
block|}
end_class

end_unit

