begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ResourceManagerAdministrationProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ClientRMProxy
specifier|public
class|class
name|ClientRMProxy
parameter_list|<
name|T
parameter_list|>
extends|extends
name|RMProxy
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ClientRMProxy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|ClientRMProtocols
specifier|private
interface|interface
name|ClientRMProtocols
extends|extends
name|ApplicationClientProtocol
extends|,
name|ApplicationMasterProtocol
extends|,
name|ResourceManagerAdministrationProtocol
block|{
comment|// Add nothing
block|}
DECL|method|ClientRMProxy ()
specifier|private
name|ClientRMProxy
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a proxy to the ResourceManager for the specified protocol.    * @param configuration Configuration with all the required information.    * @param protocol Client protocol for which proxy is being requested.    * @param<T> Type of proxy.    * @return Proxy to the ResourceManager for the specified client protocol.    * @throws IOException    */
DECL|method|createRMProxy (final Configuration configuration, final Class<T> protocol)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|createRMProxy
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientRMProxy
argument_list|<
name|T
argument_list|>
name|clientRMProxy
init|=
operator|new
name|ClientRMProxy
argument_list|<>
argument_list|()
decl_stmt|;
return|return
name|createRMProxy
argument_list|(
name|configuration
argument_list|,
name|protocol
argument_list|,
name|clientRMProxy
argument_list|)
return|;
block|}
DECL|method|setAMRMTokenService (final Configuration conf)
specifier|private
specifier|static
name|void
name|setAMRMTokenService
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|token
range|:
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getTokens
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|equals
argument_list|(
name|AMRMTokenIdentifier
operator|.
name|KIND_NAME
argument_list|)
condition|)
block|{
name|token
operator|.
name|setService
argument_list|(
name|getAMRMTokenService
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Private
annotation|@
name|Override
DECL|method|getRMAddress (YarnConfiguration conf, Class<?> protocol)
specifier|public
name|InetSocketAddress
name|getRMAddress
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|protocol
operator|==
name|ApplicationClientProtocol
operator|.
name|class
condition|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|==
name|ResourceManagerAdministrationProtocol
operator|.
name|class
condition|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADMIN_PORT
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|protocol
operator|==
name|ApplicationMasterProtocol
operator|.
name|class
condition|)
block|{
name|setAMRMTokenService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_PORT
argument_list|)
return|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Unsupported protocol found when creating the proxy "
operator|+
literal|"connection to ResourceManager: "
operator|+
operator|(
operator|(
name|protocol
operator|!=
literal|null
operator|)
condition|?
name|protocol
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|"null"
operator|)
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|Override
DECL|method|checkAllowedProtocols (Class<?> protocol)
specifier|public
name|void
name|checkAllowedProtocols
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|protocol
operator|.
name|isAssignableFrom
argument_list|(
name|ClientRMProtocols
operator|.
name|class
argument_list|)
argument_list|,
literal|"RM does not support this client protocol"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the token service name to be used for RMDelegationToken. Depending    * on whether HA is enabled or not, this method generates the appropriate    * service name as a comma-separated list of service addresses.    *    * @param conf Configuration corresponding to the cluster we need the    *             RMDelegationToken for    * @return - Service name for RMDelegationToken    */
annotation|@
name|Unstable
DECL|method|getRMDelegationTokenService (Configuration conf)
specifier|public
specifier|static
name|Text
name|getRMDelegationTokenService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getTokenService
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
return|;
block|}
annotation|@
name|Unstable
DECL|method|getAMRMTokenService (Configuration conf)
specifier|public
specifier|static
name|Text
name|getAMRMTokenService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|getTokenService
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_PORT
argument_list|)
return|;
block|}
annotation|@
name|Unstable
DECL|method|getTokenService (Configuration conf, String address, String defaultAddr, int defaultPort)
specifier|public
specifier|static
name|Text
name|getTokenService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|address
parameter_list|,
name|String
name|defaultAddr
parameter_list|,
name|int
name|defaultPort
parameter_list|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
comment|// Build a list of service addresses to form the service name
name|ArrayList
argument_list|<
name|String
argument_list|>
name|services
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rmId
range|:
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
comment|// Set RM_ID to get the corresponding RM_ADDRESS
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
name|services
operator|.
name|add
argument_list|(
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|yarnConf
operator|.
name|getSocketAddr
argument_list|(
name|address
argument_list|,
name|defaultAddr
argument_list|,
name|defaultPort
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Text
argument_list|(
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|services
argument_list|)
argument_list|)
return|;
block|}
comment|// Non-HA case - no need to set RM_ID
return|return
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|address
argument_list|,
name|defaultAddr
argument_list|,
name|defaultPort
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

