begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_comment
comment|/**  * This class contains several utility function which could be used in different  * log tools.  *  */
end_comment

begin_class
DECL|class|LogToolUtils
specifier|public
specifier|final
class|class
name|LogToolUtils
block|{
DECL|method|LogToolUtils ()
specifier|private
name|LogToolUtils
parameter_list|()
block|{}
comment|/**    * Return a list of {@link ContainerLogMeta} for a container    * from Remote FileSystem.    *    * @param conf the configuration    * @param appId the applicationId    * @param containerIdStr the containerId    * @param nodeId the nodeId    * @param appOwner the application owner    * @return a list of {@link ContainerLogMeta}    * @throws IOException if there is no available log file    */
DECL|method|getContainerLogMetaFromRemoteFS ( Configuration conf, ApplicationId appId, String containerIdStr, String nodeId, String appOwner)
specifier|public
specifier|static
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|getContainerLogMetaFromRemoteFS
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|appOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containersLogMeta
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|getAllContainers
init|=
operator|(
name|containerIdStr
operator|==
literal|null
operator|)
decl_stmt|;
name|String
name|nodeIdStr
init|=
operator|(
name|nodeId
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeFiles
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no available log fils for "
operator|+
literal|"application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
while|while
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|thisNodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeIdStr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|nodeIdStr
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
operator|!
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
condition|)
block|{
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|conf
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|DataInputStream
name|valueStream
decl_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|valueStream
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getAllContainers
operator|||
operator|(
name|key
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|containerIdStr
argument_list|)
operator|)
condition|)
block|{
name|ContainerLogMeta
name|containerLogMeta
init|=
operator|new
name|ContainerLogMeta
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|logMeta
init|=
name|LogReader
operator|.
name|readContainerMetaDataAndSkipData
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|containerLogMeta
operator|.
name|addLogMeta
argument_list|(
name|logMeta
operator|.
name|getFirst
argument_list|()
argument_list|,
name|logMeta
operator|.
name|getSecond
argument_list|()
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|thisNodeFile
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
break|break;
block|}
block|}
name|containersLogMeta
operator|.
name|add
argument_list|(
name|containerLogMeta
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getAllContainers
condition|)
block|{
break|break;
block|}
block|}
comment|// Next container
name|key
operator|=
operator|new
name|LogKey
argument_list|()
expr_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|containersLogMeta
return|;
block|}
block|}
end_class

end_unit

