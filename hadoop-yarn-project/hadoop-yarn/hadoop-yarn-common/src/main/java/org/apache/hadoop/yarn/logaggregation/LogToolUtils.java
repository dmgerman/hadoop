begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HarFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_comment
comment|/**  * This class contains several utility function which could be used in different  * log tools.  *  */
end_comment

begin_class
DECL|class|LogToolUtils
specifier|public
specifier|final
class|class
name|LogToolUtils
block|{
DECL|method|LogToolUtils ()
specifier|private
name|LogToolUtils
parameter_list|()
block|{}
DECL|field|CONTAINER_ON_NODE_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINER_ON_NODE_PATTERN
init|=
literal|"Container: %s on %s"
decl_stmt|;
comment|/**    * Return a list of {@link ContainerLogMeta} for a container    * from Remote FileSystem.    *    * @param conf the configuration    * @param appId the applicationId    * @param containerIdStr the containerId    * @param nodeId the nodeId    * @param appOwner the application owner    * @return a list of {@link ContainerLogMeta}    * @throws IOException if there is no available log file    */
DECL|method|getContainerLogMetaFromRemoteFS ( Configuration conf, ApplicationId appId, String containerIdStr, String nodeId, String appOwner)
specifier|public
specifier|static
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|getContainerLogMetaFromRemoteFS
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|appOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containersLogMeta
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|getAllContainers
init|=
operator|(
name|containerIdStr
operator|==
literal|null
operator|)
decl_stmt|;
name|String
name|nodeIdStr
init|=
operator|(
name|nodeId
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeFiles
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no available log fils for "
operator|+
literal|"application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
while|while
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|thisNodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeIdStr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|nodeIdStr
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
operator|!
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
condition|)
block|{
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|conf
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|DataInputStream
name|valueStream
decl_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|valueStream
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getAllContainers
operator|||
operator|(
name|key
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|containerIdStr
argument_list|)
operator|)
condition|)
block|{
name|ContainerLogMeta
name|containerLogMeta
init|=
operator|new
name|ContainerLogMeta
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|logMeta
init|=
name|LogReader
operator|.
name|readContainerMetaDataAndSkipData
argument_list|(
name|valueStream
argument_list|)
decl_stmt|;
name|containerLogMeta
operator|.
name|addLogMeta
argument_list|(
name|logMeta
operator|.
name|getFirst
argument_list|()
argument_list|,
name|logMeta
operator|.
name|getSecond
argument_list|()
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|thisNodeFile
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
break|break;
block|}
block|}
name|containersLogMeta
operator|.
name|add
argument_list|(
name|containerLogMeta
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getAllContainers
condition|)
block|{
break|break;
block|}
block|}
comment|// Next container
name|key
operator|=
operator|new
name|LogKey
argument_list|()
expr_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|containersLogMeta
return|;
block|}
comment|/**    * Output container log.    * @param containerId the containerId    * @param nodeId the nodeId    * @param fileName the log file name    * @param fileLength the log file length    * @param outputSize the output size    * @param lastModifiedTime the log file last modified time    * @param fis the log file input stream    * @param os the output stream    * @param buf the buffer    * @param logType the log type.    * @throws IOException if we can not access the log file.    */
DECL|method|outputContainerLog (String containerId, String nodeId, String fileName, long fileLength, long outputSize, String lastModifiedTime, InputStream fis, OutputStream os, byte[] buf, ContainerLogAggregationType logType)
specifier|public
specifier|static
name|void
name|outputContainerLog
parameter_list|(
name|String
name|containerId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|fileName
parameter_list|,
name|long
name|fileLength
parameter_list|,
name|long
name|outputSize
parameter_list|,
name|String
name|lastModifiedTime
parameter_list|,
name|InputStream
name|fis
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|,
name|ContainerLogAggregationType
name|logType
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|toSkip
init|=
literal|0
decl_stmt|;
name|long
name|totalBytesToRead
init|=
name|fileLength
decl_stmt|;
name|long
name|skipAfterRead
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|outputSize
operator|<
literal|0
condition|)
block|{
name|long
name|absBytes
init|=
name|Math
operator|.
name|abs
argument_list|(
name|outputSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|absBytes
operator|<
name|fileLength
condition|)
block|{
name|toSkip
operator|=
name|fileLength
operator|-
name|absBytes
expr_stmt|;
name|totalBytesToRead
operator|=
name|absBytes
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|fis
argument_list|,
name|toSkip
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|outputSize
operator|<
name|fileLength
condition|)
block|{
name|totalBytesToRead
operator|=
name|outputSize
expr_stmt|;
name|skipAfterRead
operator|=
name|fileLength
operator|-
name|outputSize
expr_stmt|;
block|}
block|}
name|long
name|curRead
init|=
literal|0
decl_stmt|;
name|long
name|pendingRead
init|=
name|totalBytesToRead
operator|-
name|curRead
decl_stmt|;
name|int
name|toRead
init|=
name|pendingRead
operator|>
name|buf
operator|.
name|length
condition|?
name|buf
operator|.
name|length
else|:
operator|(
name|int
operator|)
name|pendingRead
decl_stmt|;
name|int
name|len
init|=
name|fis
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
decl_stmt|;
name|boolean
name|keepGoing
init|=
operator|(
name|len
operator|!=
operator|-
literal|1
operator|&&
name|curRead
operator|<
name|totalBytesToRead
operator|)
decl_stmt|;
if|if
condition|(
name|keepGoing
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|containerStr
init|=
name|String
operator|.
name|format
argument_list|(
name|LogToolUtils
operator|.
name|CONTAINER_ON_NODE_PATTERN
argument_list|,
name|containerId
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|containerStr
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogAggregationType: "
operator|+
name|logType
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"="
argument_list|,
name|containerStr
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogType:"
operator|+
name|fileName
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogLastModifiedTime:"
operator|+
name|lastModifiedTime
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogLength:"
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|fileLength
argument_list|)
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"LogContents:\n"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|keepGoing
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|curRead
operator|+=
name|len
expr_stmt|;
name|pendingRead
operator|=
name|totalBytesToRead
operator|-
name|curRead
expr_stmt|;
name|toRead
operator|=
name|pendingRead
operator|>
name|buf
operator|.
name|length
condition|?
name|buf
operator|.
name|length
else|:
operator|(
name|int
operator|)
name|pendingRead
expr_stmt|;
name|len
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|keepGoing
operator|=
operator|(
name|len
operator|!=
operator|-
literal|1
operator|&&
name|curRead
operator|<
name|totalBytesToRead
operator|)
expr_stmt|;
block|}
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
operator|.
name|skipFully
argument_list|(
name|fis
argument_list|,
name|skipAfterRead
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|outputAggregatedContainerLog (Configuration conf, ApplicationId appId, String appOwner, String containerId, String nodeId, String logFileName, long outputSize, OutputStream os, byte[] buf)
specifier|public
specifier|static
name|boolean
name|outputAggregatedContainerLog
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|logFileName
parameter_list|,
name|long
name|outputSize
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|findLogs
init|=
literal|false
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|)
decl_stmt|;
while|while
condition|(
name|nodeFiles
operator|!=
literal|null
operator|&&
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|FileStatus
name|thisNodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|appId
operator|+
literal|".har"
argument_list|)
condition|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"har:///"
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
decl_stmt|;
name|nodeFiles
operator|=
name|HarFs
operator|.
name|get
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|listStatusIterator
argument_list|(
name|p
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeName
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|)
operator|&&
operator|!
name|nodeName
operator|.
name|endsWith
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
condition|)
block|{
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|conf
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|DataInputStream
name|valueStream
decl_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|valueStream
operator|!=
literal|null
operator|&&
operator|!
name|key
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
comment|// Next container
name|key
operator|=
operator|new
name|LogKey
argument_list|()
expr_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueStream
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|String
name|fileType
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|fileLengthStr
init|=
name|valueStream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|long
name|fileLength
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fileLengthStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|.
name|equalsIgnoreCase
argument_list|(
name|logFileName
argument_list|)
condition|)
block|{
name|LogToolUtils
operator|.
name|outputContainerLog
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|fileType
argument_list|,
name|fileLength
argument_list|,
name|outputSize
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|thisNodeFile
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|,
name|valueStream
argument_list|,
name|os
argument_list|,
name|buf
argument_list|,
name|ContainerLogAggregationType
operator|.
name|AGGREGATED
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|endOfFile
init|=
literal|"End of LogType:"
operator|+
name|fileType
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
operator|+
name|endOfFile
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"*"
argument_list|,
name|endOfFile
operator|.
name|length
argument_list|()
operator|+
literal|50
argument_list|)
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|sb
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|findLogs
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|long
name|totalSkipped
init|=
literal|0
decl_stmt|;
name|long
name|currSkipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|currSkipped
operator|!=
operator|-
literal|1
operator|&&
name|totalSkipped
operator|<
name|fileLength
condition|)
block|{
name|currSkipped
operator|=
name|valueStream
operator|.
name|skip
argument_list|(
name|fileLength
operator|-
name|totalSkipped
argument_list|)
expr_stmt|;
name|totalSkipped
operator|+=
name|currSkipped
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|findLogs
return|;
block|}
block|}
end_class

end_unit

