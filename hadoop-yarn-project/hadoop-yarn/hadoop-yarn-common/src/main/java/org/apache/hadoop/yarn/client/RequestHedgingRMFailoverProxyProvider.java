begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorCompletionService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * A FailoverProxyProvider implementation that technically does not "failover"  * per-se. It constructs a wrapper proxy that sends the request to ALL  * underlying proxies simultaneously. Each proxy inside the wrapper proxy will  * retry the corresponding target. It assumes the in an HA setup, there will be  * only one Active, and the active should respond faster than any configured  * standbys. Once it receives a response from any one of the configred proxies,  * outstanding requests to other proxies are immediately cancelled.  */
end_comment

begin_class
DECL|class|RequestHedgingRMFailoverProxyProvider
specifier|public
class|class
name|RequestHedgingRMFailoverProxyProvider
parameter_list|<
name|T
parameter_list|>
extends|extends
name|ConfiguredRMFailoverProxyProvider
argument_list|<
name|T
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RequestHedgingRMFailoverProxyProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|successfulProxy
specifier|private
specifier|volatile
name|String
name|successfulProxy
init|=
literal|null
decl_stmt|;
DECL|field|wrappedProxy
specifier|private
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|wrappedProxy
init|=
literal|null
decl_stmt|;
DECL|field|nonRetriableProxy
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|nonRetriableProxy
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|init (Configuration configuration, RMProxy<T> rmProxy, Class<T> protocol)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|RMProxy
argument_list|<
name|T
argument_list|>
name|rmProxy
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|configuration
argument_list|,
name|rmProxy
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|retriableProxies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|originalId
init|=
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rmId
range|:
name|rmServiceIds
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
name|nonRetriableProxy
operator|.
name|put
argument_list|(
name|rmId
argument_list|,
name|super
operator|.
name|getProxyInternal
argument_list|()
argument_list|)
expr_stmt|;
name|T
name|proxy
init|=
name|createRetriableProxy
argument_list|()
decl_stmt|;
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|pInfo
init|=
operator|new
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|(
name|proxy
argument_list|,
name|rmId
argument_list|)
decl_stmt|;
name|retriableProxies
operator|.
name|put
argument_list|(
name|rmId
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|originalId
argument_list|)
expr_stmt|;
name|T
name|proxyInstance
init|=
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|RMRequestHedgingInvocationHandler
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|protocol
block|}
operator|,
operator|new
name|RMRequestHedgingInvocationHandler
argument_list|(
name|retriableProxies
argument_list|)
block|)
function|;
name|String
name|combinedInfo
init|=
name|Arrays
operator|.
name|toString
argument_list|(
name|rmServiceIds
argument_list|)
decl_stmt|;
name|wrappedProxy
operator|=
operator|new
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|(
name|proxyInstance
argument_list|,
name|combinedInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created wrapped proxy for "
operator|+
name|combinedInfo
argument_list|)
expr_stmt|;
block|}
end_class

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createRetriableProxy ()
specifier|protected
name|T
name|createRetriableProxy
parameter_list|()
block|{
try|try
block|{
comment|// Create proxy that can retry exceptions properly.
name|RetryPolicy
name|retryPolicy
init|=
name|RMProxy
operator|.
name|createRetryPolicy
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmAddress
init|=
name|rmProxy
operator|.
name|getRMAddress
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|)
decl_stmt|;
name|T
name|proxy
init|=
name|RMProxy
operator|.
expr|<
name|T
operator|>
name|getProxy
argument_list|(
name|conf
argument_list|,
name|protocol
argument_list|,
name|rmAddress
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|protocol
argument_list|,
name|proxy
argument_list|,
name|retryPolicy
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create proxy to the ResourceManager "
operator|+
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_function

begin_class
DECL|class|RMRequestHedgingInvocationHandler
class|class
name|RMRequestHedgingInvocationHandler
implements|implements
name|InvocationHandler
block|{
DECL|field|allProxies
specifier|final
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|allProxies
decl_stmt|;
DECL|method|RMRequestHedgingInvocationHandler ( Map<String, ProxyInfo<T>> allProxies)
specifier|public
name|RMRequestHedgingInvocationHandler
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|allProxies
parameter_list|)
block|{
name|this
operator|.
name|allProxies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|allProxies
argument_list|)
expr_stmt|;
block|}
DECL|method|invokeMethod (Object proxy, Method method, Object[] args)
specifier|protected
name|Object
name|invokeMethod
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|proxy
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
operator|.
name|getCause
argument_list|()
throw|;
block|}
block|}
DECL|method|extraRootException (Exception ex)
specifier|private
name|Throwable
name|extraRootException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Throwable
name|rootCause
init|=
name|ex
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|ExecutionException
condition|)
block|{
name|Throwable
name|cause
init|=
name|ex
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|InvocationTargetException
condition|)
block|{
name|rootCause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|rootCause
return|;
block|}
comment|/**      * Creates a Executor and invokes all proxies concurrently.      */
annotation|@
name|Override
DECL|method|invoke (Object proxy, final Method method, final Object[] args)
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|successfulProxy
operator|!=
literal|null
condition|)
block|{
return|return
name|invokeMethod
argument_list|(
name|nonRetriableProxy
operator|.
name|get
argument_list|(
name|successfulProxy
argument_list|)
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Looking for the active RM in "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|rmServiceIds
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|ExecutorService
name|executor
init|=
literal|null
decl_stmt|;
name|CompletionService
argument_list|<
name|Object
argument_list|>
name|completionService
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|Future
argument_list|<
name|Object
argument_list|>
argument_list|,
name|ProxyInfo
argument_list|<
name|T
argument_list|>
argument_list|>
name|proxyMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|executor
operator|=
name|HadoopExecutors
operator|.
name|newFixedThreadPool
argument_list|(
name|allProxies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|completionService
operator|=
operator|new
name|ExecutorCompletionService
argument_list|<>
argument_list|(
name|executor
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|pInfo
range|:
name|allProxies
operator|.
name|values
argument_list|()
control|)
block|{
name|Callable
argument_list|<
name|Object
argument_list|>
name|c
init|=
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|pInfo
operator|.
name|proxy
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|proxyMap
operator|.
name|put
argument_list|(
name|completionService
operator|.
name|submit
argument_list|(
name|c
argument_list|)
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
block|}
name|Future
argument_list|<
name|Object
argument_list|>
name|callResultFuture
init|=
name|completionService
operator|.
name|take
argument_list|()
decl_stmt|;
name|String
name|pInfo
init|=
name|proxyMap
operator|.
name|get
argument_list|(
name|callResultFuture
argument_list|)
operator|.
name|proxyInfo
decl_stmt|;
name|successfulProxy
operator|=
name|pInfo
expr_stmt|;
name|Object
name|retVal
decl_stmt|;
try|try
block|{
name|retVal
operator|=
name|callResultFuture
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found active RM ["
operator|+
name|pInfo
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Throw exception from first responding RM so that clients can handle
comment|// appropriately
name|Throwable
name|rootCause
init|=
name|extraRootException
argument_list|(
name|ex
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Invocation returned exception: "
operator|+
name|rootCause
operator|.
name|toString
argument_list|()
operator|+
literal|" on "
operator|+
literal|"["
operator|+
name|pInfo
operator|+
literal|"], so propagating back to caller."
argument_list|)
expr_stmt|;
throw|throw
name|rootCause
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_function
annotation|@
name|Override
DECL|method|getProxy ()
specifier|public
name|ProxyInfo
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|()
block|{
return|return
name|wrappedProxy
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|performFailover (T currentProxy)
specifier|public
name|void
name|performFailover
parameter_list|(
name|T
name|currentProxy
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Connection lost with "
operator|+
name|successfulProxy
operator|+
literal|", trying to fail over."
argument_list|)
expr_stmt|;
name|successfulProxy
operator|=
literal|null
expr_stmt|;
block|}
end_function

unit|}
end_unit

