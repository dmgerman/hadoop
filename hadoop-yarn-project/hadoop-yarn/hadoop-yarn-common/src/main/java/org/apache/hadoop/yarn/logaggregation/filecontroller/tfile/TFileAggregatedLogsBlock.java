begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|tfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|CONTAINER_LOG_TYPE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HarFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationHtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|PRE
import|;
end_import

begin_comment
comment|/**  * The Aggregated Logs Block implementation for TFile.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"YARN"
block|,
literal|"MapReduce"
block|}
argument_list|)
DECL|class|TFileAggregatedLogsBlock
specifier|public
class|class
name|TFileAggregatedLogsBlock
extends|extends
name|LogAggregationHtmlBlock
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|remoteRootLogDir
specifier|private
name|Path
name|remoteRootLogDir
decl_stmt|;
DECL|field|remoteRootLogDirSuffix
specifier|private
name|String
name|remoteRootLogDirSuffix
decl_stmt|;
annotation|@
name|Inject
DECL|method|TFileAggregatedLogsBlock (ViewContext ctx, Configuration conf, Path remoteRootLogDir, String remoteRootLogDirSuffix)
specifier|public
name|TFileAggregatedLogsBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|remoteRootLogDirSuffix
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|remoteRootLogDir
operator|=
name|remoteRootLogDir
expr_stmt|;
name|this
operator|.
name|remoteRootLogDirSuffix
operator|=
name|remoteRootLogDirSuffix
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|BlockParameters
name|params
init|=
name|verifyAndParseParameters
argument_list|(
name|html
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
decl_stmt|;
try|try
block|{
name|nodeFiles
operator|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|params
operator|.
name|getAppId
argument_list|()
argument_list|,
name|params
operator|.
name|getAppOwner
argument_list|()
argument_list|,
name|remoteRootLogDir
argument_list|,
name|remoteRootLogDirSuffix
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"No logs available for container "
operator|+
name|params
operator|.
name|getContainerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|NodeId
name|nodeId
init|=
name|params
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|String
name|logEntity
init|=
name|params
operator|.
name|getLogEntity
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|params
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|params
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|params
operator|.
name|getStartIndex
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|params
operator|.
name|getEndIndex
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|params
operator|.
name|getStartTime
argument_list|()
decl_stmt|;
name|long
name|endTime
init|=
name|params
operator|.
name|getEndTime
argument_list|()
decl_stmt|;
name|boolean
name|foundLog
init|=
literal|false
decl_stmt|;
name|String
name|desiredLogType
init|=
name|$
argument_list|(
name|CONTAINER_LOG_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileStatus
name|thisNodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|params
operator|.
name|getAppId
argument_list|()
operator|+
literal|".har"
argument_list|)
condition|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"har:///"
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
decl_stmt|;
name|nodeFiles
operator|=
name|HarFs
operator|.
name|get
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|listStatusIterator
argument_list|(
name|p
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|||
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|logUploadedTime
init|=
name|thisNodeFile
operator|.
name|getModificationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|logUploadedTime
argument_list|<
name|startTime
operator|||
name|logUploadedTime
argument_list|>
name|endTime
condition|)
block|{
continue|continue;
block|}
name|reader
operator|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|conf
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|owner
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|owner
operator|=
name|reader
operator|.
name|getApplicationOwner
argument_list|()
expr_stmt|;
name|appAcls
operator|=
name|reader
operator|.
name|getApplicationAcls
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|e
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|remoteUser
init|=
name|request
argument_list|()
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkAcls
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|owner
argument_list|,
name|appAcls
argument_list|,
name|remoteUser
argument_list|)
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|__
argument_list|(
literal|"User ["
operator|+
name|remoteUser
operator|+
literal|"] is not authorized to view the logs for "
operator|+
name|logEntity
operator|+
literal|" in log file ["
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"User ["
operator|+
name|remoteUser
operator|+
literal|"] is not authorized to view the logs for "
operator|+
name|logEntity
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|AggregatedLogFormat
operator|.
name|ContainerLogsReader
name|logReader
init|=
name|reader
operator|.
name|getContainerLogsReader
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logReader
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|foundLog
operator|=
name|readContainerLogs
argument_list|(
name|html
argument_list|,
name|logReader
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|desiredLogType
argument_list|,
name|logUploadedTime
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundLog
condition|)
block|{
if|if
condition|(
name|desiredLogType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"No logs available for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"Unable to locate '"
operator|+
name|desiredLogType
operator|+
literal|"' log for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|__
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readContainerLogs (Block html, AggregatedLogFormat.ContainerLogsReader logReader, long startIndex, long endIndex, String desiredLogType, long logUpLoadTime, long startTime, long endTime)
specifier|private
name|boolean
name|readContainerLogs
parameter_list|(
name|Block
name|html
parameter_list|,
name|AggregatedLogFormat
operator|.
name|ContainerLogsReader
name|logReader
parameter_list|,
name|long
name|startIndex
parameter_list|,
name|long
name|endIndex
parameter_list|,
name|String
name|desiredLogType
parameter_list|,
name|long
name|logUpLoadTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|endTime
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
literal|65536
decl_stmt|;
name|byte
index|[]
name|cbuf
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|boolean
name|foundLog
init|=
literal|false
decl_stmt|;
name|String
name|logType
init|=
name|logReader
operator|.
name|nextLog
argument_list|()
decl_stmt|;
while|while
condition|(
name|logType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|desiredLogType
operator|==
literal|null
operator|||
name|desiredLogType
operator|.
name|isEmpty
argument_list|()
operator|||
name|desiredLogType
operator|.
name|equals
argument_list|(
name|logType
argument_list|)
condition|)
block|{
name|long
name|logLength
init|=
name|logReader
operator|.
name|getCurrentLogLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|foundLog
condition|)
block|{
name|html
operator|.
name|pre
argument_list|()
operator|.
name|__
argument_list|(
literal|"\n\n"
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"Log Type: "
operator|+
name|logType
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"Log Upload Time: "
operator|+
name|Times
operator|.
name|format
argument_list|(
name|logUpLoadTime
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"Log Length: "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|logLength
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|long
index|[]
name|range
init|=
name|checkParseRange
argument_list|(
name|html
argument_list|,
name|startIndex
argument_list|,
name|endIndex
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|logLength
argument_list|,
name|logType
argument_list|)
decl_stmt|;
name|processContainerLog
argument_list|(
name|html
argument_list|,
name|range
argument_list|,
name|logReader
argument_list|,
name|bufferSize
argument_list|,
name|cbuf
argument_list|)
expr_stmt|;
name|foundLog
operator|=
literal|true
expr_stmt|;
block|}
name|logType
operator|=
name|logReader
operator|.
name|nextLog
argument_list|()
expr_stmt|;
block|}
return|return
name|foundLog
return|;
block|}
block|}
end_class

end_unit

