begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Private
DECL|class|LogAggregationUtils
specifier|public
class|class
name|LogAggregationUtils
block|{
DECL|field|TMP_FILE_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|TMP_FILE_SUFFIX
init|=
literal|".tmp"
decl_stmt|;
DECL|field|BUCKET_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|BUCKET_SUFFIX
init|=
literal|"bucket_"
decl_stmt|;
comment|/**    * Constructs the full filename for an application's log file per node.    * @param remoteRootLogDir the aggregated remote root log dir    * @param appId the application Id    * @param user the application owner    * @param nodeId the node id    * @param suffix the log dir suffix    * @return the remote log file.    */
DECL|method|getRemoteNodeLogFileForApp (Path remoteRootLogDir, ApplicationId appId, String user, NodeId nodeId, String suffix)
specifier|public
specifier|static
name|Path
name|getRemoteNodeLogFileForApp
parameter_list|(
name|Path
name|remoteRootLogDir
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRemoteAppLogDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|appId
argument_list|,
name|user
argument_list|,
name|suffix
argument_list|)
argument_list|,
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Gets the remote app log dir.    * @param remoteRootLogDir the aggregated log remote root log dir    * @param appId the application id    * @param user the application owner    * @param suffix the log directory suffix    * @return the remote application specific log dir.    */
DECL|method|getRemoteAppLogDir (Path remoteRootLogDir, ApplicationId appId, String user, String suffix)
specifier|public
specifier|static
name|Path
name|getRemoteAppLogDir
parameter_list|(
name|Path
name|remoteRootLogDir
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getRemoteBucketDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|user
argument_list|,
name|suffix
argument_list|,
name|appId
argument_list|)
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Gets the older remote app log dir.    * @param appId the application id    * @param user the application owner    * @param remoteRootLogDir the aggregated log remote root log dir    * @param suffix the log directory suffix    * @return the remote application specific log dir.    */
DECL|method|getOlderRemoteAppLogDir (ApplicationId appId, String user, Path remoteRootLogDir, String suffix)
specifier|public
specifier|static
name|Path
name|getOlderRemoteAppLogDir
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|getOlderRemoteLogSuffixedDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|user
argument_list|,
name|suffix
argument_list|)
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getOlderRemoteAppLogDir (Configuration conf, ApplicationId appId, String user, Path remoteRootLogDir, String suffix)
specifier|public
specifier|static
name|Path
name|getOlderRemoteAppLogDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|remoteAppDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|qualifiedRemoteRootLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|remoteRootLogDir
argument_list|)
decl_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedRemoteRootLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|toMatch
init|=
name|LogAggregationUtils
operator|.
name|getOlderRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
literal|"*"
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|matching
init|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|globStatus
argument_list|(
name|toMatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|matching
operator|==
literal|null
operator|||
name|matching
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not find remote application directory for "
operator|+
literal|"the application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
name|remoteAppDir
operator|=
name|matching
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|remoteAppDir
operator|=
name|LogAggregationUtils
operator|.
name|getOlderRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
name|user
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
return|return
name|remoteAppDir
return|;
block|}
comment|/**    * Gets the remote suffixed log dir for the user.    * @param remoteRootLogDir the aggregated log remote root log dir    * @param user the application owner    * @param suffix the log dir suffix    * @return the remote suffixed log dir.    */
DECL|method|getRemoteLogSuffixedDir (Path remoteRootLogDir, String user, String suffix)
specifier|public
specifier|static
name|Path
name|getRemoteLogSuffixedDir
parameter_list|(
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
name|suffix
operator|=
name|getBucketSuffix
argument_list|()
operator|+
name|suffix
expr_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|getRemoteLogUserDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|user
argument_list|)
argument_list|,
name|suffix
argument_list|)
return|;
block|}
comment|/**    * Gets the older remote suffixed log dir for the user.    * @param remoteRootLogDir the aggregated log remote root log dir    * @param user the application owner    * @param suffix the log dir suffix    * @return the older remote suffixed log dir.    */
DECL|method|getOlderRemoteLogSuffixedDir (Path remoteRootLogDir, String user, String suffix)
specifier|public
specifier|static
name|Path
name|getOlderRemoteLogSuffixedDir
parameter_list|(
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|suffix
parameter_list|)
block|{
if|if
condition|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|getRemoteLogUserDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|// TODO Maybe support suffix to be more than a single file.
return|return
operator|new
name|Path
argument_list|(
name|getRemoteLogUserDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|user
argument_list|)
argument_list|,
name|suffix
argument_list|)
return|;
block|}
comment|/**    * Gets the remote log user dir.    * @param remoteRootLogDir the aggregated log remote root log dir    * @param user the application owner    * @return the remote per user log dir.    */
DECL|method|getRemoteLogUserDir (Path remoteRootLogDir, String user)
specifier|public
specifier|static
name|Path
name|getRemoteLogUserDir
parameter_list|(
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|user
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|,
name|user
argument_list|)
return|;
block|}
comment|/**    * Gets the remote log user's bucket dir.    * @param remoteRootLogDir the aggregated log remote root log dir    * @param user the application owner    * @param suffix the log dir suffix    * @param appId the application id    * @return the remote log per user per cluster timestamp per bucket dir.    */
DECL|method|getRemoteBucketDir (Path remoteRootLogDir, String user, String suffix, ApplicationId appId)
specifier|public
specifier|static
name|Path
name|getRemoteBucketDir
parameter_list|(
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|suffix
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
name|int
name|bucket
init|=
name|appId
operator|.
name|getId
argument_list|()
operator|%
literal|10000
decl_stmt|;
name|String
name|bucketDir
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%04d"
argument_list|,
name|bucket
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|getRemoteLogSuffixedDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|user
argument_list|,
name|suffix
argument_list|)
argument_list|,
name|bucketDir
argument_list|)
return|;
block|}
comment|/**    * Check if older Application Log Directory has to be included.    * @param conf the configuration    * @return Is Older App Log Dir enabled?    */
DECL|method|isOlderPathEnabled (Configuration conf)
specifier|public
specifier|static
name|boolean
name|isOlderPathEnabled
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_INCLUDE_OLDER
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR_INCLUDE_OLDER
argument_list|)
return|;
block|}
comment|/**    * Returns the suffix component of the log dir.    * @param conf the configuration    * @return the suffix which will be appended to the user log dir.    */
DECL|method|getRemoteNodeLogDirSuffix (Configuration conf)
specifier|public
specifier|static
name|String
name|getRemoteNodeLogDirSuffix
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|)
return|;
block|}
comment|/**    * Returns the bucket suffix component of the log dir.    * @return the bucket suffix which appended to user log dir    */
DECL|method|getBucketSuffix ()
specifier|public
specifier|static
name|String
name|getBucketSuffix
parameter_list|()
block|{
return|return
name|BUCKET_SUFFIX
return|;
block|}
comment|/**    * Converts a nodeId to a form used in the app log file name.    * @param nodeId the nodeId    * @return the node string to be used to construct the file name.    */
annotation|@
name|VisibleForTesting
DECL|method|getNodeString (NodeId nodeId)
specifier|public
specifier|static
name|String
name|getNodeString
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|nodeId
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNodeString (String nodeId)
specifier|public
specifier|static
name|String
name|getNodeString
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
return|return
name|nodeId
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
comment|/**    * Return the remote application log directory.    * @param conf the configuration    * @param appId the application    * @param appOwner the application owner    * @return the remote application log directory path    * @throws IOException if we can not find remote application log directory    */
DECL|method|getRemoteAppLogDir ( Configuration conf, ApplicationId appId, String appOwner)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|getRemoteAppLogDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suffix
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogDirSuffix
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|remoteRootLogDir
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
return|;
block|}
comment|/**    * Return the remote application log directory.    * @param conf the configuration    * @param appId the application    * @param appOwner the application owner    * @param remoteRootLogDir the remote root log directory    * @param suffix the log directory suffix    * @return the remote application log directory path    * @throws IOException if we can not find remote application log directory    */
DECL|method|getRemoteAppLogDir ( Configuration conf, ApplicationId appId, String appOwner, org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|getRemoteAppLogDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|remoteAppDir
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|appOwner
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|qualifiedRemoteRootLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|remoteRootLogDir
argument_list|)
decl_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedRemoteRootLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|toMatch
init|=
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|appId
argument_list|,
literal|"*"
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|matching
init|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|globStatus
argument_list|(
name|toMatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|matching
operator|==
literal|null
operator|||
name|matching
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can not find remote application directory for "
operator|+
literal|"the application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
name|remoteAppDir
operator|=
name|matching
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|remoteAppDir
operator|=
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
return|return
name|remoteAppDir
return|;
block|}
comment|/**    * Get all available log files under remote app log directory.    * @param conf the configuration    * @param remoteAppLogDir the application log directory    * @param appId the applicationId    * @param appOwner the application owner    * @return the iterator of available log files    * @throws IOException if there is no log file directory    */
DECL|method|getNodeFiles (Configuration conf, Path remoteAppLogDir, ApplicationId appId, String appOwner)
specifier|public
specifier|static
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|getNodeFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Path
name|remoteAppLogDir
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qualifiedLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|remoteAppLogDir
argument_list|)
decl_stmt|;
return|return
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|remoteAppLogDir
argument_list|)
return|;
block|}
comment|/**    * Get all available log files under remote app log directory.    * @param conf the configuration    * @param appId the applicationId    * @param appOwner the application owner    * @param remoteRootLogDir the remote root log directory    * @param suffix the log directory suffix    * @return the iterator of available log files    * @throws IOException if there is no log file available    */
DECL|method|getRemoteNodeFileDir ( Configuration conf, ApplicationId appId, String appOwner, org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)
specifier|public
specifier|static
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|getRemoteNodeFileDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFilesCur
init|=
literal|null
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFilesPrev
init|=
literal|null
decl_stmt|;
name|StringBuilder
name|diagnosticsMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Get Node Files from new app log dir
try|try
block|{
name|Path
name|remoteAppLogDir
init|=
name|getRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|nodeFilesCur
operator|=
name|getNodeFiles
argument_list|(
name|conf
argument_list|,
name|remoteAppLogDir
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|diagnosticsMsg
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// Get Node Files from old app log dir
if|if
condition|(
name|isOlderPathEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
try|try
block|{
name|Path
name|remoteAppLogDir
init|=
name|getOlderRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|nodeFilesPrev
operator|=
name|getNodeFiles
argument_list|(
name|conf
argument_list|,
name|remoteAppLogDir
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|diagnosticsMsg
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// Return older files if new app log dir does not exist
if|if
condition|(
name|nodeFilesCur
operator|==
literal|null
condition|)
block|{
return|return
name|nodeFilesPrev
return|;
block|}
elseif|else
if|if
condition|(
name|nodeFilesPrev
operator|!=
literal|null
condition|)
block|{
comment|// Return both new and old node files combined
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|curDir
init|=
name|nodeFilesCur
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|prevDir
init|=
name|nodeFilesPrev
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFilesCombined
init|=
operator|new
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|prevDir
operator|.
name|hasNext
argument_list|()
operator|||
name|curDir
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|prevDir
operator|.
name|hasNext
argument_list|()
condition|?
name|prevDir
operator|.
name|next
argument_list|()
else|:
name|curDir
operator|.
name|next
argument_list|()
return|;
block|}
block|}
decl_stmt|;
return|return
name|nodeFilesCombined
return|;
block|}
block|}
comment|// Error reading from or new app log dir does not exist
if|if
condition|(
name|nodeFilesCur
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|diagnosticsMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|nodeFilesCur
return|;
block|}
comment|/**    * Get all available log files under remote app log directory.    * @param conf the configuration    * @param appId the applicationId    * @param appOwner the application owner    * @param remoteRootLogDir the remote root log directory    * @param suffix the log directory suffix    * @return the list of available log files    * @throws IOException if there is no log file available    */
DECL|method|getRemoteNodeFileList ( Configuration conf, ApplicationId appId, String appOwner, org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)
specifier|public
specifier|static
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getRemoteNodeFileList
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
name|remoteRootLogDir
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|diagnosticsMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Get Node Files from new app log dir
try|try
block|{
name|Path
name|remoteAppLogDir
init|=
name|getRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|Path
name|qualifiedLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|remoteAppLogDir
argument_list|)
decl_stmt|;
name|nodeFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
name|remoteAppLogDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|diagnosticsMsg
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
comment|// Get Node Files from old app log dir
if|if
condition|(
name|isOlderPathEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
try|try
block|{
name|Path
name|remoteAppLogDir
init|=
name|getOlderRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|Path
name|qualifiedLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|remoteAppLogDir
argument_list|)
decl_stmt|;
name|nodeFiles
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|util
argument_list|()
operator|.
name|listStatus
argument_list|(
name|remoteAppLogDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|diagnosticsMsg
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Error reading from or new app log dir does not exist
if|if
condition|(
name|nodeFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|diagnosticsMsg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|nodeFiles
return|;
block|}
comment|/**    * Get all available log files under remote app log directory.    * @param conf the configuration    * @param appId the applicationId    * @param appOwner the application owner    * @return the iterator of available log files    * @throws IOException if there is no log file available    */
DECL|method|getRemoteNodeFileDir ( Configuration conf, ApplicationId appId, String appOwner)
specifier|public
specifier|static
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|getRemoteNodeFileDir
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|suffix
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogDirSuffix
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|remoteRootLogDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|remoteRootLogDir
argument_list|,
name|suffix
argument_list|)
return|;
block|}
block|}
end_class

end_unit

