begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|PreemptionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_comment
comment|/**  * Builder utilities to construct various objects.  *  */
end_comment

begin_class
DECL|class|BuilderUtils
specifier|public
class|class
name|BuilderUtils
block|{
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|class|ApplicationIdComparator
specifier|public
specifier|static
class|class
name|ApplicationIdComparator
implements|implements
name|Comparator
argument_list|<
name|ApplicationId
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (ApplicationId a1, ApplicationId a2)
specifier|public
name|int
name|compare
parameter_list|(
name|ApplicationId
name|a1
parameter_list|,
name|ApplicationId
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
return|;
block|}
block|}
DECL|class|ContainerIdComparator
specifier|public
specifier|static
class|class
name|ContainerIdComparator
implements|implements
name|java
operator|.
name|util
operator|.
name|Comparator
argument_list|<
name|ContainerId
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (ContainerId c1, ContainerId c2)
specifier|public
name|int
name|compare
parameter_list|(
name|ContainerId
name|c1
parameter_list|,
name|ContainerId
name|c2
parameter_list|)
block|{
return|return
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
return|;
block|}
block|}
DECL|class|ResourceRequestComparator
specifier|public
specifier|static
class|class
name|ResourceRequestComparator
implements|implements
name|java
operator|.
name|util
operator|.
name|Comparator
argument_list|<
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (org.apache.hadoop.yarn.api.records.ResourceRequest r1, org.apache.hadoop.yarn.api.records.ResourceRequest r2)
specifier|public
name|int
name|compare
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
name|r1
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
name|r2
parameter_list|)
block|{
comment|// Compare priority, host and capability
name|int
name|ret
init|=
name|r1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|String
name|h1
init|=
name|r1
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|String
name|h2
init|=
name|r2
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|ret
operator|=
name|h1
operator|.
name|compareTo
argument_list|(
name|h2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|ret
operator|=
name|r1
operator|.
name|getCapability
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
DECL|method|newLocalResource (URL url, LocalResourceType type, LocalResourceVisibility visibility, long size, long timestamp)
specifier|public
specifier|static
name|LocalResource
name|newLocalResource
parameter_list|(
name|URL
name|url
parameter_list|,
name|LocalResourceType
name|type
parameter_list|,
name|LocalResourceVisibility
name|visibility
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|LocalResource
name|resource
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResource
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVisibility
argument_list|(
name|visibility
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
DECL|method|newLocalResource (URI uri, LocalResourceType type, LocalResourceVisibility visibility, long size, long timestamp)
specifier|public
specifier|static
name|LocalResource
name|newLocalResource
parameter_list|(
name|URI
name|uri
parameter_list|,
name|LocalResourceType
name|type
parameter_list|,
name|LocalResourceVisibility
name|visibility
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
return|return
name|newLocalResource
argument_list|(
name|ConverterUtils
operator|.
name|getYarnUrlFromURI
argument_list|(
name|uri
argument_list|)
argument_list|,
name|type
argument_list|,
name|visibility
argument_list|,
name|size
argument_list|,
name|timestamp
argument_list|)
return|;
block|}
DECL|method|newApplicationId (RecordFactory recordFactory, long clustertimestamp, CharSequence id)
specifier|public
specifier|static
name|ApplicationId
name|newApplicationId
parameter_list|(
name|RecordFactory
name|recordFactory
parameter_list|,
name|long
name|clustertimestamp
parameter_list|,
name|CharSequence
name|id
parameter_list|)
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clustertimestamp
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newApplicationId (RecordFactory recordFactory, long clusterTimeStamp, int id)
specifier|public
specifier|static
name|ApplicationId
name|newApplicationId
parameter_list|(
name|RecordFactory
name|recordFactory
parameter_list|,
name|long
name|clusterTimeStamp
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTimeStamp
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|newApplicationId (long clusterTimeStamp, int id)
specifier|public
specifier|static
name|ApplicationId
name|newApplicationId
parameter_list|(
name|long
name|clusterTimeStamp
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clusterTimeStamp
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|newApplicationAttemptId ( ApplicationId appId, int attemptId)
specifier|public
specifier|static
name|ApplicationAttemptId
name|newApplicationAttemptId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
return|return
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|attemptId
argument_list|)
return|;
block|}
DECL|method|convert (long clustertimestamp, CharSequence id)
specifier|public
specifier|static
name|ApplicationId
name|convert
parameter_list|(
name|long
name|clustertimestamp
parameter_list|,
name|CharSequence
name|id
parameter_list|)
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|clustertimestamp
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newContainerId (ApplicationAttemptId appAttemptId, int containerId)
specifier|public
specifier|static
name|ContainerId
name|newContainerId
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|int
name|containerId
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|containerId
argument_list|)
return|;
block|}
DECL|method|newContainerId (int appId, int appAttemptId, long timestamp, int id)
specifier|public
specifier|static
name|ContainerId
name|newContainerId
parameter_list|(
name|int
name|appId
parameter_list|,
name|int
name|appAttemptId
parameter_list|,
name|long
name|timestamp
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|newApplicationId
argument_list|(
name|timestamp
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|newApplicationAttemptId
argument_list|(
name|applicationId
argument_list|,
name|appAttemptId
argument_list|)
decl_stmt|;
name|ContainerId
name|cId
init|=
name|newContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
name|id
argument_list|)
decl_stmt|;
return|return
name|cId
return|;
block|}
DECL|method|newContainerToken (ContainerId cId, String host, int port, String user, Resource r, long expiryTime, int masterKeyId, byte[] password, long rmIdentifier)
specifier|public
specifier|static
name|Token
name|newContainerToken
parameter_list|(
name|ContainerId
name|cId
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|user
parameter_list|,
name|Resource
name|r
parameter_list|,
name|long
name|expiryTime
parameter_list|,
name|int
name|masterKeyId
parameter_list|,
name|byte
index|[]
name|password
parameter_list|,
name|long
name|rmIdentifier
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerTokenIdentifier
name|identifier
init|=
operator|new
name|ContainerTokenIdentifier
argument_list|(
name|cId
argument_list|,
name|host
argument_list|,
name|user
argument_list|,
name|r
argument_list|,
name|expiryTime
argument_list|,
name|masterKeyId
argument_list|,
name|rmIdentifier
argument_list|)
decl_stmt|;
return|return
name|newContainerToken
argument_list|(
name|BuilderUtils
operator|.
name|newNodeId
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|,
name|password
argument_list|,
name|identifier
argument_list|)
return|;
block|}
DECL|method|newContainerId (RecordFactory recordFactory, ApplicationId appId, ApplicationAttemptId appAttemptId, int containerId)
specifier|public
specifier|static
name|ContainerId
name|newContainerId
parameter_list|(
name|RecordFactory
name|recordFactory
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|int
name|containerId
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|containerId
argument_list|)
return|;
block|}
DECL|method|newNodeId (String host, int port)
specifier|public
specifier|static
name|NodeId
name|newNodeId
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
return|return
name|NodeId
operator|.
name|newInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
DECL|method|newNodeReport (NodeId nodeId, NodeState nodeState, String httpAddress, String rackName, Resource used, Resource capability, int numContainers, NodeHealthStatus nodeHealthStatus)
specifier|public
specifier|static
name|NodeReport
name|newNodeReport
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|NodeState
name|nodeState
parameter_list|,
name|String
name|httpAddress
parameter_list|,
name|String
name|rackName
parameter_list|,
name|Resource
name|used
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|NodeHealthStatus
name|nodeHealthStatus
parameter_list|)
block|{
name|NodeReport
name|nodeReport
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|NodeReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|nodeReport
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setNodeState
argument_list|(
name|nodeState
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setHttpAddress
argument_list|(
name|httpAddress
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setRackName
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setUsed
argument_list|(
name|used
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setNumContainers
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|nodeReport
operator|.
name|setNodeHealthStatus
argument_list|(
name|nodeHealthStatus
argument_list|)
expr_stmt|;
return|return
name|nodeReport
return|;
block|}
DECL|method|newContainerStatus (ContainerId containerId, ContainerState containerState, String diagnostics, int exitStatus)
specifier|public
specifier|static
name|ContainerStatus
name|newContainerStatus
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|ContainerState
name|containerState
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|int
name|exitStatus
parameter_list|)
block|{
name|ContainerStatus
name|containerStatus
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|containerStatus
operator|.
name|setState
argument_list|(
name|containerState
argument_list|)
expr_stmt|;
name|containerStatus
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|containerStatus
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
name|exitStatus
argument_list|)
expr_stmt|;
return|return
name|containerStatus
return|;
block|}
DECL|method|newContainer (ContainerId containerId, NodeId nodeId, String nodeHttpAddress, Resource resource, Priority priority, Token containerToken)
specifier|public
specifier|static
name|Container
name|newContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|nodeHttpAddress
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Token
name|containerToken
parameter_list|)
block|{
name|Container
name|container
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|container
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|container
operator|.
name|setNodeHttpAddress
argument_list|(
name|nodeHttpAddress
argument_list|)
expr_stmt|;
name|container
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|container
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|container
operator|.
name|setContainerToken
argument_list|(
name|containerToken
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|newToken (Class<T> tokenClass, byte[] identifier, String kind, byte[] password, String service)
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Token
parameter_list|>
name|T
name|newToken
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|tokenClass
parameter_list|,
name|byte
index|[]
name|identifier
parameter_list|,
name|String
name|kind
parameter_list|,
name|byte
index|[]
name|password
parameter_list|,
name|String
name|service
parameter_list|)
block|{
name|T
name|token
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|tokenClass
argument_list|)
decl_stmt|;
name|token
operator|.
name|setIdentifier
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|identifier
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|.
name|setKind
argument_list|(
name|kind
argument_list|)
expr_stmt|;
name|token
operator|.
name|setPassword
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|.
name|setService
argument_list|(
name|service
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
DECL|method|newDelegationToken (byte[] identifier, String kind, byte[] password, String service)
specifier|public
specifier|static
name|Token
name|newDelegationToken
parameter_list|(
name|byte
index|[]
name|identifier
parameter_list|,
name|String
name|kind
parameter_list|,
name|byte
index|[]
name|password
parameter_list|,
name|String
name|service
parameter_list|)
block|{
return|return
name|newToken
argument_list|(
name|Token
operator|.
name|class
argument_list|,
name|identifier
argument_list|,
name|kind
argument_list|,
name|password
argument_list|,
name|service
argument_list|)
return|;
block|}
DECL|method|newClientToken (byte[] identifier, String kind, byte[] password, String service)
specifier|public
specifier|static
name|Token
name|newClientToken
parameter_list|(
name|byte
index|[]
name|identifier
parameter_list|,
name|String
name|kind
parameter_list|,
name|byte
index|[]
name|password
parameter_list|,
name|String
name|service
parameter_list|)
block|{
return|return
name|newToken
argument_list|(
name|Token
operator|.
name|class
argument_list|,
name|identifier
argument_list|,
name|kind
argument_list|,
name|password
argument_list|,
name|service
argument_list|)
return|;
block|}
DECL|method|newContainerToken (NodeId nodeId, byte[] password, ContainerTokenIdentifier tokenIdentifier)
specifier|public
specifier|static
name|Token
name|newContainerToken
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|byte
index|[]
name|password
parameter_list|,
name|ContainerTokenIdentifier
name|tokenIdentifier
parameter_list|)
block|{
comment|// RPC layer client expects ip:port as service for tokens
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddrForHost
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|nodeId
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// NOTE: use SecurityUtil.setTokenService if this becomes a "real" token
name|Token
name|containerToken
init|=
name|newToken
argument_list|(
name|Token
operator|.
name|class
argument_list|,
name|tokenIdentifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|ContainerTokenIdentifier
operator|.
name|KIND
operator|.
name|toString
argument_list|()
argument_list|,
name|password
argument_list|,
name|SecurityUtil
operator|.
name|buildTokenService
argument_list|(
name|addr
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|containerToken
return|;
block|}
DECL|method|newContainerTokenIdentifier ( Token containerToken)
specifier|public
specifier|static
name|ContainerTokenIdentifier
name|newContainerTokenIdentifier
parameter_list|(
name|Token
name|containerToken
parameter_list|)
throws|throws
name|IOException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
argument_list|<
name|ContainerTokenIdentifier
argument_list|>
argument_list|(
name|containerToken
operator|.
name|getIdentifier
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
name|containerToken
operator|.
name|getPassword
argument_list|()
operator|.
name|array
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|containerToken
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|token
operator|.
name|decodeIdentifier
argument_list|()
return|;
block|}
DECL|method|newContainerLaunchContext ( Map<String, LocalResource> localResources, Map<String, String> environment, List<String> commands, Map<String, ByteBuffer> serviceData, ByteBuffer tokens, Map<ApplicationAccessType, String> acls)
specifier|public
specifier|static
name|ContainerLaunchContext
name|newContainerLaunchContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|localResources
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|commands
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
name|serviceData
parameter_list|,
name|ByteBuffer
name|tokens
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|)
block|{
name|ContainerLaunchContext
name|container
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|container
operator|.
name|setLocalResources
argument_list|(
name|localResources
argument_list|)
expr_stmt|;
name|container
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|container
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|container
operator|.
name|setServiceData
argument_list|(
name|serviceData
argument_list|)
expr_stmt|;
name|container
operator|.
name|setTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|container
operator|.
name|setApplicationACLs
argument_list|(
name|acls
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|newPriority (int p)
specifier|public
specifier|static
name|Priority
name|newPriority
parameter_list|(
name|int
name|p
parameter_list|)
block|{
name|Priority
name|priority
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|priority
operator|.
name|setPriority
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|priority
return|;
block|}
DECL|method|newResourceRequest (Priority priority, String hostName, Resource capability, int numContainers)
specifier|public
specifier|static
name|ResourceRequest
name|newResourceRequest
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|String
name|hostName
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|request
operator|.
name|setHostName
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumContainers
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|newResourceRequest (ResourceRequest r)
specifier|public
specifier|static
name|ResourceRequest
name|newResourceRequest
parameter_list|(
name|ResourceRequest
name|r
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPriority
argument_list|(
name|r
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setHostName
argument_list|(
name|r
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCapability
argument_list|(
name|r
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumContainers
argument_list|(
name|r
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|newApplicationReport ( ApplicationId applicationId, ApplicationAttemptId applicationAttemptId, String user, String queue, String name, String host, int rpcPort, Token clientToken, YarnApplicationState state, String diagnostics, String url, long startTime, long finishTime, FinalApplicationStatus finalStatus, ApplicationResourceUsageReport appResources, String origTrackingUrl, float progress, String appType)
specifier|public
specifier|static
name|ApplicationReport
name|newApplicationReport
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|rpcPort
parameter_list|,
name|Token
name|clientToken
parameter_list|,
name|YarnApplicationState
name|state
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|String
name|url
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|FinalApplicationStatus
name|finalStatus
parameter_list|,
name|ApplicationResourceUsageReport
name|appResources
parameter_list|,
name|String
name|origTrackingUrl
parameter_list|,
name|float
name|progress
parameter_list|,
name|String
name|appType
parameter_list|)
block|{
name|ApplicationReport
name|report
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setCurrentApplicationAttemptId
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|report
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|report
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|report
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|report
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|report
operator|.
name|setRpcPort
argument_list|(
name|rpcPort
argument_list|)
expr_stmt|;
name|report
operator|.
name|setClientToken
argument_list|(
name|clientToken
argument_list|)
expr_stmt|;
name|report
operator|.
name|setYarnApplicationState
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|report
operator|.
name|setDiagnostics
argument_list|(
name|diagnostics
argument_list|)
expr_stmt|;
name|report
operator|.
name|setTrackingUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|report
operator|.
name|setStartTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinishTime
argument_list|(
name|finishTime
argument_list|)
expr_stmt|;
name|report
operator|.
name|setFinalApplicationStatus
argument_list|(
name|finalStatus
argument_list|)
expr_stmt|;
name|report
operator|.
name|setApplicationResourceUsageReport
argument_list|(
name|appResources
argument_list|)
expr_stmt|;
name|report
operator|.
name|setOriginalTrackingUrl
argument_list|(
name|origTrackingUrl
argument_list|)
expr_stmt|;
name|report
operator|.
name|setProgress
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|report
operator|.
name|setApplicationType
argument_list|(
name|appType
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
DECL|method|newApplicationSubmissionContext ( ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource, String applicationType)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|newApplicationSubmissionContext
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerLaunchContext
name|amContainer
parameter_list|,
name|boolean
name|isUnmanagedAM
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|String
name|applicationType
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationName
argument_list|(
name|applicationName
argument_list|)
expr_stmt|;
name|context
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|context
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|context
operator|.
name|setUnmanagedAM
argument_list|(
name|isUnmanagedAM
argument_list|)
expr_stmt|;
name|context
operator|.
name|setCancelTokensWhenComplete
argument_list|(
name|cancelTokensWhenComplete
argument_list|)
expr_stmt|;
name|context
operator|.
name|setMaxAppAttempts
argument_list|(
name|maxAppAttempts
argument_list|)
expr_stmt|;
name|context
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationType
argument_list|(
name|applicationType
argument_list|)
expr_stmt|;
return|return
name|context
return|;
block|}
DECL|method|newApplicationSubmissionContext ( ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource)
specifier|public
specifier|static
name|ApplicationSubmissionContext
name|newApplicationSubmissionContext
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|applicationName
parameter_list|,
name|String
name|queue
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ContainerLaunchContext
name|amContainer
parameter_list|,
name|boolean
name|isUnmanagedAM
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|newApplicationSubmissionContext
argument_list|(
name|applicationId
argument_list|,
name|applicationName
argument_list|,
name|queue
argument_list|,
name|priority
argument_list|,
name|amContainer
argument_list|,
name|isUnmanagedAM
argument_list|,
name|cancelTokensWhenComplete
argument_list|,
name|maxAppAttempts
argument_list|,
name|resource
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newApplicationResourceUsageReport ( int numUsedContainers, int numReservedContainers, Resource usedResources, Resource reservedResources, Resource neededResources)
specifier|public
specifier|static
name|ApplicationResourceUsageReport
name|newApplicationResourceUsageReport
parameter_list|(
name|int
name|numUsedContainers
parameter_list|,
name|int
name|numReservedContainers
parameter_list|,
name|Resource
name|usedResources
parameter_list|,
name|Resource
name|reservedResources
parameter_list|,
name|Resource
name|neededResources
parameter_list|)
block|{
name|ApplicationResourceUsageReport
name|report
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationResourceUsageReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|report
operator|.
name|setNumUsedContainers
argument_list|(
name|numUsedContainers
argument_list|)
expr_stmt|;
name|report
operator|.
name|setNumReservedContainers
argument_list|(
name|numReservedContainers
argument_list|)
expr_stmt|;
name|report
operator|.
name|setUsedResources
argument_list|(
name|usedResources
argument_list|)
expr_stmt|;
name|report
operator|.
name|setReservedResources
argument_list|(
name|reservedResources
argument_list|)
expr_stmt|;
name|report
operator|.
name|setNeededResources
argument_list|(
name|neededResources
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
DECL|method|newResource (int memory, int vCores)
specifier|public
specifier|static
name|Resource
name|newResource
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemory
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVirtualCores
argument_list|(
name|vCores
argument_list|)
expr_stmt|;
return|return
name|resource
return|;
block|}
DECL|method|newURL (String scheme, String host, int port, String file)
specifier|public
specifier|static
name|URL
name|newURL
parameter_list|(
name|String
name|scheme
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|URL
name|url
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
name|url
operator|.
name|setScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|url
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|url
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|url
operator|.
name|setFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|url
return|;
block|}
DECL|method|newAllocateRequest ( ApplicationAttemptId applicationAttemptId, int responseID, float appProgress, List<ResourceRequest> resourceAsk, List<ContainerId> containersToBeReleased)
specifier|public
specifier|static
name|AllocateRequest
name|newAllocateRequest
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|int
name|responseID
parameter_list|,
name|float
name|appProgress
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceAsk
parameter_list|,
name|List
argument_list|<
name|ContainerId
argument_list|>
name|containersToBeReleased
parameter_list|)
block|{
name|AllocateRequest
name|allocateRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|allocateRequest
operator|.
name|setApplicationAttemptId
argument_list|(
name|applicationAttemptId
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setResponseId
argument_list|(
name|responseID
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setProgress
argument_list|(
name|appProgress
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setAskList
argument_list|(
name|resourceAsk
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setReleaseList
argument_list|(
name|containersToBeReleased
argument_list|)
expr_stmt|;
return|return
name|allocateRequest
return|;
block|}
DECL|method|newAllocateResponse (int responseId, List<ContainerStatus> completedContainers, List<Container> allocatedContainers, List<NodeReport> updatedNodes, Resource availResources, boolean reboot, int numClusterNodes, PreemptionMessage preempt)
specifier|public
specifier|static
name|AllocateResponse
name|newAllocateResponse
parameter_list|(
name|int
name|responseId
parameter_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
parameter_list|,
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
parameter_list|,
name|List
argument_list|<
name|NodeReport
argument_list|>
name|updatedNodes
parameter_list|,
name|Resource
name|availResources
parameter_list|,
name|boolean
name|reboot
parameter_list|,
name|int
name|numClusterNodes
parameter_list|,
name|PreemptionMessage
name|preempt
parameter_list|)
block|{
name|AllocateResponse
name|response
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setNumClusterNodes
argument_list|(
name|numClusterNodes
argument_list|)
expr_stmt|;
name|response
operator|.
name|setResponseId
argument_list|(
name|responseId
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCompletedContainersStatuses
argument_list|(
name|completedContainers
argument_list|)
expr_stmt|;
name|response
operator|.
name|setAllocatedContainers
argument_list|(
name|allocatedContainers
argument_list|)
expr_stmt|;
name|response
operator|.
name|setUpdatedNodes
argument_list|(
name|updatedNodes
argument_list|)
expr_stmt|;
name|response
operator|.
name|setAvailableResources
argument_list|(
name|availResources
argument_list|)
expr_stmt|;
name|response
operator|.
name|setReboot
argument_list|(
name|reboot
argument_list|)
expr_stmt|;
name|response
operator|.
name|setPreemptionMessage
argument_list|(
name|preempt
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

