begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Base class for all views  */
end_comment

begin_class
DECL|class|View
specifier|public
specifier|abstract
class|class
name|View
implements|implements
name|Params
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|View
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|RequestScoped
DECL|class|ViewContext
specifier|public
specifier|static
class|class
name|ViewContext
block|{
DECL|field|rc
specifier|final
name|Controller
operator|.
name|RequestContext
name|rc
decl_stmt|;
DECL|field|nestLevel
name|int
name|nestLevel
init|=
literal|0
decl_stmt|;
DECL|field|wasInline
name|boolean
name|wasInline
decl_stmt|;
DECL|method|ViewContext (Controller.RequestContext ctx)
annotation|@
name|Inject
name|ViewContext
parameter_list|(
name|Controller
operator|.
name|RequestContext
name|ctx
parameter_list|)
block|{
name|rc
operator|=
name|ctx
expr_stmt|;
block|}
DECL|method|nestLevel ()
specifier|public
name|int
name|nestLevel
parameter_list|()
block|{
return|return
name|nestLevel
return|;
block|}
DECL|method|wasInline ()
specifier|public
name|boolean
name|wasInline
parameter_list|()
block|{
return|return
name|wasInline
return|;
block|}
DECL|method|set (int nestLevel, boolean wasInline)
specifier|public
name|void
name|set
parameter_list|(
name|int
name|nestLevel
parameter_list|,
name|boolean
name|wasInline
parameter_list|)
block|{
name|this
operator|.
name|nestLevel
operator|=
name|nestLevel
expr_stmt|;
name|this
operator|.
name|wasInline
operator|=
name|wasInline
expr_stmt|;
block|}
DECL|method|requestContext ()
specifier|public
name|Controller
operator|.
name|RequestContext
name|requestContext
parameter_list|()
block|{
return|return
name|rc
return|;
block|}
block|}
DECL|field|vc
specifier|private
name|ViewContext
name|vc
decl_stmt|;
DECL|field|injector
annotation|@
name|Inject
name|Injector
name|injector
decl_stmt|;
DECL|method|View ()
specifier|public
name|View
parameter_list|()
block|{
comment|// Makes injection in subclasses optional.
comment|// Time will tell if this buy us more than the NPEs :)
block|}
DECL|method|View (ViewContext ctx)
specifier|public
name|View
parameter_list|(
name|ViewContext
name|ctx
parameter_list|)
block|{
name|vc
operator|=
name|ctx
expr_stmt|;
block|}
comment|/**    * The API to render the view    */
DECL|method|render ()
specifier|public
specifier|abstract
name|void
name|render
parameter_list|()
function_decl|;
DECL|method|context ()
specifier|public
name|ViewContext
name|context
parameter_list|()
block|{
if|if
condition|(
name|vc
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|injector
operator|==
literal|null
condition|)
block|{
comment|// One downside of making the injection in subclasses optional
throw|throw
operator|new
name|WebAppException
argument_list|(
name|join
argument_list|(
literal|"Error accessing ViewContext from a\n"
argument_list|,
literal|"child constructor, either move the usage of the View methods\n"
argument_list|,
literal|"out of the constructor or inject the ViewContext into the\n"
argument_list|,
literal|"constructor"
argument_list|)
argument_list|)
throw|;
block|}
name|vc
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|ViewContext
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|vc
return|;
block|}
DECL|method|error ()
specifier|public
name|Throwable
name|error
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|error
return|;
block|}
DECL|method|status ()
specifier|public
name|int
name|status
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|status
return|;
block|}
DECL|method|inDevMode ()
specifier|public
name|boolean
name|inDevMode
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|devMode
return|;
block|}
DECL|method|injector ()
specifier|public
name|Injector
name|injector
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|injector
return|;
block|}
DECL|method|getInstance (Class<T> cls)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|cls
argument_list|)
return|;
block|}
DECL|method|request ()
specifier|public
name|HttpServletRequest
name|request
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|request
return|;
block|}
DECL|method|response ()
specifier|public
name|HttpServletResponse
name|response
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|response
return|;
block|}
DECL|method|moreParams ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|moreParams
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|moreParams
argument_list|()
return|;
block|}
comment|/**    * Get the cookies    * @return the cookies map    */
DECL|method|cookies ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Cookie
argument_list|>
name|cookies
parameter_list|()
block|{
return|return
name|context
argument_list|()
operator|.
name|rc
operator|.
name|cookies
argument_list|()
return|;
block|}
DECL|method|outputStream ()
specifier|public
name|ServletOutputStream
name|outputStream
parameter_list|()
block|{
try|try
block|{
return|return
name|response
argument_list|()
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|writer ()
specifier|public
name|PrintWriter
name|writer
parameter_list|()
block|{
try|try
block|{
return|return
name|response
argument_list|()
operator|.
name|getWriter
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Lookup a value from the current context.    * @param key to lookup    * @param defaultValue if key is missing    * @return the value of the key or the default value    */
DECL|method|$ (String key, String defaultValue)
specifier|public
name|String
name|$
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
comment|// moreParams take precedence
name|String
name|value
init|=
name|moreParams
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|request
argument_list|()
operator|.
name|getParameter
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
return|;
block|}
comment|/**    * Lookup a value from the current context    * @param key to lookup    * @return the value of the key or empty string    */
DECL|method|$ (String key)
specifier|public
name|String
name|$
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|$
argument_list|(
name|key
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**    * Set a context value. (e.g. UI properties for sub views.)    * Try to avoid any application (vs view/ui) logic.    * @param key to set    * @param value to set    */
DECL|method|set (String key, String value)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|moreParams
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|root ()
specifier|public
name|String
name|root
parameter_list|()
block|{
name|String
name|root
init|=
name|System
operator|.
name|getenv
argument_list|(
name|ApplicationConstants
operator|.
name|APPLICATION_WEB_PROXY_BASE_ENV
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
operator|||
name|root
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|root
operator|=
literal|"/"
expr_stmt|;
block|}
return|return
name|root
return|;
block|}
DECL|method|prefix ()
specifier|public
name|String
name|prefix
parameter_list|()
block|{
if|if
condition|(
name|context
argument_list|()
operator|.
name|rc
operator|.
name|prefix
operator|==
literal|null
condition|)
block|{
return|return
name|root
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ujoin
argument_list|(
name|root
argument_list|()
argument_list|,
name|context
argument_list|()
operator|.
name|rc
operator|.
name|prefix
argument_list|)
return|;
block|}
block|}
DECL|method|setTitle (String title)
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|set
argument_list|(
name|TITLE
argument_list|,
name|title
argument_list|)
expr_stmt|;
block|}
DECL|method|setTitle (String title, String url)
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|set
argument_list|(
name|TITLE_LINK
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an url from url components    * @param parts components to join    * @return an url string    */
DECL|method|root_url (String... parts)
specifier|public
name|String
name|root_url
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
return|return
name|ujoin
argument_list|(
name|root
argument_list|()
argument_list|,
name|parts
argument_list|)
return|;
block|}
comment|/**    * Create an url from url components    * @param parts components to join    * @return an url string    */
DECL|method|url (String... parts)
specifier|public
name|String
name|url
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
return|return
name|ujoin
argument_list|(
name|prefix
argument_list|()
argument_list|,
name|parts
argument_list|)
return|;
block|}
DECL|method|info (String about)
specifier|public
name|ResponseInfo
name|info
parameter_list|(
name|String
name|about
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|ResponseInfo
operator|.
name|class
argument_list|)
operator|.
name|about
argument_list|(
name|about
argument_list|)
return|;
block|}
comment|/**    * Render a sub-view    * @param cls the class of the sub-view    */
DECL|method|render (Class<? extends SubView> cls)
specifier|public
name|void
name|render
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SubView
argument_list|>
name|cls
parameter_list|)
block|{
name|int
name|saved
init|=
name|context
argument_list|()
operator|.
name|nestLevel
decl_stmt|;
name|getInstance
argument_list|(
name|cls
argument_list|)
operator|.
name|renderPartial
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
argument_list|()
operator|.
name|nestLevel
operator|!=
name|saved
condition|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
literal|"View "
operator|+
name|cls
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" not complete"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

