begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * A Proc file-system based ProcessTree. Works only on Linux.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ProcfsBasedProcessTree
specifier|public
class|class
name|ProcfsBasedProcessTree
extends|extends
name|ResourceCalculatorProcessTree
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcfsBasedProcessTree
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PROCFS
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS
init|=
literal|"/proc/"
decl_stmt|;
DECL|field|PROCFS_STAT_FILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCFS_STAT_FILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9-]+)\\s([^\\s]+)\\s[^\\s]\\s([0-9-]+)\\s([0-9-]+)\\s([0-9-]+)\\s"
operator|+
literal|"([0-9-]+\\s){7}([0-9]+)\\s([0-9]+)\\s([0-9-]+\\s){7}([0-9]+)\\s([0-9]+)"
operator|+
literal|"(\\s[0-9-]+){15}"
argument_list|)
decl_stmt|;
DECL|field|PROCFS_STAT_FILE
specifier|public
specifier|static
specifier|final
name|String
name|PROCFS_STAT_FILE
init|=
literal|"stat"
decl_stmt|;
DECL|field|PROCFS_CMDLINE_FILE
specifier|public
specifier|static
specifier|final
name|String
name|PROCFS_CMDLINE_FILE
init|=
literal|"cmdline"
decl_stmt|;
DECL|field|PAGE_SIZE
specifier|public
specifier|static
specifier|final
name|long
name|PAGE_SIZE
decl_stmt|;
static|static
block|{
name|ShellCommandExecutor
name|shellExecutor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"getconf"
block|,
literal|"PAGESIZE"
block|}
argument_list|)
decl_stmt|;
name|long
name|pageSize
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|shellExecutor
operator|.
name|execute
argument_list|()
expr_stmt|;
name|pageSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|shellExecutor
operator|.
name|getOutput
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|PAGE_SIZE
operator|=
name|pageSize
expr_stmt|;
block|}
block|}
DECL|field|JIFFY_LENGTH_IN_MILLIS
specifier|public
specifier|static
specifier|final
name|long
name|JIFFY_LENGTH_IN_MILLIS
decl_stmt|;
comment|// in millisecond
static|static
block|{
name|ShellCommandExecutor
name|shellExecutor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"getconf"
block|,
literal|"CLK_TCK"
block|}
argument_list|)
decl_stmt|;
name|long
name|jiffiesPerSecond
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|shellExecutor
operator|.
name|execute
argument_list|()
expr_stmt|;
name|jiffiesPerSecond
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|shellExecutor
operator|.
name|getOutput
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|JIFFY_LENGTH_IN_MILLIS
operator|=
name|jiffiesPerSecond
operator|!=
operator|-
literal|1
condition|?
name|Math
operator|.
name|round
argument_list|(
literal|1000D
operator|/
name|jiffiesPerSecond
argument_list|)
else|:
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// to enable testing, using this variable which can be configured
comment|// to a test directory.
DECL|field|procfsDir
specifier|private
name|String
name|procfsDir
decl_stmt|;
DECL|field|deadPid
specifier|static
specifier|private
name|String
name|deadPid
init|=
literal|"-1"
decl_stmt|;
DECL|field|pid
specifier|private
name|String
name|pid
init|=
name|deadPid
decl_stmt|;
DECL|field|numberPattern
specifier|static
specifier|private
name|Pattern
name|numberPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[1-9][0-9]*"
argument_list|)
decl_stmt|;
DECL|field|cpuTime
specifier|private
name|Long
name|cpuTime
init|=
literal|0L
decl_stmt|;
DECL|field|processTree
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
name|processTree
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ProcfsBasedProcessTree (String pid)
specifier|public
name|ProcfsBasedProcessTree
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|this
argument_list|(
name|pid
argument_list|,
name|PROCFS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Build a new process tree rooted at the pid.    *    * This method is provided mainly for testing purposes, where    * the root of the proc file system can be adjusted.    *    * @param pid root of the process tree    * @param procfsDir the root of a proc file system - only used for testing.    */
DECL|method|ProcfsBasedProcessTree (String pid, String procfsDir)
specifier|public
name|ProcfsBasedProcessTree
parameter_list|(
name|String
name|pid
parameter_list|,
name|String
name|procfsDir
parameter_list|)
block|{
name|this
operator|.
name|pid
operator|=
name|getValidPID
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|this
operator|.
name|procfsDir
operator|=
name|procfsDir
expr_stmt|;
block|}
comment|/**    * Checks if the ProcfsBasedProcessTree is available on this system.    *    * @return true if ProcfsBasedProcessTree is available. False otherwise.    */
DECL|method|isAvailable ()
specifier|public
specifier|static
name|boolean
name|isAvailable
parameter_list|()
block|{
try|try
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ProcfsBasedProcessTree currently is supported only on "
operator|+
literal|"Linux."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get Operating System name. "
operator|+
name|se
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get the process-tree with latest state. If the root-process is not alive,    * an empty tree will be returned.    *    * @return the process-tree with latest state.    */
annotation|@
name|Override
DECL|method|getProcessTree ()
specifier|public
name|ResourceCalculatorProcessTree
name|getProcessTree
parameter_list|()
block|{
if|if
condition|(
operator|!
name|pid
operator|.
name|equals
argument_list|(
name|deadPid
argument_list|)
condition|)
block|{
comment|// Get the list of processes
name|List
argument_list|<
name|String
argument_list|>
name|processList
init|=
name|getProcessList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
name|allProcessInfo
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// cache the processTree to get the age for processes
name|Map
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
name|oldProcs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
argument_list|(
name|processTree
argument_list|)
decl_stmt|;
name|processTree
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProcessInfo
name|me
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|proc
range|:
name|processList
control|)
block|{
comment|// Get information for each process
name|ProcessInfo
name|pInfo
init|=
operator|new
name|ProcessInfo
argument_list|(
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructProcessInfo
argument_list|(
name|pInfo
argument_list|,
name|procfsDir
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|allProcessInfo
operator|.
name|put
argument_list|(
name|proc
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|equals
argument_list|(
name|this
operator|.
name|pid
argument_list|)
condition|)
block|{
name|me
operator|=
name|pInfo
expr_stmt|;
comment|// cache 'me'
name|processTree
operator|.
name|put
argument_list|(
name|proc
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|me
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
comment|// Add each process to its parent.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
name|entry
range|:
name|allProcessInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|pID
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pID
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
condition|)
block|{
name|ProcessInfo
name|pInfo
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ProcessInfo
name|parentPInfo
init|=
name|allProcessInfo
operator|.
name|get
argument_list|(
name|pInfo
operator|.
name|getPpid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentPInfo
operator|!=
literal|null
condition|)
block|{
name|parentPInfo
operator|.
name|addChild
argument_list|(
name|pInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now start constructing the process-tree
name|LinkedList
argument_list|<
name|ProcessInfo
argument_list|>
name|pInfoQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
name|pInfoQueue
operator|.
name|addAll
argument_list|(
name|me
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pInfoQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProcessInfo
name|pInfo
init|=
name|pInfoQueue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|processTree
operator|.
name|containsKey
argument_list|(
name|pInfo
operator|.
name|getPid
argument_list|()
argument_list|)
condition|)
block|{
name|processTree
operator|.
name|put
argument_list|(
name|pInfo
operator|.
name|getPid
argument_list|()
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
block|}
name|pInfoQueue
operator|.
name|addAll
argument_list|(
name|pInfo
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// update age values and compute the number of jiffies since last update
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ProcessInfo
argument_list|>
name|procs
range|:
name|processTree
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ProcessInfo
name|oldInfo
init|=
name|oldProcs
operator|.
name|get
argument_list|(
name|procs
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|procs
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|procs
operator|.
name|getValue
argument_list|()
operator|.
name|updateJiffy
argument_list|(
name|oldInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldInfo
operator|!=
literal|null
condition|)
block|{
name|procs
operator|.
name|getValue
argument_list|()
operator|.
name|updateAge
argument_list|(
name|oldInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// Log.debug the ProcfsBasedProcessTree
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/** Verify that the given process id is same as its process group id.    * @return true if the process id matches else return false.    */
annotation|@
name|Override
DECL|method|checkPidPgrpidForMatch ()
specifier|public
name|boolean
name|checkPidPgrpidForMatch
parameter_list|()
block|{
return|return
name|checkPidPgrpidForMatch
argument_list|(
name|pid
argument_list|,
name|PROCFS
argument_list|)
return|;
block|}
DECL|method|checkPidPgrpidForMatch (String _pid, String procfs)
specifier|public
specifier|static
name|boolean
name|checkPidPgrpidForMatch
parameter_list|(
name|String
name|_pid
parameter_list|,
name|String
name|procfs
parameter_list|)
block|{
comment|// Get information for this process
name|ProcessInfo
name|pInfo
init|=
operator|new
name|ProcessInfo
argument_list|(
name|_pid
argument_list|)
decl_stmt|;
name|pInfo
operator|=
name|constructProcessInfo
argument_list|(
name|pInfo
argument_list|,
name|procfs
argument_list|)
expr_stmt|;
comment|// null if process group leader finished execution; issue no warning
comment|// make sure that pid and its pgrpId match
if|if
condition|(
name|pInfo
operator|==
literal|null
condition|)
return|return
literal|true
return|;
name|String
name|pgrpId
init|=
name|pInfo
operator|.
name|getPgrpId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|pgrpId
operator|.
name|equals
argument_list|(
name|_pid
argument_list|)
return|;
block|}
DECL|field|PROCESSTREE_DUMP_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|PROCESSTREE_DUMP_FORMAT
init|=
literal|"\t|- %s %s %d %d %s %d %d %d %d %s\n"
decl_stmt|;
DECL|method|getCurrentProcessIDs ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCurrentProcessIDs
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|currentPIDs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|currentPIDs
operator|.
name|addAll
argument_list|(
name|processTree
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|currentPIDs
return|;
block|}
comment|/**    * Get a dump of the process-tree.    *    * @return a string concatenating the dump of information of all the processes    *         in the process-tree    */
annotation|@
name|Override
DECL|method|getProcessTreeDump ()
specifier|public
name|String
name|getProcessTreeDump
parameter_list|()
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// The header.
name|ret
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"\t|- PID PPID PGRPID SESSID CMD_NAME "
operator|+
literal|"USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) "
operator|+
literal|"RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ProcessInfo
name|p
range|:
name|processTree
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|PROCESSTREE_DUMP_FORMAT
argument_list|,
name|p
operator|.
name|getPid
argument_list|()
argument_list|,
name|p
operator|.
name|getPpid
argument_list|()
argument_list|,
name|p
operator|.
name|getPgrpId
argument_list|()
argument_list|,
name|p
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
operator|.
name|getUtime
argument_list|()
argument_list|,
name|p
operator|.
name|getStime
argument_list|()
argument_list|,
name|p
operator|.
name|getVmem
argument_list|()
argument_list|,
name|p
operator|.
name|getRssmemPage
argument_list|()
argument_list|,
name|p
operator|.
name|getCmdLine
argument_list|(
name|procfsDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the cumulative virtual memory used by all the processes in the    * process-tree that are older than the passed in age.    *    * @param olderThanAge processes above this age are included in the    *                      memory addition    * @return cumulative virtual memory used by the process-tree in bytes,    *          for processes older than this age.    */
annotation|@
name|Override
DECL|method|getCumulativeVmem (int olderThanAge)
specifier|public
name|long
name|getCumulativeVmem
parameter_list|(
name|int
name|olderThanAge
parameter_list|)
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ProcessInfo
name|p
range|:
name|processTree
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|p
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|p
operator|.
name|getAge
argument_list|()
operator|>
name|olderThanAge
operator|)
condition|)
block|{
name|total
operator|+=
name|p
operator|.
name|getVmem
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
comment|/**    * Get the cumulative resident set size (rss) memory used by all the processes    * in the process-tree that are older than the passed in age.    *    * @param olderThanAge processes above this age are included in the    *                      memory addition    * @return cumulative rss memory used by the process-tree in bytes,    *          for processes older than this age. return 0 if it cannot be    *          calculated    */
annotation|@
name|Override
DECL|method|getCumulativeRssmem (int olderThanAge)
specifier|public
name|long
name|getCumulativeRssmem
parameter_list|(
name|int
name|olderThanAge
parameter_list|)
block|{
if|if
condition|(
name|PAGE_SIZE
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|totalPages
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ProcessInfo
name|p
range|:
name|processTree
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|p
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|p
operator|.
name|getAge
argument_list|()
operator|>
name|olderThanAge
operator|)
condition|)
block|{
name|totalPages
operator|+=
name|p
operator|.
name|getRssmemPage
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|totalPages
operator|*
name|PAGE_SIZE
return|;
comment|// convert # pages to byte
block|}
comment|/**    * Get the CPU time in millisecond used by all the processes in the    * process-tree since the process-tree created    *    * @return cumulative CPU time in millisecond since the process-tree created    *         return 0 if it cannot be calculated    */
annotation|@
name|Override
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
if|if
condition|(
name|JIFFY_LENGTH_IN_MILLIS
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|incJiffies
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ProcessInfo
name|p
range|:
name|processTree
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|incJiffies
operator|+=
name|p
operator|.
name|getDtime
argument_list|()
expr_stmt|;
block|}
block|}
name|cpuTime
operator|+=
name|incJiffies
operator|*
name|JIFFY_LENGTH_IN_MILLIS
expr_stmt|;
return|return
name|cpuTime
return|;
block|}
DECL|method|getValidPID (String pid)
specifier|private
specifier|static
name|String
name|getValidPID
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
return|return
name|deadPid
return|;
name|Matcher
name|m
init|=
name|numberPattern
operator|.
name|matcher
argument_list|(
name|pid
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
return|return
name|pid
return|;
return|return
name|deadPid
return|;
block|}
comment|/**    * Get the list of all processes in the system.    */
DECL|method|getProcessList ()
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getProcessList
parameter_list|()
block|{
name|String
index|[]
name|processDirs
init|=
operator|(
operator|new
name|File
argument_list|(
name|procfsDir
argument_list|)
operator|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|processList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|processDirs
control|)
block|{
name|Matcher
name|m
init|=
name|numberPattern
operator|.
name|matcher
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
continue|continue;
try|try
block|{
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
name|procfsDir
argument_list|,
name|dir
argument_list|)
operator|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|processList
operator|.
name|add
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|s
parameter_list|)
block|{
comment|// skip this process
block|}
block|}
return|return
name|processList
return|;
block|}
comment|/**    * Construct the ProcessInfo using the process' PID and procfs rooted at the    * specified directory and return the same. It is provided mainly to assist    * testing purposes.    *    * Returns null on failing to read from procfs,    *    * @param pinfo ProcessInfo that needs to be updated    * @param procfsDir root of the proc file system    * @return updated ProcessInfo, null on errors.    */
DECL|method|constructProcessInfo (ProcessInfo pinfo, String procfsDir)
specifier|private
specifier|static
name|ProcessInfo
name|constructProcessInfo
parameter_list|(
name|ProcessInfo
name|pinfo
parameter_list|,
name|String
name|procfsDir
parameter_list|)
block|{
name|ProcessInfo
name|ret
init|=
literal|null
decl_stmt|;
comment|// Read "procfsDir/<pid>/stat" file - typically /proc/<pid>/stat
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|FileReader
name|fReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|pidDir
init|=
operator|new
name|File
argument_list|(
name|procfsDir
argument_list|,
name|pinfo
operator|.
name|getPid
argument_list|()
argument_list|)
decl_stmt|;
name|fReader
operator|=
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
name|pidDir
argument_list|,
name|PROCFS_STAT_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
comment|// The process vanished in the interim!
name|LOG
operator|.
name|info
argument_list|(
literal|"The process "
operator|+
name|pinfo
operator|.
name|getPid
argument_list|()
operator|+
literal|" may have finished in the interim."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|pinfo
expr_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|// only one line
name|Matcher
name|m
init|=
name|PROCFS_STAT_FILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|boolean
name|mat
init|=
name|m
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|mat
condition|)
block|{
comment|// Set (name) (ppid) (pgrpId) (session) (utime) (stime) (vsize) (rss)
name|pinfo
operator|.
name|updateProcessInfo
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BigInteger
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected: procfs stat file is not in the expected format"
operator|+
literal|" for process with pid "
operator|+
name|pinfo
operator|.
name|getPid
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Returns a string printing PIDs of process present in the    * ProcfsBasedProcessTree. Output format : [pid pid ..]    */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|pTree
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"[ "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|processTree
operator|.
name|keySet
argument_list|()
control|)
block|{
name|pTree
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pTree
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|pTree
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pTree
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**    *    * Class containing information of a process.    *    */
DECL|class|ProcessInfo
specifier|private
specifier|static
class|class
name|ProcessInfo
block|{
DECL|field|pid
specifier|private
name|String
name|pid
decl_stmt|;
comment|// process-id
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|// command name
DECL|field|pgrpId
specifier|private
name|Integer
name|pgrpId
decl_stmt|;
comment|// process group-id
DECL|field|ppid
specifier|private
name|String
name|ppid
decl_stmt|;
comment|// parent process-id
DECL|field|sessionId
specifier|private
name|Integer
name|sessionId
decl_stmt|;
comment|// session-id
DECL|field|vmem
specifier|private
name|Long
name|vmem
decl_stmt|;
comment|// virtual memory usage
DECL|field|rssmemPage
specifier|private
name|Long
name|rssmemPage
decl_stmt|;
comment|// rss memory usage in # of pages
DECL|field|utime
specifier|private
name|Long
name|utime
init|=
literal|0L
decl_stmt|;
comment|// # of jiffies in user mode
DECL|field|MAX_LONG
specifier|private
specifier|final
name|BigInteger
name|MAX_LONG
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|stime
specifier|private
name|BigInteger
name|stime
init|=
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
comment|// # of jiffies in kernel mode
comment|// how many times has this process been seen alive
DECL|field|age
specifier|private
name|int
name|age
decl_stmt|;
comment|// # of jiffies used since last update:
DECL|field|dtime
specifier|private
name|Long
name|dtime
init|=
literal|0L
decl_stmt|;
comment|// dtime = (utime + stime) - (utimeOld + stimeOld)
comment|// We need this to compute the cumulative CPU time
comment|// because the subprocess may finish earlier than root process
DECL|field|children
specifier|private
name|List
argument_list|<
name|ProcessInfo
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// list of children
DECL|method|ProcessInfo (String pid)
specifier|public
name|ProcessInfo
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|this
operator|.
name|pid
operator|=
name|pid
expr_stmt|;
comment|// seeing this the first time.
name|this
operator|.
name|age
operator|=
literal|1
expr_stmt|;
block|}
DECL|method|getPid ()
specifier|public
name|String
name|getPid
parameter_list|()
block|{
return|return
name|pid
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getPgrpId ()
specifier|public
name|Integer
name|getPgrpId
parameter_list|()
block|{
return|return
name|pgrpId
return|;
block|}
DECL|method|getPpid ()
specifier|public
name|String
name|getPpid
parameter_list|()
block|{
return|return
name|ppid
return|;
block|}
DECL|method|getSessionId ()
specifier|public
name|Integer
name|getSessionId
parameter_list|()
block|{
return|return
name|sessionId
return|;
block|}
DECL|method|getVmem ()
specifier|public
name|Long
name|getVmem
parameter_list|()
block|{
return|return
name|vmem
return|;
block|}
DECL|method|getUtime ()
specifier|public
name|Long
name|getUtime
parameter_list|()
block|{
return|return
name|utime
return|;
block|}
DECL|method|getStime ()
specifier|public
name|BigInteger
name|getStime
parameter_list|()
block|{
return|return
name|stime
return|;
block|}
DECL|method|getDtime ()
specifier|public
name|Long
name|getDtime
parameter_list|()
block|{
return|return
name|dtime
return|;
block|}
DECL|method|getRssmemPage ()
specifier|public
name|Long
name|getRssmemPage
parameter_list|()
block|{
comment|// get rss # of pages
return|return
name|rssmemPage
return|;
block|}
DECL|method|getAge ()
specifier|public
name|int
name|getAge
parameter_list|()
block|{
return|return
name|age
return|;
block|}
DECL|method|updateProcessInfo (String name, String ppid, Integer pgrpId, Integer sessionId, Long utime, BigInteger stime, Long vmem, Long rssmem)
specifier|public
name|void
name|updateProcessInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|ppid
parameter_list|,
name|Integer
name|pgrpId
parameter_list|,
name|Integer
name|sessionId
parameter_list|,
name|Long
name|utime
parameter_list|,
name|BigInteger
name|stime
parameter_list|,
name|Long
name|vmem
parameter_list|,
name|Long
name|rssmem
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|ppid
operator|=
name|ppid
expr_stmt|;
name|this
operator|.
name|pgrpId
operator|=
name|pgrpId
expr_stmt|;
name|this
operator|.
name|sessionId
operator|=
name|sessionId
expr_stmt|;
name|this
operator|.
name|utime
operator|=
name|utime
expr_stmt|;
name|this
operator|.
name|stime
operator|=
name|stime
expr_stmt|;
name|this
operator|.
name|vmem
operator|=
name|vmem
expr_stmt|;
name|this
operator|.
name|rssmemPage
operator|=
name|rssmem
expr_stmt|;
block|}
DECL|method|updateJiffy (ProcessInfo oldInfo)
specifier|public
name|void
name|updateJiffy
parameter_list|(
name|ProcessInfo
name|oldInfo
parameter_list|)
block|{
if|if
condition|(
name|oldInfo
operator|==
literal|null
condition|)
block|{
name|BigInteger
name|sum
init|=
name|this
operator|.
name|stime
operator|.
name|add
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|utime
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sum
operator|.
name|compareTo
argument_list|(
name|MAX_LONG
argument_list|)
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|dtime
operator|=
literal|0L
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Sum of stime ("
operator|+
name|this
operator|.
name|stime
operator|+
literal|") and utime ("
operator|+
name|this
operator|.
name|utime
operator|+
literal|") is greater than "
operator|+
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dtime
operator|=
name|sum
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|this
operator|.
name|dtime
operator|=
operator|(
name|this
operator|.
name|utime
operator|-
name|oldInfo
operator|.
name|utime
operator|+
name|this
operator|.
name|stime
operator|.
name|subtract
argument_list|(
name|oldInfo
operator|.
name|stime
argument_list|)
operator|.
name|longValue
argument_list|()
operator|)
expr_stmt|;
block|}
DECL|method|updateAge (ProcessInfo oldInfo)
specifier|public
name|void
name|updateAge
parameter_list|(
name|ProcessInfo
name|oldInfo
parameter_list|)
block|{
name|this
operator|.
name|age
operator|=
name|oldInfo
operator|.
name|age
operator|+
literal|1
expr_stmt|;
block|}
DECL|method|addChild (ProcessInfo p)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|ProcessInfo
name|p
parameter_list|)
block|{
return|return
name|children
operator|.
name|add
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|getChildren ()
specifier|public
name|List
argument_list|<
name|ProcessInfo
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
DECL|method|getCmdLine (String procfsDir)
specifier|public
name|String
name|getCmdLine
parameter_list|(
name|String
name|procfsDir
parameter_list|)
block|{
name|String
name|ret
init|=
literal|"N/A"
decl_stmt|;
if|if
condition|(
name|pid
operator|==
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|FileReader
name|fReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|FileReader
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|procfsDir
argument_list|,
name|pid
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|PROCFS_CMDLINE_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
comment|// The process vanished in the interim!
return|return
name|ret
return|;
block|}
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
try|try
block|{
name|ret
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
comment|// only one line
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
literal|"N/A"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
literal|'\0'
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
comment|// Replace each null char with a space
if|if
condition|(
name|ret
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// The cmdline might be empty because the process is swapped out or
comment|// is a zombie.
name|ret
operator|=
literal|"N/A"
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|"N/A"
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

