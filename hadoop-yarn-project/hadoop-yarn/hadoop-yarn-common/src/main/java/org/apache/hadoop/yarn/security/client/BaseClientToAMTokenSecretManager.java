begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.security.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_comment
comment|/**  * A base {@link SecretManager} for AMs to extend and validate Client-RM tokens  * issued to clients by the RM using the underlying master-key shared by RM to  * the AMs on their launch. All the methods are called by either Hadoop RPC or  * YARN, so this class is strictly for the purpose of inherit/extend and  * register with Hadoop RPC.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|BaseClientToAMTokenSecretManager
specifier|public
specifier|abstract
class|class
name|BaseClientToAMTokenSecretManager
extends|extends
name|SecretManager
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
block|{
annotation|@
name|Private
DECL|method|getMasterKey ( ApplicationAttemptId applicationAttemptId)
specifier|public
specifier|abstract
name|SecretKey
name|getMasterKey
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
function_decl|;
annotation|@
name|Private
annotation|@
name|Override
DECL|method|createPassword ( ClientToAMTokenIdentifier identifier)
specifier|public
specifier|synchronized
name|byte
index|[]
name|createPassword
parameter_list|(
name|ClientToAMTokenIdentifier
name|identifier
parameter_list|)
block|{
return|return
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|getMasterKey
argument_list|(
name|identifier
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|Override
DECL|method|retrievePassword (ClientToAMTokenIdentifier identifier)
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|ClientToAMTokenIdentifier
name|identifier
parameter_list|)
throws|throws
name|SecretManager
operator|.
name|InvalidToken
block|{
name|SecretKey
name|masterKey
init|=
name|getMasterKey
argument_list|(
name|identifier
operator|.
name|getApplicationAttemptID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|masterKey
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecretManager
operator|.
name|InvalidToken
argument_list|(
literal|"Illegal client-token!"
argument_list|)
throw|;
block|}
return|return
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|masterKey
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|Override
DECL|method|createIdentifier ()
specifier|public
name|ClientToAMTokenIdentifier
name|createIdentifier
parameter_list|()
block|{
return|return
operator|new
name|ClientToAMTokenIdentifier
argument_list|()
return|;
block|}
block|}
end_class

end_unit

