begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
annotation|@
name|Private
DECL|class|WindowsResourceCalculatorPlugin
specifier|public
class|class
name|WindowsResourceCalculatorPlugin
extends|extends
name|ResourceCalculatorPlugin
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WindowsResourceCalculatorPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|vmemSize
name|long
name|vmemSize
decl_stmt|;
DECL|field|memSize
name|long
name|memSize
decl_stmt|;
DECL|field|vmemAvailable
name|long
name|vmemAvailable
decl_stmt|;
DECL|field|memAvailable
name|long
name|memAvailable
decl_stmt|;
DECL|field|numProcessors
name|int
name|numProcessors
decl_stmt|;
DECL|field|cpuFrequencyKhz
name|long
name|cpuFrequencyKhz
decl_stmt|;
DECL|field|cumulativeCpuTimeMs
name|long
name|cumulativeCpuTimeMs
decl_stmt|;
DECL|field|cpuUsage
name|float
name|cpuUsage
decl_stmt|;
DECL|field|lastRefreshTime
name|long
name|lastRefreshTime
decl_stmt|;
DECL|field|refreshIntervalMs
specifier|private
specifier|final
name|int
name|refreshIntervalMs
init|=
literal|1000
decl_stmt|;
DECL|field|pTree
name|WindowsBasedProcessTree
name|pTree
init|=
literal|null
decl_stmt|;
DECL|method|WindowsResourceCalculatorPlugin ()
specifier|public
name|WindowsResourceCalculatorPlugin
parameter_list|()
block|{
name|lastRefreshTime
operator|=
literal|0
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|reset ()
name|void
name|reset
parameter_list|()
block|{
name|vmemSize
operator|=
operator|-
literal|1
expr_stmt|;
name|memSize
operator|=
operator|-
literal|1
expr_stmt|;
name|vmemAvailable
operator|=
operator|-
literal|1
expr_stmt|;
name|memAvailable
operator|=
operator|-
literal|1
expr_stmt|;
name|numProcessors
operator|=
operator|-
literal|1
expr_stmt|;
name|cpuFrequencyKhz
operator|=
operator|-
literal|1
expr_stmt|;
name|cumulativeCpuTimeMs
operator|=
operator|-
literal|1
expr_stmt|;
name|cpuUsage
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|getSystemInfoInfoFromShell ()
name|String
name|getSystemInfoInfoFromShell
parameter_list|()
block|{
name|ShellCommandExecutor
name|shellExecutor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
name|Shell
operator|.
name|WINUTILS
block|,
literal|"systeminfo"
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|shellExecutor
operator|.
name|execute
argument_list|()
expr_stmt|;
return|return
name|shellExecutor
operator|.
name|getOutput
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|refreshIfNeeded ()
name|void
name|refreshIfNeeded
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|lastRefreshTime
operator|>
name|refreshIntervalMs
condition|)
block|{
name|long
name|refreshInterval
init|=
name|now
operator|-
name|lastRefreshTime
decl_stmt|;
name|lastRefreshTime
operator|=
name|now
expr_stmt|;
name|long
name|lastCumCpuTimeMs
init|=
name|cumulativeCpuTimeMs
decl_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|String
name|sysInfoStr
init|=
name|getSystemInfoInfoFromShell
argument_list|()
decl_stmt|;
if|if
condition|(
name|sysInfoStr
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|sysInfoSplitCount
init|=
literal|7
decl_stmt|;
name|String
index|[]
name|sysInfo
init|=
name|sysInfoStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sysInfoStr
operator|.
name|indexOf
argument_list|(
literal|"\r\n"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysInfo
operator|.
name|length
operator|==
name|sysInfoSplitCount
condition|)
block|{
try|try
block|{
name|vmemSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sysInfo
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|memSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sysInfo
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|vmemAvailable
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sysInfo
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|memAvailable
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sysInfo
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|numProcessors
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sysInfo
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|cpuFrequencyKhz
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sysInfo
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|cumulativeCpuTimeMs
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sysInfo
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastCumCpuTimeMs
operator|!=
operator|-
literal|1
condition|)
block|{
name|cpuUsage
operator|=
operator|(
name|cumulativeCpuTimeMs
operator|-
name|lastCumCpuTimeMs
operator|)
operator|/
operator|(
name|refreshInterval
operator|*
literal|1.0f
operator|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error parsing sysInfo."
operator|+
name|nfe
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Expected split length of sysInfo to be "
operator|+
name|sysInfoSplitCount
operator|+
literal|". Got "
operator|+
name|sysInfo
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getVirtualMemorySize ()
specifier|public
name|long
name|getVirtualMemorySize
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|vmemSize
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getPhysicalMemorySize ()
specifier|public
name|long
name|getPhysicalMemorySize
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|memSize
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getAvailableVirtualMemorySize ()
specifier|public
name|long
name|getAvailableVirtualMemorySize
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|vmemAvailable
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getAvailablePhysicalMemorySize ()
specifier|public
name|long
name|getAvailablePhysicalMemorySize
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|memAvailable
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getNumProcessors ()
specifier|public
name|int
name|getNumProcessors
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|numProcessors
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getNumCores ()
specifier|public
name|int
name|getNumCores
parameter_list|()
block|{
return|return
name|getNumProcessors
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getCpuFrequency ()
specifier|public
name|long
name|getCpuFrequency
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|cpuFrequencyKhz
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|cumulativeCpuTimeMs
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getCpuUsage ()
specifier|public
name|float
name|getCpuUsage
parameter_list|()
block|{
name|refreshIfNeeded
argument_list|()
expr_stmt|;
return|return
name|cpuUsage
return|;
block|}
block|}
end_class

end_unit

