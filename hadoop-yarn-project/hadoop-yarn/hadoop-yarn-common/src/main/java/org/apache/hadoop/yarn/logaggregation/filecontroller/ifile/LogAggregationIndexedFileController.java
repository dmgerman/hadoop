begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller.ifile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|ifile
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SerializationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|HarFs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SecureIOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|BoundedRangeFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|SimpleBufferedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogAggregationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogToolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|View
operator|.
name|ViewContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The Indexed Log Aggregation File Format implementation.  *  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|LogAggregationIndexedFileController
specifier|public
class|class
name|LogAggregationIndexedFileController
extends|extends
name|LogAggregationFileController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogAggregationIndexedFileController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FS_OUTPUT_BUF_SIZE_ATTR
specifier|private
specifier|static
specifier|final
name|String
name|FS_OUTPUT_BUF_SIZE_ATTR
init|=
literal|"indexedFile.fs.output.buffer.size"
decl_stmt|;
DECL|field|FS_INPUT_BUF_SIZE_ATTR
specifier|private
specifier|static
specifier|final
name|String
name|FS_INPUT_BUF_SIZE_ATTR
init|=
literal|"indexedFile.fs.input.buffer.size"
decl_stmt|;
DECL|field|FS_NUM_RETRIES_ATTR
specifier|private
specifier|static
specifier|final
name|String
name|FS_NUM_RETRIES_ATTR
init|=
literal|"indexedFile.fs.op.num-retries"
decl_stmt|;
DECL|field|FS_RETRY_INTERVAL_MS_ATTR
specifier|private
specifier|static
specifier|final
name|String
name|FS_RETRY_INTERVAL_MS_ATTR
init|=
literal|"indexedFile.fs.retry-interval-ms"
decl_stmt|;
DECL|field|LOG_ROLL_OVER_MAX_FILE_SIZE_GB
specifier|private
specifier|static
specifier|final
name|String
name|LOG_ROLL_OVER_MAX_FILE_SIZE_GB
init|=
literal|"indexedFile.log.roll-over.max-file-size-gb"
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|CHECK_SUM_FILE_SUFFIX
specifier|public
specifier|static
specifier|final
name|String
name|CHECK_SUM_FILE_SUFFIX
init|=
literal|"-checksum"
decl_stmt|;
DECL|field|fsNumRetries
specifier|private
name|int
name|fsNumRetries
init|=
literal|3
decl_stmt|;
DECL|field|fsRetryInterval
specifier|private
name|long
name|fsRetryInterval
init|=
literal|1000L
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
DECL|field|indexedLogsMeta
specifier|private
name|IndexedLogsMeta
name|indexedLogsMeta
init|=
literal|null
decl_stmt|;
DECL|field|logsMetaInThisCycle
specifier|private
name|IndexedPerAggregationLogMeta
name|logsMetaInThisCycle
decl_stmt|;
DECL|field|logAggregationTimeInThisCycle
specifier|private
name|long
name|logAggregationTimeInThisCycle
decl_stmt|;
DECL|field|fsDataOStream
specifier|private
name|FSDataOutputStream
name|fsDataOStream
decl_stmt|;
DECL|field|compressAlgo
specifier|private
name|Algorithm
name|compressAlgo
decl_stmt|;
DECL|field|cachedIndexedLogsMeta
specifier|private
name|CachedIndexedLogsMeta
name|cachedIndexedLogsMeta
init|=
literal|null
decl_stmt|;
DECL|field|logAggregationSuccessfullyInThisCyCle
specifier|private
name|boolean
name|logAggregationSuccessfullyInThisCyCle
init|=
literal|false
decl_stmt|;
DECL|field|currentOffSet
specifier|private
name|long
name|currentOffSet
init|=
literal|0
decl_stmt|;
DECL|field|remoteLogCheckSumFile
specifier|private
name|Path
name|remoteLogCheckSumFile
decl_stmt|;
DECL|field|fc
specifier|private
name|FileContext
name|fc
decl_stmt|;
DECL|field|ugi
specifier|private
name|UserGroupInformation
name|ugi
decl_stmt|;
DECL|field|uuid
specifier|private
name|byte
index|[]
name|uuid
init|=
literal|null
decl_stmt|;
DECL|field|UUID_LENGTH
specifier|private
specifier|final
name|int
name|UUID_LENGTH
init|=
literal|32
decl_stmt|;
DECL|field|logRollOverMaxFileSize
specifier|private
name|long
name|logRollOverMaxFileSize
decl_stmt|;
DECL|field|sysClock
specifier|private
name|Clock
name|sysClock
decl_stmt|;
DECL|method|LogAggregationIndexedFileController ()
specifier|public
name|LogAggregationIndexedFileController
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Currently, we need the underlying File System to support append
comment|// operation. Will remove this check after we finish
comment|// LogAggregationIndexedFileController for non-append mode.
name|boolean
name|append
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|LOG_AGGREGATION_FS_SUPPORT_APPEND
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|append
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The configuration:"
operator|+
name|LOG_AGGREGATION_FS_SUPPORT_APPEND
operator|+
literal|" is set as False. We can only"
operator|+
literal|" use LogAggregationIndexedFileController when the FileSystem "
operator|+
literal|"support append operations."
argument_list|)
throw|;
block|}
name|String
name|remoteDirStr
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT
argument_list|,
name|this
operator|.
name|fileControllerName
argument_list|)
decl_stmt|;
name|String
name|remoteDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|remoteDirStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|remoteDir
operator|==
literal|null
operator|||
name|remoteDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remoteDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|remoteRootLogDir
operator|=
operator|new
name|Path
argument_list|(
name|remoteDir
argument_list|)
expr_stmt|;
name|String
name|suffix
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT
argument_list|,
name|this
operator|.
name|fileControllerName
argument_list|)
decl_stmt|;
name|this
operator|.
name|remoteRootLogDirSuffix
operator|=
name|conf
operator|.
name|get
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|remoteRootLogDirSuffix
operator|==
literal|null
operator|||
name|this
operator|.
name|remoteRootLogDirSuffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|remoteRootLogDirSuffix
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|)
operator|+
literal|"-ifile"
expr_stmt|;
block|}
name|String
name|compressName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_COMPRESSION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE
argument_list|)
decl_stmt|;
name|this
operator|.
name|compressAlgo
operator|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|compressName
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsNumRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|FS_NUM_RETRIES_ATTR
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsRetryInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|FS_RETRY_INTERVAL_MS_ATTR
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
name|this
operator|.
name|logRollOverMaxFileSize
operator|=
name|getRollOverLogMaxSize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|sysClock
operator|=
name|getSystemClock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeWriter ( final LogAggregationFileControllerContext context)
specifier|public
name|void
name|initializeWriter
parameter_list|(
specifier|final
name|LogAggregationFileControllerContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|UserGroupInformation
name|userUgi
init|=
name|context
operator|.
name|getUserUgi
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
name|context
operator|.
name|getAppAcls
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nodeId
init|=
name|context
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|ApplicationId
name|appId
init|=
name|context
operator|.
name|getAppId
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|remoteLogFile
init|=
name|context
operator|.
name|getRemoteNodeLogFileForApp
argument_list|()
decl_stmt|;
name|this
operator|.
name|ugi
operator|=
name|userUgi
expr_stmt|;
name|logAggregationSuccessfullyInThisCyCle
operator|=
literal|false
expr_stmt|;
name|logsMetaInThisCycle
operator|=
operator|new
name|IndexedPerAggregationLogMeta
argument_list|()
expr_stmt|;
name|logAggregationTimeInThisCycle
operator|=
name|this
operator|.
name|sysClock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|logsMetaInThisCycle
operator|.
name|setUploadTimeStamp
argument_list|(
name|logAggregationTimeInThisCycle
argument_list|)
expr_stmt|;
name|logsMetaInThisCycle
operator|.
name|setRemoteNodeFile
argument_list|(
name|remoteLogFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|remoteRootLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setUMask
argument_list|(
name|APP_LOG_FILE_UMASK
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexedLogsMeta
operator|==
literal|null
condition|)
block|{
name|indexedLogsMeta
operator|=
operator|new
name|IndexedLogsMeta
argument_list|()
expr_stmt|;
name|indexedLogsMeta
operator|.
name|setVersion
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|indexedLogsMeta
operator|.
name|setUser
argument_list|(
name|userUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|indexedLogsMeta
operator|.
name|setAcls
argument_list|(
name|appAcls
argument_list|)
expr_stmt|;
name|indexedLogsMeta
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|String
name|compressName
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_COMPRESSION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE
argument_list|)
decl_stmt|;
name|indexedLogsMeta
operator|.
name|setCompressName
argument_list|(
name|compressName
argument_list|)
expr_stmt|;
block|}
name|Path
name|aggregatedLogFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isLogAggregationInRolling
argument_list|()
condition|)
block|{
name|aggregatedLogFile
operator|=
name|initializeWriterInRolling
argument_list|(
name|remoteLogFile
argument_list|,
name|appId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|aggregatedLogFile
operator|=
name|remoteLogFile
expr_stmt|;
name|fsDataOStream
operator|=
name|fc
operator|.
name|create
argument_list|(
name|remoteLogFile
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
operator|new
name|Options
operator|.
name|CreateOpts
index|[]
block|{}
argument_list|)
expr_stmt|;
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|uuid
operator|=
name|createUUID
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
name|fsDataOStream
operator|.
name|write
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|fsDataOStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|long
name|aggregatedLogFileLength
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|aggregatedLogFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
comment|// append a simple character("\n") to move the writer cursor, so
comment|// we could get the correct position when we call
comment|// fsOutputStream.getStartPos()
specifier|final
name|byte
index|[]
name|dummyBytes
init|=
literal|"\n"
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|fsDataOStream
operator|.
name|write
argument_list|(
name|dummyBytes
argument_list|)
expr_stmt|;
name|fsDataOStream
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|fsDataOStream
operator|.
name|getPos
argument_list|()
operator|>=
operator|(
name|aggregatedLogFileLength
operator|+
name|dummyBytes
operator|.
name|length
operator|)
condition|)
block|{
name|currentOffSet
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|currentOffSet
operator|=
name|aggregatedLogFileLength
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|initializeWriterInRolling (final Path remoteLogFile, final ApplicationId appId, final String nodeId)
specifier|private
name|Path
name|initializeWriterInRolling
parameter_list|(
specifier|final
name|Path
name|remoteLogFile
parameter_list|,
specifier|final
name|ApplicationId
name|appId
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|aggregatedLogFile
init|=
literal|null
decl_stmt|;
comment|// check uuid
comment|// if we can not find uuid, we would load the uuid
comment|// from previous aggregated log files, and at the same
comment|// time, we would delete any aggregated log files which
comment|// has invalid uuid.
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|uuid
operator|=
name|loadUUIDFromLogFile
argument_list|(
name|fc
argument_list|,
name|remoteLogFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|appId
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|Path
name|currentRemoteLogFile
init|=
name|getCurrentRemoteLogFile
argument_list|(
name|fc
argument_list|,
name|remoteLogFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
comment|// check checksum file
name|boolean
name|overwriteCheckSum
init|=
literal|true
decl_stmt|;
name|remoteLogCheckSumFile
operator|=
operator|new
name|Path
argument_list|(
name|remoteLogFile
operator|.
name|getParent
argument_list|()
argument_list|,
operator|(
name|remoteLogFile
operator|.
name|getName
argument_list|()
operator|+
name|CHECK_SUM_FILE_SUFFIX
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|remoteLogCheckSumFile
argument_list|)
condition|)
block|{
comment|// if the checksum file exists, we should reset cached
comment|// indexedLogsMeta.
name|indexedLogsMeta
operator|.
name|getLogMetas
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentRemoteLogFile
operator|!=
literal|null
condition|)
block|{
name|FSDataInputStream
name|checksumFileInputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checksumFileInputStream
operator|=
name|fc
operator|.
name|open
argument_list|(
name|remoteLogCheckSumFile
argument_list|)
expr_stmt|;
name|int
name|nameLength
init|=
name|checksumFileInputStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|nameLength
index|]
decl_stmt|;
name|int
name|actualLength
init|=
name|checksumFileInputStream
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualLength
operator|==
name|nameLength
condition|)
block|{
name|String
name|recoveredLogFile
init|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveredLogFile
operator|.
name|equals
argument_list|(
name|currentRemoteLogFile
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|overwriteCheckSum
operator|=
literal|false
expr_stmt|;
name|long
name|endIndex
init|=
name|checksumFileInputStream
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|IndexedLogsMeta
name|recoveredLogsMeta
init|=
name|loadIndexedLogsMeta
argument_list|(
name|currentRemoteLogFile
argument_list|,
name|endIndex
argument_list|,
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|recoveredLogsMeta
operator|!=
literal|null
condition|)
block|{
name|indexedLogsMeta
operator|=
name|recoveredLogsMeta
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|checksumFileInputStream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// check whether we need roll over old logs
if|if
condition|(
name|currentRemoteLogFile
operator|==
literal|null
operator|||
name|isRollover
argument_list|(
name|fc
argument_list|,
name|currentRemoteLogFile
argument_list|)
condition|)
block|{
name|indexedLogsMeta
operator|.
name|getLogMetas
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|overwriteCheckSum
operator|=
literal|true
expr_stmt|;
name|aggregatedLogFile
operator|=
operator|new
name|Path
argument_list|(
name|remoteLogFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|remoteLogFile
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|sysClock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|fsDataOStream
operator|=
name|fc
operator|.
name|create
argument_list|(
name|aggregatedLogFile
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
operator|new
name|Options
operator|.
name|CreateOpts
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|// writes the uuid
name|fsDataOStream
operator|.
name|write
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
name|fsDataOStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|aggregatedLogFile
operator|=
name|currentRemoteLogFile
expr_stmt|;
name|fsDataOStream
operator|=
name|fc
operator|.
name|create
argument_list|(
name|currentRemoteLogFile
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|APPEND
argument_list|)
argument_list|,
operator|new
name|Options
operator|.
name|CreateOpts
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
comment|// recreate checksum file if needed before aggregate the logs
if|if
condition|(
name|overwriteCheckSum
condition|)
block|{
specifier|final
name|long
name|currentAggregatedLogFileLength
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|aggregatedLogFile
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|checksumFileOutputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|checksumFileOutputStream
operator|=
name|fc
operator|.
name|create
argument_list|(
name|remoteLogCheckSumFile
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|,
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
operator|new
name|Options
operator|.
name|CreateOpts
index|[]
block|{}
argument_list|)
expr_stmt|;
name|String
name|fileName
init|=
name|aggregatedLogFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|checksumFileOutputStream
operator|.
name|writeInt
argument_list|(
name|fileName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|checksumFileOutputStream
operator|.
name|write
argument_list|(
name|fileName
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checksumFileOutputStream
operator|.
name|writeLong
argument_list|(
name|currentAggregatedLogFileLength
argument_list|)
expr_stmt|;
name|checksumFileOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|checksumFileOutputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aggregatedLogFile
return|;
block|}
annotation|@
name|Override
DECL|method|closeWriter ()
specifier|public
name|void
name|closeWriter
parameter_list|()
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|this
operator|.
name|fsDataOStream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (LogKey logKey, LogValue logValue)
specifier|public
name|void
name|write
parameter_list|(
name|LogKey
name|logKey
parameter_list|,
name|LogValue
name|logValue
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|containerId
init|=
name|logKey
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|pendingUploadFiles
init|=
name|logValue
operator|.
name|getPendingLogFilesToUploadForThisContainer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
name|metas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|logFile
range|:
name|pendingUploadFiles
control|)
block|{
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|SecureIOUtils
operator|.
name|openForRead
argument_list|(
name|logFile
argument_list|,
name|logValue
operator|.
name|getUser
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logErrorMessage
argument_list|(
name|logFile
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|long
name|fileLength
init|=
name|logFile
operator|.
name|length
argument_list|()
decl_stmt|;
name|IndexedFileOutputStreamState
name|outputStreamState
init|=
literal|null
decl_stmt|;
try|try
block|{
name|outputStreamState
operator|=
operator|new
name|IndexedFileOutputStreamState
argument_list|(
name|this
operator|.
name|compressAlgo
argument_list|,
name|this
operator|.
name|fsDataOStream
argument_list|,
name|conf
argument_list|,
name|this
operator|.
name|currentOffSet
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|65535
index|]
decl_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
name|long
name|bytesLeft
init|=
name|fileLength
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|//If buffer contents within fileLength, write
if|if
condition|(
name|len
operator|<
name|bytesLeft
condition|)
block|{
name|outputStreamState
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|bytesLeft
operator|-=
name|len
expr_stmt|;
block|}
else|else
block|{
comment|//else only write contents within fileLength, then exit early
name|outputStreamState
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|bytesLeft
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|long
name|newLength
init|=
name|logFile
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileLength
operator|<
name|newLength
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Aggregated logs truncated by approximately "
operator|+
operator|(
name|newLength
operator|-
name|fileLength
operator|)
operator|+
literal|" bytes."
argument_list|)
expr_stmt|;
block|}
name|logAggregationSuccessfullyInThisCyCle
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|logErrorMessage
argument_list|(
name|logFile
argument_list|,
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputStreamState
operator|!=
literal|null
operator|&&
name|outputStreamState
operator|.
name|getOutputStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|outputStreamState
operator|.
name|getOutputStream
argument_list|()
operator|.
name|write
argument_list|(
name|message
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
name|IndexedFileLogMeta
name|meta
init|=
operator|new
name|IndexedFileLogMeta
argument_list|()
decl_stmt|;
name|meta
operator|.
name|setContainerId
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|setFileName
argument_list|(
name|logFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputStreamState
operator|!=
literal|null
condition|)
block|{
name|outputStreamState
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|setFileCompressedSize
argument_list|(
name|outputStreamState
operator|.
name|getCompressedSize
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|setStartIndex
argument_list|(
name|outputStreamState
operator|.
name|getStartPos
argument_list|()
argument_list|)
expr_stmt|;
name|meta
operator|.
name|setFileSize
argument_list|(
name|fileLength
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|setLastModifiedTime
argument_list|(
name|logFile
operator|.
name|lastModified
argument_list|()
argument_list|)
expr_stmt|;
name|metas
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
name|logsMetaInThisCycle
operator|.
name|addContainerLogMeta
argument_list|(
name|containerId
argument_list|,
name|metas
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postWrite (LogAggregationFileControllerContext record)
specifier|public
name|void
name|postWrite
parameter_list|(
name|LogAggregationFileControllerContext
name|record
parameter_list|)
throws|throws
name|Exception
block|{
comment|// always aggregate the previous logsMeta, and append them together
comment|// at the end of the file
name|indexedLogsMeta
operator|.
name|addLogMeta
argument_list|(
name|logsMetaInThisCycle
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|SerializationUtils
operator|.
name|serialize
argument_list|(
name|indexedLogsMeta
argument_list|)
decl_stmt|;
name|this
operator|.
name|fsDataOStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|b
operator|.
name|length
decl_stmt|;
name|this
operator|.
name|fsDataOStream
operator|.
name|writeInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsDataOStream
operator|.
name|write
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
if|if
condition|(
name|logAggregationSuccessfullyInThisCyCle
operator|&&
name|record
operator|.
name|isLogAggregationInRolling
argument_list|()
condition|)
block|{
name|deleteFileWithRetries
argument_list|(
name|fc
argument_list|,
name|ugi
argument_list|,
name|remoteLogCheckSumFile
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteFileWithRetries (final FileContext fileContext, final UserGroupInformation userUgi, final Path deletePath)
specifier|private
name|void
name|deleteFileWithRetries
parameter_list|(
specifier|final
name|FileContext
name|fileContext
parameter_list|,
specifier|final
name|UserGroupInformation
name|userUgi
parameter_list|,
specifier|final
name|Path
name|deletePath
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|FSAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteFileWithPrivilege
argument_list|(
name|fileContext
argument_list|,
name|userUgi
argument_list|,
name|deletePath
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteFileWithRetries (final FileContext fileContext, final Path deletePath)
specifier|private
name|void
name|deleteFileWithRetries
parameter_list|(
specifier|final
name|FileContext
name|fileContext
parameter_list|,
specifier|final
name|Path
name|deletePath
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|FSAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fileContext
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|deletePath
argument_list|)
condition|)
block|{
name|fileContext
operator|.
name|delete
argument_list|(
name|deletePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|truncateFileWithRetries (final FileContext fileContext, final Path truncatePath, final long newLength)
specifier|private
name|void
name|truncateFileWithRetries
parameter_list|(
specifier|final
name|FileContext
name|fileContext
parameter_list|,
specifier|final
name|Path
name|truncatePath
parameter_list|,
specifier|final
name|long
name|newLength
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|FSAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|fileContext
operator|.
name|truncate
argument_list|(
name|truncatePath
argument_list|,
name|newLength
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteFileWithPrivilege (final FileContext fileContext, final UserGroupInformation userUgi, final Path fileToDelete)
specifier|private
name|Object
name|deleteFileWithPrivilege
parameter_list|(
specifier|final
name|FileContext
name|fileContext
parameter_list|,
specifier|final
name|UserGroupInformation
name|userUgi
parameter_list|,
specifier|final
name|Path
name|fileToDelete
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|userUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fileContext
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fileToDelete
argument_list|)
condition|)
block|{
name|fileContext
operator|.
name|delete
argument_list|(
name|fileToDelete
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readAggregatedLogs (ContainerLogsRequest logRequest, OutputStream os)
specifier|public
name|boolean
name|readAggregatedLogs
parameter_list|(
name|ContainerLogsRequest
name|logRequest
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|findLogs
init|=
literal|false
decl_stmt|;
name|boolean
name|createPrintStream
init|=
operator|(
name|os
operator|==
literal|null
operator|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|logRequest
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|logRequest
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|String
name|nodeIdStr
init|=
operator|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|logRequest
operator|.
name|getLogTypes
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|logRequest
operator|.
name|getLogTypes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logTypes
operator|.
name|addAll
argument_list|(
name|logRequest
operator|.
name|getLogTypes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|containerIdStr
init|=
name|logRequest
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|boolean
name|getAllContainers
init|=
operator|(
name|containerIdStr
operator|==
literal|null
operator|||
name|containerIdStr
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|long
name|size
init|=
name|logRequest
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|logRequest
operator|.
name|getAppOwner
argument_list|()
argument_list|,
name|this
operator|.
name|remoteRootLogDir
argument_list|,
name|this
operator|.
name|remoteRootLogDirSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no available log file for "
operator|+
literal|"application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FileStatus
argument_list|>
name|allFiles
init|=
name|getAllNodeFiles
argument_list|(
name|nodeFiles
argument_list|,
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|allFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no available log file for "
operator|+
literal|"application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|checkSumFiles
init|=
name|parseCheckSumFiles
argument_list|(
name|allFiles
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileToRead
init|=
name|getNodeLogFileToRead
argument_list|(
name|allFiles
argument_list|,
name|nodeIdStr
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|65535
index|]
decl_stmt|;
for|for
control|(
name|FileStatus
name|thisNodeFile
range|:
name|fileToRead
control|)
block|{
name|String
name|nodeName
init|=
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Long
name|checkSumIndex
init|=
name|checkSumFiles
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|long
name|endIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|checkSumIndex
operator|!=
literal|null
condition|)
block|{
name|endIndex
operator|=
name|checkSumIndex
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|IndexedLogsMeta
name|indexedLogsMeta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexedLogsMeta
operator|=
name|loadIndexedLogsMeta
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|endIndex
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// DO NOTHING
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not load log meta from the log file:"
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"\n"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|indexedLogsMeta
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|compressAlgo
init|=
name|indexedLogsMeta
operator|.
name|getCompressName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexedPerAggregationLogMeta
name|logMeta
range|:
name|indexedLogsMeta
operator|.
name|getLogMetas
argument_list|()
control|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
argument_list|>
name|meta
range|:
name|logMeta
operator|.
name|getLogMetas
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|IndexedFileLogMeta
name|log
range|:
name|meta
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|getAllContainers
operator|&&
operator|!
name|log
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerIdStr
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|logTypes
operator|!=
literal|null
operator|&&
operator|!
name|logTypes
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|logTypes
operator|.
name|contains
argument_list|(
name|log
operator|.
name|getFileName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|candidates
operator|.
name|add
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Algorithm
name|compressName
init|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|compressAlgo
argument_list|)
decl_stmt|;
name|Decompressor
name|decompressor
init|=
name|compressName
operator|.
name|getDecompressor
argument_list|()
decl_stmt|;
name|FileContext
name|fileContext
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fsin
init|=
name|fileContext
operator|.
name|open
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|currentContainer
init|=
literal|""
decl_stmt|;
for|for
control|(
name|IndexedFileLogMeta
name|candidate
range|:
name|candidates
control|)
block|{
if|if
condition|(
operator|!
name|candidate
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|currentContainer
argument_list|)
condition|)
block|{
if|if
condition|(
name|createPrintStream
condition|)
block|{
name|closePrintStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|os
operator|=
name|LogToolUtils
operator|.
name|createPrintStream
argument_list|(
name|logRequest
operator|.
name|getOutputLocalDir
argument_list|()
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|candidate
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|currentContainer
operator|=
name|candidate
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
block|}
block|}
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|compressName
operator|.
name|createDecompressionStream
argument_list|(
operator|new
name|BoundedRangeFileInputStream
argument_list|(
name|fsin
argument_list|,
name|candidate
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|candidate
operator|.
name|getFileCompressedSize
argument_list|()
argument_list|)
argument_list|,
name|decompressor
argument_list|,
name|getFSInputBufferSize
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|LogToolUtils
operator|.
name|outputContainerLog
argument_list|(
name|candidate
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|nodeName
argument_list|,
name|candidate
operator|.
name|getFileName
argument_list|()
argument_list|,
name|candidate
operator|.
name|getFileSize
argument_list|()
argument_list|,
name|size
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|candidate
operator|.
name|getLastModifiedTime
argument_list|()
argument_list|)
argument_list|,
name|in
argument_list|,
name|os
argument_list|,
name|buf
argument_list|,
name|ContainerLogAggregationType
operator|.
name|AGGREGATED
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|aggregatedLogSuffix
argument_list|(
name|candidate
operator|.
name|getFileName
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|findLogs
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|compressName
operator|.
name|returnDecompressor
argument_list|(
name|decompressor
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|findLogs
return|;
block|}
comment|// TODO: fix me if the remote file system does not support append operation.
annotation|@
name|Override
DECL|method|readAggregatedLogsMeta ( ContainerLogsRequest logRequest)
specifier|public
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|readAggregatedLogsMeta
parameter_list|(
name|ContainerLogsRequest
name|logRequest
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IndexedLogsMeta
argument_list|>
name|listOfLogsMeta
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containersLogMeta
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|logRequest
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|logRequest
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|logRequest
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|String
name|appOwner
init|=
name|logRequest
operator|.
name|getAppOwner
argument_list|()
decl_stmt|;
name|boolean
name|getAllContainers
init|=
operator|(
name|containerIdStr
operator|==
literal|null
operator|||
name|containerIdStr
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|String
name|nodeIdStr
init|=
operator|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|this
operator|.
name|remoteRootLogDir
argument_list|,
name|this
operator|.
name|remoteRootLogDirSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no available log file for "
operator|+
literal|"application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FileStatus
argument_list|>
name|allFiles
init|=
name|getAllNodeFiles
argument_list|(
name|nodeFiles
argument_list|,
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|allFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"There is no available log file for "
operator|+
literal|"application:"
operator|+
name|appId
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|checkSumFiles
init|=
name|parseCheckSumFiles
argument_list|(
name|allFiles
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileToRead
init|=
name|getNodeLogFileToRead
argument_list|(
name|allFiles
argument_list|,
name|nodeIdStr
argument_list|,
name|appId
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|thisNodeFile
range|:
name|fileToRead
control|)
block|{
try|try
block|{
name|Long
name|checkSumIndex
init|=
name|checkSumFiles
operator|.
name|get
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|endIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|checkSumIndex
operator|!=
literal|null
condition|)
block|{
name|endIndex
operator|=
name|checkSumIndex
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|IndexedLogsMeta
name|current
init|=
name|loadIndexedLogsMeta
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|endIndex
argument_list|,
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|listOfLogsMeta
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// DO NOTHING
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not get log meta from the log file:"
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|+
literal|"\n"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|IndexedLogsMeta
name|indexedLogMeta
range|:
name|listOfLogsMeta
control|)
block|{
name|String
name|curNodeId
init|=
name|indexedLogMeta
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexedPerAggregationLogMeta
name|logMeta
range|:
name|indexedLogMeta
operator|.
name|getLogMetas
argument_list|()
control|)
block|{
if|if
condition|(
name|getAllContainers
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
argument_list|>
name|log
range|:
name|logMeta
operator|.
name|getLogMetas
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ContainerLogMeta
name|meta
init|=
operator|new
name|ContainerLogMeta
argument_list|(
name|log
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|curNodeId
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexedFileLogMeta
name|aMeta
range|:
name|log
operator|.
name|getValue
argument_list|()
control|)
block|{
name|meta
operator|.
name|addLogMeta
argument_list|(
name|aMeta
operator|.
name|getFileName
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|aMeta
operator|.
name|getFileSize
argument_list|()
argument_list|)
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|aMeta
operator|.
name|getLastModifiedTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|containersLogMeta
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|logMeta
operator|.
name|getContainerLogMeta
argument_list|(
name|containerIdStr
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ContainerLogMeta
name|meta
init|=
operator|new
name|ContainerLogMeta
argument_list|(
name|containerIdStr
argument_list|,
name|curNodeId
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexedFileLogMeta
name|log
range|:
name|logMeta
operator|.
name|getContainerLogMeta
argument_list|(
name|containerIdStr
argument_list|)
control|)
block|{
name|meta
operator|.
name|addLogMeta
argument_list|(
name|log
operator|.
name|getFileName
argument_list|()
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|log
operator|.
name|getFileSize
argument_list|()
argument_list|)
argument_list|,
name|Times
operator|.
name|format
argument_list|(
name|log
operator|.
name|getLastModifiedTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|containersLogMeta
operator|.
name|add
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|containersLogMeta
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ContainerLogMeta
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ContainerLogMeta
name|o1
parameter_list|,
name|ContainerLogMeta
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getContainerId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|containersLogMeta
return|;
block|}
annotation|@
name|Private
DECL|method|parseCheckSumFiles ( List<FileStatus> fileList)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|parseCheckSumFiles
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileList
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|checkSumFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|status
init|=
operator|new
name|HashSet
argument_list|<
name|FileStatus
argument_list|>
argument_list|(
name|fileList
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|mask
init|=
name|Iterables
operator|.
name|filter
argument_list|(
name|status
argument_list|,
operator|new
name|Predicate
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|FileStatus
name|next
parameter_list|)
block|{
return|return
name|next
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CHECK_SUM_FILE_SUFFIX
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|status
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|FileContext
name|fc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|status
control|)
block|{
name|FSDataInputStream
name|checksumFileInputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fc
operator|==
literal|null
condition|)
block|{
name|fc
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|String
name|nodeName
init|=
literal|null
decl_stmt|;
name|long
name|index
init|=
literal|0L
decl_stmt|;
name|checksumFileInputStream
operator|=
name|fc
operator|.
name|open
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|nameLength
init|=
name|checksumFileInputStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|nameLength
index|]
decl_stmt|;
name|int
name|actualLength
init|=
name|checksumFileInputStream
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualLength
operator|==
name|nameLength
condition|)
block|{
name|nodeName
operator|=
operator|new
name|String
argument_list|(
name|b
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
name|checksumFileInputStream
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
continue|continue;
block|}
if|if
condition|(
name|nodeName
operator|!=
literal|null
operator|&&
operator|!
name|nodeName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|checkSumFiles
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|checksumFileInputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|checkSumFiles
return|;
block|}
annotation|@
name|Private
DECL|method|getNodeLogFileToRead ( List<FileStatus> nodeFiles, String nodeId, ApplicationId appId)
specifier|public
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getNodeLogFileToRead
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|listOfFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|thisNodeFile
range|:
name|nodeFiles
control|)
block|{
name|String
name|nodeName
init|=
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|nodeId
operator|==
literal|null
operator|||
name|nodeId
operator|.
name|isEmpty
argument_list|()
operator|||
name|nodeName
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|)
operator|&&
operator|!
name|nodeName
operator|.
name|endsWith
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
operator|&&
operator|!
name|nodeName
operator|.
name|endsWith
argument_list|(
name|CHECK_SUM_FILE_SUFFIX
argument_list|)
condition|)
block|{
name|listOfFiles
operator|.
name|add
argument_list|(
name|thisNodeFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|listOfFiles
return|;
block|}
DECL|method|getAllNodeFiles ( RemoteIterator<FileStatus> nodeFiles, ApplicationId appId)
specifier|private
name|List
argument_list|<
name|FileStatus
argument_list|>
name|getAllNodeFiles
parameter_list|(
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|listOfFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeFiles
operator|!=
literal|null
operator|&&
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|thisNodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|appId
operator|+
literal|".har"
argument_list|)
condition|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"har:///"
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getRawPath
argument_list|()
argument_list|)
decl_stmt|;
name|nodeFiles
operator|=
name|HarFs
operator|.
name|get
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|listStatusIterator
argument_list|(
name|p
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|listOfFiles
operator|.
name|add
argument_list|(
name|thisNodeFile
argument_list|)
expr_stmt|;
block|}
return|return
name|listOfFiles
return|;
block|}
annotation|@
name|Private
DECL|method|getAllChecksumFiles (Map<String, FileStatus> fileMap, String fileName)
specifier|public
name|FileStatus
name|getAllChecksumFiles
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
name|fileMap
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|FileStatus
argument_list|>
name|file
range|:
name|fileMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|fileName
argument_list|)
operator|&&
name|file
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CHECK_SUM_FILE_SUFFIX
argument_list|)
condition|)
block|{
return|return
name|file
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|renderAggregatedLogsBlock (Block html, ViewContext context)
specifier|public
name|void
name|renderAggregatedLogsBlock
parameter_list|(
name|Block
name|html
parameter_list|,
name|ViewContext
name|context
parameter_list|)
block|{
name|IndexedFileAggregatedLogsBlock
name|block
init|=
operator|new
name|IndexedFileAggregatedLogsBlock
argument_list|(
name|context
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|block
operator|.
name|render
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationOwner (Path aggregatedLogPath, ApplicationId appId)
specifier|public
name|String
name|getApplicationOwner
parameter_list|(
name|Path
name|aggregatedLogPath
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|cachedIndexedLogsMeta
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|cachedIndexedLogsMeta
operator|.
name|getRemoteLogPath
argument_list|()
operator|.
name|equals
argument_list|(
name|aggregatedLogPath
argument_list|)
condition|)
block|{
name|this
operator|.
name|cachedIndexedLogsMeta
operator|=
operator|new
name|CachedIndexedLogsMeta
argument_list|(
name|loadIndexedLogsMeta
argument_list|(
name|aggregatedLogPath
argument_list|,
name|appId
argument_list|)
argument_list|,
name|aggregatedLogPath
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|cachedIndexedLogsMeta
operator|.
name|getCachedIndexedLogsMeta
argument_list|()
operator|.
name|getUser
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAcls ( Path aggregatedLogPath, ApplicationId appId)
specifier|public
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|getApplicationAcls
parameter_list|(
name|Path
name|aggregatedLogPath
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|cachedIndexedLogsMeta
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|cachedIndexedLogsMeta
operator|.
name|getRemoteLogPath
argument_list|()
operator|.
name|equals
argument_list|(
name|aggregatedLogPath
argument_list|)
condition|)
block|{
name|this
operator|.
name|cachedIndexedLogsMeta
operator|=
operator|new
name|CachedIndexedLogsMeta
argument_list|(
name|loadIndexedLogsMeta
argument_list|(
name|aggregatedLogPath
argument_list|,
name|appId
argument_list|)
argument_list|,
name|aggregatedLogPath
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|cachedIndexedLogsMeta
operator|.
name|getCachedIndexedLogsMeta
argument_list|()
operator|.
name|getAcls
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRemoteAppLogDir (ApplicationId appId, String user)
specifier|public
name|Path
name|getRemoteAppLogDir
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|user
argument_list|,
name|this
operator|.
name|remoteRootLogDir
argument_list|,
name|this
operator|.
name|remoteRootLogDirSuffix
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|loadIndexedLogsMeta (Path remoteLogPath, long end, ApplicationId appId)
specifier|public
name|IndexedLogsMeta
name|loadIndexedLogsMeta
parameter_list|(
name|Path
name|remoteLogPath
parameter_list|,
name|long
name|end
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
name|FileContext
name|fileContext
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|remoteLogPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fsDataIStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fsDataIStream
operator|=
name|fileContext
operator|.
name|open
argument_list|(
name|remoteLogPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|end
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|long
name|fileLength
init|=
name|end
operator|<
literal|0
condition|?
name|fileContext
operator|.
name|getFileStatus
argument_list|(
name|remoteLogPath
argument_list|)
operator|.
name|getLen
argument_list|()
else|:
name|end
decl_stmt|;
name|fsDataIStream
operator|.
name|seek
argument_list|(
name|fileLength
operator|-
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|-
name|UUID_LENGTH
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
name|fsDataIStream
operator|.
name|readInt
argument_list|()
decl_stmt|;
comment|// If the offset/log meta size is larger than 64M,
comment|// output a warn message for better debug.
if|if
condition|(
name|offset
operator|>
literal|64
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The log meta size read from "
operator|+
name|remoteLogPath
operator|+
literal|" is "
operator|+
name|offset
argument_list|)
expr_stmt|;
block|}
comment|// Load UUID and make sure the UUID is correct.
name|byte
index|[]
name|uuidRead
init|=
operator|new
name|byte
index|[
name|UUID_LENGTH
index|]
decl_stmt|;
name|int
name|uuidReadLen
init|=
name|fsDataIStream
operator|.
name|read
argument_list|(
name|uuidRead
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|uuid
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|uuid
operator|=
name|createUUID
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uuidReadLen
operator|!=
name|UUID_LENGTH
operator|||
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|uuid
argument_list|,
name|uuidRead
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"the length of loaded UUID:"
operator|+
name|uuidReadLen
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"the loaded UUID:"
operator|+
operator|new
name|String
argument_list|(
name|uuidRead
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"the expected UUID:"
operator|+
operator|new
name|String
argument_list|(
name|this
operator|.
name|uuid
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The UUID from "
operator|+
name|remoteLogPath
operator|+
literal|" is not correct. The offset of loaded UUID is "
operator|+
operator|(
name|fileLength
operator|-
name|UUID_LENGTH
operator|)
argument_list|)
throw|;
block|}
comment|// Load Log Meta
name|byte
index|[]
name|array
init|=
operator|new
name|byte
index|[
name|offset
index|]
decl_stmt|;
name|fsDataIStream
operator|.
name|seek
argument_list|(
name|fileLength
operator|-
name|offset
operator|-
name|Integer
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|-
name|UUID_LENGTH
argument_list|)
expr_stmt|;
name|fsDataIStream
operator|.
name|readFully
argument_list|(
name|array
argument_list|)
expr_stmt|;
name|int
name|actual
init|=
name|array
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
name|offset
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error on loading log meta from "
operator|+
name|remoteLogPath
argument_list|)
throw|;
block|}
return|return
operator|(
name|IndexedLogsMeta
operator|)
name|SerializationUtils
operator|.
name|deserialize
argument_list|(
name|array
argument_list|)
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fsDataIStream
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|loadIndexedLogsMeta (Path remoteLogPath, ApplicationId appId)
specifier|private
name|IndexedLogsMeta
name|loadIndexedLogsMeta
parameter_list|(
name|Path
name|remoteLogPath
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loadIndexedLogsMeta
argument_list|(
name|remoteLogPath
argument_list|,
operator|-
literal|1
argument_list|,
name|appId
argument_list|)
return|;
block|}
comment|/**    * This IndexedLogsMeta includes all the meta information    * for the aggregated log file.    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|class|IndexedLogsMeta
specifier|public
specifier|static
class|class
name|IndexedLogsMeta
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5439875373L
decl_stmt|;
DECL|field|version
specifier|private
name|int
name|version
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|compressName
specifier|private
name|String
name|compressName
decl_stmt|;
DECL|field|acls
specifier|private
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
decl_stmt|;
DECL|field|nodeId
specifier|private
name|String
name|nodeId
decl_stmt|;
DECL|field|logMetas
specifier|private
name|List
argument_list|<
name|IndexedPerAggregationLogMeta
argument_list|>
name|logMetas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getVersion ()
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
DECL|method|setVersion (int version)
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
DECL|method|setUser (String user)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
DECL|method|getAcls ()
specifier|public
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|getAcls
parameter_list|()
block|{
return|return
name|this
operator|.
name|acls
return|;
block|}
DECL|method|setAcls (Map<ApplicationAccessType, String> acls)
specifier|public
name|void
name|setAcls
parameter_list|(
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|)
block|{
name|this
operator|.
name|acls
operator|=
name|acls
expr_stmt|;
block|}
DECL|method|getCompressName ()
specifier|public
name|String
name|getCompressName
parameter_list|()
block|{
return|return
name|compressName
return|;
block|}
DECL|method|setCompressName (String compressName)
specifier|public
name|void
name|setCompressName
parameter_list|(
name|String
name|compressName
parameter_list|)
block|{
name|this
operator|.
name|compressName
operator|=
name|compressName
expr_stmt|;
block|}
DECL|method|getNodeId ()
specifier|public
name|String
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|setNodeId (String nodeId)
specifier|public
name|void
name|setNodeId
parameter_list|(
name|String
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
DECL|method|addLogMeta (IndexedPerAggregationLogMeta logMeta)
specifier|public
name|void
name|addLogMeta
parameter_list|(
name|IndexedPerAggregationLogMeta
name|logMeta
parameter_list|)
block|{
name|logMetas
operator|.
name|add
argument_list|(
name|logMeta
argument_list|)
expr_stmt|;
block|}
DECL|method|getLogMetas ()
specifier|public
name|List
argument_list|<
name|IndexedPerAggregationLogMeta
argument_list|>
name|getLogMetas
parameter_list|()
block|{
return|return
name|logMetas
return|;
block|}
block|}
comment|/**    * This IndexedPerAggregationLogMeta includes the meta information    * for all files which would be aggregated in one    * Log aggregation cycle.    */
DECL|class|IndexedPerAggregationLogMeta
specifier|public
specifier|static
class|class
name|IndexedPerAggregationLogMeta
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|3929298383L
decl_stmt|;
DECL|field|remoteNodeLogFileName
specifier|private
name|String
name|remoteNodeLogFileName
decl_stmt|;
DECL|field|logMetas
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
argument_list|>
name|logMetas
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|uploadTimeStamp
specifier|private
name|long
name|uploadTimeStamp
decl_stmt|;
DECL|method|getRemoteNodeFile ()
specifier|public
name|String
name|getRemoteNodeFile
parameter_list|()
block|{
return|return
name|remoteNodeLogFileName
return|;
block|}
DECL|method|setRemoteNodeFile (String remoteNodeLogFileName)
specifier|public
name|void
name|setRemoteNodeFile
parameter_list|(
name|String
name|remoteNodeLogFileName
parameter_list|)
block|{
name|this
operator|.
name|remoteNodeLogFileName
operator|=
name|remoteNodeLogFileName
expr_stmt|;
block|}
DECL|method|addContainerLogMeta (String containerId, List<IndexedFileLogMeta> logMeta)
specifier|public
name|void
name|addContainerLogMeta
parameter_list|(
name|String
name|containerId
parameter_list|,
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
name|logMeta
parameter_list|)
block|{
name|logMetas
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|logMeta
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainerLogMeta (String containerId)
specifier|public
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
name|getContainerLogMeta
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
return|return
name|logMetas
operator|.
name|get
argument_list|(
name|containerId
argument_list|)
return|;
block|}
DECL|method|getLogMetas ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
argument_list|>
name|getLogMetas
parameter_list|()
block|{
return|return
name|logMetas
return|;
block|}
DECL|method|getUploadTimeStamp ()
specifier|public
name|long
name|getUploadTimeStamp
parameter_list|()
block|{
return|return
name|uploadTimeStamp
return|;
block|}
DECL|method|setUploadTimeStamp (long uploadTimeStamp)
specifier|public
name|void
name|setUploadTimeStamp
parameter_list|(
name|long
name|uploadTimeStamp
parameter_list|)
block|{
name|this
operator|.
name|uploadTimeStamp
operator|=
name|uploadTimeStamp
expr_stmt|;
block|}
block|}
comment|/**    * This IndexedFileLogMeta includes the meta information    * for a single file which would be aggregated in one    * Log aggregation cycle.    *    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|class|IndexedFileLogMeta
specifier|public
specifier|static
class|class
name|IndexedFileLogMeta
implements|implements
name|Serializable
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|containerId
specifier|private
name|String
name|containerId
decl_stmt|;
DECL|field|fileName
specifier|private
name|String
name|fileName
decl_stmt|;
DECL|field|fileSize
specifier|private
name|long
name|fileSize
decl_stmt|;
DECL|field|fileCompressedSize
specifier|private
name|long
name|fileCompressedSize
decl_stmt|;
DECL|field|lastModifiedTime
specifier|private
name|long
name|lastModifiedTime
decl_stmt|;
DECL|field|startIndex
specifier|private
name|long
name|startIndex
decl_stmt|;
DECL|method|getFileName ()
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|fileName
return|;
block|}
DECL|method|setFileName (String fileName)
specifier|public
name|void
name|setFileName
parameter_list|(
name|String
name|fileName
parameter_list|)
block|{
name|this
operator|.
name|fileName
operator|=
name|fileName
expr_stmt|;
block|}
DECL|method|getFileSize ()
specifier|public
name|long
name|getFileSize
parameter_list|()
block|{
return|return
name|fileSize
return|;
block|}
DECL|method|setFileSize (long fileSize)
specifier|public
name|void
name|setFileSize
parameter_list|(
name|long
name|fileSize
parameter_list|)
block|{
name|this
operator|.
name|fileSize
operator|=
name|fileSize
expr_stmt|;
block|}
DECL|method|getFileCompressedSize ()
specifier|public
name|long
name|getFileCompressedSize
parameter_list|()
block|{
return|return
name|fileCompressedSize
return|;
block|}
DECL|method|setFileCompressedSize (long fileCompressedSize)
specifier|public
name|void
name|setFileCompressedSize
parameter_list|(
name|long
name|fileCompressedSize
parameter_list|)
block|{
name|this
operator|.
name|fileCompressedSize
operator|=
name|fileCompressedSize
expr_stmt|;
block|}
DECL|method|getLastModifiedTime ()
specifier|public
name|long
name|getLastModifiedTime
parameter_list|()
block|{
return|return
name|lastModifiedTime
return|;
block|}
DECL|method|setLastModifiedTime (long lastModifiedTime)
specifier|public
name|void
name|setLastModifiedTime
parameter_list|(
name|long
name|lastModifiedTime
parameter_list|)
block|{
name|this
operator|.
name|lastModifiedTime
operator|=
name|lastModifiedTime
expr_stmt|;
block|}
DECL|method|getStartIndex ()
specifier|public
name|long
name|getStartIndex
parameter_list|()
block|{
return|return
name|startIndex
return|;
block|}
DECL|method|setStartIndex (long startIndex)
specifier|public
name|void
name|setStartIndex
parameter_list|(
name|long
name|startIndex
parameter_list|)
block|{
name|this
operator|.
name|startIndex
operator|=
name|startIndex
expr_stmt|;
block|}
DECL|method|getContainerId ()
specifier|public
name|String
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|setContainerId (String containerId)
specifier|public
name|void
name|setContainerId
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
block|}
DECL|method|logErrorMessage (File logFile, Exception e)
specifier|private
specifier|static
name|String
name|logErrorMessage
parameter_list|(
name|File
name|logFile
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Error aggregating log file. Log file : "
operator|+
name|logFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|". "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
DECL|class|IndexedFileOutputStreamState
specifier|private
specifier|static
class|class
name|IndexedFileOutputStreamState
block|{
DECL|field|compressAlgo
specifier|private
specifier|final
name|Algorithm
name|compressAlgo
decl_stmt|;
DECL|field|compressor
specifier|private
name|Compressor
name|compressor
decl_stmt|;
DECL|field|fsOut
specifier|private
specifier|final
name|FSDataOutputStream
name|fsOut
decl_stmt|;
DECL|field|posStart
specifier|private
name|long
name|posStart
decl_stmt|;
DECL|field|fsBufferedOutput
specifier|private
specifier|final
name|SimpleBufferedOutputStream
name|fsBufferedOutput
decl_stmt|;
DECL|field|out
specifier|private
name|OutputStream
name|out
decl_stmt|;
DECL|field|offset
specifier|private
name|long
name|offset
decl_stmt|;
DECL|method|IndexedFileOutputStreamState (Algorithm compressionName, FSDataOutputStream fsOut, Configuration conf, long offset)
name|IndexedFileOutputStreamState
parameter_list|(
name|Algorithm
name|compressionName
parameter_list|,
name|FSDataOutputStream
name|fsOut
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compressAlgo
operator|=
name|compressionName
expr_stmt|;
name|this
operator|.
name|fsOut
operator|=
name|fsOut
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|posStart
operator|=
name|fsOut
operator|.
name|getPos
argument_list|()
expr_stmt|;
name|BytesWritable
name|fsOutputBuffer
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|fsOutputBuffer
operator|.
name|setCapacity
argument_list|(
name|LogAggregationIndexedFileController
operator|.
name|getFSOutputBufferSize
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fsBufferedOutput
operator|=
operator|new
name|SimpleBufferedOutputStream
argument_list|(
name|this
operator|.
name|fsOut
argument_list|,
name|fsOutputBuffer
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|compressor
operator|=
name|compressAlgo
operator|.
name|getCompressor
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|out
operator|=
name|compressAlgo
operator|.
name|createCompressionStream
argument_list|(
name|fsBufferedOutput
argument_list|,
name|compressor
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|compressAlgo
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|getOutputStream ()
name|OutputStream
name|getOutputStream
parameter_list|()
block|{
return|return
name|out
return|;
block|}
DECL|method|getCurrentPos ()
name|long
name|getCurrentPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fsOut
operator|.
name|getPos
argument_list|()
operator|+
name|fsBufferedOutput
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getStartPos ()
name|long
name|getStartPos
parameter_list|()
block|{
return|return
name|posStart
operator|+
name|offset
return|;
block|}
DECL|method|getCompressedSize ()
name|long
name|getCompressedSize
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|ret
init|=
name|getCurrentPos
argument_list|()
operator|-
name|posStart
decl_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|finish ()
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|compressAlgo
operator|.
name|returnCompressor
argument_list|(
name|compressor
argument_list|)
expr_stmt|;
name|compressor
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|class|CachedIndexedLogsMeta
specifier|private
specifier|static
class|class
name|CachedIndexedLogsMeta
block|{
DECL|field|remoteLogPath
specifier|private
specifier|final
name|Path
name|remoteLogPath
decl_stmt|;
DECL|field|indexedLogsMeta
specifier|private
specifier|final
name|IndexedLogsMeta
name|indexedLogsMeta
decl_stmt|;
DECL|method|CachedIndexedLogsMeta (IndexedLogsMeta indexedLogsMeta, Path remoteLogPath)
name|CachedIndexedLogsMeta
parameter_list|(
name|IndexedLogsMeta
name|indexedLogsMeta
parameter_list|,
name|Path
name|remoteLogPath
parameter_list|)
block|{
name|this
operator|.
name|indexedLogsMeta
operator|=
name|indexedLogsMeta
expr_stmt|;
name|this
operator|.
name|remoteLogPath
operator|=
name|remoteLogPath
expr_stmt|;
block|}
DECL|method|getRemoteLogPath ()
specifier|public
name|Path
name|getRemoteLogPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|remoteLogPath
return|;
block|}
DECL|method|getCachedIndexedLogsMeta ()
specifier|public
name|IndexedLogsMeta
name|getCachedIndexedLogsMeta
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexedLogsMeta
return|;
block|}
block|}
annotation|@
name|Private
DECL|method|getFSOutputBufferSize (Configuration conf)
specifier|public
specifier|static
name|int
name|getFSOutputBufferSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|FS_OUTPUT_BUF_SIZE_ATTR
argument_list|,
literal|256
operator|*
literal|1024
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|getFSInputBufferSize (Configuration conf)
specifier|public
specifier|static
name|int
name|getFSInputBufferSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|FS_INPUT_BUF_SIZE_ATTR
argument_list|,
literal|256
operator|*
literal|1024
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getRollOverLogMaxSize (Configuration conf)
specifier|public
name|long
name|getRollOverLogMaxSize
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
name|conf
operator|.
name|getInt
argument_list|(
name|LOG_ROLL_OVER_MAX_FILE_SIZE_GB
argument_list|,
literal|10
argument_list|)
return|;
block|}
DECL|class|FSAction
specifier|private
specifier|abstract
class|class
name|FSAction
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|run ()
specifier|abstract
name|T
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|runWithRetries ()
name|T
name|runWithRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|run
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception while executing an FS operation."
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|retry
operator|>
name|fsNumRetries
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Maxed out FS retries. Giving up!"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying operation on FS. Retry no. "
operator|+
name|retry
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|fsRetryInterval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getCurrentRemoteLogFile (final FileContext fc, final Path parent, final String nodeId)
specifier|private
name|Path
name|getCurrentRemoteLogFile
parameter_list|(
specifier|final
name|FileContext
name|fc
parameter_list|,
specifier|final
name|Path
name|parent
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|files
init|=
name|fc
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|long
name|maxTime
init|=
literal|0L
decl_stmt|;
name|Path
name|returnPath
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|files
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|candidate
init|=
name|files
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|candidate
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|&&
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
name|LogAggregationUtils
operator|.
name|TMP_FILE_SUFFIX
argument_list|)
operator|&&
operator|!
name|fileName
operator|.
name|endsWith
argument_list|(
name|CHECK_SUM_FILE_SUFFIX
argument_list|)
condition|)
block|{
if|if
condition|(
name|candidate
operator|.
name|getModificationTime
argument_list|()
operator|>
name|maxTime
condition|)
block|{
name|maxTime
operator|=
name|candidate
operator|.
name|getModificationTime
argument_list|()
expr_stmt|;
name|returnPath
operator|=
name|candidate
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|returnPath
return|;
block|}
DECL|method|loadUUIDFromLogFile (final FileContext fc, final Path parent, final ApplicationId appId, final String nodeId)
specifier|private
name|byte
index|[]
name|loadUUIDFromLogFile
parameter_list|(
specifier|final
name|FileContext
name|fc
parameter_list|,
specifier|final
name|Path
name|parent
parameter_list|,
specifier|final
name|ApplicationId
name|appId
parameter_list|,
specifier|final
name|String
name|nodeId
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|id
init|=
literal|null
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|files
init|=
name|fc
operator|.
name|listStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fsDataInputStream
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|uuid
init|=
name|createUUID
argument_list|(
name|appId
argument_list|)
decl_stmt|;
while|while
condition|(
name|files
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|Path
name|checkPath
init|=
name|files
operator|.
name|next
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkPath
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|&&
operator|!
name|checkPath
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|CHECK_SUM_FILE_SUFFIX
argument_list|)
condition|)
block|{
name|fsDataInputStream
operator|=
name|fc
operator|.
name|open
argument_list|(
name|checkPath
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|uuid
operator|.
name|length
index|]
decl_stmt|;
name|int
name|actual
init|=
name|fsDataInputStream
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|actual
operator|!=
name|uuid
operator|.
name|length
operator|||
name|Arrays
operator|.
name|equals
argument_list|(
name|b
argument_list|,
name|uuid
argument_list|)
condition|)
block|{
name|deleteFileWithRetries
argument_list|(
name|fc
argument_list|,
name|checkPath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|uuid
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
name|LOG
argument_list|,
name|fsDataInputStream
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
operator|==
literal|null
condition|?
name|uuid
else|:
name|id
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|isRollover (final FileContext fc, final Path candidate)
specifier|public
name|boolean
name|isRollover
parameter_list|(
specifier|final
name|FileContext
name|fc
parameter_list|,
specifier|final
name|Path
name|candidate
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fs
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|candidate
argument_list|)
decl_stmt|;
return|return
name|fs
operator|.
name|getLen
argument_list|()
operator|>=
name|this
operator|.
name|logRollOverMaxFileSize
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getSystemClock ()
specifier|public
name|Clock
name|getSystemClock
parameter_list|()
block|{
return|return
name|SystemClock
operator|.
name|getInstance
argument_list|()
return|;
block|}
DECL|method|createUUID (ApplicationId appId)
specifier|private
name|byte
index|[]
name|createUUID
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|MessageDigest
name|digest
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-256"
argument_list|)
decl_stmt|;
return|return
name|digest
operator|.
name|digest
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

