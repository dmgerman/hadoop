begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.protocolrecords.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodePublishVolumeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesRequest
operator|.
name|VolumeCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|CsiAdaptorProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Request to publish volume on node manager.  */
end_comment

begin_class
DECL|class|NodePublishVolumeRequestPBImpl
specifier|public
class|class
name|NodePublishVolumeRequestPBImpl
extends|extends
name|NodePublishVolumeRequest
block|{
DECL|field|builder
specifier|private
name|CsiAdaptorProtos
operator|.
name|NodePublishVolumeRequest
operator|.
name|Builder
name|builder
decl_stmt|;
DECL|method|NodePublishVolumeRequestPBImpl ()
specifier|public
name|NodePublishVolumeRequestPBImpl
parameter_list|()
block|{
name|this
operator|.
name|builder
operator|=
name|CsiAdaptorProtos
operator|.
name|NodePublishVolumeRequest
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|NodePublishVolumeRequestPBImpl ( CsiAdaptorProtos.NodePublishVolumeRequest request)
specifier|public
name|NodePublishVolumeRequestPBImpl
parameter_list|(
name|CsiAdaptorProtos
operator|.
name|NodePublishVolumeRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|builder
operator|=
name|request
operator|.
name|toBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|CsiAdaptorProtos
operator|.
name|NodePublishVolumeRequest
name|getProto
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setVolumeId (String volumeId)
specifier|public
name|void
name|setVolumeId
parameter_list|(
name|String
name|volumeId
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setVolumeId
argument_list|(
name|volumeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getVolumeId ()
specifier|public
name|String
name|getVolumeId
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getVolumeId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setReadonly (boolean readonly)
specifier|public
name|void
name|setReadonly
parameter_list|(
name|boolean
name|readonly
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReadonly
argument_list|(
name|readonly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReadOnly ()
specifier|public
name|boolean
name|getReadOnly
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getReadonly
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setSecrets (Map<String, String> secrets)
specifier|public
name|void
name|setSecrets
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|secrets
parameter_list|)
block|{
if|if
condition|(
name|secrets
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|secrets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|YarnProtos
operator|.
name|StringStringMapProto
name|mapEntry
init|=
name|YarnProtos
operator|.
name|StringStringMapProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addSecrets
argument_list|(
name|mapEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getSecrets ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSecrets
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getSecretsCount
argument_list|()
operator|>
literal|0
condition|?
name|ProtoUtils
operator|.
name|convertStringStringMapProtoListToMap
argument_list|(
name|builder
operator|.
name|getSecretsList
argument_list|()
argument_list|)
else|:
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTargetPath ()
specifier|public
name|String
name|getTargetPath
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getTargetPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setStagingPath (String stagingPath)
specifier|public
name|void
name|setStagingPath
parameter_list|(
name|String
name|stagingPath
parameter_list|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStagingTargetPath
argument_list|(
name|stagingPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStagingPath ()
specifier|public
name|String
name|getStagingPath
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getStagingTargetPath
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setPublishContext (Map<String, String> publishContext)
specifier|public
name|void
name|setPublishContext
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|publishContext
parameter_list|)
block|{
if|if
condition|(
name|publishContext
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|publishContext
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|YarnProtos
operator|.
name|StringStringMapProto
name|mapEntry
init|=
name|YarnProtos
operator|.
name|StringStringMapProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addPublishContext
argument_list|(
name|mapEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getPublishContext ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPublishContext
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getPublishContextCount
argument_list|()
operator|>
literal|0
condition|?
name|ProtoUtils
operator|.
name|convertStringStringMapProtoListToMap
argument_list|(
name|builder
operator|.
name|getPublishContextList
argument_list|()
argument_list|)
else|:
name|ImmutableMap
operator|.
name|of
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setTargetPath (String targetPath)
specifier|public
name|void
name|setTargetPath
parameter_list|(
name|String
name|targetPath
parameter_list|)
block|{
if|if
condition|(
name|targetPath
operator|!=
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTargetPath
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setVolumeCapability ( VolumeCapability capability)
specifier|public
name|void
name|setVolumeCapability
parameter_list|(
name|VolumeCapability
name|capability
parameter_list|)
block|{
if|if
condition|(
name|capability
operator|!=
literal|null
condition|)
block|{
name|CsiAdaptorProtos
operator|.
name|VolumeCapability
name|vc
init|=
name|CsiAdaptorProtos
operator|.
name|VolumeCapability
operator|.
name|newBuilder
argument_list|()
operator|.
name|setAccessMode
argument_list|(
name|CsiAdaptorProtos
operator|.
name|VolumeCapability
operator|.
name|AccessMode
operator|.
name|forNumber
argument_list|(
name|capability
operator|.
name|getAccessMode
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setVolumeType
argument_list|(
name|CsiAdaptorProtos
operator|.
name|VolumeCapability
operator|.
name|VolumeType
operator|.
name|forNumber
argument_list|(
name|capability
operator|.
name|getVolumeType
argument_list|()
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAllMountFlags
argument_list|(
name|capability
operator|.
name|getMountFlags
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setVolumeCapability
argument_list|(
name|vc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getVolumeCapability ()
specifier|public
name|VolumeCapability
name|getVolumeCapability
parameter_list|()
block|{
name|CsiAdaptorProtos
operator|.
name|VolumeCapability
name|cap0
init|=
name|builder
operator|.
name|getVolumeCapability
argument_list|()
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|hasVolumeCapability
argument_list|()
condition|)
block|{
return|return
operator|new
name|VolumeCapability
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|AccessMode
operator|.
name|valueOf
argument_list|(
name|cap0
operator|.
name|getAccessMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|ValidateVolumeCapabilitiesRequest
operator|.
name|VolumeType
operator|.
name|valueOf
argument_list|(
name|cap0
operator|.
name|getVolumeType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|cap0
operator|.
name|getMountFlagsList
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|getProto
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

