begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|Log4jWarningErrorMetricsAppender
specifier|public
class|class
name|Log4jWarningErrorMetricsAppender
extends|extends
name|AppenderSkeleton
block|{
DECL|field|LOG_METRICS_APPENDER
specifier|public
specifier|static
specifier|final
name|String
name|LOG_METRICS_APPENDER
init|=
literal|"RM_LOG_METRICS_APPENDER"
decl_stmt|;
DECL|field|MAX_MESSAGE_SIZE
specifier|static
specifier|final
name|int
name|MAX_MESSAGE_SIZE
init|=
literal|2048
decl_stmt|;
DECL|class|Element
specifier|static
specifier|public
class|class
name|Element
block|{
DECL|field|count
specifier|public
name|Long
name|count
decl_stmt|;
DECL|field|timestampSeconds
specifier|public
name|Long
name|timestampSeconds
decl_stmt|;
DECL|method|Element (Long count, Long timestampSeconds)
name|Element
parameter_list|(
name|Long
name|count
parameter_list|,
name|Long
name|timestampSeconds
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|timestampSeconds
operator|=
name|timestampSeconds
expr_stmt|;
block|}
block|}
DECL|class|PurgeElement
specifier|static
class|class
name|PurgeElement
implements|implements
name|Comparable
argument_list|<
name|PurgeElement
argument_list|>
block|{
DECL|field|message
name|String
name|message
decl_stmt|;
DECL|field|timestamp
name|Long
name|timestamp
decl_stmt|;
DECL|method|PurgeElement (String message, Long timestamp)
name|PurgeElement
parameter_list|(
name|String
name|message
parameter_list|,
name|Long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
DECL|method|compareTo (PurgeElement e)
specifier|public
name|int
name|compareTo
parameter_list|(
name|PurgeElement
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Null element passed to compareTo"
argument_list|)
throw|;
block|}
name|int
name|ret
init|=
name|this
operator|.
name|timestamp
operator|.
name|compareTo
argument_list|(
name|e
operator|.
name|timestamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
return|return
name|this
operator|.
name|message
operator|.
name|compareTo
argument_list|(
name|e
operator|.
name|message
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object e)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
operator|||
operator|!
operator|(
name|e
operator|instanceof
name|PurgeElement
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|e
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
name|PurgeElement
name|el
init|=
operator|(
name|PurgeElement
operator|)
name|e
decl_stmt|;
return|return
operator|(
name|this
operator|.
name|message
operator|.
name|equals
argument_list|(
name|el
operator|.
name|message
argument_list|)
operator|)
operator|&&
operator|(
name|this
operator|.
name|timestamp
operator|.
name|equals
argument_list|(
name|el
operator|.
name|timestamp
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|timestamp
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
DECL|field|errors
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|errors
decl_stmt|;
DECL|field|warnings
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|warnings
decl_stmt|;
DECL|field|errorsTimestampCount
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|errorsTimestampCount
decl_stmt|;
DECL|field|warningsTimestampCount
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|warningsTimestampCount
decl_stmt|;
DECL|field|errorsPurgeInformation
name|SortedSet
argument_list|<
name|PurgeElement
argument_list|>
name|errorsPurgeInformation
decl_stmt|;
DECL|field|warningsPurgeInformation
name|SortedSet
argument_list|<
name|PurgeElement
argument_list|>
name|warningsPurgeInformation
decl_stmt|;
DECL|field|cleanupTimer
name|Timer
name|cleanupTimer
decl_stmt|;
DECL|field|cleanupInterval
name|long
name|cleanupInterval
decl_stmt|;
DECL|field|messageAgeLimitSeconds
name|long
name|messageAgeLimitSeconds
decl_stmt|;
DECL|field|maxUniqueMessages
name|int
name|maxUniqueMessages
decl_stmt|;
DECL|field|lock
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**    * Create an appender to keep track of the errors and warnings logged by the    * system. It will keep purge messages older than 2 days. It will store upto    * the last 500 unique errors and the last 500 unique warnings. The thread to    * purge message will run every 5 minutes, unless the 500 message limit is hit    * earlier.    */
DECL|method|Log4jWarningErrorMetricsAppender ()
specifier|public
name|Log4jWarningErrorMetricsAppender
parameter_list|()
block|{
name|this
argument_list|(
literal|5
operator|*
literal|60
argument_list|,
literal|24
operator|*
literal|60
operator|*
literal|60
argument_list|,
literal|250
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create an appender to keep track of the errors and warnings logged by the    * system.    *     * @param cleanupIntervalSeconds    *          the interval at which old messages are purged to prevent the    *          message stores from growing unbounded    * @param messageAgeLimitSeconds    *          the maximum age of a message in seconds before it is purged from    *          the store    * @param maxUniqueMessages    *          the maximum number of unique messages of each type we keep before    *          we start purging    */
DECL|method|Log4jWarningErrorMetricsAppender (int cleanupIntervalSeconds, long messageAgeLimitSeconds, int maxUniqueMessages)
specifier|public
name|Log4jWarningErrorMetricsAppender
parameter_list|(
name|int
name|cleanupIntervalSeconds
parameter_list|,
name|long
name|messageAgeLimitSeconds
parameter_list|,
name|int
name|maxUniqueMessages
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|errors
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|warnings
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|errorsTimestampCount
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|warningsTimestampCount
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|errorsPurgeInformation
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|warningsPurgeInformation
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
name|cleanupTimer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|cleanupInterval
operator|=
name|cleanupIntervalSeconds
operator|*
literal|1000
expr_stmt|;
name|cleanupTimer
operator|.
name|schedule
argument_list|(
operator|new
name|ErrorAndWarningsCleanup
argument_list|()
argument_list|,
name|cleanupInterval
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageAgeLimitSeconds
operator|=
name|messageAgeLimitSeconds
expr_stmt|;
name|this
operator|.
name|maxUniqueMessages
operator|=
name|maxUniqueMessages
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
name|LOG_METRICS_APPENDER
argument_list|)
expr_stmt|;
name|this
operator|.
name|setThreshold
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|append (LoggingEvent event)
specifier|protected
name|void
name|append
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|String
name|message
init|=
name|event
operator|.
name|getRenderedMessage
argument_list|()
decl_stmt|;
name|String
index|[]
name|throwableStr
init|=
name|event
operator|.
name|getThrowableStrRep
argument_list|()
decl_stmt|;
if|if
condition|(
name|throwableStr
operator|!=
literal|null
condition|)
block|{
name|message
operator|=
name|message
operator|+
literal|"\n"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|,
name|throwableStr
argument_list|)
expr_stmt|;
name|message
operator|=
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
operator|.
name|left
argument_list|(
name|message
argument_list|,
name|MAX_MESSAGE_SIZE
argument_list|)
expr_stmt|;
block|}
name|int
name|level
init|=
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|level
operator|==
name|Level
operator|.
name|WARN_INT
operator|||
name|level
operator|==
name|Level
operator|.
name|ERROR_INT
condition|)
block|{
comment|// store second level information
name|Long
name|eventTimeSeconds
init|=
name|event
operator|.
name|getTimeStamp
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|map
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|timestampsCount
decl_stmt|;
name|SortedSet
argument_list|<
name|PurgeElement
argument_list|>
name|purgeInformation
decl_stmt|;
if|if
condition|(
name|level
operator|==
name|Level
operator|.
name|WARN_INT
condition|)
block|{
name|map
operator|=
name|warnings
expr_stmt|;
name|timestampsCount
operator|=
name|warningsTimestampCount
expr_stmt|;
name|purgeInformation
operator|=
name|warningsPurgeInformation
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
name|errors
expr_stmt|;
name|timestampsCount
operator|=
name|errorsTimestampCount
expr_stmt|;
name|purgeInformation
operator|=
name|errorsPurgeInformation
expr_stmt|;
block|}
name|updateMessageDetails
argument_list|(
name|message
argument_list|,
name|eventTimeSeconds
argument_list|,
name|map
argument_list|,
name|timestampsCount
argument_list|,
name|purgeInformation
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateMessageDetails (String message, Long eventTimeSeconds, Map<String, SortedMap<Long, Integer>> map, SortedMap<Long, Integer> timestampsCount, SortedSet<PurgeElement> purgeInformation)
specifier|private
name|void
name|updateMessageDetails
parameter_list|(
name|String
name|message
parameter_list|,
name|Long
name|eventTimeSeconds
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|map
parameter_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|timestampsCount
parameter_list|,
name|SortedSet
argument_list|<
name|PurgeElement
argument_list|>
name|purgeInformation
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|tmp
init|=
name|map
operator|.
name|get
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Long
name|lastMessageTime
init|=
name|tmp
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|containsKey
argument_list|(
name|eventTimeSeconds
argument_list|)
condition|)
block|{
name|value
operator|=
name|tmp
operator|.
name|get
argument_list|(
name|eventTimeSeconds
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|tmp
operator|.
name|put
argument_list|(
name|eventTimeSeconds
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|purgeInformation
operator|.
name|remove
argument_list|(
operator|new
name|PurgeElement
argument_list|(
name|message
argument_list|,
name|lastMessageTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|value
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|value
operator|.
name|put
argument_list|(
name|eventTimeSeconds
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|message
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
name|maxUniqueMessages
operator|*
literal|2
condition|)
block|{
name|cleanupTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|cleanupTimer
operator|=
operator|new
name|Timer
argument_list|()
expr_stmt|;
name|cleanupTimer
operator|.
name|schedule
argument_list|(
operator|new
name|ErrorAndWarningsCleanup
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|purgeInformation
operator|.
name|add
argument_list|(
operator|new
name|PurgeElement
argument_list|(
name|message
argument_list|,
name|eventTimeSeconds
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|newValue
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|timestampsCount
operator|.
name|containsKey
argument_list|(
name|eventTimeSeconds
argument_list|)
condition|)
block|{
name|newValue
operator|=
name|timestampsCount
operator|.
name|get
argument_list|(
name|eventTimeSeconds
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|timestampsCount
operator|.
name|put
argument_list|(
name|eventTimeSeconds
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|cleanupTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|requiresLayout ()
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**    * Get the counts of errors in the time periods provided. Note that the counts    * provided by this function may differ from the ones provided by    * getErrorMessagesAndCounts since the message store is purged at regular    * intervals to prevent it from growing without bounds, while the store for    * the counts is purged less frequently.    *     * @param cutoffs    *          list of timestamp cutoffs(in seconds) for which the counts are    *          desired    * @return list of error counts in the time periods corresponding to cutoffs    */
DECL|method|getErrorCounts (List<Long> cutoffs)
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getErrorCounts
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|cutoffs
parameter_list|)
block|{
return|return
name|this
operator|.
name|getCounts
argument_list|(
name|errorsTimestampCount
argument_list|,
name|cutoffs
argument_list|)
return|;
block|}
comment|/**    * Get the counts of warnings in the time periods provided. Note that the    * counts provided by this function may differ from the ones provided by    * getWarningMessagesAndCounts since the message store is purged at regular    * intervals to prevent it from growing without bounds, while the store for    * the counts is purged less frequently.    *     * @param cutoffs    *          list of timestamp cutoffs(in seconds) for which the counts are    *          desired    * @return list of warning counts in the time periods corresponding to cutoffs    */
DECL|method|getWarningCounts (List<Long> cutoffs)
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getWarningCounts
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|cutoffs
parameter_list|)
block|{
return|return
name|this
operator|.
name|getCounts
argument_list|(
name|warningsTimestampCount
argument_list|,
name|cutoffs
argument_list|)
return|;
block|}
DECL|method|getCounts (SortedMap<Long, Integer> map, List<Long> cutoffs)
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getCounts
parameter_list|(
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|cutoffs
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Long
name|largestCutoff
init|=
name|Collections
operator|.
name|min
argument_list|(
name|cutoffs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cutoffs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|submap
init|=
name|map
operator|.
name|tailMap
argument_list|(
name|largestCutoff
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|submap
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cutoffs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|>=
name|cutoffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|int
name|tmp
init|=
name|ret
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ret
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|tmp
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Get the errors and the number of occurrences for each of the errors for the    * time cutoffs provided. Note that the counts provided by this function may    * differ from the ones provided by getErrorCounts since the message store is    * purged at regular intervals to prevent it from growing without bounds,    * while the store for the counts is purged less frequently.    *     * @param cutoffs    *          list of timestamp cutoffs(in seconds) for which the counts are    *          desired    * @return list of maps corresponding for each cutoff provided; each map    *         contains the error and the number of times the error occurred in    *         the time period    */
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|>
DECL|method|getErrorMessagesAndCounts (List<Long> cutoffs)
name|getErrorMessagesAndCounts
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|cutoffs
parameter_list|)
block|{
return|return
name|this
operator|.
name|getElementsAndCounts
argument_list|(
name|errors
argument_list|,
name|cutoffs
argument_list|,
name|errorsPurgeInformation
argument_list|)
return|;
block|}
comment|/**    * Get the warning and the number of occurrences for each of the warnings for    * the time cutoffs provided. Note that the counts provided by this function    * may differ from the ones provided by getWarningCounts since the message    * store is purged at regular intervals to prevent it from growing without    * bounds, while the store for the counts is purged less frequently.    *     * @param cutoffs    *          list of timestamp cutoffs(in seconds) for which the counts are    *          desired    * @return list of maps corresponding for each cutoff provided; each map    *         contains the warning and the number of times the error occurred in    *         the time period    */
DECL|method|getWarningMessagesAndCounts ( List<Long> cutoffs)
specifier|public
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|>
name|getWarningMessagesAndCounts
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|cutoffs
parameter_list|)
block|{
return|return
name|this
operator|.
name|getElementsAndCounts
argument_list|(
name|warnings
argument_list|,
name|cutoffs
argument_list|,
name|warningsPurgeInformation
argument_list|)
return|;
block|}
DECL|method|getElementsAndCounts ( Map<String, SortedMap<Long, Integer>> map, List<Long> cutoffs, SortedSet<PurgeElement> purgeInformation)
specifier|private
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|>
name|getElementsAndCounts
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|cutoffs
parameter_list|,
name|SortedSet
argument_list|<
name|PurgeElement
argument_list|>
name|purgeInformation
parameter_list|)
block|{
if|if
condition|(
name|purgeInformation
operator|.
name|size
argument_list|()
operator|>
name|maxUniqueMessages
condition|)
block|{
name|ErrorAndWarningsCleanup
name|cleanup
init|=
operator|new
name|ErrorAndWarningsCleanup
argument_list|()
decl_stmt|;
name|long
name|cutoff
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
operator|(
name|messageAgeLimitSeconds
operator|*
literal|1000
operator|)
decl_stmt|;
name|cutoff
operator|=
operator|(
name|cutoff
operator|/
literal|1000
operator|)
expr_stmt|;
name|cleanup
operator|.
name|cleanupMessages
argument_list|(
name|map
argument_list|,
name|purgeInformation
argument_list|,
name|cutoff
argument_list|,
name|maxUniqueMessages
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cutoffs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cutoffs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|element
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cutoffs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
name|retMap
init|=
name|ret
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|qualifyingTimes
init|=
name|element
operator|.
name|getValue
argument_list|()
operator|.
name|tailMap
argument_list|(
name|cutoffs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|qualifyingTimes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|count
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qualifyingTimes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|retMap
operator|.
name|put
argument_list|(
name|element
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Element
argument_list|(
name|count
argument_list|,
name|qualifyingTimes
operator|.
name|lastKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|// getters and setters for log4j
DECL|method|getCleanupInterval ()
specifier|public
name|long
name|getCleanupInterval
parameter_list|()
block|{
return|return
name|cleanupInterval
return|;
block|}
DECL|method|setCleanupInterval (long cleanupInterval)
specifier|public
name|void
name|setCleanupInterval
parameter_list|(
name|long
name|cleanupInterval
parameter_list|)
block|{
name|this
operator|.
name|cleanupInterval
operator|=
name|cleanupInterval
expr_stmt|;
block|}
DECL|method|getMessageAgeLimitSeconds ()
specifier|public
name|long
name|getMessageAgeLimitSeconds
parameter_list|()
block|{
return|return
name|messageAgeLimitSeconds
return|;
block|}
DECL|method|setMessageAgeLimitSeconds (long messageAgeLimitSeconds)
specifier|public
name|void
name|setMessageAgeLimitSeconds
parameter_list|(
name|long
name|messageAgeLimitSeconds
parameter_list|)
block|{
name|this
operator|.
name|messageAgeLimitSeconds
operator|=
name|messageAgeLimitSeconds
expr_stmt|;
block|}
DECL|method|getMaxUniqueMessages ()
specifier|public
name|int
name|getMaxUniqueMessages
parameter_list|()
block|{
return|return
name|maxUniqueMessages
return|;
block|}
DECL|method|setMaxUniqueMessages (int maxUniqueMessages)
specifier|public
name|void
name|setMaxUniqueMessages
parameter_list|(
name|int
name|maxUniqueMessages
parameter_list|)
block|{
name|this
operator|.
name|maxUniqueMessages
operator|=
name|maxUniqueMessages
expr_stmt|;
block|}
DECL|class|ErrorAndWarningsCleanup
class|class
name|ErrorAndWarningsCleanup
extends|extends
name|TimerTask
block|{
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|cutoff
init|=
name|Time
operator|.
name|now
argument_list|()
operator|-
operator|(
name|messageAgeLimitSeconds
operator|*
literal|1000
operator|)
decl_stmt|;
name|cutoff
operator|=
operator|(
name|cutoff
operator|/
literal|1000
operator|)
expr_stmt|;
name|cleanupMessages
argument_list|(
name|errors
argument_list|,
name|errorsPurgeInformation
argument_list|,
name|cutoff
argument_list|,
name|maxUniqueMessages
argument_list|)
expr_stmt|;
name|cleanupMessages
argument_list|(
name|warnings
argument_list|,
name|warningsPurgeInformation
argument_list|,
name|cutoff
argument_list|,
name|maxUniqueMessages
argument_list|)
expr_stmt|;
name|cleanupCounts
argument_list|(
name|errorsTimestampCount
argument_list|,
name|cutoff
argument_list|)
expr_stmt|;
name|cleanupCounts
argument_list|(
name|warningsTimestampCount
argument_list|,
name|cutoff
argument_list|)
expr_stmt|;
try|try
block|{
name|cleanupTimer
operator|.
name|schedule
argument_list|(
operator|new
name|ErrorAndWarningsCleanup
argument_list|()
argument_list|,
name|cleanupInterval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ie
parameter_list|)
block|{
comment|// don't do anything since new timer is already scheduled
block|}
block|}
DECL|method|cleanupMessages (Map<String, SortedMap<Long, Integer>> map, SortedSet<PurgeElement> purgeInformation, long cutoff, int mapTargetSize)
name|void
name|cleanupMessages
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|map
parameter_list|,
name|SortedSet
argument_list|<
name|PurgeElement
argument_list|>
name|purgeInformation
parameter_list|,
name|long
name|cutoff
parameter_list|,
name|int
name|mapTargetSize
parameter_list|)
block|{
name|PurgeElement
name|el
init|=
operator|new
name|PurgeElement
argument_list|(
literal|""
argument_list|,
name|cutoff
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|SortedSet
argument_list|<
name|PurgeElement
argument_list|>
name|removeSet
init|=
name|purgeInformation
operator|.
name|headSet
argument_list|(
name|el
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|PurgeElement
argument_list|>
name|it
init|=
name|removeSet
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PurgeElement
name|p
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|p
operator|.
name|message
argument_list|)
expr_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// don't keep more mapTargetSize keys
if|if
condition|(
name|purgeInformation
operator|.
name|size
argument_list|()
operator|>
name|mapTargetSize
condition|)
block|{
name|Object
index|[]
name|array
init|=
name|purgeInformation
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|cutoffIndex
init|=
name|purgeInformation
operator|.
name|size
argument_list|()
operator|-
name|mapTargetSize
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cutoffIndex
condition|;
operator|++
name|i
control|)
block|{
name|PurgeElement
name|p
init|=
operator|(
name|PurgeElement
operator|)
name|array
index|[
name|i
index|]
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|p
operator|.
name|message
argument_list|)
expr_stmt|;
name|purgeInformation
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|cleanupCounts (SortedMap<Long, Integer> map, long cutoff)
name|void
name|cleanupCounts
parameter_list|(
name|SortedMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|map
parameter_list|,
name|long
name|cutoff
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|element
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getKey
argument_list|()
operator|<
name|cutoff
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// helper function
DECL|method|findAppender ()
specifier|public
specifier|static
name|Log4jWarningErrorMetricsAppender
name|findAppender
parameter_list|()
block|{
name|Enumeration
name|appenders
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getAllAppenders
argument_list|()
decl_stmt|;
while|while
condition|(
name|appenders
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
name|appenders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Log4jWarningErrorMetricsAppender
condition|)
block|{
return|return
operator|(
name|Log4jWarningErrorMetricsAppender
operator|)
name|obj
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

