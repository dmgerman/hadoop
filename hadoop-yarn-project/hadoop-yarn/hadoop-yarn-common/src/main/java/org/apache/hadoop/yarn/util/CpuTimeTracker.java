begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CpuTimeTracker
specifier|public
class|class
name|CpuTimeTracker
block|{
DECL|field|UNAVAILABLE
specifier|public
specifier|static
specifier|final
name|int
name|UNAVAILABLE
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|MINIMUM_UPDATE_INTERVAL
specifier|final
name|long
name|MINIMUM_UPDATE_INTERVAL
decl_stmt|;
comment|// CPU used time since system is on (ms)
DECL|field|cumulativeCpuTime
name|BigInteger
name|cumulativeCpuTime
init|=
name|BigInteger
operator|.
name|ZERO
decl_stmt|;
comment|// CPU used time read last time (ms)
DECL|field|lastCumulativeCpuTime
name|BigInteger
name|lastCumulativeCpuTime
init|=
name|BigInteger
operator|.
name|ZERO
decl_stmt|;
comment|// Unix timestamp while reading the CPU time (ms)
DECL|field|sampleTime
name|long
name|sampleTime
decl_stmt|;
DECL|field|lastSampleTime
name|long
name|lastSampleTime
decl_stmt|;
DECL|field|cpuUsage
name|float
name|cpuUsage
decl_stmt|;
DECL|field|jiffyLengthInMillis
name|BigInteger
name|jiffyLengthInMillis
decl_stmt|;
DECL|method|CpuTimeTracker (long jiffyLengthInMillis)
specifier|public
name|CpuTimeTracker
parameter_list|(
name|long
name|jiffyLengthInMillis
parameter_list|)
block|{
name|this
operator|.
name|jiffyLengthInMillis
operator|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|jiffyLengthInMillis
argument_list|)
expr_stmt|;
name|this
operator|.
name|cpuUsage
operator|=
name|UNAVAILABLE
expr_stmt|;
name|this
operator|.
name|sampleTime
operator|=
name|UNAVAILABLE
expr_stmt|;
name|this
operator|.
name|lastSampleTime
operator|=
name|UNAVAILABLE
expr_stmt|;
name|MINIMUM_UPDATE_INTERVAL
operator|=
literal|10
operator|*
name|jiffyLengthInMillis
expr_stmt|;
block|}
comment|/**    * Return percentage of cpu time spent over the time since last update.    * CPU time spent is based on elapsed jiffies multiplied by amount of    * time for 1 core. Thus, if you use 2 cores completely you would have spent    * twice the actual time between updates and this will return 200%.    *    * @return Return percentage of cpu usage since last update, {@link    * CpuTimeTracker#UNAVAILABLE} if there haven't been 2 updates more than    * {@link CpuTimeTracker#MINIMUM_UPDATE_INTERVAL} apart    */
DECL|method|getCpuTrackerUsagePercent ()
specifier|public
name|float
name|getCpuTrackerUsagePercent
parameter_list|()
block|{
if|if
condition|(
name|lastSampleTime
operator|==
name|UNAVAILABLE
operator|||
name|lastSampleTime
operator|>
name|sampleTime
condition|)
block|{
comment|// lastSampleTime> sampleTime may happen when the system time is changed
name|lastSampleTime
operator|=
name|sampleTime
expr_stmt|;
name|lastCumulativeCpuTime
operator|=
name|cumulativeCpuTime
expr_stmt|;
return|return
name|cpuUsage
return|;
block|}
comment|// When lastSampleTime is sufficiently old, update cpuUsage.
comment|// Also take a sample of the current time and cumulative CPU time for the
comment|// use of the next calculation.
if|if
condition|(
name|sampleTime
operator|>
name|lastSampleTime
operator|+
name|MINIMUM_UPDATE_INTERVAL
condition|)
block|{
name|cpuUsage
operator|=
operator|(
operator|(
name|cumulativeCpuTime
operator|.
name|subtract
argument_list|(
name|lastCumulativeCpuTime
argument_list|)
operator|)
operator|.
name|floatValue
argument_list|()
operator|)
operator|*
literal|100F
operator|/
operator|(
call|(
name|float
call|)
argument_list|(
name|sampleTime
operator|-
name|lastSampleTime
argument_list|)
operator|)
expr_stmt|;
name|lastSampleTime
operator|=
name|sampleTime
expr_stmt|;
name|lastCumulativeCpuTime
operator|=
name|cumulativeCpuTime
expr_stmt|;
block|}
return|return
name|cpuUsage
return|;
block|}
DECL|method|updateElapsedJiffies (BigInteger elapedJiffies, long sampleTime)
specifier|public
name|void
name|updateElapsedJiffies
parameter_list|(
name|BigInteger
name|elapedJiffies
parameter_list|,
name|long
name|sampleTime
parameter_list|)
block|{
name|this
operator|.
name|cumulativeCpuTime
operator|=
name|elapedJiffies
operator|.
name|multiply
argument_list|(
name|jiffyLengthInMillis
argument_list|)
expr_stmt|;
name|this
operator|.
name|sampleTime
operator|=
name|sampleTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"SampleTime "
operator|+
name|this
operator|.
name|sampleTime
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" CummulativeCpuTime "
operator|+
name|this
operator|.
name|cumulativeCpuTime
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" LastSampleTime "
operator|+
name|this
operator|.
name|lastSampleTime
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" LastCummulativeCpuTime "
operator|+
name|this
operator|.
name|lastCumulativeCpuTime
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" CpuUsage "
operator|+
name|this
operator|.
name|cpuUsage
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" JiffyLengthMillisec "
operator|+
name|this
operator|.
name|jiffyLengthInMillis
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

