begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|pb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|CompositePlacementConstraintProto
operator|.
name|CompositeType
operator|.
name|AND
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeOpCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|AbstractConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|And
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|DelayedOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|Or
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|SingleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TargetExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TimedPlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|CompositePlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|NodeAttributeOpCodeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|PlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|PlacementConstraintTargetProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|SimplePlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|TimedPlacementConstraintProto
import|;
end_import

begin_comment
comment|/**  * {@code PlacementConstraintFromProtoConverter} generates an  * {@link PlacementConstraint.AbstractConstraint} given a  * {@link PlacementConstraintProto}.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|PlacementConstraintFromProtoConverter
specifier|public
class|class
name|PlacementConstraintFromProtoConverter
block|{
DECL|field|constraintProto
specifier|private
name|PlacementConstraintProto
name|constraintProto
decl_stmt|;
DECL|method|PlacementConstraintFromProtoConverter ( PlacementConstraintProto constraintProto)
specifier|public
name|PlacementConstraintFromProtoConverter
parameter_list|(
name|PlacementConstraintProto
name|constraintProto
parameter_list|)
block|{
name|this
operator|.
name|constraintProto
operator|=
name|constraintProto
expr_stmt|;
block|}
DECL|method|convert ()
specifier|public
name|PlacementConstraint
name|convert
parameter_list|()
block|{
return|return
operator|new
name|PlacementConstraint
argument_list|(
name|convert
argument_list|(
name|constraintProto
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (PlacementConstraintProto proto)
specifier|private
name|AbstractConstraint
name|convert
parameter_list|(
name|PlacementConstraintProto
name|proto
parameter_list|)
block|{
return|return
name|proto
operator|.
name|hasSimpleConstraint
argument_list|()
condition|?
name|convert
argument_list|(
name|proto
operator|.
name|getSimpleConstraint
argument_list|()
argument_list|)
else|:
name|convert
argument_list|(
name|proto
operator|.
name|getCompositeConstraint
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convert (SimplePlacementConstraintProto proto)
specifier|private
name|SingleConstraint
name|convert
parameter_list|(
name|SimplePlacementConstraintProto
name|proto
parameter_list|)
block|{
name|Set
argument_list|<
name|TargetExpression
argument_list|>
name|targets
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PlacementConstraintTargetProto
name|tp
range|:
name|proto
operator|.
name|getTargetExpressionsList
argument_list|()
control|)
block|{
name|targets
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|tp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SingleConstraint
argument_list|(
name|proto
operator|.
name|getScope
argument_list|()
argument_list|,
name|proto
operator|.
name|getMinCardinality
argument_list|()
argument_list|,
name|proto
operator|.
name|getMaxCardinality
argument_list|()
argument_list|,
name|convertFromProtoFormat
argument_list|(
name|proto
operator|.
name|getAttributeOpCode
argument_list|()
argument_list|)
argument_list|,
name|targets
argument_list|)
return|;
block|}
DECL|method|convert (PlacementConstraintTargetProto proto)
specifier|private
name|TargetExpression
name|convert
parameter_list|(
name|PlacementConstraintTargetProto
name|proto
parameter_list|)
block|{
return|return
operator|new
name|TargetExpression
argument_list|(
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|proto
operator|.
name|getTargetType
argument_list|()
argument_list|)
argument_list|,
name|proto
operator|.
name|hasTargetKey
argument_list|()
condition|?
name|proto
operator|.
name|getTargetKey
argument_list|()
else|:
literal|null
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|proto
operator|.
name|getTargetValuesList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convert (CompositePlacementConstraintProto proto)
specifier|private
name|AbstractConstraint
name|convert
parameter_list|(
name|CompositePlacementConstraintProto
name|proto
parameter_list|)
block|{
switch|switch
condition|(
name|proto
operator|.
name|getCompositeType
argument_list|()
condition|)
block|{
case|case
name|AND
case|:
case|case
name|OR
case|:
name|List
argument_list|<
name|AbstractConstraint
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|PlacementConstraintProto
name|cp
range|:
name|proto
operator|.
name|getChildConstraintsList
argument_list|()
control|)
block|{
name|children
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|cp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|proto
operator|.
name|getCompositeType
argument_list|()
operator|==
name|AND
operator|)
condition|?
operator|new
name|And
argument_list|(
name|children
argument_list|)
else|:
operator|new
name|Or
argument_list|(
name|children
argument_list|)
return|;
case|case
name|DELAYED_OR
case|:
name|List
argument_list|<
name|TimedPlacementConstraint
argument_list|>
name|tChildren
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimedPlacementConstraintProto
name|cp
range|:
name|proto
operator|.
name|getTimedChildConstraintsList
argument_list|()
control|)
block|{
name|tChildren
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|cp
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|DelayedOr
argument_list|(
name|tChildren
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Encountered unexpected type of composite constraint."
argument_list|)
throw|;
block|}
block|}
DECL|method|convert ( TimedPlacementConstraintProto proto)
specifier|private
name|TimedPlacementConstraint
name|convert
parameter_list|(
name|TimedPlacementConstraintProto
name|proto
parameter_list|)
block|{
name|AbstractConstraint
name|pConstraint
init|=
name|convert
argument_list|(
name|proto
operator|.
name|getPlacementConstraint
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimedPlacementConstraint
argument_list|(
name|pConstraint
argument_list|,
name|proto
operator|.
name|getSchedulingDelay
argument_list|()
argument_list|,
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|proto
operator|.
name|getDelayUnit
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat ( NodeAttributeOpCodeProto p)
specifier|private
specifier|static
name|NodeAttributeOpCode
name|convertFromProtoFormat
parameter_list|(
name|NodeAttributeOpCodeProto
name|p
parameter_list|)
block|{
return|return
name|NodeAttributeOpCode
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

