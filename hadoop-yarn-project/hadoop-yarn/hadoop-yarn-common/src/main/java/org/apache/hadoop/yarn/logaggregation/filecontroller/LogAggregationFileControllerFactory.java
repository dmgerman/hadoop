begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * Use {@code LogAggregationFileControllerFactory} to get the correct  * {@link LogAggregationFileController} for write and read.  *  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|LogAggregationFileControllerFactory
specifier|public
class|class
name|LogAggregationFileControllerFactory
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LogAggregationFileControllerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|p
specifier|private
specifier|final
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[A-Za-z_]+[A-Za-z0-9_]*$"
argument_list|)
decl_stmt|;
DECL|field|controllers
specifier|private
name|LinkedList
argument_list|<
name|LogAggregationFileController
argument_list|>
name|controllers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
comment|/**    * Construct the LogAggregationFileControllerFactory object.    * @param conf the Configuration    */
DECL|method|LogAggregationFileControllerFactory (Configuration conf)
specifier|public
name|LogAggregationFileControllerFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fileControllers
init|=
name|conf
operator|.
name|getStringCollection
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_FORMATS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|controllerClassName
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|controllerChecker
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fileController
range|:
name|fileControllers
control|)
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|validateAggregatedFileControllerName
argument_list|(
name|fileController
argument_list|)
argument_list|,
literal|"The FileControllerName: "
operator|+
name|fileController
operator|+
literal|" set in "
operator|+
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_FORMATS
operator|+
literal|" is invalid."
operator|+
literal|"The valid File Controller name should only "
operator|+
literal|"contain a-zA-Z0-9_ and can not start with numbers"
argument_list|)
expr_stmt|;
name|String
name|remoteDirStr
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT
argument_list|,
name|fileController
argument_list|)
decl_stmt|;
name|String
name|remoteDir
init|=
name|conf
operator|.
name|get
argument_list|(
name|remoteDirStr
argument_list|)
decl_stmt|;
name|boolean
name|defaultRemoteDir
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|remoteDir
operator|==
literal|null
operator|||
name|remoteDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remoteDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
expr_stmt|;
name|defaultRemoteDir
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|suffixStr
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT
argument_list|,
name|fileController
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|conf
operator|.
name|get
argument_list|(
name|suffixStr
argument_list|)
decl_stmt|;
name|boolean
name|defaultSuffix
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|suffix
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|)
expr_stmt|;
name|defaultSuffix
operator|=
literal|true
expr_stmt|;
block|}
name|String
name|dirSuffix
init|=
name|remoteDir
operator|+
literal|"-"
operator|+
name|suffix
decl_stmt|;
if|if
condition|(
name|controllerChecker
operator|.
name|containsKey
argument_list|(
name|dirSuffix
argument_list|)
condition|)
block|{
if|if
condition|(
name|defaultRemoteDir
operator|&&
name|defaultSuffix
condition|)
block|{
name|String
name|fileControllerStr
init|=
name|controllerChecker
operator|.
name|get
argument_list|(
name|dirSuffix
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|controllersList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|controllersList
operator|.
name|add
argument_list|(
name|fileControllerStr
argument_list|)
expr_stmt|;
name|controllersList
operator|.
name|add
argument_list|(
name|fileController
argument_list|)
expr_stmt|;
name|fileControllerStr
operator|=
name|StringUtils
operator|.
name|join
argument_list|(
name|controllersList
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|controllerChecker
operator|.
name|put
argument_list|(
name|dirSuffix
argument_list|,
name|fileControllerStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|conflictController
init|=
name|controllerChecker
operator|.
name|get
argument_list|(
name|dirSuffix
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The combined value of "
operator|+
name|remoteDirStr
operator|+
literal|" and "
operator|+
name|suffixStr
operator|+
literal|" should not be the same as the value"
operator|+
literal|" set for "
operator|+
name|conflictController
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|controllerChecker
operator|.
name|put
argument_list|(
name|dirSuffix
argument_list|,
name|fileController
argument_list|)
expr_stmt|;
block|}
name|String
name|classKey
init|=
name|String
operator|.
name|format
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_CONTROLLER_FMT
argument_list|,
name|fileController
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|conf
operator|.
name|get
argument_list|(
name|classKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
operator|||
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No class configured for "
operator|+
name|fileController
argument_list|)
throw|;
block|}
name|controllerClassName
operator|.
name|add
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|LogAggregationFileController
argument_list|>
name|sClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|classKey
argument_list|,
literal|null
argument_list|,
name|LogAggregationFileController
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No class defined for "
operator|+
name|fileController
argument_list|)
throw|;
block|}
name|LogAggregationFileController
name|s
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|sClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No object created for "
operator|+
name|controllerClassName
argument_list|)
throw|;
block|}
name|s
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|fileController
argument_list|)
expr_stmt|;
name|controllers
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get {@link LogAggregationFileController} to write.    * @return the LogAggregationFileController instance    */
DECL|method|getFileControllerForWrite ()
specifier|public
name|LogAggregationFileController
name|getFileControllerForWrite
parameter_list|()
block|{
return|return
name|controllers
operator|.
name|getFirst
argument_list|()
return|;
block|}
comment|/**    * Get {@link LogAggregationFileController} to read the aggregated logs    * for this application.    * @param appId the ApplicationId    * @param appOwner the Application Owner    * @return the LogAggregationFileController instance    * @throws IOException if can not find any log aggregation file controller    */
DECL|method|getFileControllerForRead ( ApplicationId appId, String appOwner)
specifier|public
name|LogAggregationFileController
name|getFileControllerForRead
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|diagnosis
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|LogAggregationFileController
name|fileController
range|:
name|controllers
control|)
block|{
try|try
block|{
name|Path
name|remoteAppLogDir
init|=
name|fileController
operator|.
name|getRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|)
decl_stmt|;
name|Path
name|qualifiedLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|remoteAppLogDir
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
operator|.
name|listStatus
argument_list|(
name|remoteAppLogDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
name|fileController
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|diagnosis
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|diagnosis
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
DECL|method|validateAggregatedFileControllerName (String name)
specifier|private
name|boolean
name|validateAggregatedFileControllerName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|p
operator|.
name|matcher
argument_list|(
name|name
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
specifier|public
name|LinkedList
argument_list|<
name|LogAggregationFileController
argument_list|>
DECL|method|getConfiguredLogAggregationFileControllerList ()
name|getConfiguredLogAggregationFileControllerList
parameter_list|()
block|{
return|return
name|this
operator|.
name|controllers
return|;
block|}
block|}
end_class

end_unit

