begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.sharedcache
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|sharedcache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Public
annotation|@
name|Evolving
comment|/**  * A factory class for creating checksum objects based on a configurable  * algorithm implementation  */
DECL|class|SharedCacheChecksumFactory
specifier|public
class|class
name|SharedCacheChecksumFactory
block|{
specifier|private
specifier|static
specifier|final
name|ConcurrentMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|SharedCacheChecksum
argument_list|>
argument_list|,
name|SharedCacheChecksum
argument_list|>
DECL|field|instances
name|instances
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|SharedCacheChecksum
argument_list|>
argument_list|,
name|SharedCacheChecksum
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|defaultAlgorithm
specifier|private
specifier|static
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|SharedCacheChecksum
argument_list|>
name|defaultAlgorithm
decl_stmt|;
static|static
block|{
try|try
block|{
name|defaultAlgorithm
operator|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|SharedCacheChecksum
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_SHARED_CACHE_CHECKSUM_ALGO_IMPL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// cannot happen
throw|throw
operator|new
name|ExceptionInInitializerError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get a new<code>SharedCacheChecksum</code> object based on the configurable    * algorithm implementation    * (see<code>yarn.sharedcache.checksum.algo.impl</code>)    *    * @return<code>SharedCacheChecksum</code> object    */
DECL|method|getChecksum (Configuration conf)
specifier|public
specifier|static
name|SharedCacheChecksum
name|getChecksum
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|SharedCacheChecksum
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|SHARED_CACHE_CHECKSUM_ALGO_IMPL
argument_list|,
name|defaultAlgorithm
argument_list|,
name|SharedCacheChecksum
operator|.
name|class
argument_list|)
decl_stmt|;
name|SharedCacheChecksum
name|checksum
init|=
name|instances
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksum
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|checksum
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|SharedCacheChecksum
name|old
init|=
name|instances
operator|.
name|putIfAbsent
argument_list|(
name|clazz
argument_list|,
name|checksum
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|checksum
operator|=
name|old
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|checksum
return|;
block|}
block|}
end_class

end_unit

