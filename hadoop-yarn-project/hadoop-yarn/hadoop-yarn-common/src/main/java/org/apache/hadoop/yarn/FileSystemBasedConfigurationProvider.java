begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|ConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FileSystemBasedConfigurationProvider
specifier|public
class|class
name|FileSystemBasedConfigurationProvider
extends|extends
name|ConfigurationProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileSystemBasedConfigurationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|configDir
specifier|private
name|Path
name|configDir
decl_stmt|;
annotation|@
name|Override
DECL|method|getConfigurationInputStream ( Configuration bootstrapConf, String name)
specifier|public
specifier|synchronized
name|InputStream
name|getConfigurationInputStream
parameter_list|(
name|Configuration
name|bootstrapConf
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Illegal argument! The parameter should not be null or empty"
argument_list|)
throw|;
block|}
name|Path
name|filePath
decl_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_FILES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|filePath
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|configDir
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Can not find Configuration: "
operator|+
name|name
operator|+
literal|" in "
operator|+
name|configDir
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|filePath
operator|=
operator|new
name|Path
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Can not find file: "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
return|return
name|fs
operator|.
name|open
argument_list|(
name|filePath
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|initInternal (Configuration bootstrapConf)
specifier|public
specifier|synchronized
name|void
name|initInternal
parameter_list|(
name|Configuration
name|bootstrapConf
parameter_list|)
throws|throws
name|Exception
block|{
name|configDir
operator|=
operator|new
name|Path
argument_list|(
name|bootstrapConf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|FS_BASED_RM_CONF_STORE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_FS_BASED_RM_CONF_STORE
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|=
name|configDir
operator|.
name|getFileSystem
argument_list|(
name|bootstrapConf
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|configDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|configDir
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|closeInternal ()
specifier|public
specifier|synchronized
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

