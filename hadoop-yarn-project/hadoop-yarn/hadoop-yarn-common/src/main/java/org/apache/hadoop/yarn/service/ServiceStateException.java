begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_comment
comment|/**  * Exception that is raised on state change operations.  */
end_comment

begin_class
DECL|class|ServiceStateException
specifier|public
class|class
name|ServiceStateException
extends|extends
name|YarnRuntimeException
block|{
DECL|method|ServiceStateException (String message)
specifier|public
name|ServiceStateException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|ServiceStateException (String message, Throwable cause)
specifier|public
name|ServiceStateException
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
DECL|method|ServiceStateException (Throwable cause)
specifier|public
name|ServiceStateException
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
comment|/**    * Convert any exception into a {@link RuntimeException}.    * If the caught exception already is of that type -including    * a {@link YarnException} it is typecast to a {@link RuntimeException}    * and returned.    *    * All other exception types are wrapped in a new instance of    * ServiceStateException    * @param fault exception or throwable    * @return a ServiceStateException to rethrow    */
DECL|method|convert (Throwable fault)
specifier|public
specifier|static
name|RuntimeException
name|convert
parameter_list|(
name|Throwable
name|fault
parameter_list|)
block|{
if|if
condition|(
name|fault
operator|instanceof
name|RuntimeException
condition|)
block|{
return|return
operator|(
name|RuntimeException
operator|)
name|fault
return|;
block|}
else|else
block|{
return|return
operator|new
name|ServiceStateException
argument_list|(
name|fault
argument_list|)
return|;
block|}
block|}
comment|/**    * Convert any exception into a {@link RuntimeException}.    * If the caught exception already is of that type -including    * a {@link YarnException} it is typecast to a {@link RuntimeException}    * and returned.    *    * All other exception types are wrapped in a new instance of    * ServiceStateException    * @param text text to use if a new exception is created    * @param fault exception or throwable    * @return a ServiceStateException to rethrow    */
DECL|method|convert (String text, Throwable fault)
specifier|public
specifier|static
name|RuntimeException
name|convert
parameter_list|(
name|String
name|text
parameter_list|,
name|Throwable
name|fault
parameter_list|)
block|{
if|if
condition|(
name|fault
operator|instanceof
name|RuntimeException
condition|)
block|{
return|return
operator|(
name|RuntimeException
operator|)
name|fault
return|;
block|}
else|else
block|{
return|return
operator|new
name|ServiceStateException
argument_list|(
name|text
argument_list|,
name|fault
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

