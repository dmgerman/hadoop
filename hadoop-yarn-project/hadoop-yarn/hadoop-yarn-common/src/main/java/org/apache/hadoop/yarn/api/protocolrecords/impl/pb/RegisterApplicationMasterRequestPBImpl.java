begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.protocolrecords.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|pb
operator|.
name|PlacementConstraintFromProtoConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|pb
operator|.
name|PlacementConstraintToProtoConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|RegisterApplicationMasterRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|RegisterApplicationMasterRequestProtoOrBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|RegisterApplicationMasterRequestPBImpl
specifier|public
class|class
name|RegisterApplicationMasterRequestPBImpl
extends|extends
name|RegisterApplicationMasterRequest
block|{
DECL|field|proto
specifier|private
name|RegisterApplicationMasterRequestProto
name|proto
init|=
name|RegisterApplicationMasterRequestProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
specifier|private
name|RegisterApplicationMasterRequestProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|placementConstraints
specifier|private
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|placementConstraints
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|method|RegisterApplicationMasterRequestPBImpl ()
specifier|public
name|RegisterApplicationMasterRequestPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|RegisterApplicationMasterRequestProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|RegisterApplicationMasterRequestPBImpl ( RegisterApplicationMasterRequestProto proto)
specifier|public
name|RegisterApplicationMasterRequestPBImpl
parameter_list|(
name|RegisterApplicationMasterRequestProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|RegisterApplicationMasterRequestProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|getProto
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|placementConstraints
operator|!=
literal|null
condition|)
block|{
name|addPlacementConstraintMap
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addPlacementConstraintMap ()
specifier|private
name|void
name|addPlacementConstraintMap
parameter_list|()
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|clearPlacementConstraints
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|placementConstraints
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|YarnProtos
operator|.
name|PlacementConstraintMapEntryProto
argument_list|>
name|protoList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|entry
range|:
name|this
operator|.
name|placementConstraints
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|protoList
operator|.
name|add
argument_list|(
name|YarnProtos
operator|.
name|PlacementConstraintMapEntryProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllAllocationTags
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setPlacementConstraint
argument_list|(
operator|new
name|PlacementConstraintToProtoConverter
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|convert
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addAllPlacementConstraints
argument_list|(
name|protoList
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|RegisterApplicationMasterRequestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHost ()
specifier|public
name|String
name|getHost
parameter_list|()
block|{
name|RegisterApplicationMasterRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getHost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setHost (String host)
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearHost
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRpcPort ()
specifier|public
name|int
name|getRpcPort
parameter_list|()
block|{
name|RegisterApplicationMasterRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getRpcPort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setRpcPort (int port)
specifier|public
name|void
name|setRpcPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setRpcPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTrackingUrl ()
specifier|public
name|String
name|getTrackingUrl
parameter_list|()
block|{
name|RegisterApplicationMasterRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getTrackingUrl
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setTrackingUrl (String url)
specifier|public
name|void
name|setTrackingUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearTrackingUrl
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setTrackingUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
DECL|method|initPlacementConstraintMap ()
specifier|private
name|void
name|initPlacementConstraintMap
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|placementConstraints
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|RegisterApplicationMasterRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|YarnProtos
operator|.
name|PlacementConstraintMapEntryProto
argument_list|>
name|pcmList
init|=
name|p
operator|.
name|getPlacementConstraintsList
argument_list|()
decl_stmt|;
name|this
operator|.
name|placementConstraints
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|YarnProtos
operator|.
name|PlacementConstraintMapEntryProto
name|e
range|:
name|pcmList
control|)
block|{
name|this
operator|.
name|placementConstraints
operator|.
name|put
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|e
operator|.
name|getAllocationTagsList
argument_list|()
argument_list|)
argument_list|,
operator|new
name|PlacementConstraintFromProtoConverter
argument_list|(
name|e
operator|.
name|getPlacementConstraint
argument_list|()
argument_list|)
operator|.
name|convert
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPlacementConstraints ()
specifier|public
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|getPlacementConstraints
parameter_list|()
block|{
name|initPlacementConstraintMap
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|placementConstraints
return|;
block|}
annotation|@
name|Override
DECL|method|setPlacementConstraints ( Map<Set<String>, PlacementConstraint> constraints)
specifier|public
name|void
name|setPlacementConstraints
parameter_list|(
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraints
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|constraints
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearPlacementConstraints
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|removeEmptyKeys
argument_list|(
name|constraints
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|placementConstraints
operator|=
name|constraints
expr_stmt|;
block|}
DECL|method|removeEmptyKeys ( Map<Set<String>, PlacementConstraint> constraintMap)
specifier|private
name|void
name|removeEmptyKeys
parameter_list|(
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|constraintMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|aTags
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|aTags
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

