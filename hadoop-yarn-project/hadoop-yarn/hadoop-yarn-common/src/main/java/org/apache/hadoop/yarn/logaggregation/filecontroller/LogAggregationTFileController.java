begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_comment
comment|/**  * The TFile log aggregation file Controller implementation.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|LogAggregationTFileController
specifier|public
class|class
name|LogAggregationTFileController
extends|extends
name|LogAggregationFileController
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LogAggregationTFileController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|writer
specifier|private
name|LogWriter
name|writer
decl_stmt|;
DECL|method|LogAggregationTFileController ()
specifier|public
name|LogAggregationTFileController
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|remoteRootLogDir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|remoteRootLogDirSuffix
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeWriter (LogAggregationFileControllerContext context)
specifier|public
name|void
name|initializeWriter
parameter_list|(
name|LogAggregationFileControllerContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writer
operator|=
operator|new
name|LogWriter
argument_list|()
expr_stmt|;
name|writer
operator|.
name|initialize
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|context
operator|.
name|getRemoteNodeTmpLogFileForApp
argument_list|()
argument_list|,
name|context
operator|.
name|getUserUgi
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write ACLs once when the writer is created.
name|writer
operator|.
name|writeApplicationACLs
argument_list|(
name|context
operator|.
name|getAppAcls
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeApplicationOwner
argument_list|(
name|context
operator|.
name|getUserUgi
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|closeWriter ()
specifier|public
name|void
name|closeWriter
parameter_list|()
block|{
name|this
operator|.
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (LogKey logKey, LogValue logValue)
specifier|public
name|void
name|write
parameter_list|(
name|LogKey
name|logKey
parameter_list|,
name|LogValue
name|logValue
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writer
operator|.
name|append
argument_list|(
name|logKey
argument_list|,
name|logValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|postWrite (final LogAggregationFileControllerContext record)
specifier|public
name|void
name|postWrite
parameter_list|(
specifier|final
name|LogAggregationFileControllerContext
name|record
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Before upload logs, make sure the number of existing logs
comment|// is smaller than the configured NM log aggregation retention size.
if|if
condition|(
name|record
operator|.
name|isUploadedLogsInThisCycle
argument_list|()
operator|&&
name|record
operator|.
name|isLogAggregationInRolling
argument_list|()
condition|)
block|{
name|cleanOldLogs
argument_list|(
name|record
operator|.
name|getRemoteNodeLogFileForApp
argument_list|()
argument_list|,
name|record
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|record
operator|.
name|getUserUgi
argument_list|()
argument_list|)
expr_stmt|;
name|record
operator|.
name|increcleanupOldLogTimes
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Path
name|renamedPath
init|=
name|record
operator|.
name|getRollingMonitorInterval
argument_list|()
operator|<=
literal|0
condition|?
name|record
operator|.
name|getRemoteNodeLogFileForApp
argument_list|()
else|:
operator|new
name|Path
argument_list|(
name|record
operator|.
name|getRemoteNodeLogFileForApp
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|record
operator|.
name|getRemoteNodeLogFileForApp
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|record
operator|.
name|getLogUploadTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|rename
init|=
name|record
operator|.
name|isUploadedLogsInThisCycle
argument_list|()
decl_stmt|;
try|try
block|{
name|record
operator|.
name|getUserUgi
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|remoteFS
init|=
name|record
operator|.
name|getRemoteNodeLogFileForApp
argument_list|()
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|rename
condition|)
block|{
name|remoteFS
operator|.
name|rename
argument_list|(
name|record
operator|.
name|getRemoteNodeTmpLogFileForApp
argument_list|()
argument_list|,
name|renamedPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remoteFS
operator|.
name|delete
argument_list|(
name|record
operator|.
name|getRemoteNodeTmpLogFileForApp
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to move temporary log file to final location: ["
operator|+
name|record
operator|.
name|getRemoteNodeTmpLogFileForApp
argument_list|()
operator|+
literal|"] to ["
operator|+
name|renamedPath
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Log uploaded failed for Application: "
operator|+
name|record
operator|.
name|getAppId
argument_list|()
operator|+
literal|" in NodeManager: "
operator|+
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|record
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|+
literal|" at "
operator|+
name|Times
operator|.
name|format
argument_list|(
name|record
operator|.
name|getLogUploadTimeStamp
argument_list|()
argument_list|)
operator|+
literal|"\n"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

