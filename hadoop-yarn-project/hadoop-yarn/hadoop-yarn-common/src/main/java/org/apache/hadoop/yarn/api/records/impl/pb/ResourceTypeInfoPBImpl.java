begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ResourceTypeInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ResourceTypesProto
import|;
end_import

begin_comment
comment|/**  * {@code ResourceTypeInfoPBImpl} which implements the  * {@link ResourceTypeInfo} class which represents different resource types  * supported in YARN.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ResourceTypeInfoPBImpl
specifier|public
class|class
name|ResourceTypeInfoPBImpl
extends|extends
name|ResourceTypeInfo
block|{
DECL|field|proto
name|ResourceTypeInfoProto
name|proto
init|=
name|ResourceTypeInfoProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
name|ResourceTypeInfoProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
init|=
literal|null
decl_stmt|;
DECL|field|defaultUnit
specifier|private
name|String
name|defaultUnit
init|=
literal|null
decl_stmt|;
DECL|field|resourceTypes
specifier|private
name|ResourceTypes
name|resourceTypes
init|=
literal|null
decl_stmt|;
DECL|method|ResourceTypeInfoPBImpl ()
specifier|public
name|ResourceTypeInfoPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|ResourceTypeInfoProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|ResourceTypeInfoPBImpl (ResourceTypeInfoProto proto)
specifier|public
name|ResourceTypeInfoPBImpl
parameter_list|(
name|ResourceTypeInfoProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|ResourceTypeInfoProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
block|}
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setName
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|defaultUnit
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setUnits
argument_list|(
name|this
operator|.
name|defaultUnit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|resourceTypes
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setType
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|resourceTypes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|YarnProtos
operator|.
name|ResourceTypeInfoProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
name|YarnProtos
operator|.
name|ResourceTypeInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setName (String rName)
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|rName
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|rName
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearName
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|name
operator|=
name|rName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getDefaultUnit ()
specifier|public
name|String
name|getDefaultUnit
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|defaultUnit
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|defaultUnit
return|;
block|}
name|YarnProtos
operator|.
name|ResourceTypeInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getUnits
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setDefaultUnit (String rUnits)
specifier|public
name|void
name|setDefaultUnit
parameter_list|(
name|String
name|rUnits
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|rUnits
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearUnits
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|defaultUnit
operator|=
name|rUnits
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResourceType ()
specifier|public
name|ResourceTypes
name|getResourceType
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|resourceTypes
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|resourceTypes
return|;
block|}
name|YarnProtos
operator|.
name|ResourceTypeInfoProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setResourceType (ResourceTypes type)
specifier|public
name|void
name|setResourceType
parameter_list|(
name|ResourceTypes
name|type
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearType
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|resourceTypes
operator|=
name|type
expr_stmt|;
block|}
DECL|method|convertToProtoFormat (ResourceTypes e)
specifier|public
specifier|static
name|ResourceTypesProto
name|convertToProtoFormat
parameter_list|(
name|ResourceTypes
name|e
parameter_list|)
block|{
return|return
name|ResourceTypesProto
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat (ResourceTypesProto e)
specifier|public
specifier|static
name|ResourceTypes
name|convertFromProtoFormat
parameter_list|(
name|ResourceTypesProto
name|e
parameter_list|)
block|{
return|return
name|ResourceTypes
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

