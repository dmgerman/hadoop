begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Flushable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntityGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_comment
comment|/**  * Base writer class to write the Timeline data.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|TimelineWriter
specifier|public
specifier|abstract
class|class
name|TimelineWriter
implements|implements
name|Flushable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TimelineWriter
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|authUgi
specifier|private
name|UserGroupInformation
name|authUgi
decl_stmt|;
DECL|field|client
specifier|private
name|Client
name|client
decl_stmt|;
DECL|field|resURI
specifier|private
name|URI
name|resURI
decl_stmt|;
DECL|method|TimelineWriter (UserGroupInformation authUgi, Client client, URI resURI)
specifier|public
name|TimelineWriter
parameter_list|(
name|UserGroupInformation
name|authUgi
parameter_list|,
name|Client
name|client
parameter_list|,
name|URI
name|resURI
parameter_list|)
block|{
name|this
operator|.
name|authUgi
operator|=
name|authUgi
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|resURI
operator|=
name|resURI
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
comment|// DO NOTHING
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|// DO NOTHING
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Timeline writer posting to "
operator|+
name|resURI
return|;
block|}
DECL|method|putEntities ( TimelineEntity... entities)
specifier|public
name|TimelinePutResponse
name|putEntities
parameter_list|(
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|TimelineEntities
name|entitiesContainer
init|=
operator|new
name|TimelineEntities
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|entities
control|)
block|{
if|if
condition|(
name|entity
operator|.
name|getEntityId
argument_list|()
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEntityType
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Incomplete entity without entity id/type"
argument_list|)
throw|;
block|}
name|entitiesContainer
operator|.
name|addEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
name|ClientResponse
name|resp
init|=
name|doPosting
argument_list|(
name|entitiesContainer
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|resp
operator|.
name|getEntity
argument_list|(
name|TimelinePutResponse
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|putDomain (TimelineDomain domain)
specifier|public
name|void
name|putDomain
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|doPosting
argument_list|(
name|domain
argument_list|,
literal|"domain"
argument_list|)
expr_stmt|;
block|}
DECL|method|putEntities ( ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities)
specifier|public
specifier|abstract
name|TimelinePutResponse
name|putEntities
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineEntityGroupId
name|groupId
parameter_list|,
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
DECL|method|putDomain (ApplicationAttemptId appAttemptId, TimelineDomain domain)
specifier|public
specifier|abstract
name|void
name|putDomain
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
DECL|method|doPosting (final Object obj, final String path)
specifier|private
name|ClientResponse
name|doPosting
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ClientResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|authUgi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ClientResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClientResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doPostingObject
argument_list|(
name|obj
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
throw|;
block|}
if|if
condition|(
name|resp
operator|==
literal|null
operator|||
name|resp
operator|.
name|getStatusInfo
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|!=
name|ClientResponse
operator|.
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Failed to get the response from the timeline server."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|resp
operator|!=
literal|null
condition|)
block|{
name|msg
operator|+=
literal|" HTTP error code: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|output
init|=
name|resp
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HTTP error code: "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
operator|+
literal|" Server response : \n"
operator|+
name|output
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|YarnException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
return|return
name|resp
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|doPostingObject (Object object, String path)
specifier|public
name|ClientResponse
name|doPostingObject
parameter_list|(
name|Object
name|object
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|WebResource
name|webResource
init|=
name|client
operator|.
name|resource
argument_list|(
name|resURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"POST to "
operator|+
name|resURI
argument_list|)
expr_stmt|;
block|}
name|ClientResponse
name|r
init|=
name|webResource
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|r
operator|.
name|bufferEntity
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
elseif|else
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"domain"
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PUT to "
operator|+
name|resURI
operator|+
literal|"/"
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|ClientResponse
name|r
init|=
name|webResource
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|type
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|,
name|object
argument_list|)
decl_stmt|;
name|r
operator|.
name|bufferEntity
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unknown resource type"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

