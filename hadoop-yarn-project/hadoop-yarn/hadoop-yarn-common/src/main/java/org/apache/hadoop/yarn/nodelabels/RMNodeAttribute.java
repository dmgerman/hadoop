begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * Reference of NodeAttribute in RM.  */
end_comment

begin_class
DECL|class|RMNodeAttribute
specifier|public
class|class
name|RMNodeAttribute
extends|extends
name|AbstractLabel
block|{
DECL|field|attribute
specifier|private
name|NodeAttribute
name|attribute
decl_stmt|;
comment|// TODO need to revisit whether we need to make this concurrent implementation
DECL|field|nodes
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|RMNodeAttribute (NodeAttribute attribute)
specifier|public
name|RMNodeAttribute
parameter_list|(
name|NodeAttribute
name|attribute
parameter_list|)
block|{
name|this
argument_list|(
name|attribute
operator|.
name|getAttributeName
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
DECL|method|RMNodeAttribute (String labelName, Resource res, int activeNMs, NodeAttribute attribute)
specifier|public
name|RMNodeAttribute
parameter_list|(
name|String
name|labelName
parameter_list|,
name|Resource
name|res
parameter_list|,
name|int
name|activeNMs
parameter_list|,
name|NodeAttribute
name|attribute
parameter_list|)
block|{
name|super
argument_list|(
name|labelName
argument_list|,
name|res
argument_list|,
name|activeNMs
argument_list|)
expr_stmt|;
name|this
operator|.
name|attribute
operator|=
name|attribute
expr_stmt|;
block|}
DECL|method|getAttribute ()
specifier|public
name|NodeAttribute
name|getAttribute
parameter_list|()
block|{
return|return
name|attribute
return|;
block|}
DECL|method|setAttribute (NodeAttribute attribute)
specifier|public
name|void
name|setAttribute
parameter_list|(
name|NodeAttribute
name|attribute
parameter_list|)
block|{
name|this
operator|.
name|attribute
operator|=
name|attribute
expr_stmt|;
block|}
DECL|method|RMNodeAttribute (String attributeName)
specifier|public
name|RMNodeAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|)
block|{
name|super
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|attribute
operator|=
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|attributeName
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
block|}
DECL|method|getAttributeType ()
specifier|public
name|NodeAttributeType
name|getAttributeType
parameter_list|()
block|{
return|return
name|attribute
operator|.
name|getAttributeType
argument_list|()
return|;
block|}
DECL|method|addNode (String node)
specifier|public
name|void
name|addNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|removeNode (String node)
specifier|public
name|void
name|removeNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|nodes
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
DECL|method|getAssociatedNodeIds ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAssociatedNodeIds
parameter_list|()
block|{
return|return
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|nodes
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|attribute
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RMNodeAttribute
name|other
init|=
operator|(
name|RMNodeAttribute
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|attribute
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|attribute
operator|.
name|equals
argument_list|(
name|other
operator|.
name|attribute
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

