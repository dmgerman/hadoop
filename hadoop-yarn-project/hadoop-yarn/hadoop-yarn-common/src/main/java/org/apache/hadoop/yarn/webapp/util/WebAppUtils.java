begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|HttpConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Evolving
DECL|class|WebAppUtils
specifier|public
class|class
name|WebAppUtils
block|{
DECL|field|JOINER
specifier|private
specifier|static
specifier|final
name|Joiner
name|JOINER
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|""
argument_list|)
decl_stmt|;
DECL|method|setRMWebAppPort (Configuration conf, int port)
specifier|public
specifier|static
name|void
name|setRMWebAppPort
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|hostname
init|=
name|getRMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|hostname
operator|=
operator|(
name|hostname
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
operator|)
condition|?
name|hostname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hostname
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
argument_list|)
else|:
name|hostname
expr_stmt|;
name|setRMWebAppHostnameAndPort
argument_list|(
name|conf
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|setRMWebAppHostnameAndPort (Configuration conf, String hostname, int port)
specifier|public
specifier|static
name|void
name|setRMWebAppHostnameAndPort
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hostname
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|String
name|resolvedAddress
init|=
name|hostname
operator|+
literal|":"
operator|+
name|port
decl_stmt|;
if|if
condition|(
name|HttpConfig
operator|.
name|isSecure
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|resolvedAddress
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|resolvedAddress
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setNMWebAppHostNameAndPort (Configuration conf, String hostName, int port)
specifier|public
specifier|static
name|void
name|setNMWebAppHostNameAndPort
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hostName
parameter_list|,
name|int
name|port
parameter_list|)
block|{
if|if
condition|(
name|HttpConfig
operator|.
name|isSecure
argument_list|()
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|hostName
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_ADDRESS
argument_list|,
name|hostName
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRMWebAppURLWithScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getRMWebAppURLWithScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|JOINER
operator|.
name|join
argument_list|(
name|HttpConfig
operator|.
name|getSchemePrefix
argument_list|()
argument_list|,
name|HttpConfig
operator|.
name|isSecure
argument_list|()
condition|?
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_HTTPS_ADDRESS
argument_list|)
else|:
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_ADDRESS
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getRMWebAppURLWithoutScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getRMWebAppURLWithoutScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|HttpConfig
operator|.
name|isSecure
argument_list|()
condition|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_HTTPS_ADDRESS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_ADDRESS
argument_list|)
return|;
block|}
block|}
DECL|method|getProxyHostAndPort (Configuration conf)
specifier|public
specifier|static
name|String
name|getProxyHostAndPort
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|addr
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|PROXY_ADDRESS
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|==
literal|null
operator|||
name|addr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addr
operator|=
name|getResolvedRMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|addr
return|;
block|}
DECL|method|getResolvedRMWebAppURLWithScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getResolvedRMWebAppURLWithScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|HttpConfig
operator|.
name|getSchemePrefix
argument_list|()
operator|+
name|getResolvedRMWebAppURLWithoutScheme
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|getResolvedRMWebAppURLWithoutScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getResolvedRMWebAppURLWithoutScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|InetSocketAddress
name|address
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|HttpConfig
operator|.
name|isSecure
argument_list|()
condition|)
block|{
name|address
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_HTTPS_PORT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|address
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_WEBAPP_PORT
argument_list|)
expr_stmt|;
block|}
name|address
operator|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|InetAddress
name|resolved
init|=
name|address
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|resolved
operator|==
literal|null
operator|||
name|resolved
operator|.
name|isAnyLocalAddress
argument_list|()
operator|||
name|resolved
operator|.
name|isLoopbackAddress
argument_list|()
condition|)
block|{
name|String
name|lh
init|=
name|address
operator|.
name|getHostName
argument_list|()
decl_stmt|;
try|try
block|{
name|lh
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
comment|//Ignore and fallback.
block|}
name|sb
operator|.
name|append
argument_list|(
name|lh
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|address
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|address
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getNMWebAppURLWithoutScheme (Configuration conf)
specifier|public
specifier|static
name|String
name|getNMWebAppURLWithoutScheme
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|HttpConfig
operator|.
name|isSecure
argument_list|()
condition|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_HTTPS_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_WEBAPP_HTTPS_ADDRESS
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_WEBAPP_ADDRESS
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

