begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|APP_OWNER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|CONTAINER_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|ENTITY_STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|NM_NODENAME
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationWebUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_comment
comment|/**  * Base class to implement Aggregated Logs Block.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"YARN"
block|,
literal|"MapReduce"
block|}
argument_list|)
DECL|class|LogAggregationHtmlBlock
specifier|public
specifier|abstract
class|class
name|LogAggregationHtmlBlock
extends|extends
name|HtmlBlock
block|{
annotation|@
name|Inject
DECL|method|LogAggregationHtmlBlock (ViewContext ctx)
specifier|public
name|LogAggregationHtmlBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAndParseParameters (Block html)
specifier|protected
name|BlockParameters
name|verifyAndParseParameters
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|BlockParameters
name|params
init|=
operator|new
name|BlockParameters
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|LogAggregationWebUtils
operator|.
name|verifyAndGetContainerId
argument_list|(
name|html
argument_list|,
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|NodeId
name|nodeId
init|=
name|LogAggregationWebUtils
operator|.
name|verifyAndGetNodeId
argument_list|(
name|html
argument_list|,
name|$
argument_list|(
name|NM_NODENAME
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|String
name|appOwner
init|=
name|LogAggregationWebUtils
operator|.
name|verifyAndGetAppOwner
argument_list|(
name|html
argument_list|,
name|$
argument_list|(
name|APP_OWNER
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|setAppOwner
argument_list|(
name|appOwner
argument_list|)
expr_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
name|long
name|start
init|=
operator|-
literal|4096
decl_stmt|;
try|try
block|{
name|start
operator|=
name|LogAggregationWebUtils
operator|.
name|getLogStartIndex
argument_list|(
name|html
argument_list|,
name|$
argument_list|(
literal|"start"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|__
argument_list|(
literal|"Invalid log start value: "
operator|+
name|$
argument_list|(
literal|"start"
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
name|params
operator|.
name|setStartIndex
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
try|try
block|{
name|end
operator|=
name|LogAggregationWebUtils
operator|.
name|getLogEndIndex
argument_list|(
name|html
argument_list|,
name|$
argument_list|(
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ne
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|__
argument_list|(
literal|"Invalid log start value: "
operator|+
name|$
argument_list|(
literal|"end"
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|isValid
operator|=
literal|false
expr_stmt|;
block|}
name|params
operator|.
name|setEndIndex
argument_list|(
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerId
operator|==
literal|null
operator|||
name|nodeId
operator|==
literal|null
operator|||
name|appOwner
operator|==
literal|null
operator|||
name|appOwner
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|isValid
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|params
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|String
name|logEntity
init|=
name|$
argument_list|(
name|ENTITY_STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|logEntity
operator|==
literal|null
operator|||
name|logEntity
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logEntity
operator|=
name|containerId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|params
operator|.
name|setLogEntity
argument_list|(
name|logEntity
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
DECL|method|checkAcls (Configuration conf, ApplicationId appId, String owner, Map<ApplicationAccessType, String> appAcls, String remoteUser)
specifier|protected
name|boolean
name|checkAcls
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|owner
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
parameter_list|,
name|String
name|remoteUser
parameter_list|)
block|{
name|ApplicationACLsManager
name|aclsManager
init|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|aclsManager
operator|.
name|addApplication
argument_list|(
name|appId
argument_list|,
name|appAcls
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|owner
argument_list|,
name|appId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|class|BlockParameters
specifier|protected
specifier|static
class|class
name|BlockParameters
block|{
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|appOwner
specifier|private
name|String
name|appOwner
decl_stmt|;
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|field|end
specifier|private
name|long
name|end
decl_stmt|;
DECL|field|logEntity
specifier|private
name|String
name|logEntity
decl_stmt|;
DECL|method|getAppId ()
specifier|public
name|ApplicationId
name|getAppId
parameter_list|()
block|{
return|return
name|appId
return|;
block|}
DECL|method|setAppId (ApplicationId appId)
specifier|public
name|void
name|setAppId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|this
operator|.
name|appId
operator|=
name|appId
expr_stmt|;
block|}
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
DECL|method|setContainerId (ContainerId containerId)
specifier|public
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|containerId
expr_stmt|;
block|}
DECL|method|getNodeId ()
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
DECL|method|setNodeId (NodeId nodeId)
specifier|public
name|void
name|setNodeId
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
DECL|method|getAppOwner ()
specifier|public
name|String
name|getAppOwner
parameter_list|()
block|{
return|return
name|appOwner
return|;
block|}
DECL|method|setAppOwner (String appOwner)
specifier|public
name|void
name|setAppOwner
parameter_list|(
name|String
name|appOwner
parameter_list|)
block|{
name|this
operator|.
name|appOwner
operator|=
name|appOwner
expr_stmt|;
block|}
DECL|method|getStartIndex ()
specifier|public
name|long
name|getStartIndex
parameter_list|()
block|{
return|return
name|start
return|;
block|}
DECL|method|setStartIndex (long startIndex)
specifier|public
name|void
name|setStartIndex
parameter_list|(
name|long
name|startIndex
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|startIndex
expr_stmt|;
block|}
DECL|method|getEndIndex ()
specifier|public
name|long
name|getEndIndex
parameter_list|()
block|{
return|return
name|end
return|;
block|}
DECL|method|setEndIndex (long endIndex)
specifier|public
name|void
name|setEndIndex
parameter_list|(
name|long
name|endIndex
parameter_list|)
block|{
name|this
operator|.
name|end
operator|=
name|endIndex
expr_stmt|;
block|}
DECL|method|getLogEntity ()
specifier|public
name|String
name|getLogEntity
parameter_list|()
block|{
return|return
name|logEntity
return|;
block|}
DECL|method|setLogEntity (String logEntity)
specifier|public
name|void
name|setLogEntity
parameter_list|(
name|String
name|logEntity
parameter_list|)
block|{
name|this
operator|.
name|logEntity
operator|=
name|logEntity
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

