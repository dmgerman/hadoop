begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.hamlet
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebAppException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Generates a specific hamlet implementation class from a spec class  * using a generic hamlet implementation class.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"YARN"
block|,
literal|"MapReduce"
block|}
argument_list|)
DECL|class|HamletGen
specifier|public
class|class
name|HamletGen
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HamletGen
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|opts
specifier|static
specifier|final
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
static|static
block|{
name|opts
operator|.
name|addOption
argument_list|(
literal|"h"
argument_list|,
literal|"help"
argument_list|,
literal|false
argument_list|,
literal|"Print this help message"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"s"
argument_list|,
literal|"spec-class"
argument_list|,
literal|true
argument_list|,
literal|"The class that holds the spec interfaces. e.g. HamletSpec"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"i"
argument_list|,
literal|"impl-class"
argument_list|,
literal|true
argument_list|,
literal|"An implementation class. e.g. HamletImpl"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"o"
argument_list|,
literal|"output-class"
argument_list|,
literal|true
argument_list|,
literal|"Output class name"
argument_list|)
operator|.
name|addOption
argument_list|(
literal|"p"
argument_list|,
literal|"output-package"
argument_list|,
literal|true
argument_list|,
literal|"Output package name"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
DECL|field|elementRegex
specifier|static
specifier|final
name|Pattern
name|elementRegex
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[A-Z][A-Z0-9]*$"
argument_list|)
decl_stmt|;
DECL|field|bytes
name|int
name|bytes
init|=
literal|0
decl_stmt|;
DECL|field|out
name|PrintWriter
name|out
decl_stmt|;
DECL|field|endTagOptional
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|endTagOptional
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|inlineElements
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|inlineElements
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
DECL|field|top
name|Class
argument_list|<
name|?
argument_list|>
name|top
decl_stmt|;
comment|// html top-level interface
DECL|field|hamlet
name|String
name|hamlet
decl_stmt|;
comment|// output class simple name;
DECL|field|topMode
name|boolean
name|topMode
decl_stmt|;
comment|/**    * Generate a specific Hamlet implementation from a spec.    * @param specClass holds hamlet interfaces. e.g. {@link HamletSpec}    * @param implClass a generic hamlet implementation. e.g. {@link HamletImpl}    * @param outputName name of the output class. e.g. {@link Hamlet}    * @param outputPkg package name of the output class.    * @throws IOException    */
DECL|method|generate (Class<?> specClass, Class<?> implClass, String outputName, String outputPkg)
specifier|public
name|void
name|generate
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|specClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
parameter_list|,
name|String
name|outputName
parameter_list|,
name|String
name|outputPkg
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating {} using {} and {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|outputName
block|,
name|specClass
block|,
name|implClass
block|}
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
name|outputName
operator|+
literal|".java"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|hamlet
operator|=
name|basename
argument_list|(
name|outputName
argument_list|)
expr_stmt|;
name|String
name|pkg
init|=
name|pkgName
argument_list|(
name|outputPkg
argument_list|,
name|implClass
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|puts
argument_list|(
literal|0
argument_list|,
literal|"// Generated by HamletGen. Do NOT edit!\n"
argument_list|,
literal|"package "
argument_list|,
name|pkg
argument_list|,
literal|";\n"
argument_list|,
literal|"import java.io.PrintWriter;\n"
argument_list|,
literal|"import java.util.EnumSet;\n"
argument_list|,
literal|"import static java.util.EnumSet.*;\n"
argument_list|,
literal|"import static "
argument_list|,
name|implClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|".EOpt.*;\n"
argument_list|,
literal|"import org.apache.hadoop.yarn.webapp.SubView;"
argument_list|)
expr_stmt|;
name|String
name|implClassName
init|=
name|implClass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|implClass
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"import "
argument_list|,
name|implClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|';'
argument_list|)
expr_stmt|;
block|}
name|puts
argument_list|(
literal|0
argument_list|,
literal|"\n"
argument_list|,
literal|"public class "
argument_list|,
name|hamlet
argument_list|,
literal|" extends "
argument_list|,
name|implClassName
argument_list|,
literal|" implements "
argument_list|,
name|specClass
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"._Html {\n"
argument_list|,
literal|"  public "
argument_list|,
name|hamlet
argument_list|,
literal|"(PrintWriter out, int nestLevel,"
argument_list|,
literal|" boolean wasInline) {\n"
argument_list|,
literal|"    super(out, nestLevel, wasInline);\n"
argument_list|,
literal|"  }\n\n"
argument_list|,
comment|// inline is context sensitive
literal|"  static EnumSet<EOpt> opt(boolean endTag, boolean inline, "
argument_list|,
literal|"boolean pre) {\n"
argument_list|,
literal|"    EnumSet<EOpt> opts = of(ENDTAG);\n"
argument_list|,
literal|"    if (!endTag) opts.remove(ENDTAG);\n"
argument_list|,
literal|"    if (inline) opts.add(INLINE);\n"
argument_list|,
literal|"    if (pre) opts.add(PRE);\n"
argument_list|,
literal|"    return opts;\n"
argument_list|,
literal|"  }"
argument_list|)
expr_stmt|;
name|initLut
argument_list|(
name|specClass
argument_list|)
expr_stmt|;
name|genImpl
argument_list|(
name|specClass
argument_list|,
name|implClassName
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating {} methods"
argument_list|,
name|hamlet
argument_list|)
expr_stmt|;
name|genMethods
argument_list|(
name|hamlet
argument_list|,
name|top
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|puts
argument_list|(
literal|0
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Wrote {} bytes to {}.java"
argument_list|,
name|bytes
argument_list|,
name|outputName
argument_list|)
expr_stmt|;
block|}
DECL|method|basename (String path)
name|String
name|basename
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|pkgName (String pkg, String defaultPkg)
name|String
name|pkgName
parameter_list|(
name|String
name|pkg
parameter_list|,
name|String
name|defaultPkg
parameter_list|)
block|{
if|if
condition|(
name|pkg
operator|==
literal|null
operator|||
name|pkg
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|defaultPkg
return|;
return|return
name|pkg
return|;
block|}
DECL|method|initLut (Class<?> spec)
name|void
name|initLut
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|spec
parameter_list|)
block|{
name|endTagOptional
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inlineElements
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|spec
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Annotation
name|a
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|HamletSpec
operator|.
name|Element
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|HamletSpec
operator|.
name|Element
operator|)
name|a
operator|)
operator|.
name|endTag
argument_list|()
condition|)
block|{
name|endTagOptional
operator|.
name|add
argument_list|(
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cls
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Inline"
argument_list|)
condition|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|cls
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|String
name|retName
init|=
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isElement
argument_list|(
name|retName
argument_list|)
condition|)
block|{
name|inlineElements
operator|.
name|add
argument_list|(
name|retName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|genImpl (Class<?> spec, String implClassName, int indent)
name|void
name|genImpl
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|spec
parameter_list|,
name|String
name|implClassName
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|String
name|specName
init|=
name|spec
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|spec
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|String
name|className
init|=
name|cls
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|genFactoryMethods
argument_list|(
name|cls
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isElement
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Generating class {}<T>"
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"\n"
argument_list|,
literal|"public class "
argument_list|,
name|className
argument_list|,
literal|"<T extends _>"
argument_list|,
literal|" extends EImp<T> implements "
argument_list|,
name|specName
argument_list|,
literal|"."
argument_list|,
name|className
argument_list|,
literal|" {\n"
argument_list|,
literal|"  public "
argument_list|,
name|className
argument_list|,
literal|"(String name, T parent,"
argument_list|,
literal|" EnumSet<EOpt> opts) {\n"
argument_list|,
literal|"    super(name, parent, opts);\n"
argument_list|,
literal|"  }"
argument_list|)
expr_stmt|;
name|genMethods
argument_list|(
name|className
argument_list|,
name|cls
argument_list|,
name|indent
operator|+
literal|1
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|"_Html"
argument_list|)
condition|)
block|{
name|top
operator|=
name|cls
expr_stmt|;
block|}
block|}
block|}
DECL|method|genFactoryMethods (Class<?> cls, int indent)
name|void
name|genFactoryMethods
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|cls
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
name|String
name|retName
init|=
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|methodName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'$'
condition|)
continue|continue;
if|if
condition|(
name|isElement
argument_list|(
name|retName
argument_list|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|genFactoryMethod
argument_list|(
name|retName
argument_list|,
name|methodName
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|genMethods (String className, Class<?> cls, int indent)
name|void
name|genMethods
parameter_list|(
name|String
name|className
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|topMode
operator|=
operator|(
name|top
operator|!=
literal|null
operator|&&
name|cls
operator|.
name|equals
argument_list|(
name|top
argument_list|)
operator|)
expr_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|cls
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|String
name|retName
init|=
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'$'
condition|)
block|{
name|genAttributeMethod
argument_list|(
name|className
argument_list|,
name|method
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isElement
argument_list|(
name|retName
argument_list|)
condition|)
block|{
name|genNewElementMethod
argument_list|(
name|className
argument_list|,
name|method
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|genCurElementMethod
argument_list|(
name|className
argument_list|,
name|method
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|genAttributeMethod (String className, Method method, int indent)
name|void
name|genAttributeMethod
parameter_list|(
name|String
name|className
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|attrName
init|=
name|methodName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'-'
argument_list|)
decl_stmt|;
name|Type
index|[]
name|params
init|=
name|method
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
name|echo
argument_list|(
name|indent
argument_list|,
literal|"\n"
argument_list|,
literal|"@Override\n"
argument_list|,
literal|"public "
argument_list|,
name|className
argument_list|,
name|topMode
condition|?
literal|" "
else|:
literal|"<T> "
argument_list|,
name|methodName
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|") {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  addAttr(\""
argument_list|,
name|attrName
argument_list|,
literal|"\", null);\n"
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|String
name|typeName
init|=
name|getTypeName
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|puts
argument_list|(
literal|0
argument_list|,
name|typeName
argument_list|,
literal|" value) {"
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"EnumSet<LinkType>"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  addRelAttr(\""
argument_list|,
name|attrName
argument_list|,
literal|"\", value);\n"
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
literal|"EnumSet<Media>"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  addMediaAttr(\""
argument_list|,
name|attrName
argument_list|,
literal|"\", value);\n"
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  addAttr(\""
argument_list|,
name|attrName
argument_list|,
literal|"\", value);\n"
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnhandled
argument_list|(
name|className
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTypeName (Type type)
name|String
name|getTypeName
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
operator|)
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
return|return
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pt
operator|.
name|getRawType
argument_list|()
operator|)
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"<"
operator|+
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|">"
return|;
block|}
DECL|method|genFactoryMethod (String retName, String methodName, int indent)
name|void
name|genFactoryMethod
parameter_list|(
name|String
name|retName
parameter_list|,
name|String
name|methodName
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|puts
argument_list|(
name|indent
argument_list|,
literal|"\n"
argument_list|,
literal|"private<T extends _> "
argument_list|,
name|retName
argument_list|,
literal|"<T> "
argument_list|,
name|methodName
argument_list|,
literal|"_(T e, boolean inline) {\n"
argument_list|,
literal|"  return new "
argument_list|,
name|retName
argument_list|,
literal|"<T>(\""
argument_list|,
name|retName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|,
literal|"\", e, opt("
argument_list|,
operator|!
name|endTagOptional
operator|.
name|contains
argument_list|(
name|retName
argument_list|)
argument_list|,
literal|", inline, "
argument_list|,
name|retName
operator|.
name|equals
argument_list|(
literal|"PRE"
argument_list|)
argument_list|,
literal|")); }"
argument_list|)
expr_stmt|;
block|}
DECL|method|genNewElementMethod (String className, Method method, int indent)
name|void
name|genNewElementMethod
parameter_list|(
name|String
name|className
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|retName
init|=
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
name|echo
argument_list|(
name|indent
argument_list|,
literal|"\n"
argument_list|,
literal|"@Override\n"
argument_list|,
literal|"public "
argument_list|,
name|retName
argument_list|,
literal|"<"
argument_list|,
name|className
argument_list|,
name|topMode
condition|?
literal|"> "
else|:
literal|"<T>> "
argument_list|,
name|methodName
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|") {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
name|topMode
condition|?
literal|""
else|:
literal|"  closeAttrs();\n"
argument_list|,
literal|"  return "
argument_list|,
name|retName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|,
literal|"_(this, "
argument_list|,
name|isInline
argument_list|(
name|className
argument_list|,
name|retName
argument_list|)
argument_list|,
literal|");\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String selector) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return setSelector("
argument_list|,
name|methodName
argument_list|,
literal|"(), selector);\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|throwUnhandled
argument_list|(
name|className
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isInline (String container, String className)
name|boolean
name|isInline
parameter_list|(
name|String
name|container
parameter_list|,
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
operator|(
name|container
operator|.
name|equals
argument_list|(
literal|"BODY"
argument_list|)
operator|||
name|container
operator|.
name|equals
argument_list|(
name|hamlet
argument_list|)
operator|||
name|container
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
operator|||
name|container
operator|.
name|equals
argument_list|(
literal|"HTML"
argument_list|)
operator|)
operator|&&
operator|(
name|className
operator|.
name|equals
argument_list|(
literal|"INS"
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
literal|"DEL"
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
literal|"SCRIPT"
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|inlineElements
operator|.
name|contains
argument_list|(
name|className
argument_list|)
return|;
block|}
DECL|method|genCurElementMethod (String className, Method method, int indent)
name|void
name|genCurElementMethod
parameter_list|(
name|String
name|className
parameter_list|,
name|Method
name|method
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|topMode
operator|||
name|params
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|echo
argument_list|(
name|indent
argument_list|,
literal|"\n"
argument_list|,
literal|"@Override\n"
argument_list|,
literal|"public "
argument_list|,
name|className
argument_list|,
name|topMode
condition|?
literal|" "
else|:
literal|"<T> "
argument_list|,
name|methodName
argument_list|,
literal|"("
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|topMode
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|") {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"base"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String href) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return base().$href(href)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"script"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String src) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return setScriptSrc(script(), src)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"style"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"Object... lines) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return style().$type(\"text/css\")._(lines)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"img"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String src) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return "
argument_list|,
name|methodName
argument_list|,
literal|"().$src(src)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"br"
argument_list|)
operator|||
name|methodName
operator|.
name|equals
argument_list|(
literal|"hr"
argument_list|)
operator|||
name|methodName
operator|.
name|equals
argument_list|(
literal|"col"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String selector) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return setSelector("
argument_list|,
name|methodName
argument_list|,
literal|"(), selector)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"link"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String href) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return setLinkHref("
argument_list|,
name|methodName
argument_list|,
literal|"(), href)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"_"
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
index|[
literal|0
index|]
operator|.
name|getSimpleName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Class"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"Class<? extends SubView> cls) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  "
argument_list|,
name|topMode
condition|?
literal|"subView"
else|:
literal|"_v"
argument_list|,
literal|"(cls);\n"
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"Object... lines) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  _p("
argument_list|,
name|needsEscaping
argument_list|(
name|className
argument_list|)
argument_list|,
literal|", lines);\n"
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"_r"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"Object... lines) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  _p(false, lines);\n"
argument_list|,
literal|"  return this;\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String cdata) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return "
argument_list|,
name|methodName
argument_list|,
literal|"()._(cdata)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"meta"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String name, String content) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return meta().$name(name).$content(content)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"meta_http"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String header, String content) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return meta().$http_equiv(header).$content(content)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String href, String anchorText) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return a().$href(href)._(anchorText)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"bdo"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"Dir dir, String cdata) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return bdo().$dir(dir)._(cdata)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"label"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String forId, String cdata) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return label().$for(forId)._(cdata)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"param"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String name, String value) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return param().$name(name).$value(value)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String selector, String cdata) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return setSelector("
argument_list|,
name|methodName
argument_list|,
literal|"(), selector)._(cdata)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|3
condition|)
block|{
if|if
condition|(
name|methodName
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|puts
argument_list|(
literal|0
argument_list|,
literal|"String selector, String href, String anchorText) {"
argument_list|)
expr_stmt|;
name|puts
argument_list|(
name|indent
argument_list|,
literal|"  return setSelector(a(), selector)"
argument_list|,
literal|".$href(href)._(anchorText)._();\n"
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|throwUnhandled
argument_list|(
name|className
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|needsEscaping (String eleName)
specifier|static
name|boolean
name|needsEscaping
parameter_list|(
name|String
name|eleName
parameter_list|)
block|{
return|return
operator|!
name|eleName
operator|.
name|equals
argument_list|(
literal|"SCRIPT"
argument_list|)
operator|&&
operator|!
name|eleName
operator|.
name|equals
argument_list|(
literal|"STYLE"
argument_list|)
return|;
block|}
DECL|method|throwUnhandled (String className, Method method)
specifier|static
name|void
name|throwUnhandled
parameter_list|(
name|String
name|className
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
throw|throw
operator|new
name|WebAppException
argument_list|(
literal|"Unhandled "
operator|+
name|className
operator|+
literal|"#"
operator|+
name|method
argument_list|)
throw|;
block|}
DECL|method|echo (int indent, Object... args)
name|void
name|echo
parameter_list|(
name|int
name|indent
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|String
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|args
control|)
block|{
name|String
name|s
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|equals
argument_list|(
literal|"\n"
argument_list|)
operator|&&
operator|(
name|prev
operator|==
literal|null
operator|||
name|prev
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
operator|)
condition|)
block|{
name|indent
argument_list|(
name|indent
argument_list|)
expr_stmt|;
block|}
name|prev
operator|=
name|s
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|s
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|indent (int indent)
name|void
name|indent
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|bytes
operator|+=
literal|2
expr_stmt|;
block|}
block|}
DECL|method|puts (int indent, Object... args)
name|void
name|puts
parameter_list|(
name|int
name|indent
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|echo
argument_list|(
name|indent
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
operator|++
name|bytes
expr_stmt|;
block|}
DECL|method|isElement (String s)
name|boolean
name|isElement
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|elementRegex
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandLine
name|cmd
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|opts
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
operator|new
name|HelpFormatter
argument_list|()
operator|.
name|printHelp
argument_list|(
literal|"Usage: hbgen [OPTIONS]"
argument_list|,
name|opts
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// defaults
name|Class
argument_list|<
name|?
argument_list|>
name|specClass
init|=
name|HamletSpec
operator|.
name|class
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|implClass
init|=
name|HamletImpl
operator|.
name|class
decl_stmt|;
name|String
name|outputClass
init|=
literal|"HamletTmp"
decl_stmt|;
name|String
name|outputPackage
init|=
name|implClass
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"spec-class"
argument_list|)
condition|)
block|{
name|specClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"spec-class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"impl-class"
argument_list|)
condition|)
block|{
name|implClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"impl-class"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"output-class"
argument_list|)
condition|)
block|{
name|outputClass
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"output-class"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
literal|"output-package"
argument_list|)
condition|)
block|{
name|outputPackage
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
literal|"output-package"
argument_list|)
expr_stmt|;
block|}
operator|new
name|HamletGen
argument_list|()
operator|.
name|generate
argument_list|(
name|specClass
argument_list|,
name|implClass
argument_list|,
name|outputClass
argument_list|,
name|outputPackage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

