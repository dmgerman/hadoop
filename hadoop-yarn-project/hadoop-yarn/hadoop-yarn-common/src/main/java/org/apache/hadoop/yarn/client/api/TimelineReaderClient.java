begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|CompositeService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|TimelineReaderClientImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A client library that can be used to get Timeline Entities associated with  * application, application attempt or containers. This client library needs to  * be used along with time line v.2 server version.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|TimelineReaderClient
specifier|public
specifier|abstract
class|class
name|TimelineReaderClient
extends|extends
name|CompositeService
block|{
comment|/**    * Create a new instance of Timeline Reader Client.    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
DECL|method|createTimelineReaderClient ()
specifier|public
specifier|static
name|TimelineReaderClient
name|createTimelineReaderClient
parameter_list|()
block|{
return|return
operator|new
name|TimelineReaderClientImpl
argument_list|()
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|method|TimelineReaderClient (String name)
specifier|public
name|TimelineReaderClient
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets application entity.    * @param appId application id    * @param fields Fields to be fetched. Defaults to INFO.    * @param filters Filters to be applied while fetching entities.    * @return entity of the application    * @throws IOException    */
DECL|method|getApplicationEntity ( ApplicationId appId, String fields, Map<String, String> filters)
specifier|public
specifier|abstract
name|TimelineEntity
name|getApplicationEntity
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|fields
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filters
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gets application attempt entity.    * @param appAttemptId application attempt id    * @param fields Fields to be fetched. Defaults to INFO.    * @param filters Filters to be applied while fetching entities.    * @return entity associated with application attempt    * @throws IOException    */
DECL|method|getApplicationAttemptEntity ( ApplicationAttemptId appAttemptId, String fields, Map<String, String> filters)
specifier|public
specifier|abstract
name|TimelineEntity
name|getApplicationAttemptEntity
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|String
name|fields
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filters
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gets application attempt entities.    * @param appId application id    * @param fields Fields to be fetched. Defaults to INFO.    * @param filters Filters to be applied while fetching entities.    * @param limit Number of entities to return.    * @param fromId Retrieve next set of generic ids from given fromId    * @return list of application attempt entities    * @throws IOException    */
DECL|method|getApplicationAttemptEntities ( ApplicationId appId, String fields, Map<String, String> filters, long limit, String fromId)
specifier|public
specifier|abstract
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|getApplicationAttemptEntities
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|fields
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filters
parameter_list|,
name|long
name|limit
parameter_list|,
name|String
name|fromId
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gets Timeline entity for the container.    * @param containerId container id    * @param fields Fields to be fetched. Defaults to INFO.    * @param filters Filters to be applied while fetching entities.    * @return timeline entity for container    * @throws IOException    */
DECL|method|getContainerEntity ( ContainerId containerId, String fields, Map<String, String> filters)
specifier|public
specifier|abstract
name|TimelineEntity
name|getContainerEntity
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|fields
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filters
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Gets container entities for an application.    * @param appId application id    * @param fields Fields to be fetched. Defaults to INFO.    * @param filters Filters to be applied while fetching entities.    * @param limit Number of entities to return.    * @param fromId Retrieve next set of generic ids from given fromId    * @return list of entities    * @throws IOException    */
DECL|method|getContainerEntities ( ApplicationId appId, String fields, Map<String, String> filters, long limit, String fromId)
specifier|public
specifier|abstract
name|List
argument_list|<
name|TimelineEntity
argument_list|>
name|getContainerEntities
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|fields
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filters
parameter_list|,
name|long
name|limit
parameter_list|,
name|String
name|fromId
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

