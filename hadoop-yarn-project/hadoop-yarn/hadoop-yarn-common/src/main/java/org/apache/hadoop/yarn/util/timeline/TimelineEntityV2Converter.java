begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.timeline
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|AppAttemptMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ContainerMetricsConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|PATH_JOINER
import|;
end_import

begin_comment
comment|/**  * Utility class to generate reports from timeline entities.  */
end_comment

begin_class
DECL|class|TimelineEntityV2Converter
specifier|public
specifier|final
class|class
name|TimelineEntityV2Converter
block|{
DECL|method|TimelineEntityV2Converter ()
specifier|private
name|TimelineEntityV2Converter
parameter_list|()
block|{   }
DECL|method|convertToContainerReport ( TimelineEntity entity, String serverAddress, String user)
specifier|public
specifier|static
name|ContainerReport
name|convertToContainerReport
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|,
name|String
name|serverAddress
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|int
name|allocatedMem
init|=
literal|0
decl_stmt|;
name|int
name|allocatedVcore
init|=
literal|0
decl_stmt|;
name|String
name|allocatedHost
init|=
literal|null
decl_stmt|;
name|int
name|allocatedPort
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|allocatedPriority
init|=
literal|0
decl_stmt|;
name|long
name|createdTime
init|=
literal|0
decl_stmt|;
name|long
name|finishedTime
init|=
literal|0
decl_stmt|;
name|String
name|diagnosticsInfo
init|=
literal|null
decl_stmt|;
name|int
name|exitStatus
init|=
name|ContainerExitStatus
operator|.
name|INVALID
decl_stmt|;
name|ContainerState
name|state
init|=
literal|null
decl_stmt|;
name|String
name|nodeHttpAddress
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
name|exposedPorts
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
name|entity
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_MEMORY_INFO
argument_list|)
condition|)
block|{
name|allocatedMem
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_MEMORY_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_VCORE_INFO
argument_list|)
condition|)
block|{
name|allocatedVcore
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_VCORE_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_INFO
argument_list|)
condition|)
block|{
name|allocatedHost
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_INFO
argument_list|)
condition|)
block|{
name|allocatedPort
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PRIORITY_INFO
argument_list|)
condition|)
block|{
name|allocatedPriority
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PRIORITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_HTTP_ADDRESS_INFO
argument_list|)
condition|)
block|{
name|nodeHttpAddress
operator|=
operator|(
name|String
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_HTTP_ADDRESS_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_EXPOSED_PORTS
argument_list|)
condition|)
block|{
name|exposedPorts
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|>
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_EXPOSED_PORTS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|DIAGNOSTICS_INFO
argument_list|)
condition|)
block|{
name|diagnosticsInfo
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|DIAGNOSTICS_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|EXIT_STATUS_INFO
argument_list|)
condition|)
block|{
name|exitStatus
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|EXIT_STATUS_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ContainerMetricsConstants
operator|.
name|STATE_INFO
argument_list|)
condition|)
block|{
name|state
operator|=
name|ContainerState
operator|.
name|valueOf
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|STATE_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|NavigableSet
argument_list|<
name|TimelineEvent
argument_list|>
name|events
init|=
name|entity
operator|.
name|getEvents
argument_list|()
decl_stmt|;
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerMetricsConstants
operator|.
name|CREATED_IN_RM_EVENT_TYPE
argument_list|)
condition|)
block|{
name|createdTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerMetricsConstants
operator|.
name|FINISHED_IN_RM_EVENT_TYPE
argument_list|)
condition|)
block|{
name|finishedTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|String
name|logUrl
init|=
literal|null
decl_stmt|;
name|NodeId
name|allocatedNode
init|=
literal|null
decl_stmt|;
name|String
name|containerId
init|=
name|entity
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|allocatedHost
operator|!=
literal|null
condition|)
block|{
name|allocatedNode
operator|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|allocatedHost
argument_list|,
name|allocatedPort
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverAddress
operator|!=
literal|null
operator|&&
name|user
operator|!=
literal|null
condition|)
block|{
name|logUrl
operator|=
name|PATH_JOINER
operator|.
name|join
argument_list|(
name|serverAddress
argument_list|,
literal|"logs"
argument_list|,
name|allocatedNode
argument_list|,
name|containerId
argument_list|,
name|containerId
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
name|ContainerReport
name|container
init|=
name|ContainerReport
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|allocatedMem
argument_list|,
name|allocatedVcore
argument_list|)
argument_list|,
name|allocatedNode
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|allocatedPriority
argument_list|)
argument_list|,
name|createdTime
argument_list|,
name|finishedTime
argument_list|,
name|diagnosticsInfo
argument_list|,
name|logUrl
argument_list|,
name|exitStatus
argument_list|,
name|state
argument_list|,
name|nodeHttpAddress
argument_list|)
decl_stmt|;
name|container
operator|.
name|setExposedPorts
argument_list|(
name|exposedPorts
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|convertToApplicationAttemptReport ( TimelineEntity entity)
specifier|public
specifier|static
name|ApplicationAttemptReport
name|convertToApplicationAttemptReport
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
name|String
name|host
init|=
literal|null
decl_stmt|;
name|int
name|rpcPort
init|=
operator|-
literal|1
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
literal|null
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|null
decl_stmt|;
name|String
name|originalTrackingUrl
init|=
literal|null
decl_stmt|;
name|String
name|diagnosticsInfo
init|=
literal|null
decl_stmt|;
name|YarnApplicationAttemptState
name|state
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
name|entity
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
literal|0
decl_stmt|;
name|long
name|finishTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|entityInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|HOST_INFO
argument_list|)
condition|)
block|{
name|host
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|HOST_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|RPC_PORT_INFO
argument_list|)
condition|)
block|{
name|rpcPort
operator|=
operator|(
name|Integer
operator|)
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|RPC_PORT_INFO
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_INFO
argument_list|)
condition|)
block|{
name|amContainerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|TRACKING_URL_INFO
argument_list|)
condition|)
block|{
name|trackingUrl
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|TRACKING_URL_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ORIGINAL_TRACKING_URL_INFO
argument_list|)
condition|)
block|{
name|originalTrackingUrl
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ORIGINAL_TRACKING_URL_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|DIAGNOSTICS_INFO
argument_list|)
condition|)
block|{
name|diagnosticsInfo
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|DIAGNOSTICS_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|STATE_INFO
argument_list|)
condition|)
block|{
name|state
operator|=
name|YarnApplicationAttemptState
operator|.
name|valueOf
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|STATE_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_INFO
argument_list|)
condition|)
block|{
name|amContainerId
operator|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|NavigableSet
argument_list|<
name|TimelineEvent
argument_list|>
name|events
init|=
name|entity
operator|.
name|getEvents
argument_list|()
decl_stmt|;
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|REGISTERED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|startTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|finishTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|ApplicationAttemptReport
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|host
argument_list|,
name|rpcPort
argument_list|,
name|trackingUrl
argument_list|,
name|originalTrackingUrl
argument_list|,
name|diagnosticsInfo
argument_list|,
name|state
argument_list|,
name|amContainerId
argument_list|,
name|startTime
argument_list|,
name|finishTime
argument_list|)
return|;
block|}
DECL|method|convertToApplicationReport ( TimelineEntity entity)
specifier|public
specifier|static
name|ApplicationReport
name|convertToApplicationReport
parameter_list|(
name|TimelineEntity
name|entity
parameter_list|)
block|{
name|String
name|user
init|=
literal|null
decl_stmt|;
name|String
name|queue
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
literal|null
decl_stmt|;
name|boolean
name|unmanagedApplication
init|=
literal|false
decl_stmt|;
name|long
name|createdTime
init|=
literal|0
decl_stmt|;
name|long
name|finishedTime
init|=
literal|0
decl_stmt|;
name|float
name|progress
init|=
literal|0.0f
decl_stmt|;
name|int
name|applicationPriority
init|=
literal|0
decl_stmt|;
name|ApplicationAttemptId
name|latestApplicationAttemptId
init|=
literal|null
decl_stmt|;
name|String
name|diagnosticsInfo
init|=
literal|null
decl_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|UNDEFINED
decl_stmt|;
name|YarnApplicationState
name|state
init|=
name|YarnApplicationState
operator|.
name|ACCEPTED
decl_stmt|;
name|ApplicationResourceUsageReport
name|appResources
init|=
literal|null
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
literal|null
decl_stmt|;
name|String
name|appNodeLabelExpression
init|=
literal|null
decl_stmt|;
name|String
name|amNodeLabelExpression
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
init|=
name|entity
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|entityInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|USER_ENTITY_INFO
argument_list|)
condition|)
block|{
name|user
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|USER_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|)
condition|)
block|{
name|queue
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|NAME_ENTITY_INFO
argument_list|)
condition|)
block|{
name|name
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|NAME_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
condition|)
block|{
name|type
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
condition|)
block|{
name|type
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UNMANAGED_APPLICATION_ENTITY_INFO
argument_list|)
condition|)
block|{
name|unmanagedApplication
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UNMANAGED_APPLICATION_ENTITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APPLICATION_PRIORITY_INFO
argument_list|)
condition|)
block|{
name|applicationPriority
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APPLICATION_PRIORITY_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_TAGS_INFO
argument_list|)
condition|)
block|{
name|appTags
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|Object
name|obj
init|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_TAGS_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
for|for
control|(
name|Object
name|o
else|:
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|obj
block|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|appTags
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_if
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|LATEST_APP_ATTEMPT_EVENT_INFO
argument_list|)
condition|)
block|{
name|latestApplicationAttemptId
operator|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|LATEST_APP_ATTEMPT_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_if
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
condition|)
block|{
name|diagnosticsInfo
operator|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
end_if

begin_if
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINAL_STATUS_EVENT_INFO
argument_list|)
condition|)
block|{
name|finalStatus
operator|=
name|FinalApplicationStatus
operator|.
name|valueOf
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINAL_STATUS_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_if
if|if
condition|(
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
condition|)
block|{
name|state
operator|=
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
unit|}      Map
operator|<
name|String
operator|,
name|String
operator|>
name|configs
operator|=
name|entity
operator|.
name|getConfigs
argument_list|()
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|configs
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_NODE_LABEL_EXPRESSION
argument_list|)
condition|)
block|{
name|appNodeLabelExpression
operator|=
name|configs
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_NODE_LABEL_EXPRESSION
argument_list|)
expr_stmt|;
block|}
end_if

begin_if
if|if
condition|(
name|configs
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|AM_NODE_LABEL_EXPRESSION
argument_list|)
condition|)
block|{
name|amNodeLabelExpression
operator|=
name|configs
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|AM_NODE_LABEL_EXPRESSION
argument_list|)
expr_stmt|;
block|}
end_if

begin_decl_stmt
name|Set
argument_list|<
name|TimelineMetric
argument_list|>
name|metrics
init|=
name|entity
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|long
name|vcoreSeconds
init|=
literal|0
decl_stmt|;
name|long
name|memorySeconds
init|=
literal|0
decl_stmt|;
name|long
name|preemptedVcoreSeconds
init|=
literal|0
decl_stmt|;
name|long
name|preemptedMemorySeconds
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TimelineMetric
name|metric
range|:
name|metrics
control|)
block|{
switch|switch
condition|(
name|metric
operator|.
name|getId
argument_list|()
condition|)
block|{
case|case
name|ApplicationMetricsConstants
operator|.
name|APP_CPU_METRICS
case|:
name|vcoreSeconds
operator|=
name|getAverageValue
argument_list|(
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ApplicationMetricsConstants
operator|.
name|APP_MEM_METRICS
case|:
name|memorySeconds
operator|=
name|getAverageValue
argument_list|(
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ApplicationMetricsConstants
operator|.
name|APP_MEM_PREEMPT_METRICS
case|:
name|preemptedVcoreSeconds
operator|=
name|getAverageValue
argument_list|(
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|ApplicationMetricsConstants
operator|.
name|APP_CPU_PREEMPT_METRICS
case|:
name|preemptedVcoreSeconds
operator|=
name|getAverageValue
argument_list|(
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Should not happen..
break|break;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|resourceSecondsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|preemptedResoureSecondsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|resourceSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
name|memorySeconds
argument_list|)
expr_stmt|;
name|resourceSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
name|vcoreSeconds
argument_list|)
expr_stmt|;
name|preemptedResoureSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
name|preemptedMemorySeconds
argument_list|)
expr_stmt|;
name|preemptedResoureSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
name|preemptedVcoreSeconds
argument_list|)
expr_stmt|;
name|appResources
operator|=
name|ApplicationResourceUsageReport
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|resourceSecondsMap
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|preemptedResoureSecondsMap
argument_list|)
expr_stmt|;
block|}
end_if

begin_decl_stmt
name|NavigableSet
argument_list|<
name|TimelineEvent
argument_list|>
name|events
init|=
name|entity
operator|.
name|getEvents
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|long
name|updatedTimeStamp
init|=
literal|0L
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TimelineEvent
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|createdTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UPDATED_EVENT_TYPE
argument_list|)
condition|)
block|{
comment|// This type of events are parsed in time-stamp descending order
comment|// which means the previous event could override the information
comment|// from the later same type of event. Hence compare timestamp
comment|// before over writing.
if|if
condition|(
name|event
operator|.
name|getTimestamp
argument_list|()
operator|>
name|updatedTimeStamp
condition|)
block|{
name|updatedTimeStamp
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_UPDATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eventInfo
init|=
name|event
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventInfo
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|eventInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|YarnApplicationState
operator|.
name|ACCEPTED
condition|)
block|{
name|state
operator|=
name|YarnApplicationState
operator|.
name|valueOf
argument_list|(
name|eventInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|progress
operator|=
literal|1.0F
expr_stmt|;
name|state
operator|=
name|YarnApplicationState
operator|.
name|FINISHED
expr_stmt|;
name|finishedTime
operator|=
name|event
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_if

begin_return
return|return
name|ApplicationReport
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|latestApplicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|state
argument_list|,
name|diagnosticsInfo
argument_list|,
literal|null
argument_list|,
name|createdTime
argument_list|,
name|finishedTime
argument_list|,
name|finalStatus
argument_list|,
name|appResources
argument_list|,
literal|null
argument_list|,
name|progress
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
name|appTags
argument_list|,
name|unmanagedApplication
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|applicationPriority
argument_list|)
argument_list|,
name|appNodeLabelExpression
argument_list|,
name|amNodeLabelExpression
argument_list|)
return|;
end_return

begin_function
unit|}    private
DECL|method|getAverageValue (Collection<Number> values)
specifier|static
name|long
name|getAverageValue
parameter_list|(
name|Collection
argument_list|<
name|Number
argument_list|>
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Number
name|value
range|:
name|values
control|)
block|{
name|sum
operator|+=
name|value
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|sum
operator|/
name|values
operator|.
name|size
argument_list|()
return|;
block|}
end_function

unit|}
end_unit

