begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|event
operator|.
name|StoreNewClusterNodeLabels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|event
operator|.
name|NodeLabelsStoreEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|event
operator|.
name|NodeLabelsStoreEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|event
operator|.
name|RemoveClusterNodeLabels
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|event
operator|.
name|UpdateNodeToLabelsMappingsEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
DECL|class|CommonNodeLabelsManager
specifier|public
class|class
name|CommonNodeLabelsManager
extends|extends
name|AbstractService
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|MAX_LABEL_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LABEL_LENGTH
init|=
literal|255
decl_stmt|;
DECL|field|EMPTY_STRING_SET
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|EMPTY_STRING_SET
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|ANY
specifier|public
specifier|static
specifier|final
name|String
name|ANY
init|=
literal|"*"
decl_stmt|;
DECL|field|ACCESS_ANY_LABEL_SET
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ACCESS_ANY_LABEL_SET
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ANY
argument_list|)
decl_stmt|;
DECL|field|LABEL_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|LABEL_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^[0-9a-zA-Z][0-9a-zA-Z-_]*"
argument_list|)
decl_stmt|;
DECL|field|WILDCARD_PORT
specifier|public
specifier|static
specifier|final
name|int
name|WILDCARD_PORT
init|=
literal|0
decl_stmt|;
comment|/**    * If a user doesn't specify label of a queue or node, it belongs    * DEFAULT_LABEL    */
DECL|field|NO_LABEL
specifier|public
specifier|static
specifier|final
name|String
name|NO_LABEL
init|=
literal|""
decl_stmt|;
DECL|field|dispatcher
specifier|protected
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|labelCollections
specifier|protected
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Label
argument_list|>
name|labelCollections
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Label
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|nodeCollections
specifier|protected
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Host
argument_list|>
name|nodeCollections
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Host
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|protected
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|protected
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|store
specifier|protected
name|NodeLabelsStore
name|store
decl_stmt|;
DECL|class|Label
specifier|protected
specifier|static
class|class
name|Label
block|{
DECL|field|resource
specifier|public
name|Resource
name|resource
decl_stmt|;
DECL|method|Label ()
specifier|protected
name|Label
parameter_list|()
block|{
name|this
operator|.
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A<code>Host</code> can have multiple<code>Node</code>s     */
DECL|class|Host
specifier|protected
specifier|static
class|class
name|Host
block|{
DECL|field|labels
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|labels
decl_stmt|;
DECL|field|nms
specifier|public
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Node
argument_list|>
name|nms
decl_stmt|;
DECL|method|Host ()
specifier|protected
name|Host
parameter_list|()
block|{
name|labels
operator|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nms
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|Node
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|Host
name|copy
parameter_list|()
block|{
name|Host
name|c
init|=
operator|new
name|Host
argument_list|()
decl_stmt|;
name|c
operator|.
name|labels
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|labels
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Node
argument_list|>
name|entry
range|:
name|nms
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|c
operator|.
name|nms
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
return|;
block|}
block|}
DECL|class|Node
specifier|protected
specifier|static
class|class
name|Node
block|{
DECL|field|labels
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|labels
decl_stmt|;
DECL|field|resource
specifier|public
name|Resource
name|resource
decl_stmt|;
DECL|field|running
specifier|public
name|boolean
name|running
decl_stmt|;
DECL|method|Node ()
specifier|protected
name|Node
parameter_list|()
block|{
name|labels
operator|=
literal|null
expr_stmt|;
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|copy ()
specifier|public
name|Node
name|copy
parameter_list|()
block|{
name|Node
name|c
init|=
operator|new
name|Node
argument_list|()
decl_stmt|;
if|if
condition|(
name|labels
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|labels
operator|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|labels
operator|.
name|addAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|labels
operator|=
literal|null
expr_stmt|;
block|}
name|c
operator|.
name|resource
operator|=
name|Resources
operator|.
name|clone
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|c
operator|.
name|running
operator|=
name|running
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
DECL|class|ForwardingEventHandler
specifier|private
specifier|final
class|class
name|ForwardingEventHandler
implements|implements
name|EventHandler
argument_list|<
name|NodeLabelsStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (NodeLabelsStoreEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|NodeLabelsStoreEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|isInState
argument_list|(
name|STATE
operator|.
name|STARTED
argument_list|)
condition|)
block|{
name|handleStoreEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Dispatcher related code
DECL|method|handleStoreEvent (NodeLabelsStoreEvent event)
specifier|protected
name|void
name|handleStoreEvent
parameter_list|(
name|NodeLabelsStoreEvent
name|event
parameter_list|)
block|{
try|try
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ADD_LABELS
case|:
name|StoreNewClusterNodeLabels
name|storeNewClusterNodeLabelsEvent
init|=
operator|(
name|StoreNewClusterNodeLabels
operator|)
name|event
decl_stmt|;
name|store
operator|.
name|storeNewClusterNodeLabels
argument_list|(
name|storeNewClusterNodeLabelsEvent
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|REMOVE_LABELS
case|:
name|RemoveClusterNodeLabels
name|removeClusterNodeLabelsEvent
init|=
operator|(
name|RemoveClusterNodeLabels
operator|)
name|event
decl_stmt|;
name|store
operator|.
name|removeClusterNodeLabels
argument_list|(
name|removeClusterNodeLabelsEvent
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STORE_NODE_TO_LABELS
case|:
name|UpdateNodeToLabelsMappingsEvent
name|updateNodeToLabelsMappingsEvent
init|=
operator|(
name|UpdateNodeToLabelsMappingsEvent
operator|)
name|event
decl_stmt|;
name|store
operator|.
name|updateNodeToLabelsMappings
argument_list|(
name|updateNodeToLabelsMappingsEvent
operator|.
name|getNodeToLabels
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to store label modification to storage"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|CommonNodeLabelsManager ()
specifier|public
name|CommonNodeLabelsManager
parameter_list|()
block|{
name|super
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
comment|// for UT purpose
DECL|method|initDispatcher (Configuration conf)
specifier|protected
name|void
name|initDispatcher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// create async handler
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|()
expr_stmt|;
name|AsyncDispatcher
name|asyncDispatcher
init|=
operator|(
name|AsyncDispatcher
operator|)
name|dispatcher
decl_stmt|;
name|asyncDispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|asyncDispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|initNodeLabelStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|labelCollections
operator|.
name|put
argument_list|(
name|NO_LABEL
argument_list|,
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|initNodeLabelStore (Configuration conf)
specifier|protected
name|void
name|initNodeLabelStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|store
operator|=
operator|new
name|FileSystemNodeLabelsStore
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|recover
argument_list|()
expr_stmt|;
block|}
comment|// for UT purpose
DECL|method|startDispatcher ()
specifier|protected
name|void
name|startDispatcher
parameter_list|()
block|{
comment|// start dispatcher
name|AsyncDispatcher
name|asyncDispatcher
init|=
operator|(
name|AsyncDispatcher
operator|)
name|dispatcher
decl_stmt|;
name|asyncDispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// init dispatcher only when service start, because recover will happen in
comment|// service init, we don't want to trigger any event handling at that time.
name|initDispatcher
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|NodeLabelsStoreEventType
operator|.
name|class
argument_list|,
operator|new
name|ForwardingEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|startDispatcher
argument_list|()
expr_stmt|;
block|}
comment|// for UT purpose
DECL|method|stopDispatcher ()
specifier|protected
name|void
name|stopDispatcher
parameter_list|()
block|{
name|AsyncDispatcher
name|asyncDispatcher
init|=
operator|(
name|AsyncDispatcher
operator|)
name|dispatcher
decl_stmt|;
name|asyncDispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// finalize store
name|stopDispatcher
argument_list|()
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Add multiple node labels to repository    *     * @param labels    *          new node labels added    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|addToCluserNodeLabels (Set<String> labels)
specifier|public
name|void
name|addToCluserNodeLabels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|labels
operator|||
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|labels
operator|=
name|normalizeLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
comment|// do a check before actual adding them, will throw exception if any of them
comment|// doesn't meet label name requirement
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|checkAndThrowLabelName
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|this
operator|.
name|labelCollections
operator|.
name|put
argument_list|(
name|label
argument_list|,
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|dispatcher
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|StoreNewClusterNodeLabels
argument_list|(
name|labels
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Add labels: ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|labels
operator|.
name|iterator
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAddLabelsToNode ( Map<NodeId, Set<String>> addedLabelsToNode)
specifier|protected
name|void
name|checkAddLabelsToNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|addedLabelsToNode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|addedLabelsToNode
operator|||
name|addedLabelsToNode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// check all labels being added existed
name|Set
argument_list|<
name|String
argument_list|>
name|knownLabels
init|=
name|labelCollections
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|addedLabelsToNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|knownLabels
operator|.
name|containsAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Not all labels being added contained by known "
operator|+
literal|"label collections, please check"
operator|+
literal|", added labels=["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|internalAddLabelsToNode ( Map<NodeId, Set<String>> addedLabelsToNode)
specifier|protected
name|void
name|internalAddLabelsToNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|addedLabelsToNode
parameter_list|)
throws|throws
name|IOException
block|{
comment|// do add labels to nodes
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newNMToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|addedLabelsToNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|createNodeIfNonExisted
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|getPort
argument_list|()
operator|==
name|WILDCARD_PORT
condition|)
block|{
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|host
operator|.
name|labels
operator|.
name|addAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|newNMToLabels
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|host
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|nm
init|=
name|getNMInNodeSet
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
name|nm
operator|.
name|labels
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|nm
operator|.
name|labels
operator|.
name|addAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|newNMToLabels
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nm
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|dispatcher
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|UpdateNodeToLabelsMappingsEvent
argument_list|(
name|newNMToLabels
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// shows node->labels we added
name|LOG
operator|.
name|info
argument_list|(
literal|"addLabelsToNode:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|newNMToLabels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  NM="
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", labels=["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * add more labels to nodes    *     * @param addedLabelsToNode node -> labels map    */
DECL|method|addLabelsToNode (Map<NodeId, Set<String>> addedLabelsToNode)
specifier|public
name|void
name|addLabelsToNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|addedLabelsToNode
parameter_list|)
throws|throws
name|IOException
block|{
name|checkAddLabelsToNode
argument_list|(
name|addedLabelsToNode
argument_list|)
expr_stmt|;
name|internalAddLabelsToNode
argument_list|(
name|addedLabelsToNode
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRemoveFromClusterNodeLabels ( Collection<String> labelsToRemove)
specifier|protected
name|void
name|checkRemoveFromClusterNodeLabels
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|labelsToRemove
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|labelsToRemove
operator|||
name|labelsToRemove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Check if label to remove doesn't existed or null/empty, will throw
comment|// exception if any of labels to remove doesn't meet requirement
for|for
control|(
name|String
name|label
range|:
name|labelsToRemove
control|)
block|{
name|label
operator|=
name|normalizeLabel
argument_list|(
name|label
argument_list|)
expr_stmt|;
if|if
condition|(
name|label
operator|==
literal|null
operator|||
name|label
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Label to be removed is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|labelCollections
operator|.
name|containsKey
argument_list|(
name|label
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Node label="
operator|+
name|label
operator|+
literal|" to be removed doesn't existed in cluster "
operator|+
literal|"node labels collection."
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|internalRemoveFromClusterNodeLabels (Collection<String> labelsToRemove)
specifier|protected
name|void
name|internalRemoveFromClusterNodeLabels
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|labelsToRemove
parameter_list|)
block|{
comment|// remove labels from nodes
for|for
control|(
name|String
name|nodeName
range|:
name|nodeCollections
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|host
condition|)
block|{
name|host
operator|.
name|labels
operator|.
name|removeAll
argument_list|(
name|labelsToRemove
argument_list|)
expr_stmt|;
for|for
control|(
name|Node
name|nm
range|:
name|host
operator|.
name|nms
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|nm
operator|.
name|labels
operator|!=
literal|null
condition|)
block|{
name|nm
operator|.
name|labels
operator|.
name|removeAll
argument_list|(
name|labelsToRemove
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// remove labels from node labels collection
for|for
control|(
name|String
name|label
range|:
name|labelsToRemove
control|)
block|{
name|labelCollections
operator|.
name|remove
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
comment|// create event to remove labels
if|if
condition|(
literal|null
operator|!=
name|dispatcher
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RemoveClusterNodeLabels
argument_list|(
name|labelsToRemove
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove labels: ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|labelsToRemove
operator|.
name|iterator
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove multiple node labels from repository    *     * @param labelsToRemove    *          node labels to remove    * @throws IOException    */
DECL|method|removeFromClusterNodeLabels (Collection<String> labelsToRemove)
specifier|public
name|void
name|removeFromClusterNodeLabels
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|labelsToRemove
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRemoveFromClusterNodeLabels
argument_list|(
name|labelsToRemove
argument_list|)
expr_stmt|;
name|internalRemoveFromClusterNodeLabels
argument_list|(
name|labelsToRemove
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRemoveLabelsFromNode ( Map<NodeId, Set<String>> removeLabelsFromNode)
specifier|protected
name|void
name|checkRemoveLabelsFromNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|removeLabelsFromNode
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check all labels being added existed
name|Set
argument_list|<
name|String
argument_list|>
name|knownLabels
init|=
name|labelCollections
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|removeLabelsFromNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|knownLabels
operator|.
name|containsAll
argument_list|(
name|labels
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Not all labels being removed contained by known "
operator|+
literal|"label collections, please check"
operator|+
literal|", removed labels=["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|labels
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|originalLabels
init|=
literal|null
decl_stmt|;
name|boolean
name|nodeExisted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|WILDCARD_PORT
operator|!=
name|nodeId
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|Node
name|nm
init|=
name|getNMInNodeSet
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|!=
literal|null
condition|)
block|{
name|originalLabels
operator|=
name|nm
operator|.
name|labels
expr_stmt|;
name|nodeExisted
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|host
condition|)
block|{
name|originalLabels
operator|=
name|host
operator|.
name|labels
expr_stmt|;
name|nodeExisted
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|nodeExisted
condition|)
block|{
name|String
name|msg
init|=
literal|"Try to remove labels from NM="
operator|+
name|nodeId
operator|+
literal|", but the NM doesn't existed"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|labels
operator|==
literal|null
operator|||
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|originalLabels
operator|.
name|containsAll
argument_list|(
name|labels
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Try to remove labels = ["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|labels
argument_list|,
literal|","
argument_list|)
operator|+
literal|"], but not all labels contained by NM="
operator|+
name|nodeId
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|internalRemoveLabelsFromNode ( Map<NodeId, Set<String>> removeLabelsFromNode)
specifier|protected
name|void
name|internalRemoveLabelsFromNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|removeLabelsFromNode
parameter_list|)
block|{
comment|// do remove labels from nodes
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newNMToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|removeLabelsFromNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|getPort
argument_list|()
operator|==
name|WILDCARD_PORT
condition|)
block|{
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|host
operator|.
name|labels
operator|.
name|removeAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|newNMToLabels
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|host
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|nm
init|=
name|getNMInNodeSet
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|labels
operator|!=
literal|null
condition|)
block|{
name|nm
operator|.
name|labels
operator|.
name|removeAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|newNMToLabels
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nm
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|dispatcher
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|UpdateNodeToLabelsMappingsEvent
argument_list|(
name|newNMToLabels
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// shows node->labels we added
name|LOG
operator|.
name|info
argument_list|(
literal|"removeLabelsFromNode:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|newNMToLabels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  NM="
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", labels=["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * remove labels from nodes, labels being removed most be contained by these    * nodes    *     * @param removeLabelsFromNode node -> labels map    */
specifier|public
name|void
DECL|method|removeLabelsFromNode (Map<NodeId, Set<String>> removeLabelsFromNode)
name|removeLabelsFromNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|removeLabelsFromNode
parameter_list|)
throws|throws
name|IOException
block|{
name|checkRemoveLabelsFromNode
argument_list|(
name|removeLabelsFromNode
argument_list|)
expr_stmt|;
name|internalRemoveLabelsFromNode
argument_list|(
name|removeLabelsFromNode
argument_list|)
expr_stmt|;
block|}
DECL|method|checkReplaceLabelsOnNode ( Map<NodeId, Set<String>> replaceLabelsToNode)
specifier|protected
name|void
name|checkReplaceLabelsOnNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|replaceLabelsToNode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|replaceLabelsToNode
operator|||
name|replaceLabelsToNode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// check all labels being added existed
name|Set
argument_list|<
name|String
argument_list|>
name|knownLabels
init|=
name|labelCollections
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|replaceLabelsToNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|knownLabels
operator|.
name|containsAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Not all labels being replaced contained by known "
operator|+
literal|"label collections, please check"
operator|+
literal|", new labels=["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|internalReplaceLabelsOnNode ( Map<NodeId, Set<String>> replaceLabelsToNode)
specifier|protected
name|void
name|internalReplaceLabelsOnNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|replaceLabelsToNode
parameter_list|)
block|{
comment|// do replace labels to nodes
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|newNMToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|replaceLabelsToNode
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// update nodeCollections
name|createNodeIfNonExisted
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeId
operator|.
name|getPort
argument_list|()
operator|==
name|WILDCARD_PORT
condition|)
block|{
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|host
operator|.
name|labels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|host
operator|.
name|labels
operator|.
name|addAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|newNMToLabels
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|host
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|nm
init|=
name|getNMInNodeSet
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|labels
operator|==
literal|null
condition|)
block|{
name|nm
operator|.
name|labels
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|nm
operator|.
name|labels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nm
operator|.
name|labels
operator|.
name|addAll
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|newNMToLabels
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nm
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|dispatcher
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|UpdateNodeToLabelsMappingsEvent
argument_list|(
name|newNMToLabels
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// shows node->labels we added
name|LOG
operator|.
name|info
argument_list|(
literal|"setLabelsToNode:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|newNMToLabels
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"  NM="
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|", labels=["
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * replace labels to nodes    *     * @param replaceLabelsToNode node -> labels map    */
DECL|method|replaceLabelsOnNode (Map<NodeId, Set<String>> replaceLabelsToNode)
specifier|public
name|void
name|replaceLabelsOnNode
parameter_list|(
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|replaceLabelsToNode
parameter_list|)
throws|throws
name|IOException
block|{
name|checkReplaceLabelsOnNode
argument_list|(
name|replaceLabelsToNode
argument_list|)
expr_stmt|;
name|internalReplaceLabelsOnNode
argument_list|(
name|replaceLabelsToNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get mapping of nodes to labels    *     * @return nodes to labels map    */
DECL|method|getNodeLabels ()
specifier|public
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getNodeLabels
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Host
argument_list|>
name|entry
range|:
name|nodeCollections
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|hostName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Host
name|host
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|host
operator|.
name|nms
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodeLabels
init|=
name|getLabelsByNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLabels
operator|==
literal|null
operator|||
name|nodeLabels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|nodeToLabels
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|nodeLabels
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|host
operator|.
name|labels
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodeToLabels
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostName
argument_list|,
name|WILDCARD_PORT
argument_list|)
argument_list|,
name|host
operator|.
name|labels
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|nodeToLabels
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Get existing valid labels in repository    *     * @return existing valid labels in repository    */
DECL|method|getClusterNodeLabels ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getClusterNodeLabels
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|labelCollections
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|labels
operator|.
name|remove
argument_list|(
name|NO_LABEL
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|labels
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkAndThrowLabelName (String label)
specifier|private
name|void
name|checkAndThrowLabelName
parameter_list|(
name|String
name|label
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|label
operator|==
literal|null
operator|||
name|label
operator|.
name|isEmpty
argument_list|()
operator|||
name|label
operator|.
name|length
argument_list|()
operator|>
name|MAX_LABEL_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"label added is empty or exceeds "
operator|+
name|MAX_LABEL_LENGTH
operator|+
literal|" character(s)"
argument_list|)
throw|;
block|}
name|label
operator|=
name|label
operator|.
name|trim
argument_list|()
expr_stmt|;
name|boolean
name|match
init|=
name|LABEL_PATTERN
operator|.
name|matcher
argument_list|(
name|label
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|match
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"label name should only contains "
operator|+
literal|"{0-9, a-z, A-Z, -, _} and should not started with {-,_}"
operator|+
literal|", now it is="
operator|+
name|label
argument_list|)
throw|;
block|}
block|}
DECL|method|normalizeLabel (String label)
specifier|protected
name|String
name|normalizeLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
if|if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
return|return
name|label
operator|.
name|trim
argument_list|()
return|;
block|}
return|return
name|NO_LABEL
return|;
block|}
DECL|method|normalizeLabels (Set<String> labels)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|normalizeLabels
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|newLabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|labels
control|)
block|{
name|newLabels
operator|.
name|add
argument_list|(
name|normalizeLabel
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|newLabels
return|;
block|}
DECL|method|getNMInNodeSet (NodeId nodeId)
specifier|protected
name|Node
name|getNMInNodeSet
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|getNMInNodeSet
argument_list|(
name|nodeId
argument_list|,
name|nodeCollections
argument_list|)
return|;
block|}
DECL|method|getNMInNodeSet (NodeId nodeId, Map<String, Host> map)
specifier|protected
name|Node
name|getNMInNodeSet
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Host
argument_list|>
name|map
parameter_list|)
block|{
return|return
name|getNMInNodeSet
argument_list|(
name|nodeId
argument_list|,
name|map
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getNMInNodeSet (NodeId nodeId, Map<String, Host> map, boolean checkRunning)
specifier|protected
name|Node
name|getNMInNodeSet
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Host
argument_list|>
name|map
parameter_list|,
name|boolean
name|checkRunning
parameter_list|)
block|{
if|if
condition|(
name|WILDCARD_PORT
operator|==
name|nodeId
operator|.
name|getPort
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Host
name|host
init|=
name|map
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|host
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|nm
init|=
name|host
operator|.
name|nms
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|nm
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|checkRunning
condition|)
block|{
return|return
name|nm
operator|.
name|running
condition|?
name|nm
else|:
literal|null
return|;
block|}
return|return
name|nm
return|;
block|}
DECL|method|getLabelsByNode (NodeId nodeId)
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getLabelsByNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
return|return
name|getLabelsByNode
argument_list|(
name|nodeId
argument_list|,
name|nodeCollections
argument_list|)
return|;
block|}
DECL|method|getLabelsByNode (NodeId nodeId, Map<String, Host> map)
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getLabelsByNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Host
argument_list|>
name|map
parameter_list|)
block|{
name|Host
name|host
init|=
name|map
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|host
condition|)
block|{
return|return
name|EMPTY_STRING_SET
return|;
block|}
name|Node
name|nm
init|=
name|host
operator|.
name|nms
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|nm
operator|&&
literal|null
operator|!=
name|nm
operator|.
name|labels
condition|)
block|{
return|return
name|nm
operator|.
name|labels
return|;
block|}
else|else
block|{
return|return
name|host
operator|.
name|labels
return|;
block|}
block|}
DECL|method|createNodeIfNonExisted (NodeId nodeId)
specifier|protected
name|void
name|createNodeIfNonExisted
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|host
condition|)
block|{
name|host
operator|=
operator|new
name|Host
argument_list|()
expr_stmt|;
name|nodeCollections
operator|.
name|put
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeId
operator|.
name|getPort
argument_list|()
operator|!=
name|WILDCARD_PORT
condition|)
block|{
name|Node
name|nm
init|=
name|host
operator|.
name|nms
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|nm
condition|)
block|{
name|host
operator|.
name|nms
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
operator|new
name|Node
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

