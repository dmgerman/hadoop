begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.state
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|state
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_class
annotation|@
name|Private
DECL|class|VisualizeStateMachine
specifier|public
class|class
name|VisualizeStateMachine
block|{
comment|/**    * @param classes list of classes which have static field    *                stateMachineFactory of type StateMachineFactory    * @return graph represent this StateMachine    */
DECL|method|getGraphFromClasses (String graphName, List<String> classes)
specifier|public
specifier|static
name|Graph
name|getGraphFromClasses
parameter_list|(
name|String
name|graphName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|classes
parameter_list|)
throws|throws
name|Exception
block|{
name|Graph
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|ret
operator|=
operator|new
name|Graph
argument_list|(
name|graphName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|className
range|:
name|classes
control|)
block|{
name|Class
name|clz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
name|Field
name|factoryField
init|=
name|clz
operator|.
name|getDeclaredField
argument_list|(
literal|"stateMachineFactory"
argument_list|)
decl_stmt|;
name|factoryField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StateMachineFactory
name|factory
init|=
operator|(
name|StateMachineFactory
operator|)
name|factoryField
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|factory
operator|.
name|generateStateGraph
argument_list|(
name|graphName
argument_list|)
return|;
block|}
name|String
name|gname
init|=
name|clz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|gname
operator|.
name|endsWith
argument_list|(
literal|"Impl"
argument_list|)
condition|)
block|{
name|gname
operator|=
name|gname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|gname
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|addSubGraph
argument_list|(
name|factory
operator|.
name|generateStateGraph
argument_list|(
name|gname
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|main (String [] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|printf
argument_list|(
literal|"Usage: %s<GraphName><class[,class[,...]]><OutputFile>%n"
argument_list|,
name|VisualizeStateMachine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|classes
init|=
name|args
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|validClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|classes
control|)
block|{
name|String
name|vc
init|=
name|c
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|vc
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|validClasses
operator|.
name|add
argument_list|(
name|vc
argument_list|)
expr_stmt|;
block|}
block|}
name|Graph
name|g
init|=
name|getGraphFromClasses
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|validClasses
argument_list|)
decl_stmt|;
name|g
operator|.
name|save
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

