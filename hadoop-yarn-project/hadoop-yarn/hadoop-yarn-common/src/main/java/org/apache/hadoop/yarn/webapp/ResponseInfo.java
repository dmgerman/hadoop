begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A class to help passing around request scoped info  */
end_comment

begin_class
annotation|@
name|RequestScoped
DECL|class|ResponseInfo
specifier|public
class|class
name|ResponseInfo
implements|implements
name|Iterable
argument_list|<
name|ResponseInfo
operator|.
name|Item
argument_list|>
block|{
DECL|class|Item
specifier|public
specifier|static
class|class
name|Item
block|{
DECL|field|key
specifier|public
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|url
specifier|public
specifier|final
name|String
name|url
decl_stmt|;
DECL|field|value
specifier|public
specifier|final
name|Object
name|value
decl_stmt|;
DECL|field|isRaw
specifier|public
specifier|final
name|boolean
name|isRaw
decl_stmt|;
DECL|method|Item (String key, String url, Object value, boolean isRaw)
name|Item
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|url
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isRaw
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|isRaw
operator|=
name|isRaw
expr_stmt|;
block|}
DECL|method|of (String key, Object value, boolean isRaw)
specifier|public
specifier|static
name|Item
name|of
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|isRaw
parameter_list|)
block|{
return|return
operator|new
name|Item
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|value
argument_list|,
name|isRaw
argument_list|)
return|;
block|}
DECL|method|of (String key, String url, Object value)
specifier|public
specifier|static
name|Item
name|of
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|url
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|Item
argument_list|(
name|key
argument_list|,
name|url
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
DECL|field|items
specifier|final
name|List
argument_list|<
name|Item
argument_list|>
name|items
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|field|about
name|String
name|about
init|=
literal|"Info"
decl_stmt|;
comment|// Do NOT add any constructors here, unless...
DECL|method|$about (String about)
specifier|public
specifier|static
name|ResponseInfo
name|$about
parameter_list|(
name|String
name|about
parameter_list|)
block|{
name|ResponseInfo
name|info
init|=
operator|new
name|ResponseInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|about
operator|=
name|about
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|about (String about)
specifier|public
name|ResponseInfo
name|about
parameter_list|(
name|String
name|about
parameter_list|)
block|{
name|this
operator|.
name|about
operator|=
name|about
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|about ()
specifier|public
name|String
name|about
parameter_list|()
block|{
return|return
name|about
return|;
block|}
DECL|method|_ (String key, Object value)
specifier|public
name|ResponseInfo
name|_
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|items
operator|.
name|add
argument_list|(
name|Item
operator|.
name|of
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|_ (String key, String url, Object anchor)
specifier|public
name|ResponseInfo
name|_
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|url
parameter_list|,
name|Object
name|anchor
parameter_list|)
block|{
name|items
operator|.
name|add
argument_list|(
name|Item
operator|.
name|of
argument_list|(
name|key
argument_list|,
name|url
argument_list|,
name|anchor
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|//Value is raw HTML and shouldn't be escaped
DECL|method|_r (String key, Object value)
specifier|public
name|ResponseInfo
name|_r
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|items
operator|.
name|add
argument_list|(
name|Item
operator|.
name|of
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|items
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Item
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|items
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
end_class

end_unit

