begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Flushable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntityGroupId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineDomain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelinePutResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
operator|.
name|TimelineClientImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_comment
comment|/**  * A client library that can be used to post some information in terms of a  * number of conceptual entities.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Evolving
DECL|class|TimelineClient
specifier|public
specifier|abstract
class|class
name|TimelineClient
extends|extends
name|AbstractService
implements|implements
name|Flushable
block|{
comment|/**    * Create a timeline client. The current UGI when the user initialize the    * client will be used to do the put and the delegation token operations. The    * current user may use {@link UserGroupInformation#doAs} another user to    * construct and initialize a timeline client if the following operations are    * supposed to be conducted by that user.    */
DECL|field|contextAppId
specifier|private
name|ApplicationId
name|contextAppId
decl_stmt|;
comment|/**    * Creates an instance of the timeline v.1.x client.    */
annotation|@
name|Public
DECL|method|createTimelineClient ()
specifier|public
specifier|static
name|TimelineClient
name|createTimelineClient
parameter_list|()
block|{
name|TimelineClient
name|client
init|=
operator|new
name|TimelineClientImpl
argument_list|()
decl_stmt|;
return|return
name|client
return|;
block|}
comment|/**    * Creates an instance of the timeline v.2 client.    */
annotation|@
name|Public
DECL|method|createTimelineClient (ApplicationId appId)
specifier|public
specifier|static
name|TimelineClient
name|createTimelineClient
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|TimelineClient
name|client
init|=
operator|new
name|TimelineClientImpl
argument_list|(
name|appId
argument_list|)
decl_stmt|;
return|return
name|client
return|;
block|}
annotation|@
name|Private
DECL|method|TimelineClient (String name, ApplicationId appId)
specifier|protected
name|TimelineClient
parameter_list|(
name|String
name|name
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|setContextAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
comment|/**    *<p>    * Send the information of a number of conceptual entities to the timeline    * server. It is a blocking API. The method will not return until it gets the    * response from the timeline server.    *</p>    *     * @param entities    *          the collection of {@link TimelineEntity}    * @return the error information if the sent entities are not correctly stored    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|putEntities ( TimelineEntity... entities)
specifier|public
specifier|abstract
name|TimelinePutResponse
name|putEntities
parameter_list|(
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Send the information of a number of conceptual entities to the timeline    * server. It is a blocking API. The method will not return until it gets the    * response from the timeline server.    *    * This API is only for timeline service v1.5    *</p>    *    * @param appAttemptId {@link ApplicationAttemptId}    * @param groupId {@link TimelineEntityGroupId}    * @param entities    *          the collection of {@link TimelineEntity}    * @return the error information if the sent entities are not correctly stored    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|putEntities ( ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities)
specifier|public
specifier|abstract
name|TimelinePutResponse
name|putEntities
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineEntityGroupId
name|groupId
parameter_list|,
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Send the information of a domain to the timeline server. It is a    * blocking API. The method will not return until it gets the response from    * the timeline server.    *</p>    *     * @param domain    *          an {@link TimelineDomain} object    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|putDomain ( TimelineDomain domain)
specifier|public
specifier|abstract
name|void
name|putDomain
parameter_list|(
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Send the information of a domain to the timeline server. It is a    * blocking API. The method will not return until it gets the response from    * the timeline server.    *    * This API is only for timeline service v1.5    *</p>    *    * @param domain    *          an {@link TimelineDomain} object    * @param appAttemptId {@link ApplicationAttemptId}    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|putDomain (ApplicationAttemptId appAttemptId, TimelineDomain domain)
specifier|public
specifier|abstract
name|void
name|putDomain
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|TimelineDomain
name|domain
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Get a delegation token so as to be able to talk to the timeline server in a    * secure way.    *</p>    *     * @param renewer    *          Address of the renewer who can renew these tokens when needed by    *          securely talking to the timeline server    * @return a delegation token ({@link Token}) that can be used to talk to the    *         timeline server    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|getDelegationToken ( String renewer)
specifier|public
specifier|abstract
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Renew a timeline delegation token.    *</p>    *     * @param timelineDT    *          the delegation token to renew    * @return the new expiration time    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|renewDelegationToken ( Token<TimelineDelegationTokenIdentifier> timelineDT)
specifier|public
specifier|abstract
name|long
name|renewDelegationToken
parameter_list|(
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|timelineDT
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Cancel a timeline delegation token.    *</p>    *     * @param timelineDT    *          the delegation token to cancel    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|cancelDelegationToken ( Token<TimelineDelegationTokenIdentifier> timelineDT)
specifier|public
specifier|abstract
name|void
name|cancelDelegationToken
parameter_list|(
name|Token
argument_list|<
name|TimelineDelegationTokenIdentifier
argument_list|>
name|timelineDT
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Send the information of a number of conceptual entities to the timeline    * service v.2 collector. It is a blocking API. The method will not return    * until all the put entities have been persisted. If this method is invoked    * for a non-v.2 timeline client instance, a YarnException is thrown.    *</p>    *    * @param entities    *          the collection of {@link org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity}    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|putEntities ( org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity... entities)
specifier|public
specifier|abstract
name|void
name|putEntities
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Send the information of a number of conceptual entities to the timeline    * service v.2 collector. It is an asynchronous API. The method will return    * once all the entities are received. If this method is invoked for a    * non-v.2 timeline client instance, a YarnException is thrown.    *</p>    *    * @param entities    *          the collection of {@link org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity}    * @throws IOException    * @throws YarnException    */
annotation|@
name|Public
DECL|method|putEntitiesAsync ( org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity... entities)
specifier|public
specifier|abstract
name|void
name|putEntitiesAsync
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
modifier|...
name|entities
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
function_decl|;
comment|/**    *<p>    * Update the timeline service address where the request will be sent to.    *</p>    * @param address    *          the timeline service address    */
DECL|method|setTimelineServiceAddress (String address)
specifier|public
specifier|abstract
name|void
name|setTimelineServiceAddress
parameter_list|(
name|String
name|address
parameter_list|)
function_decl|;
DECL|method|getContextAppId ()
specifier|protected
name|ApplicationId
name|getContextAppId
parameter_list|()
block|{
return|return
name|contextAppId
return|;
block|}
DECL|method|setContextAppId (ApplicationId appId)
specifier|protected
name|void
name|setContextAppId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|this
operator|.
name|contextAppId
operator|=
name|appId
expr_stmt|;
block|}
block|}
end_class

end_unit

