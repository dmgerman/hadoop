begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.view
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|ResponseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|JQueryUI
operator|.
name|*
import|;
end_import

begin_class
DECL|class|InfoBlock
specifier|public
class|class
name|InfoBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|info
specifier|final
name|ResponseInfo
name|info
decl_stmt|;
DECL|method|InfoBlock (ResponseInfo info)
annotation|@
name|Inject
name|InfoBlock
parameter_list|(
name|ResponseInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|render (Block html)
annotation|@
name|Override
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
name|table
init|=
name|html
operator|.
name|div
argument_list|(
name|_INFO_WRAP
argument_list|)
operator|.
name|table
argument_list|(
name|_INFO
argument_list|)
operator|.
name|tr
argument_list|()
operator|.
name|th
argument_list|()
operator|.
name|$class
argument_list|(
name|C_TH
argument_list|)
operator|.
name|$colspan
argument_list|(
literal|2
argument_list|)
operator|.
name|_
argument_list|(
name|info
operator|.
name|about
argument_list|()
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResponseInfo
operator|.
name|Item
name|item
range|:
name|info
control|)
block|{
name|TR
argument_list|<
name|TABLE
argument_list|<
name|DIV
argument_list|<
name|Hamlet
argument_list|>
argument_list|>
argument_list|>
name|tr
init|=
name|table
operator|.
name|tr
argument_list|(
operator|(
operator|++
name|i
operator|%
literal|2
operator|!=
literal|0
operator|)
condition|?
name|_ODD
else|:
name|_EVEN
argument_list|)
operator|.
name|th
argument_list|(
name|item
operator|.
name|key
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|item
operator|.
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|url
operator|==
literal|null
condition|)
block|{
name|tr
operator|.
name|td
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tr
operator|.
name|td
argument_list|()
operator|.
name|a
argument_list|(
name|url
argument_list|(
name|item
operator|.
name|url
argument_list|)
argument_list|,
name|value
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|tr
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

