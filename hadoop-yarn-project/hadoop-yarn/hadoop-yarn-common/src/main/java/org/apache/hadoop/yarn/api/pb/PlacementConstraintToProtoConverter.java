begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeOpCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|AbstractConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|And
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|CardinalityConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|CompositeConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|DelayedOr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|Or
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|SingleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TargetConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TargetExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|TimedPlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|CompositePlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|CompositePlacementConstraintProto
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|NodeAttributeOpCodeProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|PlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|PlacementConstraintTargetProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|SimplePlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|TimedPlacementConstraintProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessage
import|;
end_import

begin_comment
comment|/**  * {@code PlacementConstraintToProtoConverter} generates a  * {@link PlacementConstraintProto} given a  * {@link PlacementConstraint.AbstractConstraint}.  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|PlacementConstraintToProtoConverter
specifier|public
class|class
name|PlacementConstraintToProtoConverter
implements|implements
name|PlacementConstraint
operator|.
name|Visitor
argument_list|<
name|GeneratedMessage
argument_list|>
block|{
DECL|field|placementConstraint
specifier|private
name|PlacementConstraint
name|placementConstraint
decl_stmt|;
DECL|method|PlacementConstraintToProtoConverter ( PlacementConstraint placementConstraint)
specifier|public
name|PlacementConstraintToProtoConverter
parameter_list|(
name|PlacementConstraint
name|placementConstraint
parameter_list|)
block|{
name|this
operator|.
name|placementConstraint
operator|=
name|placementConstraint
expr_stmt|;
block|}
DECL|method|convert ()
specifier|public
name|PlacementConstraintProto
name|convert
parameter_list|()
block|{
return|return
operator|(
name|PlacementConstraintProto
operator|)
name|placementConstraint
operator|.
name|getConstraintExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visit (SingleConstraint constraint)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|SingleConstraint
name|constraint
parameter_list|)
block|{
name|SimplePlacementConstraintProto
operator|.
name|Builder
name|sb
init|=
name|SimplePlacementConstraintProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|.
name|getScope
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|setScope
argument_list|(
name|constraint
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|setMinCardinality
argument_list|(
name|constraint
operator|.
name|getMinCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|setMaxCardinality
argument_list|(
name|constraint
operator|.
name|getMaxCardinality
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|constraint
operator|.
name|getNodeAttributeOpCode
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|setAttributeOpCode
argument_list|(
name|convertToProtoFormat
argument_list|(
name|constraint
operator|.
name|getNodeAttributeOpCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|constraint
operator|.
name|getTargetExpressions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TargetExpression
name|target
range|:
name|constraint
operator|.
name|getTargetExpressions
argument_list|()
control|)
block|{
name|sb
operator|.
name|addTargetExpressions
argument_list|(
operator|(
name|PlacementConstraintTargetProto
operator|)
name|target
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SimplePlacementConstraintProto
name|sProto
init|=
name|sb
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Wrap around PlacementConstraintProto object.
name|PlacementConstraintProto
operator|.
name|Builder
name|pb
init|=
name|PlacementConstraintProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|pb
operator|.
name|setSimpleConstraint
argument_list|(
name|sProto
argument_list|)
expr_stmt|;
return|return
name|pb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|visit (TargetExpression target)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|TargetExpression
name|target
parameter_list|)
block|{
name|PlacementConstraintTargetProto
operator|.
name|Builder
name|tb
init|=
name|PlacementConstraintTargetProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|tb
operator|.
name|setTargetType
argument_list|(
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|target
operator|.
name|getTargetType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|.
name|getTargetKey
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tb
operator|.
name|setTargetKey
argument_list|(
name|target
operator|.
name|getTargetKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|.
name|getTargetValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tb
operator|.
name|addAllTargetValues
argument_list|(
name|target
operator|.
name|getTargetValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|visit (TargetConstraint constraint)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|TargetConstraint
name|constraint
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unexpected TargetConstraint found."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|visit (CardinalityConstraint constraint)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|CardinalityConstraint
name|constraint
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unexpected CardinalityConstraint found."
argument_list|)
throw|;
block|}
DECL|method|visitAndOr ( CompositeConstraint<AbstractConstraint> composite, CompositeType type)
specifier|private
name|GeneratedMessage
name|visitAndOr
parameter_list|(
name|CompositeConstraint
argument_list|<
name|AbstractConstraint
argument_list|>
name|composite
parameter_list|,
name|CompositeType
name|type
parameter_list|)
block|{
name|CompositePlacementConstraintProto
operator|.
name|Builder
name|cb
init|=
name|CompositePlacementConstraintProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setCompositeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|AbstractConstraint
name|c
range|:
name|composite
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|cb
operator|.
name|addChildConstraints
argument_list|(
operator|(
name|PlacementConstraintProto
operator|)
name|c
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CompositePlacementConstraintProto
name|cProto
init|=
name|cb
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Wrap around PlacementConstraintProto object.
name|PlacementConstraintProto
operator|.
name|Builder
name|pb
init|=
name|PlacementConstraintProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|pb
operator|.
name|setCompositeConstraint
argument_list|(
name|cProto
argument_list|)
expr_stmt|;
return|return
name|pb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|visit (And constraint)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|And
name|constraint
parameter_list|)
block|{
return|return
name|visitAndOr
argument_list|(
name|constraint
argument_list|,
name|CompositeType
operator|.
name|AND
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visit (Or constraint)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|Or
name|constraint
parameter_list|)
block|{
return|return
name|visitAndOr
argument_list|(
name|constraint
argument_list|,
name|CompositeType
operator|.
name|OR
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|visit (DelayedOr constraint)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|DelayedOr
name|constraint
parameter_list|)
block|{
name|CompositePlacementConstraintProto
operator|.
name|Builder
name|cb
init|=
name|CompositePlacementConstraintProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|cb
operator|.
name|setCompositeType
argument_list|(
name|CompositeType
operator|.
name|DELAYED_OR
argument_list|)
expr_stmt|;
for|for
control|(
name|TimedPlacementConstraint
name|c
range|:
name|constraint
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|cb
operator|.
name|addTimedChildConstraints
argument_list|(
operator|(
name|TimedPlacementConstraintProto
operator|)
name|c
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CompositePlacementConstraintProto
name|cProto
init|=
name|cb
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Wrap around PlacementConstraintProto object.
name|PlacementConstraintProto
operator|.
name|Builder
name|pb
init|=
name|PlacementConstraintProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|pb
operator|.
name|setCompositeConstraint
argument_list|(
name|cProto
argument_list|)
expr_stmt|;
return|return
name|pb
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|visit (TimedPlacementConstraint constraint)
specifier|public
name|GeneratedMessage
name|visit
parameter_list|(
name|TimedPlacementConstraint
name|constraint
parameter_list|)
block|{
name|TimedPlacementConstraintProto
operator|.
name|Builder
name|tb
init|=
name|TimedPlacementConstraintProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|tb
operator|.
name|setDelayUnit
argument_list|(
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|constraint
operator|.
name|getDelayUnit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|.
name|setSchedulingDelay
argument_list|(
name|constraint
operator|.
name|getSchedulingDelay
argument_list|()
argument_list|)
expr_stmt|;
name|tb
operator|.
name|setPlacementConstraint
argument_list|(
operator|(
name|PlacementConstraintProto
operator|)
name|constraint
operator|.
name|getConstraint
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tb
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|convertToProtoFormat ( NodeAttributeOpCode p)
specifier|private
specifier|static
name|NodeAttributeOpCodeProto
name|convertToProtoFormat
parameter_list|(
name|NodeAttributeOpCode
name|p
parameter_list|)
block|{
return|return
name|NodeAttributeOpCodeProto
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

