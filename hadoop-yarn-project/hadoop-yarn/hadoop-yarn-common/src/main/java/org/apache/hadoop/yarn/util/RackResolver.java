begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|CachedDNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|ScriptBasedMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"YARN"
block|,
literal|"MAPREDUCE"
block|}
argument_list|)
DECL|class|RackResolver
specifier|public
class|class
name|RackResolver
block|{
DECL|field|dnsToSwitchMapping
specifier|private
specifier|static
name|DNSToSwitchMapping
name|dnsToSwitchMapping
decl_stmt|;
DECL|field|initCalled
specifier|private
specifier|static
name|boolean
name|initCalled
init|=
literal|false
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RackResolver
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|init (Configuration conf)
specifier|public
specifier|synchronized
specifier|static
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|initCalled
condition|)
block|{
return|return;
block|}
else|else
block|{
name|initCalled
operator|=
literal|true
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|DNSToSwitchMapping
argument_list|>
name|dnsToSwitchMappingClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY
argument_list|,
name|ScriptBasedMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|DNSToSwitchMapping
name|newInstance
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|dnsToSwitchMappingClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Wrap around the configured class with the Cached implementation so as
comment|// to save on repetitive lookups.
comment|// Check if the impl is already caching, to avoid double caching.
name|dnsToSwitchMapping
operator|=
operator|(
operator|(
name|newInstance
operator|instanceof
name|CachedDNSToSwitchMapping
operator|)
condition|?
name|newInstance
else|:
operator|new
name|CachedDNSToSwitchMapping
argument_list|(
name|newInstance
argument_list|)
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Utility method for getting a hostname resolved to a node in the    * network topology. This method initializes the class with the     * right resolver implementation.    * @param conf    * @param hostName    * @return node {@link Node} after resolving the hostname    */
DECL|method|resolve (Configuration conf, String hostName)
specifier|public
specifier|static
name|Node
name|resolve
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|hostName
parameter_list|)
block|{
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|coreResolve
argument_list|(
name|hostName
argument_list|)
return|;
block|}
comment|/**    * Utility method for getting a hostname resolved to a node in the    * network topology. This method doesn't initialize the class.    * Call {@link #init(Configuration)} explicitly.    * @param hostName    * @return node {@link Node} after resolving the hostname    */
DECL|method|resolve (String hostName)
specifier|public
specifier|static
name|Node
name|resolve
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|initCalled
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"RackResolver class not yet initialized"
argument_list|)
throw|;
block|}
return|return
name|coreResolve
argument_list|(
name|hostName
argument_list|)
return|;
block|}
DECL|method|coreResolve (String hostName)
specifier|private
specifier|static
name|Node
name|coreResolve
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tmpList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|tmpList
operator|.
name|add
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rNameList
init|=
name|dnsToSwitchMapping
operator|.
name|resolve
argument_list|(
name|tmpList
argument_list|)
decl_stmt|;
name|String
name|rName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rNameList
operator|==
literal|null
operator|||
name|rNameList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
condition|)
block|{
name|rName
operator|=
name|NetworkTopology
operator|.
name|DEFAULT_RACK
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't resolve "
operator|+
name|hostName
operator|+
literal|". Falling back to "
operator|+
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rName
operator|=
name|rNameList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolved "
operator|+
name|hostName
operator|+
literal|" to "
operator|+
name|rName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|NodeBase
argument_list|(
name|hostName
argument_list|,
name|rName
argument_list|)
return|;
block|}
comment|/**    * Only used by tests    */
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|getDnsToSwitchMapping ()
specifier|static
name|DNSToSwitchMapping
name|getDnsToSwitchMapping
parameter_list|()
block|{
return|return
name|dnsToSwitchMapping
return|;
block|}
block|}
end_class

end_unit

