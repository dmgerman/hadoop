begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
import|;
end_import

begin_comment
comment|/**  * Implementation of<code>UpdateContainerRequest</code>.  */
end_comment

begin_class
DECL|class|UpdateContainerRequestPBImpl
specifier|public
class|class
name|UpdateContainerRequestPBImpl
extends|extends
name|UpdateContainerRequest
block|{
DECL|field|proto
specifier|private
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProto
name|proto
init|=
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
specifier|private
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
specifier|private
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|existingContainerId
specifier|private
name|ContainerId
name|existingContainerId
init|=
literal|null
decl_stmt|;
DECL|field|targetCapability
specifier|private
name|Resource
name|targetCapability
init|=
literal|null
decl_stmt|;
DECL|method|UpdateContainerRequestPBImpl ()
specifier|public
name|UpdateContainerRequestPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|UpdateContainerRequestPBImpl (YarnServiceProtos .UpdateContainerRequestProto proto)
specifier|public
name|UpdateContainerRequestPBImpl
parameter_list|(
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
annotation|@
name|Override
DECL|method|getContainerVersion ()
specifier|public
name|int
name|getContainerVersion
parameter_list|()
block|{
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasContainerVersion
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|p
operator|.
name|getContainerVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setContainerVersion (int containerVersion)
specifier|public
name|void
name|setContainerVersion
parameter_list|(
name|int
name|containerVersion
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setContainerVersion
argument_list|(
name|containerVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContainerId ()
specifier|public
name|ContainerId
name|getContainerId
parameter_list|()
block|{
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|existingContainerId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|existingContainerId
return|;
block|}
if|if
condition|(
name|p
operator|.
name|hasContainerId
argument_list|()
condition|)
block|{
name|this
operator|.
name|existingContainerId
operator|=
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|existingContainerId
return|;
block|}
annotation|@
name|Override
DECL|method|setContainerId (ContainerId containerId)
specifier|public
name|void
name|setContainerId
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|containerId
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearContainerId
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|existingContainerId
operator|=
name|containerId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCapability ()
specifier|public
name|Resource
name|getCapability
parameter_list|()
block|{
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|targetCapability
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|targetCapability
return|;
block|}
if|if
condition|(
name|p
operator|.
name|hasCapability
argument_list|()
condition|)
block|{
name|this
operator|.
name|targetCapability
operator|=
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|targetCapability
return|;
block|}
annotation|@
name|Override
DECL|method|setCapability (Resource capability)
specifier|public
name|void
name|setCapability
parameter_list|(
name|Resource
name|capability
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|capability
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearCapability
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|targetCapability
operator|=
name|capability
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getExecutionType ()
specifier|public
name|ExecutionType
name|getExecutionType
parameter_list|()
block|{
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasExecutionType
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getExecutionType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setExecutionType (ExecutionType execType)
specifier|public
name|void
name|setExecutionType
parameter_list|(
name|ExecutionType
name|execType
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|execType
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearExecutionType
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setExecutionType
argument_list|(
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|execType
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getContainerUpdateType ()
specifier|public
name|ContainerUpdateType
name|getContainerUpdateType
parameter_list|()
block|{
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasUpdateType
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getUpdateType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setContainerUpdateType (ContainerUpdateType updateType)
specifier|public
name|void
name|setContainerUpdateType
parameter_list|(
name|ContainerUpdateType
name|updateType
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|updateType
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearUpdateType
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setUpdateType
argument_list|(
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|updateType
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
block|}
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|YarnServiceProtos
operator|.
name|UpdateContainerRequestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|existingContainerId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setContainerId
argument_list|(
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|existingContainerId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|targetCapability
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setCapability
argument_list|(
name|ProtoUtils
operator|.
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|targetCapability
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

