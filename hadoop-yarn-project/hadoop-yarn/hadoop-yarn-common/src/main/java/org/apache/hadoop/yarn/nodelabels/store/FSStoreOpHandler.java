begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.nodelabels.store
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|FSStoreOpHandler
operator|.
name|StoreType
operator|.
name|NODE_LABEL_STORE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|op
operator|.
name|AddClusterLabelOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|op
operator|.
name|FSNodeStoreLogOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|op
operator|.
name|NodeLabelMirrorOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|op
operator|.
name|NodeToLabelOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|store
operator|.
name|op
operator|.
name|RemoveClusterLabelOp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * File system store op handler.  */
end_comment

begin_class
DECL|class|FSStoreOpHandler
specifier|public
class|class
name|FSStoreOpHandler
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|StoreType
argument_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FSNodeStoreLogOp
argument_list|>
argument_list|>
argument_list|>
DECL|field|editLogOp
name|editLogOp
decl_stmt|;
DECL|field|mirrorOp
specifier|private
specifier|static
name|Map
argument_list|<
name|StoreType
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FSNodeStoreLogOp
argument_list|>
argument_list|>
name|mirrorOp
decl_stmt|;
DECL|enum|StoreType
specifier|public
enum|enum
name|StoreType
block|{
DECL|enumConstant|NODE_LABEL_STORE
name|NODE_LABEL_STORE
block|,
DECL|enumConstant|NODE_LABEL_ATTRIBUTE
name|NODE_LABEL_ATTRIBUTE
block|;   }
static|static
block|{
name|editLogOp
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|mirrorOp
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
comment|// registerLog edit log operation
name|registerLog
argument_list|(
name|NODE_LABEL_STORE
argument_list|,
name|AddClusterLabelOp
operator|.
name|OPCODE
argument_list|,
name|AddClusterLabelOp
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerLog
argument_list|(
name|NODE_LABEL_STORE
argument_list|,
name|NodeToLabelOp
operator|.
name|OPCODE
argument_list|,
name|NodeToLabelOp
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerLog
argument_list|(
name|NODE_LABEL_STORE
argument_list|,
name|RemoveClusterLabelOp
operator|.
name|OPCODE
argument_list|,
name|RemoveClusterLabelOp
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// registerLog Mirror op
name|registerMirror
argument_list|(
name|NODE_LABEL_STORE
argument_list|,
name|NodeLabelMirrorOp
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|registerMirror (StoreType type, Class<? extends FSNodeStoreLogOp> clazz)
specifier|private
specifier|static
name|void
name|registerMirror
parameter_list|(
name|StoreType
name|type
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FSNodeStoreLogOp
argument_list|>
name|clazz
parameter_list|)
block|{
name|mirrorOp
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|registerLog (StoreType type, int opcode, Class<? extends FSNodeStoreLogOp> clazz)
specifier|private
specifier|static
name|void
name|registerLog
parameter_list|(
name|StoreType
name|type
parameter_list|,
name|int
name|opcode
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FSNodeStoreLogOp
argument_list|>
name|clazz
parameter_list|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FSNodeStoreLogOp
argument_list|>
argument_list|>
name|ops
init|=
name|editLogOp
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Integer
name|code
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|opcode
argument_list|)
decl_stmt|;
if|if
condition|(
name|ops
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FSNodeStoreLogOp
argument_list|>
argument_list|>
name|newOps
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|newOps
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|editLogOp
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|newOps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ops
operator|.
name|put
argument_list|(
name|code
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get mirror operation of store Type.    *    * @param storeType    * @return instance of FSNodeStoreLogOp.    */
DECL|method|getMirrorOp (StoreType storeType)
specifier|public
specifier|static
name|FSNodeStoreLogOp
name|getMirrorOp
parameter_list|(
name|StoreType
name|storeType
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|mirrorOp
operator|.
name|get
argument_list|(
name|storeType
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Will return StoreOp instance basead on opCode and StoreType.    * @param opCode    * @param storeType    * @return instance of FSNodeStoreLogOp.    */
DECL|method|get (int opCode, StoreType storeType)
specifier|public
specifier|static
name|FSNodeStoreLogOp
name|get
parameter_list|(
name|int
name|opCode
parameter_list|,
name|StoreType
name|storeType
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|editLogOp
operator|.
name|get
argument_list|(
name|storeType
argument_list|)
operator|.
name|get
argument_list|(
name|opCode
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newInstance (Class<T> clazz)
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|FSNodeStoreLogOp
parameter_list|>
name|T
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|FSNodeStoreLogOp
name|instance
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|instance
operator|=
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to instantiate "
operator|+
name|clazz
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|T
operator|)
name|instance
return|;
block|}
block|}
end_class

end_unit

