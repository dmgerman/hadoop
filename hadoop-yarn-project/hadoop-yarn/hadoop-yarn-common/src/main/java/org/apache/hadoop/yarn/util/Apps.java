begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|_split
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|sjoin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_comment
comment|/**  * YARN internal application-related utilities  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|Apps
specifier|public
class|class
name|Apps
block|{
DECL|field|APP
specifier|public
specifier|static
specifier|final
name|String
name|APP
init|=
literal|"application"
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"ID"
decl_stmt|;
DECL|field|VAR_SUBBER
specifier|private
specifier|static
specifier|final
name|Pattern
name|VAR_SUBBER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Shell
operator|.
name|getEnvironmentVariableRegex
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|VARVAL_SPLITTER
specifier|private
specifier|static
specifier|final
name|Pattern
name|VARVAL_SPLITTER
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(?<=^|,)"
comment|// preceded by ',' or line begin
operator|+
literal|'('
operator|+
name|Shell
operator|.
name|ENV_NAME_REGEX
operator|+
literal|')'
comment|// var group
operator|+
literal|'='
operator|+
literal|"([^,]*)"
comment|// val group
argument_list|)
decl_stmt|;
DECL|method|toAppID (String aid)
specifier|public
specifier|static
name|ApplicationId
name|toAppID
parameter_list|(
name|String
name|aid
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|_split
argument_list|(
name|aid
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|toAppID
argument_list|(
name|APP
argument_list|,
name|aid
argument_list|,
name|it
argument_list|)
return|;
block|}
DECL|method|toAppID (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|ApplicationId
name|toAppID
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
operator|!
name|it
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|throwParseException
argument_list|(
name|sjoin
argument_list|(
name|prefix
argument_list|,
name|ID
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|shouldHaveNext
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|shouldHaveNext (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|void
name|shouldHaveNext
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|throwParseException
argument_list|(
name|sjoin
argument_list|(
name|prefix
argument_list|,
name|ID
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|throwParseException (String name, String s)
specifier|public
specifier|static
name|void
name|throwParseException
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|join
argument_list|(
literal|"Error parsing "
argument_list|,
name|name
argument_list|,
literal|": "
argument_list|,
name|s
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|setEnvFromString (Map<String, String> env, String envVar, String varString, String classPathSeparator)
specifier|private
specifier|static
name|void
name|setEnvFromString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
name|envVar
parameter_list|,
name|String
name|varString
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|VAR_SUBBER
operator|.
name|matcher
argument_list|(
name|varString
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|var
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// do variable substitution of $var from passed in environment or from
comment|// system environment and default to empty string if undefined in both.
name|String
name|replace
init|=
name|env
operator|.
name|get
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|replace
operator|==
literal|null
condition|)
block|{
name|replace
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replace
operator|==
literal|null
condition|)
block|{
name|replace
operator|=
literal|""
expr_stmt|;
block|}
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|replace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|addToEnvironment
argument_list|(
name|env
argument_list|,
name|envVar
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
DECL|method|setEnvFromInputString (Map<String, String> env, String envString, String classPathSeparator)
specifier|public
specifier|static
name|void
name|setEnvFromInputString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
name|envString
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
if|if
condition|(
name|envString
operator|!=
literal|null
operator|&&
name|envString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Matcher
name|varValMatcher
init|=
name|VARVAL_SPLITTER
operator|.
name|matcher
argument_list|(
name|envString
argument_list|)
decl_stmt|;
while|while
condition|(
name|varValMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|envVar
init|=
name|varValMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|varString
init|=
name|varValMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|setEnvFromString
argument_list|(
name|env
argument_list|,
name|envVar
argument_list|,
name|varString
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set environment from string without doing any variable substitution.    * Used internally to avoid double expansion.    * @param env environment to set    * @param envString comma-separated k=v pairs.    * @param classPathSeparator Separator to use when appending to an existing    *                           environment variable.    */
DECL|method|setEnvFromInputStringNoExpand (Map<String, String> env, String envString, String classPathSeparator)
specifier|private
specifier|static
name|void
name|setEnvFromInputStringNoExpand
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
name|envString
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
if|if
condition|(
name|envString
operator|!=
literal|null
operator|&&
name|envString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Matcher
name|varValMatcher
init|=
name|VARVAL_SPLITTER
operator|.
name|matcher
argument_list|(
name|envString
argument_list|)
decl_stmt|;
while|while
condition|(
name|varValMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|envVar
init|=
name|varValMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|varString
init|=
name|varValMatcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|addToEnvironment
argument_list|(
name|env
argument_list|,
name|envVar
argument_list|,
name|varString
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set environment variables from map of input properties.    * @param env environment to update    * @param inputMap environment variable property keys and values    * @param classPathSeparator separator to use when appending to an existing    *                           environment variable    */
DECL|method|setEnvFromInputStringMap (Map<String, String> env, Map<String, String> inputMap, String classPathSeparator)
specifier|private
specifier|static
name|void
name|setEnvFromInputStringMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inputMap
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inputVar
range|:
name|inputMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|envVar
init|=
name|inputVar
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|varString
init|=
name|inputVar
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|setEnvFromString
argument_list|(
name|env
argument_list|,
name|envVar
argument_list|,
name|varString
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set environment variables from the given environment input property.    * For example, given the property mapreduce.map.env, this method    * will extract environment variables from:    *    the comma-separated string value of mapreduce.map.env, and    *    the values of any properties of the form mapreduce.map.env.VAR_NAME    * Variables specified via the latter syntax take precedence over those    * specified using the former syntax.    * @param env the environment to update    * @param propName the name of the property    * @param defaultPropValue the default value for propName    * @param conf configuration containing properties    * @param classPathSeparator Separator used when appending to an existing var    */
DECL|method|setEnvFromInputProperty (Map<String, String> env, String propName, String defaultPropValue, Configuration conf, String classPathSeparator)
specifier|public
specifier|static
name|void
name|setEnvFromInputProperty
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|defaultPropValue
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
name|String
name|envString
init|=
name|conf
operator|.
name|get
argument_list|(
name|propName
argument_list|,
name|defaultPropValue
argument_list|)
decl_stmt|;
comment|// Get k,v pairs from string into a tmp env. Note that we don't want
comment|// to expand the env var values, because we will do that below -
comment|// don't want to do it twice.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tmpEnv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Apps
operator|.
name|setEnvFromInputStringNoExpand
argument_list|(
name|tmpEnv
argument_list|,
name|envString
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
comment|// Get map of props with prefix propName.
comment|// (e.g., map.reduce.env.ENV_VAR_NAME=value)
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inputMap
init|=
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|propName
operator|+
literal|"."
argument_list|)
decl_stmt|;
comment|// Entries from map should override entries from input string.
name|tmpEnv
operator|.
name|putAll
argument_list|(
name|inputMap
argument_list|)
expr_stmt|;
comment|// Add them to the environment
name|setEnvFromInputStringMap
argument_list|(
name|env
argument_list|,
name|tmpEnv
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param envString String containing env variable definitions    * @return Set of environment variable names    */
DECL|method|getEnvVarsFromInputString (String envString)
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getEnvVarsFromInputString
parameter_list|(
name|String
name|envString
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|envSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|envString
operator|!=
literal|null
operator|&&
name|envString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Matcher
name|varValMatcher
init|=
name|VARVAL_SPLITTER
operator|.
name|matcher
argument_list|(
name|envString
argument_list|)
decl_stmt|;
while|while
condition|(
name|varValMatcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|envVar
init|=
name|varValMatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|envSet
operator|.
name|add
argument_list|(
name|envVar
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|envSet
return|;
block|}
comment|/**    * Return the list of environment variable names specified in the    * given property or default string and those specified individually    * with the propname.VARNAME syntax (e.g., mapreduce.map.env.VARNAME=value).    * @param propName the name of the property    * @param defaultPropValue the default value for propName    * @param conf configuration containing properties    * @return Set of environment variable names    */
DECL|method|getEnvVarsFromInputProperty ( String propName, String defaultPropValue, Configuration conf)
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getEnvVarsFromInputProperty
parameter_list|(
name|String
name|propName
parameter_list|,
name|String
name|defaultPropValue
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|envString
init|=
name|conf
operator|.
name|get
argument_list|(
name|propName
argument_list|,
name|defaultPropValue
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|varSet
init|=
name|getEnvVarsFromInputString
argument_list|(
name|envString
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propMap
init|=
name|conf
operator|.
name|getPropsWithPrefix
argument_list|(
name|propName
operator|+
literal|"."
argument_list|)
decl_stmt|;
name|varSet
operator|.
name|addAll
argument_list|(
name|propMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|varSet
return|;
block|}
comment|/**    * This older version of this method is kept around for compatibility    * because downstream frameworks like Spark and Tez have been using it.    * Downstream frameworks are expected to move off of it.    */
annotation|@
name|Deprecated
DECL|method|setEnvFromInputString (Map<String, String> env, String envString)
specifier|public
specifier|static
name|void
name|setEnvFromInputString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
name|envString
parameter_list|)
block|{
name|setEnvFromInputString
argument_list|(
name|env
argument_list|,
name|envString
argument_list|,
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|addToEnvironment ( Map<String, String> environment, String variable, String value, String classPathSeparator)
specifier|public
specifier|static
name|void
name|addToEnvironment
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|variable
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
name|String
name|val
init|=
name|environment
operator|.
name|get
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|val
operator|+
name|classPathSeparator
operator|+
name|value
expr_stmt|;
block|}
name|environment
operator|.
name|put
argument_list|(
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|variable
argument_list|)
argument_list|,
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * This older version of this method is kept around for compatibility    * because downstream frameworks like Spark and Tez have been using it.    * Downstream frameworks are expected to move off of it.    */
annotation|@
name|Deprecated
DECL|method|addToEnvironment ( Map<String, String> environment, String variable, String value)
specifier|public
specifier|static
name|void
name|addToEnvironment
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|variable
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|addToEnvironment
argument_list|(
name|environment
argument_list|,
name|variable
argument_list|,
name|value
argument_list|,
name|File
operator|.
name|pathSeparator
argument_list|)
expr_stmt|;
block|}
DECL|method|crossPlatformify (String var)
specifier|public
specifier|static
name|String
name|crossPlatformify
parameter_list|(
name|String
name|var
parameter_list|)
block|{
return|return
name|ApplicationConstants
operator|.
name|PARAMETER_EXPANSION_LEFT
operator|+
name|var
operator|+
name|ApplicationConstants
operator|.
name|PARAMETER_EXPANSION_RIGHT
return|;
block|}
comment|// Check if should black list the node based on container exit status
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|shouldCountTowardsNodeBlacklisting (int exitStatus)
specifier|public
specifier|static
name|boolean
name|shouldCountTowardsNodeBlacklisting
parameter_list|(
name|int
name|exitStatus
parameter_list|)
block|{
switch|switch
condition|(
name|exitStatus
condition|)
block|{
case|case
name|ContainerExitStatus
operator|.
name|PREEMPTED
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_BY_APPMASTER
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_AFTER_APP_COMPLETION
case|:
case|case
name|ContainerExitStatus
operator|.
name|ABORTED
case|:
comment|// Neither the app's fault nor the system's fault. This happens by design,
comment|// so no need for skipping nodes
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
case|:
comment|// This container is marked with this exit-status means that the node is
comment|// already marked as unhealthy given that most of the disks failed. So, no
comment|// need for any explicit skipping of nodes.
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|KILLED_EXCEEDED_VMEM
case|:
case|case
name|ContainerExitStatus
operator|.
name|KILLED_EXCEEDED_PMEM
case|:
comment|// No point in skipping the node as it's not the system's fault
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|SUCCESS
case|:
return|return
literal|false
return|;
case|case
name|ContainerExitStatus
operator|.
name|INVALID
case|:
comment|// Ideally, this shouldn't be considered for skipping a node. But in
comment|// reality, it seems like there are cases where we are not setting
comment|// exit-code correctly and so it's better to be conservative. See
comment|// YARN-4284.
return|return
literal|true
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

