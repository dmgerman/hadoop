begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|_split
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|sjoin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringInterner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_comment
comment|/**  * Yarn application related utilities  */
end_comment

begin_class
annotation|@
name|Private
DECL|class|Apps
specifier|public
class|class
name|Apps
block|{
DECL|field|APP
specifier|public
specifier|static
specifier|final
name|String
name|APP
init|=
literal|"application"
decl_stmt|;
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"ID"
decl_stmt|;
DECL|method|toAppID (String aid)
specifier|public
specifier|static
name|ApplicationId
name|toAppID
parameter_list|(
name|String
name|aid
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|_split
argument_list|(
name|aid
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|toAppID
argument_list|(
name|APP
argument_list|,
name|aid
argument_list|,
name|it
argument_list|)
return|;
block|}
DECL|method|toAppID (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|ApplicationId
name|toAppID
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|||
operator|!
name|it
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|throwParseException
argument_list|(
name|sjoin
argument_list|(
name|prefix
argument_list|,
name|ID
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|shouldHaveNext
argument_list|(
name|prefix
argument_list|,
name|s
argument_list|,
name|it
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|shouldHaveNext (String prefix, String s, Iterator<String> it)
specifier|public
specifier|static
name|void
name|shouldHaveNext
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|s
parameter_list|,
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
parameter_list|)
block|{
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|throwParseException
argument_list|(
name|sjoin
argument_list|(
name|prefix
argument_list|,
name|ID
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|throwParseException (String name, String s)
specifier|public
specifier|static
name|void
name|throwParseException
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|s
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|join
argument_list|(
literal|"Error parsing "
argument_list|,
name|name
argument_list|,
literal|": "
argument_list|,
name|s
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|setEnvFromInputString (Map<String, String> env, String envString, String classPathSeparator)
specifier|public
specifier|static
name|void
name|setEnvFromInputString
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|String
name|envString
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
if|if
condition|(
name|envString
operator|!=
literal|null
operator|&&
name|envString
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|childEnvs
index|[]
init|=
name|envString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|Shell
operator|.
name|getEnvironmentVariableRegex
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|cEnv
range|:
name|childEnvs
control|)
block|{
name|String
index|[]
name|parts
init|=
name|cEnv
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
comment|// split on '='
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|var
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// replace $env with the child's env constructed by tt's
name|String
name|replace
init|=
name|env
operator|.
name|get
argument_list|(
name|var
argument_list|)
decl_stmt|;
comment|// if this key is not configured by the tt for the child .. get it
comment|// from the tt's env
if|if
condition|(
name|replace
operator|==
literal|null
condition|)
name|replace
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|var
argument_list|)
expr_stmt|;
comment|// the env key is note present anywhere .. simply set it
if|if
condition|(
name|replace
operator|==
literal|null
condition|)
name|replace
operator|=
literal|""
expr_stmt|;
name|m
operator|.
name|appendReplacement
argument_list|(
name|sb
argument_list|,
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|replace
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|appendTail
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|addToEnvironment
argument_list|(
name|env
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|classPathSeparator
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Public
annotation|@
name|Unstable
DECL|method|addToEnvironment ( Map<String, String> environment, String variable, String value, String classPathSeparator)
specifier|public
specifier|static
name|void
name|addToEnvironment
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
parameter_list|,
name|String
name|variable
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|classPathSeparator
parameter_list|)
block|{
name|String
name|val
init|=
name|environment
operator|.
name|get
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|val
operator|=
name|val
operator|+
name|classPathSeparator
operator|+
name|value
expr_stmt|;
block|}
name|environment
operator|.
name|put
argument_list|(
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|variable
argument_list|)
argument_list|,
name|StringInterner
operator|.
name|weakIntern
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|crossPlatformify (String var)
specifier|public
specifier|static
name|String
name|crossPlatformify
parameter_list|(
name|String
name|var
parameter_list|)
block|{
return|return
name|ApplicationConstants
operator|.
name|PARAMETER_EXPANSION_LEFT
operator|+
name|var
operator|+
name|ApplicationConstants
operator|.
name|PARAMETER_EXPANSION_RIGHT
return|;
block|}
block|}
end_class

end_unit

