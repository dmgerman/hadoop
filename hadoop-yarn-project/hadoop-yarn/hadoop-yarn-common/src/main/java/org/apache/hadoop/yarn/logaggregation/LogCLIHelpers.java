begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|LogCLIHelpers
specifier|public
class|class
name|LogCLIHelpers
implements|implements
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|dumpAContainersLogs (String appId, String containerId, String nodeId, String jobOwner)
specifier|public
name|int
name|dumpAContainersLogs
parameter_list|(
name|String
name|appId
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|jobOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|remoteRootLogDir
init|=
operator|new
name|Path
argument_list|(
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogDirSuffix
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|logPath
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogFileForApp
argument_list|(
name|remoteRootLogDir
argument_list|,
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appId
argument_list|)
argument_list|,
name|jobOwner
argument_list|,
name|ConverterUtils
operator|.
name|toNodeId
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|logPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Logs not available at "
operator|+
name|logPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Log aggregation has not completed or is not enabled."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
name|dumpAContainerLogs
argument_list|(
name|containerId
argument_list|,
name|reader
argument_list|,
name|System
operator|.
name|out
argument_list|)
return|;
block|}
annotation|@
name|Private
DECL|method|dumpAContainerLogs (String containerIdStr, AggregatedLogFormat.LogReader reader, PrintStream out)
specifier|public
name|int
name|dumpAContainerLogs
parameter_list|(
name|String
name|containerIdStr
parameter_list|,
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|valueStream
decl_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|valueStream
operator|!=
literal|null
operator|&&
operator|!
name|key
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|containerIdStr
argument_list|)
condition|)
block|{
comment|// Next container
name|key
operator|=
operator|new
name|LogKey
argument_list|()
expr_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueStream
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Logs for container "
operator|+
name|containerIdStr
operator|+
literal|" are not present in this log-file."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|LogReader
operator|.
name|readAContainerLogsForALogType
argument_list|(
name|valueStream
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
break|break;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Private
DECL|method|dumpAllContainersLogs (ApplicationId appId, String appOwner, PrintStream out)
specifier|public
name|int
name|dumpAllContainersLogs
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|PrintStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|remoteRootLogDir
init|=
operator|new
name|Path
argument_list|(
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|appOwner
decl_stmt|;
name|String
name|logDirSuffix
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogDirSuffix
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO Change this to get a list of files from the LAS.
name|Path
name|remoteAppLogDir
init|=
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|appId
argument_list|,
name|user
argument_list|,
name|logDirSuffix
argument_list|)
decl_stmt|;
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
decl_stmt|;
try|try
block|{
name|Path
name|qualifiedLogDir
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|remoteAppLogDir
argument_list|)
decl_stmt|;
name|nodeFiles
operator|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|qualifiedLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|getConf
argument_list|()
argument_list|)
operator|.
name|listStatus
argument_list|(
name|remoteAppLogDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Logs not available at "
operator|+
name|remoteAppLogDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Log aggregation has not completed or is not enabled."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
while|while
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|thisNodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|getConf
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|remoteAppLogDir
argument_list|,
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|DataInputStream
name|valueStream
decl_stmt|;
name|LogKey
name|key
init|=
operator|new
name|LogKey
argument_list|()
decl_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
while|while
condition|(
name|valueStream
operator|!=
literal|null
condition|)
block|{
name|String
name|containerString
init|=
literal|"\n\nContainer: "
operator|+
name|key
operator|+
literal|" on "
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|containerString
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"="
argument_list|,
name|containerString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|LogReader
operator|.
name|readAContainerLogsForALogType
argument_list|(
name|valueStream
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|eof
parameter_list|)
block|{
break|break;
block|}
block|}
comment|// Next container
name|key
operator|=
operator|new
name|LogKey
argument_list|()
expr_stmt|;
name|valueStream
operator|=
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
block|}
end_class

end_unit

