begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
DECL|class|LogCLIHelpers
specifier|public
class|class
name|LogCLIHelpers
implements|implements
name|Configurable
block|{
DECL|field|PER_LOG_FILE_INFO_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|PER_LOG_FILE_INFO_PATTERN
init|=
literal|"%30s\t%30s\t%30s\t%30s"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
DECL|field|CONTAINER_ON_NODE_PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|CONTAINER_ON_NODE_PATTERN
init|=
literal|"Container: %s on %s"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|factory
specifier|private
name|LogAggregationFileControllerFactory
name|factory
decl_stmt|;
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|dumpAContainersLogs (String appId, String containerId, String nodeId, String jobOwner)
specifier|public
name|int
name|dumpAContainersLogs
parameter_list|(
name|String
name|appId
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|jobOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|ContainerLogsRequest
name|options
init|=
operator|new
name|ContainerLogsRequest
argument_list|()
decl_stmt|;
name|options
operator|.
name|setAppId
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|options
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|options
operator|.
name|setAppOwner
argument_list|(
name|jobOwner
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|logs
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|setLogTypes
argument_list|(
name|logs
argument_list|)
expr_stmt|;
name|options
operator|.
name|setBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|dumpAContainerLogsForLogType
argument_list|(
name|options
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
comment|/**    * Return the owner for a given AppId    * @param remoteRootLogDir    * @param appId    * @param bestGuess    * @param conf    * @return the owner or null    * @throws IOException    */
DECL|method|getOwnerForAppIdOrNull ( ApplicationId appId, String bestGuess, Configuration conf)
specifier|public
specifier|static
name|String
name|getOwnerForAppIdOrNull
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|bestGuess
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|remoteRootLogDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogDirSuffix
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|fullPath
init|=
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|appId
argument_list|,
name|bestGuess
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|remoteRootLogDir
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|pathAccess
init|=
name|fullPath
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|fullPath
argument_list|)
condition|)
block|{
return|return
name|bestGuess
return|;
block|}
name|Path
name|toMatch
init|=
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|remoteRootLogDir
argument_list|,
name|appId
argument_list|,
literal|"*"
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|pathAccess
operator|=
name|toMatch
operator|.
name|toString
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|matching
init|=
name|fc
operator|.
name|util
argument_list|()
operator|.
name|globStatus
argument_list|(
name|toMatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|matching
operator|==
literal|null
operator|||
name|matching
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//fetch the user from the full path /app-logs/user[/suffix]/app_id
name|Path
name|parent
init|=
name|matching
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|//skip the suffix too
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|parent
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
decl||
name|AccessDeniedException
name|ex
parameter_list|)
block|{
name|logDirNoAccessPermission
argument_list|(
name|pathAccess
argument_list|,
name|bestGuess
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|dumpAContainerLogsForLogType (ContainerLogsRequest options)
specifier|public
name|int
name|dumpAContainerLogsForLogType
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|dumpAContainerLogsForLogType
argument_list|(
name|options
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Private
annotation|@
name|VisibleForTesting
DECL|method|dumpAContainerLogsForLogType (ContainerLogsRequest options, boolean outputFailure)
specifier|public
name|int
name|dumpAContainerLogsForLogType
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|,
name|boolean
name|outputFailure
parameter_list|)
throws|throws
name|IOException
block|{
name|LogAggregationFileController
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|this
operator|.
name|getFileController
argument_list|(
name|options
operator|.
name|getAppId
argument_list|()
argument_list|,
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
name|boolean
name|foundAnyLogs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fc
operator|!=
literal|null
condition|)
block|{
name|foundAnyLogs
operator|=
name|fc
operator|.
name|readAggregatedLogs
argument_list|(
name|options
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundAnyLogs
condition|)
block|{
if|if
condition|(
name|outputFailure
condition|)
block|{
name|containerLogNotFound
argument_list|(
name|options
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Private
DECL|method|dumpAContainerLogsForLogTypeWithoutNodeId ( ContainerLogsRequest options)
specifier|public
name|int
name|dumpAContainerLogsForLogTypeWithoutNodeId
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|LogAggregationFileController
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|this
operator|.
name|getFileController
argument_list|(
name|options
operator|.
name|getAppId
argument_list|()
argument_list|,
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
name|boolean
name|foundAnyLogs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fc
operator|!=
literal|null
condition|)
block|{
name|foundAnyLogs
operator|=
name|fc
operator|.
name|readAggregatedLogs
argument_list|(
name|options
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundAnyLogs
condition|)
block|{
name|containerLogNotFound
argument_list|(
name|options
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Private
DECL|method|dumpAllContainersLogs (ContainerLogsRequest options)
specifier|public
name|int
name|dumpAllContainersLogs
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|LogAggregationFileController
name|fc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fc
operator|=
name|this
operator|.
name|getFileController
argument_list|(
name|options
operator|.
name|getAppId
argument_list|()
argument_list|,
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
name|boolean
name|foundAnyLogs
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fc
operator|!=
literal|null
condition|)
block|{
name|foundAnyLogs
operator|=
name|fc
operator|.
name|readAggregatedLogs
argument_list|(
name|options
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundAnyLogs
condition|)
block|{
name|emptyLogDir
argument_list|(
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|options
operator|.
name|getAppId
argument_list|()
argument_list|,
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Private
DECL|method|printAContainerLogMetadata (ContainerLogsRequest options, PrintStream out, PrintStream err)
specifier|public
name|int
name|printAContainerLogMetadata
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|nodeId
init|=
name|options
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|String
name|containerIdStr
init|=
name|options
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containersLogMeta
decl_stmt|;
try|try
block|{
name|containersLogMeta
operator|=
name|getFileController
argument_list|(
name|options
operator|.
name|getAppId
argument_list|()
argument_list|,
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|containersLogMeta
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|containerIdStr
operator|!=
literal|null
operator|&&
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"The container "
operator|+
name|containerIdStr
operator|+
literal|" couldn't be found "
operator|+
literal|"on the node specified: "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Can not find log metadata for any containers on "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|containerIdStr
operator|!=
literal|null
condition|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Can not find log metadata for container: "
operator|+
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
for|for
control|(
name|ContainerLogMeta
name|containerLogMeta
range|:
name|containersLogMeta
control|)
block|{
name|String
name|containerString
init|=
name|String
operator|.
name|format
argument_list|(
name|CONTAINER_ON_NODE_PATTERN
argument_list|,
name|containerLogMeta
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|containerLogMeta
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|containerString
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"="
argument_list|,
name|containerString
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|printf
argument_list|(
name|PER_LOG_FILE_INFO_PATTERN
argument_list|,
literal|"LogFile"
argument_list|,
literal|"LogLength"
argument_list|,
literal|"LastModificationTime"
argument_list|,
literal|"LogAggregationType"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"="
argument_list|,
name|containerString
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PerContainerLogFileInfo
name|logMeta
range|:
name|containerLogMeta
operator|.
name|getContainerLogMeta
argument_list|()
control|)
block|{
name|out
operator|.
name|printf
argument_list|(
name|PER_LOG_FILE_INFO_PATTERN
argument_list|,
name|logMeta
operator|.
name|getFileName
argument_list|()
argument_list|,
name|logMeta
operator|.
name|getFileSize
argument_list|()
argument_list|,
name|logMeta
operator|.
name|getLastModifiedTime
argument_list|()
argument_list|,
literal|"AGGREGATED"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Private
DECL|method|printNodesList (ContainerLogsRequest options, PrintStream out, PrintStream err)
specifier|public
name|void
name|printNodesList
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|options
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|String
name|appOwner
init|=
name|options
operator|.
name|getAppOwner
argument_list|()
decl_stmt|;
name|LogAggregationFileController
name|fileFormat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fileFormat
operator|=
name|getFileController
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteIterator
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nodeFiles
operator|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|fileFormat
operator|.
name|getRemoteRootLogDir
argument_list|()
argument_list|,
name|fileFormat
operator|.
name|getRemoteRootLogDirSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnf
parameter_list|)
block|{
name|logDirNotExist
argument_list|(
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
decl||
name|AccessDeniedException
name|ace
parameter_list|)
block|{
name|logDirNoAccessPermission
argument_list|(
name|LogAggregationUtils
operator|.
name|getRemoteAppLogDir
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|appOwner
argument_list|,
name|ace
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeFiles
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|foundNode
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeFiles
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|thisNodeFile
init|=
name|nodeFiles
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|foundNode
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundNode
condition|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"No nodes found that aggregated logs for "
operator|+
literal|"the application: "
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|printContainersList (ContainerLogsRequest options, PrintStream out, PrintStream err)
specifier|public
name|void
name|printContainersList
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
throws|throws
name|IOException
block|{
name|ApplicationId
name|appId
init|=
name|options
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|String
name|nodeId
init|=
name|options
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|boolean
name|foundAnyLogs
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containersLogMeta
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|containersLogMeta
operator|=
name|getFileController
argument_list|(
name|options
operator|.
name|getAppId
argument_list|()
argument_list|,
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ContainerLogMeta
name|logMeta
range|:
name|containersLogMeta
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|CONTAINER_ON_NODE_PATTERN
argument_list|,
name|logMeta
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|logMeta
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|foundAnyLogs
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foundAnyLogs
condition|)
block|{
if|if
condition|(
name|nodeId
operator|!=
literal|null
condition|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Can not find information for any containers on "
operator|+
name|nodeId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Can not find any container information for "
operator|+
literal|"the application: "
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
DECL|method|containerLogNotFound (String containerId)
specifier|private
specifier|static
name|void
name|containerLogNotFound
parameter_list|(
name|String
name|containerId
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Logs for container "
operator|+
name|containerId
operator|+
literal|" are not present in this log-file."
argument_list|)
expr_stmt|;
block|}
DECL|method|logDirNotExist (String remoteAppLogDir)
specifier|private
specifier|static
name|void
name|logDirNotExist
parameter_list|(
name|String
name|remoteAppLogDir
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|remoteAppLogDir
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Log aggregation has not completed or is not enabled."
argument_list|)
expr_stmt|;
block|}
DECL|method|emptyLogDir (String remoteAppLogDir)
specifier|private
specifier|static
name|void
name|emptyLogDir
parameter_list|(
name|String
name|remoteAppLogDir
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|remoteAppLogDir
operator|+
literal|" does not have any log files."
argument_list|)
expr_stmt|;
block|}
DECL|method|logDirNoAccessPermission (String remoteAppLogDir, String appOwner, String errorMessage)
specifier|private
specifier|static
name|void
name|logDirNoAccessPermission
parameter_list|(
name|String
name|remoteAppLogDir
parameter_list|,
name|String
name|appOwner
parameter_list|,
name|String
name|errorMessage
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Guessed logs' owner is "
operator|+
name|appOwner
operator|+
literal|" and current user "
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
operator|+
literal|" does not "
operator|+
literal|"have permission to access "
operator|+
name|remoteAppLogDir
operator|+
literal|". Error message found: "
operator|+
name|errorMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Private
DECL|method|createPrintStream (String localDir, String nodeId, String containerId)
specifier|public
name|PrintStream
name|createPrintStream
parameter_list|(
name|String
name|localDir
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|containerId
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
if|if
condition|(
name|localDir
operator|!=
literal|null
operator|&&
operator|!
name|localDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Path
name|nodePath
init|=
operator|new
name|Path
argument_list|(
name|localDir
argument_list|,
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
decl_stmt|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|nodePath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|containerLogPath
init|=
operator|new
name|Path
argument_list|(
name|nodePath
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|out
operator|=
operator|new
name|PrintStream
argument_list|(
name|containerLogPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|closePrintStream (PrintStream out)
specifier|public
name|void
name|closePrintStream
parameter_list|(
name|PrintStream
name|out
parameter_list|)
block|{
if|if
condition|(
name|out
operator|!=
name|System
operator|.
name|out
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Private
DECL|method|listContainerLogs (ContainerLogsRequest options)
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|listContainerLogs
parameter_list|(
name|ContainerLogsRequest
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|containersLogMeta
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|containersLogMeta
operator|=
name|getFileController
argument_list|(
name|options
operator|.
name|getAppId
argument_list|()
argument_list|,
name|options
operator|.
name|getAppOwner
argument_list|()
argument_list|)
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|logTypes
return|;
block|}
for|for
control|(
name|ContainerLogMeta
name|logMeta
range|:
name|containersLogMeta
control|)
block|{
for|for
control|(
name|PerContainerLogFileInfo
name|fileInfo
range|:
name|logMeta
operator|.
name|getContainerLogMeta
argument_list|()
control|)
block|{
name|logTypes
operator|.
name|add
argument_list|(
name|fileInfo
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|logTypes
return|;
block|}
DECL|method|getFileController (ApplicationId appId, String appOwner)
specifier|private
name|LogAggregationFileController
name|getFileController
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|appOwner
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
operator|.
name|getFileControllerForRead
argument_list|(
name|appId
argument_list|,
name|appOwner
argument_list|)
return|;
block|}
block|}
end_class

end_unit

