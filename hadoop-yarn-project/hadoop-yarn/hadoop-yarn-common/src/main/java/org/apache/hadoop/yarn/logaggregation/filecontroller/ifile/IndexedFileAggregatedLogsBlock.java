begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller.ifile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|ifile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|APP_OWNER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|CONTAINER_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|CONTAINER_LOG_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|ENTITY_STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|NM_NODENAME
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|BoundedRangeFileInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationHtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|ifile
operator|.
name|LogAggregationIndexedFileController
operator|.
name|IndexedFileLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|ifile
operator|.
name|LogAggregationIndexedFileController
operator|.
name|IndexedLogsMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|ifile
operator|.
name|LogAggregationIndexedFileController
operator|.
name|IndexedPerAggregationLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet2
operator|.
name|Hamlet
operator|.
name|PRE
import|;
end_import

begin_comment
comment|/**  * The Aggregated Logs Block implementation for Indexed File.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"YARN"
block|,
literal|"MapReduce"
block|}
argument_list|)
DECL|class|IndexedFileAggregatedLogsBlock
specifier|public
class|class
name|IndexedFileAggregatedLogsBlock
extends|extends
name|LogAggregationHtmlBlock
block|{
DECL|field|fileController
specifier|private
specifier|final
name|LogAggregationIndexedFileController
name|fileController
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Inject
DECL|method|IndexedFileAggregatedLogsBlock (ViewContext ctx, Configuration conf, LogAggregationIndexedFileController fileController)
specifier|public
name|IndexedFileAggregatedLogsBlock
parameter_list|(
name|ViewContext
name|ctx
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|LogAggregationIndexedFileController
name|fileController
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|fileController
operator|=
name|fileController
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|BlockParameters
name|params
init|=
name|verifyAndParseParameters
argument_list|(
name|html
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ApplicationId
name|appId
init|=
name|params
operator|.
name|getAppId
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|params
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|params
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|String
name|appOwner
init|=
name|params
operator|.
name|getAppOwner
argument_list|()
decl_stmt|;
name|String
name|logEntity
init|=
name|params
operator|.
name|getLogEntity
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|params
operator|.
name|getStartIndex
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|params
operator|.
name|getEndIndex
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|nodeFiles
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nodeFiles
operator|=
name|LogAggregationUtils
operator|.
name|getRemoteNodeFileList
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|appOwner
argument_list|,
name|this
operator|.
name|fileController
operator|.
name|getRemoteRootLogDir
argument_list|()
argument_list|,
name|this
operator|.
name|fileController
operator|.
name|getRemoteRootLogDirSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"Unable to locate any logs for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|checkSumFiles
decl_stmt|;
try|try
block|{
name|checkSumFiles
operator|=
name|fileController
operator|.
name|parseCheckSumFiles
argument_list|(
name|nodeFiles
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|html
operator|.
name|h1
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|)
expr_stmt|;
return|return;
block|}
name|List
argument_list|<
name|FileStatus
argument_list|>
name|fileToRead
decl_stmt|;
try|try
block|{
name|fileToRead
operator|=
name|fileController
operator|.
name|getNodeLogFileToRead
argument_list|(
name|nodeFiles
argument_list|,
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|html
operator|.
name|h1
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|foundLog
init|=
literal|false
decl_stmt|;
name|String
name|desiredLogType
init|=
name|$
argument_list|(
name|CONTAINER_LOG_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|FileStatus
name|thisNodeFile
range|:
name|fileToRead
control|)
block|{
name|Long
name|checkSumIndex
init|=
name|checkSumFiles
operator|.
name|get
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|endIndex
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|checkSumIndex
operator|!=
literal|null
condition|)
block|{
name|endIndex
operator|=
name|checkSumIndex
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|IndexedLogsMeta
name|indexedLogsMeta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|indexedLogsMeta
operator|=
name|fileController
operator|.
name|loadIndexedLogsMeta
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|,
name|endIndex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// DO NOTHING
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can not load log meta from the log file:"
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|indexedLogsMeta
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
name|indexedLogsMeta
operator|.
name|getAcls
argument_list|()
decl_stmt|;
name|String
name|user
init|=
name|indexedLogsMeta
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|remoteUser
init|=
name|request
argument_list|()
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|checkAcls
argument_list|(
name|conf
argument_list|,
name|appId
argument_list|,
name|user
argument_list|,
name|appAcls
argument_list|,
name|remoteUser
argument_list|)
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|__
argument_list|(
literal|"User ["
operator|+
name|remoteUser
operator|+
literal|"] is not authorized to view the logs for "
operator|+
name|logEntity
operator|+
literal|" in log file ["
operator|+
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"User ["
operator|+
name|remoteUser
operator|+
literal|"] is not authorized to view the logs for "
operator|+
name|logEntity
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|compressAlgo
init|=
name|indexedLogsMeta
operator|.
name|getCompressName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
name|candidates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexedPerAggregationLogMeta
name|logMeta
range|:
name|indexedLogsMeta
operator|.
name|getLogMetas
argument_list|()
control|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|IndexedFileLogMeta
argument_list|>
argument_list|>
name|meta
range|:
name|logMeta
operator|.
name|getLogMetas
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|IndexedFileLogMeta
name|log
range|:
name|meta
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|log
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|desiredLogType
operator|!=
literal|null
operator|&&
operator|!
name|desiredLogType
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|desiredLogType
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getFileName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|candidates
operator|.
name|add
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|Algorithm
name|compressName
init|=
name|Compression
operator|.
name|getCompressionAlgorithmByName
argument_list|(
name|compressAlgo
argument_list|)
decl_stmt|;
name|Decompressor
name|decompressor
init|=
name|compressName
operator|.
name|getDecompressor
argument_list|()
decl_stmt|;
name|FileContext
name|fileContext
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FSDataInputStream
name|fsin
init|=
name|fileContext
operator|.
name|open
argument_list|(
name|thisNodeFile
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bufferSize
init|=
literal|65536
decl_stmt|;
for|for
control|(
name|IndexedFileLogMeta
name|candidate
range|:
name|candidates
control|)
block|{
name|byte
index|[]
name|cbuf
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|compressName
operator|.
name|createDecompressionStream
argument_list|(
operator|new
name|BoundedRangeFileInputStream
argument_list|(
name|fsin
argument_list|,
name|candidate
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|candidate
operator|.
name|getFileCompressedSize
argument_list|()
argument_list|)
argument_list|,
name|decompressor
argument_list|,
name|LogAggregationIndexedFileController
operator|.
name|getFSInputBufferSize
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|logLength
init|=
name|candidate
operator|.
name|getFileSize
argument_list|()
decl_stmt|;
name|html
operator|.
name|pre
argument_list|()
operator|.
name|__
argument_list|(
literal|"\n\n"
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"Log Type: "
operator|+
name|candidate
operator|.
name|getFileName
argument_list|()
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"Log Upload Time: "
operator|+
name|Times
operator|.
name|format
argument_list|(
name|candidate
operator|.
name|getLastModificatedTime
argument_list|()
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"Log Length: "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|logLength
argument_list|)
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|long
name|startIndex
init|=
name|start
operator|<
literal|0
condition|?
name|logLength
operator|+
name|start
else|:
name|start
decl_stmt|;
name|startIndex
operator|=
name|startIndex
operator|<
literal|0
condition|?
literal|0
else|:
name|startIndex
expr_stmt|;
name|startIndex
operator|=
name|startIndex
operator|>
name|logLength
condition|?
name|logLength
else|:
name|startIndex
expr_stmt|;
name|long
name|endLogIndex
init|=
name|end
operator|<
literal|0
condition|?
name|logLength
operator|+
name|end
else|:
name|end
decl_stmt|;
name|endLogIndex
operator|=
name|endLogIndex
operator|<
literal|0
condition|?
literal|0
else|:
name|endLogIndex
expr_stmt|;
name|endLogIndex
operator|=
name|endLogIndex
operator|>
name|logLength
condition|?
name|logLength
else|:
name|endLogIndex
expr_stmt|;
name|endLogIndex
operator|=
name|endLogIndex
operator|<
name|startIndex
condition|?
name|startIndex
else|:
name|endLogIndex
expr_stmt|;
name|long
name|toRead
init|=
name|endLogIndex
operator|-
name|startIndex
decl_stmt|;
if|if
condition|(
name|toRead
operator|<
name|logLength
condition|)
block|{
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"Showing "
operator|+
name|toRead
operator|+
literal|" bytes of "
operator|+
name|logLength
operator|+
literal|" total. Click "
argument_list|)
operator|.
name|a
argument_list|(
name|url
argument_list|(
literal|"logs"
argument_list|,
name|$
argument_list|(
name|NM_NODENAME
argument_list|)
argument_list|,
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
argument_list|,
name|$
argument_list|(
name|ENTITY_STRING
argument_list|)
argument_list|,
name|$
argument_list|(
name|APP_OWNER
argument_list|)
argument_list|,
name|candidate
operator|.
name|getFileName
argument_list|()
argument_list|,
literal|"?start=0"
argument_list|)
argument_list|,
literal|"here"
argument_list|)
operator|.
name|__
argument_list|(
literal|" for the full log."
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
name|long
name|totalSkipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|totalSkipped
operator|<
name|startIndex
condition|)
block|{
name|long
name|ret
init|=
name|in
operator|.
name|skip
argument_list|(
name|startIndex
operator|-
name|totalSkipped
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
comment|//Read one byte
name|int
name|nextByte
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// Check if we have reached EOF
if|if
condition|(
name|nextByte
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Premature EOF from container log"
argument_list|)
throw|;
block|}
name|ret
operator|=
literal|1
expr_stmt|;
block|}
name|totalSkipped
operator|+=
name|ret
expr_stmt|;
block|}
name|int
name|len
init|=
literal|0
decl_stmt|;
name|int
name|currentToRead
init|=
name|toRead
operator|>
name|bufferSize
condition|?
name|bufferSize
else|:
operator|(
name|int
operator|)
name|toRead
decl_stmt|;
name|PRE
argument_list|<
name|Hamlet
argument_list|>
name|pre
init|=
name|html
operator|.
name|pre
argument_list|()
decl_stmt|;
while|while
condition|(
name|toRead
operator|>
literal|0
operator|&&
operator|(
name|len
operator|=
name|in
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
name|currentToRead
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|pre
operator|.
name|__
argument_list|(
operator|new
name|String
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toRead
operator|=
name|toRead
operator|-
name|len
expr_stmt|;
name|currentToRead
operator|=
name|toRead
operator|>
name|bufferSize
condition|?
name|bufferSize
else|:
operator|(
name|int
operator|)
name|toRead
expr_stmt|;
block|}
name|pre
operator|.
name|__
argument_list|()
expr_stmt|;
name|foundLog
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|ex
argument_list|)
expr_stmt|;
continue|continue;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundLog
condition|)
block|{
if|if
condition|(
name|desiredLogType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"No logs available for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"Unable to locate '"
operator|+
name|desiredLogType
operator|+
literal|"' log for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|__
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

