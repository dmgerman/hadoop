begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ReservationAllocationStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ReservationAllocationStateProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ReservationIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ReservationDefinitionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ResourceAllocationRequestProto
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * {@code ReservationAllocationStatePBImpl} implements the {@link  * ReservationAllocationState} that represents the  reservation  that is  * made by a user.  *  *<p>  * It includes:  *<ul>  *<li>Duration of the reservation.</li>  *<li>Acceptance time of the duration.</li>  *<li>  *       List of {@link ResourceAllocationRequest}, which includes the time  *       interval, and capability of the allocation.  *       {@code ResourceAllocationRequest} represents an allocation  *       made for a reservation for the current state of the plan. This can be  *       changed for reasons such as re-planning, but will always be subject to  *       the constraints of the user contract as described by  *       {@link ReservationDefinition}  *</li>  *<li>{@link ReservationId} of the reservation.</li>  *<li>{@link ReservationDefinition} used to make the reservation.</li>  *</ul>  *  * @see ResourceAllocationRequest  * @see ReservationId  * @see ReservationDefinition  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ReservationAllocationStatePBImpl
specifier|public
class|class
name|ReservationAllocationStatePBImpl
extends|extends
name|ReservationAllocationState
block|{
DECL|field|proto
specifier|private
name|ReservationAllocationStateProto
name|proto
init|=
name|ReservationAllocationStateProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
empty_stmt|;
DECL|field|builder
specifier|private
name|ReservationAllocationStateProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
specifier|private
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|resourceAllocations
specifier|private
name|List
argument_list|<
name|ResourceAllocationRequest
argument_list|>
name|resourceAllocations
init|=
literal|null
decl_stmt|;
DECL|field|reservationId
specifier|private
name|ReservationId
name|reservationId
init|=
literal|null
decl_stmt|;
DECL|field|reservationDefinition
specifier|private
name|ReservationDefinition
name|reservationDefinition
init|=
literal|null
decl_stmt|;
DECL|method|ReservationAllocationStatePBImpl ()
specifier|public
name|ReservationAllocationStatePBImpl
parameter_list|()
block|{
name|builder
operator|=
name|ReservationAllocationStateProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|ReservationAllocationStatePBImpl ( ReservationAllocationStateProto proto)
specifier|public
name|ReservationAllocationStatePBImpl
parameter_list|(
name|ReservationAllocationStateProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|ReservationAllocationStateProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|ReservationAllocationStateProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|resourceAllocations
operator|!=
literal|null
condition|)
block|{
name|int
name|size
init|=
name|resourceAllocations
operator|.
name|size
argument_list|()
decl_stmt|;
name|builder
operator|.
name|clearAllocationRequests
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|addAllocationRequests
argument_list|(
name|i
argument_list|,
name|convertToProtoFormat
argument_list|(
name|resourceAllocations
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|reservationId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReservationId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|reservationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|reservationDefinition
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReservationDefinition
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|reservationDefinition
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
block|}
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAcceptanceTime ()
specifier|public
name|long
name|getAcceptanceTime
parameter_list|()
block|{
name|ReservationAllocationStateProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasAcceptanceTime
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getAcceptanceTime
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setAcceptanceTime (long acceptanceTime)
specifier|public
name|void
name|setAcceptanceTime
parameter_list|(
name|long
name|acceptanceTime
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|acceptanceTime
operator|<=
literal|0
condition|)
block|{
name|builder
operator|.
name|clearAcceptanceTime
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setAcceptanceTime
argument_list|(
name|acceptanceTime
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
name|ReservationAllocationStateProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasUser
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|p
operator|.
name|getUser
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setUser (String user)
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearUser
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ResourceAllocationRequest
argument_list|>
DECL|method|getResourceAllocationRequests ()
name|getResourceAllocationRequests
parameter_list|()
block|{
name|initResourceAllocations
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|resourceAllocations
return|;
block|}
annotation|@
name|Override
DECL|method|setResourceAllocationRequests ( List<ResourceAllocationRequest> newResourceAllocations)
specifier|public
name|void
name|setResourceAllocationRequests
parameter_list|(
name|List
argument_list|<
name|ResourceAllocationRequest
argument_list|>
name|newResourceAllocations
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|newResourceAllocations
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearAllocationRequests
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|resourceAllocations
operator|=
name|newResourceAllocations
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReservationId ()
specifier|public
name|ReservationId
name|getReservationId
parameter_list|()
block|{
name|ReservationAllocationStateProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|reservationId
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|reservationId
return|;
block|}
name|this
operator|.
name|reservationId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|reservationId
return|;
block|}
annotation|@
name|Override
DECL|method|setReservationId (ReservationId newReservationId)
specifier|public
name|void
name|setReservationId
parameter_list|(
name|ReservationId
name|newReservationId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|newReservationId
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearReservationId
argument_list|()
expr_stmt|;
block|}
name|reservationId
operator|=
name|newReservationId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReservationDefinition ()
specifier|public
name|ReservationDefinition
name|getReservationDefinition
parameter_list|()
block|{
name|ReservationAllocationStateProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|reservationDefinition
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|reservationDefinition
return|;
block|}
name|this
operator|.
name|reservationDefinition
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getReservationDefinition
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|reservationDefinition
return|;
block|}
annotation|@
name|Override
DECL|method|setReservationDefinition (ReservationDefinition newReservationDefinition)
specifier|public
name|void
name|setReservationDefinition
parameter_list|(
name|ReservationDefinition
name|newReservationDefinition
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|newReservationDefinition
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearReservationDefinition
argument_list|()
expr_stmt|;
block|}
name|reservationDefinition
operator|=
name|newReservationDefinition
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat ( ResourceAllocationRequestProto p)
specifier|private
name|ResourceAllocationRequestPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ResourceAllocationRequestProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ResourceAllocationRequestPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat (ReservationIdProto p)
specifier|private
name|ReservationIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ReservationIdProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ReservationIdPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertFromProtoFormat ( ReservationDefinitionProto p)
specifier|private
name|ReservationDefinitionPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ReservationDefinitionProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ReservationDefinitionPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat ( ResourceAllocationRequest p)
specifier|private
name|ResourceAllocationRequestProto
name|convertToProtoFormat
parameter_list|(
name|ResourceAllocationRequest
name|p
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ResourceAllocationRequestPBImpl
operator|)
name|p
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertToProtoFormat (ReservationId p)
specifier|private
name|ReservationIdProto
name|convertToProtoFormat
parameter_list|(
name|ReservationId
name|p
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ReservationIdPBImpl
operator|)
name|p
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertToProtoFormat ( ReservationDefinition p)
specifier|private
name|ReservationDefinitionProto
name|convertToProtoFormat
parameter_list|(
name|ReservationDefinition
name|p
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ReservationDefinitionPBImpl
operator|)
name|p
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|initResourceAllocations ()
specifier|private
name|void
name|initResourceAllocations
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|resourceAllocations
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|ReservationAllocationStateProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|List
argument_list|<
name|ResourceAllocationRequestProto
argument_list|>
name|resourceAllocationProtos
init|=
name|p
operator|.
name|getAllocationRequestsList
argument_list|()
decl_stmt|;
name|resourceAllocations
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|ResourceAllocationRequestProto
name|r
range|:
name|resourceAllocationProtos
control|)
block|{
name|resourceAllocations
operator|.
name|add
argument_list|(
name|convertFromProtoFormat
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{Acceptance Time: "
operator|+
name|getAcceptanceTime
argument_list|()
operator|+
literal|", User: "
operator|+
name|getUser
argument_list|()
operator|+
literal|", Resource Allocations: "
operator|+
name|getResourceAllocationRequests
argument_list|()
operator|+
literal|", Reservation Id: "
operator|+
name|getReservationId
argument_list|()
operator|+
literal|", Reservation Definition: "
operator|+
name|getReservationDefinition
argument_list|()
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

