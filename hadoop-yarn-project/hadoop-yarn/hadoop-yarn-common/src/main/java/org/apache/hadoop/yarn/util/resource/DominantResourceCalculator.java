begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UnitsConversionUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A {@link ResourceCalculator} which uses the concept of  *<em>dominant resource</em> to compare multi-dimensional resources.  *  * Essentially the idea is that the in a multi-resource environment,  * the resource allocation should be determined by the dominant share  * of an entity (user or queue), which is the maximum share that the  * entity has been allocated of any resource.  *  * In a nutshell, it seeks to maximize the minimum dominant share across  * all entities.  *  * For example, if user A runs CPU-heavy tasks and user B runs  * memory-heavy tasks, it attempts to equalize CPU share of user A  * with Memory-share of user B.  *  * In the single resource case, it reduces to max-min fairness for that resource.  *  * See the Dominant Resource Fairness paper for more details:  * www.cs.berkeley.edu/~matei/papers/2011/nsdi_drf.pdf  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|DominantResourceCalculator
specifier|public
class|class
name|DominantResourceCalculator
extends|extends
name|ResourceCalculator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DominantResourceCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|resourceNames
decl_stmt|;
DECL|method|DominantResourceCalculator ()
specifier|public
name|DominantResourceCalculator
parameter_list|()
block|{
name|resourceNames
operator|=
name|ResourceUtils
operator|.
name|getResourceTypes
argument_list|()
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
comment|/**    * Compare two resources - if the value for every resource type for the lhs    * is greater than that of the rhs, return 1. If the value for every resource    * type in the lhs is less than the rhs, return -1. Otherwise, return 0    *    * @param lhs resource to be compared    * @param rhs resource to be compared    * @return 0, 1, or -1    */
DECL|method|compare (Resource lhs, Resource rhs)
specifier|private
name|int
name|compare
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
name|boolean
name|lhsGreater
init|=
literal|false
decl_stmt|;
name|boolean
name|rhsGreater
init|=
literal|false
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|rName
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|lhsResourceInformation
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|rName
argument_list|)
decl_stmt|;
name|ResourceInformation
name|rhsResourceInformation
init|=
name|rhs
operator|.
name|getResourceInformation
argument_list|(
name|rName
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|lhsResourceInformation
operator|.
name|compareTo
argument_list|(
name|rhsResourceInformation
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|>=
literal|1
condition|)
block|{
name|lhsGreater
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diff
operator|<=
operator|-
literal|1
condition|)
block|{
name|rhsGreater
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|rName
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|lhsGreater
operator|&&
name|rhsGreater
condition|)
block|{
name|ret
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lhsGreater
condition|)
block|{
name|ret
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rhsGreater
condition|)
block|{
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|compare (Resource clusterResource, Resource lhs, Resource rhs, boolean singleType)
specifier|public
name|int
name|compare
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|,
name|boolean
name|singleType
parameter_list|)
block|{
if|if
condition|(
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|isInvalidDivisor
argument_list|(
name|clusterResource
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
name|float
name|l
init|=
name|getResourceAsValue
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|float
name|r
init|=
name|getResourceAsValue
argument_list|(
name|clusterResource
argument_list|,
name|rhs
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|<
name|r
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|>
name|r
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|singleType
condition|)
block|{
name|l
operator|=
name|getResourceAsValue
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|=
name|getResourceAsValue
argument_list|(
name|clusterResource
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|<
name|r
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|l
operator|>
name|r
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Use 'dominant' for now since we only have 2 resources - gives us a slight    * performance boost.    *<p></p>    * Once we add more resources, we'll need a more complicated (and slightly    * less performant algorithm).    */
DECL|method|getResourceAsValue (Resource clusterResource, Resource resource, boolean dominant)
specifier|protected
name|float
name|getResourceAsValue
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|boolean
name|dominant
parameter_list|)
block|{
name|float
name|min
init|=
name|Float
operator|.
name|MAX_VALUE
decl_stmt|;
name|float
name|max
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|String
name|rName
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|clusterResourceResourceInformation
init|=
name|clusterResource
operator|.
name|getResourceInformation
argument_list|(
name|rName
argument_list|)
decl_stmt|;
name|ResourceInformation
name|resourceInformation
init|=
name|resource
operator|.
name|getResourceInformation
argument_list|(
name|rName
argument_list|)
decl_stmt|;
name|Long
name|resourceValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|resourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|clusterResourceResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|resourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|tmp
init|=
operator|(
name|float
operator|)
name|resourceValue
operator|/
operator|(
name|float
operator|)
name|clusterResourceResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|min
operator|=
name|min
operator|<
name|tmp
condition|?
name|min
else|:
name|tmp
expr_stmt|;
name|max
operator|=
name|max
operator|>
name|tmp
condition|?
name|max
else|:
name|tmp
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|dominant
operator|)
condition|?
name|max
else|:
name|min
return|;
block|}
annotation|@
name|Override
DECL|method|computeAvailableContainers (Resource available, Resource required)
specifier|public
name|long
name|computeAvailableContainers
parameter_list|(
name|Resource
name|available
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|availableResource
init|=
name|available
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|requiredResource
init|=
name|required
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Long
name|requiredResourceValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|requiredResource
operator|.
name|getUnits
argument_list|()
argument_list|,
name|availableResource
operator|.
name|getUnits
argument_list|()
argument_list|,
name|requiredResource
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredResourceValue
operator|!=
literal|0
condition|)
block|{
name|Long
name|tmp
init|=
name|availableResource
operator|.
name|getValue
argument_list|()
operator|/
name|requiredResourceValue
decl_stmt|;
name|min
operator|=
name|min
operator|<
name|tmp
condition|?
name|min
else|:
name|tmp
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
name|min
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
operator|(
name|int
operator|)
name|min
return|;
block|}
annotation|@
name|Override
DECL|method|divide (Resource clusterResource, Resource numerator, Resource denominator)
specifier|public
name|float
name|divide
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|numerator
parameter_list|,
name|Resource
name|denominator
parameter_list|)
block|{
return|return
name|getResourceAsValue
argument_list|(
name|clusterResource
argument_list|,
name|numerator
argument_list|,
literal|true
argument_list|)
operator|/
name|getResourceAsValue
argument_list|(
name|clusterResource
argument_list|,
name|denominator
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isInvalidDivisor (Resource r)
specifier|public
name|boolean
name|isInvalidDivisor
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
if|if
condition|(
name|r
operator|.
name|getResourceValue
argument_list|(
name|resource
argument_list|)
operator|.
name|equals
argument_list|(
literal|0L
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource value for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|ratio (Resource a, Resource b)
specifier|public
name|float
name|ratio
parameter_list|(
name|Resource
name|a
parameter_list|,
name|Resource
name|b
parameter_list|)
block|{
name|float
name|ratio
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|aResourceInformation
init|=
name|a
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|bResourceInformation
init|=
name|b
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Long
name|bResourceValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|bResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|aResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|bResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|tmp
init|=
operator|(
name|float
operator|)
name|aResourceInformation
operator|.
name|getValue
argument_list|()
operator|/
operator|(
name|float
operator|)
name|bResourceValue
decl_stmt|;
name|ratio
operator|=
name|ratio
operator|>
name|tmp
condition|?
name|ratio
else|:
name|tmp
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
name|ratio
return|;
block|}
annotation|@
name|Override
DECL|method|divideAndCeil (Resource numerator, int denominator)
specifier|public
name|Resource
name|divideAndCeil
parameter_list|(
name|Resource
name|numerator
parameter_list|,
name|int
name|denominator
parameter_list|)
block|{
return|return
name|divideAndCeil
argument_list|(
name|numerator
argument_list|,
operator|(
name|long
operator|)
name|denominator
argument_list|)
return|;
block|}
DECL|method|divideAndCeil (Resource numerator, long denominator)
specifier|public
name|Resource
name|divideAndCeil
parameter_list|(
name|Resource
name|numerator
parameter_list|,
name|long
name|denominator
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|resourceInformation
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|numerator
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
argument_list|)
decl_stmt|;
name|resourceInformation
operator|.
name|setValue
argument_list|(
name|divideAndCeil
argument_list|(
name|resourceInformation
operator|.
name|getValue
argument_list|()
argument_list|,
name|denominator
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|resource
argument_list|,
name|resourceInformation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|divideAndCeil (Resource numerator, float denominator)
specifier|public
name|Resource
name|divideAndCeil
parameter_list|(
name|Resource
name|numerator
parameter_list|,
name|float
name|denominator
parameter_list|)
block|{
return|return
name|Resources
operator|.
name|createResource
argument_list|(
name|divideAndCeil
argument_list|(
name|numerator
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|denominator
argument_list|)
argument_list|,
name|divideAndCeil
argument_list|(
name|numerator
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|denominator
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|normalize (Resource r, Resource minimumResource, Resource maximumResource, Resource stepFactor)
specifier|public
name|Resource
name|normalize
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|minimumResource
parameter_list|,
name|Resource
name|maximumResource
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rResourceInformation
init|=
name|r
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|minimumResourceInformation
init|=
name|minimumResource
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|maximumResourceInformation
init|=
name|maximumResource
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|stepFactorResourceInformation
init|=
name|stepFactor
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|tmp
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|rResourceInformation
argument_list|)
decl_stmt|;
name|Long
name|rValue
init|=
name|rResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|minimumValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|minimumResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|minimumResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|maximumValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|maximumResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|maximumResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|stepFactorValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|stepFactorResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|stepFactorResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|value
init|=
name|Math
operator|.
name|max
argument_list|(
name|rValue
argument_list|,
name|minimumValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|stepFactorValue
operator|!=
literal|0
condition|)
block|{
name|value
operator|=
name|roundUp
argument_list|(
name|value
argument_list|,
name|stepFactorValue
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|setValue
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|value
argument_list|,
name|maximumValue
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|resource
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|roundUp (Resource r, Resource stepFactor)
specifier|public
name|Resource
name|roundUp
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|rounding
argument_list|(
name|r
argument_list|,
name|stepFactor
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|roundDown (Resource r, Resource stepFactor)
specifier|public
name|Resource
name|roundDown
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|rounding
argument_list|(
name|r
argument_list|,
name|stepFactor
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|rounding (Resource r, Resource stepFactor, boolean roundUp)
specifier|private
name|Resource
name|rounding
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|stepFactor
parameter_list|,
name|boolean
name|roundUp
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rResourceInformation
init|=
name|r
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|stepFactorResourceInformation
init|=
name|stepFactor
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|tmp
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|rResourceInformation
argument_list|)
decl_stmt|;
name|Long
name|rValue
init|=
name|rResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|stepFactorValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|stepFactorResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|stepFactorResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|value
init|=
name|rValue
decl_stmt|;
if|if
condition|(
name|stepFactorValue
operator|!=
literal|0
condition|)
block|{
name|value
operator|=
name|roundUp
condition|?
name|roundUp
argument_list|(
name|rValue
argument_list|,
name|stepFactorValue
argument_list|)
else|:
name|roundDown
argument_list|(
name|rValue
argument_list|,
name|stepFactorValue
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|resource
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|multiplyAndNormalizeUp (Resource r, double by, Resource stepFactor)
specifier|public
name|Resource
name|multiplyAndNormalizeUp
parameter_list|(
name|Resource
name|r
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|multiplyAndNormalize
argument_list|(
name|r
argument_list|,
name|by
argument_list|,
name|stepFactor
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|multiplyAndNormalizeDown (Resource r, double by, Resource stepFactor)
specifier|public
name|Resource
name|multiplyAndNormalizeDown
parameter_list|(
name|Resource
name|r
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|multiplyAndNormalize
argument_list|(
name|r
argument_list|,
name|by
argument_list|,
name|stepFactor
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|multiplyAndNormalize (Resource r, double by, Resource stepFactor, boolean roundUp)
specifier|private
name|Resource
name|multiplyAndNormalize
parameter_list|(
name|Resource
name|r
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|stepFactor
parameter_list|,
name|boolean
name|roundUp
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|rResourceInformation
init|=
name|r
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|stepFactorResourceInformation
init|=
name|stepFactor
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|tmp
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|rResourceInformation
argument_list|)
decl_stmt|;
name|Long
name|rValue
init|=
name|rResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|stepFactorValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|stepFactorResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|stepFactorResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|value
decl_stmt|;
if|if
condition|(
name|stepFactorValue
operator|!=
literal|0
condition|)
block|{
name|value
operator|=
name|roundUp
condition|?
name|roundUp
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
argument_list|,
name|stepFactorValue
argument_list|)
else|:
name|roundDown
argument_list|(
call|(
name|long
call|)
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
argument_list|,
name|stepFactorValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|roundUp
condition|?
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
else|:
call|(
name|long
call|)
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|resource
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error getting resource information for "
operator|+
name|resource
argument_list|,
name|ye
argument_list|)
throw|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|fitsIn (Resource cluster, Resource smaller, Resource bigger)
specifier|public
name|boolean
name|fitsIn
parameter_list|(
name|Resource
name|cluster
parameter_list|,
name|Resource
name|smaller
parameter_list|,
name|Resource
name|bigger
parameter_list|)
block|{
for|for
control|(
name|String
name|resource
range|:
name|resourceNames
control|)
block|{
try|try
block|{
name|ResourceInformation
name|sResourceInformation
init|=
name|smaller
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|ResourceInformation
name|bResourceInformation
init|=
name|bigger
operator|.
name|getResourceInformation
argument_list|(
name|resource
argument_list|)
decl_stmt|;
name|Long
name|sResourceValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|sResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|bResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|sResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sResourceValue
operator|>
name|bResourceInformation
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
name|ye
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isAnyMajorResourceZero (Resource resource)
specifier|public
name|boolean
name|isAnyMajorResourceZero
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|resource
operator|.
name|getMemorySize
argument_list|()
operator|==
literal|0f
operator|||
name|resource
operator|.
name|getVirtualCores
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
end_class

end_unit

