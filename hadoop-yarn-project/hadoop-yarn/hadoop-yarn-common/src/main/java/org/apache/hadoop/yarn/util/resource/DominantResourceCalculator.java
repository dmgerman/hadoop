begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UnitsConversionUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * A {@link ResourceCalculator} which uses the concept of  *<em>dominant resource</em> to compare multi-dimensional resources.  *  * Essentially the idea is that the in a multi-resource environment,  * the resource allocation should be determined by the dominant share  * of an entity (user or queue), which is the maximum share that the  * entity has been allocated of any resource.  *  * In a nutshell, it seeks to maximize the minimum dominant share across  * all entities.  *  * For example, if user A runs CPU-heavy tasks and user B runs  * memory-heavy tasks, it attempts to equalize CPU share of user A  * with Memory-share of user B.  *  * In the single resource case, it reduces to max-min fairness for that resource.  *  * See the Dominant Resource Fairness paper for more details:  * www.cs.berkeley.edu/~matei/papers/2011/nsdi_drf.pdf  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|DominantResourceCalculator
specifier|public
class|class
name|DominantResourceCalculator
extends|extends
name|ResourceCalculator
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DominantResourceCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DominantResourceCalculator ()
specifier|public
name|DominantResourceCalculator
parameter_list|()
block|{   }
comment|/**    * Compare two resources - if the value for every resource type for the lhs    * is greater than that of the rhs, return 1. If the value for every resource    * type in the lhs is less than the rhs, return -1. Otherwise, return 0    *    * @param lhs resource to be compared    * @param rhs resource to be compared    * @return 0, 1, or -1    */
DECL|method|compare (Resource lhs, Resource rhs)
specifier|private
name|int
name|compare
parameter_list|(
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|)
block|{
name|boolean
name|lhsGreater
init|=
literal|false
decl_stmt|;
name|boolean
name|rhsGreater
init|=
literal|false
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|lhsResourceInformation
init|=
name|lhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|rhsResourceInformation
init|=
name|rhs
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|diff
init|=
name|lhsResourceInformation
operator|.
name|compareTo
argument_list|(
name|rhsResourceInformation
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|>=
literal|1
condition|)
block|{
name|lhsGreater
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diff
operator|<=
operator|-
literal|1
condition|)
block|{
name|rhsGreater
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lhsGreater
operator|&&
name|rhsGreater
condition|)
block|{
name|ret
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lhsGreater
condition|)
block|{
name|ret
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rhsGreater
condition|)
block|{
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|compare (Resource clusterResource, Resource lhs, Resource rhs, boolean singleType)
specifier|public
name|int
name|compare
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|,
name|boolean
name|singleType
parameter_list|)
block|{
if|if
condition|(
name|lhs
operator|.
name|equals
argument_list|(
name|rhs
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|isInvalidDivisor
argument_list|(
name|clusterResource
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|compare
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|)
return|;
block|}
comment|// We have to calculate the shares for all resource types for both
comment|// resources and then look for which resource has the biggest
comment|// share overall.
name|ResourceInformation
index|[]
name|clusterRes
init|=
name|clusterResource
operator|.
name|getResources
argument_list|()
decl_stmt|;
comment|// If array creation shows up as a time sink, these arrays could be cached
comment|// because they're always the same length.
name|double
index|[]
name|lhsShares
init|=
operator|new
name|double
index|[
name|clusterRes
operator|.
name|length
index|]
decl_stmt|;
name|double
index|[]
name|rhsShares
init|=
operator|new
name|double
index|[
name|clusterRes
operator|.
name|length
index|]
decl_stmt|;
name|double
name|diff
decl_stmt|;
try|try
block|{
if|if
condition|(
name|singleType
condition|)
block|{
name|double
index|[]
name|max
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|calculateShares
argument_list|(
name|clusterRes
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
name|lhsShares
argument_list|,
name|rhsShares
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|diff
operator|=
name|max
index|[
literal|0
index|]
operator|-
name|max
index|[
literal|1
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clusterRes
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// Special case to handle the common scenario of only CPU and memory
comment|// so the we can optimize for performance
name|diff
operator|=
name|calculateSharesForMandatoryResources
argument_list|(
name|clusterRes
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
name|lhsShares
argument_list|,
name|rhsShares
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|calculateShares
argument_list|(
name|clusterRes
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
name|lhsShares
argument_list|,
name|rhsShares
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|lhsShares
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|rhsShares
argument_list|)
expr_stmt|;
name|diff
operator|=
name|compareShares
argument_list|(
name|lhsShares
argument_list|,
name|rhsShares
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|ex
parameter_list|)
block|{
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
comment|// No need to close a StringWriter
name|ex
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"A problem was encountered while calculating resource "
operator|+
literal|"availability that should not occur under normal circumstances. "
operator|+
literal|"Please report this error to the Hadoop community by opening a "
operator|+
literal|"JIRA ticket at http://issues.apache.org/jira and including the "
operator|+
literal|"following information:\n* Exception encountered: "
operator|+
name|out
operator|+
literal|"* "
operator|+
literal|"Cluster resources: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|clusterRes
argument_list|)
operator|+
literal|"\n* "
operator|+
literal|"LHS resource: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|lhs
operator|.
name|getResources
argument_list|()
argument_list|)
operator|+
literal|"\n* "
operator|+
literal|"RHS resource: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|rhs
operator|.
name|getResources
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"The resource manager is in an inconsistent state. It is safe "
operator|+
literal|"for the resource manager to be restarted as the error encountered "
operator|+
literal|"should be transitive. If high availability is enabled, failing "
operator|+
literal|"over to a standby resource manager is also safe."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"A problem was encountered while "
operator|+
literal|"calculating resource availability that should not occur under "
operator|+
literal|"normal circumstances. Please see the log for more information."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|signum
argument_list|(
name|diff
argument_list|)
return|;
block|}
comment|/**    * Calculate the shares for {@code first} and {@code second} according to    * {@code clusterRes}, and store the results in {@code firstShares} and    * {@code secondShares}, respectively. All parameters must be non-null.    * @param clusterRes the array of ResourceInformation instances that    * represents the cluster's maximum resources    * @param first the first resource to compare    * @param second the second resource to compare    * @param firstShares an array to store the shares for the first resource    * @param secondShares an array to store the shares for the second resource    * @return -1.0, 0.0, or 1.0, depending on whether the max share of the first    * resource is less than, equal to, or greater than the max share of the    * second resource, respectively    * @throws NullPointerException if any parameter is null    */
DECL|method|calculateShares (ResourceInformation[] clusterRes, Resource first, Resource second, double[] firstShares, double[] secondShares)
specifier|private
name|void
name|calculateShares
parameter_list|(
name|ResourceInformation
index|[]
name|clusterRes
parameter_list|,
name|Resource
name|first
parameter_list|,
name|Resource
name|second
parameter_list|,
name|double
index|[]
name|firstShares
parameter_list|,
name|double
index|[]
name|secondShares
parameter_list|)
block|{
name|ResourceInformation
index|[]
name|firstRes
init|=
name|first
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|ResourceInformation
index|[]
name|secondRes
init|=
name|second
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterRes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|firstShares
index|[
name|i
index|]
operator|=
name|calculateShare
argument_list|(
name|clusterRes
index|[
name|i
index|]
argument_list|,
name|firstRes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|secondShares
index|[
name|i
index|]
operator|=
name|calculateShare
argument_list|(
name|clusterRes
index|[
name|i
index|]
argument_list|,
name|secondRes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Calculate the shares for {@code first} and {@code second} according to    * {@code clusterRes}, and store the results in {@code firstShares} and    * {@code secondShares}, respectively. All parameters must be non-null.    * This method assumes that the length of {@code clusterRes} is exactly 2 and    * makes performance optimizations based on that assumption.    * @param clusterRes the array of ResourceInformation instances that    * represents the cluster's maximum resources    * @param first the first resource to compare    * @param second the second resource to compare    * @param firstShares an array to store the shares for the first resource    * @param secondShares an array to store the shares for the second resource    * @return -1.0, 0.0, or 1.0, depending on whether the max share of the first    * resource is less than, equal to, or greater than the max share of the    * second resource, respectively    * @throws NullPointerException if any parameter is null    */
DECL|method|calculateSharesForMandatoryResources ( ResourceInformation[] clusterRes, Resource first, Resource second, double[] firstShares, double[] secondShares)
specifier|private
name|int
name|calculateSharesForMandatoryResources
parameter_list|(
name|ResourceInformation
index|[]
name|clusterRes
parameter_list|,
name|Resource
name|first
parameter_list|,
name|Resource
name|second
parameter_list|,
name|double
index|[]
name|firstShares
parameter_list|,
name|double
index|[]
name|secondShares
parameter_list|)
block|{
name|ResourceInformation
index|[]
name|firstRes
init|=
name|first
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|ResourceInformation
index|[]
name|secondRes
init|=
name|second
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|int
name|firstDom
init|=
literal|0
decl_stmt|;
name|int
name|secondDom
init|=
literal|0
decl_stmt|;
name|int
name|firstSub
init|=
literal|0
decl_stmt|;
name|int
name|secondSub
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterRes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|firstShares
index|[
name|i
index|]
operator|=
name|calculateShare
argument_list|(
name|clusterRes
index|[
name|i
index|]
argument_list|,
name|firstRes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|secondShares
index|[
name|i
index|]
operator|=
name|calculateShare
argument_list|(
name|clusterRes
index|[
name|i
index|]
argument_list|,
name|secondRes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstShares
index|[
name|i
index|]
operator|>
name|firstShares
index|[
name|firstDom
index|]
condition|)
block|{
name|firstDom
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|firstShares
index|[
name|i
index|]
operator|<
name|firstShares
index|[
name|firstSub
index|]
condition|)
block|{
name|firstSub
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|secondShares
index|[
name|i
index|]
operator|>
name|secondShares
index|[
name|secondDom
index|]
condition|)
block|{
name|secondDom
operator|=
name|i
expr_stmt|;
block|}
if|if
condition|(
name|secondShares
index|[
name|i
index|]
operator|<
name|secondShares
index|[
name|secondSub
index|]
condition|)
block|{
name|secondSub
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|firstShares
index|[
name|firstDom
index|]
operator|>
name|secondShares
index|[
name|secondDom
index|]
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|firstShares
index|[
name|firstDom
index|]
operator|<
name|secondShares
index|[
name|secondDom
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|firstShares
index|[
name|firstSub
index|]
operator|>
name|secondShares
index|[
name|secondSub
index|]
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|firstShares
index|[
name|firstSub
index|]
operator|<
name|secondShares
index|[
name|secondSub
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Calculate the shares for {@code first} and {@code second} according to    * {@code clusterRes}, and store the results in {@code firstShares} and    * {@code secondShares}, respectively. {@code max} will be populated with    * the max shares from {@code firstShare} and {@code secondShare} in the    * first and second indices, respectively. All parameters must be non-null,    * and {@code max} must have a length of at least 2.    * @param clusterRes the array of ResourceInformation instances that    * represents the cluster's maximum resources    * @param first the first resource to compare    * @param second the second resource to compare    * @param firstShares an array to store the shares for the first resource    * @param secondShares an array to store the shares for the second resource    * @param max an array to store the max shares of the first and second    * resources    * @return -1.0, 0.0, or 1.0, depending on whether the max share of the first    * resource is less than, equal to, or greater than the max share of the    * second resource, respectively    * @throws NullPointerException if any parameter is null    * @throws ArrayIndexOutOfBoundsException if the length of {@code max} is    * less than 2    */
DECL|method|calculateShares (ResourceInformation[] clusterRes, Resource first, Resource second, double[] firstShares, double[] secondShares, double[] max)
specifier|private
name|void
name|calculateShares
parameter_list|(
name|ResourceInformation
index|[]
name|clusterRes
parameter_list|,
name|Resource
name|first
parameter_list|,
name|Resource
name|second
parameter_list|,
name|double
index|[]
name|firstShares
parameter_list|,
name|double
index|[]
name|secondShares
parameter_list|,
name|double
index|[]
name|max
parameter_list|)
block|{
name|ResourceInformation
index|[]
name|firstRes
init|=
name|first
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|ResourceInformation
index|[]
name|secondRes
init|=
name|second
operator|.
name|getResources
argument_list|()
decl_stmt|;
name|max
index|[
literal|0
index|]
operator|=
literal|0.0
expr_stmt|;
name|max
index|[
literal|1
index|]
operator|=
literal|0.0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterRes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|firstShares
index|[
name|i
index|]
operator|=
name|calculateShare
argument_list|(
name|clusterRes
index|[
name|i
index|]
argument_list|,
name|firstRes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|secondShares
index|[
name|i
index|]
operator|=
name|calculateShare
argument_list|(
name|clusterRes
index|[
name|i
index|]
argument_list|,
name|secondRes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstShares
index|[
name|i
index|]
operator|>
name|max
index|[
literal|0
index|]
condition|)
block|{
name|max
index|[
literal|0
index|]
operator|=
name|firstShares
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|secondShares
index|[
name|i
index|]
operator|>
name|max
index|[
literal|1
index|]
condition|)
block|{
name|max
index|[
literal|1
index|]
operator|=
name|secondShares
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Calculate the share for a resource type.    * @param clusterRes the resource type for the cluster maximum    * @param res the resource type for which to calculate the share    * @return the share    */
DECL|method|calculateShare (ResourceInformation clusterRes, ResourceInformation res)
specifier|private
name|double
name|calculateShare
parameter_list|(
name|ResourceInformation
name|clusterRes
parameter_list|,
name|ResourceInformation
name|res
parameter_list|)
block|{
comment|// Convert the resources' units into the cluster resource's units
name|long
name|value
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|res
operator|.
name|getUnits
argument_list|()
argument_list|,
name|clusterRes
operator|.
name|getUnits
argument_list|()
argument_list|,
name|res
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|double
operator|)
name|value
operator|/
name|clusterRes
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**    * Compare the two shares arrays by comparing the largest elements, then the    * next largest if the previous were equal, etc. The share arrays must be    * sorted in ascending order.    * @param lhsShares the first share array to compare    * @param rhsShares the second share array to compare    * @return a number that is less than 0 if the first array is less than the    * second, equal to 0 if the arrays are equal, and greater than 0 if the    * first array is greater than the second    */
DECL|method|compareShares (double[] lhsShares, double[] rhsShares)
specifier|private
name|double
name|compareShares
parameter_list|(
name|double
index|[]
name|lhsShares
parameter_list|,
name|double
index|[]
name|rhsShares
parameter_list|)
block|{
name|double
name|diff
init|=
literal|0.0
decl_stmt|;
comment|// lhsShares and rhsShares must necessarily have the same length, because
comment|// everyone uses the same master resource list.
for|for
control|(
name|int
name|i
init|=
name|lhsShares
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|diff
operator|=
name|lhsShares
index|[
name|i
index|]
operator|-
name|rhsShares
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|0.0
condition|)
block|{
break|break;
block|}
block|}
return|return
name|diff
return|;
block|}
annotation|@
name|Override
DECL|method|computeAvailableContainers (Resource available, Resource required)
specifier|public
name|long
name|computeAvailableContainers
parameter_list|(
name|Resource
name|available
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|availableResource
init|=
name|available
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|requiredResource
init|=
name|required
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|requiredResourceValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|requiredResource
operator|.
name|getUnits
argument_list|()
argument_list|,
name|availableResource
operator|.
name|getUnits
argument_list|()
argument_list|,
name|requiredResource
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredResourceValue
operator|!=
literal|0
condition|)
block|{
name|long
name|tmp
init|=
name|availableResource
operator|.
name|getValue
argument_list|()
operator|/
name|requiredResourceValue
decl_stmt|;
name|min
operator|=
name|min
operator|<
name|tmp
condition|?
name|min
else|:
name|tmp
expr_stmt|;
block|}
block|}
return|return
name|min
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
operator|(
name|int
operator|)
name|min
return|;
block|}
annotation|@
name|Override
DECL|method|divide (Resource clusterResource, Resource numerator, Resource denominator)
specifier|public
name|float
name|divide
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|numerator
parameter_list|,
name|Resource
name|denominator
parameter_list|)
block|{
name|ResourceInformation
index|[]
name|clusterRes
init|=
name|clusterResource
operator|.
name|getResources
argument_list|()
decl_stmt|;
comment|// We have to provide the calculateShares() method with somewhere to store
comment|// the shares. We don't actually need these shares afterwards.
name|double
index|[]
name|numeratorShares
init|=
operator|new
name|double
index|[
name|clusterRes
operator|.
name|length
index|]
decl_stmt|;
name|double
index|[]
name|denominatorShares
init|=
operator|new
name|double
index|[
name|clusterRes
operator|.
name|length
index|]
decl_stmt|;
comment|// We also have to provide a place for calculateShares() to store the max
comment|// shares so that we can use them.
name|double
index|[]
name|max
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|calculateShares
argument_list|(
name|clusterRes
argument_list|,
name|numerator
argument_list|,
name|denominator
argument_list|,
name|numeratorShares
argument_list|,
name|denominatorShares
argument_list|,
name|max
argument_list|)
expr_stmt|;
return|return
call|(
name|float
call|)
argument_list|(
name|max
index|[
literal|0
index|]
operator|/
name|max
index|[
literal|1
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isInvalidDivisor (Resource r)
specifier|public
name|boolean
name|isInvalidDivisor
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
for|for
control|(
name|ResourceInformation
name|res
range|:
name|r
operator|.
name|getResources
argument_list|()
control|)
block|{
if|if
condition|(
name|res
operator|.
name|getValue
argument_list|()
operator|==
literal|0L
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|ratio (Resource a, Resource b)
specifier|public
name|float
name|ratio
parameter_list|(
name|Resource
name|a
parameter_list|,
name|Resource
name|b
parameter_list|)
block|{
name|float
name|ratio
init|=
literal|0.0f
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|aResourceInformation
init|=
name|a
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|bResourceInformation
init|=
name|b
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|bResourceValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|bResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|aResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|bResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|tmp
init|=
operator|(
name|float
operator|)
name|aResourceInformation
operator|.
name|getValue
argument_list|()
operator|/
operator|(
name|float
operator|)
name|bResourceValue
decl_stmt|;
name|ratio
operator|=
name|ratio
operator|>
name|tmp
condition|?
name|ratio
else|:
name|tmp
expr_stmt|;
block|}
return|return
name|ratio
return|;
block|}
annotation|@
name|Override
DECL|method|divideAndCeil (Resource numerator, int denominator)
specifier|public
name|Resource
name|divideAndCeil
parameter_list|(
name|Resource
name|numerator
parameter_list|,
name|int
name|denominator
parameter_list|)
block|{
return|return
name|divideAndCeil
argument_list|(
name|numerator
argument_list|,
operator|(
name|long
operator|)
name|denominator
argument_list|)
return|;
block|}
DECL|method|divideAndCeil (Resource numerator, long denominator)
specifier|public
name|Resource
name|divideAndCeil
parameter_list|(
name|Resource
name|numerator
parameter_list|,
name|long
name|denominator
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|numerator
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|resourceInformation
init|=
name|ret
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|resourceInformation
operator|.
name|setValue
argument_list|(
name|divideAndCeil
argument_list|(
name|resourceInformation
operator|.
name|getValue
argument_list|()
argument_list|,
name|denominator
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|divideAndCeil (Resource numerator, float denominator)
specifier|public
name|Resource
name|divideAndCeil
parameter_list|(
name|Resource
name|numerator
parameter_list|,
name|float
name|denominator
parameter_list|)
block|{
return|return
name|Resources
operator|.
name|createResource
argument_list|(
name|divideAndCeil
argument_list|(
name|numerator
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|denominator
argument_list|)
argument_list|,
name|divideAndCeil
argument_list|(
name|numerator
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|denominator
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|normalize (Resource r, Resource minimumResource, Resource maximumResource, Resource stepFactor)
specifier|public
name|Resource
name|normalize
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|minimumResource
parameter_list|,
name|Resource
name|maximumResource
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|rResourceInformation
init|=
name|r
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|minimumResourceInformation
init|=
name|minimumResource
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|maximumResourceInformation
init|=
name|maximumResource
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|stepFactorResourceInformation
init|=
name|stepFactor
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|tmp
init|=
name|ret
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|rValue
init|=
name|rResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|minimumValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|minimumResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|minimumResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|maximumValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|maximumResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|maximumResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|stepFactorValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|stepFactorResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|stepFactorResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|value
init|=
name|Math
operator|.
name|max
argument_list|(
name|rValue
argument_list|,
name|minimumValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|stepFactorValue
operator|!=
literal|0
condition|)
block|{
name|value
operator|=
name|roundUp
argument_list|(
name|value
argument_list|,
name|stepFactorValue
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|setValue
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|value
argument_list|,
name|maximumValue
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setResourceInformation
argument_list|(
name|i
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|roundUp (Resource r, Resource stepFactor)
specifier|public
name|Resource
name|roundUp
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|rounding
argument_list|(
name|r
argument_list|,
name|stepFactor
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|roundDown (Resource r, Resource stepFactor)
specifier|public
name|Resource
name|roundDown
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|rounding
argument_list|(
name|r
argument_list|,
name|stepFactor
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|rounding (Resource r, Resource stepFactor, boolean roundUp)
specifier|private
name|Resource
name|rounding
parameter_list|(
name|Resource
name|r
parameter_list|,
name|Resource
name|stepFactor
parameter_list|,
name|boolean
name|roundUp
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|rResourceInformation
init|=
name|r
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|stepFactorResourceInformation
init|=
name|stepFactor
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|rValue
init|=
name|rResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|stepFactorValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|stepFactorResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|stepFactorResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|value
init|=
name|rValue
decl_stmt|;
if|if
condition|(
name|stepFactorValue
operator|!=
literal|0
condition|)
block|{
name|value
operator|=
name|roundUp
condition|?
name|roundUp
argument_list|(
name|rValue
argument_list|,
name|stepFactorValue
argument_list|)
else|:
name|roundDown
argument_list|(
name|rValue
argument_list|,
name|stepFactorValue
argument_list|)
expr_stmt|;
block|}
name|ResourceInformation
operator|.
name|copy
argument_list|(
name|rResourceInformation
argument_list|,
name|ret
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|multiplyAndNormalizeUp (Resource r, double by, Resource stepFactor)
specifier|public
name|Resource
name|multiplyAndNormalizeUp
parameter_list|(
name|Resource
name|r
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|multiplyAndNormalize
argument_list|(
name|r
argument_list|,
name|by
argument_list|,
name|stepFactor
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|multiplyAndNormalizeDown (Resource r, double by, Resource stepFactor)
specifier|public
name|Resource
name|multiplyAndNormalizeDown
parameter_list|(
name|Resource
name|r
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|stepFactor
parameter_list|)
block|{
return|return
name|this
operator|.
name|multiplyAndNormalize
argument_list|(
name|r
argument_list|,
name|by
argument_list|,
name|stepFactor
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|multiplyAndNormalize (Resource r, double by, Resource stepFactor, boolean roundUp)
specifier|private
name|Resource
name|multiplyAndNormalize
parameter_list|(
name|Resource
name|r
parameter_list|,
name|double
name|by
parameter_list|,
name|Resource
name|stepFactor
parameter_list|,
name|boolean
name|roundUp
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|rResourceInformation
init|=
name|r
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|stepFactorResourceInformation
init|=
name|stepFactor
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|tmp
init|=
name|ret
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|rValue
init|=
name|rResourceInformation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|long
name|stepFactorValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|stepFactorResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|rResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|stepFactorResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|value
decl_stmt|;
if|if
condition|(
name|stepFactorValue
operator|!=
literal|0
condition|)
block|{
name|value
operator|=
name|roundUp
condition|?
name|roundUp
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
argument_list|,
name|stepFactorValue
argument_list|)
else|:
name|roundDown
argument_list|(
call|(
name|long
call|)
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
argument_list|,
name|stepFactorValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|roundUp
condition|?
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
else|:
call|(
name|long
call|)
argument_list|(
name|rValue
operator|*
name|by
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|fitsIn (Resource cluster, Resource smaller, Resource bigger)
specifier|public
name|boolean
name|fitsIn
parameter_list|(
name|Resource
name|cluster
parameter_list|,
name|Resource
name|smaller
parameter_list|,
name|Resource
name|bigger
parameter_list|)
block|{
name|int
name|maxLength
init|=
name|ResourceUtils
operator|.
name|getResourceTypesArray
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxLength
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|sResourceInformation
init|=
name|smaller
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ResourceInformation
name|bResourceInformation
init|=
name|bigger
operator|.
name|getResourceInformation
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|sResourceValue
init|=
name|UnitsConversionUtil
operator|.
name|convert
argument_list|(
name|sResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|bResourceInformation
operator|.
name|getUnits
argument_list|()
argument_list|,
name|sResourceInformation
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sResourceValue
operator|>
name|bResourceInformation
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isAnyMajorResourceZero (Resource resource)
specifier|public
name|boolean
name|isAnyMajorResourceZero
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
return|return
name|resource
operator|.
name|getMemorySize
argument_list|()
operator|==
literal|0f
operator|||
name|resource
operator|.
name|getVirtualCores
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
end_class

end_unit

