begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationSubmissionContextProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ApplicationSubmissionContextProtoOrBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ContainerLaunchContextProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|LogAggregationContextProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|PriorityProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ReservationIdProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ResourceProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|ResourceRequestProto
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|CharMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|TextFormat
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ApplicationSubmissionContextPBImpl
specifier|public
class|class
name|ApplicationSubmissionContextPBImpl
extends|extends
name|ApplicationSubmissionContext
block|{
DECL|field|proto
name|ApplicationSubmissionContextProto
name|proto
init|=
name|ApplicationSubmissionContextProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
DECL|field|builder
name|ApplicationSubmissionContextProto
operator|.
name|Builder
name|builder
init|=
literal|null
decl_stmt|;
DECL|field|viaProto
name|boolean
name|viaProto
init|=
literal|false
decl_stmt|;
DECL|field|applicationId
specifier|private
name|ApplicationId
name|applicationId
init|=
literal|null
decl_stmt|;
DECL|field|priority
specifier|private
name|Priority
name|priority
init|=
literal|null
decl_stmt|;
DECL|field|amContainer
specifier|private
name|ContainerLaunchContext
name|amContainer
init|=
literal|null
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
DECL|field|applicationTags
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|applicationTags
init|=
literal|null
decl_stmt|;
DECL|field|amResourceRequest
specifier|private
name|ResourceRequest
name|amResourceRequest
init|=
literal|null
decl_stmt|;
DECL|field|logAggregationContext
specifier|private
name|LogAggregationContext
name|logAggregationContext
init|=
literal|null
decl_stmt|;
DECL|field|reservationId
specifier|private
name|ReservationId
name|reservationId
init|=
literal|null
decl_stmt|;
DECL|method|ApplicationSubmissionContextPBImpl ()
specifier|public
name|ApplicationSubmissionContextPBImpl
parameter_list|()
block|{
name|builder
operator|=
name|ApplicationSubmissionContextProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
block|}
DECL|method|ApplicationSubmissionContextPBImpl ( ApplicationSubmissionContextProto proto)
specifier|public
name|ApplicationSubmissionContextPBImpl
parameter_list|(
name|ApplicationSubmissionContextProto
name|proto
parameter_list|)
block|{
name|this
operator|.
name|proto
operator|=
name|proto
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|getProto ()
specifier|public
name|ApplicationSubmissionContextProto
name|getProto
parameter_list|()
block|{
name|mergeLocalToProto
argument_list|()
expr_stmt|;
name|proto
operator|=
name|viaProto
condition|?
name|proto
else|:
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
return|return
name|proto
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getProto
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object other)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|other
argument_list|)
operator|.
name|getProto
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|TextFormat
operator|.
name|shortDebugString
argument_list|(
name|getProto
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mergeLocalToBuilder ()
specifier|private
name|void
name|mergeLocalToBuilder
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|applicationId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setApplicationId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|applicationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|priority
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPriority
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|amContainer
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setAmContainerSpec
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|amContainer
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|resource
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|ResourcePBImpl
operator|)
name|this
operator|.
name|resource
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|equals
argument_list|(
name|builder
operator|.
name|getResource
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setResource
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|applicationTags
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|applicationTags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|clearApplicationTags
argument_list|()
expr_stmt|;
name|builder
operator|.
name|addAllApplicationTags
argument_list|(
name|this
operator|.
name|applicationTags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|amResourceRequest
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setAmContainerResourceRequest
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|amResourceRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|logAggregationContext
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLogAggregationContext
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|logAggregationContext
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|reservationId
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setReservationId
argument_list|(
name|convertToProtoFormat
argument_list|(
name|this
operator|.
name|reservationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mergeLocalToProto ()
specifier|private
name|void
name|mergeLocalToProto
parameter_list|()
block|{
if|if
condition|(
name|viaProto
condition|)
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|mergeLocalToBuilder
argument_list|()
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|viaProto
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|maybeInitBuilder ()
specifier|private
name|void
name|maybeInitBuilder
parameter_list|()
block|{
if|if
condition|(
name|viaProto
operator|||
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
name|ApplicationSubmissionContextProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
expr_stmt|;
block|}
name|viaProto
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|priority
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|priority
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasPriority
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|priority
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|priority
return|;
block|}
annotation|@
name|Override
DECL|method|setPriority (Priority priority)
specifier|public
name|void
name|setPriority
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|priority
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearPriority
argument_list|()
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationId ()
specifier|public
name|ApplicationId
name|getApplicationId
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|applicationId
operator|!=
literal|null
condition|)
block|{
return|return
name|applicationId
return|;
block|}
comment|// Else via proto
if|if
condition|(
operator|!
name|p
operator|.
name|hasApplicationId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|applicationId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|applicationId
return|;
block|}
annotation|@
name|Override
DECL|method|setApplicationId (ApplicationId applicationId)
specifier|public
name|void
name|setApplicationId
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|applicationId
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearApplicationId
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationId
operator|=
name|applicationId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationName ()
specifier|public
name|String
name|getApplicationName
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasApplicationName
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getApplicationName
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|setApplicationName (String applicationName)
specifier|public
name|void
name|setApplicationName
parameter_list|(
name|String
name|applicationName
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|applicationName
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearApplicationName
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setApplicationName
argument_list|(
operator|(
name|applicationName
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueue ()
specifier|public
name|String
name|getQueue
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasQueue
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getQueue
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationType ()
specifier|public
name|String
name|getApplicationType
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasApplicationType
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|p
operator|.
name|getApplicationType
argument_list|()
operator|)
return|;
block|}
DECL|method|initApplicationTags ()
specifier|private
name|void
name|initApplicationTags
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|applicationTags
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
name|this
operator|.
name|applicationTags
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationTags
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|getApplicationTagsList
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getApplicationTags ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getApplicationTags
parameter_list|()
block|{
name|initApplicationTags
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|applicationTags
return|;
block|}
annotation|@
name|Override
DECL|method|setQueue (String queue)
specifier|public
name|void
name|setQueue
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearQueue
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setQueue
argument_list|(
operator|(
name|queue
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setApplicationType (String applicationType)
specifier|public
name|void
name|setApplicationType
parameter_list|(
name|String
name|applicationType
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|applicationType
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearApplicationType
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setApplicationType
argument_list|(
operator|(
name|applicationType
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTags (Set<String> tags)
specifier|private
name|void
name|checkTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
if|if
condition|(
name|tags
operator|.
name|size
argument_list|()
operator|>
name|YarnConfiguration
operator|.
name|APPLICATION_MAX_TAGS
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Too many applicationTags, a maximum of only "
operator|+
name|YarnConfiguration
operator|.
name|APPLICATION_MAX_TAGS
operator|+
literal|" are allowed!"
argument_list|)
throw|;
block|}
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|length
argument_list|()
operator|>
name|YarnConfiguration
operator|.
name|APPLICATION_MAX_TAG_LENGTH
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Tag "
operator|+
name|tag
operator|+
literal|" is too long, "
operator|+
literal|"maximum allowed length of a tag is "
operator|+
name|YarnConfiguration
operator|.
name|APPLICATION_MAX_TAG_LENGTH
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|CharMatcher
operator|.
name|ASCII
operator|.
name|matchesAllOf
argument_list|(
name|tag
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"A tag can only have ASCII "
operator|+
literal|"characters! Invalid tag - "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setApplicationTags (Set<String> tags)
specifier|public
name|void
name|setApplicationTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|tags
operator|==
literal|null
operator|||
name|tags
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|clearApplicationTags
argument_list|()
expr_stmt|;
name|this
operator|.
name|applicationTags
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|checkTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
comment|// Convert applicationTags to lower case and add
name|this
operator|.
name|applicationTags
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|tag
range|:
name|tags
control|)
block|{
name|this
operator|.
name|applicationTags
operator|.
name|add
argument_list|(
name|tag
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAMContainerSpec ()
specifier|public
name|ContainerLaunchContext
name|getAMContainerSpec
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|amContainer
operator|!=
literal|null
condition|)
block|{
return|return
name|amContainer
return|;
block|}
comment|// Else via proto
if|if
condition|(
operator|!
name|p
operator|.
name|hasAmContainerSpec
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|amContainer
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getAmContainerSpec
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|amContainer
return|;
block|}
annotation|@
name|Override
DECL|method|setAMContainerSpec (ContainerLaunchContext amContainer)
specifier|public
name|void
name|setAMContainerSpec
parameter_list|(
name|ContainerLaunchContext
name|amContainer
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|amContainer
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearAmContainerSpec
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|amContainer
operator|=
name|amContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUnmanagedAM ()
specifier|public
name|boolean
name|getUnmanagedAM
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getUnmanagedAm
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setUnmanagedAM (boolean value)
specifier|public
name|void
name|setUnmanagedAM
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setUnmanagedAm
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCancelTokensWhenComplete ()
specifier|public
name|boolean
name|getCancelTokensWhenComplete
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
comment|//There is a default so cancelTokens should never be null
return|return
name|p
operator|.
name|getCancelTokensWhenComplete
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setCancelTokensWhenComplete (boolean cancel)
specifier|public
name|void
name|setCancelTokensWhenComplete
parameter_list|(
name|boolean
name|cancel
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setCancelTokensWhenComplete
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMaxAppAttempts ()
specifier|public
name|int
name|getMaxAppAttempts
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getMaxAppAttempts
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setMaxAppAttempts (int maxAppAttempts)
specifier|public
name|void
name|setMaxAppAttempts
parameter_list|(
name|int
name|maxAppAttempts
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setMaxAppAttempts
argument_list|(
name|maxAppAttempts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|resource
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|resource
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasResource
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|this
operator|.
name|resource
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|resource
return|;
block|}
annotation|@
name|Override
DECL|method|setResource (Resource resource)
specifier|public
name|void
name|setResource
parameter_list|(
name|Resource
name|resource
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearResource
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReservationID ()
specifier|public
name|ReservationId
name|getReservationID
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|reservationId
operator|!=
literal|null
condition|)
block|{
return|return
name|reservationId
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|hasReservationId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|reservationId
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reservationId
return|;
block|}
annotation|@
name|Override
DECL|method|setReservationID (ReservationId reservationID)
specifier|public
name|void
name|setReservationID
parameter_list|(
name|ReservationId
name|reservationID
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|reservationID
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearReservationId
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|reservationId
operator|=
name|reservationID
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
DECL|method|setKeepContainersAcrossApplicationAttempts (boolean keepContainers)
name|setKeepContainersAcrossApplicationAttempts
parameter_list|(
name|boolean
name|keepContainers
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
name|keepContainers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getKeepContainersAcrossApplicationAttempts ()
specifier|public
name|boolean
name|getKeepContainersAcrossApplicationAttempts
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (PriorityProto p)
specifier|private
name|PriorityPBImpl
name|convertFromProtoFormat
parameter_list|(
name|PriorityProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|PriorityPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (Priority t)
specifier|private
name|PriorityProto
name|convertToProtoFormat
parameter_list|(
name|Priority
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|PriorityPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (ResourceRequestProto p)
specifier|private
name|ResourceRequestPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ResourceRequestProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ResourceRequestPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (ResourceRequest t)
specifier|private
name|ResourceRequestProto
name|convertToProtoFormat
parameter_list|(
name|ResourceRequest
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ResourceRequestPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (ApplicationIdProto p)
specifier|private
name|ApplicationIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ApplicationIdProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ApplicationIdPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (ApplicationId t)
specifier|private
name|ApplicationIdProto
name|convertToProtoFormat
parameter_list|(
name|ApplicationId
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ApplicationIdPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat ( ContainerLaunchContextProto p)
specifier|private
name|ContainerLaunchContextPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ContainerLaunchContextProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ContainerLaunchContextPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat ( ContainerLaunchContext t)
specifier|private
name|ContainerLaunchContextProto
name|convertToProtoFormat
parameter_list|(
name|ContainerLaunchContext
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ContainerLaunchContextPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
DECL|method|convertFromProtoFormat (ResourceProto p)
specifier|private
name|ResourcePBImpl
name|convertFromProtoFormat
parameter_list|(
name|ResourceProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ResourcePBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (Resource t)
specifier|private
name|ResourceProto
name|convertToProtoFormat
parameter_list|(
name|Resource
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ResourcePBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNodeLabelExpression ()
specifier|public
name|String
name|getNodeLabelExpression
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|hasNodeLabelExpression
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|p
operator|.
name|getNodeLabelExpression
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setNodeLabelExpression (String labelExpression)
specifier|public
name|void
name|setNodeLabelExpression
parameter_list|(
name|String
name|labelExpression
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|labelExpression
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearNodeLabelExpression
argument_list|()
expr_stmt|;
return|return;
block|}
name|builder
operator|.
name|setNodeLabelExpression
argument_list|(
name|labelExpression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAMContainerResourceRequest ()
specifier|public
name|ResourceRequest
name|getAMContainerResourceRequest
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|amResourceRequest
operator|!=
literal|null
condition|)
block|{
return|return
name|amResourceRequest
return|;
block|}
comment|// Else via proto
if|if
condition|(
operator|!
name|p
operator|.
name|hasAmContainerResourceRequest
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|amResourceRequest
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getAmContainerResourceRequest
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|amResourceRequest
return|;
block|}
annotation|@
name|Override
DECL|method|setAMContainerResourceRequest (ResourceRequest request)
specifier|public
name|void
name|setAMContainerResourceRequest
parameter_list|(
name|ResourceRequest
name|request
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|builder
operator|.
name|clearAmContainerResourceRequest
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|amResourceRequest
operator|=
name|request
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAttemptFailuresValidityInterval ()
specifier|public
name|long
name|getAttemptFailuresValidityInterval
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
return|return
name|p
operator|.
name|getAttemptFailuresValidityInterval
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setAttemptFailuresValidityInterval ( long attemptFailuresValidityInterval)
specifier|public
name|void
name|setAttemptFailuresValidityInterval
parameter_list|(
name|long
name|attemptFailuresValidityInterval
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|attemptFailuresValidityInterval
argument_list|)
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat ( LogAggregationContextProto p)
specifier|private
name|LogAggregationContextPBImpl
name|convertFromProtoFormat
parameter_list|(
name|LogAggregationContextProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|LogAggregationContextPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat ( LogAggregationContext t)
specifier|private
name|LogAggregationContextProto
name|convertToProtoFormat
parameter_list|(
name|LogAggregationContext
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|LogAggregationContextPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLogAggregationContext ()
specifier|public
name|LogAggregationContext
name|getLogAggregationContext
parameter_list|()
block|{
name|ApplicationSubmissionContextProtoOrBuilder
name|p
init|=
name|viaProto
condition|?
name|proto
else|:
name|builder
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|logAggregationContext
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|logAggregationContext
return|;
block|}
comment|// Else via proto
if|if
condition|(
operator|!
name|p
operator|.
name|hasLogAggregationContext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|logAggregationContext
operator|=
name|convertFromProtoFormat
argument_list|(
name|p
operator|.
name|getLogAggregationContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|logAggregationContext
return|;
block|}
annotation|@
name|Override
DECL|method|setLogAggregationContext ( LogAggregationContext logAggregationContext)
specifier|public
name|void
name|setLogAggregationContext
parameter_list|(
name|LogAggregationContext
name|logAggregationContext
parameter_list|)
block|{
name|maybeInitBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|logAggregationContext
operator|==
literal|null
condition|)
name|builder
operator|.
name|clearLogAggregationContext
argument_list|()
expr_stmt|;
name|this
operator|.
name|logAggregationContext
operator|=
name|logAggregationContext
expr_stmt|;
block|}
DECL|method|convertFromProtoFormat (ReservationIdProto p)
specifier|private
name|ReservationIdPBImpl
name|convertFromProtoFormat
parameter_list|(
name|ReservationIdProto
name|p
parameter_list|)
block|{
return|return
operator|new
name|ReservationIdPBImpl
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|convertToProtoFormat (ReservationId t)
specifier|private
name|ReservationIdProto
name|convertToProtoFormat
parameter_list|(
name|ReservationId
name|t
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ReservationIdPBImpl
operator|)
name|t
operator|)
operator|.
name|getProto
argument_list|()
return|;
block|}
block|}
end_class

end_unit

