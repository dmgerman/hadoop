begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.log
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|log
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|APP_OWNER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|CONTAINER_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|CONTAINER_LOG_TYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|ENTITY_STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|YarnWebParams
operator|.
name|NM_NODENAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
operator|.
name|PRE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_class
DECL|class|AggregatedLogsBlock
specifier|public
class|class
name|AggregatedLogsBlock
extends|extends
name|HtmlBlock
block|{
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Inject
DECL|method|AggregatedLogsBlock (Configuration conf)
name|AggregatedLogsBlock
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (Block html)
specifier|protected
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|verifyAndGetContainerId
argument_list|(
name|html
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|verifyAndGetNodeId
argument_list|(
name|html
argument_list|)
decl_stmt|;
name|String
name|appOwner
init|=
name|verifyAndGetAppOwner
argument_list|(
name|html
argument_list|)
decl_stmt|;
name|LogLimits
name|logLimits
init|=
name|verifyAndGetLogLimits
argument_list|(
name|html
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerId
operator|==
literal|null
operator|||
name|nodeId
operator|==
literal|null
operator|||
name|appOwner
operator|==
literal|null
operator|||
name|appOwner
operator|.
name|isEmpty
argument_list|()
operator|||
name|logLimits
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|ApplicationId
name|applicationId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|String
name|logEntity
init|=
name|$
argument_list|(
name|ENTITY_STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|logEntity
operator|==
literal|null
operator|||
name|logEntity
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logEntity
operator|=
name|containerId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conf
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_LOG_AGGREGATION_ENABLED
argument_list|)
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Aggregation is not enabled. Try the nodemanager at "
operator|+
name|nodeId
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|Path
name|remoteRootLogDir
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|)
decl_stmt|;
name|AggregatedLogFormat
operator|.
name|LogReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogReader
argument_list|(
name|conf
argument_list|,
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogFileForApp
argument_list|(
name|remoteRootLogDir
argument_list|,
name|applicationId
argument_list|,
name|appOwner
argument_list|,
name|nodeId
argument_list|,
name|LogAggregationUtils
operator|.
name|getRemoteNodeLogDirSuffix
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// ACLs not available till the log file is opened.
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Logs not available for "
operator|+
name|logEntity
operator|+
literal|". Aggregation may not be complete, "
operator|+
literal|"Check back later or try the nodemanager at "
operator|+
name|nodeId
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|owner
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
literal|null
decl_stmt|;
try|try
block|{
name|owner
operator|=
name|reader
operator|.
name|getApplicationOwner
argument_list|()
expr_stmt|;
name|appAcls
operator|=
name|reader
operator|.
name|getApplicationAcls
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|ApplicationACLsManager
name|aclsManager
init|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|aclsManager
operator|.
name|addApplication
argument_list|(
name|applicationId
argument_list|,
name|appAcls
argument_list|)
expr_stmt|;
name|String
name|remoteUser
init|=
name|request
argument_list|()
operator|.
name|getRemoteUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|callerUGI
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteUser
operator|!=
literal|null
condition|)
block|{
name|callerUGI
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|remoteUser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|callerUGI
operator|!=
literal|null
operator|&&
operator|!
name|aclsManager
operator|.
name|checkAccess
argument_list|(
name|callerUGI
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|owner
argument_list|,
name|applicationId
argument_list|)
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"User ["
operator|+
name|remoteUser
operator|+
literal|"] is not authorized to view the logs for "
operator|+
name|logEntity
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|desiredLogType
init|=
name|$
argument_list|(
name|CONTAINER_LOG_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
name|AggregatedLogFormat
operator|.
name|ContainerLogsReader
name|logReader
init|=
name|reader
operator|.
name|getContainerLogsReader
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|logReader
operator|==
literal|null
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Logs not available for "
operator|+
name|logEntity
operator|+
literal|". Could be caused by the rentention policy"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return;
block|}
name|boolean
name|foundLog
init|=
name|readContainerLogs
argument_list|(
name|html
argument_list|,
name|logReader
argument_list|,
name|logLimits
argument_list|,
name|desiredLogType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|foundLog
condition|)
block|{
if|if
condition|(
name|desiredLogType
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"No logs available for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|html
operator|.
name|h1
argument_list|(
literal|"Unable to locate '"
operator|+
name|desiredLogType
operator|+
literal|"' log for container "
operator|+
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error getting logs for "
operator|+
name|logEntity
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
DECL|method|readContainerLogs (Block html, AggregatedLogFormat.ContainerLogsReader logReader, LogLimits logLimits, String desiredLogType)
specifier|private
name|boolean
name|readContainerLogs
parameter_list|(
name|Block
name|html
parameter_list|,
name|AggregatedLogFormat
operator|.
name|ContainerLogsReader
name|logReader
parameter_list|,
name|LogLimits
name|logLimits
parameter_list|,
name|String
name|desiredLogType
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bufferSize
init|=
literal|65536
decl_stmt|;
name|char
index|[]
name|cbuf
init|=
operator|new
name|char
index|[
name|bufferSize
index|]
decl_stmt|;
name|boolean
name|foundLog
init|=
literal|false
decl_stmt|;
name|String
name|logType
init|=
name|logReader
operator|.
name|nextLog
argument_list|()
decl_stmt|;
while|while
condition|(
name|logType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|desiredLogType
operator|==
literal|null
operator|||
name|desiredLogType
operator|.
name|isEmpty
argument_list|()
operator|||
name|desiredLogType
operator|.
name|equals
argument_list|(
name|logType
argument_list|)
condition|)
block|{
name|long
name|logLength
init|=
name|logReader
operator|.
name|getCurrentLogLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|foundLog
condition|)
block|{
name|html
operator|.
name|pre
argument_list|()
operator|.
name|_
argument_list|(
literal|"\n\n"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
literal|"Log Type: "
operator|+
name|logType
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
literal|"Log Length: "
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|logLength
argument_list|)
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|logLimits
operator|.
name|start
operator|<
literal|0
condition|?
name|logLength
operator|+
name|logLimits
operator|.
name|start
else|:
name|logLimits
operator|.
name|start
decl_stmt|;
name|start
operator|=
name|start
operator|<
literal|0
condition|?
literal|0
else|:
name|start
expr_stmt|;
name|start
operator|=
name|start
operator|>
name|logLength
condition|?
name|logLength
else|:
name|start
expr_stmt|;
name|long
name|end
init|=
name|logLimits
operator|.
name|end
operator|<
literal|0
condition|?
name|logLength
operator|+
name|logLimits
operator|.
name|end
else|:
name|logLimits
operator|.
name|end
decl_stmt|;
name|end
operator|=
name|end
operator|<
literal|0
condition|?
literal|0
else|:
name|end
expr_stmt|;
name|end
operator|=
name|end
operator|>
name|logLength
condition|?
name|logLength
else|:
name|end
expr_stmt|;
name|end
operator|=
name|end
operator|<
name|start
condition|?
name|start
else|:
name|end
expr_stmt|;
name|long
name|toRead
init|=
name|end
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|toRead
operator|<
name|logLength
condition|)
block|{
name|html
operator|.
name|p
argument_list|()
operator|.
name|_
argument_list|(
literal|"Showing "
operator|+
name|toRead
operator|+
literal|" bytes of "
operator|+
name|logLength
operator|+
literal|" total. Click "
argument_list|)
operator|.
name|a
argument_list|(
name|url
argument_list|(
literal|"logs"
argument_list|,
name|$
argument_list|(
name|NM_NODENAME
argument_list|)
argument_list|,
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
argument_list|,
name|$
argument_list|(
name|ENTITY_STRING
argument_list|)
argument_list|,
name|$
argument_list|(
name|APP_OWNER
argument_list|)
argument_list|,
name|logType
argument_list|,
literal|"?start=0"
argument_list|)
argument_list|,
literal|"here"
argument_list|)
operator|.
name|_
argument_list|(
literal|" for the full log."
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|long
name|totalSkipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|totalSkipped
operator|<
name|start
condition|)
block|{
name|long
name|ret
init|=
name|logReader
operator|.
name|skip
argument_list|(
name|start
operator|-
name|totalSkipped
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Premature EOF from container log"
argument_list|)
throw|;
block|}
name|totalSkipped
operator|+=
name|ret
expr_stmt|;
block|}
name|int
name|len
init|=
literal|0
decl_stmt|;
name|int
name|currentToRead
init|=
name|toRead
operator|>
name|bufferSize
condition|?
name|bufferSize
else|:
operator|(
name|int
operator|)
name|toRead
decl_stmt|;
name|PRE
argument_list|<
name|Hamlet
argument_list|>
name|pre
init|=
name|html
operator|.
name|pre
argument_list|()
decl_stmt|;
while|while
condition|(
name|toRead
operator|>
literal|0
operator|&&
operator|(
name|len
operator|=
name|logReader
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
name|currentToRead
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|pre
operator|.
name|_
argument_list|(
operator|new
name|String
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
name|toRead
operator|=
name|toRead
operator|-
name|len
expr_stmt|;
name|currentToRead
operator|=
name|toRead
operator|>
name|bufferSize
condition|?
name|bufferSize
else|:
operator|(
name|int
operator|)
name|toRead
expr_stmt|;
block|}
name|pre
operator|.
name|_
argument_list|()
expr_stmt|;
name|foundLog
operator|=
literal|true
expr_stmt|;
block|}
name|logType
operator|=
name|logReader
operator|.
name|nextLog
argument_list|()
expr_stmt|;
block|}
return|return
name|foundLog
return|;
block|}
DECL|method|verifyAndGetContainerId (Block html)
specifier|private
name|ContainerId
name|verifyAndGetContainerId
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|containerIdStr
init|=
name|$
argument_list|(
name|CONTAINER_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|containerIdStr
operator|==
literal|null
operator|||
name|containerIdStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Cannot get container logs without a ContainerId"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|containerId
operator|=
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Cannot get container logs for invalid containerId: "
operator|+
name|containerIdStr
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|containerId
return|;
block|}
DECL|method|verifyAndGetNodeId (Block html)
specifier|private
name|NodeId
name|verifyAndGetNodeId
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|nodeIdStr
init|=
name|$
argument_list|(
name|NM_NODENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeIdStr
operator|==
literal|null
operator|||
name|nodeIdStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Cannot get container logs without a NodeId"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|NodeId
name|nodeId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|nodeId
operator|=
name|ConverterUtils
operator|.
name|toNodeId
argument_list|(
name|nodeIdStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Cannot get container logs. Invalid nodeId: "
operator|+
name|nodeIdStr
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|nodeId
return|;
block|}
DECL|method|verifyAndGetAppOwner (Block html)
specifier|private
name|String
name|verifyAndGetAppOwner
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|String
name|appOwner
init|=
name|$
argument_list|(
name|APP_OWNER
argument_list|)
decl_stmt|;
if|if
condition|(
name|appOwner
operator|==
literal|null
operator|||
name|appOwner
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Cannot get container logs without an app owner"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
return|return
name|appOwner
return|;
block|}
DECL|class|LogLimits
specifier|private
specifier|static
class|class
name|LogLimits
block|{
DECL|field|start
name|long
name|start
decl_stmt|;
DECL|field|end
name|long
name|end
decl_stmt|;
block|}
DECL|method|verifyAndGetLogLimits (Block html)
specifier|private
name|LogLimits
name|verifyAndGetLogLimits
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|long
name|start
init|=
operator|-
literal|4096
decl_stmt|;
name|long
name|end
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|boolean
name|isValid
init|=
literal|true
decl_stmt|;
name|String
name|startStr
init|=
name|$
argument_list|(
literal|"start"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startStr
operator|!=
literal|null
operator|&&
operator|!
name|startStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|start
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|startStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Invalid log start value: "
operator|+
name|startStr
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|endStr
init|=
name|$
argument_list|(
literal|"end"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endStr
operator|!=
literal|null
operator|&&
operator|!
name|endStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|end
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|endStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|isValid
operator|=
literal|false
expr_stmt|;
name|html
operator|.
name|h1
argument_list|()
operator|.
name|_
argument_list|(
literal|"Invalid log end value: "
operator|+
name|endStr
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isValid
condition|)
block|{
return|return
literal|null
return|;
block|}
name|LogLimits
name|limits
init|=
operator|new
name|LogLimits
argument_list|()
decl_stmt|;
name|limits
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|limits
operator|.
name|end
operator|=
name|end
expr_stmt|;
return|return
name|limits
return|;
block|}
block|}
end_class

end_unit

