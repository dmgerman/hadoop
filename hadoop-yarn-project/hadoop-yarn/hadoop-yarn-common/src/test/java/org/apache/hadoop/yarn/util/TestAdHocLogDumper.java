begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericsUtil
operator|.
name|isLog4jLogger
import|;
end_import

begin_class
DECL|class|TestAdHocLogDumper
specifier|public
class|class
name|TestAdHocLogDumper
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdHocLogDumper
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testDumpingSchedulerLogs ()
specifier|public
name|void
name|testDumpingSchedulerLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|Appender
argument_list|,
name|Priority
argument_list|>
name|levels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|logFilename
init|=
literal|"test.log"
decl_stmt|;
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdHocLogDumper
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|isLog4jLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Enumeration
name|appenders
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getAllAppenders
argument_list|()
init|;
name|appenders
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|obj
init|=
name|appenders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|AppenderSkeleton
condition|)
block|{
name|AppenderSkeleton
name|appender
init|=
operator|(
name|AppenderSkeleton
operator|)
name|obj
decl_stmt|;
name|levels
operator|.
name|put
argument_list|(
name|appender
argument_list|,
name|appender
operator|.
name|getThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|AdHocLogDumper
name|dumper
init|=
operator|new
name|AdHocLogDumper
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|logFilename
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|dumpLogs
argument_list|(
literal|"DEBUG"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"test message 1"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"test message 2"
argument_list|)
expr_stmt|;
name|File
name|logFile
init|=
operator|new
name|File
argument_list|(
name|logFilename
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|long
name|lastWrite
init|=
name|logFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lastWrite
operator|<
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|logFile
operator|.
name|length
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// make sure levels are set back to their original values
if|if
condition|(
name|isLog4jLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Enumeration
name|appenders
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
operator|.
name|getAllAppenders
argument_list|()
init|;
name|appenders
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Object
name|obj
init|=
name|appenders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|AppenderSkeleton
condition|)
block|{
name|AppenderSkeleton
name|appender
init|=
operator|(
name|AppenderSkeleton
operator|)
name|obj
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|levels
operator|.
name|get
argument_list|(
name|appender
argument_list|)
argument_list|,
name|appender
operator|.
name|getThreshold
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|del
init|=
name|logFile
operator|.
name|delete
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|del
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Couldn't clean up after test"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

