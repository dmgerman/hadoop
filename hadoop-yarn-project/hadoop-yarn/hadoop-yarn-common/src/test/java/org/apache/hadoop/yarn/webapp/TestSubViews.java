begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|test
operator|.
name|WebAppTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlPage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestSubViews
specifier|public
class|class
name|TestSubViews
block|{
DECL|class|MainView
specifier|static
specifier|public
class|class
name|MainView
extends|extends
name|HtmlPage
block|{
annotation|@
name|Override
DECL|method|render (Page.HTML<_> html)
specifier|public
name|void
name|render
parameter_list|(
name|Page
operator|.
name|HTML
argument_list|<
name|_
argument_list|>
name|html
parameter_list|)
block|{
name|html
operator|.
name|body
argument_list|()
operator|.
name|div
argument_list|()
operator|.
name|_
argument_list|(
name|Sub1
operator|.
name|class
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|div
argument_list|()
operator|.
name|i
argument_list|(
literal|"inline text"
argument_list|)
operator|.
name|_
argument_list|(
name|Sub2
operator|.
name|class
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Sub1
specifier|static
specifier|public
class|class
name|Sub1
extends|extends
name|HtmlBlock
block|{
annotation|@
name|Override
DECL|method|render (Block html)
specifier|public
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|html
operator|.
name|div
argument_list|(
literal|"#sub1"
argument_list|)
operator|.
name|_
argument_list|(
literal|"sub1 text"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Sub2
specifier|static
specifier|public
class|class
name|Sub2
extends|extends
name|HtmlBlock
block|{
annotation|@
name|Override
DECL|method|render (Block html)
specifier|public
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|html
operator|.
name|pre
argument_list|()
operator|.
name|_
argument_list|(
literal|"sub2 text"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSubView ()
annotation|@
name|Test
specifier|public
name|void
name|testSubView
parameter_list|()
throws|throws
name|Exception
block|{
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|injector
operator|.
name|getInstance
argument_list|(
name|MainView
operator|.
name|class
argument_list|)
operator|.
name|render
argument_list|()
expr_stmt|;
name|PrintWriter
name|out
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"sub1 text"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"sub2 text"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|times
argument_list|(
literal|16
argument_list|)
argument_list|)
operator|.
name|println
argument_list|()
expr_stmt|;
comment|// test inline transition across views
block|}
block|}
end_class

end_unit

