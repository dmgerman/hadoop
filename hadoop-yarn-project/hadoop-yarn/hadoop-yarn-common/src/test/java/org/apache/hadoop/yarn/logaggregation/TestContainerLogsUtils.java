begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_comment
comment|/**  * This class contains several utility functions for log aggregation tests.  */
end_comment

begin_class
DECL|class|TestContainerLogsUtils
specifier|public
specifier|final
class|class
name|TestContainerLogsUtils
block|{
DECL|method|TestContainerLogsUtils ()
specifier|private
name|TestContainerLogsUtils
parameter_list|()
block|{}
comment|/**    * Utility function to create container log file and upload    * it into remote file system.    * @param conf the configuration    * @param fs the FileSystem    * @param rootLogDir the root log directory    * @param containerId the containerId    * @param nodeId the nodeId    * @param fileName the log file name    * @param user the application user    * @param content the log context    * @param deletePreviousRemoteLogDir whether to delete remote log dir.    * @throws IOException if we can not create log files locally    *         or we can not upload container logs into RemoteFS.    */
DECL|method|createContainerLogFileInRemoteFS (Configuration conf, FileSystem fs, String rootLogDir, ContainerId containerId, NodeId nodeId, String fileName, String user, String content, boolean deleteRemoteLogDir)
specifier|public
specifier|static
name|void
name|createContainerLogFileInRemoteFS
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|rootLogDir
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|content
parameter_list|,
name|boolean
name|deleteRemoteLogDir
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|//prepare the logs for remote directory
name|ApplicationId
name|appId
init|=
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// create local logs
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rootLogDirList
operator|.
name|add
argument_list|(
name|rootLogDir
argument_list|)
expr_stmt|;
name|Path
name|rootLogDirPath
init|=
operator|new
name|Path
argument_list|(
name|rootLogDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|rootLogDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootLogDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootLogDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appLogsDir
init|=
operator|new
name|Path
argument_list|(
name|rootLogDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|appLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|appLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|createContainerLogInLocalDir
argument_list|(
name|appLogsDir
argument_list|,
name|containerId
argument_list|,
name|fs
argument_list|,
name|fileName
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// upload container logs to remote log dir
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|)
argument_list|,
name|user
operator|+
literal|"/logs/"
operator|+
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
operator|&&
name|deleteRemoteLogDir
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|uploadContainerLogIntoRemoteDir
argument_list|(
name|ugi
argument_list|,
name|conf
argument_list|,
name|rootLogDirList
argument_list|,
name|nodeId
argument_list|,
name|containerId
argument_list|,
name|path
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainerLogInLocalDir (Path appLogsDir, ContainerId containerId, FileSystem fs, String fileName, String content)
specifier|private
specifier|static
name|void
name|createContainerLogInLocalDir
parameter_list|(
name|Path
name|appLogsDir
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|containerLogsDir
init|=
operator|new
name|Path
argument_list|(
name|appLogsDir
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|containerLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|containerLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|containerLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|containerLogsDir
operator|.
name|toString
argument_list|()
argument_list|,
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|uploadContainerLogIntoRemoteDir (UserGroupInformation ugi, Configuration configuration, List<String> rootLogDirs, NodeId nodeId, ContainerId containerId, Path appDir, FileSystem fs)
specifier|private
specifier|static
name|void
name|uploadContainerLogIntoRemoteDir
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|,
name|Configuration
name|configuration
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|rootLogDirs
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|Path
name|appDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|appDir
argument_list|,
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
argument_list|)
decl_stmt|;
name|AggregatedLogFormat
operator|.
name|LogWriter
name|writer
init|=
operator|new
name|AggregatedLogFormat
operator|.
name|LogWriter
argument_list|(
name|configuration
argument_list|,
name|path
argument_list|,
name|ugi
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeApplicationOwner
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|AggregatedLogFormat
operator|.
name|LogKey
argument_list|(
name|containerId
argument_list|)
argument_list|,
operator|new
name|AggregatedLogFormat
operator|.
name|LogValue
argument_list|(
name|rootLogDirs
argument_list|,
name|containerId
argument_list|,
name|ugi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

