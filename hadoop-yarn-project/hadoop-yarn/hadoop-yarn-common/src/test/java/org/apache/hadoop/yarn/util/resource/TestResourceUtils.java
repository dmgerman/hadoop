begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestResourceUtils
specifier|public
class|class
name|TestResourceUtils
block|{
DECL|class|ResourceFileInformation
specifier|static
class|class
name|ResourceFileInformation
block|{
DECL|field|filename
name|String
name|filename
decl_stmt|;
DECL|field|resourceCount
name|int
name|resourceCount
decl_stmt|;
DECL|field|resourceNameUnitsMap
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|resourceNameUnitsMap
decl_stmt|;
DECL|method|ResourceFileInformation (String name, int count)
specifier|public
name|ResourceFileInformation
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|filename
operator|=
name|name
expr_stmt|;
name|resourceCount
operator|=
name|count
expr_stmt|;
name|resourceNameUnitsMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resource-types-1.xml"
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|source
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"resource-types.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMemoryAndVcores (Map<String, ResourceInformation> res)
specifier|private
name|void
name|testMemoryAndVcores
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|res
parameter_list|)
block|{
name|String
name|memory
init|=
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|vcores
init|=
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Resource 'memory' missing"
argument_list|,
name|res
operator|.
name|containsKey
argument_list|(
name|memory
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"'memory' units incorrect"
argument_list|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|memory
argument_list|)
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"'memory' types incorrect"
argument_list|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|memory
argument_list|)
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Resource 'vcores' missing"
argument_list|,
name|res
operator|.
name|containsKey
argument_list|(
name|vcores
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"'vcores' units incorrect"
argument_list|,
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getUnits
argument_list|()
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|vcores
argument_list|)
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"'vcores' type incorrect"
argument_list|,
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|vcores
argument_list|)
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetResourceTypes ()
specifier|public
name|void
name|testGetResourceTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|res
init|=
name|ResourceUtils
operator|.
name|getResourceTypes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|testMemoryAndVcores
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetResourceTypesConfigs ()
specifier|public
name|void
name|testGetResourceTypesConfigs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|ResourceFileInformation
name|testFile1
init|=
operator|new
name|ResourceFileInformation
argument_list|(
literal|"resource-types-1.xml"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ResourceFileInformation
name|testFile2
init|=
operator|new
name|ResourceFileInformation
argument_list|(
literal|"resource-types-2.xml"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|testFile2
operator|.
name|resourceNameUnitsMap
operator|.
name|put
argument_list|(
literal|"resource1"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|ResourceFileInformation
name|testFile3
init|=
operator|new
name|ResourceFileInformation
argument_list|(
literal|"resource-types-3.xml"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|testFile3
operator|.
name|resourceNameUnitsMap
operator|.
name|put
argument_list|(
literal|"resource2"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ResourceFileInformation
name|testFile4
init|=
operator|new
name|ResourceFileInformation
argument_list|(
literal|"resource-types-4.xml"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|testFile4
operator|.
name|resourceNameUnitsMap
operator|.
name|put
argument_list|(
literal|"resource1"
argument_list|,
literal|"G"
argument_list|)
expr_stmt|;
name|testFile4
operator|.
name|resourceNameUnitsMap
operator|.
name|put
argument_list|(
literal|"resource2"
argument_list|,
literal|"m"
argument_list|)
expr_stmt|;
name|ResourceFileInformation
index|[]
name|tests
init|=
block|{
name|testFile1
block|,
name|testFile2
block|,
name|testFile3
block|,
name|testFile4
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|res
decl_stmt|;
for|for
control|(
name|ResourceFileInformation
name|testInformation
range|:
name|tests
control|)
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|()
expr_stmt|;
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|testInformation
operator|.
name|filename
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|source
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"resource-types.xml"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|res
operator|=
name|ResourceUtils
operator|.
name|getResourceTypes
argument_list|()
expr_stmt|;
name|testMemoryAndVcores
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|testInformation
operator|.
name|resourceCount
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|testInformation
operator|.
name|resourceNameUnitsMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|resourceName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Missing key "
operator|+
name|resourceName
argument_list|,
name|res
operator|.
name|containsKey
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|resourceName
argument_list|)
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetResourceTypesConfigErrors ()
specifier|public
name|void
name|testGetResourceTypesConfigErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|String
index|[]
name|resourceFiles
init|=
block|{
literal|"resource-types-error-1.xml"
block|,
literal|"resource-types-error-2.xml"
block|,
literal|"resource-types-error-3.xml"
block|,
literal|"resource-types-error-4.xml"
block|}
decl_stmt|;
for|for
control|(
name|String
name|resourceFile
range|:
name|resourceFiles
control|)
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|()
expr_stmt|;
name|File
name|dest
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resourceFile
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|dest
operator|=
operator|new
name|File
argument_list|(
name|source
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"resource-types.xml"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|getResourceTypes
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected error with file "
operator|+
name|resourceFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|ne
parameter_list|)
block|{
throw|throw
name|ne
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testInitializeResourcesMap ()
specifier|public
name|void
name|testInitializeResourcesMap
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|empty
init|=
block|{
literal|""
block|,
literal|""
block|}
decl_stmt|;
name|String
index|[]
name|res1
init|=
block|{
literal|"resource1"
block|,
literal|"m"
block|}
decl_stmt|;
name|String
index|[]
name|res2
init|=
block|{
literal|"resource2"
block|,
literal|"G"
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|test1
init|=
block|{
name|empty
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|test2
init|=
block|{
name|res1
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|test3
init|=
block|{
name|res2
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|test4
init|=
block|{
name|res1
block|,
name|res2
block|}
decl_stmt|;
name|String
index|[]
index|[]
index|[]
name|allTests
init|=
block|{
name|test1
block|,
name|test2
block|,
name|test3
block|,
name|test4
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
index|[]
name|test
range|:
name|allTests
control|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|String
name|resSt
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
index|[]
name|resources
range|:
name|test
control|)
block|{
name|resSt
operator|+=
operator|(
name|resources
index|[
literal|0
index|]
operator|+
literal|","
operator|)
expr_stmt|;
block|}
name|resSt
operator|=
name|resSt
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|resSt
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|resSt
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|resources
range|:
name|test
control|)
block|{
name|String
name|name
init|=
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|resources
index|[
literal|0
index|]
operator|+
literal|".units"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|resources
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourceUtils
operator|.
name|initializeResourcesMap
argument_list|(
name|conf
argument_list|,
name|ret
argument_list|)
expr_stmt|;
comment|// for test1, 4 - length will be 1, 4
comment|// for the others, len will be 3
name|int
name|len
init|=
literal|3
decl_stmt|;
if|if
condition|(
name|test
operator|==
name|test1
condition|)
block|{
name|len
operator|=
literal|2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|test
operator|==
name|test4
condition|)
block|{
name|len
operator|=
literal|4
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|len
argument_list|,
name|ret
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|resources
range|:
name|test
control|)
block|{
if|if
condition|(
name|resources
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ret
operator|.
name|containsKey
argument_list|(
name|resources
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceInformation
name|resInfo
init|=
name|ret
operator|.
name|get
argument_list|(
name|resources
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resources
index|[
literal|1
index|]
argument_list|,
name|resInfo
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
name|resInfo
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// we must always have memory and vcores with their fixed units
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ret
operator|.
name|containsKey
argument_list|(
literal|"memory-mb"
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceInformation
name|memInfo
init|=
name|ret
operator|.
name|get
argument_list|(
literal|"memory-mb"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mi"
argument_list|,
name|memInfo
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
name|memInfo
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ret
operator|.
name|containsKey
argument_list|(
literal|"vcores"
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceInformation
name|vcoresInfo
init|=
name|ret
operator|.
name|get
argument_list|(
literal|"vcores"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|vcoresInfo
operator|.
name|getUnits
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
name|vcoresInfo
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInitializeResourcesMapErrors ()
specifier|public
name|void
name|testInitializeResourcesMapErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|mem1
init|=
block|{
literal|"memory-mb"
block|,
literal|""
block|}
decl_stmt|;
name|String
index|[]
name|vcores1
init|=
block|{
literal|"vcores"
block|,
literal|"M"
block|}
decl_stmt|;
name|String
index|[]
name|mem2
init|=
block|{
literal|"memory-mb"
block|,
literal|"m"
block|}
decl_stmt|;
name|String
index|[]
name|vcores2
init|=
block|{
literal|"vcores"
block|,
literal|"G"
block|}
decl_stmt|;
name|String
index|[]
name|mem3
init|=
block|{
literal|"memory"
block|,
literal|""
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|test1
init|=
block|{
name|mem1
block|,
name|vcores1
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|test2
init|=
block|{
name|mem2
block|,
name|vcores2
block|}
decl_stmt|;
name|String
index|[]
index|[]
name|test3
init|=
block|{
name|mem3
block|}
decl_stmt|;
name|String
index|[]
index|[]
index|[]
name|allTests
init|=
block|{
name|test1
block|,
name|test2
block|,
name|test3
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
index|[]
name|test
range|:
name|allTests
control|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|String
name|resSt
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
index|[]
name|resources
range|:
name|test
control|)
block|{
name|resSt
operator|+=
operator|(
name|resources
index|[
literal|0
index|]
operator|+
literal|","
operator|)
expr_stmt|;
block|}
name|resSt
operator|=
name|resSt
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|resSt
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|resSt
argument_list|)
expr_stmt|;
for|for
control|(
name|String
index|[]
name|resources
range|:
name|test
control|)
block|{
name|String
name|name
init|=
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|resources
index|[
literal|0
index|]
operator|+
literal|".units"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|resources
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ResourceUtils
operator|.
name|initializeResourcesMap
argument_list|(
name|conf
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"resource map initialization should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testGetResourceInformation ()
specifier|public
name|void
name|testGetResourceInformation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|testRun
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|setupResourceTypes
argument_list|(
name|conf
argument_list|,
literal|"resource-types-4.xml"
argument_list|)
expr_stmt|;
comment|// testRun.put("node-resources-1.xml", Resource.newInstance(1024, 1));
name|Resource
name|test3Resources
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|test3Resources
operator|.
name|setResourceInformation
argument_list|(
literal|"resource1"
argument_list|,
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
literal|"resource1"
argument_list|,
literal|"Gi"
argument_list|,
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|test3Resources
operator|.
name|setResourceInformation
argument_list|(
literal|"resource2"
argument_list|,
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
literal|"resource2"
argument_list|,
literal|"m"
argument_list|,
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|testRun
operator|.
name|put
argument_list|(
literal|"node-resources-2.xml"
argument_list|,
name|test3Resources
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|testRun
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|resourceFile
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ResourceUtils
operator|.
name|resetNodeResources
argument_list|()
expr_stmt|;
name|File
name|dest
decl_stmt|;
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|resourceFile
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|dest
operator|=
operator|new
name|File
argument_list|(
name|source
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"node-resources.xml"
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|actual
init|=
name|ResourceUtils
operator|.
name|getNodeResourceInformation
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|actual
operator|.
name|size
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getResources
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceInformation
name|resInfo
range|:
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getResources
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resInfo
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|resInfo
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setupResourceTypes (Configuration conf, String filename)
specifier|public
specifier|static
name|String
name|setupResourceTypes
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|source
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|source
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"resource-types.xml"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFile
argument_list|(
name|source
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|getResourceTypes
argument_list|()
expr_stmt|;
return|return
name|dest
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

