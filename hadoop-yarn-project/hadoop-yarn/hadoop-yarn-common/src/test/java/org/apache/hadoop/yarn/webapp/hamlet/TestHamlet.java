begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.hamlet
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|SubView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|Hamlet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|hamlet
operator|.
name|HamletSpec
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestHamlet
specifier|public
class|class
name|TestHamlet
block|{
DECL|method|testHamlet ()
annotation|@
name|Test
specifier|public
name|void
name|testHamlet
parameter_list|()
block|{
name|Hamlet
name|h
init|=
name|newHamlet
argument_list|()
operator|.
name|title
argument_list|(
literal|"test"
argument_list|)
operator|.
name|h1
argument_list|(
literal|"heading 1"
argument_list|)
operator|.
name|p
argument_list|(
literal|"#id.class"
argument_list|)
operator|.
name|b
argument_list|(
literal|"hello"
argument_list|)
operator|.
name|em
argument_list|(
literal|"world!"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|div
argument_list|(
literal|"#footer"
argument_list|)
operator|.
name|_
argument_list|(
literal|"Brought to you by"
argument_list|)
operator|.
name|a
argument_list|(
literal|"http://hostname/"
argument_list|,
literal|"Somebody"
argument_list|)
operator|.
name|_
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
name|h
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|nestLevel
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<title"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</title>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<h1"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"heading 1"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</h1>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<p"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" id=\"id\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" class=\"class\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<b"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"hello"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<em"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"world!"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</em>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<div"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" id=\"footer\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"Brought to you by"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<a"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" href=\"http://hostname/\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"Somebody"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</a>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</div>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|print
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
block|}
DECL|method|testTable ()
annotation|@
name|Test
specifier|public
name|void
name|testTable
parameter_list|()
block|{
name|Hamlet
name|h
init|=
name|newHamlet
argument_list|()
operator|.
name|title
argument_list|(
literal|"test table"
argument_list|)
operator|.
name|link
argument_list|(
literal|"style.css"
argument_list|)
decl_stmt|;
name|TABLE
name|t
init|=
name|h
operator|.
name|table
argument_list|(
literal|"#id"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|t
operator|.
name|tr
argument_list|()
operator|.
name|td
argument_list|(
literal|"1"
argument_list|)
operator|.
name|td
argument_list|(
literal|"2"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
block|}
name|t
operator|.
name|_
argument_list|()
expr_stmt|;
name|PrintWriter
name|out
init|=
name|h
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|nestLevel
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"<table"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"</table>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEnumAttrs ()
annotation|@
name|Test
specifier|public
name|void
name|testEnumAttrs
parameter_list|()
block|{
name|Hamlet
name|h
init|=
name|newHamlet
argument_list|()
operator|.
name|meta_http
argument_list|(
literal|"Content-type"
argument_list|,
literal|"text/html; charset=utf-8"
argument_list|)
operator|.
name|title
argument_list|(
literal|"test enum attrs"
argument_list|)
operator|.
name|link
argument_list|()
operator|.
name|$rel
argument_list|(
literal|"stylesheet"
argument_list|)
operator|.
name|$media
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Media
operator|.
name|screen
argument_list|,
name|Media
operator|.
name|print
argument_list|)
argument_list|)
operator|.
name|$type
argument_list|(
literal|"text/css"
argument_list|)
operator|.
name|$href
argument_list|(
literal|"style.css"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|link
argument_list|()
operator|.
name|$rel
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|LinkType
operator|.
name|index
argument_list|,
name|LinkType
operator|.
name|start
argument_list|)
argument_list|)
operator|.
name|$href
argument_list|(
literal|"index.html"
argument_list|)
operator|.
name|_
argument_list|()
decl_stmt|;
name|h
operator|.
name|div
argument_list|(
literal|"#content"
argument_list|)
operator|.
name|_
argument_list|(
literal|"content"
argument_list|)
operator|.
name|_
argument_list|()
expr_stmt|;
name|PrintWriter
name|out
init|=
name|h
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|nestLevel
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" media=\"screen, print\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" rel=\"start index\""
argument_list|)
expr_stmt|;
block|}
DECL|method|testScriptStyle ()
annotation|@
name|Test
specifier|public
name|void
name|testScriptStyle
parameter_list|()
block|{
name|Hamlet
name|h
init|=
name|newHamlet
argument_list|()
operator|.
name|script
argument_list|(
literal|"a.js"
argument_list|)
operator|.
name|script
argument_list|(
literal|"b.js"
argument_list|)
operator|.
name|style
argument_list|(
literal|"h1 { font-size: 1.2em }"
argument_list|)
decl_stmt|;
name|PrintWriter
name|out
init|=
name|h
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|nestLevel
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|print
argument_list|(
literal|" type=\"text/javascript\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" type=\"text/css\""
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreformatted ()
annotation|@
name|Test
specifier|public
name|void
name|testPreformatted
parameter_list|()
block|{
name|Hamlet
name|h
init|=
name|newHamlet
argument_list|()
operator|.
name|div
argument_list|()
operator|.
name|i
argument_list|(
literal|"inline before pre"
argument_list|)
operator|.
name|pre
argument_list|()
operator|.
name|_
argument_list|(
literal|"pre text1\npre text2"
argument_list|)
operator|.
name|i
argument_list|(
literal|"inline in pre"
argument_list|)
operator|.
name|_
argument_list|(
literal|"pre text after inline"
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|i
argument_list|(
literal|"inline after pre"
argument_list|)
operator|.
name|_
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
name|h
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|h
operator|.
name|indents
argument_list|)
expr_stmt|;
block|}
DECL|class|TestView1
specifier|static
class|class
name|TestView1
implements|implements
name|SubView
block|{
DECL|method|renderPartial ()
annotation|@
name|Override
specifier|public
name|void
name|renderPartial
parameter_list|()
block|{}
block|}
DECL|class|TestView2
specifier|static
class|class
name|TestView2
implements|implements
name|SubView
block|{
DECL|method|renderPartial ()
annotation|@
name|Override
specifier|public
name|void
name|renderPartial
parameter_list|()
block|{}
block|}
DECL|method|testSubViews ()
annotation|@
name|Test
specifier|public
name|void
name|testSubViews
parameter_list|()
block|{
name|Hamlet
name|h
init|=
name|newHamlet
argument_list|()
operator|.
name|title
argument_list|(
literal|"test sub-views"
argument_list|)
operator|.
name|div
argument_list|(
literal|"#view1"
argument_list|)
operator|.
name|_
argument_list|(
name|TestView1
operator|.
name|class
argument_list|)
operator|.
name|_
argument_list|()
operator|.
name|div
argument_list|(
literal|"#view2"
argument_list|)
operator|.
name|_
argument_list|(
name|TestView2
operator|.
name|class
argument_list|)
operator|.
name|_
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
name|h
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|h
operator|.
name|nestLevel
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"["
operator|+
name|TestView1
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"["
operator|+
name|TestView2
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|method|newHamlet ()
specifier|static
name|Hamlet
name|newHamlet
parameter_list|()
block|{
name|PrintWriter
name|out
init|=
name|spy
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Hamlet
argument_list|(
name|out
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
end_class

end_unit

