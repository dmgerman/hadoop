begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client.api.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|CollectorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|TimelineDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
DECL|class|TestTimelineClientV2Impl
specifier|public
class|class
name|TestTimelineClientV2Impl
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTimelineClientV2Impl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
name|TestV2TimelineClient
name|client
decl_stmt|;
DECL|field|TIME_TO_SLEEP
specifier|private
specifier|static
specifier|final
name|long
name|TIME_TO_SLEEP
init|=
literal|150L
decl_stmt|;
DECL|field|EXCEPTION_MSG
specifier|private
specifier|static
specifier|final
name|String
name|EXCEPTION_MSG
init|=
literal|"Exception in the content"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NUMBER_OF_ASYNC_ENTITIES_TO_MERGE
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|currTestName
operator|.
name|getMethodName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"testRetryOnConnectionFailure"
argument_list|)
condition|)
block|{
name|client
operator|=
name|createTimelineClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Rule
DECL|field|currTestName
specifier|public
name|TestName
name|currTestName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|method|createTimelineClient (YarnConfiguration config)
specifier|private
name|TestV2TimelineClient
name|createTimelineClient
parameter_list|(
name|YarnConfiguration
name|config
parameter_list|)
block|{
name|ApplicationId
name|id
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TestV2TimelineClient
name|tc
init|=
operator|new
name|TestV2TimelineClient
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|tc
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|tc
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|tc
return|;
block|}
DECL|class|TestV2TimelineClientForExceptionHandling
specifier|private
class|class
name|TestV2TimelineClientForExceptionHandling
extends|extends
name|TimelineV2ClientImpl
block|{
DECL|method|TestV2TimelineClientForExceptionHandling (ApplicationId id)
specifier|public
name|TestV2TimelineClientForExceptionHandling
parameter_list|(
name|ApplicationId
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
DECL|field|throwYarnException
specifier|private
name|boolean
name|throwYarnException
decl_stmt|;
DECL|method|setThrowYarnException (boolean throwYarnException)
specifier|public
name|void
name|setThrowYarnException
parameter_list|(
name|boolean
name|throwYarnException
parameter_list|)
block|{
name|this
operator|.
name|throwYarnException
operator|=
name|throwYarnException
expr_stmt|;
block|}
DECL|method|isThrowYarnException ()
specifier|public
name|boolean
name|isThrowYarnException
parameter_list|()
block|{
return|return
name|throwYarnException
return|;
block|}
annotation|@
name|Override
DECL|method|putObjects (URI base, String path, MultivaluedMap<String, String> params, Object obj)
specifier|protected
name|void
name|putObjects
parameter_list|(
name|URI
name|base
parameter_list|,
name|String
name|path
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|throwYarnException
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
name|EXCEPTION_MSG
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to get the response from the timeline server."
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|TestV2TimelineClient
specifier|private
class|class
name|TestV2TimelineClient
extends|extends
name|TestV2TimelineClientForExceptionHandling
block|{
DECL|field|sleepBeforeReturn
specifier|private
name|boolean
name|sleepBeforeReturn
decl_stmt|;
DECL|field|publishedEntities
specifier|private
name|List
argument_list|<
name|TimelineEntities
argument_list|>
name|publishedEntities
decl_stmt|;
DECL|method|getPublishedEntities (int putIndex)
specifier|public
name|TimelineEntities
name|getPublishedEntities
parameter_list|(
name|int
name|putIndex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Not So many entities Published"
argument_list|,
name|putIndex
operator|<
name|publishedEntities
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|publishedEntities
operator|.
name|get
argument_list|(
name|putIndex
argument_list|)
return|;
block|}
DECL|method|setSleepBeforeReturn (boolean sleepBeforeReturn)
specifier|public
name|void
name|setSleepBeforeReturn
parameter_list|(
name|boolean
name|sleepBeforeReturn
parameter_list|)
block|{
name|this
operator|.
name|sleepBeforeReturn
operator|=
name|sleepBeforeReturn
expr_stmt|;
block|}
DECL|method|getNumOfTimelineEntitiesPublished ()
specifier|public
name|int
name|getNumOfTimelineEntitiesPublished
parameter_list|()
block|{
return|return
name|publishedEntities
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|TestV2TimelineClient (ApplicationId id)
specifier|public
name|TestV2TimelineClient
parameter_list|(
name|ApplicationId
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|publishedEntities
operator|=
operator|new
name|ArrayList
argument_list|<
name|TimelineEntities
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|putObjects (String path, MultivaluedMap<String, String> params, Object obj)
specifier|protected
name|void
name|putObjects
parameter_list|(
name|String
name|path
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
if|if
condition|(
name|isThrowYarnException
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"ActualException"
argument_list|)
throw|;
block|}
name|publishedEntities
operator|.
name|add
argument_list|(
operator|(
name|TimelineEntities
operator|)
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepBeforeReturn
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|TIME_TO_SLEEP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testExceptionMultipleRetry ()
specifier|public
name|void
name|testExceptionMultipleRetry
parameter_list|()
block|{
name|TestV2TimelineClientForExceptionHandling
name|c
init|=
operator|new
name|TestV2TimelineClientForExceptionHandling
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|maxRetries
init|=
literal|2
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_CLIENT_MAX_RETRIES
argument_list|,
name|maxRetries
argument_list|)
expr_stmt|;
name|c
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|c
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
literal|"localhost:12345"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|c
operator|.
name|putEntities
argument_list|(
operator|new
name|TimelineEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"YARN exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"IOException is expected"
argument_list|,
name|cause
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"YARN exception is expected"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TimelineClient has reached to max retry times : "
operator|+
name|maxRetries
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|setThrowYarnException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|c
operator|.
name|putEntities
argument_list|(
operator|new
name|TimelineEntity
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"YARN exception is expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"YARN exception is expected"
argument_list|,
name|cause
operator|instanceof
name|YarnException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"YARN exception is expected"
argument_list|,
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|EXCEPTION_MSG
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPostEntities ()
specifier|public
name|void
name|testPostEntities
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|putEntities
argument_list|(
name|generateEntity
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testASyncCallMerge ()
specifier|public
name|void
name|testASyncCallMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|setSleepBeforeReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|TIME_TO_SLEEP
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// by the time first put response comes push 2 entities in the queue
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|client
operator|.
name|getNumOfTimelineEntitiesPublished
argument_list|()
operator|==
literal|2
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|TIME_TO_SLEEP
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"two merged TimelineEntities needs to be published"
argument_list|,
literal|2
argument_list|,
name|client
operator|.
name|getNumOfTimelineEntitiesPublished
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntities
name|secondPublishedEntities
init|=
name|client
operator|.
name|getPublishedEntities
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Merged TimelineEntities Object needs to 2 TimelineEntity Object"
argument_list|,
literal|2
argument_list|,
name|secondPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Order of Async Events Needs to be FIFO"
argument_list|,
literal|"2"
argument_list|,
name|secondPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Order of Async Events Needs to be FIFO"
argument_list|,
literal|"3"
argument_list|,
name|secondPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSyncCall ()
specifier|public
name|void
name|testSyncCall
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// sync entity should not be be merged with Async
name|client
operator|.
name|putEntities
argument_list|(
name|generateEntity
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// except for the sync call above 2 should be merged
name|client
operator|.
name|putEntities
argument_list|(
name|generateEntity
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|client
operator|.
name|getNumOfTimelineEntitiesPublished
argument_list|()
operator|==
literal|3
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|TIME_TO_SLEEP
argument_list|)
expr_stmt|;
block|}
name|printReceivedEntities
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"TimelineEntities not published as desired"
argument_list|,
literal|3
argument_list|,
name|client
operator|.
name|getNumOfTimelineEntitiesPublished
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntities
name|firstPublishedEntities
init|=
name|client
operator|.
name|getPublishedEntities
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"sync entities should not be merged with async"
argument_list|,
literal|1
argument_list|,
name|firstPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test before pushing the sync entities asyncs are merged and pushed
name|TimelineEntities
name|secondPublishedEntities
init|=
name|client
operator|.
name|getPublishedEntities
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"async entities should be merged before publishing sync"
argument_list|,
literal|2
argument_list|,
name|secondPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Order of Async Events Needs to be FIFO"
argument_list|,
literal|"2"
argument_list|,
name|secondPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Order of Async Events Needs to be FIFO"
argument_list|,
literal|"3"
argument_list|,
name|secondPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// test the last entity published is sync put
name|TimelineEntities
name|thirdPublishedEntities
init|=
name|client
operator|.
name|getPublishedEntities
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"sync entities had to be published at the last"
argument_list|,
literal|1
argument_list|,
name|thirdPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected last sync Event is not proper"
argument_list|,
literal|"4"
argument_list|,
name|thirdPublishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExceptionCalls ()
specifier|public
name|void
name|testExceptionCalls
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|setThrowYarnException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Async calls are not expected to throw exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|client
operator|.
name|putEntities
argument_list|(
name|generateEntity
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Sync calls are expected to throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Same exception needs to be thrown"
argument_list|,
literal|"ActualException"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testConfigurableNumberOfMerges ()
specifier|public
name|void
name|testConfigurableNumberOfMerges
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|setSleepBeforeReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// At max 3 entities need to be merged
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntities
argument_list|(
name|generateEntity
argument_list|(
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"6"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"No exception expected"
argument_list|)
expr_stmt|;
block|}
comment|// not having the same logic here as it doesn't depend on how many times
comment|// events are published.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|TIME_TO_SLEEP
argument_list|)
expr_stmt|;
name|printReceivedEntities
argument_list|()
expr_stmt|;
for|for
control|(
name|TimelineEntities
name|publishedEntities
range|:
name|client
operator|.
name|publishedEntities
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Number of entities should not be greater than 3 for each publish,"
operator|+
literal|" but was "
operator|+
name|publishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|publishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetTimelineToken ()
specifier|public
name|void
name|testSetTimelineToken
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Timeline token in v2 client should not be set"
argument_list|,
name|client
operator|.
name|currentTimelineToken
argument_list|)
expr_stmt|;
name|Token
name|token
init|=
name|Token
operator|.
name|newInstance
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|"kind"
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|"service"
argument_list|)
decl_stmt|;
name|client
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Timeline token in v2 client should not be set as token kind "
operator|+
literal|"is unexepcted."
argument_list|,
name|client
operator|.
name|currentTimelineToken
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
name|Token
operator|.
name|newInstance
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Timeline token in v2 client should not be set as serice is "
operator|+
literal|"not set."
argument_list|,
name|client
operator|.
name|currentTimelineToken
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineDelegationTokenIdentifier
name|ident
init|=
operator|new
name|TimelineDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ident
operator|.
name|setSequenceNumber
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|Token
operator|.
name|newInstance
argument_list|(
name|ident
operator|.
name|getBytes
argument_list|()
argument_list|,
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|"localhost:1234"
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Timeline token should be set in v2 client."
argument_list|,
name|client
operator|.
name|currentTimelineToken
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
argument_list|,
name|client
operator|.
name|currentTimelineToken
argument_list|)
expr_stmt|;
name|ident
operator|.
name|setSequenceNumber
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|Token
name|newToken
init|=
name|Token
operator|.
name|newInstance
argument_list|(
name|ident
operator|.
name|getBytes
argument_list|()
argument_list|,
name|TimelineDelegationTokenIdentifier
operator|.
name|KIND_NAME
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
literal|"localhost:1234"
argument_list|)
decl_stmt|;
name|client
operator|.
name|setTimelineCollectorInfo
argument_list|(
name|CollectorInfo
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
name|newToken
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ugi
operator|.
name|getTokens
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|token
argument_list|,
name|client
operator|.
name|currentTimelineToken
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newToken
argument_list|,
name|client
operator|.
name|currentTimelineToken
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAfterStop ()
specifier|public
name|void
name|testAfterStop
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|setSleepBeforeReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// At max 3 entities need to be merged
name|client
operator|.
name|putEntities
argument_list|(
name|generateEntity
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|client
operator|.
name|putEntitiesAsync
argument_list|(
name|generateEntity
argument_list|(
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"No exception expected"
argument_list|)
expr_stmt|;
block|}
comment|// not having the same logic here as it doesn't depend on how many times
comment|// events are published.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|TimelineEntities
name|publishedEntities
init|=
name|client
operator|.
name|publishedEntities
operator|.
name|get
argument_list|(
name|client
operator|.
name|publishedEntities
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|TimelineEntity
name|timelineEntity
init|=
name|publishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
name|publishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|timelineEntity
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"19"
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|TIME_TO_SLEEP
argument_list|)
expr_stmt|;
block|}
block|}
name|printReceivedEntities
argument_list|()
expr_stmt|;
name|TimelineEntities
name|publishedEntities
init|=
name|client
operator|.
name|publishedEntities
operator|.
name|get
argument_list|(
name|client
operator|.
name|publishedEntities
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|TimelineEntity
name|timelineEntity
init|=
name|publishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|get
argument_list|(
name|publishedEntities
operator|.
name|getEntities
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
literal|"19"
argument_list|,
name|timelineEntity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|printReceivedEntities ()
specifier|private
name|void
name|printReceivedEntities
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|client
operator|.
name|getNumOfTimelineEntitiesPublished
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TimelineEntities
name|publishedEntities
init|=
name|client
operator|.
name|getPublishedEntities
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|StringBuilder
name|entitiesPerPublish
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|TimelineEntity
name|entity
range|:
name|publishedEntities
operator|.
name|getEntities
argument_list|()
control|)
block|{
name|entitiesPerPublish
operator|.
name|append
argument_list|(
name|entity
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|entitiesPerPublish
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Entities Published @ index "
operator|+
name|i
operator|+
literal|" : "
operator|+
name|entitiesPerPublish
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateEntity (String id)
specifier|private
specifier|static
name|TimelineEntity
name|generateEntity
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|TimelineEntity
name|entity
init|=
operator|new
name|TimelineEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setType
argument_list|(
literal|"testEntity"
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setCreatedTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entity
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

