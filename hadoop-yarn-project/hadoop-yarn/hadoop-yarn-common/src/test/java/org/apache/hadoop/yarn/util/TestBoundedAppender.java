begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test class for {@link BoundedAppender}.  */
end_comment

begin_class
DECL|class|TestBoundedAppender
specifier|public
class|class
name|TestBoundedAppender
block|{
annotation|@
name|Rule
DECL|field|expected
specifier|public
name|ExpectedException
name|expected
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|initWithZeroLimitThrowsException ()
specifier|public
name|void
name|initWithZeroLimitThrowsException
parameter_list|()
block|{
name|expected
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|expectMessage
argument_list|(
literal|"limit should be positive"
argument_list|)
expr_stmt|;
operator|new
name|BoundedAppender
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|nullAppendedNullStringRead ()
specifier|public
name|void
name|nullAppendedNullStringRead
parameter_list|()
block|{
specifier|final
name|BoundedAppender
name|boundedAppender
init|=
operator|new
name|BoundedAppender
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"null appended, \"null\" read"
argument_list|,
literal|"null"
argument_list|,
name|boundedAppender
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|appendBelowLimitOnceValueIsReadCorrectly ()
specifier|public
name|void
name|appendBelowLimitOnceValueIsReadCorrectly
parameter_list|()
block|{
specifier|final
name|BoundedAppender
name|boundedAppender
init|=
operator|new
name|BoundedAppender
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"ab"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value appended is read correctly"
argument_list|,
literal|"ab"
argument_list|,
name|boundedAppender
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|appendValuesBelowLimitAreReadCorrectlyInFifoOrder ()
specifier|public
name|void
name|appendValuesBelowLimitAreReadCorrectlyInFifoOrder
parameter_list|()
block|{
specifier|final
name|BoundedAppender
name|boundedAppender
init|=
operator|new
name|BoundedAppender
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"ab"
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"cd"
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"fg"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last values appended fitting limit are read correctly"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|BoundedAppender
operator|.
name|TRUNCATED_MESSAGES_TEMPLATE
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|"efg"
argument_list|)
argument_list|,
name|boundedAppender
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|appendLastAboveLimitPreservesLastMessagePostfix ()
specifier|public
name|void
name|appendLastAboveLimitPreservesLastMessagePostfix
parameter_list|()
block|{
specifier|final
name|BoundedAppender
name|boundedAppender
init|=
operator|new
name|BoundedAppender
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"ab"
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"cde"
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"fghij"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last value appended above limit postfix is read correctly"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|BoundedAppender
operator|.
name|TRUNCATED_MESSAGES_TEMPLATE
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
literal|"hij"
argument_list|)
argument_list|,
name|boundedAppender
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|appendMiddleAboveLimitPreservesLastMessageAndMiddlePostfix ()
specifier|public
name|void
name|appendMiddleAboveLimitPreservesLastMessageAndMiddlePostfix
parameter_list|()
block|{
specifier|final
name|BoundedAppender
name|boundedAppender
init|=
operator|new
name|BoundedAppender
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"ab"
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"cde"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last value appended above limit postfix is read correctly"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|BoundedAppender
operator|.
name|TRUNCATED_MESSAGES_TEMPLATE
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|"cde"
argument_list|)
argument_list|,
name|boundedAppender
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"fg"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"middle value appended above limit postfix and last value are "
operator|+
literal|"read correctly"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|BoundedAppender
operator|.
name|TRUNCATED_MESSAGES_TEMPLATE
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|,
literal|"efg"
argument_list|)
argument_list|,
name|boundedAppender
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boundedAppender
operator|.
name|append
argument_list|(
literal|"hijkl"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"last value appended above limit postfix is read correctly"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|BoundedAppender
operator|.
name|TRUNCATED_MESSAGES_TEMPLATE
argument_list|,
literal|3
argument_list|,
literal|12
argument_list|,
literal|"jkl"
argument_list|)
argument_list|,
name|boundedAppender
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

