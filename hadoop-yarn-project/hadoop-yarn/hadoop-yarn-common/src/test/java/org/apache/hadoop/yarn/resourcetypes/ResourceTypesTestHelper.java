begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.resourcetypes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|resourcetypes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Contains helper methods to create Resource and ResourceInformation objects.  * ResourceInformation can be created from a resource name  * and a resource descriptor as well that comprises amount and unit.  */
end_comment

begin_class
DECL|class|ResourceTypesTestHelper
specifier|public
specifier|final
class|class
name|ResourceTypesTestHelper
block|{
DECL|field|RESOURCE_VALUE_AND_UNIT_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|RESOURCE_VALUE_AND_UNIT_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(\\d+)([A-za-z]*)"
argument_list|)
decl_stmt|;
DECL|method|ResourceTypesTestHelper ()
specifier|private
name|ResourceTypesTestHelper
parameter_list|()
block|{}
DECL|field|RECORD_FACTORY
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|RECORD_FACTORY
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|class|ResourceValueAndUnit
specifier|private
specifier|static
specifier|final
class|class
name|ResourceValueAndUnit
block|{
DECL|field|value
specifier|private
specifier|final
name|Long
name|value
decl_stmt|;
DECL|field|unit
specifier|private
specifier|final
name|String
name|unit
decl_stmt|;
DECL|method|ResourceValueAndUnit (Long value, String unit)
specifier|private
name|ResourceValueAndUnit
parameter_list|(
name|Long
name|value
parameter_list|,
name|String
name|unit
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|unit
operator|=
name|unit
expr_stmt|;
block|}
block|}
DECL|method|newResource (long memory, int vCores, Map<String, String> customResources)
specifier|public
specifier|static
name|Resource
name|newResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customResources
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|RECORD_FACTORY
operator|.
name|newRecordInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setVirtualCores
argument_list|(
name|vCores
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|customResource
range|:
name|customResources
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|resourceName
init|=
name|customResource
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ResourceInformation
name|resourceInformation
init|=
name|createResourceInformation
argument_list|(
name|resourceName
argument_list|,
name|customResource
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResourceInformation
argument_list|(
name|resourceName
argument_list|,
name|resourceInformation
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
DECL|method|createResourceInformation (String resourceName, String descriptor)
specifier|public
specifier|static
name|ResourceInformation
name|createResourceInformation
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|String
name|descriptor
parameter_list|)
block|{
name|ResourceValueAndUnit
name|resourceValueAndUnit
init|=
name|getResourceValueAndUnit
argument_list|(
name|descriptor
argument_list|)
decl_stmt|;
return|return
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resourceName
argument_list|,
name|resourceValueAndUnit
operator|.
name|unit
argument_list|,
name|resourceValueAndUnit
operator|.
name|value
argument_list|)
return|;
block|}
DECL|method|getResourceValueAndUnit (String val)
specifier|private
specifier|static
name|ResourceValueAndUnit
name|getResourceValueAndUnit
parameter_list|(
name|String
name|val
parameter_list|)
block|{
name|Matcher
name|matcher
init|=
name|RESOURCE_VALUE_AND_UNIT_PATTERN
operator|.
name|matcher
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid pattern of resource descriptor: "
operator|+
name|val
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|matcher
operator|.
name|groupCount
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Capturing group count in string "
operator|+
name|val
operator|+
literal|" is not 2!"
argument_list|)
throw|;
block|}
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ResourceValueAndUnit
argument_list|(
name|value
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

