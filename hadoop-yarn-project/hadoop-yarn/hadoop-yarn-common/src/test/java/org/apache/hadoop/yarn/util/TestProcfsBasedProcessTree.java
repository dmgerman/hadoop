begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
operator|.
name|KB_TO_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
operator|.
name|MemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
operator|.
name|ProcessSmapMemoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProcfsBasedProcessTree
operator|.
name|ProcessTreeSmapMemInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test ProcfsBasedProcessTree.  */
end_comment

begin_class
DECL|class|TestProcfsBasedProcessTree
specifier|public
class|class
name|TestProcfsBasedProcessTree
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestProcfsBasedProcessTree
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|protected
specifier|static
name|File
name|TEST_ROOT_DIR
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestProcfsBasedProcessTree
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
decl_stmt|;
DECL|field|shexec
specifier|private
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
DECL|field|pidFile
DECL|field|lowestDescendant
specifier|private
name|String
name|pidFile
decl_stmt|,
name|lowestDescendant
decl_stmt|;
DECL|field|shellScript
specifier|private
name|String
name|shellScript
decl_stmt|;
DECL|field|N
specifier|private
specifier|static
specifier|final
name|int
name|N
init|=
literal|6
decl_stmt|;
comment|// Controls the RogueTask
DECL|class|RogueTaskThread
specifier|private
class|class
name|RogueTaskThread
extends|extends
name|Thread
block|{
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Vector
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSetsidAvailable
argument_list|()
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"setsid"
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
literal|"bash"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-c"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|" echo $$> "
operator|+
name|pidFile
operator|+
literal|"; sh "
operator|+
name|shellScript
operator|+
literal|" "
operator|+
name|N
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shell Command exit with a non-zero exit code. This is"
operator|+
literal|" expected as we are killing the subprocesses of the"
operator|+
literal|" task intentionally. "
operator|+
name|ee
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error executing shell command "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exit code: "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRogueTaskPID ()
specifier|private
name|String
name|getRogueTaskPID
parameter_list|()
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|pidFile
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
comment|// read from pidFile
return|return
name|getPidFromPidFile
argument_list|(
name|pidFile
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testProcessTree ()
specifier|public
name|void
name|testProcessTree
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Shell
operator|.
name|LINUX
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ProcfsBasedProcessTree is not available on this system. Not testing"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProcfsBasedProcessTree
operator|.
name|isAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ProcfsBaseProcessTree should be available on Linux"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create shell script
name|Random
name|rm
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"_shellScript_"
operator|+
name|rm
operator|.
name|nextInt
argument_list|()
operator|+
literal|".sh"
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|shellScript
operator|=
name|TEST_ROOT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
name|tempFile
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// create pid file
name|tempFile
operator|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"_pidFile_"
operator|+
name|rm
operator|.
name|nextInt
argument_list|()
operator|+
literal|".pid"
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|pidFile
operator|=
name|TEST_ROOT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
name|tempFile
operator|.
name|getName
argument_list|()
expr_stmt|;
name|lowestDescendant
operator|=
name|TEST_ROOT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"lowestDescendantPidFile"
expr_stmt|;
comment|// write to shell-script
try|try
block|{
name|FileWriter
name|fWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|shellScript
argument_list|)
decl_stmt|;
name|fWriter
operator|.
name|write
argument_list|(
literal|"# rogue task\n"
operator|+
literal|"sleep 1\n"
operator|+
literal|"echo hello\n"
operator|+
literal|"if [ $1 -ne 0 ]\n"
operator|+
literal|"then\n"
operator|+
literal|" sh "
operator|+
name|shellScript
operator|+
literal|" $(($1-1))\n"
operator|+
literal|"else\n"
operator|+
literal|" echo $$> "
operator|+
name|lowestDescendant
operator|+
literal|"\n"
operator|+
literal|" while true\n do\n"
operator|+
literal|"  sleep 5\n"
operator|+
literal|" done\n"
operator|+
literal|"fi"
argument_list|)
expr_stmt|;
name|fWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error: "
operator|+
name|ioe
argument_list|)
expr_stmt|;
return|return;
block|}
name|Thread
name|t
init|=
operator|new
name|RogueTaskThread
argument_list|()
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|pid
init|=
name|getRogueTaskPID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Root process pid: "
operator|+
name|pid
argument_list|)
expr_stmt|;
name|ProcfsBasedProcessTree
name|p
init|=
name|createProcessTree
argument_list|(
name|pid
argument_list|)
decl_stmt|;
name|p
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
comment|// initialize
name|LOG
operator|.
name|info
argument_list|(
literal|"ProcessTree: "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|leaf
init|=
operator|new
name|File
argument_list|(
name|lowestDescendant
argument_list|)
decl_stmt|;
comment|// wait till lowest descendant process of Rougue Task starts execution
while|while
condition|(
operator|!
name|leaf
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
name|p
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
comment|// reconstruct
name|LOG
operator|.
name|info
argument_list|(
literal|"ProcessTree: "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the process-tree dump
name|String
name|processTreeDump
init|=
name|p
operator|.
name|getProcessTreeDump
argument_list|()
decl_stmt|;
comment|// destroy the process and all its subprocesses
name|destroyProcessTree
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|boolean
name|isAlive
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|tries
init|=
literal|100
init|;
name|tries
operator|>
literal|0
condition|;
name|tries
operator|--
control|)
block|{
if|if
condition|(
name|isSetsidAvailable
argument_list|()
condition|)
block|{
comment|// whole processtree
name|isAlive
operator|=
name|isAnyProcessInTreeAlive
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// process
name|isAlive
operator|=
name|isAlive
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isAlive
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAlive
condition|)
block|{
name|fail
argument_list|(
literal|"ProcessTree shouldn't be alive"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Process-tree dump follows: \n"
operator|+
name|processTreeDump
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process-tree dump doesn't start with a proper header"
argument_list|,
name|processTreeDump
operator|.
name|startsWith
argument_list|(
literal|"\t|- PID PPID PGRPID SESSID CMD_NAME "
operator|+
literal|"USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) "
operator|+
literal|"RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|N
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|cmdLineDump
init|=
literal|"\\|- [0-9]+ [0-9]+ [0-9]+ [0-9]+ \\(sh\\)"
operator|+
literal|" [0-9]+ [0-9]+ [0-9]+ [0-9]+ sh "
operator|+
name|shellScript
operator|+
literal|" "
operator|+
name|i
decl_stmt|;
name|Pattern
name|pat
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|cmdLineDump
argument_list|)
decl_stmt|;
name|Matcher
name|mat
init|=
name|pat
operator|.
name|matcher
argument_list|(
name|processTreeDump
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process-tree dump doesn't contain the cmdLineDump of "
operator|+
name|i
operator|+
literal|"th process!"
argument_list|,
name|mat
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Not able to join thread sometimes when forking with large N.
try|try
block|{
name|t
operator|.
name|join
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RogueTaskThread successfully joined."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted while joining RogueTaskThread."
argument_list|)
expr_stmt|;
block|}
comment|// ProcessTree is gone now. Any further calls should be sane.
name|p
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"ProcessTree must have been gone"
argument_list|,
name|isAlive
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Cumulative vmem for the gone-process is "
operator|+
name|p
operator|.
name|getCumulativeVmem
argument_list|()
operator|+
literal|" . It should be zero."
argument_list|,
name|p
operator|.
name|getCumulativeVmem
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|p
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"[ ]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createProcessTree (String pid)
specifier|protected
name|ProcfsBasedProcessTree
name|createProcessTree
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
return|return
operator|new
name|ProcfsBasedProcessTree
argument_list|(
name|pid
argument_list|)
return|;
block|}
DECL|method|createProcessTree (String pid, String procfsRootDir)
specifier|protected
name|ProcfsBasedProcessTree
name|createProcessTree
parameter_list|(
name|String
name|pid
parameter_list|,
name|String
name|procfsRootDir
parameter_list|)
block|{
return|return
operator|new
name|ProcfsBasedProcessTree
argument_list|(
name|pid
argument_list|,
name|procfsRootDir
argument_list|)
return|;
block|}
DECL|method|destroyProcessTree (String pid)
specifier|protected
name|void
name|destroyProcessTree
parameter_list|(
name|String
name|pid
parameter_list|)
throws|throws
name|IOException
block|{
name|sendSignal
argument_list|(
name|pid
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get PID from a pid-file.    *     * @param pidFileName    *          Name of the pid-file.    * @return the PID string read from the pid-file. Returns null if the    *         pidFileName points to a non-existing file or if read fails from the    *         file.    */
DECL|method|getPidFromPidFile (String pidFileName)
specifier|public
specifier|static
name|String
name|getPidFromPidFile
parameter_list|(
name|String
name|pidFileName
parameter_list|)
block|{
name|BufferedReader
name|pidFile
init|=
literal|null
decl_stmt|;
name|FileReader
name|fReader
init|=
literal|null
decl_stmt|;
name|String
name|pid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|FileReader
argument_list|(
name|pidFileName
argument_list|)
expr_stmt|;
name|pidFile
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PidFile doesn't exist : "
operator|+
name|pidFileName
argument_list|)
expr_stmt|;
return|return
name|pid
return|;
block|}
try|try
block|{
name|pid
operator|=
name|pidFile
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read from "
operator|+
name|pidFileName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fReader
operator|!=
literal|null
condition|)
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|pidFile
operator|!=
literal|null
condition|)
block|{
name|pidFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|pidFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pid
return|;
block|}
DECL|class|ProcessStatInfo
specifier|public
specifier|static
class|class
name|ProcessStatInfo
block|{
comment|// sample stat in a single line : 3910 (gpm) S 1 3910 3910 0 -1 4194624
comment|// 83 0 0 0 0 0 0 0 16 0 1 0 7852 2408448 88 4294967295 134512640
comment|// 134590050 3220521392 3220520036 10975138 0 0 4096 134234626
comment|// 4294967295 0 0 17 1 0 0
DECL|field|pid
name|String
name|pid
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|ppid
name|String
name|ppid
decl_stmt|;
DECL|field|pgrpId
name|String
name|pgrpId
decl_stmt|;
DECL|field|session
name|String
name|session
decl_stmt|;
DECL|field|vmem
name|String
name|vmem
init|=
literal|"0"
decl_stmt|;
DECL|field|rssmemPage
name|String
name|rssmemPage
init|=
literal|"0"
decl_stmt|;
DECL|field|utime
name|String
name|utime
init|=
literal|"0"
decl_stmt|;
DECL|field|stime
name|String
name|stime
init|=
literal|"0"
decl_stmt|;
DECL|method|ProcessStatInfo (String[] statEntries)
specifier|public
name|ProcessStatInfo
parameter_list|(
name|String
index|[]
name|statEntries
parameter_list|)
block|{
name|pid
operator|=
name|statEntries
index|[
literal|0
index|]
expr_stmt|;
name|name
operator|=
name|statEntries
index|[
literal|1
index|]
expr_stmt|;
name|ppid
operator|=
name|statEntries
index|[
literal|2
index|]
expr_stmt|;
name|pgrpId
operator|=
name|statEntries
index|[
literal|3
index|]
expr_stmt|;
name|session
operator|=
name|statEntries
index|[
literal|4
index|]
expr_stmt|;
name|vmem
operator|=
name|statEntries
index|[
literal|5
index|]
expr_stmt|;
if|if
condition|(
name|statEntries
operator|.
name|length
operator|>
literal|6
condition|)
block|{
name|rssmemPage
operator|=
name|statEntries
index|[
literal|6
index|]
expr_stmt|;
block|}
if|if
condition|(
name|statEntries
operator|.
name|length
operator|>
literal|7
condition|)
block|{
name|utime
operator|=
name|statEntries
index|[
literal|7
index|]
expr_stmt|;
name|stime
operator|=
name|statEntries
index|[
literal|8
index|]
expr_stmt|;
block|}
block|}
comment|// construct a line that mimics the procfs stat file.
comment|// all unused numerical entries are set to 0.
DECL|method|getStatLine ()
specifier|public
name|String
name|getStatLine
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s (%s) S %s %s %s 0 0 0"
operator|+
literal|" 0 0 0 0 %s %s 0 0 0 0 0 0 0 %s %s 0 0"
operator|+
literal|" 0 0 0 0 0 0 0 0"
operator|+
literal|" 0 0 0 0 0"
argument_list|,
name|pid
argument_list|,
name|name
argument_list|,
name|ppid
argument_list|,
name|pgrpId
argument_list|,
name|session
argument_list|,
name|utime
argument_list|,
name|stime
argument_list|,
name|vmem
argument_list|,
name|rssmemPage
argument_list|)
return|;
block|}
block|}
DECL|method|constructMemoryMappingInfo (String address, String[] entries)
specifier|public
name|ProcessSmapMemoryInfo
name|constructMemoryMappingInfo
parameter_list|(
name|String
name|address
parameter_list|,
name|String
index|[]
name|entries
parameter_list|)
block|{
name|ProcessSmapMemoryInfo
name|info
init|=
operator|new
name|ProcessSmapMemoryInfo
argument_list|(
name|address
argument_list|)
decl_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|SIZE
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|RSS
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|PSS
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|SHARED_CLEAN
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|SHARED_DIRTY
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|PRIVATE_CLEAN
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|PRIVATE_DIRTY
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|REFERENCED
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|ANONYMOUS
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|ANON_HUGE_PAGES
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|SWAP
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|KERNEL_PAGE_SIZE
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMemInfo
argument_list|(
name|MemInfo
operator|.
name|MMU_PAGE_SIZE
operator|.
name|name
argument_list|()
argument_list|,
name|entries
index|[
literal|12
index|]
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
DECL|method|createMemoryMappingInfo (ProcessTreeSmapMemInfo[] procMemInfo)
specifier|public
name|void
name|createMemoryMappingInfo
parameter_list|(
name|ProcessTreeSmapMemInfo
index|[]
name|procMemInfo
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|procMemInfo
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Construct 4 memory mappings per process.
comment|// As per min(Shared_Dirty, Pss) + Private_Clean + Private_Dirty
comment|// and not including r--s, r-xs, we should get 100 KB per process
name|List
argument_list|<
name|ProcessSmapMemoryInfo
argument_list|>
name|memoryMappingList
init|=
name|procMemInfo
index|[
name|i
index|]
operator|.
name|getMemoryInfoList
argument_list|()
decl_stmt|;
name|memoryMappingList
operator|.
name|add
argument_list|(
name|constructMemoryMappingInfo
argument_list|(
literal|"7f56c177c000-7f56c177d000 "
operator|+
literal|"rw-p 00010000 08:02 40371558                   "
operator|+
literal|"/grid/0/jdk1.7.0_25/jre/lib/amd64/libnio.so"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"4"
block|,
literal|"25"
block|,
literal|"4"
block|,
literal|"25"
block|,
literal|"15"
block|,
literal|"10"
block|,
literal|"4"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"4"
block|,
literal|"4"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|memoryMappingList
operator|.
name|add
argument_list|(
name|constructMemoryMappingInfo
argument_list|(
literal|"7fb09382e000-7fb09382f000 r--s 00003000 "
operator|+
literal|"08:02 25953545"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"4"
block|,
literal|"25"
block|,
literal|"4"
block|,
literal|"0"
block|,
literal|"15"
block|,
literal|"10"
block|,
literal|"4"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"4"
block|,
literal|"4"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|memoryMappingList
operator|.
name|add
argument_list|(
name|constructMemoryMappingInfo
argument_list|(
literal|"7e8790000-7e8b80000 r-xs 00000000 00:00 0"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"4"
block|,
literal|"25"
block|,
literal|"4"
block|,
literal|"0"
block|,
literal|"15"
block|,
literal|"10"
block|,
literal|"4"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"4"
block|,
literal|"4"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|memoryMappingList
operator|.
name|add
argument_list|(
name|constructMemoryMappingInfo
argument_list|(
literal|"7da677000-7e0dcf000 rw-p 00000000 00:00 0"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"4"
block|,
literal|"25"
block|,
literal|"4"
block|,
literal|"50"
block|,
literal|"15"
block|,
literal|"10"
block|,
literal|"4"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"0"
block|,
literal|"4"
block|,
literal|"4"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A basic test that creates a few process directories and writes stat files.    * Verifies that the cpu time and memory is correctly computed.    *    * @throws IOException    *           if there was a problem setting up the fake procfs directories or    *           files.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCpuAndMemoryForProcessTree ()
specifier|public
name|void
name|testCpuAndMemoryForProcessTree
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test processes
name|String
index|[]
name|pids
init|=
block|{
literal|"100"
block|,
literal|"200"
block|,
literal|"300"
block|,
literal|"400"
block|}
decl_stmt|;
comment|// create the fake procfs root directory.
name|File
name|procfsRootDir
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"proc"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupProcfsRootDir
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
name|setupPidDirs
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|)
expr_stmt|;
comment|// create stat objects.
comment|// assuming processes 100, 200, 300 are in tree and 400 is not.
name|ProcessStatInfo
index|[]
name|procInfos
init|=
operator|new
name|ProcessStatInfo
index|[
literal|4
index|]
decl_stmt|;
name|procInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"100"
block|,
literal|"proc1"
block|,
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100000"
block|,
literal|"100"
block|,
literal|"1000"
block|,
literal|"200"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|1
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"200"
block|,
literal|"proc2"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"200000"
block|,
literal|"200"
block|,
literal|"2000"
block|,
literal|"400"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|2
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"300"
block|,
literal|"proc3"
block|,
literal|"200"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"300000"
block|,
literal|"300"
block|,
literal|"3000"
block|,
literal|"600"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|3
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"400"
block|,
literal|"proc4"
block|,
literal|"1"
block|,
literal|"400"
block|,
literal|"400"
block|,
literal|"400000"
block|,
literal|"400"
block|,
literal|"4000"
block|,
literal|"800"
block|}
argument_list|)
expr_stmt|;
name|ProcessTreeSmapMemInfo
index|[]
name|memInfo
init|=
operator|new
name|ProcessTreeSmapMemInfo
index|[
literal|4
index|]
decl_stmt|;
name|memInfo
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|memInfo
index|[
literal|1
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"200"
argument_list|)
expr_stmt|;
name|memInfo
index|[
literal|2
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"300"
argument_list|)
expr_stmt|;
name|memInfo
index|[
literal|3
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"400"
argument_list|)
expr_stmt|;
name|createMemoryMappingInfo
argument_list|(
name|memInfo
argument_list|)
expr_stmt|;
name|writeStatFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|,
name|procInfos
argument_list|,
name|memInfo
argument_list|)
expr_stmt|;
comment|// crank up the process tree class.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ProcfsBasedProcessTree
name|processTree
init|=
name|createProcessTree
argument_list|(
literal|"100"
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|processTree
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// build the process tree.
name|processTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
comment|// verify cumulative memory
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative virtual memory does not match"
argument_list|,
literal|600000L
argument_list|,
name|processTree
operator|.
name|getCumulativeVmem
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify rss memory
name|long
name|cumuRssMem
init|=
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
operator|>
literal|0
condition|?
literal|600L
operator|*
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
else|:
literal|0L
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rss memory does not match"
argument_list|,
name|cumuRssMem
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify cumulative cpu time
name|long
name|cumuCpuTime
init|=
name|ProcfsBasedProcessTree
operator|.
name|JIFFY_LENGTH_IN_MILLIS
operator|>
literal|0
condition|?
literal|7200L
operator|*
name|ProcfsBasedProcessTree
operator|.
name|JIFFY_LENGTH_IN_MILLIS
else|:
literal|0L
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative cpu time does not match"
argument_list|,
name|cumuCpuTime
argument_list|,
name|processTree
operator|.
name|getCumulativeCpuTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check by enabling smaps
name|setSmapsInProceTree
argument_list|(
name|processTree
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// RSS=Min(shared_dirty,PSS)+PrivateClean+PrivateDirty (exclude r-xs,
comment|// r--s)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rss memory does not match"
argument_list|,
operator|(
literal|100
operator|*
name|KB_TO_BYTES
operator|*
literal|3
operator|)
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|()
argument_list|)
expr_stmt|;
comment|// test the cpu time again to see if it cumulates
name|procInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"100"
block|,
literal|"proc1"
block|,
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100000"
block|,
literal|"100"
block|,
literal|"2000"
block|,
literal|"300"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|1
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"200"
block|,
literal|"proc2"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"200000"
block|,
literal|"200"
block|,
literal|"3000"
block|,
literal|"500"
block|}
argument_list|)
expr_stmt|;
name|writeStatFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|,
name|procInfos
argument_list|,
name|memInfo
argument_list|)
expr_stmt|;
comment|// build the process tree.
name|processTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
comment|// verify cumulative cpu time again
name|cumuCpuTime
operator|=
name|ProcfsBasedProcessTree
operator|.
name|JIFFY_LENGTH_IN_MILLIS
operator|>
literal|0
condition|?
literal|9400L
operator|*
name|ProcfsBasedProcessTree
operator|.
name|JIFFY_LENGTH_IN_MILLIS
else|:
literal|0L
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative cpu time does not match"
argument_list|,
name|cumuCpuTime
argument_list|,
name|processTree
operator|.
name|getCumulativeCpuTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setSmapsInProceTree (ProcfsBasedProcessTree processTree, boolean enableFlag)
specifier|private
name|void
name|setSmapsInProceTree
parameter_list|(
name|ProcfsBasedProcessTree
name|processTree
parameter_list|,
name|boolean
name|enableFlag
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|processTree
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|PROCFS_USE_SMAPS_BASED_RSS_ENABLED
argument_list|,
name|enableFlag
argument_list|)
expr_stmt|;
name|processTree
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|processTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests that cumulative memory is computed only for processes older than a    * given age.    *    * @throws IOException    *           if there was a problem setting up the fake procfs directories or    *           files.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMemForOlderProcesses ()
specifier|public
name|void
name|testMemForOlderProcesses
parameter_list|()
throws|throws
name|IOException
block|{
name|testMemForOlderProcesses
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testMemForOlderProcesses
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMemForOlderProcesses (boolean smapEnabled)
specifier|private
name|void
name|testMemForOlderProcesses
parameter_list|(
name|boolean
name|smapEnabled
parameter_list|)
throws|throws
name|IOException
block|{
comment|// initial list of processes
name|String
index|[]
name|pids
init|=
block|{
literal|"100"
block|,
literal|"200"
block|,
literal|"300"
block|,
literal|"400"
block|}
decl_stmt|;
comment|// create the fake procfs root directory.
name|File
name|procfsRootDir
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"proc"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupProcfsRootDir
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
name|setupPidDirs
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|)
expr_stmt|;
comment|// create stat objects.
comment|// assuming 100, 200 and 400 are in tree, 300 is not.
name|ProcessStatInfo
index|[]
name|procInfos
init|=
operator|new
name|ProcessStatInfo
index|[
literal|4
index|]
decl_stmt|;
name|procInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"100"
block|,
literal|"proc1"
block|,
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100000"
block|,
literal|"100"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|1
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"200"
block|,
literal|"proc2"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"200000"
block|,
literal|"200"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|2
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"300"
block|,
literal|"proc3"
block|,
literal|"1"
block|,
literal|"300"
block|,
literal|"300"
block|,
literal|"300000"
block|,
literal|"300"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|3
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"400"
block|,
literal|"proc4"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"400000"
block|,
literal|"400"
block|}
argument_list|)
expr_stmt|;
comment|// write smap information invariably for testing
name|ProcessTreeSmapMemInfo
index|[]
name|memInfo
init|=
operator|new
name|ProcessTreeSmapMemInfo
index|[
literal|4
index|]
decl_stmt|;
name|memInfo
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|memInfo
index|[
literal|1
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"200"
argument_list|)
expr_stmt|;
name|memInfo
index|[
literal|2
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"300"
argument_list|)
expr_stmt|;
name|memInfo
index|[
literal|3
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"400"
argument_list|)
expr_stmt|;
name|createMemoryMappingInfo
argument_list|(
name|memInfo
argument_list|)
expr_stmt|;
name|writeStatFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|,
name|procInfos
argument_list|,
name|memInfo
argument_list|)
expr_stmt|;
comment|// crank up the process tree class.
name|ProcfsBasedProcessTree
name|processTree
init|=
name|createProcessTree
argument_list|(
literal|"100"
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|setSmapsInProceTree
argument_list|(
name|processTree
argument_list|,
name|smapEnabled
argument_list|)
expr_stmt|;
comment|// verify cumulative memory
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative memory does not match"
argument_list|,
literal|700000L
argument_list|,
name|processTree
operator|.
name|getCumulativeVmem
argument_list|()
argument_list|)
expr_stmt|;
comment|// write one more process as child of 100.
name|String
index|[]
name|newPids
init|=
block|{
literal|"500"
block|}
decl_stmt|;
name|setupPidDirs
argument_list|(
name|procfsRootDir
argument_list|,
name|newPids
argument_list|)
expr_stmt|;
name|ProcessStatInfo
index|[]
name|newProcInfos
init|=
operator|new
name|ProcessStatInfo
index|[
literal|1
index|]
decl_stmt|;
name|newProcInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"500"
block|,
literal|"proc5"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"500000"
block|,
literal|"500"
block|}
argument_list|)
expr_stmt|;
name|ProcessTreeSmapMemInfo
index|[]
name|newMemInfos
init|=
operator|new
name|ProcessTreeSmapMemInfo
index|[
literal|1
index|]
decl_stmt|;
name|newMemInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"500"
argument_list|)
expr_stmt|;
name|createMemoryMappingInfo
argument_list|(
name|newMemInfos
argument_list|)
expr_stmt|;
name|writeStatFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|newPids
argument_list|,
name|newProcInfos
argument_list|,
name|newMemInfos
argument_list|)
expr_stmt|;
comment|// check memory includes the new process.
name|processTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative vmem does not include new process"
argument_list|,
literal|1200000L
argument_list|,
name|processTree
operator|.
name|getCumulativeVmem
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smapEnabled
condition|)
block|{
name|long
name|cumuRssMem
init|=
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
operator|>
literal|0
condition|?
literal|1200L
operator|*
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
else|:
literal|0L
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem does not include new process"
argument_list|,
name|cumuRssMem
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem does not include new process"
argument_list|,
literal|100
operator|*
name|KB_TO_BYTES
operator|*
literal|4
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// however processes older than 1 iteration will retain the older value
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative vmem shouldn't have included new process"
argument_list|,
literal|700000L
argument_list|,
name|processTree
operator|.
name|getCumulativeVmem
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smapEnabled
condition|)
block|{
name|long
name|cumuRssMem
init|=
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
operator|>
literal|0
condition|?
literal|700L
operator|*
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
else|:
literal|0L
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem shouldn't have included new process"
argument_list|,
name|cumuRssMem
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem shouldn't have included new process"
argument_list|,
literal|100
operator|*
name|KB_TO_BYTES
operator|*
literal|3
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// one more process
name|newPids
operator|=
operator|new
name|String
index|[]
block|{
literal|"600"
block|}
expr_stmt|;
name|setupPidDirs
argument_list|(
name|procfsRootDir
argument_list|,
name|newPids
argument_list|)
expr_stmt|;
name|newProcInfos
operator|=
operator|new
name|ProcessStatInfo
index|[
literal|1
index|]
expr_stmt|;
name|newProcInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"600"
block|,
literal|"proc6"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"600000"
block|,
literal|"600"
block|}
argument_list|)
expr_stmt|;
name|newMemInfos
operator|=
operator|new
name|ProcessTreeSmapMemInfo
index|[
literal|1
index|]
expr_stmt|;
name|newMemInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"600"
argument_list|)
expr_stmt|;
name|createMemoryMappingInfo
argument_list|(
name|newMemInfos
argument_list|)
expr_stmt|;
name|writeStatFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|newPids
argument_list|,
name|newProcInfos
argument_list|,
name|newMemInfos
argument_list|)
expr_stmt|;
comment|// refresh process tree
name|processTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
comment|// processes older than 2 iterations should be same as before.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative vmem shouldn't have included new processes"
argument_list|,
literal|700000L
argument_list|,
name|processTree
operator|.
name|getCumulativeVmem
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smapEnabled
condition|)
block|{
name|long
name|cumuRssMem
init|=
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
operator|>
literal|0
condition|?
literal|700L
operator|*
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
else|:
literal|0L
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem shouldn't have included new processes"
argument_list|,
name|cumuRssMem
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem shouldn't have included new processes"
argument_list|,
literal|100
operator|*
name|KB_TO_BYTES
operator|*
literal|3
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// processes older than 1 iteration should not include new process,
comment|// but include process 500
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative vmem shouldn't have included new processes"
argument_list|,
literal|1200000L
argument_list|,
name|processTree
operator|.
name|getCumulativeVmem
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smapEnabled
condition|)
block|{
name|long
name|cumuRssMem
init|=
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
operator|>
literal|0
condition|?
literal|1200L
operator|*
name|ProcfsBasedProcessTree
operator|.
name|PAGE_SIZE
else|:
literal|0L
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem shouldn't have included new processes"
argument_list|,
name|cumuRssMem
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cumulative rssmem shouldn't have included new processes"
argument_list|,
literal|100
operator|*
name|KB_TO_BYTES
operator|*
literal|4
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no processes older than 3 iterations, this should be 0
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Getting non-zero vmem for processes older than 3 iterations"
argument_list|,
literal|0L
argument_list|,
name|processTree
operator|.
name|getCumulativeVmem
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Getting non-zero rssmem for processes older than 3 iterations"
argument_list|,
literal|0L
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Getting non-zero rssmem for processes older than 3 iterations"
argument_list|,
literal|0L
argument_list|,
name|processTree
operator|.
name|getCumulativeRssmem
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verifies ProcfsBasedProcessTree.checkPidPgrpidForMatch() in case of    * 'constructProcessInfo() returning null' by not writing stat file for the    * mock process    *    * @throws IOException    *           if there was a problem setting up the fake procfs directories or    *           files.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testDestroyProcessTree ()
specifier|public
name|void
name|testDestroyProcessTree
parameter_list|()
throws|throws
name|IOException
block|{
comment|// test process
name|String
name|pid
init|=
literal|"100"
decl_stmt|;
comment|// create the fake procfs root directory.
name|File
name|procfsRootDir
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"proc"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupProcfsRootDir
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
comment|// crank up the process tree class.
name|createProcessTree
argument_list|(
name|pid
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let us not create stat file for pid 100.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProcfsBasedProcessTree
operator|.
name|checkPidPgrpidForMatch
argument_list|(
name|pid
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the correctness of process-tree dump.    *    * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testProcessTreeDump ()
specifier|public
name|void
name|testProcessTreeDump
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|pids
init|=
block|{
literal|"100"
block|,
literal|"200"
block|,
literal|"300"
block|,
literal|"400"
block|,
literal|"500"
block|,
literal|"600"
block|}
decl_stmt|;
name|File
name|procfsRootDir
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
literal|"proc"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupProcfsRootDir
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
name|setupPidDirs
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|)
expr_stmt|;
name|int
name|numProcesses
init|=
name|pids
operator|.
name|length
decl_stmt|;
comment|// Processes 200, 300, 400 and 500 are descendants of 100. 600 is not.
name|ProcessStatInfo
index|[]
name|procInfos
init|=
operator|new
name|ProcessStatInfo
index|[
name|numProcesses
index|]
decl_stmt|;
name|procInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"100"
block|,
literal|"proc1"
block|,
literal|"1"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100000"
block|,
literal|"100"
block|,
literal|"1000"
block|,
literal|"200"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|1
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"200"
block|,
literal|"proc2"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"200000"
block|,
literal|"200"
block|,
literal|"2000"
block|,
literal|"400"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|2
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"300"
block|,
literal|"proc3"
block|,
literal|"200"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"300000"
block|,
literal|"300"
block|,
literal|"3000"
block|,
literal|"600"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|3
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"400"
block|,
literal|"proc4"
block|,
literal|"200"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"400000"
block|,
literal|"400"
block|,
literal|"4000"
block|,
literal|"800"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|4
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"500"
block|,
literal|"proc5"
block|,
literal|"400"
block|,
literal|"100"
block|,
literal|"100"
block|,
literal|"400000"
block|,
literal|"400"
block|,
literal|"4000"
block|,
literal|"800"
block|}
argument_list|)
expr_stmt|;
name|procInfos
index|[
literal|5
index|]
operator|=
operator|new
name|ProcessStatInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"600"
block|,
literal|"proc6"
block|,
literal|"1"
block|,
literal|"1"
block|,
literal|"1"
block|,
literal|"400000"
block|,
literal|"400"
block|,
literal|"4000"
block|,
literal|"800"
block|}
argument_list|)
expr_stmt|;
name|ProcessTreeSmapMemInfo
index|[]
name|memInfos
init|=
operator|new
name|ProcessTreeSmapMemInfo
index|[
literal|6
index|]
decl_stmt|;
name|memInfos
index|[
literal|0
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"100"
argument_list|)
expr_stmt|;
name|memInfos
index|[
literal|1
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"200"
argument_list|)
expr_stmt|;
name|memInfos
index|[
literal|2
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"300"
argument_list|)
expr_stmt|;
name|memInfos
index|[
literal|3
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"400"
argument_list|)
expr_stmt|;
name|memInfos
index|[
literal|4
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"500"
argument_list|)
expr_stmt|;
name|memInfos
index|[
literal|5
index|]
operator|=
operator|new
name|ProcessTreeSmapMemInfo
argument_list|(
literal|"600"
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmdLines
init|=
operator|new
name|String
index|[
name|numProcesses
index|]
decl_stmt|;
name|cmdLines
index|[
literal|0
index|]
operator|=
literal|"proc1 arg1 arg2"
expr_stmt|;
name|cmdLines
index|[
literal|1
index|]
operator|=
literal|"proc2 arg3 arg4"
expr_stmt|;
name|cmdLines
index|[
literal|2
index|]
operator|=
literal|"proc3 arg5 arg6"
expr_stmt|;
name|cmdLines
index|[
literal|3
index|]
operator|=
literal|"proc4 arg7 arg8"
expr_stmt|;
name|cmdLines
index|[
literal|4
index|]
operator|=
literal|"proc5 arg9 arg10"
expr_stmt|;
name|cmdLines
index|[
literal|5
index|]
operator|=
literal|"proc6 arg11 arg12"
expr_stmt|;
name|createMemoryMappingInfo
argument_list|(
name|memInfos
argument_list|)
expr_stmt|;
name|writeStatFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|,
name|procInfos
argument_list|,
name|memInfos
argument_list|)
expr_stmt|;
name|writeCmdLineFiles
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
argument_list|,
name|cmdLines
argument_list|)
expr_stmt|;
name|ProcfsBasedProcessTree
name|processTree
init|=
name|createProcessTree
argument_list|(
literal|"100"
argument_list|,
name|procfsRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
comment|// build the process tree.
name|processTree
operator|.
name|updateProcessTree
argument_list|()
expr_stmt|;
comment|// Get the process-tree dump
name|String
name|processTreeDump
init|=
name|processTree
operator|.
name|getProcessTreeDump
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Process-tree dump follows: \n"
operator|+
name|processTreeDump
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process-tree dump doesn't start with a proper header"
argument_list|,
name|processTreeDump
operator|.
name|startsWith
argument_list|(
literal|"\t|- PID PPID PGRPID SESSID CMD_NAME "
operator|+
literal|"USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) "
operator|+
literal|"RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|ProcessStatInfo
name|p
init|=
name|procInfos
index|[
name|i
index|]
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Process-tree dump doesn't contain the cmdLineDump of process "
operator|+
name|p
operator|.
name|pid
argument_list|,
name|processTreeDump
operator|.
name|contains
argument_list|(
literal|"\t|- "
operator|+
name|p
operator|.
name|pid
operator|+
literal|" "
operator|+
name|p
operator|.
name|ppid
operator|+
literal|" "
operator|+
name|p
operator|.
name|pgrpId
operator|+
literal|" "
operator|+
name|p
operator|.
name|session
operator|+
literal|" ("
operator|+
name|p
operator|.
name|name
operator|+
literal|") "
operator|+
name|p
operator|.
name|utime
operator|+
literal|" "
operator|+
name|p
operator|.
name|stime
operator|+
literal|" "
operator|+
name|p
operator|.
name|vmem
operator|+
literal|" "
operator|+
name|p
operator|.
name|rssmemPage
operator|+
literal|" "
operator|+
name|cmdLines
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 600 should not be in the dump
name|ProcessStatInfo
name|p
init|=
name|procInfos
index|[
literal|5
index|]
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Process-tree dump shouldn't contain the cmdLineDump of process "
operator|+
name|p
operator|.
name|pid
argument_list|,
name|processTreeDump
operator|.
name|contains
argument_list|(
literal|"\t|- "
operator|+
name|p
operator|.
name|pid
operator|+
literal|" "
operator|+
name|p
operator|.
name|ppid
operator|+
literal|" "
operator|+
name|p
operator|.
name|pgrpId
operator|+
literal|" "
operator|+
name|p
operator|.
name|session
operator|+
literal|" ("
operator|+
name|p
operator|.
name|name
operator|+
literal|") "
operator|+
name|p
operator|.
name|utime
operator|+
literal|" "
operator|+
name|p
operator|.
name|stime
operator|+
literal|" "
operator|+
name|p
operator|.
name|vmem
operator|+
literal|" "
operator|+
name|cmdLines
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|procfsRootDir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isSetsidAvailable ()
specifier|protected
specifier|static
name|boolean
name|isSetsidAvailable
parameter_list|()
block|{
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
name|boolean
name|setsidSupported
init|=
literal|true
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"setsid"
block|,
literal|"bash"
block|,
literal|"-c"
block|,
literal|"echo $$"
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"setsid is not available on this machine. So not using it."
argument_list|)
expr_stmt|;
name|setsidSupported
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
comment|// handle the exit code
name|LOG
operator|.
name|info
argument_list|(
literal|"setsid exited with exit code "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|setsidSupported
return|;
block|}
comment|/**    * Is the root-process alive? Used only in tests.    *    * @return true if the root-process is alive, false otherwise.    */
DECL|method|isAlive (String pid)
specifier|private
specifier|static
name|boolean
name|isAlive
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|sigpid
init|=
name|isSetsidAvailable
argument_list|()
condition|?
literal|"-"
operator|+
name|pid
else|:
name|pid
decl_stmt|;
try|try
block|{
name|sendSignal
argument_list|(
name|sigpid
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{     }
return|return
literal|false
return|;
block|}
DECL|method|sendSignal (String pid, int signal)
specifier|private
specifier|static
name|void
name|sendSignal
parameter_list|(
name|String
name|pid
parameter_list|,
name|int
name|signal
parameter_list|)
throws|throws
name|IOException
block|{
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
name|String
index|[]
name|arg
init|=
block|{
literal|"kill"
block|,
literal|"-"
operator|+
name|signal
block|,
name|pid
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|arg
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
comment|/**    * Is any of the subprocesses in the process-tree alive? Used only in tests.    *    * @return true if any of the processes in the process-tree is alive, false    *         otherwise.    */
DECL|method|isAnyProcessInTreeAlive ( ProcfsBasedProcessTree processTree)
specifier|private
specifier|static
name|boolean
name|isAnyProcessInTreeAlive
parameter_list|(
name|ProcfsBasedProcessTree
name|processTree
parameter_list|)
block|{
for|for
control|(
name|String
name|pId
range|:
name|processTree
operator|.
name|getCurrentProcessIDs
argument_list|()
control|)
block|{
if|if
condition|(
name|isAlive
argument_list|(
name|pId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Create a directory to mimic the procfs file system's root.    *    * @param procfsRootDir    *          root directory to create.    * @throws IOException    *           if could not delete the procfs root directory    */
DECL|method|setupProcfsRootDir (File procfsRootDir)
specifier|public
specifier|static
name|void
name|setupProcfsRootDir
parameter_list|(
name|File
name|procfsRootDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// cleanup any existing process root dir.
if|if
condition|(
name|procfsRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|procfsRootDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create afresh
name|Assert
operator|.
name|assertTrue
argument_list|(
name|procfsRootDir
operator|.
name|mkdirs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create PID directories under the specified procfs root directory    *    * @param procfsRootDir    *          root directory of procfs file system    * @param pids    *          the PID directories to create.    * @throws IOException    *           If PID dirs could not be created    */
DECL|method|setupPidDirs (File procfsRootDir, String[] pids)
specifier|public
specifier|static
name|void
name|setupPidDirs
parameter_list|(
name|File
name|procfsRootDir
parameter_list|,
name|String
index|[]
name|pids
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|pid
range|:
name|pids
control|)
block|{
name|File
name|pidDir
init|=
operator|new
name|File
argument_list|(
name|procfsRootDir
argument_list|,
name|pid
argument_list|)
decl_stmt|;
name|pidDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|pidDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"couldn't make process directory under "
operator|+
literal|"fake procfs"
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"created pid dir"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Write stat files under the specified pid directories with data setup in the    * corresponding ProcessStatInfo objects    *    * @param procfsRootDir    *          root directory of procfs file system    * @param pids    *          the PID directories under which to create the stat file    * @param procs    *          corresponding ProcessStatInfo objects whose data should be written    *          to the stat files.    * @throws IOException    *           if stat files could not be written    */
DECL|method|writeStatFiles (File procfsRootDir, String[] pids, ProcessStatInfo[] procs, ProcessTreeSmapMemInfo[] smaps)
specifier|public
specifier|static
name|void
name|writeStatFiles
parameter_list|(
name|File
name|procfsRootDir
parameter_list|,
name|String
index|[]
name|pids
parameter_list|,
name|ProcessStatInfo
index|[]
name|procs
parameter_list|,
name|ProcessTreeSmapMemInfo
index|[]
name|smaps
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|statFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ProcfsBasedProcessTree
operator|.
name|PROCFS_STAT_FILE
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|statFile
argument_list|)
decl_stmt|;
name|bw
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|fw
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|procs
index|[
name|i
index|]
operator|.
name|getStatLine
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wrote stat file for "
operator|+
name|pids
index|[
name|i
index|]
operator|+
literal|" with contents: "
operator|+
name|procs
index|[
name|i
index|]
operator|.
name|getStatLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// not handling exception - will throw an error and fail the test.
if|if
condition|(
name|bw
operator|!=
literal|null
condition|)
block|{
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|smaps
operator|!=
literal|null
condition|)
block|{
name|File
name|smapFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ProcfsBasedProcessTree
operator|.
name|SMAPS
argument_list|)
decl_stmt|;
name|bw
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|smapFile
argument_list|)
decl_stmt|;
name|bw
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|fw
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|smaps
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wrote smap file for "
operator|+
name|pids
index|[
name|i
index|]
operator|+
literal|" with contents: "
operator|+
name|smaps
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// not handling exception - will throw an error and fail the test.
if|if
condition|(
name|bw
operator|!=
literal|null
condition|)
block|{
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|writeCmdLineFiles (File procfsRootDir, String[] pids, String[] cmdLines)
specifier|private
specifier|static
name|void
name|writeCmdLineFiles
parameter_list|(
name|File
name|procfsRootDir
parameter_list|,
name|String
index|[]
name|pids
parameter_list|,
name|String
index|[]
name|cmdLines
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|statFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|procfsRootDir
argument_list|,
name|pids
index|[
name|i
index|]
argument_list|)
argument_list|,
name|ProcfsBasedProcessTree
operator|.
name|PROCFS_CMDLINE_FILE
argument_list|)
decl_stmt|;
name|BufferedWriter
name|bw
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bw
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|statFile
argument_list|)
argument_list|)
expr_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|cmdLines
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"wrote command-line file for "
operator|+
name|pids
index|[
name|i
index|]
operator|+
literal|" with contents: "
operator|+
name|cmdLines
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// not handling exception - will throw an error and fail the test.
if|if
condition|(
name|bw
operator|!=
literal|null
condition|)
block|{
name|bw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

