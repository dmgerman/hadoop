begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsInstanceOf
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsSame
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test {@link ResourceCalculatorPlugin}  */
end_comment

begin_class
DECL|class|TestResourceCalculatorProcessTree
specifier|public
class|class
name|TestResourceCalculatorProcessTree
block|{
DECL|class|EmptyProcessTree
specifier|public
specifier|static
class|class
name|EmptyProcessTree
extends|extends
name|ResourceCalculatorProcessTree
block|{
DECL|method|EmptyProcessTree (String pid)
specifier|public
name|EmptyProcessTree
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|super
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
DECL|method|updateProcessTree ()
specifier|public
name|void
name|updateProcessTree
parameter_list|()
block|{     }
DECL|method|getProcessTreeDump ()
specifier|public
name|String
name|getProcessTreeDump
parameter_list|()
block|{
return|return
literal|"Empty tree for testing"
return|;
block|}
DECL|method|getRssMemorySize (int age)
specifier|public
name|long
name|getRssMemorySize
parameter_list|(
name|int
name|age
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getCumulativeRssmem (int age)
specifier|public
name|long
name|getCumulativeRssmem
parameter_list|(
name|int
name|age
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
DECL|method|getVirtualMemorySize (int age)
specifier|public
name|long
name|getVirtualMemorySize
parameter_list|(
name|int
name|age
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getCumulativeVmem (int age)
specifier|public
name|long
name|getCumulativeVmem
parameter_list|(
name|int
name|age
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
DECL|method|getCumulativeCpuTime ()
specifier|public
name|long
name|getCumulativeCpuTime
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|getCpuUsagePercent ()
specifier|public
name|float
name|getCpuUsagePercent
parameter_list|()
block|{
return|return
name|CpuTimeTracker
operator|.
name|UNAVAILABLE
return|;
block|}
DECL|method|checkPidPgrpidForMatch ()
specifier|public
name|boolean
name|checkPidPgrpidForMatch
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateInstance ()
specifier|public
name|void
name|testCreateInstance
parameter_list|()
block|{
name|ResourceCalculatorProcessTree
name|tree
decl_stmt|;
name|tree
operator|=
name|ResourceCalculatorProcessTree
operator|.
name|getResourceCalculatorProcessTree
argument_list|(
literal|"1"
argument_list|,
name|EmptyProcessTree
operator|.
name|class
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tree
argument_list|,
name|instanceOf
argument_list|(
name|EmptyProcessTree
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatedInstanceConfigured ()
specifier|public
name|void
name|testCreatedInstanceConfigured
parameter_list|()
block|{
name|ResourceCalculatorProcessTree
name|tree
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|tree
operator|=
name|ResourceCalculatorProcessTree
operator|.
name|getResourceCalculatorProcessTree
argument_list|(
literal|"1"
argument_list|,
name|EmptyProcessTree
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|tree
operator|.
name|getConf
argument_list|()
argument_list|,
name|sameInstance
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

