begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_class
DECL|class|ControlledClock
specifier|public
class|class
name|ControlledClock
implements|implements
name|Clock
block|{
DECL|field|time
specifier|private
name|long
name|time
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|actualClock
specifier|private
specifier|final
name|Clock
name|actualClock
decl_stmt|;
comment|// Convenience for getting a controlled clock with overridden time
DECL|method|ControlledClock ()
specifier|public
name|ControlledClock
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|SystemClock
argument_list|()
argument_list|)
expr_stmt|;
name|setTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|ControlledClock (Clock actualClock)
specifier|public
name|ControlledClock
parameter_list|(
name|Clock
name|actualClock
parameter_list|)
block|{
name|this
operator|.
name|actualClock
operator|=
name|actualClock
expr_stmt|;
block|}
DECL|method|setTime (long time)
specifier|public
specifier|synchronized
name|void
name|setTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|time
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|tickSec (int seconds)
specifier|public
specifier|synchronized
name|void
name|tickSec
parameter_list|(
name|int
name|seconds
parameter_list|)
block|{
name|tickMsec
argument_list|(
name|seconds
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
DECL|method|tickMsec (long millisec)
specifier|public
specifier|synchronized
name|void
name|tickMsec
parameter_list|(
name|long
name|millisec
parameter_list|)
block|{
if|if
condition|(
name|time
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"ControlledClock setTime should be "
operator|+
literal|"called before incrementing time"
argument_list|)
throw|;
block|}
name|time
operator|=
name|time
operator|+
name|millisec
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTime ()
specifier|public
specifier|synchronized
name|long
name|getTime
parameter_list|()
block|{
if|if
condition|(
name|time
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|time
return|;
block|}
return|return
name|actualClock
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
end_class

end_unit

