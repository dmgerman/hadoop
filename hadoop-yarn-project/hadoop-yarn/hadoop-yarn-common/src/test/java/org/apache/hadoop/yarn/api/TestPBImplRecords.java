begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|LongRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|proto
operator|.
name|SecurityProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerServiceProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestPBImplRecords
specifier|public
class|class
name|TestPBImplRecords
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPBImplRecords
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|typeValueCache
specifier|private
specifier|static
name|HashMap
argument_list|<
name|Type
argument_list|,
name|Object
argument_list|>
name|typeValueCache
init|=
operator|new
name|HashMap
argument_list|<
name|Type
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|rand
specifier|private
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|bytes
specifier|private
specifier|static
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|}
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|genTypeValue (Type type)
specifier|private
specifier|static
name|Object
name|genTypeValue
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Object
name|ret
init|=
name|typeValueCache
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
comment|// only use positive primitive values
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|rand
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|byte
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|bytes
index|[
name|rand
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
index|]
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|int
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|long
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|float
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|rand
operator|.
name|nextFloat
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|double
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|rand
operator|.
name|nextDouble
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%c%c%c"
argument_list|,
literal|'a'
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|,
literal|'a'
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|,
literal|'a'
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
name|Class
name|clazz
init|=
operator|(
name|Class
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Class
name|compClass
init|=
name|clazz
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|compClass
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|Array
operator|.
name|newInstance
argument_list|(
name|compClass
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Array
operator|.
name|set
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|genTypeValue
argument_list|(
name|compClass
argument_list|)
argument_list|)
expr_stmt|;
name|Array
operator|.
name|set
argument_list|(
name|ret
argument_list|,
literal|1
argument_list|,
name|genTypeValue
argument_list|(
name|compClass
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|isEnum
argument_list|()
condition|)
block|{
name|Object
index|[]
name|values
init|=
name|clazz
operator|.
name|getEnumConstants
argument_list|()
decl_stmt|;
name|ret
operator|=
name|values
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|length
argument_list|)
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|ByteBuffer
operator|.
name|class
argument_list|)
condition|)
block|{
comment|// return new ByteBuffer every time
comment|// to prevent potential side effects
name|ByteBuffer
name|buff
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|buff
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buff
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|Type
name|rawType
init|=
name|pt
operator|.
name|getRawType
argument_list|()
decl_stmt|;
name|Type
index|[]
name|params
init|=
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
decl_stmt|;
comment|// only support EnumSet<T>, List<T>, Set<T>, Map<K,V>
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|EnumSet
operator|.
name|class
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
index|[
literal|0
index|]
operator|instanceof
name|Class
condition|)
block|{
name|Class
name|c
init|=
call|(
name|Class
call|)
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|EnumSet
operator|.
name|allOf
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|List
operator|.
name|class
argument_list|)
condition|)
block|{
name|ret
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|genTypeValue
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|Set
operator|.
name|class
argument_list|)
condition|)
block|{
name|ret
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|genTypeValue
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rawType
operator|.
name|equals
argument_list|(
name|Map
operator|.
name|class
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|genTypeValue
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|genTypeValue
argument_list|(
name|params
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|map
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"type "
operator|+
name|type
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
name|typeValueCache
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * this method generate record instance by calling newIntance    * using reflection, add register the generated value to typeValueCache    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|generateByNewInstance (Class clazz)
specifier|private
specifier|static
name|Object
name|generateByNewInstance
parameter_list|(
name|Class
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|ret
init|=
name|typeValueCache
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
name|Method
name|newInstance
init|=
literal|null
decl_stmt|;
name|Type
index|[]
name|paramTypes
init|=
operator|new
name|Type
index|[
literal|0
index|]
decl_stmt|;
comment|// get newInstance method with most parameters
for|for
control|(
name|Method
name|m
range|:
name|clazz
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|int
name|mod
init|=
name|m
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|mod
argument_list|)
operator|&&
name|Modifier
operator|.
name|isStatic
argument_list|(
name|mod
argument_list|)
operator|&&
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"newInstance"
argument_list|)
condition|)
block|{
name|Type
index|[]
name|pts
init|=
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|newInstance
operator|==
literal|null
operator|||
operator|(
name|pts
operator|.
name|length
operator|>
name|paramTypes
operator|.
name|length
operator|)
condition|)
block|{
name|newInstance
operator|=
name|m
expr_stmt|;
name|paramTypes
operator|=
name|pts
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newInstance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"type "
operator|+
name|clazz
operator|.
name|getName
argument_list|()
operator|+
literal|" does not have newInstance method"
argument_list|)
throw|;
block|}
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
name|paramTypes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|args
index|[
name|i
index|]
operator|=
name|genTypeValue
argument_list|(
name|paramTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|newInstance
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|typeValueCache
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|typeValueCache
operator|.
name|put
argument_list|(
name|LongRange
operator|.
name|class
argument_list|,
operator|new
name|LongRange
argument_list|(
literal|1000
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|typeValueCache
operator|.
name|put
argument_list|(
name|URL
operator|.
name|class
argument_list|,
name|URL
operator|.
name|newInstance
argument_list|(
literal|"http"
argument_list|,
literal|"localhost"
argument_list|,
literal|8080
argument_list|,
literal|"file0"
argument_list|)
argument_list|)
expr_stmt|;
name|typeValueCache
operator|.
name|put
argument_list|(
name|SerializedException
operator|.
name|class
argument_list|,
name|SerializedException
operator|.
name|newInstance
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"exception for test"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|LogAggregationContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ResourceBlacklistRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ResourceOption
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|LocalResource
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|NodeReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|Token
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|NMToken
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ApplicationAttemptReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ApplicationResourceUsageReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|Container
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ContainerReport
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ContainerResourceDecrease
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ContainerResourceIncrease
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ContainerResourceIncreaseRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|PreemptionContainer
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|PreemptionResourceRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|PreemptionContainer
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|PreemptionContract
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|StrictPreemptionContract
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|PreemptionMessage
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|StartContainerRequest
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// genByNewInstance does not apply to QueueInfo, cause
comment|// it is recursive(has sub queues)
name|typeValueCache
operator|.
name|put
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|,
name|QueueInfo
operator|.
name|newInstance
argument_list|(
literal|"root"
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.1f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|,
literal|"x&& y"
argument_list|)
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|QueueUserACLInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|YarnClusterMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// for reservation system
name|generateByNewInstance
argument_list|(
name|ReservationId
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ReservationRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ReservationRequests
operator|.
name|class
argument_list|)
expr_stmt|;
name|generateByNewInstance
argument_list|(
name|ReservationDefinition
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|GetSetPair
specifier|private
class|class
name|GetSetPair
block|{
DECL|field|propertyName
specifier|public
name|String
name|propertyName
decl_stmt|;
DECL|field|getMethod
specifier|public
name|Method
name|getMethod
decl_stmt|;
DECL|field|setMethod
specifier|public
name|Method
name|setMethod
decl_stmt|;
DECL|field|type
specifier|public
name|Type
name|type
decl_stmt|;
DECL|field|testValue
specifier|public
name|Object
name|testValue
decl_stmt|;
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"{ name=%s, class=%s, value=%s }"
argument_list|,
name|propertyName
argument_list|,
name|type
argument_list|,
name|testValue
argument_list|)
return|;
block|}
block|}
DECL|method|getGetSetPairs (Class<R> recordClass)
specifier|private
parameter_list|<
name|R
parameter_list|>
name|Map
argument_list|<
name|String
argument_list|,
name|GetSetPair
argument_list|>
name|getGetSetPairs
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|recordClass
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|GetSetPair
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|GetSetPair
argument_list|>
argument_list|()
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|recordClass
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
comment|// get all get methods
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|m
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
name|int
name|mod
init|=
name|m
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|equals
argument_list|(
name|recordClass
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|mod
argument_list|)
operator|&&
operator|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|mod
argument_list|)
operator|)
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"getProto"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|)
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
operator|(
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
name|String
name|propertyName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Type
name|valueType
init|=
name|m
operator|.
name|getGenericReturnType
argument_list|()
decl_stmt|;
name|GetSetPair
name|p
init|=
name|ret
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|GetSetPair
argument_list|()
expr_stmt|;
name|p
operator|.
name|propertyName
operator|=
name|propertyName
expr_stmt|;
name|p
operator|.
name|type
operator|=
name|valueType
expr_stmt|;
name|p
operator|.
name|getMethod
operator|=
name|m
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|propertyName
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Multiple get method with same name: "
operator|+
name|recordClass
operator|+
name|p
operator|.
name|propertyName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// match get methods with set methods
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|m
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
name|int
name|mod
init|=
name|m
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|equals
argument_list|(
name|recordClass
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|mod
argument_list|)
operator|&&
operator|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|mod
argument_list|)
operator|)
condition|)
block|{
name|String
name|name
init|=
name|m
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|&&
operator|(
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|)
condition|)
block|{
name|String
name|propertyName
init|=
name|name
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Type
name|valueType
init|=
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|GetSetPair
name|p
init|=
name|ret
operator|.
name|get
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|type
operator|.
name|equals
argument_list|(
name|valueType
argument_list|)
condition|)
block|{
name|p
operator|.
name|setMethod
operator|=
name|m
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// exclude incomplete get/set pair, and generate test value
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|GetSetPair
argument_list|>
argument_list|>
name|itr
init|=
name|ret
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|GetSetPair
argument_list|>
name|cur
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|GetSetPair
name|gsp
init|=
name|cur
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|gsp
operator|.
name|getMethod
operator|==
literal|null
operator|)
operator|||
operator|(
name|gsp
operator|.
name|setMethod
operator|==
literal|null
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Exclude protential property: %s\n"
argument_list|,
name|gsp
operator|.
name|propertyName
argument_list|)
argument_list|)
expr_stmt|;
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"New property: %s type: %s"
argument_list|,
name|gsp
operator|.
name|toString
argument_list|()
argument_list|,
name|gsp
operator|.
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|gsp
operator|.
name|testValue
operator|=
name|genTypeValue
argument_list|(
name|gsp
operator|.
name|type
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" testValue: %s\n"
argument_list|,
name|gsp
operator|.
name|testValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|validatePBImplRecord (Class<R> recordClass, Class<P> protoClass)
specifier|private
parameter_list|<
name|R
parameter_list|,
name|P
parameter_list|>
name|void
name|validatePBImplRecord
parameter_list|(
name|Class
argument_list|<
name|R
argument_list|>
name|recordClass
parameter_list|,
name|Class
argument_list|<
name|P
argument_list|>
name|protoClass
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Validate %s %s\n"
argument_list|,
name|recordClass
operator|.
name|getName
argument_list|()
argument_list|,
name|protoClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Constructor
argument_list|<
name|R
argument_list|>
name|emptyConstructor
init|=
name|recordClass
operator|.
name|getConstructor
argument_list|()
decl_stmt|;
name|Constructor
argument_list|<
name|R
argument_list|>
name|pbConstructor
init|=
name|recordClass
operator|.
name|getConstructor
argument_list|(
name|protoClass
argument_list|)
decl_stmt|;
name|Method
name|getProto
init|=
name|recordClass
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getProto"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|GetSetPair
argument_list|>
name|getSetPairs
init|=
name|getGetSetPairs
argument_list|(
name|recordClass
argument_list|)
decl_stmt|;
name|R
name|origRecord
init|=
name|emptyConstructor
operator|.
name|newInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|GetSetPair
name|gsp
range|:
name|getSetPairs
operator|.
name|values
argument_list|()
control|)
block|{
name|gsp
operator|.
name|setMethod
operator|.
name|invoke
argument_list|(
name|origRecord
argument_list|,
name|gsp
operator|.
name|testValue
argument_list|)
expr_stmt|;
block|}
name|Object
name|ret
init|=
name|getProto
operator|.
name|invoke
argument_list|(
name|origRecord
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|recordClass
operator|.
name|getName
argument_list|()
operator|+
literal|"#getProto returns null"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|protoClass
operator|.
name|isAssignableFrom
argument_list|(
name|ret
operator|.
name|getClass
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Illegal getProto method return type: "
operator|+
name|ret
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|R
name|deserRecord
init|=
name|pbConstructor
operator|.
name|newInstance
argument_list|(
name|ret
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"whole "
operator|+
name|recordClass
operator|+
literal|" records should be equal"
argument_list|,
name|origRecord
argument_list|,
name|deserRecord
argument_list|)
expr_stmt|;
for|for
control|(
name|GetSetPair
name|gsp
range|:
name|getSetPairs
operator|.
name|values
argument_list|()
control|)
block|{
name|Object
name|origValue
init|=
name|gsp
operator|.
name|getMethod
operator|.
name|invoke
argument_list|(
name|origRecord
argument_list|)
decl_stmt|;
name|Object
name|deserValue
init|=
name|gsp
operator|.
name|getMethod
operator|.
name|invoke
argument_list|(
name|deserRecord
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"property "
operator|+
name|recordClass
operator|.
name|getName
argument_list|()
operator|+
literal|"#"
operator|+
name|gsp
operator|.
name|propertyName
operator|+
literal|" should be equal"
argument_list|,
name|origValue
argument_list|,
name|deserValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAllocateRequestPBImpl ()
specifier|public
name|void
name|testAllocateRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|AllocateRequestPBImpl
operator|.
name|class
argument_list|,
name|AllocateRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateResponsePBImpl ()
specifier|public
name|void
name|testAllocateResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|AllocateResponsePBImpl
operator|.
name|class
argument_list|,
name|AllocateResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelDelegationTokenRequestPBImpl ()
specifier|public
name|void
name|testCancelDelegationTokenRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|CancelDelegationTokenRequestPBImpl
operator|.
name|class
argument_list|,
name|CancelDelegationTokenRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelDelegationTokenResponsePBImpl ()
specifier|public
name|void
name|testCancelDelegationTokenResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|CancelDelegationTokenResponsePBImpl
operator|.
name|class
argument_list|,
name|CancelDelegationTokenResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishApplicationMasterRequestPBImpl ()
specifier|public
name|void
name|testFinishApplicationMasterRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|FinishApplicationMasterRequestPBImpl
operator|.
name|class
argument_list|,
name|FinishApplicationMasterRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishApplicationMasterResponsePBImpl ()
specifier|public
name|void
name|testFinishApplicationMasterResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|FinishApplicationMasterResponsePBImpl
operator|.
name|class
argument_list|,
name|FinishApplicationMasterResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttemptReportRequestPBImpl ()
specifier|public
name|void
name|testGetApplicationAttemptReportRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationAttemptReportRequestPBImpl
operator|.
name|class
argument_list|,
name|GetApplicationAttemptReportRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttemptReportResponsePBImpl ()
specifier|public
name|void
name|testGetApplicationAttemptReportResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationAttemptReportResponsePBImpl
operator|.
name|class
argument_list|,
name|GetApplicationAttemptReportResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttemptsRequestPBImpl ()
specifier|public
name|void
name|testGetApplicationAttemptsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationAttemptsRequestPBImpl
operator|.
name|class
argument_list|,
name|GetApplicationAttemptsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttemptsResponsePBImpl ()
specifier|public
name|void
name|testGetApplicationAttemptsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationAttemptsResponsePBImpl
operator|.
name|class
argument_list|,
name|GetApplicationAttemptsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationReportRequestPBImpl ()
specifier|public
name|void
name|testGetApplicationReportRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationReportRequestPBImpl
operator|.
name|class
argument_list|,
name|GetApplicationReportRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationReportResponsePBImpl ()
specifier|public
name|void
name|testGetApplicationReportResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationReportResponsePBImpl
operator|.
name|class
argument_list|,
name|GetApplicationReportResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationsRequestPBImpl ()
specifier|public
name|void
name|testGetApplicationsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationsRequestPBImpl
operator|.
name|class
argument_list|,
name|GetApplicationsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationsResponsePBImpl ()
specifier|public
name|void
name|testGetApplicationsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetApplicationsResponsePBImpl
operator|.
name|class
argument_list|,
name|GetApplicationsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClusterMetricsRequestPBImpl ()
specifier|public
name|void
name|testGetClusterMetricsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetClusterMetricsRequestPBImpl
operator|.
name|class
argument_list|,
name|GetClusterMetricsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClusterMetricsResponsePBImpl ()
specifier|public
name|void
name|testGetClusterMetricsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetClusterMetricsResponsePBImpl
operator|.
name|class
argument_list|,
name|GetClusterMetricsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClusterNodesRequestPBImpl ()
specifier|public
name|void
name|testGetClusterNodesRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetClusterNodesRequestPBImpl
operator|.
name|class
argument_list|,
name|GetClusterNodesRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClusterNodesResponsePBImpl ()
specifier|public
name|void
name|testGetClusterNodesResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetClusterNodesResponsePBImpl
operator|.
name|class
argument_list|,
name|GetClusterNodesResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerReportRequestPBImpl ()
specifier|public
name|void
name|testGetContainerReportRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetContainerReportRequestPBImpl
operator|.
name|class
argument_list|,
name|GetContainerReportRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerReportResponsePBImpl ()
specifier|public
name|void
name|testGetContainerReportResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetContainerReportResponsePBImpl
operator|.
name|class
argument_list|,
name|GetContainerReportResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainersRequestPBImpl ()
specifier|public
name|void
name|testGetContainersRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetContainersRequestPBImpl
operator|.
name|class
argument_list|,
name|GetContainersRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainersResponsePBImpl ()
specifier|public
name|void
name|testGetContainersResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetContainersResponsePBImpl
operator|.
name|class
argument_list|,
name|GetContainersResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerStatusesRequestPBImpl ()
specifier|public
name|void
name|testGetContainerStatusesRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetContainerStatusesRequestPBImpl
operator|.
name|class
argument_list|,
name|GetContainerStatusesRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetContainerStatusesResponsePBImpl ()
specifier|public
name|void
name|testGetContainerStatusesResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetContainerStatusesResponsePBImpl
operator|.
name|class
argument_list|,
name|GetContainerStatusesResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDelegationTokenRequestPBImpl ()
specifier|public
name|void
name|testGetDelegationTokenRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetDelegationTokenRequestPBImpl
operator|.
name|class
argument_list|,
name|GetDelegationTokenRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDelegationTokenResponsePBImpl ()
specifier|public
name|void
name|testGetDelegationTokenResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetDelegationTokenResponsePBImpl
operator|.
name|class
argument_list|,
name|GetDelegationTokenResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNewApplicationRequestPBImpl ()
specifier|public
name|void
name|testGetNewApplicationRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetNewApplicationRequestPBImpl
operator|.
name|class
argument_list|,
name|GetNewApplicationRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNewApplicationResponsePBImpl ()
specifier|public
name|void
name|testGetNewApplicationResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetNewApplicationResponsePBImpl
operator|.
name|class
argument_list|,
name|GetNewApplicationResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfoRequestPBImpl ()
specifier|public
name|void
name|testGetQueueInfoRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetQueueInfoRequestPBImpl
operator|.
name|class
argument_list|,
name|GetQueueInfoRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfoResponsePBImpl ()
specifier|public
name|void
name|testGetQueueInfoResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetQueueInfoResponsePBImpl
operator|.
name|class
argument_list|,
name|GetQueueInfoResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueUserAclsInfoRequestPBImpl ()
specifier|public
name|void
name|testGetQueueUserAclsInfoRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetQueueUserAclsInfoRequestPBImpl
operator|.
name|class
argument_list|,
name|GetQueueUserAclsInfoRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueUserAclsInfoResponsePBImpl ()
specifier|public
name|void
name|testGetQueueUserAclsInfoResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetQueueUserAclsInfoResponsePBImpl
operator|.
name|class
argument_list|,
name|GetQueueUserAclsInfoResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillApplicationRequestPBImpl ()
specifier|public
name|void
name|testKillApplicationRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|KillApplicationRequestPBImpl
operator|.
name|class
argument_list|,
name|KillApplicationRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillApplicationResponsePBImpl ()
specifier|public
name|void
name|testKillApplicationResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|KillApplicationResponsePBImpl
operator|.
name|class
argument_list|,
name|KillApplicationResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveApplicationAcrossQueuesRequestPBImpl ()
specifier|public
name|void
name|testMoveApplicationAcrossQueuesRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|MoveApplicationAcrossQueuesRequestPBImpl
operator|.
name|class
argument_list|,
name|MoveApplicationAcrossQueuesRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveApplicationAcrossQueuesResponsePBImpl ()
specifier|public
name|void
name|testMoveApplicationAcrossQueuesResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|MoveApplicationAcrossQueuesResponsePBImpl
operator|.
name|class
argument_list|,
name|MoveApplicationAcrossQueuesResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegisterApplicationMasterRequestPBImpl ()
specifier|public
name|void
name|testRegisterApplicationMasterRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RegisterApplicationMasterRequestPBImpl
operator|.
name|class
argument_list|,
name|RegisterApplicationMasterRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegisterApplicationMasterResponsePBImpl ()
specifier|public
name|void
name|testRegisterApplicationMasterResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RegisterApplicationMasterResponsePBImpl
operator|.
name|class
argument_list|,
name|RegisterApplicationMasterResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenewDelegationTokenRequestPBImpl ()
specifier|public
name|void
name|testRenewDelegationTokenRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RenewDelegationTokenRequestPBImpl
operator|.
name|class
argument_list|,
name|RenewDelegationTokenRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenewDelegationTokenResponsePBImpl ()
specifier|public
name|void
name|testRenewDelegationTokenResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RenewDelegationTokenResponsePBImpl
operator|.
name|class
argument_list|,
name|RenewDelegationTokenResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartContainerRequestPBImpl ()
specifier|public
name|void
name|testStartContainerRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|StartContainerRequestPBImpl
operator|.
name|class
argument_list|,
name|StartContainerRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartContainersRequestPBImpl ()
specifier|public
name|void
name|testStartContainersRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|StartContainersRequestPBImpl
operator|.
name|class
argument_list|,
name|StartContainersRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartContainersResponsePBImpl ()
specifier|public
name|void
name|testStartContainersResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|StartContainersResponsePBImpl
operator|.
name|class
argument_list|,
name|StartContainersResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStopContainersRequestPBImpl ()
specifier|public
name|void
name|testStopContainersRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|StopContainersRequestPBImpl
operator|.
name|class
argument_list|,
name|StopContainersRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStopContainersResponsePBImpl ()
specifier|public
name|void
name|testStopContainersResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|StopContainersResponsePBImpl
operator|.
name|class
argument_list|,
name|StopContainersResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitApplicationRequestPBImpl ()
specifier|public
name|void
name|testSubmitApplicationRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|SubmitApplicationRequestPBImpl
operator|.
name|class
argument_list|,
name|SubmitApplicationRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitApplicationResponsePBImpl ()
specifier|public
name|void
name|testSubmitApplicationResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|SubmitApplicationResponsePBImpl
operator|.
name|class
argument_list|,
name|SubmitApplicationResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|// ignore cause ApplicationIdPBImpl is immutable
DECL|method|testApplicationAttemptIdPBImpl ()
specifier|public
name|void
name|testApplicationAttemptIdPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ApplicationAttemptIdPBImpl
operator|.
name|class
argument_list|,
name|ApplicationAttemptIdProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationAttemptReportPBImpl ()
specifier|public
name|void
name|testApplicationAttemptReportPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ApplicationAttemptReportPBImpl
operator|.
name|class
argument_list|,
name|ApplicationAttemptReportProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|// ignore cause ApplicationIdPBImpl is immutable
DECL|method|testApplicationIdPBImpl ()
specifier|public
name|void
name|testApplicationIdPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ApplicationIdPBImpl
operator|.
name|class
argument_list|,
name|ApplicationIdProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationReportPBImpl ()
specifier|public
name|void
name|testApplicationReportPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ApplicationReportPBImpl
operator|.
name|class
argument_list|,
name|ApplicationReportProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationResourceUsageReportPBImpl ()
specifier|public
name|void
name|testApplicationResourceUsageReportPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ApplicationResourceUsageReportPBImpl
operator|.
name|class
argument_list|,
name|ApplicationResourceUsageReportProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationSubmissionContextPBImpl ()
specifier|public
name|void
name|testApplicationSubmissionContextPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ApplicationSubmissionContextPBImpl
operator|.
name|class
argument_list|,
name|ApplicationSubmissionContextProto
operator|.
name|class
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|ctx
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|ctx
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|// ignore cause ApplicationIdPBImpl is immutable
DECL|method|testContainerIdPBImpl ()
specifier|public
name|void
name|testContainerIdPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerIdPBImpl
operator|.
name|class
argument_list|,
name|ContainerIdProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerLaunchContextPBImpl ()
specifier|public
name|void
name|testContainerLaunchContextPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerLaunchContextPBImpl
operator|.
name|class
argument_list|,
name|ContainerLaunchContextProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerPBImpl ()
specifier|public
name|void
name|testContainerPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerPBImpl
operator|.
name|class
argument_list|,
name|ContainerProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerReportPBImpl ()
specifier|public
name|void
name|testContainerReportPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerReportPBImpl
operator|.
name|class
argument_list|,
name|ContainerReportProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerResourceDecreasePBImpl ()
specifier|public
name|void
name|testContainerResourceDecreasePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerResourceDecreasePBImpl
operator|.
name|class
argument_list|,
name|ContainerResourceDecreaseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerResourceIncreasePBImpl ()
specifier|public
name|void
name|testContainerResourceIncreasePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerResourceIncreasePBImpl
operator|.
name|class
argument_list|,
name|ContainerResourceIncreaseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerResourceIncreaseRequestPBImpl ()
specifier|public
name|void
name|testContainerResourceIncreaseRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerResourceIncreaseRequestPBImpl
operator|.
name|class
argument_list|,
name|ContainerResourceIncreaseRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerStatusPBImpl ()
specifier|public
name|void
name|testContainerStatusPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ContainerStatusPBImpl
operator|.
name|class
argument_list|,
name|ContainerStatusProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalResourcePBImpl ()
specifier|public
name|void
name|testLocalResourcePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|LocalResourcePBImpl
operator|.
name|class
argument_list|,
name|LocalResourceProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNMTokenPBImpl ()
specifier|public
name|void
name|testNMTokenPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|NMTokenPBImpl
operator|.
name|class
argument_list|,
name|NMTokenProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|// ignore cause ApplicationIdPBImpl is immutable
DECL|method|testNodeIdPBImpl ()
specifier|public
name|void
name|testNodeIdPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|NodeIdPBImpl
operator|.
name|class
argument_list|,
name|NodeIdProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeReportPBImpl ()
specifier|public
name|void
name|testNodeReportPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|NodeReportPBImpl
operator|.
name|class
argument_list|,
name|NodeReportProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionContainerPBImpl ()
specifier|public
name|void
name|testPreemptionContainerPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|PreemptionContainerPBImpl
operator|.
name|class
argument_list|,
name|PreemptionContainerProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionContractPBImpl ()
specifier|public
name|void
name|testPreemptionContractPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|PreemptionContractPBImpl
operator|.
name|class
argument_list|,
name|PreemptionContractProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionMessagePBImpl ()
specifier|public
name|void
name|testPreemptionMessagePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|PreemptionMessagePBImpl
operator|.
name|class
argument_list|,
name|PreemptionMessageProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionResourceRequestPBImpl ()
specifier|public
name|void
name|testPreemptionResourceRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|PreemptionResourceRequestPBImpl
operator|.
name|class
argument_list|,
name|PreemptionResourceRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriorityPBImpl ()
specifier|public
name|void
name|testPriorityPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|PriorityPBImpl
operator|.
name|class
argument_list|,
name|PriorityProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueInfoPBImpl ()
specifier|public
name|void
name|testQueueInfoPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|QueueInfoPBImpl
operator|.
name|class
argument_list|,
name|QueueInfoProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueUserACLInfoPBImpl ()
specifier|public
name|void
name|testQueueUserACLInfoPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|QueueUserACLInfoPBImpl
operator|.
name|class
argument_list|,
name|QueueUserACLInfoProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceBlacklistRequestPBImpl ()
specifier|public
name|void
name|testResourceBlacklistRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ResourceBlacklistRequestPBImpl
operator|.
name|class
argument_list|,
name|ResourceBlacklistRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|// ignore as ResourceOptionPBImpl is immutable
DECL|method|testResourceOptionPBImpl ()
specifier|public
name|void
name|testResourceOptionPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ResourceOptionPBImpl
operator|.
name|class
argument_list|,
name|ResourceOptionProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourcePBImpl ()
specifier|public
name|void
name|testResourcePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ResourcePBImpl
operator|.
name|class
argument_list|,
name|ResourceProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceRequestPBImpl ()
specifier|public
name|void
name|testResourceRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ResourceRequestPBImpl
operator|.
name|class
argument_list|,
name|ResourceRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSerializedExceptionPBImpl ()
specifier|public
name|void
name|testSerializedExceptionPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|SerializedExceptionPBImpl
operator|.
name|class
argument_list|,
name|SerializedExceptionProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStrictPreemptionContractPBImpl ()
specifier|public
name|void
name|testStrictPreemptionContractPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|StrictPreemptionContractPBImpl
operator|.
name|class
argument_list|,
name|StrictPreemptionContractProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenPBImpl ()
specifier|public
name|void
name|testTokenPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|TokenPBImpl
operator|.
name|class
argument_list|,
name|TokenProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testURLPBImpl ()
specifier|public
name|void
name|testURLPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|URLPBImpl
operator|.
name|class
argument_list|,
name|URLProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testYarnClusterMetricsPBImpl ()
specifier|public
name|void
name|testYarnClusterMetricsPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|YarnClusterMetricsPBImpl
operator|.
name|class
argument_list|,
name|YarnClusterMetricsProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshAdminAclsRequestPBImpl ()
specifier|public
name|void
name|testRefreshAdminAclsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshAdminAclsRequestPBImpl
operator|.
name|class
argument_list|,
name|RefreshAdminAclsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshAdminAclsResponsePBImpl ()
specifier|public
name|void
name|testRefreshAdminAclsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshAdminAclsResponsePBImpl
operator|.
name|class
argument_list|,
name|RefreshAdminAclsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesRequestPBImpl ()
specifier|public
name|void
name|testRefreshNodesRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshNodesRequestPBImpl
operator|.
name|class
argument_list|,
name|RefreshNodesRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesResponsePBImpl ()
specifier|public
name|void
name|testRefreshNodesResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshNodesResponsePBImpl
operator|.
name|class
argument_list|,
name|RefreshNodesResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesRequestPBImpl ()
specifier|public
name|void
name|testRefreshQueuesRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshQueuesRequestPBImpl
operator|.
name|class
argument_list|,
name|RefreshQueuesRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesResponsePBImpl ()
specifier|public
name|void
name|testRefreshQueuesResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshQueuesResponsePBImpl
operator|.
name|class
argument_list|,
name|RefreshQueuesResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshServiceAclsRequestPBImpl ()
specifier|public
name|void
name|testRefreshServiceAclsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshServiceAclsRequestPBImpl
operator|.
name|class
argument_list|,
name|RefreshServiceAclsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshServiceAclsResponsePBImpl ()
specifier|public
name|void
name|testRefreshServiceAclsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshServiceAclsResponsePBImpl
operator|.
name|class
argument_list|,
name|RefreshServiceAclsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshSuperUserGroupsConfigurationRequestPBImpl ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfigurationRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequestPBImpl
operator|.
name|class
argument_list|,
name|RefreshSuperUserGroupsConfigurationRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshSuperUserGroupsConfigurationResponsePBImpl ()
specifier|public
name|void
name|testRefreshSuperUserGroupsConfigurationResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshSuperUserGroupsConfigurationResponsePBImpl
operator|.
name|class
argument_list|,
name|RefreshSuperUserGroupsConfigurationResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshUserToGroupsMappingsRequestPBImpl ()
specifier|public
name|void
name|testRefreshUserToGroupsMappingsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshUserToGroupsMappingsRequestPBImpl
operator|.
name|class
argument_list|,
name|RefreshUserToGroupsMappingsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshUserToGroupsMappingsResponsePBImpl ()
specifier|public
name|void
name|testRefreshUserToGroupsMappingsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RefreshUserToGroupsMappingsResponsePBImpl
operator|.
name|class
argument_list|,
name|RefreshUserToGroupsMappingsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateNodeResourceRequestPBImpl ()
specifier|public
name|void
name|testUpdateNodeResourceRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|UpdateNodeResourceRequestPBImpl
operator|.
name|class
argument_list|,
name|UpdateNodeResourceRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateNodeResourceResponsePBImpl ()
specifier|public
name|void
name|testUpdateNodeResourceResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|UpdateNodeResourceResponsePBImpl
operator|.
name|class
argument_list|,
name|UpdateNodeResourceResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationSubmissionRequestPBImpl ()
specifier|public
name|void
name|testReservationSubmissionRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReservationSubmissionRequestPBImpl
operator|.
name|class
argument_list|,
name|ReservationSubmissionRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationSubmissionResponsePBImpl ()
specifier|public
name|void
name|testReservationSubmissionResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReservationSubmissionResponsePBImpl
operator|.
name|class
argument_list|,
name|ReservationSubmissionResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationUpdateRequestPBImpl ()
specifier|public
name|void
name|testReservationUpdateRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReservationUpdateRequestPBImpl
operator|.
name|class
argument_list|,
name|ReservationUpdateRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationUpdateResponsePBImpl ()
specifier|public
name|void
name|testReservationUpdateResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReservationUpdateResponsePBImpl
operator|.
name|class
argument_list|,
name|ReservationUpdateResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationDeleteRequestPBImpl ()
specifier|public
name|void
name|testReservationDeleteRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReservationDeleteRequestPBImpl
operator|.
name|class
argument_list|,
name|ReservationDeleteRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationDeleteResponsePBImpl ()
specifier|public
name|void
name|testReservationDeleteResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReservationDeleteResponsePBImpl
operator|.
name|class
argument_list|,
name|ReservationDeleteResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddToClusterNodeLabelsRequestPBImpl ()
specifier|public
name|void
name|testAddToClusterNodeLabelsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|AddToClusterNodeLabelsRequestPBImpl
operator|.
name|class
argument_list|,
name|AddToClusterNodeLabelsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddToClusterNodeLabelsResponsePBImpl ()
specifier|public
name|void
name|testAddToClusterNodeLabelsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|AddToClusterNodeLabelsResponsePBImpl
operator|.
name|class
argument_list|,
name|AddToClusterNodeLabelsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveFromClusterNodeLabelsRequestPBImpl ()
specifier|public
name|void
name|testRemoveFromClusterNodeLabelsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RemoveFromClusterNodeLabelsRequestPBImpl
operator|.
name|class
argument_list|,
name|RemoveFromClusterNodeLabelsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveFromClusterNodeLabelsResponsePBImpl ()
specifier|public
name|void
name|testRemoveFromClusterNodeLabelsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|RemoveFromClusterNodeLabelsResponsePBImpl
operator|.
name|class
argument_list|,
name|RemoveFromClusterNodeLabelsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClusterNodeLabelsRequestPBImpl ()
specifier|public
name|void
name|testGetClusterNodeLabelsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetClusterNodeLabelsRequestPBImpl
operator|.
name|class
argument_list|,
name|GetClusterNodeLabelsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetClusterNodeLabelsResponsePBImpl ()
specifier|public
name|void
name|testGetClusterNodeLabelsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetClusterNodeLabelsResponsePBImpl
operator|.
name|class
argument_list|,
name|GetClusterNodeLabelsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplaceLabelsOnNodeRequestPBImpl ()
specifier|public
name|void
name|testReplaceLabelsOnNodeRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReplaceLabelsOnNodeRequestPBImpl
operator|.
name|class
argument_list|,
name|ReplaceLabelsOnNodeRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReplaceLabelsOnNodeResponsePBImpl ()
specifier|public
name|void
name|testReplaceLabelsOnNodeResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|ReplaceLabelsOnNodeResponsePBImpl
operator|.
name|class
argument_list|,
name|ReplaceLabelsOnNodeResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNodeToLabelsRequestPBImpl ()
specifier|public
name|void
name|testGetNodeToLabelsRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetNodesToLabelsRequestPBImpl
operator|.
name|class
argument_list|,
name|GetNodesToLabelsRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNodeToLabelsResponsePBImpl ()
specifier|public
name|void
name|testGetNodeToLabelsResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetNodesToLabelsResponsePBImpl
operator|.
name|class
argument_list|,
name|GetNodesToLabelsResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLabelsToNodesRequestPBImpl ()
specifier|public
name|void
name|testGetLabelsToNodesRequestPBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetLabelsToNodesRequestPBImpl
operator|.
name|class
argument_list|,
name|GetLabelsToNodesRequestProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLabelsToNodesResponsePBImpl ()
specifier|public
name|void
name|testGetLabelsToNodesResponsePBImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|validatePBImplRecord
argument_list|(
name|GetLabelsToNodesResponsePBImpl
operator|.
name|class
argument_list|,
name|GetLabelsToNodesResponseProto
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

