begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.test
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|RequestScoped
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_class
DECL|class|TestWebAppTests
specifier|public
class|class
name|TestWebAppTests
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWebAppTests
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testInstances ()
annotation|@
name|Test
specifier|public
name|void
name|testInstances
parameter_list|()
throws|throws
name|Exception
block|{
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|req
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpServletResponse
name|res
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|val
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|PrintWriter
name|out
init|=
name|res
operator|.
name|getWriter
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"Hello world!"
argument_list|)
expr_stmt|;
name|logInstances
argument_list|(
name|req
argument_list|,
name|res
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|req
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|res
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|this
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|TestWebAppTests
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|req
argument_list|)
operator|.
name|getParameter
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|res
argument_list|)
operator|.
name|getWriter
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|println
argument_list|(
literal|"Hello world!"
argument_list|)
expr_stmt|;
block|}
DECL|interface|Foo
interface|interface
name|Foo
block|{   }
DECL|class|Bar
specifier|static
class|class
name|Bar
implements|implements
name|Foo
block|{   }
DECL|class|FooBar
specifier|static
class|class
name|FooBar
extends|extends
name|Bar
block|{   }
DECL|method|testCreateInjector ()
annotation|@
name|Test
specifier|public
name|void
name|testCreateInjector
parameter_list|()
throws|throws
name|Exception
block|{
name|Bar
name|bar
init|=
operator|new
name|Bar
argument_list|()
decl_stmt|;
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|Foo
operator|.
name|class
argument_list|,
name|bar
argument_list|)
decl_stmt|;
name|logInstances
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|HttpServletResponse
operator|.
name|class
argument_list|)
operator|.
name|getWriter
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|bar
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|Foo
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateInjector2 ()
annotation|@
name|Test
specifier|public
name|void
name|testCreateInjector2
parameter_list|()
block|{
specifier|final
name|FooBar
name|foobar
init|=
operator|new
name|FooBar
argument_list|()
decl_stmt|;
name|Bar
name|bar
init|=
operator|new
name|Bar
argument_list|()
decl_stmt|;
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|Foo
operator|.
name|class
argument_list|,
name|bar
argument_list|,
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|Bar
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|foobar
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|bar
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|Bar
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|foobar
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|Bar
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|RequestScoped
DECL|class|ScopeTest
specifier|static
class|class
name|ScopeTest
block|{   }
DECL|method|testRequestScope ()
annotation|@
name|Test
specifier|public
name|void
name|testRequestScope
parameter_list|()
block|{
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|ScopeTest
operator|.
name|class
argument_list|)
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|ScopeTest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|logInstances (HttpServletRequest req, HttpServletResponse res, PrintWriter out)
specifier|private
name|void
name|logInstances
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|res
parameter_list|,
name|PrintWriter
name|out
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"request: {}"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"response: {}"
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"writer: {}"
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

