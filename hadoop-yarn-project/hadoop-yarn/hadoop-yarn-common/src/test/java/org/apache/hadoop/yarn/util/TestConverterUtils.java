begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|TestContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestConverterUtils
specifier|public
class|class
name|TestConverterUtils
block|{
annotation|@
name|Test
DECL|method|testConvertUrlWithNoPort ()
specifier|public
name|void
name|testConvertUrlWithNoPort
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Path
name|expectedPath
init|=
operator|new
name|Path
argument_list|(
literal|"hdfs://foo.com"
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|expectedPath
argument_list|)
decl_stmt|;
name|Path
name|actualPath
init|=
name|url
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|actualPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertUrlWithUserinfo ()
specifier|public
name|void
name|testConvertUrlWithUserinfo
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|Path
name|expectedPath
init|=
operator|new
name|Path
argument_list|(
literal|"foo://username:password@example.com:8042"
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|URL
operator|.
name|fromPath
argument_list|(
name|expectedPath
argument_list|)
decl_stmt|;
name|Path
name|actualPath
init|=
name|url
operator|.
name|toPath
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPath
argument_list|,
name|actualPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerId ()
specifier|public
name|void
name|testContainerId
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|ContainerId
name|id
init|=
name|TestContainerId
operator|.
name|newContainerId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|cid
init|=
name|id
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"container_0_0000_00_000000"
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|ContainerId
name|gen
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gen
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerIdWithEpoch ()
specifier|public
name|void
name|testContainerIdWithEpoch
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|ContainerId
name|id
init|=
name|TestContainerId
operator|.
name|newContainerId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|25645811
argument_list|)
decl_stmt|;
name|String
name|cid
init|=
name|id
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"container_0_0000_00_25645811"
argument_list|,
name|cid
argument_list|)
expr_stmt|;
name|ContainerId
name|gen
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|cid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gen
operator|.
name|toString
argument_list|()
argument_list|,
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ContainerId
name|id2
init|=
name|TestContainerId
operator|.
name|newContainerId
argument_list|(
literal|36473
argument_list|,
literal|4365472
argument_list|,
name|ts
argument_list|,
literal|4298334883325L
argument_list|)
decl_stmt|;
name|String
name|cid2
init|=
name|id2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"container_e03_"
operator|+
name|ts
operator|+
literal|"_36473_4365472_999799999997"
argument_list|,
name|cid2
argument_list|)
expr_stmt|;
name|ContainerId
name|gen2
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|cid2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gen2
operator|.
name|toString
argument_list|()
argument_list|,
name|id2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|id3
init|=
name|TestContainerId
operator|.
name|newContainerId
argument_list|(
literal|36473
argument_list|,
literal|4365472
argument_list|,
name|ts
argument_list|,
literal|844424930131965L
argument_list|)
decl_stmt|;
name|String
name|cid3
init|=
name|id3
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"container_e767_"
operator|+
name|ts
operator|+
literal|"_36473_4365472_1099511627773"
argument_list|,
name|cid3
argument_list|)
expr_stmt|;
name|ContainerId
name|gen3
init|=
name|ContainerId
operator|.
name|fromString
argument_list|(
name|cid3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|gen3
operator|.
name|toString
argument_list|()
argument_list|,
name|id3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testContainerIdNull ()
specifier|public
name|void
name|testContainerIdNull
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|assertNull
argument_list|(
name|ConverterUtils
operator|.
name|toString
argument_list|(
operator|(
name|ContainerId
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeIdWithDefaultPort ()
specifier|public
name|void
name|testNodeIdWithDefaultPort
parameter_list|()
throws|throws
name|URISyntaxException
block|{
name|NodeId
name|nid
decl_stmt|;
name|nid
operator|=
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
literal|"node:10"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nid
operator|.
name|getPort
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nid
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
name|nid
operator|=
name|ConverterUtils
operator|.
name|toNodeIdWithDefaultPort
argument_list|(
literal|"node"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nid
operator|.
name|getPort
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nid
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testInvalidContainerId ()
specifier|public
name|void
name|testInvalidContainerId
parameter_list|()
block|{
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_e20_1423221031460_0003_01"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testInvalidAppattemptId ()
specifier|public
name|void
name|testInvalidAppattemptId
parameter_list|()
block|{
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
literal|"appattempt_1423221031460"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testApplicationId ()
specifier|public
name|void
name|testApplicationId
parameter_list|()
block|{
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
literal|"application_1423221031460"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

