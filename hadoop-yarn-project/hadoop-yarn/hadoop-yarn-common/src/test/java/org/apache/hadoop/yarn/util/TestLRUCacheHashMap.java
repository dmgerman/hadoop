begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class to validate the correctness of the {@code LRUCacheHashMap}.  *  */
end_comment

begin_class
DECL|class|TestLRUCacheHashMap
specifier|public
class|class
name|TestLRUCacheHashMap
block|{
comment|/**    * Test if the different entries are generated, and LRU cache is working as    * expected.    */
annotation|@
name|Test
DECL|method|testLRUCache ()
specifier|public
name|void
name|testLRUCache
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|mapSize
init|=
literal|5
decl_stmt|;
name|LRUCacheHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|LRUCacheHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|mapSize
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"2"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"4"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"5"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mapSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all the elements in the map are from 1 to 5
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"6"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"3"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"7"
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"8"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mapSize
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all the elements in the map are from 5 to 8 and the 3
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|map
operator|.
name|containsKey
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

