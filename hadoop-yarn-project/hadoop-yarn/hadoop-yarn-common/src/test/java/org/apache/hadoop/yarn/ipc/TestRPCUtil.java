begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
DECL|class|TestRPCUtil
specifier|public
class|class
name|TestRPCUtil
block|{
annotation|@
name|Test
DECL|method|testUnknownExceptionUnwrapping ()
specifier|public
name|void
name|testUnknownExceptionUnwrapping
parameter_list|()
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
init|=
name|YarnRemoteException
operator|.
name|class
decl_stmt|;
name|String
name|className
init|=
literal|"UnknownException.class"
decl_stmt|;
name|verifyRemoteExceptionUnwrapping
argument_list|(
name|exception
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteIOExceptionUnwrapping ()
specifier|public
name|void
name|testRemoteIOExceptionUnwrapping
parameter_list|()
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
init|=
name|IOException
operator|.
name|class
decl_stmt|;
name|verifyRemoteExceptionUnwrapping
argument_list|(
name|exception
argument_list|,
name|exception
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteIOExceptionDerivativeUnwrapping ()
specifier|public
name|void
name|testRemoteIOExceptionDerivativeUnwrapping
parameter_list|()
block|{
comment|// Test IOException sub-class
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
init|=
name|FileNotFoundException
operator|.
name|class
decl_stmt|;
name|verifyRemoteExceptionUnwrapping
argument_list|(
name|exception
argument_list|,
name|exception
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteYarnExceptionUnwrapping ()
specifier|public
name|void
name|testRemoteYarnExceptionUnwrapping
parameter_list|()
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
init|=
name|YarnRemoteException
operator|.
name|class
decl_stmt|;
name|verifyRemoteExceptionUnwrapping
argument_list|(
name|exception
argument_list|,
name|exception
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteYarnExceptionDerivativeUnwrapping ()
specifier|public
name|void
name|testRemoteYarnExceptionDerivativeUnwrapping
parameter_list|()
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
init|=
name|YarnTestException
operator|.
name|class
decl_stmt|;
name|verifyRemoteExceptionUnwrapping
argument_list|(
name|exception
argument_list|,
name|exception
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnexpectedRemoteExceptionUnwrapping ()
specifier|public
name|void
name|testUnexpectedRemoteExceptionUnwrapping
parameter_list|()
block|{
comment|// Non IOException, YarnException thrown by the remote side.
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
init|=
name|Exception
operator|.
name|class
decl_stmt|;
name|verifyRemoteExceptionUnwrapping
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|,
name|exception
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoteYarnExceptionWithoutStringConstructor ()
specifier|public
name|void
name|testRemoteYarnExceptionWithoutStringConstructor
parameter_list|()
block|{
comment|// Derivatives of YarnException should always defined a string constructor.
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|exception
init|=
name|YarnTestExceptionNoConstructor
operator|.
name|class
decl_stmt|;
name|verifyRemoteExceptionUnwrapping
argument_list|(
name|RemoteException
operator|.
name|class
argument_list|,
name|exception
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRPCServiceExceptionUnwrapping ()
specifier|public
name|void
name|testRPCServiceExceptionUnwrapping
parameter_list|()
block|{
name|String
name|message
init|=
literal|"ServiceExceptionMessage"
decl_stmt|;
name|ServiceException
name|se
init|=
operator|new
name|ServiceException
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RPCUtil
operator|.
name|unwrapAndThrowException
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thrown
parameter_list|)
block|{
name|t
operator|=
name|thrown
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|IOException
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRPCIOExceptionUnwrapping ()
specifier|public
name|void
name|testRPCIOExceptionUnwrapping
parameter_list|()
block|{
name|String
name|message
init|=
literal|"DirectIOExceptionMessage"
decl_stmt|;
name|IOException
name|ioException
init|=
operator|new
name|FileNotFoundException
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ServiceException
name|se
init|=
operator|new
name|ServiceException
argument_list|(
name|ioException
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RPCUtil
operator|.
name|unwrapAndThrowException
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thrown
parameter_list|)
block|{
name|t
operator|=
name|thrown
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|FileNotFoundException
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyRemoteExceptionUnwrapping ( Class<? extends Throwable> expectedLocalException, String realExceptionClassName)
specifier|private
name|void
name|verifyRemoteExceptionUnwrapping
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Throwable
argument_list|>
name|expectedLocalException
parameter_list|,
name|String
name|realExceptionClassName
parameter_list|)
block|{
name|String
name|message
init|=
name|realExceptionClassName
operator|+
literal|"Message"
decl_stmt|;
name|RemoteException
name|re
init|=
operator|new
name|RemoteException
argument_list|(
name|realExceptionClassName
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|ServiceException
name|se
init|=
operator|new
name|ServiceException
argument_list|(
name|re
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RPCUtil
operator|.
name|unwrapAndThrowException
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|thrown
parameter_list|)
block|{
name|t
operator|=
name|thrown
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected exception ["
operator|+
name|expectedLocalException
operator|+
literal|"] but found "
operator|+
name|t
argument_list|,
name|expectedLocalException
operator|.
name|isInstance
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Expected message ["
operator|+
name|message
operator|+
literal|"] but found "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|YarnTestException
specifier|private
specifier|static
class|class
name|YarnTestException
extends|extends
name|YarnRemoteException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|YarnTestException (String message)
specifier|public
name|YarnTestException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|YarnTestExceptionNoConstructor
specifier|private
specifier|static
class|class
name|YarnTestExceptionNoConstructor
extends|extends
name|YarnRemoteException
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
block|}
block|}
end_class

end_unit

