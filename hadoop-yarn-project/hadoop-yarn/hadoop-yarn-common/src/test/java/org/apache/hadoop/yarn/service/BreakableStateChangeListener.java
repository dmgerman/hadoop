begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  *  or more contributor license agreements.  See the NOTICE file  *  distributed with this work for additional information  *  regarding copyright ownership.  The ASF licenses this file  *  to you under the Apache License, Version 2.0 (the  *  "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A state change listener that logs the number of state change events received,  * and the last state invoked.  *  * It can be configured to fail during a state change event  */
end_comment

begin_class
DECL|class|BreakableStateChangeListener
specifier|public
class|class
name|BreakableStateChangeListener
implements|implements
name|ServiceStateChangeListener
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|eventCount
specifier|private
name|int
name|eventCount
decl_stmt|;
DECL|field|failureCount
specifier|private
name|int
name|failureCount
decl_stmt|;
DECL|field|lastService
specifier|private
name|Service
name|lastService
decl_stmt|;
DECL|field|lastState
specifier|private
name|Service
operator|.
name|STATE
name|lastState
init|=
name|Service
operator|.
name|STATE
operator|.
name|NOTINITED
decl_stmt|;
comment|//no callbacks are ever received for this event, so it
comment|//can be used as an 'undefined'.
DECL|field|failingState
specifier|private
name|Service
operator|.
name|STATE
name|failingState
init|=
name|Service
operator|.
name|STATE
operator|.
name|NOTINITED
decl_stmt|;
DECL|field|stateEventList
specifier|private
name|List
argument_list|<
name|Service
operator|.
name|STATE
argument_list|>
name|stateEventList
init|=
operator|new
name|ArrayList
argument_list|<
name|Service
operator|.
name|STATE
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|method|BreakableStateChangeListener ()
specifier|public
name|BreakableStateChangeListener
parameter_list|()
block|{
name|this
argument_list|(
literal|"BreakableStateChangeListener"
argument_list|)
expr_stmt|;
block|}
DECL|method|BreakableStateChangeListener (String name)
specifier|public
name|BreakableStateChangeListener
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stateChanged (Service service)
specifier|public
specifier|synchronized
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|eventCount
operator|++
expr_stmt|;
name|lastService
operator|=
name|service
expr_stmt|;
name|lastState
operator|=
name|service
operator|.
name|getServiceState
argument_list|()
expr_stmt|;
name|stateEventList
operator|.
name|add
argument_list|(
name|lastState
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastState
operator|==
name|failingState
condition|)
block|{
name|failureCount
operator|++
expr_stmt|;
throw|throw
operator|new
name|BreakableService
operator|.
name|BrokenLifecycleEvent
argument_list|(
name|service
argument_list|,
literal|"Failure entering "
operator|+
name|lastState
operator|+
literal|" for "
operator|+
name|service
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|getEventCount ()
specifier|public
specifier|synchronized
name|int
name|getEventCount
parameter_list|()
block|{
return|return
name|eventCount
return|;
block|}
DECL|method|getLastService ()
specifier|public
specifier|synchronized
name|Service
name|getLastService
parameter_list|()
block|{
return|return
name|lastService
return|;
block|}
DECL|method|getLastState ()
specifier|public
specifier|synchronized
name|Service
operator|.
name|STATE
name|getLastState
parameter_list|()
block|{
return|return
name|lastState
return|;
block|}
DECL|method|setFailingState (Service.STATE failingState)
specifier|public
specifier|synchronized
name|void
name|setFailingState
parameter_list|(
name|Service
operator|.
name|STATE
name|failingState
parameter_list|)
block|{
name|this
operator|.
name|failingState
operator|=
name|failingState
expr_stmt|;
block|}
DECL|method|getFailureCount ()
specifier|public
specifier|synchronized
name|int
name|getFailureCount
parameter_list|()
block|{
return|return
name|failureCount
return|;
block|}
DECL|method|getStateEventList ()
specifier|public
name|List
argument_list|<
name|Service
operator|.
name|STATE
argument_list|>
name|getStateEventList
parameter_list|()
block|{
return|return
name|stateEventList
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|String
name|s
init|=
name|name
operator|+
literal|" - event count = "
operator|+
name|eventCount
operator|+
literal|" last state "
operator|+
name|lastState
decl_stmt|;
name|StringBuilder
name|history
init|=
operator|new
name|StringBuilder
argument_list|(
name|stateEventList
operator|.
name|size
argument_list|()
operator|*
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|Service
operator|.
name|STATE
name|state
range|:
name|stateEventList
control|)
block|{
name|history
operator|.
name|append
argument_list|(
name|state
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|+
literal|" [ "
operator|+
name|history
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

