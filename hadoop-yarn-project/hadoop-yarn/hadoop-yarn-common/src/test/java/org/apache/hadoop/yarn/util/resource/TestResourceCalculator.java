begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestResourceCalculator
specifier|public
class|class
name|TestResourceCalculator
block|{
DECL|field|resourceCalculator
specifier|private
name|ResourceCalculator
name|resourceCalculator
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|getParameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|ResourceCalculator
index|[]
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ResourceCalculator
index|[]
index|[]
block|{
block|{
operator|new
name|DefaultResourceCalculator
argument_list|()
block|}
block|,
block|{
operator|new
name|DominantResourceCalculator
argument_list|()
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestResourceCalculator (ResourceCalculator rs)
specifier|public
name|TestResourceCalculator
parameter_list|(
name|ResourceCalculator
name|rs
parameter_list|)
block|{
name|this
operator|.
name|resourceCalculator
operator|=
name|rs
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testResourceCalculatorCompareMethod ()
specifier|public
name|void
name|testResourceCalculatorCompareMethod
parameter_list|()
block|{
name|Resource
name|clusterResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// For lhs == rhs
name|Resource
name|lhs
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|rhs
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
comment|// lhs> rhs
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
comment|// For lhs< rhs
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|rhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
operator|)
condition|)
block|{
return|return;
block|}
comment|// verify for 2 dimensional resources i.e memory and cpu
comment|// dominant resource types
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|rhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
block|}
DECL|method|assertResourcesOperations (Resource clusterResource, Resource lhs, Resource rhs, boolean lessThan, boolean lessThanOrEqual, boolean greaterThan, boolean greaterThanOrEqual, Resource max, Resource min)
specifier|private
name|void
name|assertResourcesOperations
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|,
name|boolean
name|lessThan
parameter_list|,
name|boolean
name|lessThanOrEqual
parameter_list|,
name|boolean
name|greaterThan
parameter_list|,
name|boolean
name|greaterThanOrEqual
parameter_list|,
name|Resource
name|max
parameter_list|,
name|Resource
name|min
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Less Than operation is wrongly calculated."
argument_list|,
name|lessThan
argument_list|,
name|Resources
operator|.
name|lessThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Less Than Or Equal To operation is wrongly calculated."
argument_list|,
name|lessThanOrEqual
argument_list|,
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Greater Than operation is wrongly calculated."
argument_list|,
name|greaterThan
argument_list|,
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Greater Than Or Equal To operation is wrongly calculated."
argument_list|,
name|greaterThanOrEqual
argument_list|,
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Max(value) Operation wrongly calculated."
argument_list|,
name|max
argument_list|,
name|Resources
operator|.
name|max
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Min(value) operation is wrongly calculated."
argument_list|,
name|min
argument_list|,
name|Resources
operator|.
name|min
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

