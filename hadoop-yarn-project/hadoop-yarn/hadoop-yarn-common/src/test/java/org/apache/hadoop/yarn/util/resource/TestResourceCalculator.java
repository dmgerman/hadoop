begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestResourceCalculator
specifier|public
class|class
name|TestResourceCalculator
block|{
DECL|field|EXTRA_RESOURCE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|EXTRA_RESOURCE_NAME
init|=
literal|"test"
decl_stmt|;
DECL|field|resourceCalculator
specifier|private
specifier|final
name|ResourceCalculator
name|resourceCalculator
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
DECL|method|getParameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"DefaultResourceCalculator"
block|,
operator|new
name|DefaultResourceCalculator
argument_list|()
block|}
block|,
block|{
literal|"DominantResourceCalculator"
block|,
operator|new
name|DominantResourceCalculator
argument_list|()
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
DECL|method|setupNoExtraResource ()
specifier|public
name|void
name|setupNoExtraResource
parameter_list|()
block|{
comment|// This has to run before each test because we don't know when
comment|// setupExtraResource() might be called
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupExtraResource ()
specifier|private
specifier|static
name|void
name|setupExtraResource
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|EXTRA_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|TestResourceCalculator (String name, ResourceCalculator rs)
specifier|public
name|TestResourceCalculator
parameter_list|(
name|String
name|name
parameter_list|,
name|ResourceCalculator
name|rs
parameter_list|)
block|{
name|this
operator|.
name|resourceCalculator
operator|=
name|rs
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testFitsIn ()
specifier|public
name|void
name|testFitsIn
parameter_list|()
block|{
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|resourceCalculator
operator|.
name|fitsIn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newResource (long memory, int cpu)
specifier|private
name|Resource
name|newResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|cpu
parameter_list|)
block|{
name|Resource
name|res
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|memory
argument_list|,
name|cpu
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
DECL|method|newResource (long memory, int cpu, int extraResource)
specifier|private
name|Resource
name|newResource
parameter_list|(
name|long
name|memory
parameter_list|,
name|int
name|cpu
parameter_list|,
name|int
name|extraResource
parameter_list|)
block|{
name|Resource
name|res
init|=
name|newResource
argument_list|(
name|memory
argument_list|,
name|cpu
argument_list|)
decl_stmt|;
name|res
operator|.
name|setResourceValue
argument_list|(
name|EXTRA_RESOURCE_NAME
argument_list|,
name|extraResource
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|/**    * Test that the compare() method returns the expected result (0, -1, or 1).    * If the expected result is not 0, this method will also test the resources    * in the opposite order and check for the negative of the expected result.    *    * @param cluster the cluster resource    * @param res1 the LHS resource    * @param res2 the RHS resource    * @param expected the expected result    */
DECL|method|assertComparison (Resource cluster, Resource res1, Resource res2, int expected)
specifier|private
name|void
name|assertComparison
parameter_list|(
name|Resource
name|cluster
parameter_list|,
name|Resource
name|res1
parameter_list|,
name|Resource
name|res2
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|int
name|actual
init|=
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|cluster
argument_list|,
name|res1
argument_list|,
name|res2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Resource comparison did not give the expected "
operator|+
literal|"result for %s v/s %s"
argument_list|,
name|res1
operator|.
name|toString
argument_list|()
argument_list|,
name|res2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected
operator|!=
literal|0
condition|)
block|{
comment|// Try again with args in the opposite order and the negative of the
comment|// expected result.
name|actual
operator|=
name|resourceCalculator
operator|.
name|compare
argument_list|(
name|cluster
argument_list|,
name|res2
argument_list|,
name|res1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Resource comparison did not give the "
operator|+
literal|"expected result for %s v/s %s"
argument_list|,
name|res2
operator|.
name|toString
argument_list|()
argument_list|,
name|res1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|expected
operator|*
operator|-
literal|1
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCompareWithOnlyMandatory ()
specifier|public
name|void
name|testCompareWithOnlyMandatory
parameter_list|()
block|{
comment|// This test is necessary because there are optimizations that are only
comment|// triggered when only the mandatory resources are configured.
comment|// Keep cluster resources even so that the numbers are easy to understand
name|Resource
name|cluster
init|=
name|newResource
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|testCompareDefaultWithOnlyMandatory
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|testCompareDominantWithOnlyMandatory
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCompareDefaultWithOnlyMandatory (Resource cluster)
specifier|private
name|void
name|testCompareDefaultWithOnlyMandatory
parameter_list|(
name|Resource
name|cluster
parameter_list|)
block|{
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompareDominantWithOnlyMandatory (Resource cluster)
specifier|private
name|void
name|testCompareDominantWithOnlyMandatory
parameter_list|(
name|Resource
name|cluster
parameter_list|)
block|{
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompare ()
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
comment|// Test with 3 resources
name|setupExtraResource
argument_list|()
expr_stmt|;
comment|// Keep cluster resources even so that the numbers are easy to understand
name|Resource
name|cluster
init|=
name|newResource
argument_list|(
literal|4L
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|testCompareDefault
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|testCompareDominant
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|testCompareDominantZeroValueResource
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCompareDefault (Resource cluster)
specifier|private
name|void
name|testCompareDefault
parameter_list|(
name|Resource
name|cluster
parameter_list|)
block|{
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify compare when one or all the resource are zero.    */
DECL|method|testCompareDominantZeroValueResource ()
specifier|private
name|void
name|testCompareDominantZeroValueResource
parameter_list|()
block|{
name|Resource
name|cluster
init|=
name|newResource
argument_list|(
literal|4L
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// cluster resource zero
name|cluster
operator|=
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompareDominant (Resource cluster)
specifier|private
name|void
name|testCompareDominant
parameter_list|(
name|Resource
name|cluster
parameter_list|)
block|{
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertComparison
argument_list|(
name|cluster
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCompareWithEmptyCluster ()
specifier|public
name|void
name|testCompareWithEmptyCluster
parameter_list|()
block|{
name|Resource
name|clusterResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// For lhs == rhs
name|Resource
name|lhs
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|rhs
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
comment|// lhs> rhs
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
comment|// For lhs< rhs
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|rhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
operator|)
condition|)
block|{
return|return;
block|}
comment|// verify for 2 dimensional resources i.e memory and cpu
comment|// dominant resource types
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
name|lhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rhs
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertResourcesOperations
argument_list|(
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|rhs
argument_list|,
name|lhs
argument_list|)
expr_stmt|;
block|}
DECL|method|assertResourcesOperations (Resource clusterResource, Resource lhs, Resource rhs, boolean lessThan, boolean lessThanOrEqual, boolean greaterThan, boolean greaterThanOrEqual, Resource max, Resource min)
specifier|private
name|void
name|assertResourcesOperations
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|lhs
parameter_list|,
name|Resource
name|rhs
parameter_list|,
name|boolean
name|lessThan
parameter_list|,
name|boolean
name|lessThanOrEqual
parameter_list|,
name|boolean
name|greaterThan
parameter_list|,
name|boolean
name|greaterThanOrEqual
parameter_list|,
name|Resource
name|max
parameter_list|,
name|Resource
name|min
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Less Than operation is wrongly calculated."
argument_list|,
name|lessThan
argument_list|,
name|Resources
operator|.
name|lessThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Less Than Or Equal To operation is wrongly calculated."
argument_list|,
name|lessThanOrEqual
argument_list|,
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Greater Than operation is wrongly calculated."
argument_list|,
name|greaterThan
argument_list|,
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Greater Than Or Equal To operation is wrongly calculated."
argument_list|,
name|greaterThanOrEqual
argument_list|,
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max(value) Operation wrongly calculated."
argument_list|,
name|max
argument_list|,
name|Resources
operator|.
name|max
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Min(value) operation is wrongly calculated."
argument_list|,
name|min
argument_list|,
name|Resources
operator|.
name|min
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|lhs
argument_list|,
name|rhs
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test resource normalization.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testNormalize ()
specifier|public
name|void
name|testNormalize
parameter_list|()
block|{
comment|// requested resources value cannot be an arbitrary number.
name|Resource
name|ask
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1111
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|min
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|max
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|Resource
name|increment
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if resources asked are less than minimum resource, then normalize it to
comment|// minimum resource.
name|ask
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|min
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|max
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|increment
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if resources asked are larger than maximum resource, then normalize it to
comment|// maximum resources.
name|ask
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|9
operator|*
literal|1024
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|min
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|max
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|increment
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|result
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// if increment is 0, use minimum resource as the increment resource.
name|ask
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1111
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|min
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|max
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|increment
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|Resource
name|result
init|=
name|Resources
operator|.
name|normalize
argument_list|(
name|resourceCalculator
argument_list|,
name|ask
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|result
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDivisionByZeroRatioDenominatorIsZero ()
specifier|public
name|void
name|testDivisionByZeroRatioDenominatorIsZero
parameter_list|()
block|{
name|float
name|ratio
init|=
name|resourceCalculator
operator|.
name|ratio
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|ratio
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDivisionByZeroRatioNumeratorAndDenominatorIsZero ()
specifier|public
name|void
name|testDivisionByZeroRatioNumeratorAndDenominatorIsZero
parameter_list|()
block|{
name|float
name|ratio
init|=
name|resourceCalculator
operator|.
name|ratio
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|ratio
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFitsInDiagnosticsCollector ()
specifier|public
name|void
name|testFitsInDiagnosticsCollector
parameter_list|()
block|{
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
comment|// required-resource = (0, 0)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// required-resource = (0, 1)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// required-resource = (1, 0)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// required-resource = (1, 1)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
comment|// required-resource = (0, 0)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// required-resource = (0, 1)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// required-resource = (1, 0)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// required-resource = (1, 1)
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|,
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|)
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
name|resourceCalculator
operator|.
name|getInsufficientResourceNames
argument_list|(
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRatioWithNoExtraResource ()
specifier|public
name|void
name|testRatioWithNoExtraResource
parameter_list|()
block|{
comment|//setup
name|Resource
name|resource1
init|=
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|resource2
init|=
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//act
name|float
name|ratio
init|=
name|resourceCalculator
operator|.
name|ratio
argument_list|(
name|resource1
argument_list|,
name|resource2
argument_list|)
decl_stmt|;
comment|//assert
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|double
name|ratioOfMemories
init|=
literal|0.5
decl_stmt|;
name|assertEquals
argument_list|(
name|ratioOfMemories
argument_list|,
name|ratio
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|double
name|ratioOfCPUs
init|=
literal|1.0
decl_stmt|;
name|assertEquals
argument_list|(
name|ratioOfCPUs
argument_list|,
name|ratio
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRatioWithExtraResource ()
specifier|public
name|void
name|testRatioWithExtraResource
parameter_list|()
block|{
comment|//setup
name|setupExtraResource
argument_list|()
expr_stmt|;
name|Resource
name|resource1
init|=
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|resource2
init|=
name|newResource
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//act
name|float
name|ratio
init|=
name|resourceCalculator
operator|.
name|ratio
argument_list|(
name|resource1
argument_list|,
name|resource2
argument_list|)
decl_stmt|;
comment|//assert
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DefaultResourceCalculator
condition|)
block|{
name|double
name|ratioOfMemories
init|=
literal|0.5
decl_stmt|;
name|assertEquals
argument_list|(
name|ratioOfMemories
argument_list|,
name|ratio
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resourceCalculator
operator|instanceof
name|DominantResourceCalculator
condition|)
block|{
name|double
name|ratioOfExtraResources
init|=
literal|2.0
decl_stmt|;
name|assertEquals
argument_list|(
name|ratioOfExtraResources
argument_list|,
name|ratio
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

