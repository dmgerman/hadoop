begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.event
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestAsyncDispatcher
specifier|public
class|class
name|TestAsyncDispatcher
block|{
comment|/* This test checks whether dispatcher hangs on close if following two things    * happen :    * 1. A thread which was putting event to event queue is interrupted.    * 2. Event queue is empty on close.    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDispatcherOnCloseIfQueueEmpty ()
specifier|public
name|void
name|testDispatcherOnCloseIfQueueEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockingQueue
argument_list|<
name|Event
argument_list|>
name|eventQueue
init|=
name|spy
argument_list|(
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Event
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|Event
name|event
init|=
name|mock
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|InterruptedException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|eventQueue
argument_list|)
operator|.
name|put
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|disp
init|=
operator|new
name|DrainDispatcher
argument_list|(
name|eventQueue
argument_list|)
decl_stmt|;
name|disp
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|disp
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
name|disp
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for event handler thread to start and begin waiting for events.
name|disp
operator|.
name|waitForEventThreadToWait
argument_list|()
expr_stmt|;
try|try
block|{
name|disp
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected YarnRuntimeException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|InterruptedException
argument_list|)
expr_stmt|;
block|}
comment|// Queue should be empty and dispatcher should not hang on close
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Event Queue should have been empty"
argument_list|,
name|eventQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|disp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Test dispatcher should timeout on draining events.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDispatchStopOnTimeout ()
specifier|public
name|void
name|testDispatchStopOnTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockingQueue
argument_list|<
name|Event
argument_list|>
name|eventQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Event
argument_list|>
argument_list|()
decl_stmt|;
name|eventQueue
operator|=
name|spy
argument_list|(
name|eventQueue
argument_list|)
expr_stmt|;
comment|// simulate dispatcher is not drained.
name|when
argument_list|(
name|eventQueue
operator|.
name|isEmpty
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|DISPATCHER_DRAIN_EVENTS_TIMEOUT
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|disp
init|=
operator|new
name|DrainDispatcher
argument_list|(
name|eventQueue
argument_list|)
decl_stmt|;
name|disp
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|disp
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
name|disp
operator|.
name|start
argument_list|()
expr_stmt|;
name|disp
operator|.
name|waitForEventThreadToWait
argument_list|()
expr_stmt|;
name|disp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|DummyHandler
specifier|private
specifier|static
class|class
name|DummyHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
DECL|enum|DummyType
specifier|private
enum|enum
name|DummyType
block|{
DECL|enumConstant|DUMMY
name|DUMMY
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|dispatchDummyEvents (Dispatcher disp, int count)
specifier|private
name|void
name|dispatchDummyEvents
parameter_list|(
name|Dispatcher
name|disp
parameter_list|,
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Event
name|event
init|=
name|mock
argument_list|(
name|Event
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|DummyType
operator|.
name|DUMMY
argument_list|)
expr_stmt|;
name|disp
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test if drain dispatcher drains events on stop.
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDrainDispatcherDrainEventsOnStop ()
specifier|public
name|void
name|testDrainDispatcherDrainEventsOnStop
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|DISPATCHER_DRAIN_EVENTS_TIMEOUT
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|BlockingQueue
argument_list|<
name|Event
argument_list|>
name|queue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Event
argument_list|>
argument_list|()
decl_stmt|;
name|DrainDispatcher
name|disp
init|=
operator|new
name|DrainDispatcher
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|disp
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|disp
operator|.
name|register
argument_list|(
name|DummyType
operator|.
name|class
argument_list|,
operator|new
name|DummyHandler
argument_list|()
argument_list|)
expr_stmt|;
name|disp
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
name|disp
operator|.
name|start
argument_list|()
expr_stmt|;
name|disp
operator|.
name|waitForEventThreadToWait
argument_list|()
expr_stmt|;
name|dispatchDummyEvents
argument_list|(
name|disp
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|disp
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

