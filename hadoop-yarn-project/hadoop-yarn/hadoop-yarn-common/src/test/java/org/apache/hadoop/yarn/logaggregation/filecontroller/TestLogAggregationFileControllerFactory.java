begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_CONTROLLER_FMT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|ifile
operator|.
name|LogAggregationIndexedFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|tfile
operator|.
name|LogAggregationTFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|View
operator|.
name|ViewContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
operator|.
name|HtmlBlock
operator|.
name|Block
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test LogAggregationFileControllerFactory.  */
end_comment

begin_class
DECL|class|TestLogAggregationFileControllerFactory
specifier|public
class|class
name|TestLogAggregationFileControllerFactory
extends|extends
name|Configured
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLogAggregationFileControllerFactory
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|REMOTE_LOG_ROOT
specifier|private
specifier|static
specifier|final
name|String
name|REMOTE_LOG_ROOT
init|=
literal|"target/app-logs/"
decl_stmt|;
DECL|field|REMOTE_DEFAULT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|REMOTE_DEFAULT_DIR
init|=
literal|"default/"
decl_stmt|;
DECL|field|APP_OWNER
specifier|private
specifier|static
specifier|final
name|String
name|APP_OWNER
init|=
literal|"test"
decl_stmt|;
DECL|field|WRONG_ROOT_LOG_DIR_MSG
specifier|private
specifier|static
specifier|final
name|String
name|WRONG_ROOT_LOG_DIR_MSG
init|=
literal|"Wrong remote root log directory found."
decl_stmt|;
DECL|field|WRONG_ROOT_LOG_DIR_SUFFIX_MSG
specifier|private
specifier|static
specifier|final
name|String
name|WRONG_ROOT_LOG_DIR_SUFFIX_MSG
init|=
literal|"Wrong remote root log directory suffix found."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LogAggregationFileController
argument_list|>
argument_list|>
DECL|field|ALL_FILE_CONTROLLERS
name|ALL_FILE_CONTROLLERS
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|TestLogAggregationFileController
operator|.
name|class
argument_list|,
name|LogAggregationIndexedFileController
operator|.
name|class
argument_list|,
name|LogAggregationTFileController
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ALL_FILE_CONTROLLER_NAMES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ALL_FILE_CONTROLLER_NAMES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"TestLogAggregationFileController"
argument_list|,
literal|"IFile"
argument_list|,
literal|"TFile"
argument_list|)
decl_stmt|;
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|REMOTE_LOG_ROOT
operator|+
name|REMOTE_DEFAULT_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
literal|"log"
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyFileControllerInstance ( LogAggregationFileControllerFactory factory, Class<? extends LogAggregationFileController> className)
specifier|private
name|void
name|verifyFileControllerInstance
parameter_list|(
name|LogAggregationFileControllerFactory
name|factory
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|LogAggregationFileController
argument_list|>
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|LogAggregationFileController
argument_list|>
name|fileControllers
init|=
name|factory
operator|.
name|getConfiguredLogAggregationFileControllerList
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|logPath
init|=
name|fileControllers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
name|APP_OWNER
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking "
operator|+
name|logPath
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|logPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|logPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|logPath
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|writer
init|=
operator|new
name|FileWriter
argument_list|(
operator|new
name|File
argument_list|(
name|logPath
operator|.
name|toString
argument_list|()
argument_list|,
literal|"testLog"
argument_list|)
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"The used LogAggregationFileController is not instance of "
operator|+
name|className
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|className
operator|.
name|isInstance
argument_list|(
name|factory
operator|.
name|getFileControllerForRead
argument_list|(
name|appId
argument_list|,
name|APP_OWNER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|logPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultLogAggregationFileControllerFactory ()
specifier|public
name|void
name|testDefaultLogAggregationFileControllerFactory
parameter_list|()
throws|throws
name|IOException
block|{
name|LogAggregationFileControllerFactory
name|factory
init|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LogAggregationFileController
argument_list|>
name|list
init|=
name|factory
operator|.
name|getConfiguredLogAggregationFileControllerList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only one LogAggregationFileController is expected!"
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"TFile format is expected to be the first "
operator|+
literal|"LogAggregationFileController!"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|LogAggregationTFileController
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"TFile format is expected to be used for writing!"
argument_list|,
name|factory
operator|.
name|getFileControllerForWrite
argument_list|()
operator|instanceof
name|LogAggregationTFileController
argument_list|)
expr_stmt|;
name|verifyFileControllerInstance
argument_list|(
name|factory
argument_list|,
name|LogAggregationTFileController
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
DECL|method|testLogAggregationFileControllerFactoryClassNotSet ()
specifier|public
name|void
name|testLogAggregationFileControllerFactoryClassNotSet
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_FORMATS
argument_list|,
literal|"TestLogAggregationFileController"
argument_list|)
expr_stmt|;
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"TestLogAggregationFileController's class was not set, "
operator|+
literal|"but the factory creation did not fail."
argument_list|)
expr_stmt|;
block|}
DECL|method|enableFileControllers ( List<Class<? extends LogAggregationFileController>> fileControllers, List<String> fileControllerNames)
specifier|private
name|void
name|enableFileControllers
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|LogAggregationFileController
argument_list|>
argument_list|>
name|fileControllers
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fileControllerNames
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_FORMATS
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|fileControllerNames
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileControllers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|LogAggregationFileController
argument_list|>
name|fileController
init|=
name|fileControllers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|controllerName
init|=
name|fileControllerNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|LOG_AGGREGATION_FILE_CONTROLLER_FMT
argument_list|,
name|controllerName
argument_list|)
argument_list|,
name|fileController
argument_list|,
name|LogAggregationFileController
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT
argument_list|,
name|controllerName
argument_list|)
argument_list|,
name|REMOTE_LOG_ROOT
operator|+
name|controllerName
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT
argument_list|,
name|controllerName
argument_list|)
argument_list|,
name|controllerName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLogAggregationFileControllerFactory ()
specifier|public
name|void
name|testLogAggregationFileControllerFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|enableFileControllers
argument_list|(
name|ALL_FILE_CONTROLLERS
argument_list|,
name|ALL_FILE_CONTROLLER_NAMES
argument_list|)
expr_stmt|;
name|LogAggregationFileControllerFactory
name|factory
init|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LogAggregationFileController
argument_list|>
name|list
init|=
name|factory
operator|.
name|getConfiguredLogAggregationFileControllerList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The expected number of LogAggregationFileController "
operator|+
literal|"is not 3!"
argument_list|,
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test format is expected to be the first "
operator|+
literal|"LogAggregationFileController!"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TestLogAggregationFileController
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"IFile format is expected to be the second "
operator|+
literal|"LogAggregationFileController!"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|LogAggregationIndexedFileController
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"TFile format is expected to be the first "
operator|+
literal|"LogAggregationFileController!"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|instanceof
name|LogAggregationTFileController
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test format is expected to be used for writing!"
argument_list|,
name|factory
operator|.
name|getFileControllerForWrite
argument_list|()
operator|instanceof
name|TestLogAggregationFileController
argument_list|)
expr_stmt|;
name|verifyFileControllerInstance
argument_list|(
name|factory
argument_list|,
name|TestLogAggregationFileController
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClassConfUsed ()
specifier|public
name|void
name|testClassConfUsed
parameter_list|()
block|{
name|enableFileControllers
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|LogAggregationTFileController
operator|.
name|class
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"TFile"
argument_list|)
argument_list|)
expr_stmt|;
name|LogAggregationFileControllerFactory
name|factory
init|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|LogAggregationFileController
name|fc
init|=
name|factory
operator|.
name|getFileControllerForWrite
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|WRONG_ROOT_LOG_DIR_MSG
argument_list|,
literal|"target/app-logs/TFile"
argument_list|,
name|fc
operator|.
name|getRemoteRootLogDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WRONG_ROOT_LOG_DIR_SUFFIX_MSG
argument_list|,
literal|"TFile"
argument_list|,
name|fc
operator|.
name|getRemoteRootLogDirSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodemanagerConfigurationIsUsed ()
specifier|public
name|void
name|testNodemanagerConfigurationIsUsed
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_FORMATS
argument_list|,
literal|"TFile"
argument_list|)
expr_stmt|;
name|LogAggregationFileControllerFactory
name|factory
init|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LogAggregationFileController
name|fc
init|=
name|factory
operator|.
name|getFileControllerForWrite
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|WRONG_ROOT_LOG_DIR_MSG
argument_list|,
literal|"target/app-logs/default"
argument_list|,
name|fc
operator|.
name|getRemoteRootLogDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WRONG_ROOT_LOG_DIR_SUFFIX_MSG
argument_list|,
literal|"log-tfile"
argument_list|,
name|fc
operator|.
name|getRemoteRootLogDirSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultConfUsed ()
specifier|public
name|void
name|testDefaultConfUsed
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_FILE_FORMATS
argument_list|,
literal|"TFile"
argument_list|)
expr_stmt|;
name|LogAggregationFileControllerFactory
name|factory
init|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|LogAggregationFileController
name|fc
init|=
name|factory
operator|.
name|getFileControllerForWrite
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|WRONG_ROOT_LOG_DIR_MSG
argument_list|,
literal|"/tmp/logs"
argument_list|,
name|fc
operator|.
name|getRemoteRootLogDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WRONG_ROOT_LOG_DIR_SUFFIX_MSG
argument_list|,
literal|"logs-tfile"
argument_list|,
name|fc
operator|.
name|getRemoteRootLogDirSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestLogAggregationFileController
specifier|private
specifier|static
class|class
name|TestLogAggregationFileController
extends|extends
name|LogAggregationFileController
block|{
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Do Nothing
block|}
annotation|@
name|Override
DECL|method|closeWriter ()
specifier|public
name|void
name|closeWriter
parameter_list|()
block|{
comment|// Do Nothing
block|}
annotation|@
name|Override
DECL|method|write (LogKey logKey, LogValue logValue)
specifier|public
name|void
name|write
parameter_list|(
name|LogKey
name|logKey
parameter_list|,
name|LogValue
name|logValue
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do Nothing
block|}
annotation|@
name|Override
DECL|method|postWrite (LogAggregationFileControllerContext record)
specifier|public
name|void
name|postWrite
parameter_list|(
name|LogAggregationFileControllerContext
name|record
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Do Nothing
block|}
annotation|@
name|Override
DECL|method|initializeWriter (LogAggregationFileControllerContext context)
specifier|public
name|void
name|initializeWriter
parameter_list|(
name|LogAggregationFileControllerContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do Nothing
block|}
annotation|@
name|Override
DECL|method|readAggregatedLogs (ContainerLogsRequest logRequest, OutputStream os)
specifier|public
name|boolean
name|readAggregatedLogs
parameter_list|(
name|ContainerLogsRequest
name|logRequest
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|readAggregatedLogsMeta ( ContainerLogsRequest logRequest)
specifier|public
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|readAggregatedLogsMeta
parameter_list|(
name|ContainerLogsRequest
name|logRequest
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|renderAggregatedLogsBlock (Block html, ViewContext context)
specifier|public
name|void
name|renderAggregatedLogsBlock
parameter_list|(
name|Block
name|html
parameter_list|,
name|ViewContext
name|context
parameter_list|)
block|{
comment|// DO NOTHING
block|}
annotation|@
name|Override
DECL|method|getApplicationOwner (Path aggregatedLogPath, ApplicationId appId)
specifier|public
name|String
name|getApplicationOwner
parameter_list|(
name|Path
name|aggregatedLogPath
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getApplicationAcls ( Path aggregatedLogPath, ApplicationId appId)
specifier|public
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|getApplicationAcls
parameter_list|(
name|Path
name|aggregatedLogPath
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

