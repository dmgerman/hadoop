begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestClientRMProxy
specifier|public
class|class
name|TestClientRMProxy
block|{
annotation|@
name|Test
DECL|method|testGetRMDelegationTokenService ()
specifier|public
name|void
name|testGetRMDelegationTokenService
parameter_list|()
block|{
name|String
name|defaultRMAddress
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// HA is not enabled
name|Text
name|tokenService
init|=
name|ClientRMProxy
operator|.
name|getRMDelegationTokenService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|services
init|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// HA is enabled
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|tokenService
operator|=
name|ClientRMProxy
operator|.
name|getRMDelegationTokenService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|services
operator|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetAMRMTokenService ()
specifier|public
name|void
name|testGetAMRMTokenService
parameter_list|()
block|{
name|String
name|defaultRMAddress
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_ADDRESS
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// HA is not enabled
name|Text
name|tokenService
init|=
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|services
init|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// HA is enabled
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|tokenService
operator|=
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|services
operator|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

