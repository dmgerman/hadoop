begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.client
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|HadoopYarnProtoRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestClientRMProxy
specifier|public
class|class
name|TestClientRMProxy
block|{
annotation|@
name|Test
DECL|method|testGetRMDelegationTokenService ()
specifier|public
name|void
name|testGetRMDelegationTokenService
parameter_list|()
block|{
name|String
name|defaultRMAddress
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// HA is not enabled
name|Text
name|tokenService
init|=
name|ClientRMProxy
operator|.
name|getRMDelegationTokenService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|services
init|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// HA is enabled
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|tokenService
operator|=
name|ClientRMProxy
operator|.
name|getRMDelegationTokenService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|services
operator|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetAMRMTokenService ()
specifier|public
name|void
name|testGetAMRMTokenService
parameter_list|()
block|{
name|String
name|defaultRMAddress
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_ADDRESS
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// HA is not enabled
name|Text
name|tokenService
init|=
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|services
init|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// HA is enabled
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|tokenService
operator|=
name|ClientRMProxy
operator|.
name|getAMRMTokenService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|services
operator|=
name|tokenService
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|services
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|service
range|:
name|services
control|)
block|{
name|assertTrue
argument_list|(
literal|"Incorrect token service name"
argument_list|,
name|service
operator|.
name|contains
argument_list|(
name|defaultRMAddress
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify that the RPC layer is always created using the correct UGI from the    * RMProxy.  It should always use the UGI from creation in subsequent uses,    * even outside of a doAs.    *    * @throws Exception an Exception occurred    */
annotation|@
name|Test
DECL|method|testProxyUserCorrectUGI ()
specifier|public
name|void
name|testProxyUserCorrectUGI
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|CLIENT_FAILOVER_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_MAX_WAIT_MS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Replace the RPC implementation with one that will capture the current UGI
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|IPC_RPC_IMPL
argument_list|,
name|UGICapturingHadoopYarnProtoRPC
operator|.
name|class
argument_list|,
name|YarnRPC
operator|.
name|class
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|realUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|proxyUser
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
literal|"proxy"
argument_list|,
name|realUser
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"group1"
block|}
argument_list|)
decl_stmt|;
comment|// Create the RMProxy using the proxyUser
name|ApplicationClientProtocol
name|rmProxy
init|=
name|proxyUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationClientProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationClientProtocol
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ClientRMProxy
operator|.
name|createRMProxy
argument_list|(
name|conf
argument_list|,
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// It was in a doAs, so the UGI should be correct
name|assertUGI
argument_list|()
expr_stmt|;
comment|// Try to use the RMProxy, which should trigger the RPC again
name|GetNewApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|UGICapturingHadoopYarnProtoRPC
operator|.
name|lastCurrentUser
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|rmProxy
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore - RMs are not running so this is expected to fail
block|}
comment|// This time it was outside a doAs, but make sure the UGI was still correct
name|assertUGI
argument_list|()
expr_stmt|;
block|}
DECL|method|assertUGI ()
specifier|private
name|void
name|assertUGI
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|lastCurrentUser
init|=
name|UGICapturingHadoopYarnProtoRPC
operator|.
name|lastCurrentUser
decl_stmt|;
name|assertNotNull
argument_list|(
name|lastCurrentUser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"proxy"
argument_list|,
name|lastCurrentUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|PROXY
argument_list|,
name|lastCurrentUser
operator|.
name|getAuthenticationMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|lastCurrentUser
operator|.
name|getRealUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset UGICapturingHadoopYarnProtoRPC
name|UGICapturingHadoopYarnProtoRPC
operator|.
name|lastCurrentUser
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Subclass of {@link HadoopYarnProtoRPC} which captures the current UGI in    * a static variable.  Used by {@link #testProxyUserCorrectUGI()}.    */
DECL|class|UGICapturingHadoopYarnProtoRPC
specifier|public
specifier|static
class|class
name|UGICapturingHadoopYarnProtoRPC
extends|extends
name|HadoopYarnProtoRPC
block|{
DECL|field|lastCurrentUser
specifier|static
name|UserGroupInformation
name|lastCurrentUser
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|getProxy (Class protocol, InetSocketAddress addr, Configuration conf)
specifier|public
name|Object
name|getProxy
parameter_list|(
name|Class
name|protocol
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|UserGroupInformation
name|currentUser
init|=
literal|null
decl_stmt|;
try|try
block|{
name|currentUser
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to get current user\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|ioe
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastCurrentUser
operator|=
name|currentUser
expr_stmt|;
return|return
name|super
operator|.
name|getProxy
argument_list|(
name|protocol
argument_list|,
name|addr
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

