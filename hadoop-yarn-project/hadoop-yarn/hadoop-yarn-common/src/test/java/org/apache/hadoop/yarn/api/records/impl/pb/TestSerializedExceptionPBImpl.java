begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api.records.impl.pb
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|SerializedExceptionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|SerializedExceptionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSerializedExceptionPBImpl
specifier|public
class|class
name|TestSerializedExceptionPBImpl
block|{
annotation|@
name|Test
DECL|method|testSerializedException ()
specifier|public
name|void
name|testSerializedException
parameter_list|()
throws|throws
name|Exception
block|{
name|SerializedExceptionPBImpl
name|orig
init|=
operator|new
name|SerializedExceptionPBImpl
argument_list|()
decl_stmt|;
name|orig
operator|.
name|init
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"test exception"
argument_list|)
argument_list|)
expr_stmt|;
name|SerializedExceptionProto
name|proto
init|=
name|orig
operator|.
name|getProto
argument_list|()
decl_stmt|;
name|SerializedExceptionPBImpl
name|deser
init|=
operator|new
name|SerializedExceptionPBImpl
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|orig
argument_list|,
name|deser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|orig
operator|.
name|getMessage
argument_list|()
argument_list|,
name|deser
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|orig
operator|.
name|getRemoteTrace
argument_list|()
argument_list|,
name|deser
operator|.
name|getRemoteTrace
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|orig
operator|.
name|getCause
argument_list|()
argument_list|,
name|deser
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeserialize ()
specifier|public
name|void
name|testDeserialize
parameter_list|()
throws|throws
name|Exception
block|{
name|Exception
name|ex
init|=
operator|new
name|Exception
argument_list|(
literal|"test exception"
argument_list|)
decl_stmt|;
name|SerializedExceptionPBImpl
name|pb
init|=
operator|new
name|SerializedExceptionPBImpl
argument_list|()
decl_stmt|;
try|try
block|{
name|pb
operator|.
name|deSerialize
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"deSerialze should throw YarnRuntimeException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ClassNotFoundException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pb
operator|.
name|init
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|pb
operator|.
name|deSerialize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBeforeInit ()
specifier|public
name|void
name|testBeforeInit
parameter_list|()
throws|throws
name|Exception
block|{
name|SerializedExceptionProto
name|defaultProto
init|=
name|SerializedExceptionProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|SerializedExceptionPBImpl
name|pb1
init|=
operator|new
name|SerializedExceptionPBImpl
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|pb1
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|SerializedExceptionPBImpl
name|pb2
init|=
operator|new
name|SerializedExceptionPBImpl
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultProto
argument_list|,
name|pb2
operator|.
name|getProto
argument_list|()
argument_list|)
expr_stmt|;
name|SerializedExceptionPBImpl
name|pb3
init|=
operator|new
name|SerializedExceptionPBImpl
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultProto
operator|.
name|getTrace
argument_list|()
argument_list|,
name|pb3
operator|.
name|getRemoteTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

