begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp.view
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|view
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebAppException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|test
operator|.
name|WebAppTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestHtmlBlock
specifier|public
class|class
name|TestHtmlBlock
block|{
DECL|class|TestBlock
specifier|public
specifier|static
class|class
name|TestBlock
extends|extends
name|HtmlBlock
block|{
annotation|@
name|Override
DECL|method|render (Block html)
specifier|public
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|html
operator|.
name|p
argument_list|(
literal|"#testid"
argument_list|)
operator|.
name|__
argument_list|(
literal|"test note"
argument_list|)
operator|.
name|__
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ShortBlock
specifier|public
specifier|static
class|class
name|ShortBlock
extends|extends
name|HtmlBlock
block|{
annotation|@
name|Override
DECL|method|render (Block html)
specifier|public
name|void
name|render
parameter_list|(
name|Block
name|html
parameter_list|)
block|{
name|html
operator|.
name|p
argument_list|()
operator|.
name|__
argument_list|(
literal|"should throw"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ShortPage
specifier|public
specifier|static
class|class
name|ShortPage
extends|extends
name|HtmlPage
block|{
annotation|@
name|Override
DECL|method|render (Page.HTML<__> html)
specifier|public
name|void
name|render
parameter_list|(
name|Page
operator|.
name|HTML
argument_list|<
name|__
argument_list|>
name|html
parameter_list|)
block|{
name|html
operator|.
name|title
argument_list|(
literal|"short test"
argument_list|)
operator|.
name|__
argument_list|(
name|ShortBlock
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUsual ()
annotation|@
name|Test
specifier|public
name|void
name|testUsual
parameter_list|()
block|{
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|testBlock
argument_list|(
name|TestBlock
operator|.
name|class
argument_list|)
decl_stmt|;
name|PrintWriter
name|out
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|PrintWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|" id=\"testid\""
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|out
argument_list|)
operator|.
name|print
argument_list|(
literal|"test note"
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortBlock ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|WebAppException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testShortBlock
parameter_list|()
block|{
name|WebAppTests
operator|.
name|testBlock
argument_list|(
name|ShortBlock
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testShortPage ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|WebAppException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testShortPage
parameter_list|()
block|{
name|WebAppTests
operator|.
name|testPage
argument_list|(
name|ShortPage
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

