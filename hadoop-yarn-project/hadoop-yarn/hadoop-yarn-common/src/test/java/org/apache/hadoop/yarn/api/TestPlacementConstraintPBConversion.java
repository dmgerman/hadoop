begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|RACK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|cardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|maxCardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|or
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetCardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetIn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|pb
operator|.
name|PlacementConstraintFromProtoConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|pb
operator|.
name|PlacementConstraintToProtoConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|AbstractConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|Or
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
operator|.
name|SingleConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|CompositePlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|CompositePlacementConstraintProto
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|PlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnProtos
operator|.
name|SimplePlacementConstraintProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for {@link PlacementConstraintToProtoConverter} and  * {@link PlacementConstraintFromProtoConverter}.  */
end_comment

begin_class
DECL|class|TestPlacementConstraintPBConversion
specifier|public
class|class
name|TestPlacementConstraintPBConversion
block|{
annotation|@
name|Test
DECL|method|testTargetConstraintProtoConverter ()
specifier|public
name|void
name|testTargetConstraintProtoConverter
parameter_list|()
block|{
name|AbstractConstraint
name|sConstraintExpr
init|=
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sConstraintExpr
operator|instanceof
name|SingleConstraint
argument_list|)
expr_stmt|;
name|SingleConstraint
name|single
init|=
operator|(
name|SingleConstraint
operator|)
name|sConstraintExpr
decl_stmt|;
name|PlacementConstraint
name|sConstraint
init|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|sConstraintExpr
argument_list|)
decl_stmt|;
comment|// Convert to proto.
name|PlacementConstraintToProtoConverter
name|toProtoConverter
init|=
operator|new
name|PlacementConstraintToProtoConverter
argument_list|(
name|sConstraint
argument_list|)
decl_stmt|;
name|PlacementConstraintProto
name|protoConstraint
init|=
name|toProtoConverter
operator|.
name|convert
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|protoConstraint
operator|.
name|hasSimpleConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|protoConstraint
operator|.
name|hasCompositeConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|SimplePlacementConstraintProto
name|sProto
init|=
name|protoConstraint
operator|.
name|getSimpleConstraint
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getScope
argument_list|()
argument_list|,
name|sProto
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getMinCardinality
argument_list|()
argument_list|,
name|sProto
operator|.
name|getMinCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getMaxCardinality
argument_list|()
argument_list|,
name|sProto
operator|.
name|getMaxCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getTargetExpressions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|sProto
operator|.
name|getTargetExpressionsList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Convert from proto.
name|PlacementConstraintFromProtoConverter
name|fromProtoConverter
init|=
operator|new
name|PlacementConstraintFromProtoConverter
argument_list|(
name|protoConstraint
argument_list|)
decl_stmt|;
name|PlacementConstraint
name|newConstraint
init|=
name|fromProtoConverter
operator|.
name|convert
argument_list|()
decl_stmt|;
name|AbstractConstraint
name|newConstraintExpr
init|=
name|newConstraint
operator|.
name|getConstraintExpr
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newConstraintExpr
operator|instanceof
name|SingleConstraint
argument_list|)
expr_stmt|;
name|SingleConstraint
name|newSingle
init|=
operator|(
name|SingleConstraint
operator|)
name|newConstraintExpr
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getScope
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getMinCardinality
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getMinCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getMaxCardinality
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getMaxCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getTargetExpressions
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getTargetExpressions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCardinalityConstraintProtoConverter ()
specifier|public
name|void
name|testCardinalityConstraintProtoConverter
parameter_list|()
block|{
name|AbstractConstraint
name|sConstraintExpr
init|=
name|cardinality
argument_list|(
name|RACK
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sConstraintExpr
operator|instanceof
name|SingleConstraint
argument_list|)
expr_stmt|;
name|SingleConstraint
name|single
init|=
operator|(
name|SingleConstraint
operator|)
name|sConstraintExpr
decl_stmt|;
name|PlacementConstraint
name|sConstraint
init|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|sConstraintExpr
argument_list|)
decl_stmt|;
comment|// Convert to proto.
name|PlacementConstraintToProtoConverter
name|toProtoConverter
init|=
operator|new
name|PlacementConstraintToProtoConverter
argument_list|(
name|sConstraint
argument_list|)
decl_stmt|;
name|PlacementConstraintProto
name|protoConstraint
init|=
name|toProtoConverter
operator|.
name|convert
argument_list|()
decl_stmt|;
name|compareSimpleConstraintToProto
argument_list|(
name|single
argument_list|,
name|protoConstraint
argument_list|)
expr_stmt|;
comment|// Convert from proto.
name|PlacementConstraintFromProtoConverter
name|fromProtoConverter
init|=
operator|new
name|PlacementConstraintFromProtoConverter
argument_list|(
name|protoConstraint
argument_list|)
decl_stmt|;
name|PlacementConstraint
name|newConstraint
init|=
name|fromProtoConverter
operator|.
name|convert
argument_list|()
decl_stmt|;
name|AbstractConstraint
name|newConstraintExpr
init|=
name|newConstraint
operator|.
name|getConstraintExpr
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newConstraintExpr
operator|instanceof
name|SingleConstraint
argument_list|)
expr_stmt|;
name|SingleConstraint
name|newSingle
init|=
operator|(
name|SingleConstraint
operator|)
name|newConstraintExpr
decl_stmt|;
name|compareSimpleConstraints
argument_list|(
name|single
argument_list|,
name|newSingle
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompositeConstraintProtoConverter ()
specifier|public
name|void
name|testCompositeConstraintProtoConverter
parameter_list|()
block|{
name|AbstractConstraint
name|constraintExpr
init|=
name|or
argument_list|(
name|targetIn
argument_list|(
name|RACK
argument_list|,
name|allocationTag
argument_list|(
literal|"spark"
argument_list|)
argument_list|)
argument_list|,
name|maxCardinality
argument_list|(
name|NODE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|targetCardinality
argument_list|(
name|RACK
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
name|allocationTag
argument_list|(
literal|"zk"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|constraintExpr
operator|instanceof
name|Or
argument_list|)
expr_stmt|;
name|PlacementConstraint
name|constraint
init|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|constraintExpr
argument_list|)
decl_stmt|;
name|Or
name|orExpr
init|=
operator|(
name|Or
operator|)
name|constraintExpr
decl_stmt|;
comment|// Convert to proto.
name|PlacementConstraintToProtoConverter
name|toProtoConverter
init|=
operator|new
name|PlacementConstraintToProtoConverter
argument_list|(
name|constraint
argument_list|)
decl_stmt|;
name|PlacementConstraintProto
name|protoConstraint
init|=
name|toProtoConverter
operator|.
name|convert
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|protoConstraint
operator|.
name|hasSimpleConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|protoConstraint
operator|.
name|hasCompositeConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|CompositePlacementConstraintProto
name|cProto
init|=
name|protoConstraint
operator|.
name|getCompositeConstraint
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CompositeType
operator|.
name|OR
argument_list|,
name|cProto
operator|.
name|getCompositeType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cProto
operator|.
name|getChildConstraintsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cProto
operator|.
name|getTimedChildConstraintsCount
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|AbstractConstraint
argument_list|>
name|orChildren
init|=
name|orExpr
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PlacementConstraintProto
argument_list|>
name|orProtoChildren
init|=
name|cProto
operator|.
name|getChildConstraintsList
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|orChildren
operator|.
name|hasNext
argument_list|()
operator|&&
name|orProtoChildren
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AbstractConstraint
name|orChild
init|=
name|orChildren
operator|.
name|next
argument_list|()
decl_stmt|;
name|PlacementConstraintProto
name|orProtoChild
init|=
name|orProtoChildren
operator|.
name|next
argument_list|()
decl_stmt|;
name|compareSimpleConstraintToProto
argument_list|(
operator|(
name|SingleConstraint
operator|)
name|orChild
argument_list|,
name|orProtoChild
argument_list|)
expr_stmt|;
block|}
comment|// Convert from proto.
name|PlacementConstraintFromProtoConverter
name|fromProtoConverter
init|=
operator|new
name|PlacementConstraintFromProtoConverter
argument_list|(
name|protoConstraint
argument_list|)
decl_stmt|;
name|PlacementConstraint
name|newConstraint
init|=
name|fromProtoConverter
operator|.
name|convert
argument_list|()
decl_stmt|;
name|AbstractConstraint
name|newConstraintExpr
init|=
name|newConstraint
operator|.
name|getConstraintExpr
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|newConstraintExpr
operator|instanceof
name|Or
argument_list|)
expr_stmt|;
name|Or
name|newOrExpr
init|=
operator|(
name|Or
operator|)
name|newConstraintExpr
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|newOrExpr
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|orChildren
operator|=
name|orExpr
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|Iterator
argument_list|<
name|AbstractConstraint
argument_list|>
name|newOrChildren
init|=
name|newOrExpr
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|orChildren
operator|.
name|hasNext
argument_list|()
operator|&&
name|newOrChildren
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|AbstractConstraint
name|orChild
init|=
name|orChildren
operator|.
name|next
argument_list|()
decl_stmt|;
name|AbstractConstraint
name|newOrChild
init|=
name|newOrChildren
operator|.
name|next
argument_list|()
decl_stmt|;
name|compareSimpleConstraints
argument_list|(
operator|(
name|SingleConstraint
operator|)
name|orChild
argument_list|,
operator|(
name|SingleConstraint
operator|)
name|newOrChild
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareSimpleConstraintToProto (SingleConstraint constraint, PlacementConstraintProto proto)
specifier|private
name|void
name|compareSimpleConstraintToProto
parameter_list|(
name|SingleConstraint
name|constraint
parameter_list|,
name|PlacementConstraintProto
name|proto
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|proto
operator|.
name|hasSimpleConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|proto
operator|.
name|hasCompositeConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|SimplePlacementConstraintProto
name|sProto
init|=
name|proto
operator|.
name|getSimpleConstraint
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraint
operator|.
name|getScope
argument_list|()
argument_list|,
name|sProto
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraint
operator|.
name|getMinCardinality
argument_list|()
argument_list|,
name|sProto
operator|.
name|getMinCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraint
operator|.
name|getMaxCardinality
argument_list|()
argument_list|,
name|sProto
operator|.
name|getMaxCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|constraint
operator|.
name|getTargetExpressions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|sProto
operator|.
name|getTargetExpressionsList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|compareSimpleConstraints (SingleConstraint single, SingleConstraint newSingle)
specifier|private
name|void
name|compareSimpleConstraints
parameter_list|(
name|SingleConstraint
name|single
parameter_list|,
name|SingleConstraint
name|newSingle
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getScope
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getScope
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getMinCardinality
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getMinCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getMaxCardinality
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getMaxCardinality
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|single
operator|.
name|getTargetExpressions
argument_list|()
argument_list|,
name|newSingle
operator|.
name|getTargetExpressions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

