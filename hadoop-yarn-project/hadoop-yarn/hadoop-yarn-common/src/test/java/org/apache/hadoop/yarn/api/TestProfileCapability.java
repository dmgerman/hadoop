begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.api
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ProfileCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test profile capability behavior.  */
end_comment

begin_class
DECL|class|TestProfileCapability
specifier|public
class|class
name|TestProfileCapability
block|{
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|// Initialize resource map
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|riMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Initialize mandatory resources
name|riMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|,
name|ResourceInformation
operator|.
name|MEMORY_MB
argument_list|)
expr_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|,
name|ResourceInformation
operator|.
name|VCORES
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|resourceName
init|=
literal|"res-"
operator|+
name|i
decl_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|resourceName
argument_list|,
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|resourceName
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ResourceUtils
operator|.
name|initializeResourcesFromResourceInformationMap
argument_list|(
name|riMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertProfileCapabilityToResource ()
specifier|public
name|void
name|testConvertProfileCapabilityToResource
parameter_list|()
block|{
name|Resource
name|profile1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|profile1
operator|.
name|setResourceValue
argument_list|(
literal|"res-0"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|profile1
operator|.
name|setResourceValue
argument_list|(
literal|"res-1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Resource
name|profile2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|profile2
operator|.
name|setResourceValue
argument_list|(
literal|"res-0"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|profile2
operator|.
name|setResourceValue
argument_list|(
literal|"res-1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Resource
name|profile3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|profile3
operator|.
name|setResourceValue
argument_list|(
literal|"res-0"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|profile3
operator|.
name|setResourceValue
argument_list|(
literal|"res-1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|profiles
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"profile1"
argument_list|,
name|profile1
argument_list|,
literal|"profile2"
argument_list|,
name|profile2
argument_list|,
literal|"profile3"
argument_list|,
name|profile3
argument_list|,
literal|"default"
argument_list|,
name|profile1
argument_list|)
decl_stmt|;
comment|// Test case 1, set override value to (1, 1, 0), since we only allow
comment|// overwrite for positive value, it is still profile1.
name|ProfileCapability
name|pc
init|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"profile1"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|profile1
argument_list|,
name|ProfileCapability
operator|.
name|toResource
argument_list|(
name|pc
argument_list|,
name|profiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 2, similarly, negative value won't be respected.
name|pc
operator|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"profile1"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|profile1
argument_list|,
name|ProfileCapability
operator|.
name|toResource
argument_list|(
name|pc
argument_list|,
name|profiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 3, do overwrite for memory and vcores, the result is (3,3,1,1)
name|Resource
name|expected
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|expected
operator|.
name|setResourceValue
argument_list|(
literal|"res-0"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setResourceValue
argument_list|(
literal|"res-1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pc
operator|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"profile1"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ProfileCapability
operator|.
name|toResource
argument_list|(
name|pc
argument_list|,
name|profiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 3, do overwrite for mem and res-1, the result is (3,1,3,1)
name|expected
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setResourceValue
argument_list|(
literal|"res-0"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setResourceValue
argument_list|(
literal|"res-1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Resource
name|overwrite
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|overwrite
operator|.
name|setResourceValue
argument_list|(
literal|"res-0"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|overwrite
operator|.
name|setResourceValue
argument_list|(
literal|"res-1"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|pc
operator|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|"profile1"
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|ProfileCapability
operator|.
name|toResource
argument_list|(
name|pc
argument_list|,
name|profiles
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 4, when null profile is specified, use default.
name|pc
operator|=
name|ProfileCapability
operator|.
name|newInstance
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|profile1
argument_list|,
name|ProfileCapability
operator|.
name|toResource
argument_list|(
name|pc
argument_list|,
name|profiles
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

