begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestAggregatedLogDeletionService
specifier|public
class|class
name|TestAggregatedLogDeletionService
block|{
annotation|@
name|Test
DECL|method|testDeletion ()
specifier|public
name|void
name|testDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|toDeleteTime
init|=
name|now
operator|-
operator|(
literal|2000
operator|*
literal|1000
operator|)
decl_stmt|;
name|long
name|toKeepTime
init|=
name|now
operator|-
operator|(
literal|1500
operator|*
literal|1000
operator|)
decl_stmt|;
name|String
name|root
init|=
literal|"mockfs://foo/"
decl_stmt|;
name|String
name|remoteRootLogDir
init|=
name|root
operator|+
literal|"tmp/logs"
decl_stmt|;
name|String
name|suffix
init|=
literal|"logs"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
literal|"1800"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteRootLogDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|FileSystem
name|rootFs
init|=
name|rootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|rootFs
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteRootLogPath
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogPath
argument_list|,
literal|"me"
argument_list|)
decl_stmt|;
name|FileStatus
name|userDirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toKeepTime
argument_list|,
name|userDir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|remoteRootLogPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|userDirStatus
block|}
argument_list|)
expr_stmt|;
name|Path
name|userLogDir
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|Path
name|app1Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
literal|"application_1_1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app1DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app1Dir
argument_list|)
decl_stmt|;
name|Path
name|app2Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
literal|"application_1_2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app2DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app2Dir
argument_list|)
decl_stmt|;
name|Path
name|app3Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
literal|"application_1_3"
argument_list|)
decl_stmt|;
name|FileStatus
name|app3DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app3Dir
argument_list|)
decl_stmt|;
name|Path
name|app4Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
literal|"application_1_4"
argument_list|)
decl_stmt|;
name|FileStatus
name|app4DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app4Dir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|userLogDir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1DirStatus
block|,
name|app2DirStatus
block|,
name|app3DirStatus
block|,
name|app4DirStatus
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app1Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Path
name|app2Log1
init|=
operator|new
name|Path
argument_list|(
name|app2Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app2Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app2Log1
argument_list|)
decl_stmt|;
name|Path
name|app2Log2
init|=
operator|new
name|Path
argument_list|(
name|app2Dir
argument_list|,
literal|"host2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app2Log2Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toKeepTime
argument_list|,
name|app2Log2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app2Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app2Log1Status
block|,
name|app2Log2Status
block|}
argument_list|)
expr_stmt|;
name|Path
name|app3Log1
init|=
operator|new
name|Path
argument_list|(
name|app3Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app3Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app3Log1
argument_list|)
decl_stmt|;
name|Path
name|app3Log2
init|=
operator|new
name|Path
argument_list|(
name|app3Dir
argument_list|,
literal|"host2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app3Log2Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app3Log2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|delete
argument_list|(
name|app3Dir
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"Injected Error\nStack Trace :("
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app3Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app3Log1Status
block|,
name|app3Log2Status
block|}
argument_list|)
expr_stmt|;
name|Path
name|app4Log1
init|=
operator|new
name|Path
argument_list|(
name|app4Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app4Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app4Log1
argument_list|)
decl_stmt|;
name|Path
name|app4Log2
init|=
operator|new
name|Path
argument_list|(
name|app4Dir
argument_list|,
literal|"host2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app4Log2Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app4Log2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app4Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app4Log1Status
block|,
name|app4Log2Status
block|}
argument_list|)
expr_stmt|;
name|AggregatedLogDeletionService
operator|.
name|LogDeletionTask
name|task
init|=
operator|new
name|AggregatedLogDeletionService
operator|.
name|LogDeletionTask
argument_list|(
name|conf
argument_list|,
literal|1800
argument_list|)
decl_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|app1Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app2Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|app3Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|app4Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
block|}
end_class

end_unit

