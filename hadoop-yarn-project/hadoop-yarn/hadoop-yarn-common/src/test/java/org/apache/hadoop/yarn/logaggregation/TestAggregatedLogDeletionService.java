begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestAggregatedLogDeletionService
specifier|public
class|class
name|TestAggregatedLogDeletionService
block|{
annotation|@
name|Before
DECL|method|closeFilesystems ()
specifier|public
name|void
name|closeFilesystems
parameter_list|()
throws|throws
name|IOException
block|{
comment|// prevent the same mockfs instance from being reused due to FS cache
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeletion ()
specifier|public
name|void
name|testDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|toDeleteTime
init|=
name|now
operator|-
operator|(
literal|2000
operator|*
literal|1000
operator|)
decl_stmt|;
name|long
name|toKeepTime
init|=
name|now
operator|-
operator|(
literal|1500
operator|*
literal|1000
operator|)
decl_stmt|;
name|String
name|root
init|=
literal|"mockfs://foo/"
decl_stmt|;
name|String
name|remoteRootLogDir
init|=
name|root
operator|+
literal|"tmp/logs"
decl_stmt|;
name|String
name|suffix
init|=
literal|"logs"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
literal|"1800"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteRootLogDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|FileSystem
name|rootFs
init|=
name|rootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|rootFs
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteRootLogPath
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogPath
argument_list|,
literal|"me"
argument_list|)
decl_stmt|;
name|FileStatus
name|userDirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toKeepTime
argument_list|,
name|userDir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|remoteRootLogPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|userDirStatus
block|}
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Path
name|userLogDir
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|Path
name|app1Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app1DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app1Dir
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Path
name|app2Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app2DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app2Dir
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Path
name|app3Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app3DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app3Dir
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId4
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Path
name|app4Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId4
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app4DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app4Dir
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId5
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Path
name|app5Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId5
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app5DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app5Dir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|userLogDir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1DirStatus
block|,
name|app2DirStatus
block|,
name|app3DirStatus
block|,
name|app4DirStatus
block|,
name|app5DirStatus
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app1Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Path
name|app2Log1
init|=
operator|new
name|Path
argument_list|(
name|app2Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app2Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app2Log1
argument_list|)
decl_stmt|;
name|Path
name|app2Log2
init|=
operator|new
name|Path
argument_list|(
name|app2Dir
argument_list|,
literal|"host2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app2Log2Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toKeepTime
argument_list|,
name|app2Log2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app2Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app2Log1Status
block|,
name|app2Log2Status
block|}
argument_list|)
expr_stmt|;
name|Path
name|app3Log1
init|=
operator|new
name|Path
argument_list|(
name|app3Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app3Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app3Log1
argument_list|)
decl_stmt|;
name|Path
name|app3Log2
init|=
operator|new
name|Path
argument_list|(
name|app3Dir
argument_list|,
literal|"host2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app3Log2Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app3Log2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|delete
argument_list|(
name|app3Dir
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|AccessControlException
argument_list|(
literal|"Injected Error\nStack Trace :("
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app3Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app3Log1Status
block|,
name|app3Log2Status
block|}
argument_list|)
expr_stmt|;
name|Path
name|app4Log1
init|=
operator|new
name|Path
argument_list|(
name|app4Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app4Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app4Log1
argument_list|)
decl_stmt|;
name|Path
name|app4Log2
init|=
operator|new
name|Path
argument_list|(
name|app4Dir
argument_list|,
literal|"host2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app4Log2Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app4Log2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app4Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app4Log1Status
block|,
name|app4Log2Status
block|}
argument_list|)
expr_stmt|;
name|Path
name|app5Log1
init|=
operator|new
name|Path
argument_list|(
name|app5Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app5Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app5Log1
argument_list|)
decl_stmt|;
name|Path
name|app5Log2
init|=
operator|new
name|Path
argument_list|(
name|app5Dir
argument_list|,
literal|"host2"
argument_list|)
decl_stmt|;
name|FileStatus
name|app5Log2Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toKeepTime
argument_list|,
name|app5Log2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app5Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app5Log1Status
block|,
name|app5Log2Status
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApplications
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|appId1
argument_list|,
name|appId2
argument_list|,
name|appId3
argument_list|,
name|appId4
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApplications
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|appId5
argument_list|)
argument_list|)
decl_stmt|;
name|AggregatedLogDeletionService
name|deletionService
init|=
operator|new
name|AggregatedLogDeletionService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ApplicationClientProtocol
name|createRMClient
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|createMockRMClient
argument_list|(
name|finishedApplications
argument_list|,
name|runningApplications
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|stopRMClient
parameter_list|()
block|{
comment|// DO NOTHING
block|}
block|}
decl_stmt|;
name|deletionService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|deletionService
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|2000
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app1Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|2000
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app2Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|2000
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app3Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|2000
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app4Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|2000
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app5Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|2000
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app5Log1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|2000
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app5Log2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deletionService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshLogRetentionSettings ()
specifier|public
name|void
name|testRefreshLogRetentionSettings
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|//time before 2000 sec
name|long
name|before2000Secs
init|=
name|now
operator|-
operator|(
literal|2000
operator|*
literal|1000
operator|)
decl_stmt|;
comment|//time before 50 sec
name|long
name|before50Secs
init|=
name|now
operator|-
operator|(
literal|50
operator|*
literal|1000
operator|)
decl_stmt|;
name|String
name|root
init|=
literal|"mockfs://foo/"
decl_stmt|;
name|String
name|remoteRootLogDir
init|=
name|root
operator|+
literal|"tmp/logs"
decl_stmt|;
name|String
name|suffix
init|=
literal|"logs"
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
literal|"1800"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteRootLogDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|FileSystem
name|rootFs
init|=
name|rootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|rootFs
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteRootLogPath
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogPath
argument_list|,
literal|"me"
argument_list|)
decl_stmt|;
name|FileStatus
name|userDirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|before50Secs
argument_list|,
name|userDir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|remoteRootLogPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|userDirStatus
block|}
argument_list|)
expr_stmt|;
name|Path
name|userLogDir
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//Set time last modified of app1Dir directory and its files to before2000Secs
name|Path
name|app1Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app1DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|before2000Secs
argument_list|,
name|app1Dir
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|//Set time last modified of app1Dir directory and its files to before50Secs
name|Path
name|app2Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app2DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|before50Secs
argument_list|,
name|app2Dir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|userLogDir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1DirStatus
block|,
name|app2DirStatus
block|}
argument_list|)
expr_stmt|;
name|Path
name|app1Log1
init|=
operator|new
name|Path
argument_list|(
name|app1Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app1Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|before2000Secs
argument_list|,
name|app1Log1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app1Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1Log1Status
block|}
argument_list|)
expr_stmt|;
name|Path
name|app2Log1
init|=
operator|new
name|Path
argument_list|(
name|app2Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app2Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|before50Secs
argument_list|,
name|app2Log1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app2Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app2Log1Status
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApplications
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|appId1
argument_list|,
name|appId2
argument_list|)
argument_list|)
decl_stmt|;
name|AggregatedLogDeletionService
name|deletionSvc
init|=
operator|new
name|AggregatedLogDeletionService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Configuration
name|createConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ApplicationClientProtocol
name|createRMClient
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|createMockRMClient
argument_list|(
name|finishedApplications
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|stopRMClient
parameter_list|()
block|{
comment|// DO NOTHING
block|}
block|}
decl_stmt|;
name|deletionSvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|deletionSvc
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//app1Dir would be deleted since its done above log retention period
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|10000
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app1Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//app2Dir is not expected to be deleted since its below the threshold
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|3000
argument_list|)
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app2Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Now,lets change the confs
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
comment|//We have not called refreshLogSettings,hence don't expect to see the changed conf values
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|2000l
operator|!=
name|deletionSvc
operator|.
name|getCheckIntervalMsecs
argument_list|()
argument_list|)
expr_stmt|;
comment|//refresh the log settings
name|deletionSvc
operator|.
name|refreshLogRetentionSettings
argument_list|()
expr_stmt|;
comment|//Check interval time should reflect the new value
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|2000l
operator|==
name|deletionSvc
operator|.
name|getCheckIntervalMsecs
argument_list|()
argument_list|)
expr_stmt|;
comment|//app2Dir should be deleted since it falls above the threshold
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|10000
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app2Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deletionSvc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckInterval ()
specifier|public
name|void
name|testCheckInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|RETENTION_SECS
init|=
literal|10
operator|*
literal|24
operator|*
literal|3600
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|toDeleteTime
init|=
name|now
operator|-
name|RETENTION_SECS
operator|*
literal|1000
decl_stmt|;
name|String
name|root
init|=
literal|"mockfs://foo/"
decl_stmt|;
name|String
name|remoteRootLogDir
init|=
name|root
operator|+
literal|"tmp/logs"
decl_stmt|;
name|String
name|suffix
init|=
literal|"logs"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
literal|"864000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteRootLogDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
comment|// prevent us from picking up the same mockfs instance from another test
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|FileSystem
name|rootFs
init|=
name|rootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|rootFs
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteRootLogPath
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogPath
argument_list|,
literal|"me"
argument_list|)
decl_stmt|;
name|FileStatus
name|userDirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|now
argument_list|,
name|userDir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|remoteRootLogPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|userDirStatus
block|}
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Path
name|userLogDir
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|Path
name|app1Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app1DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|now
argument_list|,
name|app1Dir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|userLogDir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1DirStatus
block|}
argument_list|)
expr_stmt|;
name|Path
name|app1Log1
init|=
operator|new
name|Path
argument_list|(
name|app1Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app1Log1Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|now
argument_list|,
name|app1Log1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app1Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1Log1Status
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApplications
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|appId1
argument_list|)
argument_list|)
decl_stmt|;
name|AggregatedLogDeletionService
name|deletionSvc
init|=
operator|new
name|AggregatedLogDeletionService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ApplicationClientProtocol
name|createRMClient
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|createMockRMClient
argument_list|(
name|finishedApplications
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|stopRMClient
parameter_list|()
block|{
comment|// DO NOTHING
block|}
block|}
decl_stmt|;
name|deletionSvc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|deletionSvc
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|10000
argument_list|)
operator|.
name|atLeast
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|listStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|app1Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// modify the timestamp of the logs and verify it's picked up quickly
name|app1DirStatus
operator|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|toDeleteTime
argument_list|,
name|app1Dir
argument_list|)
expr_stmt|;
name|app1Log1Status
operator|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|toDeleteTime
argument_list|,
name|app1Log1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|userLogDir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1DirStatus
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app1Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1Log1Status
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|,
name|timeout
argument_list|(
literal|10000
argument_list|)
argument_list|)
operator|.
name|delete
argument_list|(
name|app1Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|deletionSvc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRobustLogDeletion ()
specifier|public
name|void
name|testRobustLogDeletion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|RETENTION_SECS
init|=
literal|10
operator|*
literal|24
operator|*
literal|3600
decl_stmt|;
name|String
name|root
init|=
literal|"mockfs://foo/"
decl_stmt|;
name|String
name|remoteRootLogDir
init|=
name|root
operator|+
literal|"tmp/logs"
decl_stmt|;
name|String
name|suffix
init|=
literal|"logs"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.mockfs.impl"
argument_list|,
name|MockFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_SECONDS
argument_list|,
literal|"864000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR
argument_list|,
name|remoteRootLogDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_REMOTE_APP_LOG_DIR_SUFFIX
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
comment|// prevent us from picking up the same mockfs instance from another test
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|Path
name|rootPath
init|=
operator|new
name|Path
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|FileSystem
name|rootFs
init|=
name|rootPath
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|mockFs
init|=
operator|(
operator|(
name|FilterFileSystem
operator|)
name|rootFs
operator|)
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteRootLogPath
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogDir
argument_list|)
decl_stmt|;
name|Path
name|userDir
init|=
operator|new
name|Path
argument_list|(
name|remoteRootLogPath
argument_list|,
literal|"me"
argument_list|)
decl_stmt|;
name|FileStatus
name|userDirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|userDir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|remoteRootLogPath
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|userDirStatus
block|}
argument_list|)
expr_stmt|;
name|Path
name|userLogDir
init|=
operator|new
name|Path
argument_list|(
name|userDir
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Path
name|app1Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app1DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|app1Dir
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Path
name|app2Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
literal|"application_a"
argument_list|)
decl_stmt|;
name|FileStatus
name|app2DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|app2Dir
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Path
name|app3Dir
init|=
operator|new
name|Path
argument_list|(
name|userLogDir
argument_list|,
name|appId3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|app3DirStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|app3Dir
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|userLogDir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app1DirStatus
block|,
name|app2DirStatus
block|,
name|app3DirStatus
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app1Dir
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Should Be Caught and Logged"
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|app3Log3
init|=
operator|new
name|Path
argument_list|(
name|app3Dir
argument_list|,
literal|"host1"
argument_list|)
decl_stmt|;
name|FileStatus
name|app3Log3Status
init|=
operator|new
name|FileStatus
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|app3Log3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockFs
operator|.
name|listStatus
argument_list|(
name|app3Dir
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|FileStatus
index|[]
block|{
name|app3Log3Status
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApplications
init|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|appId1
argument_list|,
name|appId3
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|rmClient
init|=
name|createMockRMClient
argument_list|(
name|finishedApplications
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AggregatedLogDeletionService
operator|.
name|LogDeletionTask
name|deletionTask
init|=
operator|new
name|AggregatedLogDeletionService
operator|.
name|LogDeletionTask
argument_list|(
name|conf
argument_list|,
name|RETENTION_SECS
argument_list|,
name|rmClient
argument_list|)
decl_stmt|;
name|deletionTask
operator|.
name|run
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockFs
argument_list|)
operator|.
name|delete
argument_list|(
name|app3Dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|MockFileSystem
specifier|static
class|class
name|MockFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|method|MockFileSystem ()
name|MockFileSystem
parameter_list|()
block|{
name|super
argument_list|(
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
DECL|method|createMockRMClient ( List<ApplicationId> finishedApplicaitons, List<ApplicationId> runningApplications)
specifier|private
specifier|static
name|ApplicationClientProtocol
name|createMockRMClient
parameter_list|(
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|finishedApplicaitons
parameter_list|,
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApplications
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ApplicationClientProtocol
name|mockProtocol
init|=
name|mock
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|finishedApplicaitons
operator|!=
literal|null
operator|&&
operator|!
name|finishedApplicaitons
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|finishedApplicaitons
control|)
block|{
name|GetApplicationReportRequest
name|request
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|createApplicationReportWithFinishedApplication
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockProtocol
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|runningApplications
operator|!=
literal|null
operator|&&
operator|!
name|runningApplications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ApplicationId
name|appId
range|:
name|runningApplications
control|)
block|{
name|GetApplicationReportRequest
name|request
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|createApplicationReportWithRunningApplication
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockProtocol
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mockProtocol
return|;
block|}
specifier|private
specifier|static
name|GetApplicationReportResponse
DECL|method|createApplicationReportWithRunningApplication ()
name|createApplicationReportWithRunningApplication
parameter_list|()
block|{
name|ApplicationReport
name|report
init|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|mock
argument_list|(
name|GetApplicationReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getApplicationReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|report
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
specifier|private
specifier|static
name|GetApplicationReportResponse
DECL|method|createApplicationReportWithFinishedApplication ()
name|createApplicationReportWithFinishedApplication
parameter_list|()
block|{
name|ApplicationReport
name|report
init|=
name|mock
argument_list|(
name|ApplicationReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|mock
argument_list|(
name|GetApplicationReportResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|response
operator|.
name|getApplicationReport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|report
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
end_class

end_unit

