begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestApplicationACLsManager
specifier|public
class|class
name|TestApplicationACLsManager
block|{
DECL|field|ADMIN_USER
specifier|private
specifier|static
specifier|final
name|String
name|ADMIN_USER
init|=
literal|"adminuser"
decl_stmt|;
DECL|field|APP_OWNER
specifier|private
specifier|static
specifier|final
name|String
name|APP_OWNER
init|=
literal|"appuser"
decl_stmt|;
DECL|field|TESTUSER1
specifier|private
specifier|static
specifier|final
name|String
name|TESTUSER1
init|=
literal|"testuser1"
decl_stmt|;
DECL|field|TESTUSER2
specifier|private
specifier|static
specifier|final
name|String
name|TESTUSER2
init|=
literal|"testuser2"
decl_stmt|;
DECL|field|TESTUSER3
specifier|private
specifier|static
specifier|final
name|String
name|TESTUSER3
init|=
literal|"testuser3"
decl_stmt|;
annotation|@
name|Test
DECL|method|testCheckAccess ()
specifier|public
name|void
name|testCheckAccess
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|ADMIN_USER
argument_list|)
expr_stmt|;
name|ApplicationACLsManager
name|aclManager
init|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|aclMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|aclMap
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|TESTUSER1
operator|+
literal|","
operator|+
name|TESTUSER3
argument_list|)
expr_stmt|;
name|aclMap
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|TESTUSER1
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|aclManager
operator|.
name|addApplication
argument_list|(
name|appId
argument_list|,
name|aclMap
argument_list|)
expr_stmt|;
comment|//User in ACL, should be allowed access
name|UserGroupInformation
name|testUser1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser1
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser1
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|//User NOT in ACL, should not be allowed access
name|UserGroupInformation
name|testUser2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser2
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser2
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|//User has View access, but not modify access
name|UserGroupInformation
name|testUser3
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser3
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser3
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|//Application Owner should have all access
name|UserGroupInformation
name|appOwner
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|APP_OWNER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|appOwner
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|appOwner
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|//Admin should have all access
name|UserGroupInformation
name|adminUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|ADMIN_USER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|adminUser
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|adminUser
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccessWithNullACLS ()
specifier|public
name|void
name|testCheckAccessWithNullACLS
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|ADMIN_USER
argument_list|)
expr_stmt|;
name|ApplicationACLsManager
name|aclManager
init|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|appOwner
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|APP_OWNER
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//Application ACL is not added
comment|//Application Owner should have all access even if Application ACL is not added
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|appOwner
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|appOwner
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|//Admin should have all access
name|UserGroupInformation
name|adminUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|ADMIN_USER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|adminUser
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|adminUser
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// A regular user should Not have access
name|UserGroupInformation
name|testUser1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser1
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser1
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckAccessWithPartialACLS ()
specifier|public
name|void
name|testCheckAccessWithPartialACLS
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|ADMIN_USER
argument_list|)
expr_stmt|;
name|ApplicationACLsManager
name|aclManager
init|=
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|appOwner
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|APP_OWNER
argument_list|)
decl_stmt|;
comment|// Add only the VIEW ACLS
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|aclMap
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|aclMap
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|TESTUSER1
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|aclManager
operator|.
name|addApplication
argument_list|(
name|appId
argument_list|,
name|aclMap
argument_list|)
expr_stmt|;
comment|//Application Owner should have all access even if Application ACL is not added
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|appOwner
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|appOwner
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|//Admin should have all access
name|UserGroupInformation
name|adminUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|ADMIN_USER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|adminUser
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|adminUser
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// testuser1 should  have view access only
name|UserGroupInformation
name|testUser1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser1
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser1
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
comment|// A testuser2 should Not have access
name|UserGroupInformation
name|testUser2
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|TESTUSER2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser2
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|aclManager
operator|.
name|checkAccess
argument_list|(
name|testUser2
argument_list|,
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|APP_OWNER
argument_list|,
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

