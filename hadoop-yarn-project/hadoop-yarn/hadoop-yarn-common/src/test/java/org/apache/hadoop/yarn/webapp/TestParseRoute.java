begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebAppException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestParseRoute
specifier|public
class|class
name|TestParseRoute
block|{
DECL|method|testNormalAction ()
annotation|@
name|Test
specifier|public
name|void
name|testNormalAction
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo/action"
argument_list|,
literal|"foo"
argument_list|,
literal|"action"
argument_list|,
literal|":a1"
argument_list|,
literal|":a2"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo/action/:a1/:a2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultController ()
annotation|@
name|Test
specifier|public
name|void
name|testDefaultController
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/"
argument_list|,
literal|"default"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultAction ()
annotation|@
name|Test
specifier|public
name|void
name|testDefaultAction
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingAction ()
annotation|@
name|Test
specifier|public
name|void
name|testMissingAction
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo"
argument_list|,
literal|"foo"
argument_list|,
literal|"index"
argument_list|,
literal|":a1"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo/:a1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultCapture ()
annotation|@
name|Test
specifier|public
name|void
name|testDefaultCapture
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/"
argument_list|,
literal|"default"
argument_list|,
literal|"index"
argument_list|,
literal|":a"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/:a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartialCapture1 ()
annotation|@
name|Test
specifier|public
name|void
name|testPartialCapture1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo/action/bar"
argument_list|,
literal|"foo"
argument_list|,
literal|"action"
argument_list|,
literal|"bar"
argument_list|,
literal|":a"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo/action/bar/:a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPartialCapture2 ()
annotation|@
name|Test
specifier|public
name|void
name|testPartialCapture2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo/action"
argument_list|,
literal|"foo"
argument_list|,
literal|"action"
argument_list|,
literal|":a1"
argument_list|,
literal|"bar"
argument_list|,
literal|":a2"
argument_list|,
literal|":a3"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo/action/:a1/bar/:a2/:a3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testLeadingPaddings ()
annotation|@
name|Test
specifier|public
name|void
name|testLeadingPaddings
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo/action"
argument_list|,
literal|"foo"
argument_list|,
literal|"action"
argument_list|,
literal|":a"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|" /foo/action/ :a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrailingPaddings ()
annotation|@
name|Test
specifier|public
name|void
name|testTrailingPaddings
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo/action"
argument_list|,
literal|"foo"
argument_list|,
literal|"action"
argument_list|,
literal|":a"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo/action//:a / "
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/foo/action"
argument_list|,
literal|"foo"
argument_list|,
literal|"action"
argument_list|)
argument_list|,
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"/foo/action / "
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingLeadingSlash ()
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|WebAppException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMissingLeadingSlash
parameter_list|()
block|{
name|WebApp
operator|.
name|parseRoute
argument_list|(
literal|"foo/bar"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

