begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.service
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestServiceLifecycle
specifier|public
class|class
name|TestServiceLifecycle
extends|extends
name|ServiceAssert
block|{
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestServiceLifecycle
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Walk the {@link BreakableService} through it's lifecycle,     * more to verify that service's counters work than anything else    * @throws Throwable if necessary    */
annotation|@
name|Test
DECL|method|testWalkthrough ()
specifier|public
name|void
name|testWalkthrough
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|assertServiceStateCreated
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|NOTINITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertServiceStateInited
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertServiceStateStarted
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertServiceStateStopped
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * call init twice    * @throws Throwable if necessary    */
annotation|@
name|Test
DECL|method|testInitTwice ()
specifier|public
name|void
name|testInitTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"test.init"
argument_list|,
literal|"t"
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertServiceConfigurationContains
argument_list|(
name|svc
argument_list|,
literal|"test.init"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call start twice    * @throws Throwable if necessary    */
annotation|@
name|Test
DECL|method|testStartTwice ()
specifier|public
name|void
name|testStartTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that when a service is stopped more than once, no exception    * is thrown.    * @throws Throwable if necessary    */
annotation|@
name|Test
DECL|method|testStopTwice ()
specifier|public
name|void
name|testStopTwice
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Show that if the service failed during an init    * operation, it stays in the created state, even after stopping it    * @throws Throwable if necessary    */
annotation|@
name|Test
DECL|method|testStopFailedInit ()
specifier|public
name|void
name|testStopFailedInit
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertServiceStateCreated
argument_list|(
name|svc
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
comment|//expected
block|}
comment|//the service state wasn't passed
name|assertServiceStateStopped
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//now try to stop
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Show that if the service failed during an init    * operation, it stays in the created state, even after stopping it    * @throws Throwable if necessary    */
annotation|@
name|Test
DECL|method|testStopFailedStart ()
specifier|public
name|void
name|testStopFailedStart
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertServiceStateInited
argument_list|(
name|svc
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
comment|//expected
block|}
comment|//the service state wasn't passed
name|assertServiceStateStopped
argument_list|(
name|svc
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that when a service fails during its stop operation,    * its state does not change.    * @throws Throwable if necessary    */
annotation|@
name|Test
DECL|method|testFailingStop ()
specifier|public
name|void
name|testFailingStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that when a service that is not started is stopped, the    * service enters the stopped state    * @throws Throwable on a failure    */
annotation|@
name|Test
DECL|method|testStopUnstarted ()
specifier|public
name|void
name|testStopUnstarted
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|()
decl_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertServiceStateStopped
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertStateCount
argument_list|(
name|svc
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Show that if the service failed during an init    * operation, stop was called.    */
annotation|@
name|Test
DECL|method|testStopFailingInitAndStop ()
specifier|public
name|void
name|testStopFailingInitAndStop
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|svc
operator|.
name|registerServiceListener
argument_list|(
operator|new
name|LoggingStateChangeListener
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected a failure, got "
operator|+
name|svc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
name|e
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
comment|//the service state is stopped
name|assertServiceStateStopped
argument_list|(
name|svc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
name|svc
operator|.
name|getFailureState
argument_list|()
argument_list|)
expr_stmt|;
name|Throwable
name|failureCause
init|=
name|svc
operator|.
name|getFailureCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Null failure cause in "
operator|+
name|svc
argument_list|,
name|failureCause
argument_list|)
expr_stmt|;
name|BreakableService
operator|.
name|BrokenLifecycleEvent
name|cause
init|=
operator|(
name|BreakableService
operator|.
name|BrokenLifecycleEvent
operator|)
name|failureCause
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"null state in "
operator|+
name|cause
operator|+
literal|" raised by "
operator|+
name|svc
argument_list|,
name|cause
operator|.
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|INITED
argument_list|,
name|cause
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInitNullConf ()
specifier|public
name|void
name|testInitNullConf
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|svc
operator|.
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null Configurations are permitted "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceStateException
name|e
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
DECL|method|testServiceNotifications ()
specifier|public
name|void
name|testServiceNotifications
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BreakableStateChangeListener
name|listener
init|=
operator|new
name|BreakableStateChangeListener
argument_list|()
decl_stmt|;
name|svc
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that when a service listener is unregistered, it stops being invoked    * @throws Throwable on a failure    */
annotation|@
name|Test
DECL|method|testServiceNotificationsStopOnceUnregistered ()
specifier|public
name|void
name|testServiceNotificationsStopOnceUnregistered
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BreakableStateChangeListener
name|listener
init|=
operator|new
name|BreakableStateChangeListener
argument_list|()
decl_stmt|;
name|svc
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|unregisterServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test uses a service listener that unregisters itself during the callbacks.    * This a test that verifies the concurrency logic on the listener management    * code, that it doesn't throw any immutable state change exceptions    * if you change list membership during the notifications.    * The standard<code>AbstractService</code> implementation copies the list    * to an array in a<code>synchronized</code> block then iterates through    * the copy precisely to prevent this problem.    * @throws Throwable on a failure    */
annotation|@
name|Test
DECL|method|testServiceNotificationsUnregisterDuringCallback ()
specifier|public
name|void
name|testServiceNotificationsUnregisterDuringCallback
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BreakableStateChangeListener
name|listener
init|=
operator|new
name|SelfUnregisteringBreakableStateChangeListener
argument_list|()
decl_stmt|;
name|BreakableStateChangeListener
name|l2
init|=
operator|new
name|BreakableStateChangeListener
argument_list|()
decl_stmt|;
name|svc
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|svc
operator|.
name|registerServiceListener
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|l2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|unregisterServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|l2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|SelfUnregisteringBreakableStateChangeListener
specifier|private
specifier|static
class|class
name|SelfUnregisteringBreakableStateChangeListener
extends|extends
name|BreakableStateChangeListener
block|{
annotation|@
name|Override
DECL|method|stateChanged (Service service)
specifier|public
specifier|synchronized
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|super
operator|.
name|stateChanged
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|service
operator|.
name|unregisterServiceListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertEventCount (BreakableStateChangeListener listener, int expected)
specifier|private
name|void
name|assertEventCount
parameter_list|(
name|BreakableStateChangeListener
name|listener
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|listener
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
argument_list|,
name|listener
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServiceFailingNotifications ()
specifier|public
name|void
name|testServiceFailingNotifications
parameter_list|()
throws|throws
name|Throwable
block|{
name|BreakableService
name|svc
init|=
operator|new
name|BreakableService
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BreakableStateChangeListener
name|listener
init|=
operator|new
name|BreakableStateChangeListener
argument_list|()
decl_stmt|;
name|listener
operator|.
name|setFailingState
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|svc
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|svc
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//start this; the listener failed but this won't show
name|svc
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//counter went up
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getFailureCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//stop the service -this doesn't fail
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listener
operator|.
name|getFailureCount
argument_list|()
argument_list|)
expr_stmt|;
name|svc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * This test verifies that you can block waiting for something to happen    * and use notifications to manage it    * @throws Throwable on a failure    */
annotation|@
name|Test
DECL|method|testListenerWithNotifications ()
specifier|public
name|void
name|testListenerWithNotifications
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//this tests that a listener can get notified when a service is stopped
name|AsyncSelfTerminatingService
name|service
init|=
operator|new
name|AsyncSelfTerminatingService
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|NotifyingListener
name|listener
init|=
operator|new
name|NotifyingListener
argument_list|()
decl_stmt|;
name|service
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|listener
init|)
block|{
name|listener
operator|.
name|wait
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
block|}
name|long
name|duration
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|assertEquals
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|,
name|listener
operator|.
name|notifyingState
argument_list|)
expr_stmt|;
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Duration of "
operator|+
name|duration
operator|+
literal|" too long"
argument_list|,
name|duration
operator|<
literal|10000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelfTerminatingService ()
specifier|public
name|void
name|testSelfTerminatingService
parameter_list|()
throws|throws
name|Throwable
block|{
name|SelfTerminatingService
name|service
init|=
operator|new
name|SelfTerminatingService
argument_list|()
decl_stmt|;
name|BreakableStateChangeListener
name|listener
init|=
operator|new
name|BreakableStateChangeListener
argument_list|()
decl_stmt|;
name|service
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//start the service
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//and expect an event count of exactly two
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStartInInitService ()
specifier|public
name|void
name|testStartInInitService
parameter_list|()
throws|throws
name|Throwable
block|{
name|Service
name|service
init|=
operator|new
name|StartInInitService
argument_list|()
decl_stmt|;
name|BreakableStateChangeListener
name|listener
init|=
operator|new
name|BreakableStateChangeListener
argument_list|()
decl_stmt|;
name|service
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStopInInitService ()
specifier|public
name|void
name|testStopInInitService
parameter_list|()
throws|throws
name|Throwable
block|{
name|Service
name|service
init|=
operator|new
name|StopInInitService
argument_list|()
decl_stmt|;
name|BreakableStateChangeListener
name|listener
init|=
operator|new
name|BreakableStateChangeListener
argument_list|()
decl_stmt|;
name|service
operator|.
name|registerServiceListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|service
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|assertServiceInState
argument_list|(
name|service
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|assertEventCount
argument_list|(
name|listener
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Listener that wakes up all threads waiting on it    */
DECL|class|NotifyingListener
specifier|private
specifier|static
class|class
name|NotifyingListener
implements|implements
name|ServiceStateChangeListener
block|{
DECL|field|notifyingState
specifier|public
name|Service
operator|.
name|STATE
name|notifyingState
init|=
name|Service
operator|.
name|STATE
operator|.
name|NOTINITED
decl_stmt|;
DECL|method|stateChanged (Service service)
specifier|public
specifier|synchronized
name|void
name|stateChanged
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|notifyingState
operator|=
name|service
operator|.
name|getServiceState
argument_list|()
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Service that terminates itself after starting and sleeping for a while    */
DECL|class|AsyncSelfTerminatingService
specifier|private
specifier|static
class|class
name|AsyncSelfTerminatingService
extends|extends
name|AbstractService
implements|implements
name|Runnable
block|{
DECL|field|timeout
specifier|final
name|int
name|timeout
decl_stmt|;
DECL|method|AsyncSelfTerminatingService (int timeout)
specifier|private
name|AsyncSelfTerminatingService
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
name|super
argument_list|(
literal|"AsyncSelfTerminatingService"
argument_list|)
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{        }
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Service that terminates itself in startup    */
DECL|class|SelfTerminatingService
specifier|private
specifier|static
class|class
name|SelfTerminatingService
extends|extends
name|AbstractService
block|{
DECL|method|SelfTerminatingService ()
specifier|private
name|SelfTerminatingService
parameter_list|()
block|{
name|super
argument_list|(
literal|"SelfTerminatingService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|//start
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
comment|//then stop
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Service that starts itself in init    */
DECL|class|StartInInitService
specifier|private
specifier|static
class|class
name|StartInInitService
extends|extends
name|AbstractService
block|{
DECL|method|StartInInitService ()
specifier|private
name|StartInInitService
parameter_list|()
block|{
name|super
argument_list|(
literal|"StartInInitService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Service that starts itself in init    */
DECL|class|StopInInitService
specifier|private
specifier|static
class|class
name|StopInInitService
extends|extends
name|AbstractService
block|{
DECL|method|StopInInitService ()
specifier|private
name|StopInInitService
parameter_list|()
block|{
name|super
argument_list|(
literal|"StopInInitService"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

