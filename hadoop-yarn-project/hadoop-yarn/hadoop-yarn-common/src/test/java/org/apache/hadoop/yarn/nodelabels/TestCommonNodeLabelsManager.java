begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestCommonNodeLabelsManager
specifier|public
class|class
name|TestCommonNodeLabelsManager
extends|extends
name|NodeLabelTestBase
block|{
DECL|field|mgr
name|DummyCommonNodeLabelsManager
name|mgr
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|mgr
operator|=
operator|new
name|DummyCommonNodeLabelsManager
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|mgr
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAddRemovelabel ()
specifier|public
name|void
name|testAddRemovelabel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add some label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodeLabelAdded
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|mgr
operator|.
name|lastAddedlabels
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"hello1"
argument_list|,
literal|"world1"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodeLabelAdded
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"hello1"
argument_list|,
literal|"world1"
argument_list|)
argument_list|,
name|mgr
operator|.
name|lastAddedlabels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"hello"
argument_list|,
literal|"world"
argument_list|,
literal|"hello1"
argument_list|,
literal|"world1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"hello1"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"IOException not thrown on exclusivity change of labels"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"IOException is expected when exclusivity is modified"
argument_list|,
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"hello1"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"IOException not expected when no change in exclusivity"
argument_list|,
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
comment|// try to remove null, empty and non-existed label, should fail
for|for
control|(
name|String
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|null
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|"xx"
argument_list|)
control|)
block|{
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"remove label should fail "
operator|+
literal|"when label is null/empty/non-existed"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
comment|// Remove some label
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
name|mgr
operator|.
name|lastRemovedlabels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"world"
argument_list|,
literal|"hello1"
argument_list|,
literal|"world1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hello1"
argument_list|,
literal|"world1"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|lastRemovedlabels
operator|.
name|containsAll
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"hello1"
argument_list|,
literal|"world1"
argument_list|,
literal|"world"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAddlabelWithCase ()
specifier|public
name|void
name|testAddlabelWithCase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add some label, case will not ignore here
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"HeLlO"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNodeLabelAdded
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"HeLlO"
argument_list|)
argument_list|,
name|mgr
operator|.
name|lastAddedlabels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|mgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAddlabelWithExclusivity ()
specifier|public
name|void
name|testAddlabelWithExclusivity
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add some label, case will not ignore here
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"a"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"b"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|mgr
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|isExclusiveNodeLabel
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAddInvalidlabel ()
specifier|public
name|void
name|testAddInvalidlabel
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"null label should not add to repo"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"empty label should not add to repo"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"-?"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"invalid label charactor should not add to repo"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|StringUtils
operator|.
name|repeat
argument_list|(
literal|"c"
argument_list|,
literal|257
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"too long label should not add to repo"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"-aaabbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"label cannot start with \"-\""
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"_aaabbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"label cannot start with \"_\""
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"a^aabbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"label cannot contains other chars like ^[] ..."
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"aa[a]bbb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"label cannot contains other chars like ^[] ..."
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAddReplaceRemoveLabelsOnNodes ()
specifier|public
name|void
name|testAddReplaceRemoveLabelsOnNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set a label on a node, but label doesn't exist
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"node"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"label"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"trying to set a label to a node but "
operator|+
literal|"label doesn't exist in repository should fail"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
comment|// set a label on a node, but node is null or empty
try|try
block|{
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"label"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"trying to add a empty node but succeeded"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
comment|// set node->label one by one
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|lastNodeToLabels
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// set bunch of node->label
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
operator|(
name|Map
operator|)
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|lastNodeToLabels
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * n1: p1       * n2: p3       * n3: p3      */
comment|// remove label on node
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|lastNodeToLabels
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
argument_list|)
expr_stmt|;
comment|// add label on node
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|lastNodeToLabels
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove labels on node
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|lastNodeToLabels
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRemovelabelWithNodes ()
specifier|public
name|void
name|testRemovelabelWithNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|mgr
operator|.
name|lastRemovedlabels
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|mgr
operator|.
name|lastRemovedlabels
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testTrimLabelsWhenAddRemoveNodeLabels ()
specifier|public
name|void
name|testTrimLabelsWhenAddRemoveNodeLabels
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|" p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|mgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|toSet
argument_list|(
literal|"p1 "
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testTrimLabelsWhenModifyLabelsOnNodes ()
specifier|public
name|void
name|testTrimLabelsWhenModifyLabelsOnNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|" p1"
argument_list|,
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|" p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"  p2 "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReplaceLabelsOnHostsShouldUpdateNodesBelongTo ()
specifier|public
name|void
name|testReplaceLabelsOnHostsShouldUpdateNodesBelongTo
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace labels on n1:1 to P2
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace labels on n1 to P1, both n1:1/n1 will be P1 now
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set labels on n1:1 to P2 again to verify if add/remove works
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNodeLabelsDisabledErrorMessage (IOException e)
specifier|private
name|void
name|assertNodeLabelsDisabledErrorMessage
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NODE_LABELS_NOT_ENABLED_ERR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testNodeLabelsDisabled ()
specifier|public
name|void
name|testNodeLabelsDisabled
parameter_list|()
throws|throws
name|IOException
block|{
name|DummyCommonNodeLabelsManager
name|mgr
init|=
operator|new
name|DummyCommonNodeLabelsManager
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|start
argument_list|()
expr_stmt|;
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
comment|// add labels
try|try
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertNodeLabelsDisabledErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
comment|// check exception caught
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
comment|// remove labels
try|try
block|{
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertNodeLabelsDisabledErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
comment|// check exception caught
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
comment|// add labels to node
try|try
block|{
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertNodeLabelsDisabledErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
comment|// check exception caught
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
comment|// remove labels from node
try|try
block|{
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertNodeLabelsDisabledErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
comment|// check exception caught
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
comment|// replace labels on node
try|try
block|{
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertNodeLabelsDisabledErrorMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
comment|// check exception caught
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
name|mgr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testLabelsToNodes ()
specifier|public
name|void
name|testLabelsToNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|labelsToNodes
init|=
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
decl_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace labels on n1:1 to P2
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|labelsToNodes
operator|=
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
argument_list|,
literal|"p2"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace labels on n1 to P1, both n1:1/n1 will be P1 now
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|labelsToNodes
operator|=
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set labels on n1:1 to P2 again to verify if add/remove works
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add p3 to n1, should makes n1:1 to be p2/p3, and n1:2 to be p1/p3
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|labelsToNodes
operator|=
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|,
literal|"p2"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|)
argument_list|,
literal|"p3"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove P3 from n1, should makes n1:1 to be p2, and n1:2 to be p1
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|labelsToNodes
operator|=
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|,
literal|"p2"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testLabelsToNodesForSelectedLabels ()
specifier|public
name|void
name|testLabelsToNodesForSelectedLabels
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|setlabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"p1"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace labels on n1:1 to P3
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|setlabels
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"p2"
block|,
literal|"p3"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p3"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p2"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
argument_list|,
literal|"p3"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setlabels
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"p1"
block|,
literal|"p2"
block|,
literal|"p3"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p2"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|)
argument_list|,
literal|"p2"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2:2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|)
argument_list|,
literal|"p2"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|)
argument_list|,
literal|"p3"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n2:2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setlabels
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"p1"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|(
name|setlabels
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testNoMoreThanOneLabelExistedInOneHost ()
specifier|public
name|void
name|testNoMoreThanOneLabelExistedInOneHost
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
comment|// As in YARN-2694, we temporarily disable no more than one label existed in
comment|// one host
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should failed when set> 1 labels on a host"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should failed when add> 1 labels on a host"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a same label to a node, #labels in this node is still 1, shouldn't
comment|// fail
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Should failed when #labels> 1 on a host after add"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNodeLabelAdded (Set<String> expectedAddedLabelNames, Collection<NodeLabel> addedNodeLabels)
specifier|private
name|void
name|verifyNodeLabelAdded
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|expectedAddedLabelNames
parameter_list|,
name|Collection
argument_list|<
name|NodeLabel
argument_list|>
name|addedNodeLabels
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAddedLabelNames
operator|.
name|size
argument_list|()
argument_list|,
name|addedNodeLabels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeLabel
name|label
range|:
name|addedNodeLabels
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedAddedLabelNames
operator|.
name|contains
argument_list|(
name|label
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReplaceLabelsOnNodeInDistributedMode ()
specifier|public
name|void
name|testReplaceLabelsOnNodeInDistributedMode
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create new DummyCommonNodeLabelsManager than the one got from @before
name|mgr
operator|.
name|stop
argument_list|()
expr_stmt|;
name|mgr
operator|=
operator|new
name|DummyCommonNodeLabelsManager
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|start
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labelsByNode
init|=
name|mgr
operator|.
name|getLabelsByNode
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Labels are not expected to be written to the NodeLabelStore"
argument_list|,
name|mgr
operator|.
name|lastNodeToLabels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Updated labels should be available from the Mgr"
argument_list|,
name|labelsByNode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsByNode
operator|.
name|contains
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testLabelsInfoToNodes ()
specifier|public
name|void
name|testLabelsInfoToNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p1"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p2"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p3"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|labelsToNodes
init|=
name|mgr
operator|.
name|getLabelsInfoToNodes
argument_list|()
decl_stmt|;
name|assertLabelsInfoToNodesEquals
argument_list|(
name|labelsToNodes
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p1"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|toSet
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetNodeLabelsInfo ()
specifier|public
name|void
name|testGetNodeLabelsInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p1"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p2"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p3"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertLabelInfoMapEquals
argument_list|(
name|mgr
operator|.
name|getNodeLabelsInfo
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p2"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"p3"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

