begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestHAUtil
specifier|public
class|class
name|TestHAUtil
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|RM1_ADDRESS_UNTRIMMED
specifier|private
specifier|static
specifier|final
name|String
name|RM1_ADDRESS_UNTRIMMED
init|=
literal|"  \t\t\n 1.2.3.4:8021  \n\t "
decl_stmt|;
DECL|field|RM1_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM1_ADDRESS
init|=
name|RM1_ADDRESS_UNTRIMMED
operator|.
name|trim
argument_list|()
decl_stmt|;
DECL|field|RM2_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM2_ADDRESS
init|=
literal|"localhost:8022"
decl_stmt|;
DECL|field|RM3_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM3_ADDRESS
init|=
literal|"localhost:8033"
decl_stmt|;
DECL|field|RM1_NODE_ID_UNTRIMMED
specifier|private
specifier|static
specifier|final
name|String
name|RM1_NODE_ID_UNTRIMMED
init|=
literal|"rm1 "
decl_stmt|;
DECL|field|RM1_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM1_NODE_ID
init|=
name|RM1_NODE_ID_UNTRIMMED
operator|.
name|trim
argument_list|()
decl_stmt|;
DECL|field|RM2_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM2_NODE_ID
init|=
literal|"rm2"
decl_stmt|;
DECL|field|RM3_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM3_NODE_ID
init|=
literal|"rm3"
decl_stmt|;
DECL|field|RM_INVALID_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM_INVALID_NODE_ID
init|=
literal|".rm"
decl_stmt|;
DECL|field|RM_NODE_IDS_UNTRIMMED
specifier|private
specifier|static
specifier|final
name|String
name|RM_NODE_IDS_UNTRIMMED
init|=
name|RM1_NODE_ID_UNTRIMMED
operator|+
literal|","
operator|+
name|RM2_NODE_ID
decl_stmt|;
DECL|field|RM_NODE_IDS
specifier|private
specifier|static
specifier|final
name|String
name|RM_NODE_IDS
init|=
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM_NODE_IDS_UNTRIMMED
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID_UNTRIMMED
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
comment|// configuration key itself cannot contains space/tab/return chars.
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
name|RM1_ADDRESS_UNTRIMMED
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
name|RM2_ADDRESS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetRMServiceId ()
specifier|public
name|void
name|testGetRMServiceId
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|rmhaIds
init|=
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rmhaIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|ids
init|=
name|rmhaIds
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RM1_NODE_ID
argument_list|,
name|ids
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RM2_NODE_ID
argument_list|,
name|ids
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRMId ()
specifier|public
name|void
name|testGetRMId
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Does not honor "
operator|+
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID
argument_list|,
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"Return null when "
operator|+
name|YarnConfiguration
operator|.
name|RM_HA_ID
operator|+
literal|" is not set"
argument_list|,
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVerifyAndSetConfiguration ()
specifier|public
name|void
name|testVerifyAndSetConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not throw any exceptions."
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should be saved as Trimmed collection"
argument_list|,
name|StringUtils
operator|.
name|getStringCollection
argument_list|(
name|RM_NODE_IDS
argument_list|)
argument_list|,
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should be saved as Trimmed string"
argument_list|,
name|RM1_NODE_ID
argument_list|,
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|"RPC address not set for "
operator|+
name|confKey
argument_list|,
name|RM1_ADDRESS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|confKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
argument_list|)
expr_stmt|;
try|try
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"YarnRuntimeException by verifyAndSetRMHAIds()"
argument_list|,
name|HAUtil
operator|.
name|BAD_CONFIG_MESSAGE_PREFIX
operator|+
name|HAUtil
operator|.
name|getInvalidValueMessage
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|)
operator|+
literal|"\nHA mode requires atleast two RMs"
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// simulate the case YarnConfiguration.RM_HA_ID is not set
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
name|RM1_ADDRESS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
name|RM2_ADDRESS
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"YarnRuntimeException by getRMId()"
argument_list|,
name|HAUtil
operator|.
name|BAD_CONFIG_MESSAGE_PREFIX
operator|+
name|HAUtil
operator|.
name|getNeedToSetValueMessage
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM_INVALID_NODE_ID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM_INVALID_NODE_ID
operator|+
literal|","
operator|+
name|RM1_NODE_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
comment|// simulate xml with invalid node id
name|conf
operator|.
name|set
argument_list|(
name|confKey
operator|+
name|RM_INVALID_NODE_ID
argument_list|,
name|RM_INVALID_NODE_ID
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"YarnRuntimeException by addSuffix()"
argument_list|,
name|HAUtil
operator|.
name|BAD_CONFIG_MESSAGE_PREFIX
operator|+
name|HAUtil
operator|.
name|getInvalidValueMessage
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM_INVALID_NODE_ID
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// simulate the case HAUtil.RM_RPC_ADDRESS_CONF_KEYS are not set
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
try|try
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw YarnRuntimeException. by Configuration#set()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|String
name|confKey
init|=
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|RM1_NODE_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"YarnRuntimeException by Configuration#set()"
argument_list|,
name|HAUtil
operator|.
name|BAD_CONFIG_MESSAGE_PREFIX
operator|+
name|HAUtil
operator|.
name|getNeedToSetValueMessage
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
name|RM1_NODE_ID
argument_list|)
operator|+
literal|" or "
operator|+
name|confKey
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// simulate the case YarnConfiguration.RM_HA_IDS doesn't contain
comment|// the value of YarnConfiguration.RM_HA_ID
name|conf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM2_NODE_ID
operator|+
literal|","
operator|+
name|RM3_NODE_ID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID_UNTRIMMED
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
name|RM1_ADDRESS_UNTRIMMED
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
name|RM2_ADDRESS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM3_NODE_ID
argument_list|)
argument_list|,
name|RM3_ADDRESS
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|HAUtil
operator|.
name|verifyAndSetConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"YarnRuntimeException by getRMId()'s validation"
argument_list|,
name|HAUtil
operator|.
name|BAD_CONFIG_MESSAGE_PREFIX
operator|+
name|HAUtil
operator|.
name|getRMHAIdNeedToBeIncludedMessage
argument_list|(
literal|"[rm2, rm3]"
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetConfKeyForRMInstance ()
specifier|public
name|void
name|testGetConfKeyForRMInstance
parameter_list|()
block|{
name|assertTrue
argument_list|(
literal|"RM instance id is not suffixed"
argument_list|,
name|HAUtil
operator|.
name|getConfKeyForRMInstance
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|conf
argument_list|)
operator|.
name|contains
argument_list|(
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM instance id is suffixed"
argument_list|,
name|HAUtil
operator|.
name|getConfKeyForRMInstance
argument_list|(
name|YarnConfiguration
operator|.
name|NM_ADDRESS
argument_list|,
name|conf
argument_list|)
operator|.
name|contains
argument_list|(
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

