begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestHAUtil
specifier|public
class|class
name|TestHAUtil
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|RM1_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM1_ADDRESS
init|=
literal|"1.2.3.4:8021"
decl_stmt|;
DECL|field|RM2_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM2_ADDRESS
init|=
literal|"localhost:8022"
decl_stmt|;
DECL|field|RM1_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM1_NODE_ID
init|=
literal|"rm1"
decl_stmt|;
DECL|field|RM2_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM2_NODE_ID
init|=
literal|"rm2"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|HAUtil
operator|.
name|RPC_ADDRESS_CONF_KEYS
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
name|RM1_ADDRESS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
name|RM2_ADDRESS
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetRMServiceId ()
specifier|public
name|void
name|testGetRMServiceId
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|rmhaIds
init|=
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rmhaIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetRMId ()
specifier|public
name|void
name|testGetRMId
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Does not honor "
operator|+
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID
argument_list|,
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|HAUtil
operator|.
name|getRMHAId
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"getRMHAId() fails to throw an exception when RM_HA_ID is not set"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|yre
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
annotation|@
name|Test
DECL|method|testSetGetRpcAddresses ()
specifier|public
name|void
name|testSetGetRpcAddresses
parameter_list|()
throws|throws
name|Exception
block|{
name|HAUtil
operator|.
name|setAllRpcAddresses
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|HAUtil
operator|.
name|RPC_ADDRESS_CONF_KEYS
control|)
block|{
name|assertEquals
argument_list|(
literal|"RPC address not set for "
operator|+
name|confKey
argument_list|,
name|RM1_ADDRESS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|confKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

