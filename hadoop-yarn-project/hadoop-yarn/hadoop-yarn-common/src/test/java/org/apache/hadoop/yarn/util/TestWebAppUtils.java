begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestWebAppUtils
specifier|public
class|class
name|TestWebAppUtils
block|{
DECL|field|RM1_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM1_NODE_ID
init|=
literal|"rm1"
decl_stmt|;
DECL|field|RM2_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM2_NODE_ID
init|=
literal|"rm2"
decl_stmt|;
comment|// Because WebAppUtils#getResolvedAddress tries to resolve the hostname, we add a static mapping for dummy hostnames
comment|// to make this test run anywhere without having to give some resolvable hostnames
DECL|field|dummyHostNames
specifier|private
specifier|static
name|String
name|dummyHostNames
index|[]
init|=
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
DECL|field|anyIpAddress
specifier|private
specifier|static
specifier|final
name|String
name|anyIpAddress
init|=
literal|"1.2.3.4"
decl_stmt|;
DECL|field|savedStaticResolution
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|savedStaticResolution
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|initializeDummyHostnameResolution ()
specifier|public
specifier|static
name|void
name|initializeDummyHostnameResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|previousIpAddress
decl_stmt|;
for|for
control|(
name|String
name|hostName
range|:
name|dummyHostNames
control|)
block|{
if|if
condition|(
literal|null
operator|!=
operator|(
name|previousIpAddress
operator|=
name|NetUtils
operator|.
name|getStaticResolution
argument_list|(
name|hostName
argument_list|)
operator|)
condition|)
block|{
name|savedStaticResolution
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|previousIpAddress
argument_list|)
expr_stmt|;
block|}
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
name|hostName
argument_list|,
name|anyIpAddress
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|restoreDummyHostnameResolution ()
specifier|public
specifier|static
name|void
name|restoreDummyHostnameResolution
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hostnameToIpEntry
range|:
name|savedStaticResolution
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NetUtils
operator|.
name|addStaticResolution
argument_list|(
name|hostnameToIpEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|hostnameToIpEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|TestRMWebAppURLRemoteAndLocal ()
specifier|public
name|void
name|TestRMWebAppURLRemoteAndLocal
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|rmAddress
init|=
literal|"host1:8088"
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
name|rmAddress
argument_list|)
expr_stmt|;
specifier|final
name|String
name|rm1Address
init|=
literal|"host2:8088"
decl_stmt|;
specifier|final
name|String
name|rm2Address
init|=
literal|"host3:8088"
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
operator|+
literal|"."
operator|+
name|RM1_NODE_ID
argument_list|,
name|rm1Address
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
operator|+
literal|"."
operator|+
name|RM2_NODE_ID
argument_list|,
name|rm2Address
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
name|String
name|rmRemoteUrl
init|=
name|WebAppUtils
operator|.
name|getResolvedRemoteRMWebAppURLWithoutScheme
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ResolvedRemoteRMWebAppUrl should resolve to the first HA RM address"
argument_list|,
name|rm1Address
argument_list|,
name|rmRemoteUrl
argument_list|)
expr_stmt|;
name|String
name|rmLocalUrl
init|=
name|WebAppUtils
operator|.
name|getResolvedRMWebAppURLWithoutScheme
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ResolvedRMWebAppUrl should resolve to the default RM webapp address"
argument_list|,
name|rmAddress
argument_list|,
name|rmLocalUrl
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

