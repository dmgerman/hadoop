begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.logaggregation.filecontroller.ifile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|ifile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|LogAggregationUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|AggregatedLogFormat
operator|.
name|LogValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|ContainerLogFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|logaggregation
operator|.
name|filecontroller
operator|.
name|LogAggregationFileControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Function test for {@link LogAggregationIndexFileController}.  *  */
end_comment

begin_class
DECL|class|TestLogAggregationIndexFileController
specifier|public
class|class
name|TestLogAggregationIndexFileController
block|{
DECL|field|rootLocalLogDir
specifier|private
specifier|final
name|String
name|rootLocalLogDir
init|=
literal|"target/LocalLogs"
decl_stmt|;
DECL|field|rootLocalLogDirPath
specifier|private
specifier|final
name|Path
name|rootLocalLogDirPath
init|=
operator|new
name|Path
argument_list|(
name|rootLocalLogDir
argument_list|)
decl_stmt|;
DECL|field|remoteLogDir
specifier|private
specifier|final
name|String
name|remoteLogDir
init|=
literal|"target/remote-app"
decl_stmt|;
DECL|field|LOG_FILE_UMASK
specifier|private
specifier|static
specifier|final
name|FsPermission
name|LOG_FILE_UMASK
init|=
name|FsPermission
operator|.
name|createImmutable
argument_list|(
call|(
name|short
call|)
argument_list|(
literal|0777
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|USER_UGI
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|USER_UGI
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"testUser"
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|appId
specifier|private
name|ApplicationId
name|appId
decl_stmt|;
DECL|field|containerId
specifier|private
name|ContainerId
name|containerId
decl_stmt|;
DECL|field|nodeId
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
DECL|field|sysOutStream
specifier|private
name|ByteArrayOutputStream
name|sysOutStream
decl_stmt|;
DECL|field|sysOut
specifier|private
name|PrintStream
name|sysOut
decl_stmt|;
DECL|field|sysErrStream
specifier|private
name|ByteArrayOutputStream
name|sysErrStream
decl_stmt|;
DECL|field|sysErr
specifier|private
name|PrintStream
name|sysErr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|appId
operator|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|nodeId
operator|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|9999
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.log-aggregation.Indexed.remote-app-log-dir"
argument_list|,
name|remoteLogDir
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.log-aggregation.Indexed.remote-app-log-dir-suffix"
argument_list|,
literal|"logs"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_LOG_AGG_COMPRESSION_TYPE
argument_list|,
literal|"gz"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|sysOutStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysOut
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysOutStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|sysOut
argument_list|)
expr_stmt|;
name|sysErrStream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|sysErr
operator|=
operator|new
name|PrintStream
argument_list|(
name|sysErrStream
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|sysErr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootLocalLogDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteLogDir
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testLogAggregationIndexFileFormat ()
specifier|public
name|void
name|testLogAggregationIndexFileFormat
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|rootLocalLogDirPath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootLocalLogDirPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|rootLocalLogDirPath
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|appLogsDir
init|=
operator|new
name|Path
argument_list|(
name|rootLocalLogDirPath
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appLogsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|appLogsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|appLogsDir
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|logTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
literal|"syslog"
argument_list|)
expr_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
literal|"stdout"
argument_list|)
expr_stmt|;
name|logTypes
operator|.
name|add
argument_list|(
literal|"stderr"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|File
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|LogKey
name|key1
init|=
operator|new
name|LogKey
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|logType
range|:
name|logTypes
control|)
block|{
name|File
name|file
init|=
name|createAndWriteLocalLogFile
argument_list|(
name|containerId
argument_list|,
name|appLogsDir
argument_list|,
name|logType
argument_list|)
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|LogValue
name|value
init|=
name|mock
argument_list|(
name|LogValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|value
operator|.
name|getPendingLogFilesToUploadForThisContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|files
argument_list|)
expr_stmt|;
specifier|final
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|LogAggregationIndexedFileController
name|fileFormat
init|=
operator|new
name|LogAggregationIndexedFileController
argument_list|()
block|{
specifier|private
name|int
name|rollOverCheck
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Clock
name|getSystemClock
parameter_list|()
block|{
return|return
name|clock
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRollover
parameter_list|(
specifier|final
name|FileContext
name|fc
parameter_list|,
specifier|final
name|Path
name|candidate
parameter_list|)
throws|throws
name|IOException
block|{
name|rollOverCheck
operator|++
expr_stmt|;
if|if
condition|(
name|rollOverCheck
operator|>=
literal|3
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|fileFormat
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
literal|"Indexed"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|appAcls
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Path
name|appDir
init|=
name|fileFormat
operator|.
name|getRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
name|USER_UGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|appDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|appDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|appDir
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|logPath
init|=
name|fileFormat
operator|.
name|getRemoteNodeLogFileForApp
argument_list|(
name|appId
argument_list|,
name|USER_UGI
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|LogAggregationFileControllerContext
name|context
init|=
operator|new
name|LogAggregationFileControllerContext
argument_list|(
name|logPath
argument_list|,
name|logPath
argument_list|,
literal|true
argument_list|,
literal|1000
argument_list|,
name|appId
argument_list|,
name|appAcls
argument_list|,
name|nodeId
argument_list|,
name|USER_UGI
argument_list|)
decl_stmt|;
comment|// initialize the writer
name|fileFormat
operator|.
name|initializeWriter
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|postWrite
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
name|ContainerLogsRequest
name|logRequest
init|=
operator|new
name|ContainerLogsRequest
argument_list|()
decl_stmt|;
name|logRequest
operator|.
name|setAppId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setNodeId
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setAppOwner
argument_list|(
name|USER_UGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setContainerId
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|logRequest
operator|.
name|setBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerLogMeta
argument_list|>
name|meta
init|=
name|fileFormat
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|logRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerLogMeta
name|log
range|:
name|meta
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getContainerLogMeta
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerLogFileInfo
name|file
range|:
name|log
operator|.
name|getContainerLogMeta
argument_list|()
control|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fileNames
operator|.
name|removeAll
argument_list|(
name|logTypes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundLogs
init|=
name|fileFormat
operator|.
name|readAggregatedLogs
argument_list|(
name|logRequest
argument_list|,
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundLogs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logType
range|:
name|logTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
name|logType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Configuration
name|factoryConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|factoryConf
operator|.
name|set
argument_list|(
literal|"yarn.log-aggregation.file-formats"
argument_list|,
literal|"Indexed"
argument_list|)
expr_stmt|;
name|factoryConf
operator|.
name|set
argument_list|(
literal|"yarn.log-aggregation.file-controller.Indexed.class"
argument_list|,
literal|"org.apache.hadoop.yarn.logaggregation.filecontroller.ifile"
operator|+
literal|".LogAggregationIndexedFileController"
argument_list|)
expr_stmt|;
name|LogAggregationFileControllerFactory
name|factory
init|=
operator|new
name|LogAggregationFileControllerFactory
argument_list|(
name|factoryConf
argument_list|)
decl_stmt|;
name|LogAggregationFileController
name|fileController
init|=
name|factory
operator|.
name|getFileControllerForRead
argument_list|(
name|appId
argument_list|,
name|USER_UGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileController
operator|instanceof
name|LogAggregationIndexedFileController
argument_list|)
expr_stmt|;
name|foundLogs
operator|=
name|fileController
operator|.
name|readAggregatedLogs
argument_list|(
name|logRequest
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundLogs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logType
range|:
name|logTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
name|logType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// create a checksum file
name|Path
name|checksumFile
init|=
operator|new
name|Path
argument_list|(
name|fileFormat
operator|.
name|getRemoteAppLogDir
argument_list|(
name|appId
argument_list|,
name|USER_UGI
operator|.
name|getShortUserName
argument_list|()
argument_list|)
argument_list|,
name|LogAggregationUtils
operator|.
name|getNodeString
argument_list|(
name|nodeId
argument_list|)
operator|+
name|LogAggregationIndexedFileController
operator|.
name|CHECK_SUM_FILE_SUFFIX
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fInput
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|nodeName
init|=
name|logPath
operator|.
name|getName
argument_list|()
operator|+
literal|"_"
operator|+
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|fInput
operator|=
name|FileSystem
operator|.
name|create
argument_list|(
name|fs
argument_list|,
name|checksumFile
argument_list|,
name|LOG_FILE_UMASK
argument_list|)
expr_stmt|;
name|fInput
operator|.
name|writeInt
argument_list|(
name|nodeName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|fInput
operator|.
name|write
argument_list|(
name|nodeName
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fInput
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|fInput
argument_list|)
expr_stmt|;
block|}
name|meta
operator|=
name|fileFormat
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|logRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|foundLogs
operator|=
name|fileFormat
operator|.
name|readAggregatedLogs
argument_list|(
name|logRequest
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|foundLogs
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|checksumFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|checksumFile
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|newLogTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|logTypes
argument_list|)
decl_stmt|;
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
name|newLogTypes
operator|.
name|add
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createAndWriteLocalLogFile
argument_list|(
name|containerId
argument_list|,
name|appLogsDir
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|newLogTypes
operator|.
name|add
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|createAndWriteLocalLogFile
argument_list|(
name|containerId
argument_list|,
name|appLogsDir
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|LogValue
name|value2
init|=
name|mock
argument_list|(
name|LogValue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|value2
operator|.
name|getPendingLogFilesToUploadForThisContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|files
argument_list|)
expr_stmt|;
comment|// initialize the writer
name|fileFormat
operator|.
name|initializeWriter
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
comment|// We did not call postWriter which we would keep the checksum file.
comment|// We can only get the logs/logmeta from the first write.
name|meta
operator|=
name|fileFormat
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|logRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|meta
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerLogMeta
name|log
range|:
name|meta
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getContainerLogMeta
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerLogFileInfo
name|file
range|:
name|log
operator|.
name|getContainerLogMeta
argument_list|()
control|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fileNames
operator|.
name|removeAll
argument_list|(
name|logTypes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|foundLogs
operator|=
name|fileFormat
operator|.
name|readAggregatedLogs
argument_list|(
name|logRequest
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundLogs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logType
range|:
name|logTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
name|logType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
literal|"test1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
literal|"test2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// Call postWrite and we should get all logs/logmetas for both
comment|// first write and second write
name|fileFormat
operator|.
name|initializeWriter
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|postWrite
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
name|meta
operator|=
name|fileFormat
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|logRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|meta
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerLogMeta
name|log
range|:
name|meta
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerLogFileInfo
name|file
range|:
name|log
operator|.
name|getContainerLogMeta
argument_list|()
control|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fileNames
operator|.
name|removeAll
argument_list|(
name|newLogTypes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|foundLogs
operator|=
name|fileFormat
operator|.
name|readAggregatedLogs
argument_list|(
name|logRequest
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundLogs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logType
range|:
name|newLogTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
name|logType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// start to roll over old logs
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|initializeWriter
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|write
argument_list|(
name|key1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|postWrite
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|fileFormat
operator|.
name|closeWriter
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|status
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|logPath
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|status
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|meta
operator|=
name|fileFormat
operator|.
name|readAggregatedLogsMeta
argument_list|(
name|logRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|meta
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerLogMeta
name|log
range|:
name|meta
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|log
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerLogFileInfo
name|file
range|:
name|log
operator|.
name|getContainerLogMeta
argument_list|()
control|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|file
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|fileNames
operator|.
name|removeAll
argument_list|(
name|newLogTypes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|fileNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|foundLogs
operator|=
name|fileFormat
operator|.
name|readAggregatedLogs
argument_list|(
name|logRequest
argument_list|,
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|foundLogs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|logType
range|:
name|newLogTypes
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|sysOutStream
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
name|logType
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sysOutStream
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|method|createAndWriteLocalLogFile (ContainerId containerId, Path localLogDir, String logType)
specifier|private
name|File
name|createAndWriteLocalLogFile
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|Path
name|localLogDir
parameter_list|,
name|String
name|logType
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|localLogDir
operator|.
name|toString
argument_list|()
argument_list|,
name|logType
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|logMessage
argument_list|(
name|containerId
argument_list|,
name|logType
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|logMessage (ContainerId containerId, String logType)
specifier|private
name|String
name|logMessage
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|String
name|logType
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Hello "
operator|+
name|containerId
operator|+
literal|" in "
operator|+
name|logType
operator|+
literal|"!"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

