begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.servers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|IContentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ILabelProviderListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|IStructuredContentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ITableLabelProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|Viewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|graphics
operator|.
name|Image
import|;
end_import

begin_comment
comment|/**  * Provider that enables selection of a predefined Hadoop server.  */
end_comment

begin_class
DECL|class|HadoopServerSelectionListContentProvider
specifier|public
class|class
name|HadoopServerSelectionListContentProvider
implements|implements
name|IContentProvider
implements|,
name|ITableLabelProvider
implements|,
name|IStructuredContentProvider
block|{
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{    }
DECL|method|inputChanged (Viewer viewer, Object oldInput, Object newInput)
specifier|public
name|void
name|inputChanged
parameter_list|(
name|Viewer
name|viewer
parameter_list|,
name|Object
name|oldInput
parameter_list|,
name|Object
name|newInput
parameter_list|)
block|{    }
DECL|method|getColumnImage (Object element, int columnIndex)
specifier|public
name|Image
name|getColumnImage
parameter_list|(
name|Object
name|element
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|getColumnText (Object element, int columnIndex)
specifier|public
name|String
name|getColumnText
parameter_list|(
name|Object
name|element
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|HadoopServer
condition|)
block|{
name|HadoopServer
name|location
init|=
operator|(
name|HadoopServer
operator|)
name|element
decl_stmt|;
if|if
condition|(
name|columnIndex
operator|==
literal|0
condition|)
block|{
return|return
name|location
operator|.
name|getLocationName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|columnIndex
operator|==
literal|1
condition|)
block|{
return|return
name|location
operator|.
name|getMasterHostName
argument_list|()
return|;
block|}
block|}
return|return
name|element
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|addListener (ILabelProviderListener listener)
specifier|public
name|void
name|addListener
parameter_list|(
name|ILabelProviderListener
name|listener
parameter_list|)
block|{    }
DECL|method|isLabelProperty (Object element, String property)
specifier|public
name|boolean
name|isLabelProperty
parameter_list|(
name|Object
name|element
parameter_list|,
name|String
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|method|removeListener (ILabelProviderListener listener)
specifier|public
name|void
name|removeListener
parameter_list|(
name|ILabelProviderListener
name|listener
parameter_list|)
block|{    }
DECL|method|getElements (Object inputElement)
specifier|public
name|Object
index|[]
name|getElements
parameter_list|(
name|Object
name|inputElement
parameter_list|)
block|{
return|return
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

