begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.servers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|Activator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|ErrorMessageDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|JarModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|CoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|debug
operator|.
name|core
operator|.
name|ILaunchConfigurationWorkingCopy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|launching
operator|.
name|IJavaLaunchConfigurationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|launching
operator|.
name|IRuntimeClasspathEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|launching
operator|.
name|JavaRuntime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|TableViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|wizard
operator|.
name|Wizard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|wizard
operator|.
name|WizardPage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|SWT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|events
operator|.
name|SelectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|FillLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|GridData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|GridLayout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|TableColumn
import|;
end_import

begin_comment
comment|/**  * Wizard for publishing a job to a Hadoop server.  */
end_comment

begin_class
DECL|class|RunOnHadoopWizard
specifier|public
class|class
name|RunOnHadoopWizard
extends|extends
name|Wizard
block|{
DECL|field|mainPage
specifier|private
name|MainWizardPage
name|mainPage
decl_stmt|;
DECL|field|createNewPage
specifier|private
name|HadoopLocationWizard
name|createNewPage
decl_stmt|;
comment|/**    * The file resource (containing a main()) to run on the Hadoop location    */
DECL|field|resource
specifier|private
name|IFile
name|resource
decl_stmt|;
comment|/**    * The launch configuration to update    */
DECL|field|iConf
specifier|private
name|ILaunchConfigurationWorkingCopy
name|iConf
decl_stmt|;
DECL|field|progressMonitor
specifier|private
name|IProgressMonitor
name|progressMonitor
decl_stmt|;
DECL|method|RunOnHadoopWizard (IFile resource, ILaunchConfigurationWorkingCopy iConf)
specifier|public
name|RunOnHadoopWizard
parameter_list|(
name|IFile
name|resource
parameter_list|,
name|ILaunchConfigurationWorkingCopy
name|iConf
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|iConf
operator|=
name|iConf
expr_stmt|;
name|setForcePreviousAndNextButtons
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setNeedsProgressMonitor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
literal|"Run on Hadoop"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This wizard contains 2 pages:    *<li> the first one lets the user choose an already existing location    *<li> the second one allows the user to create a new location, in case it    * does not already exist    */
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|addPages ()
specifier|public
name|void
name|addPages
parameter_list|()
block|{
name|addPage
argument_list|(
name|this
operator|.
name|mainPage
operator|=
operator|new
name|MainWizardPage
argument_list|()
argument_list|)
expr_stmt|;
name|addPage
argument_list|(
name|this
operator|.
name|createNewPage
operator|=
operator|new
name|HadoopLocationWizard
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs any actions appropriate in response to the user having pressed    * the Finish button, or refuse if finishing now is not permitted.    */
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|performFinish ()
specifier|public
name|boolean
name|performFinish
parameter_list|()
block|{
comment|/*      * Create a new location or get an existing one      */
name|HadoopServer
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mainPage
operator|.
name|createNew
operator|.
name|getSelection
argument_list|()
condition|)
block|{
name|location
operator|=
name|createNewPage
operator|.
name|performFinish
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mainPage
operator|.
name|table
operator|.
name|getSelection
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|location
operator|=
operator|(
name|HadoopServer
operator|)
name|mainPage
operator|.
name|table
operator|.
name|getSelection
argument_list|()
index|[
literal|0
index|]
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|/*      * Get the base directory of the plug-in for storing configurations and      * JARs      */
name|File
name|baseDir
init|=
name|Activator
operator|.
name|getDefault
argument_list|()
operator|.
name|getStateLocation
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
comment|// Package the Job into a JAR
name|File
name|jarFile
init|=
name|JarModule
operator|.
name|createJarPackage
argument_list|(
name|resource
argument_list|)
decl_stmt|;
if|if
condition|(
name|jarFile
operator|==
literal|null
condition|)
block|{
name|ErrorMessageDialog
operator|.
name|display
argument_list|(
literal|"Run on Hadoop"
argument_list|,
literal|"Unable to create or locate the JAR file for the Job"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/*      * Generate a temporary Hadoop configuration directory and add it to the      * classpath of the launch configuration      */
name|File
name|confDir
decl_stmt|;
try|try
block|{
name|confDir
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hadoop-conf-"
argument_list|,
literal|""
argument_list|,
name|baseDir
argument_list|)
expr_stmt|;
name|confDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|confDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|confDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|ErrorMessageDialog
operator|.
name|display
argument_list|(
literal|"Run on Hadoop"
argument_list|,
literal|"Cannot create temporary directory: "
operator|+
name|confDir
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Prepare the Hadoop configuration
name|JobConf
name|conf
init|=
operator|new
name|JobConf
argument_list|(
name|location
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setJar
argument_list|(
name|jarFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write it to the disk file
try|try
block|{
comment|// File confFile = File.createTempFile("hadoop-site-", ".xml",
comment|// confDir);
name|File
name|confFile
init|=
operator|new
name|File
argument_list|(
name|confDir
argument_list|,
literal|"hadoop-site.xml"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|confFile
argument_list|)
decl_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|fos
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Setup the Launch class path
name|List
argument_list|<
name|String
argument_list|>
name|classPath
decl_stmt|;
try|try
block|{
name|classPath
operator|=
name|iConf
operator|.
name|getAttribute
argument_list|(
name|IJavaLaunchConfigurationConstants
operator|.
name|ATTR_CLASSPATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|IPath
name|confIPath
init|=
operator|new
name|Path
argument_list|(
name|confDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|IRuntimeClasspathEntry
name|cpEntry
init|=
name|JavaRuntime
operator|.
name|newArchiveRuntimeClasspathEntry
argument_list|(
name|confIPath
argument_list|)
decl_stmt|;
name|classPath
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|cpEntry
operator|.
name|getMemento
argument_list|()
argument_list|)
expr_stmt|;
name|iConf
operator|.
name|setAttribute
argument_list|(
name|IJavaLaunchConfigurationConstants
operator|.
name|ATTR_CLASSPATH
argument_list|,
name|classPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CoreException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// location.runResource(resource, progressMonitor);
return|return
literal|true
return|;
block|}
DECL|method|refreshButtons ()
specifier|private
name|void
name|refreshButtons
parameter_list|()
block|{
name|getContainer
argument_list|()
operator|.
name|updateButtons
argument_list|()
expr_stmt|;
block|}
comment|/**    * Allows finish when an existing server is selected or when a new server    * location is defined    */
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|canFinish ()
specifier|public
name|boolean
name|canFinish
parameter_list|()
block|{
if|if
condition|(
name|mainPage
operator|!=
literal|null
condition|)
return|return
name|mainPage
operator|.
name|canFinish
argument_list|()
return|;
return|return
literal|false
return|;
block|}
comment|/**    * This is the main page of the wizard. It allows the user either to choose    * an already existing location or to indicate he wants to create a new    * location.    */
DECL|class|MainWizardPage
specifier|public
class|class
name|MainWizardPage
extends|extends
name|WizardPage
block|{
DECL|field|createNew
specifier|private
name|Button
name|createNew
decl_stmt|;
DECL|field|table
specifier|private
name|Table
name|table
decl_stmt|;
DECL|field|chooseExisting
specifier|private
name|Button
name|chooseExisting
decl_stmt|;
DECL|method|MainWizardPage ()
specifier|public
name|MainWizardPage
parameter_list|()
block|{
name|super
argument_list|(
literal|"Select or define server to run on"
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
literal|"Select Hadoop location"
argument_list|)
expr_stmt|;
name|setDescription
argument_list|(
literal|"Select a Hadoop location to run on."
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|canFlipToNextPage ()
specifier|public
name|boolean
name|canFlipToNextPage
parameter_list|()
block|{
return|return
name|createNew
operator|.
name|getSelection
argument_list|()
return|;
block|}
comment|/* @inheritDoc */
DECL|method|createControl (Composite parent)
specifier|public
name|void
name|createControl
parameter_list|(
name|Composite
name|parent
parameter_list|)
block|{
name|Composite
name|panel
init|=
operator|new
name|Composite
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Label
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|label
operator|.
name|setText
argument_list|(
literal|"Select a Hadoop Server to run on."
argument_list|)
expr_stmt|;
name|GridData
name|gData
init|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL_BOTH
argument_list|)
decl_stmt|;
name|gData
operator|.
name|grabExcessVerticalSpace
operator|=
literal|false
expr_stmt|;
name|label
operator|.
name|setLayoutData
argument_list|(
name|gData
argument_list|)
expr_stmt|;
comment|// Create location button
name|createNew
operator|=
operator|new
name|Button
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|RADIO
argument_list|)
expr_stmt|;
name|createNew
operator|.
name|setText
argument_list|(
literal|"Define a new Hadoop server location"
argument_list|)
expr_stmt|;
name|createNew
operator|.
name|setLayoutData
argument_list|(
name|gData
argument_list|)
expr_stmt|;
name|createNew
operator|.
name|addSelectionListener
argument_list|(
operator|new
name|SelectionListener
argument_list|()
block|{
specifier|public
name|void
name|widgetDefaultSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{         }
specifier|public
name|void
name|widgetSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{
name|setPageComplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RunOnHadoopWizard
operator|.
name|this
operator|.
name|refreshButtons
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|createNew
operator|.
name|setSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Select existing location button
name|chooseExisting
operator|=
operator|new
name|Button
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|RADIO
argument_list|)
expr_stmt|;
name|chooseExisting
operator|.
name|setText
argument_list|(
literal|"Choose an existing server from the list below"
argument_list|)
expr_stmt|;
name|chooseExisting
operator|.
name|setLayoutData
argument_list|(
name|gData
argument_list|)
expr_stmt|;
name|chooseExisting
operator|.
name|addSelectionListener
argument_list|(
operator|new
name|SelectionListener
argument_list|()
block|{
specifier|public
name|void
name|widgetDefaultSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{         }
specifier|public
name|void
name|widgetSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|chooseExisting
operator|.
name|getSelection
argument_list|()
operator|&&
operator|(
name|table
operator|.
name|getSelectionCount
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getItems
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|table
operator|.
name|setSelection
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|RunOnHadoopWizard
operator|.
name|this
operator|.
name|refreshButtons
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Table of existing locations
name|Composite
name|serverListPanel
init|=
operator|new
name|Composite
argument_list|(
name|panel
argument_list|,
name|SWT
operator|.
name|FILL
argument_list|)
decl_stmt|;
name|gData
operator|=
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL_BOTH
argument_list|)
expr_stmt|;
name|gData
operator|.
name|horizontalSpan
operator|=
literal|1
expr_stmt|;
name|serverListPanel
operator|.
name|setLayoutData
argument_list|(
name|gData
argument_list|)
expr_stmt|;
name|FillLayout
name|layout
init|=
operator|new
name|FillLayout
argument_list|()
decl_stmt|;
name|layout
operator|.
name|marginHeight
operator|=
name|layout
operator|.
name|marginWidth
operator|=
literal|12
expr_stmt|;
name|serverListPanel
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|Table
argument_list|(
name|serverListPanel
argument_list|,
name|SWT
operator|.
name|BORDER
operator||
name|SWT
operator|.
name|H_SCROLL
operator||
name|SWT
operator|.
name|V_SCROLL
operator||
name|SWT
operator|.
name|FULL_SELECTION
argument_list|)
expr_stmt|;
name|table
operator|.
name|setHeaderVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|setLinesVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TableColumn
name|nameColumn
init|=
operator|new
name|TableColumn
argument_list|(
name|table
argument_list|,
name|SWT
operator|.
name|LEFT
argument_list|)
decl_stmt|;
name|nameColumn
operator|.
name|setText
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
name|nameColumn
operator|.
name|setWidth
argument_list|(
literal|450
argument_list|)
expr_stmt|;
name|TableColumn
name|hostColumn
init|=
operator|new
name|TableColumn
argument_list|(
name|table
argument_list|,
name|SWT
operator|.
name|LEFT
argument_list|)
decl_stmt|;
name|hostColumn
operator|.
name|setText
argument_list|(
literal|"Master host name"
argument_list|)
expr_stmt|;
name|hostColumn
operator|.
name|setWidth
argument_list|(
literal|250
argument_list|)
expr_stmt|;
comment|// If the user select one entry, switch to "chooseExisting"
name|table
operator|.
name|addSelectionListener
argument_list|(
operator|new
name|SelectionListener
argument_list|()
block|{
specifier|public
name|void
name|widgetDefaultSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{         }
specifier|public
name|void
name|widgetSelected
parameter_list|(
name|SelectionEvent
name|e
parameter_list|)
block|{
name|chooseExisting
operator|.
name|setSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createNew
operator|.
name|setSelection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setPageComplete
argument_list|(
name|table
operator|.
name|getSelectionCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|RunOnHadoopWizard
operator|.
name|this
operator|.
name|refreshButtons
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TableViewer
name|viewer
init|=
operator|new
name|TableViewer
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|HadoopServerSelectionListContentProvider
name|provider
init|=
operator|new
name|HadoopServerSelectionListContentProvider
argument_list|()
decl_stmt|;
name|viewer
operator|.
name|setContentProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|viewer
operator|.
name|setLabelProvider
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|viewer
operator|.
name|setInput
argument_list|(
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't care, get from singleton server registry
name|this
operator|.
name|setControl
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns whether this page state allows the Wizard to finish or not      *       * @return can the wizard finish or not?      */
DECL|method|canFinish ()
specifier|public
name|boolean
name|canFinish
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isControlCreated
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|createNew
operator|.
name|getSelection
argument_list|()
condition|)
return|return
name|getNextPage
argument_list|()
operator|.
name|isPageComplete
argument_list|()
return|;
return|return
name|this
operator|.
name|chooseExisting
operator|.
name|getSelection
argument_list|()
return|;
block|}
block|}
comment|/**    * @param progressMonitor    */
DECL|method|setProgressMonitor (IProgressMonitor progressMonitor)
specifier|public
name|void
name|setProgressMonitor
parameter_list|(
name|IProgressMonitor
name|progressMonitor
parameter_list|)
block|{
name|this
operator|.
name|progressMonitor
operator|=
name|progressMonitor
expr_stmt|;
block|}
block|}
end_class

end_unit

