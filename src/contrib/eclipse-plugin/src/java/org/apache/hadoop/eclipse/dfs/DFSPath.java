begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.dfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|dfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|ErrorMessageDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|ConfProp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|IProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|MessageDialog
import|;
end_import

begin_comment
comment|/**  * DFS Path handling for DFS  */
end_comment

begin_class
DECL|class|DFSPath
specifier|public
specifier|abstract
class|class
name|DFSPath
implements|implements
name|DFSContent
block|{
DECL|field|provider
specifier|protected
specifier|final
name|DFSContentProvider
name|provider
decl_stmt|;
DECL|field|location
specifier|protected
name|HadoopServer
name|location
decl_stmt|;
DECL|field|dfs
specifier|private
name|DistributedFileSystem
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|path
specifier|protected
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|parent
specifier|protected
specifier|final
name|DFSPath
name|parent
decl_stmt|;
comment|/**    * For debugging purpose    */
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DFSPath
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Create a path representation for the given location in the given viewer    *     * @param location    * @param path    * @param viewer    */
DECL|method|DFSPath (DFSContentProvider provider, HadoopServer location)
specifier|public
name|DFSPath
parameter_list|(
name|DFSContentProvider
name|provider
parameter_list|,
name|HadoopServer
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Create a sub-path representation for the given parent path    *     * @param parent    * @param path    */
DECL|method|DFSPath (DFSPath parent, Path path)
specifier|protected
name|DFSPath
parameter_list|(
name|DFSPath
name|parent
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|parent
operator|.
name|provider
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|parent
operator|.
name|location
expr_stmt|;
name|this
operator|.
name|dfs
operator|=
name|parent
operator|.
name|dfs
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
DECL|method|dispose ()
specifier|protected
name|void
name|dispose
parameter_list|()
block|{
comment|// Free the DFS connection
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|location
operator|.
name|getConfProp
argument_list|(
name|ConfProp
operator|.
name|FS_DEFAULT_URI
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|path
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**    * Does a recursive delete of the remote directory tree at this node.    */
DECL|method|delete ()
specifier|public
name|void
name|delete
parameter_list|()
block|{
try|try
block|{
name|getDFS
argument_list|()
operator|.
name|delete
argument_list|(
name|this
operator|.
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|MessageDialog
operator|.
name|openWarning
argument_list|(
literal|null
argument_list|,
literal|"Delete file"
argument_list|,
literal|"Unable to delete file \""
operator|+
name|this
operator|.
name|path
operator|+
literal|"\"\n"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getParent ()
specifier|public
name|DFSPath
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|refresh ()
specifier|public
specifier|abstract
name|void
name|refresh
parameter_list|()
function_decl|;
comment|/**    * Refresh the UI element for this content    */
DECL|method|doRefresh ()
specifier|public
name|void
name|doRefresh
parameter_list|()
block|{
name|provider
operator|.
name|refresh
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copy the DfsPath to the given local directory    *     * @param directory the local directory    */
DECL|method|downloadToLocalDirectory (IProgressMonitor monitor, File dir)
specifier|public
specifier|abstract
name|void
name|downloadToLocalDirectory
parameter_list|(
name|IProgressMonitor
name|monitor
parameter_list|,
name|File
name|dir
parameter_list|)
function_decl|;
DECL|method|getPath ()
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|path
return|;
block|}
comment|/**    * Gets a connection to the DFS    *     * @return a connection to the DFS    * @throws IOException    */
DECL|method|getDFS ()
name|DistributedFileSystem
name|getDFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|dfs
operator|==
literal|null
condition|)
block|{
name|FileSystem
name|fs
init|=
name|location
operator|.
name|getDFS
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fs
operator|instanceof
name|DistributedFileSystem
operator|)
condition|)
block|{
name|ErrorMessageDialog
operator|.
name|display
argument_list|(
literal|"DFS Browser"
argument_list|,
literal|"The DFS Browser cannot browse anything else "
operator|+
literal|"but a Distributed File System!"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"DFS Browser expects a DistributedFileSystem!"
argument_list|)
throw|;
block|}
name|this
operator|.
name|dfs
operator|=
operator|(
name|DistributedFileSystem
operator|)
name|fs
expr_stmt|;
block|}
return|return
name|this
operator|.
name|dfs
return|;
block|}
DECL|method|computeDownloadWork ()
specifier|public
specifier|abstract
name|int
name|computeDownloadWork
parameter_list|()
function_decl|;
block|}
end_class

end_unit

