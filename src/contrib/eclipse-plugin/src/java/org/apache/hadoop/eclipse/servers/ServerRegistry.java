begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.servers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|Activator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|MessageDialog
import|;
end_import

begin_comment
comment|/**  * Register of Hadoop locations.  *   * Each location corresponds to a Hadoop {@link Configuration} stored as an  * XML file in the workspace plug-in configuration directory:  *<p>  *<tt>  *&lt;workspace-dir&gt;/.metadata/.plugins/org.apache.hadoop.eclipse/locations/*.xml  *</tt>  *   */
end_comment

begin_class
DECL|class|ServerRegistry
specifier|public
class|class
name|ServerRegistry
block|{
DECL|field|INSTANCE
specifier|private
specifier|static
specifier|final
name|ServerRegistry
name|INSTANCE
init|=
operator|new
name|ServerRegistry
argument_list|()
decl_stmt|;
DECL|field|SERVER_ADDED
specifier|public
specifier|static
specifier|final
name|int
name|SERVER_ADDED
init|=
literal|0
decl_stmt|;
DECL|field|SERVER_REMOVED
specifier|public
specifier|static
specifier|final
name|int
name|SERVER_REMOVED
init|=
literal|1
decl_stmt|;
DECL|field|SERVER_STATE_CHANGED
specifier|public
specifier|static
specifier|final
name|int
name|SERVER_STATE_CHANGED
init|=
literal|2
decl_stmt|;
DECL|field|baseDir
specifier|private
specifier|final
name|File
name|baseDir
init|=
name|Activator
operator|.
name|getDefault
argument_list|()
operator|.
name|getStateLocation
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
DECL|field|saveDir
specifier|private
specifier|final
name|File
name|saveDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"locations"
argument_list|)
decl_stmt|;
DECL|method|ServerRegistry ()
specifier|private
name|ServerRegistry
parameter_list|()
block|{
if|if
condition|(
name|saveDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|saveDir
operator|.
name|isDirectory
argument_list|()
condition|)
name|saveDir
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|saveDir
operator|.
name|exists
argument_list|()
condition|)
name|saveDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|load
argument_list|()
expr_stmt|;
block|}
DECL|field|servers
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|HadoopServer
argument_list|>
name|servers
decl_stmt|;
DECL|field|listeners
specifier|private
name|Set
argument_list|<
name|IHadoopServerListener
argument_list|>
name|listeners
init|=
operator|new
name|HashSet
argument_list|<
name|IHadoopServerListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|getInstance ()
specifier|public
specifier|static
name|ServerRegistry
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
DECL|method|getServers ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|HadoopServer
argument_list|>
name|getServers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|servers
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Load all available locations from the workspace configuration directory.    */
DECL|method|load ()
specifier|private
specifier|synchronized
name|void
name|load
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|HadoopServer
argument_list|>
name|map
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HadoopServer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|saveDir
operator|.
name|listFiles
argument_list|()
control|)
block|{
try|try
block|{
name|HadoopServer
name|server
init|=
operator|new
name|HadoopServer
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|server
operator|.
name|getLocationName
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exn
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|exn
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|servers
operator|=
name|map
expr_stmt|;
block|}
DECL|method|store ()
specifier|private
specifier|synchronized
name|void
name|store
parameter_list|()
block|{
try|try
block|{
name|File
name|dir
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"locations"
argument_list|,
literal|"new"
argument_list|,
name|baseDir
argument_list|)
decl_stmt|;
name|dir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
for|for
control|(
name|HadoopServer
name|server
range|:
name|servers
operator|.
name|values
argument_list|()
control|)
block|{
name|server
operator|.
name|storeSettingsToFile
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|server
operator|.
name|getLocationName
argument_list|()
operator|+
literal|".xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FilenameFilter
name|XMLFilter
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|lower
init|=
name|name
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
return|return
name|lower
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|File
name|backup
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
literal|"locations.backup"
argument_list|)
decl_stmt|;
if|if
condition|(
name|backup
operator|.
name|exists
argument_list|()
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|backup
operator|.
name|listFiles
argument_list|(
name|XMLFilter
argument_list|)
control|)
if|if
condition|(
operator|!
name|file
operator|.
name|delete
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete backup location file: "
operator|+
name|file
argument_list|)
throw|;
if|if
condition|(
operator|!
name|backup
operator|.
name|delete
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to delete backup location directory: "
operator|+
name|backup
argument_list|)
throw|;
block|}
name|saveDir
operator|.
name|renameTo
argument_list|(
name|backup
argument_list|)
expr_stmt|;
name|dir
operator|.
name|renameTo
argument_list|(
name|saveDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|MessageDialog
operator|.
name|openError
argument_list|(
literal|null
argument_list|,
literal|"Saving configuration of Hadoop locations failed"
argument_list|,
name|ioe
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{
for|for
control|(
name|HadoopServer
name|server
range|:
name|getServers
argument_list|()
control|)
block|{
name|server
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getServer (String location)
specifier|public
specifier|synchronized
name|HadoopServer
name|getServer
parameter_list|(
name|String
name|location
parameter_list|)
block|{
return|return
name|servers
operator|.
name|get
argument_list|(
name|location
argument_list|)
return|;
block|}
comment|/*    * HadoopServer map listeners    */
DECL|method|addListener (IHadoopServerListener l)
specifier|public
name|void
name|addListener
parameter_list|(
name|IHadoopServerListener
name|l
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeListener (IHadoopServerListener l)
specifier|public
name|void
name|removeListener
parameter_list|(
name|IHadoopServerListener
name|l
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|fireListeners (HadoopServer location, int kind)
specifier|private
name|void
name|fireListeners
parameter_list|(
name|HadoopServer
name|location
parameter_list|,
name|int
name|kind
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listeners
init|)
block|{
for|for
control|(
name|IHadoopServerListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|serverChanged
argument_list|(
name|location
argument_list|,
name|kind
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|removeServer (HadoopServer server)
specifier|public
specifier|synchronized
name|void
name|removeServer
parameter_list|(
name|HadoopServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|servers
operator|.
name|remove
argument_list|(
name|server
operator|.
name|getLocationName
argument_list|()
argument_list|)
expr_stmt|;
name|store
argument_list|()
expr_stmt|;
name|fireListeners
argument_list|(
name|server
argument_list|,
name|SERVER_REMOVED
argument_list|)
expr_stmt|;
block|}
DECL|method|addServer (HadoopServer server)
specifier|public
specifier|synchronized
name|void
name|addServer
parameter_list|(
name|HadoopServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|servers
operator|.
name|put
argument_list|(
name|server
operator|.
name|getLocationName
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|store
argument_list|()
expr_stmt|;
name|fireListeners
argument_list|(
name|server
argument_list|,
name|SERVER_ADDED
argument_list|)
expr_stmt|;
block|}
comment|/**    * Update one Hadoop location    *     * @param originalName the original location name (might have changed)    * @param server the location    */
DECL|method|updateServer (String originalName, HadoopServer server)
specifier|public
specifier|synchronized
name|void
name|updateServer
parameter_list|(
name|String
name|originalName
parameter_list|,
name|HadoopServer
name|server
parameter_list|)
block|{
comment|// Update the map if the location name has changed
if|if
condition|(
operator|!
name|server
operator|.
name|getLocationName
argument_list|()
operator|.
name|equals
argument_list|(
name|originalName
argument_list|)
condition|)
block|{
name|servers
operator|.
name|remove
argument_list|(
name|originalName
argument_list|)
expr_stmt|;
name|servers
operator|.
name|put
argument_list|(
name|server
operator|.
name|getLocationName
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
name|store
argument_list|()
expr_stmt|;
name|fireListeners
argument_list|(
name|server
argument_list|,
name|SERVER_STATE_CHANGED
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

