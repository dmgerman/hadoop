begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.view.servers
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|view
operator|.
name|servers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|ImageLibrary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|actions
operator|.
name|EditLocationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|actions
operator|.
name|NewLocationAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|HadoopServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|IJobListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
operator|.
name|JarModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
operator|.
name|IHadoopServerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|servers
operator|.
name|ServerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|IAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|IMenuListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|IMenuManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|action
operator|.
name|MenuManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|dialogs
operator|.
name|MessageDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ILabelProviderListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ISelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ISelectionChangedListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|IStructuredSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ITableLabelProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ITreeContentProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|ITreeSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|SelectionChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|TreeViewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jface
operator|.
name|viewers
operator|.
name|Viewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|SWT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|graphics
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|layout
operator|.
name|GridData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Display
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Menu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|swt
operator|.
name|widgets
operator|.
name|TreeColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|IViewSite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|PartInitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|actions
operator|.
name|ActionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|ui
operator|.
name|part
operator|.
name|ViewPart
import|;
end_import

begin_comment
comment|/**  * Map/Reduce locations view: displays all available Hadoop locations and the  * Jobs running/finished on these locations  */
end_comment

begin_class
DECL|class|ServerView
specifier|public
class|class
name|ServerView
extends|extends
name|ViewPart
implements|implements
name|ITreeContentProvider
implements|,
name|ITableLabelProvider
implements|,
name|IJobListener
implements|,
name|IHadoopServerListener
block|{
comment|/**    * Deletion action: delete a Hadoop location, kill a running job or remove    * a finished job entry    */
DECL|class|DeleteAction
class|class
name|DeleteAction
extends|extends
name|Action
block|{
DECL|method|DeleteAction ()
name|DeleteAction
parameter_list|()
block|{
name|setText
argument_list|(
literal|"Delete"
argument_list|)
expr_stmt|;
name|setImageDescriptor
argument_list|(
name|ImageLibrary
operator|.
name|get
argument_list|(
literal|"server.view.action.delete"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ISelection
name|selection
init|=
name|getViewSite
argument_list|()
operator|.
name|getSelectionProvider
argument_list|()
operator|.
name|getSelection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|selection
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|selection
operator|instanceof
name|IStructuredSelection
operator|)
condition|)
block|{
name|Object
name|selItem
init|=
operator|(
operator|(
name|IStructuredSelection
operator|)
name|selection
operator|)
operator|.
name|getFirstElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|selItem
operator|instanceof
name|HadoopServer
condition|)
block|{
name|HadoopServer
name|location
init|=
operator|(
name|HadoopServer
operator|)
name|selItem
decl_stmt|;
if|if
condition|(
name|MessageDialog
operator|.
name|openConfirm
argument_list|(
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|,
literal|"Confirm delete Hadoop location"
argument_list|,
literal|"Do you really want to remove the Hadoop location: "
operator|+
name|location
operator|.
name|getLocationName
argument_list|()
argument_list|)
condition|)
block|{
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|removeServer
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|selItem
operator|instanceof
name|HadoopJob
condition|)
block|{
comment|// kill the job
name|HadoopJob
name|job
init|=
operator|(
name|HadoopJob
operator|)
name|selItem
decl_stmt|;
if|if
condition|(
name|job
operator|.
name|isCompleted
argument_list|()
condition|)
block|{
comment|// Job already finished, remove the entry
name|job
operator|.
name|getLocation
argument_list|()
operator|.
name|purgeJob
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Job is running, kill the job?
if|if
condition|(
name|MessageDialog
operator|.
name|openConfirm
argument_list|(
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|getActiveShell
argument_list|()
argument_list|,
literal|"Confirm kill running Job"
argument_list|,
literal|"Do you really want to kill running Job: "
operator|+
name|job
operator|.
name|getJobID
argument_list|()
argument_list|)
condition|)
block|{
name|job
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * This object is the root content for this content provider    */
DECL|field|CONTENT_ROOT
specifier|private
specifier|static
specifier|final
name|Object
name|CONTENT_ROOT
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|deleteAction
specifier|private
specifier|final
name|IAction
name|deleteAction
init|=
operator|new
name|DeleteAction
argument_list|()
decl_stmt|;
DECL|field|editServerAction
specifier|private
specifier|final
name|IAction
name|editServerAction
init|=
operator|new
name|EditLocationAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
DECL|field|newLocationAction
specifier|private
specifier|final
name|IAction
name|newLocationAction
init|=
operator|new
name|NewLocationAction
argument_list|()
decl_stmt|;
DECL|field|viewer
specifier|private
name|TreeViewer
name|viewer
decl_stmt|;
DECL|method|ServerView ()
specifier|public
name|ServerView
parameter_list|()
block|{   }
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|init (IViewSite site)
specifier|public
name|void
name|init
parameter_list|(
name|IViewSite
name|site
parameter_list|)
throws|throws
name|PartInitException
block|{
name|super
operator|.
name|init
argument_list|(
name|site
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|dispose ()
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates the columns for the view    */
annotation|@
name|Override
DECL|method|createPartControl (Composite parent)
specifier|public
name|void
name|createPartControl
parameter_list|(
name|Composite
name|parent
parameter_list|)
block|{
name|Tree
name|main
init|=
operator|new
name|Tree
argument_list|(
name|parent
argument_list|,
name|SWT
operator|.
name|SINGLE
operator||
name|SWT
operator|.
name|FULL_SELECTION
operator||
name|SWT
operator|.
name|H_SCROLL
operator||
name|SWT
operator|.
name|V_SCROLL
argument_list|)
decl_stmt|;
name|main
operator|.
name|setHeaderVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|main
operator|.
name|setLinesVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|main
operator|.
name|setLayoutData
argument_list|(
operator|new
name|GridData
argument_list|(
name|GridData
operator|.
name|FILL_BOTH
argument_list|)
argument_list|)
expr_stmt|;
name|TreeColumn
name|serverCol
init|=
operator|new
name|TreeColumn
argument_list|(
name|main
argument_list|,
name|SWT
operator|.
name|SINGLE
argument_list|)
decl_stmt|;
name|serverCol
operator|.
name|setText
argument_list|(
literal|"Location"
argument_list|)
expr_stmt|;
name|serverCol
operator|.
name|setWidth
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|serverCol
operator|.
name|setResizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeColumn
name|locationCol
init|=
operator|new
name|TreeColumn
argument_list|(
name|main
argument_list|,
name|SWT
operator|.
name|SINGLE
argument_list|)
decl_stmt|;
name|locationCol
operator|.
name|setText
argument_list|(
literal|"Master node"
argument_list|)
expr_stmt|;
name|locationCol
operator|.
name|setWidth
argument_list|(
literal|185
argument_list|)
expr_stmt|;
name|locationCol
operator|.
name|setResizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeColumn
name|stateCol
init|=
operator|new
name|TreeColumn
argument_list|(
name|main
argument_list|,
name|SWT
operator|.
name|SINGLE
argument_list|)
decl_stmt|;
name|stateCol
operator|.
name|setText
argument_list|(
literal|"State"
argument_list|)
expr_stmt|;
name|stateCol
operator|.
name|setWidth
argument_list|(
literal|95
argument_list|)
expr_stmt|;
name|stateCol
operator|.
name|setResizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TreeColumn
name|statusCol
init|=
operator|new
name|TreeColumn
argument_list|(
name|main
argument_list|,
name|SWT
operator|.
name|SINGLE
argument_list|)
decl_stmt|;
name|statusCol
operator|.
name|setText
argument_list|(
literal|"Status"
argument_list|)
expr_stmt|;
name|statusCol
operator|.
name|setWidth
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|statusCol
operator|.
name|setResizable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|viewer
operator|=
operator|new
name|TreeViewer
argument_list|(
name|main
argument_list|)
expr_stmt|;
name|viewer
operator|.
name|setContentProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|viewer
operator|.
name|setLabelProvider
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|viewer
operator|.
name|setInput
argument_list|(
name|CONTENT_ROOT
argument_list|)
expr_stmt|;
comment|// don't care
name|getViewSite
argument_list|()
operator|.
name|setSelectionProvider
argument_list|(
name|viewer
argument_list|)
expr_stmt|;
name|getViewSite
argument_list|()
operator|.
name|getActionBars
argument_list|()
operator|.
name|setGlobalActionHandler
argument_list|(
name|ActionFactory
operator|.
name|DELETE
operator|.
name|getId
argument_list|()
argument_list|,
name|deleteAction
argument_list|)
expr_stmt|;
name|getViewSite
argument_list|()
operator|.
name|getActionBars
argument_list|()
operator|.
name|getToolBarManager
argument_list|()
operator|.
name|add
argument_list|(
name|editServerAction
argument_list|)
expr_stmt|;
name|getViewSite
argument_list|()
operator|.
name|getActionBars
argument_list|()
operator|.
name|getToolBarManager
argument_list|()
operator|.
name|add
argument_list|(
name|newLocationAction
argument_list|)
expr_stmt|;
name|createActions
argument_list|()
expr_stmt|;
name|createContextMenu
argument_list|()
expr_stmt|;
block|}
comment|/**    * Actions    */
DECL|method|createActions ()
specifier|private
name|void
name|createActions
parameter_list|()
block|{
comment|/*      * addItemAction = new Action("Add...") { public void run() { addItem(); } };      * addItemAction.setImageDescriptor(ImageLibrary      * .get("server.view.location.new"));      */
comment|/*      * deleteItemAction = new Action("Delete") { public void run() {      * deleteItem(); } };      * deleteItemAction.setImageDescriptor(getImageDescriptor("delete.gif"));      *       * selectAllAction = new Action("Select All") { public void run() {      * selectAll(); } };      */
comment|// Add selection listener.
name|viewer
operator|.
name|addSelectionChangedListener
argument_list|(
operator|new
name|ISelectionChangedListener
argument_list|()
block|{
specifier|public
name|void
name|selectionChanged
parameter_list|(
name|SelectionChangedEvent
name|event
parameter_list|)
block|{
name|updateActionEnablement
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addItem ()
specifier|private
name|void
name|addItem
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"ADD ITEM\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|updateActionEnablement ()
specifier|private
name|void
name|updateActionEnablement
parameter_list|()
block|{
name|IStructuredSelection
name|sel
init|=
operator|(
name|IStructuredSelection
operator|)
name|viewer
operator|.
name|getSelection
argument_list|()
decl_stmt|;
comment|// deleteItemAction.setEnabled(sel.size()> 0);
block|}
comment|/**    * Contextual menu    */
DECL|method|createContextMenu ()
specifier|private
name|void
name|createContextMenu
parameter_list|()
block|{
comment|// Create menu manager.
name|MenuManager
name|menuMgr
init|=
operator|new
name|MenuManager
argument_list|()
decl_stmt|;
name|menuMgr
operator|.
name|setRemoveAllWhenShown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|menuMgr
operator|.
name|addMenuListener
argument_list|(
operator|new
name|IMenuListener
argument_list|()
block|{
specifier|public
name|void
name|menuAboutToShow
parameter_list|(
name|IMenuManager
name|mgr
parameter_list|)
block|{
name|fillContextMenu
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Create menu.
name|Menu
name|menu
init|=
name|menuMgr
operator|.
name|createContextMenu
argument_list|(
name|viewer
operator|.
name|getControl
argument_list|()
argument_list|)
decl_stmt|;
name|viewer
operator|.
name|getControl
argument_list|()
operator|.
name|setMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
comment|// Register menu for extension.
name|getSite
argument_list|()
operator|.
name|registerContextMenu
argument_list|(
name|menuMgr
argument_list|,
name|viewer
argument_list|)
expr_stmt|;
block|}
DECL|method|fillContextMenu (IMenuManager mgr)
specifier|private
name|void
name|fillContextMenu
parameter_list|(
name|IMenuManager
name|mgr
parameter_list|)
block|{
name|mgr
operator|.
name|add
argument_list|(
name|newLocationAction
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|add
argument_list|(
name|editServerAction
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|add
argument_list|(
name|deleteAction
argument_list|)
expr_stmt|;
comment|/*      * mgr.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));      * mgr.add(deleteItemAction); mgr.add(new Separator());      * mgr.add(selectAllAction);      */
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|setFocus ()
specifier|public
name|void
name|setFocus
parameter_list|()
block|{    }
comment|/*    * IHadoopServerListener implementation    */
comment|/* @inheritDoc */
DECL|method|serverChanged (HadoopServer location, int type)
specifier|public
name|void
name|serverChanged
parameter_list|(
name|HadoopServer
name|location
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Display
operator|.
name|getDefault
argument_list|()
operator|.
name|syncExec
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ServerView
operator|.
name|this
operator|.
name|viewer
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/*    * IStructuredContentProvider implementation    */
comment|/* @inheritDoc */
DECL|method|inputChanged (final Viewer viewer, Object oldInput, Object newInput)
specifier|public
name|void
name|inputChanged
parameter_list|(
specifier|final
name|Viewer
name|viewer
parameter_list|,
name|Object
name|oldInput
parameter_list|,
name|Object
name|newInput
parameter_list|)
block|{
if|if
condition|(
name|oldInput
operator|==
name|CONTENT_ROOT
condition|)
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|newInput
operator|==
name|CONTENT_ROOT
condition|)
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    * The root elements displayed by this view are the existing Hadoop    * locations    */
comment|/* @inheritDoc */
DECL|method|getElements (Object inputElement)
specifier|public
name|Object
index|[]
name|getElements
parameter_list|(
name|Object
name|inputElement
parameter_list|)
block|{
return|return
name|ServerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/*    * ITreeStructuredContentProvider implementation    */
comment|/**    * Each location contains a child entry for each job it runs.    */
comment|/* @inheritDoc */
DECL|method|getChildren (Object parent)
specifier|public
name|Object
index|[]
name|getChildren
parameter_list|(
name|Object
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|instanceof
name|HadoopServer
condition|)
block|{
name|HadoopServer
name|location
init|=
operator|(
name|HadoopServer
operator|)
name|parent
decl_stmt|;
name|location
operator|.
name|addJobListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|HadoopJob
argument_list|>
name|jobs
init|=
name|location
operator|.
name|getJobs
argument_list|()
decl_stmt|;
return|return
name|jobs
operator|.
name|toArray
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getParent (Object element)
specifier|public
name|Object
name|getParent
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|HadoopServer
condition|)
block|{
return|return
name|CONTENT_ROOT
return|;
block|}
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|HadoopJob
condition|)
block|{
return|return
operator|(
operator|(
name|HadoopJob
operator|)
name|element
operator|)
operator|.
name|getLocation
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/* @inheritDoc */
DECL|method|hasChildren (Object element)
specifier|public
name|boolean
name|hasChildren
parameter_list|(
name|Object
name|element
parameter_list|)
block|{
comment|/* Only server entries have children */
return|return
operator|(
name|element
operator|instanceof
name|HadoopServer
operator|)
return|;
block|}
comment|/*    * ITableLabelProvider implementation    */
comment|/* @inheritDoc */
DECL|method|addListener (ILabelProviderListener listener)
specifier|public
name|void
name|addListener
parameter_list|(
name|ILabelProviderListener
name|listener
parameter_list|)
block|{
comment|// no listeners handling
block|}
DECL|method|isLabelProperty (Object element, String property)
specifier|public
name|boolean
name|isLabelProperty
parameter_list|(
name|Object
name|element
parameter_list|,
name|String
name|property
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/* @inheritDoc */
DECL|method|removeListener (ILabelProviderListener listener)
specifier|public
name|void
name|removeListener
parameter_list|(
name|ILabelProviderListener
name|listener
parameter_list|)
block|{
comment|// no listener handling
block|}
comment|/* @inheritDoc */
DECL|method|getColumnImage (Object element, int columnIndex)
specifier|public
name|Image
name|getColumnImage
parameter_list|(
name|Object
name|element
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
if|if
condition|(
operator|(
name|columnIndex
operator|==
literal|0
operator|)
operator|&&
operator|(
name|element
operator|instanceof
name|HadoopServer
operator|)
condition|)
block|{
return|return
name|ImageLibrary
operator|.
name|getImage
argument_list|(
literal|"server.view.location.entry"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|columnIndex
operator|==
literal|0
operator|)
operator|&&
operator|(
name|element
operator|instanceof
name|HadoopJob
operator|)
condition|)
block|{
return|return
name|ImageLibrary
operator|.
name|getImage
argument_list|(
literal|"server.view.job.entry"
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getColumnText (Object element, int columnIndex)
specifier|public
name|String
name|getColumnText
parameter_list|(
name|Object
name|element
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|HadoopServer
condition|)
block|{
name|HadoopServer
name|server
init|=
operator|(
name|HadoopServer
operator|)
name|element
decl_stmt|;
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|server
operator|.
name|getLocationName
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|server
operator|.
name|getMasterHostName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
literal|2
case|:
return|return
name|server
operator|.
name|getState
argument_list|()
return|;
case|case
literal|3
case|:
return|return
literal|""
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|HadoopJob
condition|)
block|{
name|HadoopJob
name|job
init|=
operator|(
name|HadoopJob
operator|)
name|element
decl_stmt|;
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|job
operator|.
name|getJobID
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
literal|1
case|:
return|return
literal|""
return|;
case|case
literal|2
case|:
return|return
name|job
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
return|;
case|case
literal|3
case|:
return|return
name|job
operator|.
name|getStatus
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|element
operator|instanceof
name|JarModule
condition|)
block|{
name|JarModule
name|jar
init|=
operator|(
name|JarModule
operator|)
name|element
decl_stmt|;
switch|switch
condition|(
name|columnIndex
condition|)
block|{
case|case
literal|0
case|:
return|return
name|jar
operator|.
name|toString
argument_list|()
return|;
case|case
literal|1
case|:
return|return
literal|"Publishing jar to server.."
return|;
case|case
literal|2
case|:
return|return
literal|""
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/*    * IJobListener (Map/Reduce Jobs listener) implementation    */
comment|/* @inheritDoc */
DECL|method|jobAdded (HadoopJob job)
specifier|public
name|void
name|jobAdded
parameter_list|(
name|HadoopJob
name|job
parameter_list|)
block|{
name|viewer
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|jobRemoved (HadoopJob job)
specifier|public
name|void
name|jobRemoved
parameter_list|(
name|HadoopJob
name|job
parameter_list|)
block|{
name|viewer
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|jobChanged (HadoopJob job)
specifier|public
name|void
name|jobChanged
parameter_list|(
name|HadoopJob
name|job
parameter_list|)
block|{
name|viewer
operator|.
name|refresh
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|publishDone (JarModule jar)
specifier|public
name|void
name|publishDone
parameter_list|(
name|JarModule
name|jar
parameter_list|)
block|{
name|viewer
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/* @inheritDoc */
DECL|method|publishStart (JarModule jar)
specifier|public
name|void
name|publishStart
parameter_list|(
name|JarModule
name|jar
parameter_list|)
block|{
name|viewer
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
comment|/*    * Miscellaneous    */
comment|/**    * Return the currently selected server (null if there is no selection or    * if the selection is not a server)    *     * @return the currently selected server entry    */
DECL|method|getSelectedServer ()
specifier|public
name|HadoopServer
name|getSelectedServer
parameter_list|()
block|{
name|ITreeSelection
name|selection
init|=
operator|(
name|ITreeSelection
operator|)
name|viewer
operator|.
name|getSelection
argument_list|()
decl_stmt|;
name|Object
name|first
init|=
name|selection
operator|.
name|getFirstElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|instanceof
name|HadoopServer
condition|)
block|{
return|return
operator|(
name|HadoopServer
operator|)
name|first
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

