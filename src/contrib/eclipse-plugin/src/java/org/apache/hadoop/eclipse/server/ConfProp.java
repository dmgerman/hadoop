begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse.server
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_enum
DECL|enum|ConfProp
specifier|public
enum|enum
name|ConfProp
block|{
comment|/**    * Property name for the Hadoop location name    */
DECL|enumConstant|PI_LOCATION_NAME
name|PI_LOCATION_NAME
argument_list|(
literal|true
argument_list|,
literal|"location.name"
argument_list|,
literal|"New Hadoop location"
argument_list|)
block|,
comment|/**    * Property name for the master host name (the Job tracker)    */
DECL|enumConstant|PI_JOB_TRACKER_HOST
name|PI_JOB_TRACKER_HOST
argument_list|(
literal|true
argument_list|,
literal|"jobtracker.host"
argument_list|,
literal|"localhost"
argument_list|)
block|,
comment|/**    * Property name for the DFS master host name (the Name node)    */
DECL|enumConstant|PI_NAME_NODE_HOST
name|PI_NAME_NODE_HOST
argument_list|(
literal|true
argument_list|,
literal|"namenode.host"
argument_list|,
literal|"localhost"
argument_list|)
block|,
comment|/**    * Property name for the installation directory on the master node    */
comment|// PI_INSTALL_DIR(true, "install.dir", "/dir/hadoop-version/"),
comment|/**    * User name to use for Hadoop operations    */
DECL|enumConstant|PI_USER_NAME
name|PI_USER_NAME
argument_list|(
literal|true
argument_list|,
literal|"user.name"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|,
literal|"who are you?"
argument_list|)
argument_list|)
block|,
comment|/**    * Property name for SOCKS proxy activation    */
DECL|enumConstant|PI_SOCKS_PROXY_ENABLE
name|PI_SOCKS_PROXY_ENABLE
argument_list|(
literal|true
argument_list|,
literal|"socks.proxy.enable"
argument_list|,
literal|"no"
argument_list|)
block|,
comment|/**    * Property name for the SOCKS proxy host    */
DECL|enumConstant|PI_SOCKS_PROXY_HOST
name|PI_SOCKS_PROXY_HOST
argument_list|(
literal|true
argument_list|,
literal|"socks.proxy.host"
argument_list|,
literal|"host"
argument_list|)
block|,
comment|/**    * Property name for the SOCKS proxy port    */
DECL|enumConstant|PI_SOCKS_PROXY_PORT
name|PI_SOCKS_PROXY_PORT
argument_list|(
literal|true
argument_list|,
literal|"socks.proxy.port"
argument_list|,
literal|"1080"
argument_list|)
block|,
comment|/**    * TCP port number for the name node    */
DECL|enumConstant|PI_NAME_NODE_PORT
name|PI_NAME_NODE_PORT
argument_list|(
literal|true
argument_list|,
literal|"namenode.port"
argument_list|,
literal|"50040"
argument_list|)
block|,
comment|/**    * TCP port number for the job tracker    */
DECL|enumConstant|PI_JOB_TRACKER_PORT
name|PI_JOB_TRACKER_PORT
argument_list|(
literal|true
argument_list|,
literal|"jobtracker.port"
argument_list|,
literal|"50020"
argument_list|)
block|,
comment|/**    * Are the Map/Reduce and the Distributed FS masters hosted on the same    * machine?    */
DECL|enumConstant|PI_COLOCATE_MASTERS
name|PI_COLOCATE_MASTERS
argument_list|(
literal|true
argument_list|,
literal|"masters.colocate"
argument_list|,
literal|"yes"
argument_list|)
block|,
comment|/**    * Property name for naming the job tracker (URI). This property is related    * to {@link #PI_MASTER_HOST_NAME}    */
DECL|enumConstant|JOB_TRACKER_URI
name|JOB_TRACKER_URI
argument_list|(
literal|false
argument_list|,
literal|"mapred.job.tracker"
argument_list|,
literal|"localhost:50020"
argument_list|)
block|,
comment|/**    * Property name for naming the default file system (URI).    */
DECL|enumConstant|FS_DEFAULT_URI
name|FS_DEFAULT_URI
argument_list|(
literal|false
argument_list|,
literal|"fs.default.name"
argument_list|,
literal|"hdfs://localhost:50040/"
argument_list|)
block|,
comment|/**    * Property name for the default socket factory:    */
DECL|enumConstant|SOCKET_FACTORY_DEFAULT
name|SOCKET_FACTORY_DEFAULT
argument_list|(
literal|false
argument_list|,
literal|"hadoop.rpc.socket.factory.class.default"
argument_list|,
literal|"org.apache.hadoop.net.StandardSocketFactory"
argument_list|)
block|,
comment|/**    * Property name for the SOCKS server URI.    */
DECL|enumConstant|SOCKS_SERVER
name|SOCKS_SERVER
argument_list|(
literal|false
argument_list|,
literal|"hadoop.socks.server"
argument_list|,
literal|"host:1080"
argument_list|)
block|,    ;
comment|/**    * Map<property name> -> ConfProp    */
DECL|field|map
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ConfProp
argument_list|>
name|map
decl_stmt|;
DECL|method|registerProperty (String name, ConfProp prop)
specifier|private
specifier|static
specifier|synchronized
name|void
name|registerProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|ConfProp
name|prop
parameter_list|)
block|{
if|if
condition|(
name|ConfProp
operator|.
name|map
operator|==
literal|null
condition|)
name|ConfProp
operator|.
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConfProp
argument_list|>
argument_list|()
expr_stmt|;
name|ConfProp
operator|.
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|prop
argument_list|)
expr_stmt|;
block|}
DECL|method|getByName (String propName)
specifier|public
specifier|static
name|ConfProp
name|getByName
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|map
operator|.
name|get
argument_list|(
name|propName
argument_list|)
return|;
block|}
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|defVal
specifier|public
specifier|final
name|String
name|defVal
decl_stmt|;
DECL|method|ConfProp (boolean internal, String name, String defVal)
name|ConfProp
parameter_list|(
name|boolean
name|internal
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|defVal
parameter_list|)
block|{
if|if
condition|(
name|internal
condition|)
name|name
operator|=
literal|"eclipse.plug-in."
operator|+
name|name
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|defVal
operator|=
name|defVal
expr_stmt|;
name|ConfProp
operator|.
name|registerProperty
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|get (Configuration conf)
name|String
name|get
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|set (Configuration conf, String value)
name|void
name|set
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|value
parameter_list|)
block|{
assert|assert
name|value
operator|!=
literal|null
assert|;
name|conf
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_enum

end_unit

