begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.eclipse
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|eclipse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|resources
operator|.
name|IProjectNature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|CoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|NullProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|core
operator|.
name|runtime
operator|.
name|QualifiedName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|IClasspathEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|IJavaProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jdt
operator|.
name|core
operator|.
name|JavaCore
import|;
end_import

begin_comment
comment|/**  * Class to configure and deconfigure an Eclipse project with the MapReduce  * project nature.  */
end_comment

begin_class
DECL|class|MapReduceNature
specifier|public
class|class
name|MapReduceNature
implements|implements
name|IProjectNature
block|{
DECL|field|ID
specifier|public
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"org.apache.hadoop.eclipse.Nature"
decl_stmt|;
DECL|field|project
specifier|private
name|IProject
name|project
decl_stmt|;
DECL|field|log
specifier|static
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MapReduceNature
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Configures an Eclipse project as a Map/Reduce project by adding the    * Hadoop libraries to a project's classpath.    */
DECL|method|configure ()
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|CoreException
block|{
name|String
name|path
init|=
name|project
operator|.
name|getPersistentProperty
argument_list|(
operator|new
name|QualifiedName
argument_list|(
name|Activator
operator|.
name|PLUGIN_ID
argument_list|,
literal|"hadoop.runtime.path"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|File
argument_list|>
name|coreJars
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|dir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
name|String
name|fileName
init|=
name|pathname
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// get the hadoop core jar without touching test or examples
comment|// older version of hadoop don't use the word "core" -- eyhung
if|if
condition|(
operator|(
name|fileName
operator|.
name|indexOf
argument_list|(
literal|"hadoop"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
operator|&&
operator|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|"jar"
argument_list|)
operator|)
operator|&&
operator|(
name|fileName
operator|.
name|indexOf
argument_list|(
literal|"test"
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|(
name|fileName
operator|.
name|indexOf
argument_list|(
literal|"examples"
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|)
block|{
name|coreJars
operator|.
name|add
argument_list|(
name|pathname
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
comment|// we don't care what this returns
block|}
block|}
argument_list|)
expr_stmt|;
name|File
name|dir2
init|=
operator|new
name|File
argument_list|(
name|path
operator|+
name|File
operator|.
name|separatorChar
operator|+
literal|"lib"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir2
operator|.
name|exists
argument_list|()
operator|&&
name|dir2
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|dir2
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|!
name|pathname
operator|.
name|isDirectory
argument_list|()
operator|)
operator|&&
operator|(
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"jar"
argument_list|)
operator|)
condition|)
block|{
name|coreJars
operator|.
name|add
argument_list|(
name|pathname
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
comment|// we don't care what this returns
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Add Hadoop libraries onto classpath
name|IJavaProject
name|javaProject
init|=
name|JavaCore
operator|.
name|create
argument_list|(
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
comment|// Bundle bundle = Activator.getDefault().getBundle();
try|try
block|{
name|IClasspathEntry
index|[]
name|currentCp
init|=
name|javaProject
operator|.
name|getRawClasspath
argument_list|()
decl_stmt|;
name|IClasspathEntry
index|[]
name|newCp
init|=
operator|new
name|IClasspathEntry
index|[
name|currentCp
operator|.
name|length
operator|+
name|coreJars
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentCp
argument_list|,
literal|0
argument_list|,
name|newCp
argument_list|,
literal|0
argument_list|,
name|currentCp
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|File
argument_list|>
name|i
init|=
name|coreJars
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// for (int i = 0; i< s_coreJarNames.length; i++) {
specifier|final
name|File
name|f
init|=
operator|(
name|File
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// URL url = FileLocator.toFileURL(FileLocator.find(bundle, new
comment|// Path("lib/" + s_coreJarNames[i]), null));
name|URL
name|url
init|=
name|f
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
decl_stmt|;
name|log
operator|.
name|finer
argument_list|(
literal|"hadoop library url.getPath() = "
operator|+
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|newCp
index|[
name|newCp
operator|.
name|length
operator|-
literal|1
operator|-
name|count
index|]
operator|=
name|JavaCore
operator|.
name|newLibraryEntry
argument_list|(
operator|new
name|Path
argument_list|(
name|url
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|javaProject
operator|.
name|setRawClasspath
argument_list|(
name|newCp
argument_list|,
operator|new
name|NullProgressMonitor
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"IOException generated in "
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deconfigure a project from MapReduce status. Currently unimplemented.    */
DECL|method|deconfigure ()
specifier|public
name|void
name|deconfigure
parameter_list|()
throws|throws
name|CoreException
block|{
comment|// TODO Auto-generated method stub
block|}
comment|/**    * Returns the project to which this project nature applies.    */
DECL|method|getProject ()
specifier|public
name|IProject
name|getProject
parameter_list|()
block|{
return|return
name|this
operator|.
name|project
return|;
block|}
comment|/**    * Sets the project to which this nature applies. Used when instantiating    * this project nature runtime.    */
DECL|method|setProject (IProject project)
specifier|public
name|void
name|setProject
parameter_list|(
name|IProject
name|project
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
block|}
block|}
end_class

end_unit

