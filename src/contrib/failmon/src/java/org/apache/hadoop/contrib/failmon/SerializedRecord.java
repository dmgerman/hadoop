begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_comment
comment|/**********************************************************  * Objects of this class hold the serialized representations  * of EventRecords. A SerializedRecord is essentially an EventRecord  * with all its property values converted to strings. It also provides   * some convenience methods for printing the property fields in a   * more readable way.  *  **********************************************************/
end_comment

begin_class
DECL|class|SerializedRecord
specifier|public
class|class
name|SerializedRecord
block|{
DECL|field|fields
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|fields
decl_stmt|;
DECL|field|dateFormatter
specifier|private
specifier|static
name|DateFormat
name|dateFormatter
init|=
name|DateFormat
operator|.
name|getDateTimeInstance
argument_list|(
name|DateFormat
operator|.
name|LONG
argument_list|,
name|DateFormat
operator|.
name|LONG
argument_list|)
decl_stmt|;
empty_stmt|;
comment|/**    * Create the SerializedRecord given an EventRecord.    */
DECL|method|SerializedRecord (EventRecord source)
specifier|public
name|SerializedRecord
parameter_list|(
name|EventRecord
name|source
parameter_list|)
block|{
name|fields
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|k
range|:
name|source
operator|.
name|getMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|strs
init|=
name|getStrings
argument_list|(
name|source
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|strs
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|fields
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|strs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|fields
operator|.
name|put
argument_list|(
name|k
operator|+
literal|"#"
operator|+
name|i
argument_list|,
name|strs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Extract String representations from an Object.    *     * @param o the input object    *     * @return an ArrayList that contains Strings found in o    */
DECL|method|getStrings (Object o)
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getStrings
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|retval
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|retval
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
name|retval
operator|.
name|add
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
name|retval
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Calendar
condition|)
name|retval
operator|.
name|add
argument_list|(
name|dateFormatter
operator|.
name|format
argument_list|(
operator|(
operator|(
name|Calendar
operator|)
name|o
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|InetAddress
index|[]
condition|)
for|for
control|(
name|InetAddress
name|ip
range|:
operator|(
operator|(
name|InetAddress
index|[]
operator|)
name|o
operator|)
control|)
name|retval
operator|.
name|add
argument_list|(
name|ip
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
index|[]
condition|)
for|for
control|(
name|String
name|s
range|:
operator|(
name|String
index|[]
operator|)
name|o
control|)
name|retval
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
else|else
name|retval
operator|.
name|add
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**    * Set the value of a property of the EventRecord.    *     * @param fieldName the name of the property to set    * @param fieldValue the value of the property to set    *     */
DECL|method|set (String fieldName, String fieldValue)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|fieldValue
parameter_list|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the value of a property of the EventRecord.    * If the property with the specific key is not found,    * null is returned.    *     * @param fieldName the name of the property to get.    */
DECL|method|get (String fieldName)
specifier|public
name|String
name|get
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
comment|/**    * Arrange the keys to provide a more readable printing order:    * first goes the timestamp, then the hostname and then the type, followed    * by all other keys found.    *     * @param keys The input ArrayList of keys to re-arrange.    */
DECL|method|arrangeKeys (ArrayList<String> keys)
specifier|public
specifier|static
name|void
name|arrangeKeys
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|move
argument_list|(
name|keys
argument_list|,
literal|"timestamp"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|move
argument_list|(
name|keys
argument_list|,
literal|"hostname"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|move
argument_list|(
name|keys
argument_list|,
literal|"type"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|move (ArrayList<String> keys, String key, int position)
specifier|private
specifier|static
name|void
name|move
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|,
name|String
name|key
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|int
name|cur
init|=
name|keys
operator|.
name|indexOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur
operator|==
operator|-
literal|1
condition|)
return|return;
name|keys
operator|.
name|set
argument_list|(
name|cur
argument_list|,
name|keys
operator|.
name|get
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|set
argument_list|(
name|position
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if the SerializedRecord is a valid one, i.e., whether    * it represents meaningful metric values.    *     * @return true if the EventRecord is a valid one, false otherwise.    */
DECL|method|isValid ()
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|!
operator|(
literal|"invalid"
operator|.
name|equalsIgnoreCase
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|"hostname"
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|/**    * Creates and returns a string reperssentation of the object    *     * @return a String representing the object    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|retval
init|=
literal|""
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|arrangeKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|fields
operator|.
name|get
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|retval
operator|+=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|":\tnull\n"
expr_stmt|;
else|else
name|retval
operator|+=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|":\t"
operator|+
name|value
operator|+
literal|"\n"
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

