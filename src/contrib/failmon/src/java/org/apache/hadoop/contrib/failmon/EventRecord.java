begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**********************************************************  * Objects of this class represent metrics collected for   * a specific hardware source. Each EventRecord contains a HashMap of   * (key, value) pairs, each of which represents a property of  * the metered value. For instance, when parsing a log file, an  * EventRecord is created for each log entry, which contains   * the hostname and the ip addresses of the node, timestamp of  * the log entry, the actual message etc. Each and every EventRecord  * contains the hostname of the machine on which it was collected,  * its IP address and the time of collection.  *   * The main purpose of this class is to provide a uniform format  * for records collected from various system compontents (logs,  * ifconfig, smartmontools, lm-sensors etc). All metric values are   * converted into this format after they are collected by a  * Monitored object.  *  **********************************************************/
end_comment

begin_class
DECL|class|EventRecord
specifier|public
class|class
name|EventRecord
block|{
DECL|field|fields
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
decl_stmt|;
comment|/**    * Create the EventRecord given the most common properties    * among different metric types.    */
DECL|method|EventRecord (String _hostname, Object [] _ips, Calendar _timestamp, String _type, String _logLevel, String _source, String _message)
specifier|public
name|EventRecord
parameter_list|(
name|String
name|_hostname
parameter_list|,
name|Object
index|[]
name|_ips
parameter_list|,
name|Calendar
name|_timestamp
parameter_list|,
name|String
name|_type
parameter_list|,
name|String
name|_logLevel
parameter_list|,
name|String
name|_source
parameter_list|,
name|String
name|_message
parameter_list|)
block|{
name|fields
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
argument_list|(
literal|"hostname"
argument_list|,
name|_hostname
argument_list|)
expr_stmt|;
name|set
argument_list|(
literal|"ips"
argument_list|,
name|_ips
argument_list|)
expr_stmt|;
name|set
argument_list|(
literal|"timestamp"
argument_list|,
name|_timestamp
argument_list|)
expr_stmt|;
name|set
argument_list|(
literal|"type"
argument_list|,
name|_type
argument_list|)
expr_stmt|;
name|set
argument_list|(
literal|"logLevel"
argument_list|,
name|_logLevel
argument_list|)
expr_stmt|;
name|set
argument_list|(
literal|"source"
argument_list|,
name|_source
argument_list|)
expr_stmt|;
name|set
argument_list|(
literal|"message"
argument_list|,
name|_message
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the EventRecord with no fields other than "invalid" as    * the hostname. This is only used as a dummy.    */
DECL|method|EventRecord ()
specifier|public
name|EventRecord
parameter_list|()
block|{
comment|// creates an invalid record
name|fields
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|fields
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
argument_list|(
literal|"hostname"
argument_list|,
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the HashMap of properties of the EventRecord.    *     * @return a HashMap that contains all properties of the record.    */
DECL|method|getMap ()
specifier|public
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMap
parameter_list|()
block|{
return|return
name|fields
return|;
block|}
comment|/**    * Set the value of a property of the EventRecord.    *     * @param fieldName the name of the property to set    * @param fieldValue the value of the property to set    *     */
DECL|method|set (String fieldName, Object fieldValue)
specifier|public
name|void
name|set
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|fieldValue
parameter_list|)
block|{
if|if
condition|(
name|fieldValue
operator|!=
literal|null
condition|)
name|fields
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the value of a property of the EventRecord.    * If the property with the specific key is not found,    * null is returned.    *     * @param fieldName the name of the property to get.    */
DECL|method|get (String fieldName)
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
comment|/**    * Check if the EventRecord is a valid one, i.e., whether    * it represents meaningful metric values.    *     * @return true if the EventRecord is a valid one, false otherwise.    */
DECL|method|isValid ()
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|!
operator|(
literal|"invalid"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|fields
operator|.
name|get
argument_list|(
literal|"hostname"
argument_list|)
argument_list|)
operator|)
return|;
block|}
comment|/**    * Creates and returns a string representation of the object.    *     * @return a String representation of the object    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|retval
init|=
literal|""
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|fields
operator|.
name|get
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|retval
operator|+=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|":\tnull\n"
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
name|retval
operator|+=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|":\t"
operator|+
name|value
operator|+
literal|"\n"
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Calendar
condition|)
name|retval
operator|+=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|":\t"
operator|+
operator|(
operator|(
name|Calendar
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|InetAddress
index|[]
operator|||
name|value
operator|instanceof
name|String
index|[]
condition|)
block|{
name|retval
operator|+=
literal|"Known IPs:\t"
expr_stmt|;
for|for
control|(
name|InetAddress
name|ip
range|:
operator|(
operator|(
name|InetAddress
index|[]
operator|)
name|value
operator|)
control|)
name|retval
operator|+=
name|ip
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|" "
expr_stmt|;
name|retval
operator|+=
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|retval
operator|+=
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|":\t"
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
block|}
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

