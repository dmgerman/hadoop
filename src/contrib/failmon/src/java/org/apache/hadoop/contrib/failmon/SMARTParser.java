begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**********************************************************  * Objects of this class parse the output of smartmontools to   * gather information about the state of disks in the system. The  * smartmontools utility reads the S.M.A.R.T. attributes from  * the disk devices and reports them to the user. Note that since  * running smartctl requires superuser provileges, one should    * grand sudo privileges to the running user for the command smartctl  * (without a password). Alternatively, one can set up a cron  job that   * periodically dumps the output of smartctl into a user-readable file.  * See the configuration file for details.  *  **********************************************************/
end_comment

begin_class
DECL|class|SMARTParser
specifier|public
class|class
name|SMARTParser
extends|extends
name|ShellParser
block|{
DECL|field|devices
name|String
index|[]
name|devices
decl_stmt|;
comment|/**    * Constructs a SMARTParser and reads the list of disk     * devices to query    */
DECL|method|SMARTParser ()
specifier|public
name|SMARTParser
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|String
name|devicesStr
init|=
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"disks.list"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"skato "
operator|+
name|devicesStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|devicesStr
operator|!=
literal|null
condition|)
name|devices
operator|=
name|devicesStr
operator|.
name|split
argument_list|(
literal|",\\s*"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads and parses the output of smartctl for a specified disk and     * creates an appropriate EventRecord that holds the desirable     * information for it. Since the output of smartctl is different for     * different kinds of disks, we try to identify as many attributes as     * posssible for all known output formats.     *     * @param device the disk device name to query    *     * @return the EventRecord created    */
DECL|method|query (String device)
specifier|public
name|EventRecord
name|query
parameter_list|(
name|String
name|device
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|conf
init|=
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"disks."
operator|+
name|device
operator|+
literal|".source"
argument_list|)
decl_stmt|;
name|CharSequence
name|sb
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
name|sb
operator|=
name|Environment
operator|.
name|runCommandGeneric
argument_list|(
literal|"sudo smartctl --all "
operator|+
name|device
argument_list|)
expr_stmt|;
else|else
name|sb
operator|=
name|Environment
operator|.
name|runCommandGeneric
argument_list|(
literal|"cat "
operator|+
name|conf
argument_list|)
expr_stmt|;
name|EventRecord
name|retval
init|=
operator|new
name|EventRecord
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|,
name|InetAddress
operator|.
name|getAllByName
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|"SMART"
argument_list|,
literal|"Unknown"
argument_list|,
operator|(
name|conf
operator|==
literal|null
condition|?
literal|"sudo smartctl --all "
operator|+
name|device
else|:
literal|"file "
operator|+
name|conf
operator|)
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
comment|// IBM SCSI disks
name|retval
operator|.
name|set
argument_list|(
literal|"model"
argument_list|,
name|findPattern
argument_list|(
literal|"Device\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"serial"
argument_list|,
name|findPattern
argument_list|(
literal|"Serial\\s+Number\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"firmware"
argument_list|,
name|findPattern
argument_list|(
literal|"Firmware\\s+Version\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"capacity"
argument_list|,
name|findPattern
argument_list|(
literal|"User\\s+Capacity\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"status"
argument_list|,
name|findPattern
argument_list|(
literal|"SMART\\s*Health\\s*Status:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"current_temperature"
argument_list|,
name|findPattern
argument_list|(
literal|"Current\\s+Drive\\s+Temperature\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"trip_temperature"
argument_list|,
name|findPattern
argument_list|(
literal|"Drive\\s+Trip\\s+Temperature\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"start_stop_count"
argument_list|,
name|findPattern
argument_list|(
literal|"start\\s+stop\\s+count\\s*:\\s*(\\d*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|var
init|=
block|{
literal|"read"
block|,
literal|"write"
block|,
literal|"verify"
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|var
control|)
block|{
name|retval
operator|.
name|set
argument_list|(
name|s
operator|+
literal|"_ecc_fast"
argument_list|,
name|findPattern
argument_list|(
name|s
operator|+
literal|"\\s*:\\s*(\\d*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
name|s
operator|+
literal|"_ecc_delayed"
argument_list|,
name|findPattern
argument_list|(
name|s
operator|+
literal|"\\s*:\\s*(\\d+\\s+){1}(\\d+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
name|s
operator|+
literal|"_rereads"
argument_list|,
name|findPattern
argument_list|(
name|s
operator|+
literal|"\\s*:\\s*(\\d+\\s+){2}(\\d+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
name|s
operator|+
literal|"_GBs"
argument_list|,
name|findPattern
argument_list|(
name|s
operator|+
literal|"\\s*:\\s*(\\d+\\s+){5}(\\d+.?\\d*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
name|s
operator|+
literal|"_uncorrected"
argument_list|,
name|findPattern
argument_list|(
name|s
operator|+
literal|"\\s*:\\s*(\\d+\\s+){5}(\\d+.?\\d*){1}\\s+(\\d+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Hitachi IDE, SATA
name|retval
operator|.
name|set
argument_list|(
literal|"model"
argument_list|,
name|findPattern
argument_list|(
literal|"Device\\s*Model\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"serial"
argument_list|,
name|findPattern
argument_list|(
literal|"Serial\\s+number\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"protocol"
argument_list|,
name|findPattern
argument_list|(
literal|"Transport\\s+protocol\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"status"
argument_list|,
literal|"PASSED"
operator|.
name|equalsIgnoreCase
argument_list|(
name|findPattern
argument_list|(
literal|"test\\s*result\\s*:\\s*(.*)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
condition|?
literal|"OK"
else|:
literal|"FAILED"
argument_list|)
expr_stmt|;
name|readColumns
argument_list|(
name|retval
argument_list|,
name|sb
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**    * Reads attributes in the following format:    *     * ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE    * 3 Spin_Up_Time             0x0027   180   177   063    Pre-fail  Always       -       10265    * 4 Start_Stop_Count         0x0032   253   253   000    Old_age   Always       -       34    * 5 Reallocated_Sector_Ct    0x0033   253   253   063    Pre-fail  Always       -       0    * 6 Read_Channel_Margin      0x0001   253   253   100    Pre-fail  Offline      -       0    * 7 Seek_Error_Rate          0x000a   253   252   000    Old_age   Always       -       0    * 8 Seek_Time_Performance    0x0027   250   224   187    Pre-fail  Always       -       53894    * 9 Power_On_Minutes         0x0032   210   210   000    Old_age   Always       -       878h+00m    * 10 Spin_Retry_Count        0x002b   253   252   157    Pre-fail  Always       -       0    * 11 Calibration_Retry_Count 0x002b   253   252   223    Pre-fail  Always       -       0    * 12 Power_Cycle_Count       0x0032   253   253   000    Old_age   Always       -       49    * 192 PowerOff_Retract_Count 0x0032   253   253   000    Old_age   Always       -       0    * 193 Load_Cycle_Count       0x0032   253   253   000    Old_age   Always       -       0    * 194 Temperature_Celsius    0x0032   037   253   000    Old_age   Always       -       37    * 195 Hardware_ECC_Recovered 0x000a   253   252   000    Old_age   Always       -       2645    *     * This format is mostly found in IDE and SATA disks.    *     * @param er the EventRecord in which to store attributes found    * @param sb the text to parse    *     * @return the EventRecord in which new attributes are stored.    */
DECL|method|readColumns (EventRecord er, CharSequence sb)
specifier|private
name|EventRecord
name|readColumns
parameter_list|(
name|EventRecord
name|er
parameter_list|,
name|CharSequence
name|sb
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s{0,2}(\\d{1,3}\\s+.*)$"
argument_list|,
name|Pattern
operator|.
name|MULTILINE
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|sb
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
index|[]
name|tokens
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
comment|// check if this attribute is a failed one
if|if
condition|(
operator|!
name|tokens
index|[
literal|8
index|]
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
name|failed
operator|=
literal|true
expr_stmt|;
name|er
operator|.
name|set
argument_list|(
name|tokens
index|[
literal|1
index|]
operator|.
name|toLowerCase
argument_list|()
argument_list|,
operator|(
name|failed
condition|?
literal|"FAILED:"
else|:
literal|""
operator|)
operator|+
name|tokens
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|er
return|;
block|}
comment|/**    * Invokes query() to do the parsing and handles parsing errors for     * each one of the disks specified in the configuration.     *     * @return an array of EventRecords that holds one element that represents    * the current state of the disk devices.    */
DECL|method|monitor ()
specifier|public
name|EventRecord
index|[]
name|monitor
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|EventRecord
argument_list|>
name|recs
init|=
operator|new
name|ArrayList
argument_list|<
name|EventRecord
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|device
range|:
name|devices
control|)
block|{
try|try
block|{
name|recs
operator|.
name|add
argument_list|(
name|query
argument_list|(
name|device
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|EventRecord
index|[]
name|T
init|=
operator|new
name|EventRecord
index|[
name|recs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|recs
operator|.
name|toArray
argument_list|(
name|T
argument_list|)
return|;
block|}
comment|/**    * Return a String with information about this class    *     * @return A String describing this class    */
DECL|method|getInfo ()
specifier|public
name|String
name|getInfo
parameter_list|()
block|{
name|String
name|retval
init|=
literal|"S.M.A.R.T. disk attributes parser for disks "
decl_stmt|;
for|for
control|(
name|String
name|device
range|:
name|devices
control|)
name|retval
operator|+=
name|device
operator|+
literal|" "
expr_stmt|;
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

