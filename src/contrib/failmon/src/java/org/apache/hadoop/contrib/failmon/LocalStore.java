begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CheckedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**********************************************************  * This class takes care of the temporary local storage of   * gathered metrics before they get uploaded into HDFS. It writes   * Serialized Records as lines in a temporary file and then   * compresses and uploads it into HDFS.  *   **********************************************************/
end_comment

begin_class
DECL|class|LocalStore
specifier|public
class|class
name|LocalStore
block|{
DECL|field|FIELD_SEPARATOR
specifier|public
specifier|final
specifier|static
name|char
name|FIELD_SEPARATOR
init|=
literal|'|'
decl_stmt|;
DECL|field|RECORD_SEPARATOR
specifier|public
specifier|final
specifier|static
name|char
name|RECORD_SEPARATOR
init|=
literal|'\n'
decl_stmt|;
DECL|field|COMPRESSION_SUFFIX
specifier|public
specifier|final
specifier|static
name|String
name|COMPRESSION_SUFFIX
init|=
literal|".zip"
decl_stmt|;
DECL|field|UPLOAD_INTERVAL
specifier|public
specifier|final
specifier|static
name|int
name|UPLOAD_INTERVAL
init|=
literal|600
decl_stmt|;
DECL|field|filename
name|String
name|filename
decl_stmt|;
DECL|field|hdfsDir
name|String
name|hdfsDir
decl_stmt|;
DECL|field|compress
name|boolean
name|compress
decl_stmt|;
DECL|field|fw
name|FileWriter
name|fw
decl_stmt|;
DECL|field|writer
name|BufferedWriter
name|writer
decl_stmt|;
comment|/**    * Create an instance of the class and read the configuration    * file to determine some output parameters. Then, initiate the     * structured needed for the buffered I/O (so that smal appends    * can be handled efficiently).    *     */
DECL|method|LocalStore ()
specifier|public
name|LocalStore
parameter_list|()
block|{
comment|// determine the local output file name
if|if
condition|(
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"local.tmp.filename"
argument_list|)
operator|==
literal|null
condition|)
name|Environment
operator|.
name|setProperty
argument_list|(
literal|"local.tmp.filename"
argument_list|,
literal|"failmon.dat"
argument_list|)
expr_stmt|;
comment|// local.tmp.dir has been set by the Executor
if|if
condition|(
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"local.tmp.dir"
argument_list|)
operator|==
literal|null
condition|)
name|Environment
operator|.
name|setProperty
argument_list|(
literal|"local.tmp.dir"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
expr_stmt|;
name|filename
operator|=
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"local.tmp.dir"
argument_list|)
operator|+
literal|"/"
operator|+
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"local.tmp.filename"
argument_list|)
expr_stmt|;
comment|// determine the upload location
name|hdfsDir
operator|=
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"hdfs.upload.dir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hdfsDir
operator|==
literal|null
condition|)
name|hdfsDir
operator|=
literal|"/failmon"
expr_stmt|;
comment|// determine if compression is enabled
name|compress
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"false"
operator|.
name|equalsIgnoreCase
argument_list|(
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"local.tmp.compression"
argument_list|)
argument_list|)
condition|)
name|compress
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|fw
operator|=
operator|new
name|FileWriter
argument_list|(
name|filename
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|fw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Insert an EventRecord to the local storage, after it    * gets serialized and anonymized.    *     * @param er the EventRecord to be inserted    */
DECL|method|insert (EventRecord er)
specifier|public
name|void
name|insert
parameter_list|(
name|EventRecord
name|er
parameter_list|)
block|{
name|SerializedRecord
name|sr
init|=
operator|new
name|SerializedRecord
argument_list|(
name|er
argument_list|)
decl_stmt|;
try|try
block|{
name|Anonymizer
operator|.
name|anonymize
argument_list|(
name|sr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|append
argument_list|(
name|sr
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert an array of EventRecords to the local storage, after they    * get serialized and anonymized.    *     * @param ers the array of EventRecords to be inserted    */
DECL|method|insert (EventRecord[] ers)
specifier|public
name|void
name|insert
parameter_list|(
name|EventRecord
index|[]
name|ers
parameter_list|)
block|{
for|for
control|(
name|EventRecord
name|er
range|:
name|ers
control|)
name|insert
argument_list|(
name|er
argument_list|)
expr_stmt|;
block|}
DECL|method|append (SerializedRecord sr)
specifier|private
name|void
name|append
parameter_list|(
name|SerializedRecord
name|sr
parameter_list|)
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|pack
argument_list|(
name|sr
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|RECORD_SEPARATOR
argument_list|)
expr_stmt|;
comment|// writer.flush();
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Pack a SerializedRecord into an array of bytes    *     * @param sr the SerializedRecord to be packed    */
DECL|method|pack (SerializedRecord sr)
specifier|public
specifier|static
name|StringBuffer
name|pack
parameter_list|(
name|SerializedRecord
name|sr
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|sr
operator|.
name|fields
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sr
operator|.
name|isValid
argument_list|()
condition|)
name|SerializedRecord
operator|.
name|arrangeKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|sr
operator|.
name|fields
operator|.
name|get
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|keys
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|":"
operator|+
name|value
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FIELD_SEPARATOR
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
return|;
block|}
comment|/**    * Upload the local file store into HDFS, after it     * compressing it. Then a new local file is created     * as a temporary record store.    *     */
DECL|method|upload ()
specifier|public
name|void
name|upload
parameter_list|()
block|{
try|try
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|compress
condition|)
name|zipCompress
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|String
name|remoteName
init|=
literal|"failmon-"
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"anonymizer.hash.hostnames"
argument_list|)
argument_list|)
condition|)
name|remoteName
operator|+=
name|Anonymizer
operator|.
name|getMD5Hash
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|)
operator|+
literal|"-"
expr_stmt|;
else|else
name|remoteName
operator|+=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
operator|+
literal|"-"
expr_stmt|;
name|remoteName
operator|+=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
comment|//.toString();
if|if
condition|(
name|compress
condition|)
name|copyToHDFS
argument_list|(
name|filename
operator|+
name|COMPRESSION_SUFFIX
argument_list|,
name|hdfsDir
operator|+
literal|"/"
operator|+
name|remoteName
operator|+
name|COMPRESSION_SUFFIX
argument_list|)
expr_stmt|;
else|else
name|copyToHDFS
argument_list|(
name|filename
argument_list|,
name|hdfsDir
operator|+
literal|"/"
operator|+
name|remoteName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// delete and re-open
try|try
block|{
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
name|fw
operator|=
operator|new
name|FileWriter
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|BufferedWriter
argument_list|(
name|fw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Compress a text file using the ZIP compressing algorithm.    *     * @param filename the path to the file to be compressed    */
DECL|method|zipCompress (String filename)
specifier|public
specifier|static
name|void
name|zipCompress
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|filename
operator|+
name|COMPRESSION_SUFFIX
argument_list|)
decl_stmt|;
name|CheckedOutputStream
name|csum
init|=
operator|new
name|CheckedOutputStream
argument_list|(
name|fos
argument_list|,
operator|new
name|CRC32
argument_list|()
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|out
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|csum
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|setComment
argument_list|(
literal|"Failmon records."
argument_list|)
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|filename
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
operator|new
name|File
argument_list|(
name|filename
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|.
name|finish
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Copy a local file to HDFS    *     * @param localFile the filename of the local file    * @param hdfsFile the HDFS filename to copy to    */
DECL|method|copyToHDFS (String localFile, String hdfsFile)
specifier|public
specifier|static
name|void
name|copyToHDFS
parameter_list|(
name|String
name|localFile
parameter_list|,
name|String
name|hdfsFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|hadoopConfPath
decl_stmt|;
if|if
condition|(
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"hadoop.conf.path"
argument_list|)
operator|==
literal|null
condition|)
name|hadoopConfPath
operator|=
literal|"../../../conf"
expr_stmt|;
else|else
name|hadoopConfPath
operator|=
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"hadoop.conf.path"
argument_list|)
expr_stmt|;
comment|// Read the configuration for the Hadoop environment
name|Configuration
name|hadoopConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|hadoopConf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|hadoopConfPath
operator|+
literal|"/hadoop-default.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|hadoopConf
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|hadoopConfPath
operator|+
literal|"/hadoop-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// System.out.println(hadoopConf.get("hadoop.tmp.dir"));
comment|// System.out.println(hadoopConf.get("fs.default.name"));
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|hadoopConf
argument_list|)
decl_stmt|;
comment|// HadoopDFS deals with Path
name|Path
name|inFile
init|=
operator|new
name|Path
argument_list|(
literal|"file://"
operator|+
name|localFile
argument_list|)
decl_stmt|;
name|Path
name|outFile
init|=
operator|new
name|Path
argument_list|(
name|hadoopConf
operator|.
name|get
argument_list|(
literal|"fs.default.name"
argument_list|)
operator|+
name|hdfsFile
argument_list|)
decl_stmt|;
comment|// Read from and write to new file
name|Environment
operator|.
name|logInfo
argument_list|(
literal|"Uploading to HDFS (file "
operator|+
name|outFile
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
name|inFile
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * Close the temporary local file    *     */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

