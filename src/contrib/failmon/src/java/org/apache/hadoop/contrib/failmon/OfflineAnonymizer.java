begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_comment
comment|/**********************************************************  * This class can be used to anonymize logs independently of  * Hadoop and the Executor. It parses the specified log file to  * create log records for it and then passes them to the Anonymizer.  * After they are anonymized, they are written to a local file,  * which is then compressed and stored locally.  *   **********************************************************/
end_comment

begin_class
DECL|class|OfflineAnonymizer
specifier|public
class|class
name|OfflineAnonymizer
block|{
DECL|enum|LogType
specifier|public
enum|enum
name|LogType
block|{
DECL|enumConstant|HADOOP
DECL|enumConstant|SYSTEM
name|HADOOP
block|,
name|SYSTEM
block|}
empty_stmt|;
DECL|field|logtype
name|LogType
name|logtype
decl_stmt|;
DECL|field|logfile
name|File
name|logfile
decl_stmt|;
DECL|field|parser
name|LogParser
name|parser
decl_stmt|;
comment|/**    * Creates an OfflineAnonymizer for a specific log file.    *     * @param logtype the type of the log file. This can either be    * LogFile.HADOOP or LogFile.SYSTEM    * @param filename the path to the log file    *     */
DECL|method|OfflineAnonymizer (LogType logtype, String filename)
specifier|public
name|OfflineAnonymizer
parameter_list|(
name|LogType
name|logtype
parameter_list|,
name|String
name|filename
parameter_list|)
block|{
name|logfile
operator|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|logfile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Input file does not exist!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logtype
operator|==
name|LogType
operator|.
name|HADOOP
condition|)
name|parser
operator|=
operator|new
name|HadoopLogParser
argument_list|(
name|filename
argument_list|)
expr_stmt|;
else|else
name|parser
operator|=
operator|new
name|SystemLogParser
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs anonymization for the log file. Log entries are    * read one by one and EventRecords are created, which are then    * anonymized and written to the output.    *     */
DECL|method|anonymize ()
specifier|public
name|void
name|anonymize
parameter_list|()
throws|throws
name|Exception
block|{
name|EventRecord
name|er
init|=
literal|null
decl_stmt|;
name|SerializedRecord
name|sr
init|=
literal|null
decl_stmt|;
name|BufferedWriter
name|bfw
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|logfile
operator|.
name|getName
argument_list|()
operator|+
literal|".anonymized"
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Anonymizing log records..."
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|er
operator|=
name|parser
operator|.
name|getNext
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|er
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|sr
operator|=
operator|new
name|SerializedRecord
argument_list|(
name|er
argument_list|)
expr_stmt|;
name|Anonymizer
operator|.
name|anonymize
argument_list|(
name|sr
argument_list|)
expr_stmt|;
name|bfw
operator|.
name|write
argument_list|(
name|LocalStore
operator|.
name|pack
argument_list|(
name|sr
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bfw
operator|.
name|write
argument_list|(
name|LocalStore
operator|.
name|RECORD_SEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
name|bfw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|bfw
operator|.
name|close
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Anonymized log records written to "
operator|+
name|logfile
operator|.
name|getName
argument_list|()
operator|+
literal|".anonymized"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compressing output file..."
argument_list|)
expr_stmt|;
name|LocalStore
operator|.
name|zipCompress
argument_list|(
name|logfile
operator|.
name|getName
argument_list|()
operator|+
literal|".anonymized"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compressed output file written to "
operator|+
name|logfile
operator|.
name|getName
argument_list|()
operator|+
literal|".anonymized"
operator|+
name|LocalStore
operator|.
name|COMPRESSION_SUFFIX
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: OfflineAnonymizer<log_type><filename>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"where<log_type> is either \"hadoop\" or \"system\" and<filename> is the path to the log file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|LogType
name|logtype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-hadoop"
argument_list|)
condition|)
name|logtype
operator|=
name|LogType
operator|.
name|HADOOP
expr_stmt|;
elseif|else
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"-system"
argument_list|)
condition|)
name|logtype
operator|=
name|LogType
operator|.
name|SYSTEM
expr_stmt|;
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid first argument."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|OfflineAnonymizer
name|oa
init|=
operator|new
name|OfflineAnonymizer
argument_list|(
name|logtype
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|oa
operator|.
name|anonymize
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
block|}
end_class

end_unit

