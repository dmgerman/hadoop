begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|PropertyConfigurator
import|;
end_import

begin_comment
comment|/**********************************************************  * This class provides various methods for interaction with  * the configuration and the operating system environment. Also  * provides some helper methods for use by other classes in  * the package.  **********************************************************/
end_comment

begin_class
DECL|class|Environment
specifier|public
class|class
name|Environment
block|{
DECL|field|DEFAULT_LOG_INTERVAL
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_LOG_INTERVAL
init|=
literal|3600
decl_stmt|;
DECL|field|DEFAULT_POLL_INTERVAL
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_POLL_INTERVAL
init|=
literal|360
decl_stmt|;
DECL|field|MIN_INTERVAL
specifier|public
specifier|static
name|int
name|MIN_INTERVAL
init|=
literal|5
decl_stmt|;
DECL|field|MAX_OUTPUT_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|MAX_OUTPUT_LENGTH
init|=
literal|51200
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
name|Log
name|LOG
decl_stmt|;
DECL|field|fmProperties
specifier|static
name|Properties
name|fmProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
DECL|field|superuser
specifier|static
name|boolean
name|superuser
init|=
literal|false
decl_stmt|;
DECL|field|ready
specifier|static
name|boolean
name|ready
init|=
literal|false
decl_stmt|;
comment|/**    * Initializes structures needed by other methods. Also determines    * whether the executing user has superuser privileges.     *      */
DECL|method|prepare (String fname)
specifier|public
specifier|static
name|void
name|prepare
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"Linux"
operator|.
name|equalsIgnoreCase
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Linux system required for FailMon. Exiting..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j.configuration"
argument_list|,
literal|"conf/log4j.properties"
argument_list|)
expr_stmt|;
name|PropertyConfigurator
operator|.
name|configure
argument_list|(
literal|"conf/log4j.properties"
argument_list|)
expr_stmt|;
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.contrib.failmon"
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
literal|"********** FailMon started ***********"
argument_list|)
expr_stmt|;
comment|// read parseState file
name|PersistentState
operator|.
name|readState
argument_list|(
literal|"conf/parsing.state"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileInputStream
name|propFile
init|=
operator|new
name|FileInputStream
argument_list|(
name|fname
argument_list|)
decl_stmt|;
name|fmProperties
operator|.
name|load
argument_list|(
name|propFile
argument_list|)
expr_stmt|;
name|propFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ready
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|String
name|sudo_prompt
init|=
literal|"passwd_needed:"
decl_stmt|;
name|String
name|echo_txt
init|=
literal|"access_ok"
decl_stmt|;
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
literal|"sudo -S -p "
operator|+
name|sudo_prompt
operator|+
literal|" echo "
operator|+
name|echo_txt
argument_list|)
decl_stmt|;
name|InputStream
name|inps
init|=
name|p
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|InputStream
name|errs
init|=
name|p
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
while|while
condition|(
name|inps
operator|.
name|available
argument_list|()
operator|<
name|echo_txt
operator|.
name|length
argument_list|()
operator|&&
name|errs
operator|.
name|available
argument_list|()
operator|<
name|sudo_prompt
operator|.
name|length
argument_list|()
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buf
decl_stmt|;
name|String
name|s
decl_stmt|;
if|if
condition|(
name|inps
operator|.
name|available
argument_list|()
operator|>=
name|echo_txt
operator|.
name|length
argument_list|()
condition|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|inps
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|inps
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|echo_txt
argument_list|)
condition|)
block|{
name|superuser
operator|=
literal|true
expr_stmt|;
name|logInfo
argument_list|(
literal|"Superuser privileges found!"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no need to read errs
name|superuser
operator|=
literal|false
expr_stmt|;
name|logInfo
argument_list|(
literal|"Superuser privileges not found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Fetches the value of a property from the configuration file.    *     *  @param key the name of the property    *      *  @return the value of the property, if it exists and    *  null otherwise    */
DECL|method|getProperty (String key)
specifier|public
specifier|static
name|String
name|getProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ready
condition|)
name|prepare
argument_list|(
literal|"conf/failmon.properties"
argument_list|)
expr_stmt|;
return|return
name|fmProperties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * Sets the value of a property inthe configuration file.    *     *  @param key the name of the property    *  @param value the new value for the property    *      */
DECL|method|setProperty (String key, String value)
specifier|public
specifier|static
name|void
name|setProperty
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|fmProperties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Scans the configuration file to determine which monitoring    * utilities are available in the system. For each one of them, a    * job is created. All such jobs are scheduled and executed by    * Executor.    *     * @return an ArrayList that contains jobs to be executed by theExecutor.     */
DECL|method|getJobs ()
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|MonitorJob
argument_list|>
name|getJobs
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|MonitorJob
argument_list|>
name|monitors
init|=
operator|new
name|ArrayList
argument_list|<
name|MonitorJob
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|timeInt
init|=
literal|0
decl_stmt|;
comment|// for Hadoop Log parsing
name|String
index|[]
name|fnames_r
init|=
name|getProperty
argument_list|(
literal|"log.hadoop.filenames"
argument_list|)
operator|.
name|split
argument_list|(
literal|",\\s*"
argument_list|)
decl_stmt|;
name|String
name|tmp
init|=
name|getProperty
argument_list|(
literal|"log.hadoop.enabled"
argument_list|)
decl_stmt|;
name|String
index|[]
name|fnames
init|=
name|expandDirs
argument_list|(
name|fnames_r
argument_list|,
literal|".*(.log).*"
argument_list|)
decl_stmt|;
name|timeInt
operator|=
name|setValue
argument_list|(
literal|"log.hadoop.interval"
argument_list|,
name|DEFAULT_LOG_INTERVAL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tmp
argument_list|)
operator|&&
name|fnames
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|fname
range|:
name|fnames
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|monitors
operator|.
name|add
argument_list|(
operator|new
name|MonitorJob
argument_list|(
operator|new
name|HadoopLogParser
argument_list|(
name|fname
argument_list|)
argument_list|,
literal|"hadoopLog"
argument_list|,
name|timeInt
argument_list|)
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
literal|"Created Monitor for Hadoop log file: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
name|logInfo
argument_list|(
literal|"Skipping Hadoop log file "
operator|+
name|fname
operator|+
literal|" (file not found)"
argument_list|)
expr_stmt|;
else|else
name|logInfo
argument_list|(
literal|"Skipping Hadoop log file "
operator|+
name|fname
operator|+
literal|" (permission denied)"
argument_list|)
expr_stmt|;
block|}
comment|// for System Log parsing
name|fnames_r
operator|=
name|getProperty
argument_list|(
literal|"log.system.filenames"
argument_list|)
operator|.
name|split
argument_list|(
literal|",\\s*"
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|getProperty
argument_list|(
literal|"log.system.enabled"
argument_list|)
expr_stmt|;
name|fnames
operator|=
name|expandDirs
argument_list|(
name|fnames_r
argument_list|,
literal|".*(messages).*"
argument_list|)
expr_stmt|;
name|timeInt
operator|=
name|setValue
argument_list|(
literal|"log.system.interval"
argument_list|,
name|DEFAULT_LOG_INTERVAL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tmp
argument_list|)
condition|)
for|for
control|(
name|String
name|fname
range|:
name|fnames
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|monitors
operator|.
name|add
argument_list|(
operator|new
name|MonitorJob
argument_list|(
operator|new
name|SystemLogParser
argument_list|(
name|fname
argument_list|)
argument_list|,
literal|"systemLog"
argument_list|,
name|timeInt
argument_list|)
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
literal|"Created Monitor for System log file: "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
name|logInfo
argument_list|(
literal|"Skipping system log file "
operator|+
name|fname
operator|+
literal|" (file not found)"
argument_list|)
expr_stmt|;
else|else
name|logInfo
argument_list|(
literal|"Skipping system log file "
operator|+
name|fname
operator|+
literal|" (permission denied)"
argument_list|)
expr_stmt|;
block|}
comment|// for network interfaces
name|tmp
operator|=
name|getProperty
argument_list|(
literal|"nic.enabled"
argument_list|)
expr_stmt|;
name|timeInt
operator|=
name|setValue
argument_list|(
literal|"nics.interval"
argument_list|,
name|DEFAULT_POLL_INTERVAL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|monitors
operator|.
name|add
argument_list|(
operator|new
name|MonitorJob
argument_list|(
operator|new
name|NICParser
argument_list|()
argument_list|,
literal|"nics"
argument_list|,
name|timeInt
argument_list|)
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
literal|"Created Monitor for NICs"
argument_list|)
expr_stmt|;
block|}
comment|// for cpu
name|tmp
operator|=
name|getProperty
argument_list|(
literal|"cpu.enabled"
argument_list|)
expr_stmt|;
name|timeInt
operator|=
name|setValue
argument_list|(
literal|"cpu.interval"
argument_list|,
name|DEFAULT_POLL_INTERVAL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|monitors
operator|.
name|add
argument_list|(
operator|new
name|MonitorJob
argument_list|(
operator|new
name|CPUParser
argument_list|()
argument_list|,
literal|"cpu"
argument_list|,
name|timeInt
argument_list|)
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
literal|"Created Monitor for CPUs"
argument_list|)
expr_stmt|;
block|}
comment|// for disks
name|tmp
operator|=
name|getProperty
argument_list|(
literal|"disks.enabled"
argument_list|)
expr_stmt|;
name|timeInt
operator|=
name|setValue
argument_list|(
literal|"disks.interval"
argument_list|,
name|DEFAULT_POLL_INTERVAL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
comment|// check privileges if a disk with no disks./dev/xxx/.source is found
name|boolean
name|smart_present
init|=
name|checkExistence
argument_list|(
literal|"smartctl"
argument_list|)
decl_stmt|;
name|int
name|disks_ok
init|=
literal|0
decl_stmt|;
name|String
name|devicesStr
init|=
name|getProperty
argument_list|(
literal|"disks.list"
argument_list|)
decl_stmt|;
name|String
index|[]
name|devices
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|devicesStr
operator|!=
literal|null
condition|)
name|devices
operator|=
name|devicesStr
operator|.
name|split
argument_list|(
literal|",\\s*"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|devices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|file_present
init|=
literal|false
decl_stmt|;
name|boolean
name|disk_present
init|=
literal|false
decl_stmt|;
name|String
name|fileloc
init|=
name|getProperty
argument_list|(
literal|"disks."
operator|+
name|devices
index|[
name|i
index|]
operator|+
literal|".source"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileloc
operator|!=
literal|null
operator|&&
name|fileloc
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
condition|)
name|file_present
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|file_present
condition|)
if|if
condition|(
name|superuser
condition|)
block|{
name|StringBuffer
name|sb
init|=
name|runCommand
argument_list|(
literal|"sudo smartctl -i "
operator|+
name|devices
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|String
name|patternStr
init|=
literal|"[(failed)(device not supported)]"
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|patternStr
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|(
literal|0
argument_list|)
condition|)
name|disk_present
operator|=
literal|false
expr_stmt|;
else|else
name|disk_present
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|file_present
operator|||
operator|(
name|disk_present
operator|&&
name|smart_present
operator|)
condition|)
block|{
name|disks_ok
operator|++
expr_stmt|;
block|}
else|else
name|devices
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
comment|// now remove disks that dont exist
name|StringBuffer
name|resetSB
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|devices
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|resetSB
operator|.
name|append
argument_list|(
name|devices
index|[
name|j
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|devices
index|[
name|j
index|]
operator|+
literal|", "
argument_list|)
expr_stmt|;
if|if
condition|(
name|devices
index|[
name|j
index|]
operator|!=
literal|null
condition|)
name|logInfo
argument_list|(
literal|"Found S.M.A.R.T. attributes for disk "
operator|+
name|devices
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
comment|// fix the property
if|if
condition|(
name|resetSB
operator|.
name|length
argument_list|()
operator|>=
literal|2
condition|)
name|setProperty
argument_list|(
literal|"disks.list"
argument_list|,
name|resetSB
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|resetSB
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|disks_ok
operator|>
literal|0
condition|)
block|{
name|monitors
operator|.
name|add
argument_list|(
operator|new
name|MonitorJob
argument_list|(
operator|new
name|SMARTParser
argument_list|()
argument_list|,
literal|"disks"
argument_list|,
name|timeInt
argument_list|)
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
literal|"Created Monitor for S.M.A.R.T disk attributes"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for lm-sensors
name|tmp
operator|=
name|getProperty
argument_list|(
literal|"sensors.enabled"
argument_list|)
expr_stmt|;
name|timeInt
operator|=
name|setValue
argument_list|(
literal|"sensors.interval"
argument_list|,
name|DEFAULT_POLL_INTERVAL
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tmp
argument_list|)
operator|&&
name|checkExistence
argument_list|(
literal|"sensors"
argument_list|)
condition|)
block|{
name|monitors
operator|.
name|add
argument_list|(
operator|new
name|MonitorJob
argument_list|(
operator|new
name|SensorsParser
argument_list|()
argument_list|,
literal|"sensors"
argument_list|,
name|timeInt
argument_list|)
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
literal|"Created Monitor for lm-sensors output"
argument_list|)
expr_stmt|;
block|}
return|return
name|monitors
return|;
block|}
comment|/**    * Determines the minimum interval at which the executor thread    * needs to wake upto execute jobs. Essentially, this is interval     * equals the GCD of intervals of all scheduled jobs.     *     *  @param monitors the list of scheduled jobs    *      *  @return the minimum interval between two scheduled jobs    */
DECL|method|getInterval (ArrayList<MonitorJob> monitors)
specifier|public
specifier|static
name|int
name|getInterval
parameter_list|(
name|ArrayList
argument_list|<
name|MonitorJob
argument_list|>
name|monitors
parameter_list|)
block|{
name|String
name|tmp
init|=
name|getProperty
argument_list|(
literal|"executor.interval.min"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
name|MIN_INTERVAL
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
name|int
index|[]
name|monIntervals
init|=
operator|new
name|int
index|[
name|monitors
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|monitors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|monIntervals
index|[
name|i
index|]
operator|=
name|monitors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|interval
expr_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|MIN_INTERVAL
argument_list|,
name|gcd
argument_list|(
name|monIntervals
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Checks whether a specific shell command is available    * in the system.     *     *  @param cmd the command to check against    *    *  @return true, if the command is availble, false otherwise    */
DECL|method|checkExistence (String cmd)
specifier|public
specifier|static
name|boolean
name|checkExistence
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
name|runCommand
argument_list|(
literal|"which "
operator|+
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**    * Runs a shell command in the system and provides a StringBuffer    * with the output of the command.    *     *  @param cmd an array of string that form the command to run     *      *  @return a StringBuffer that contains the output of the command     */
DECL|method|runCommand (String[] cmd)
specifier|public
specifier|static
name|StringBuffer
name|runCommand
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|)
block|{
name|StringBuffer
name|retval
init|=
operator|new
name|StringBuffer
argument_list|(
name|MAX_OUTPUT_LENGTH
argument_list|)
decl_stmt|;
name|Process
name|p
decl_stmt|;
try|try
block|{
name|p
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|InputStream
name|tmp
init|=
name|p
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|tmp
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
name|retval
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
comment|/**    * Runs a shell command in the system and provides a StringBuffer    * with the output of the command.    *     *  @param cmd the command to run     *      *  @return a StringBuffer that contains the output of the command     */
DECL|method|runCommand (String cmd)
specifier|public
specifier|static
name|StringBuffer
name|runCommand
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
name|runCommand
argument_list|(
name|cmd
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Determines the greatest common divisor (GCD) of two integers.    *     *  @param m the first integer    *  @param n the second integer    *      *  @return the greatest common divisor of m and n    */
DECL|method|gcd (int m, int n)
specifier|public
specifier|static
name|int
name|gcd
parameter_list|(
name|int
name|m
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|m
operator|==
literal|0
operator|&&
name|n
operator|==
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|m
operator|<
name|n
condition|)
block|{
name|int
name|t
init|=
name|m
decl_stmt|;
name|m
operator|=
name|n
expr_stmt|;
name|n
operator|=
name|t
expr_stmt|;
block|}
name|int
name|r
init|=
name|m
operator|%
name|n
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|0
condition|)
block|{
return|return
name|n
return|;
block|}
else|else
block|{
return|return
name|gcd
argument_list|(
name|n
argument_list|,
name|r
argument_list|)
return|;
block|}
block|}
comment|/**    * Determines the greatest common divisor (GCD) of a list    * of integers.    *     *  @param numbers the list of integers to process    *      *  @return the greatest common divisor of all numbers    */
DECL|method|gcd (int[] numbers)
specifier|public
specifier|static
name|int
name|gcd
parameter_list|(
name|int
index|[]
name|numbers
parameter_list|)
block|{
if|if
condition|(
name|numbers
operator|.
name|length
operator|==
literal|1
condition|)
return|return
name|numbers
index|[
literal|0
index|]
return|;
name|int
name|g
init|=
name|gcd
argument_list|(
name|numbers
index|[
literal|0
index|]
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|numbers
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|g
operator|=
name|gcd
argument_list|(
name|g
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
DECL|method|expandDirs (String [] input, String patternStr)
specifier|private
specifier|static
name|String
index|[]
name|expandDirs
parameter_list|(
name|String
index|[]
name|input
parameter_list|,
name|String
name|patternStr
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fnames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|patternStr
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
decl_stmt|;
name|File
name|f
decl_stmt|;
for|for
control|(
name|String
name|fname
range|:
name|input
control|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|fname
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// add all matching files
name|File
index|[]
name|fcs
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|fc
range|:
name|fcs
control|)
block|{
name|matcher
operator|=
name|pattern
operator|.
name|matcher
argument_list|(
name|fc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|find
argument_list|()
operator|&&
name|fc
operator|.
name|isFile
argument_list|()
condition|)
name|fnames
operator|.
name|add
argument_list|(
name|fc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// normal file, just add to output
name|fnames
operator|.
name|add
argument_list|(
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fnames
operator|.
name|toArray
argument_list|(
name|input
argument_list|)
return|;
block|}
DECL|method|setValue (String propname, int defaultValue)
specifier|private
specifier|static
name|int
name|setValue
parameter_list|(
name|String
name|propname
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|v
init|=
name|getProperty
argument_list|(
name|propname
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
condition|)
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
return|;
else|else
return|return
name|defaultValue
return|;
block|}
DECL|method|logInfo (String str)
specifier|public
specifier|static
name|void
name|logInfo
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

