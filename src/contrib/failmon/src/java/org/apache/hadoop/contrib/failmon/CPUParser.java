begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_comment
comment|/**********************************************************  * Objects of this class parse the /proc/cpuinfo file to   * gather information about present processors in the system.  *  **********************************************************/
end_comment

begin_class
DECL|class|CPUParser
specifier|public
class|class
name|CPUParser
extends|extends
name|ShellParser
block|{
comment|/**   * Constructs a CPUParser   */
DECL|method|CPUParser ()
specifier|public
name|CPUParser
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Reads and parses /proc/cpuinfo and creates an appropriate     * EventRecord that holds the desirable information.    *     * @param s unused parameter    *     * @return the EventRecord created    */
DECL|method|query (String s)
specifier|public
name|EventRecord
name|query
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
name|Environment
operator|.
name|runCommand
argument_list|(
literal|"cat /proc/cpuinfo"
argument_list|)
decl_stmt|;
name|EventRecord
name|retval
init|=
operator|new
name|EventRecord
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|,
name|InetAddress
operator|.
name|getAllByName
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
argument_list|)
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|"CPU"
argument_list|,
literal|"Unknown"
argument_list|,
literal|"CPU"
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"processors"
argument_list|,
name|findAll
argument_list|(
literal|"\\s*processor\\s*:\\s*(\\d+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"model name"
argument_list|,
name|findPattern
argument_list|(
literal|"\\s*model name\\s*:\\s*(.+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"frequency"
argument_list|,
name|findAll
argument_list|(
literal|"\\s*cpu\\s*MHz\\s*:\\s*(\\d+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"physical id"
argument_list|,
name|findAll
argument_list|(
literal|"\\s*physical\\s*id\\s*:\\s*(\\d+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|retval
operator|.
name|set
argument_list|(
literal|"core id"
argument_list|,
name|findAll
argument_list|(
literal|"\\s*core\\s*id\\s*:\\s*(\\d+)"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|retval
return|;
block|}
comment|/**    * Invokes query() to do the parsing and handles parsing errors.     *     * @return an array of EventRecords that holds one element that represents    * the current state of /proc/cpuinfo    */
DECL|method|monitor ()
specifier|public
name|EventRecord
index|[]
name|monitor
parameter_list|()
block|{
name|EventRecord
index|[]
name|recs
init|=
operator|new
name|EventRecord
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|recs
index|[
literal|0
index|]
operator|=
name|query
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|recs
return|;
block|}
comment|/**    * Return a String with information about this class    *     * @return A String describing this class    */
DECL|method|getInfo ()
specifier|public
name|String
name|getInfo
parameter_list|()
block|{
return|return
operator|(
literal|"CPU Info parser"
operator|)
return|;
block|}
block|}
end_class

end_unit

