begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**********************************************************  * This class takes care of the information that needs to be  * persistently stored locally on nodes. Bookkeeping is done for the  * state of parsing of log files, so that the portion of the file that  * has already been parsed in previous calls will not be parsed again.  * For each log file, we maintain the byte offset of the last  * character parsed in previous passes. Also, the first entry in the  * log file is stored, so that FailMon can determine when a log file  * has been rotated (and thus parsing needs to start from the  * beginning of the file). We use a property file to store that  * information. For each log file we create a property keyed by the  * filename, the value of which contains the byte offset and first log  * entry separated by a SEPARATOR.  *   **********************************************************/
end_comment

begin_class
DECL|class|PersistentState
specifier|public
class|class
name|PersistentState
block|{
DECL|field|SEPARATOR
specifier|private
specifier|final
specifier|static
name|String
name|SEPARATOR
init|=
literal|"###"
decl_stmt|;
DECL|field|filename
specifier|static
name|String
name|filename
decl_stmt|;
DECL|field|persData
specifier|static
name|Properties
name|persData
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|/**    * Read the state of parsing for all open log files from a property    * file.    *     * @param fname the filename of the property file to be read    */
DECL|method|readState (String fname)
specifier|public
specifier|static
name|void
name|readState
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
name|filename
operator|=
name|fname
expr_stmt|;
try|try
block|{
name|persData
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Read and return the state of parsing for a particular log file.    *     * @param fname the log file for which to read the state    */
DECL|method|getState (String fname)
specifier|public
specifier|static
name|ParseState
name|getState
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
name|String
index|[]
name|fields
init|=
name|persData
operator|.
name|getProperty
argument_list|(
name|fname
argument_list|,
literal|"null"
operator|+
name|SEPARATOR
operator|+
literal|"0"
argument_list|)
operator|.
name|split
argument_list|(
name|SEPARATOR
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|firstLine
decl_stmt|;
name|long
name|offset
decl_stmt|;
if|if
condition|(
name|fields
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Malformed persistent state data found"
argument_list|)
expr_stmt|;
name|Environment
operator|.
name|logInfo
argument_list|(
literal|"Malformed persistent state data found"
argument_list|)
expr_stmt|;
name|firstLine
operator|=
literal|null
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|firstLine
operator|=
operator|(
name|fields
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"null"
argument_list|)
condition|?
literal|null
else|:
name|fields
index|[
literal|0
index|]
operator|)
expr_stmt|;
name|offset
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|fields
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseState
argument_list|(
name|fname
argument_list|,
name|firstLine
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**    * Set the state of parsing for a particular log file.    *     * @param state the ParseState to set    */
DECL|method|setState (ParseState state)
specifier|public
specifier|static
name|void
name|setState
parameter_list|(
name|ParseState
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Null state found"
argument_list|)
expr_stmt|;
name|Environment
operator|.
name|logInfo
argument_list|(
literal|"Null state found"
argument_list|)
expr_stmt|;
block|}
name|persData
operator|.
name|setProperty
argument_list|(
name|state
operator|.
name|filename
argument_list|,
name|state
operator|.
name|firstLine
operator|+
name|SEPARATOR
operator|+
name|state
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/**    * Upadate the state of parsing for a particular log file.    *     * @param filename the log file for which to update the state    * @param firstLine the first line of the log file currently    * @param offset the byte offset of the last character parsed    */
DECL|method|updateState (String filename, String firstLine, long offset)
specifier|public
specifier|static
name|void
name|updateState
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|firstLine
parameter_list|,
name|long
name|offset
parameter_list|)
block|{
name|ParseState
name|ps
init|=
name|getState
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstLine
operator|!=
literal|null
condition|)
name|ps
operator|.
name|firstLine
operator|=
name|firstLine
expr_stmt|;
name|ps
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|setState
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write the state of parsing for all open log files to a property    * file on disk.    *     * @param fname the filename of the property file to write to    */
DECL|method|writeState (String fname)
specifier|public
specifier|static
name|void
name|writeState
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
try|try
block|{
name|persData
operator|.
name|store
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|fname
argument_list|)
argument_list|,
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e1
parameter_list|)
block|{
name|e1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**********************************************************  * This class represents the state of parsing for a particular log  * file.  *   **********************************************************/
end_comment

begin_class
DECL|class|ParseState
class|class
name|ParseState
block|{
DECL|field|filename
specifier|public
name|String
name|filename
decl_stmt|;
DECL|field|firstLine
specifier|public
name|String
name|firstLine
decl_stmt|;
DECL|field|offset
specifier|public
name|long
name|offset
decl_stmt|;
DECL|method|ParseState (String _filename, String _firstLine, long _offset)
specifier|public
name|ParseState
parameter_list|(
name|String
name|_filename
parameter_list|,
name|String
name|_firstLine
parameter_list|,
name|long
name|_offset
parameter_list|)
block|{
name|this
operator|.
name|filename
operator|=
name|_filename
expr_stmt|;
name|this
operator|.
name|firstLine
operator|=
name|_firstLine
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|_offset
expr_stmt|;
block|}
block|}
end_class

end_unit

