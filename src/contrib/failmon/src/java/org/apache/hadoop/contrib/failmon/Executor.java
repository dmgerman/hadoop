begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.contrib.failmon
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|contrib
operator|.
name|failmon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**********************************************************  * This class executes monitoring jobs on all nodes of the  * cluster, on which we intend to gather failure metrics.   * It is basically a thread that sleeps and periodically wakes  * up to execute monitoring jobs and ship all gathered data to   * a "safe" location, which in most cases will be the HDFS   * filesystem of the monitored cluster.  *   **********************************************************/
end_comment

begin_class
DECL|class|Executor
specifier|public
class|class
name|Executor
implements|implements
name|Runnable
block|{
DECL|field|DEFAULT_LOG_INTERVAL
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_LOG_INTERVAL
init|=
literal|3600
decl_stmt|;
DECL|field|DEFAULT_POLL_INTERVAL
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_POLL_INTERVAL
init|=
literal|360
decl_stmt|;
DECL|field|MIN_INTERVAL
specifier|public
specifier|static
name|int
name|MIN_INTERVAL
init|=
literal|5
decl_stmt|;
DECL|field|instances
specifier|public
specifier|static
name|int
name|instances
init|=
literal|0
decl_stmt|;
DECL|field|lstore
name|LocalStore
name|lstore
decl_stmt|;
DECL|field|monitors
name|ArrayList
argument_list|<
name|MonitorJob
argument_list|>
name|monitors
decl_stmt|;
DECL|field|interval
name|int
name|interval
decl_stmt|;
DECL|field|upload_interval
name|int
name|upload_interval
decl_stmt|;
DECL|field|upload_counter
name|int
name|upload_counter
decl_stmt|;
comment|/**    * Create an instance of the class and read the configuration    * file to determine the set of jobs that will be run and the     * maximum interval for which the thread can sleep before it     * wakes up to execute a monitoring job on the node.    *     */
DECL|method|Executor (Configuration conf)
specifier|public
name|Executor
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Environment
operator|.
name|prepare
argument_list|(
literal|"conf/failmon.properties"
argument_list|)
expr_stmt|;
name|String
name|localTmpDir
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
comment|// running as a stand-alone application
name|localTmpDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
expr_stmt|;
name|Environment
operator|.
name|setProperty
argument_list|(
literal|"local.tmp.dir"
argument_list|,
name|localTmpDir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// running from within Hadoop
name|localTmpDir
operator|=
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.tmp.dir"
argument_list|)
expr_stmt|;
name|String
name|hadoopLogPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
operator|+
literal|"/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.file"
argument_list|)
decl_stmt|;
name|Environment
operator|.
name|setProperty
argument_list|(
literal|"hadoop.log.file"
argument_list|,
name|hadoopLogPath
argument_list|)
expr_stmt|;
name|Environment
operator|.
name|setProperty
argument_list|(
literal|"local.tmp.dir"
argument_list|,
name|localTmpDir
argument_list|)
expr_stmt|;
block|}
name|monitors
operator|=
name|Environment
operator|.
name|getJobs
argument_list|()
expr_stmt|;
name|interval
operator|=
name|Environment
operator|.
name|getInterval
argument_list|(
name|monitors
argument_list|)
expr_stmt|;
name|upload_interval
operator|=
name|LocalStore
operator|.
name|UPLOAD_INTERVAL
expr_stmt|;
name|lstore
operator|=
operator|new
name|LocalStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"local.upload.interval"
argument_list|)
operator|!=
literal|null
condition|)
name|upload_interval
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|Environment
operator|.
name|getProperty
argument_list|(
literal|"local.upload.interval"
argument_list|)
argument_list|)
expr_stmt|;
name|instances
operator|++
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|upload_counter
operator|=
name|upload_interval
expr_stmt|;
name|Environment
operator|.
name|logInfo
argument_list|(
literal|"Failmon Executor thread started successfully."
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
operator|*
literal|1000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|monitors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|monitors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|counter
operator|-=
name|interval
expr_stmt|;
if|if
condition|(
name|monitors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|counter
operator|<=
literal|0
condition|)
block|{
name|monitors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Environment
operator|.
name|logInfo
argument_list|(
literal|"Calling "
operator|+
name|monitors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|job
operator|.
name|getInfo
argument_list|()
operator|+
literal|"...\t"
argument_list|)
expr_stmt|;
name|monitors
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|job
operator|.
name|monitor
argument_list|(
name|lstore
argument_list|)
expr_stmt|;
block|}
block|}
name|upload_counter
operator|-=
name|interval
expr_stmt|;
if|if
condition|(
name|upload_counter
operator|<=
literal|0
condition|)
block|{
name|lstore
operator|.
name|upload
argument_list|()
expr_stmt|;
name|upload_counter
operator|=
name|upload_interval
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|instances
operator|--
expr_stmt|;
block|}
block|}
end_class

end_unit

