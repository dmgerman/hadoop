begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ProcessInfoImpl
specifier|public
class|class
name|ProcessInfoImpl
implements|implements
name|ProcessInfo
block|{
DECL|field|threadCount
specifier|private
name|int
name|threadCount
decl_stmt|;
DECL|field|currentTime
specifier|private
name|long
name|currentTime
decl_stmt|;
DECL|field|freemem
specifier|private
name|long
name|freemem
decl_stmt|;
DECL|field|maxmem
specifier|private
name|long
name|maxmem
decl_stmt|;
DECL|field|totmem
specifier|private
name|long
name|totmem
decl_stmt|;
DECL|field|env
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
decl_stmt|;
DECL|field|props
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
decl_stmt|;
DECL|method|ProcessInfoImpl ()
specifier|public
name|ProcessInfoImpl
parameter_list|()
block|{
name|env
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|props
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Construct a concrete process information object.<br/>    *     * @param threadCount    *          count of threads.    * @param currentTime    * @param freemem    * @param maxmem    * @param totmem    * @param env environment list.    * @param props    */
DECL|method|ProcessInfoImpl (int threadCount, long currentTime, long freemem, long maxmem, long totmem, Map<String, String> env, Map<String, String> props)
specifier|public
name|ProcessInfoImpl
parameter_list|(
name|int
name|threadCount
parameter_list|,
name|long
name|currentTime
parameter_list|,
name|long
name|freemem
parameter_list|,
name|long
name|maxmem
parameter_list|,
name|long
name|totmem
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
parameter_list|)
block|{
name|this
operator|.
name|threadCount
operator|=
name|threadCount
expr_stmt|;
name|this
operator|.
name|currentTime
operator|=
name|currentTime
expr_stmt|;
name|this
operator|.
name|freemem
operator|=
name|freemem
expr_stmt|;
name|this
operator|.
name|maxmem
operator|=
name|maxmem
expr_stmt|;
name|this
operator|.
name|totmem
operator|=
name|totmem
expr_stmt|;
name|this
operator|.
name|env
operator|=
name|env
expr_stmt|;
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|activeThreadCount ()
specifier|public
name|int
name|activeThreadCount
parameter_list|()
block|{
return|return
name|threadCount
return|;
block|}
annotation|@
name|Override
DECL|method|currentTimeMillis ()
specifier|public
name|long
name|currentTimeMillis
parameter_list|()
block|{
return|return
name|currentTime
return|;
block|}
annotation|@
name|Override
DECL|method|freeMemory ()
specifier|public
name|long
name|freeMemory
parameter_list|()
block|{
return|return
name|freemem
return|;
block|}
annotation|@
name|Override
DECL|method|getEnv ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEnv
parameter_list|()
block|{
return|return
name|env
return|;
block|}
annotation|@
name|Override
DECL|method|getSystemProperties ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSystemProperties
parameter_list|()
block|{
return|return
name|props
return|;
block|}
annotation|@
name|Override
DECL|method|maxMemory ()
specifier|public
name|long
name|maxMemory
parameter_list|()
block|{
return|return
name|maxmem
return|;
block|}
annotation|@
name|Override
DECL|method|totalMemory ()
specifier|public
name|long
name|totalMemory
parameter_list|()
block|{
return|return
name|totmem
return|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|threadCount
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|freemem
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxmem
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|totmem
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|read
argument_list|(
name|in
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|read
argument_list|(
name|in
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|threadCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|freemem
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|maxmem
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|totmem
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
name|env
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|out
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
DECL|method|read (DataInput in, Map<String, String> map)
specifier|private
name|void
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|=
name|i
operator|+
literal|2
control|)
block|{
name|String
name|key
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (DataOutput out, Map<String, String> map)
specifier|private
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
operator|(
name|map
operator|.
name|size
argument_list|()
operator|*
literal|2
operator|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|strBuf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"active threads : %d\n"
argument_list|,
name|threadCount
argument_list|)
argument_list|)
expr_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"current time  : %d\n"
argument_list|,
name|currentTime
argument_list|)
argument_list|)
expr_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"free memory  : %d\n"
argument_list|,
name|freemem
argument_list|)
argument_list|)
expr_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"total memory  : %d\n"
argument_list|,
name|totmem
argument_list|)
argument_list|)
expr_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"max memory  : %d\n"
argument_list|,
name|maxmem
argument_list|)
argument_list|)
expr_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
literal|"Environment Variables : \n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|env
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|strBuf
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"key : %s value : %s \n"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|strBuf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

