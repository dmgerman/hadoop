begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test.system
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
operator|.
name|RemoteProcess
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_comment
comment|/**  * Abstract class which encapsulates the DaemonClient which is used in the   * system tests.<br/>  *   * @param PROXY the proxy implementation of a specific Daemon   */
end_comment

begin_class
DECL|class|AbstractDaemonClient
specifier|public
specifier|abstract
class|class
name|AbstractDaemonClient
parameter_list|<
name|PROXY
extends|extends
name|DaemonProtocol
parameter_list|>
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|jmxEnabled
specifier|private
name|Boolean
name|jmxEnabled
init|=
literal|null
decl_stmt|;
DECL|field|connection
specifier|private
name|MBeanServerConnection
name|connection
decl_stmt|;
DECL|field|jmxPortNumber
specifier|private
name|int
name|jmxPortNumber
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|process
specifier|private
name|RemoteProcess
name|process
decl_stmt|;
DECL|field|connected
specifier|private
name|boolean
name|connected
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractDaemonClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|HADOOP_JMX_DOMAIN
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_JMX_DOMAIN
init|=
literal|"Hadoop"
decl_stmt|;
DECL|field|HADOOP_OPTS_ENV
specifier|private
specifier|static
specifier|final
name|String
name|HADOOP_OPTS_ENV
init|=
literal|"HADOOP_OPTS"
decl_stmt|;
comment|/**    * Create a Daemon client.<br/>    *     * @param conf client to be used by proxy to connect to Daemon.    * @param process the Daemon process to manage the particular daemon.    *     * @throws IOException on RPC error    */
DECL|method|AbstractDaemonClient (Configuration conf, RemoteProcess process)
specifier|public
name|AbstractDaemonClient
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RemoteProcess
name|process
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|process
operator|=
name|process
expr_stmt|;
block|}
comment|/**    * Gets if the client is connected to the Daemon<br/>    *     * @return true if connected.    */
DECL|method|isConnected ()
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
return|;
block|}
DECL|method|setConnected (boolean connected)
specifier|protected
name|void
name|setConnected
parameter_list|(
name|boolean
name|connected
parameter_list|)
block|{
name|this
operator|.
name|connected
operator|=
name|connected
expr_stmt|;
block|}
comment|/**    * Create an RPC proxy to the daemon<br/>    *     * @throws IOException on RPC error    */
DECL|method|connect ()
specifier|public
specifier|abstract
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Disconnect the underlying RPC proxy to the daemon.<br/>    * @throws IOException in case of communication errors    */
DECL|method|disconnect ()
specifier|public
specifier|abstract
name|void
name|disconnect
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the proxy to connect to a particular service Daemon.<br/>    *     * @return proxy to connect to a particular service Daemon.    */
DECL|method|getProxy ()
specifier|protected
specifier|abstract
name|PROXY
name|getProxy
parameter_list|()
function_decl|;
comment|/**    * Gets the daemon level configuration.<br/>    *     * @return configuration using which daemon is running    */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
comment|/**    * Gets the host on which Daemon is currently running.<br/>    *     * @return hostname    */
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|process
operator|.
name|getHostName
argument_list|()
return|;
block|}
comment|/**    * Gets if the Daemon is ready to accept RPC connections.<br/>    *     * @return true if daemon is ready.    * @throws IOException on RPC error    */
DECL|method|isReady ()
specifier|public
name|boolean
name|isReady
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|isReady
argument_list|()
return|;
block|}
comment|/**    * Kills the Daemon process<br/>    * @throws IOException on RPC error    */
DECL|method|kill ()
specifier|public
name|void
name|kill
parameter_list|()
throws|throws
name|IOException
block|{
name|process
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
comment|/**    * Checks if the Daemon process is alive or not<br/>    * @throws IOException on RPC error    */
DECL|method|ping ()
specifier|public
name|void
name|ping
parameter_list|()
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|ping
argument_list|()
expr_stmt|;
block|}
comment|/**    * Start up the Daemon process.<br/>    * @throws IOException on RPC error    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|process
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Get system level view of the Daemon process.    *     * @return returns system level view of the Daemon process.    *     * @throws IOException on RPC error.     */
DECL|method|getProcessInfo ()
specifier|public
name|ProcessInfo
name|getProcessInfo
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|getProcessInfo
argument_list|()
return|;
block|}
comment|/**    * Abstract method to retrieve the name of a daemon specific env. var    * @return name of Hadoop environment variable containing a daemon options    */
DECL|method|getHadoopOptsEnvName ()
specifier|abstract
specifier|public
name|String
name|getHadoopOptsEnvName
parameter_list|()
function_decl|;
comment|/**    * Checks remote daemon process info to see if certain JMX sys. properties    * are available and reckon if the JMX service is enabled on the remote side    *    * @return<code>boolean</code> code indicating availability of remote JMX    * @throws IOException is throws in case of communication errors    */
DECL|method|isJmxEnabled ()
specifier|public
name|boolean
name|isJmxEnabled
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|isJmxEnabled
argument_list|(
name|HADOOP_OPTS_ENV
argument_list|)
operator|||
name|isJmxEnabled
argument_list|(
name|getHadoopOptsEnvName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Checks remote daemon process info to see if certain JMX sys. properties    * are available and reckon if the JMX service is enabled on the remote side    *    * @param envivar name of an evironment variable to be searched    * @return<code>boolean</code> code indicating availability of remote JMX    * @throws IOException is throws in case of communication errors    */
DECL|method|isJmxEnabled (String envivar)
specifier|protected
name|boolean
name|isJmxEnabled
parameter_list|(
name|String
name|envivar
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|jmxEnabled
operator|!=
literal|null
condition|)
return|return
name|jmxEnabled
return|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|String
name|jmxRemoteString
init|=
literal|"-Dcom.sun.management.jmxremote"
decl_stmt|;
name|String
name|hadoopOpts
init|=
name|getProcessInfo
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
name|envivar
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Looking into "
operator|+
name|hadoopOpts
operator|+
literal|" from "
operator|+
name|envivar
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|options
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|hadoopOpts
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|=
name|options
operator|.
name|contains
argument_list|(
name|jmxRemoteString
argument_list|)
expr_stmt|;
name|jmxEnabled
operator|=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**    * Checks remote daemon process info to find remote JMX server port number    * By default this method will look into "HADOOP_OPTS" variable only.    * @return number of remote JMX server or -1 if it can't be found    * @throws IOException is throws in case of communication errors    * @throws IllegalArgumentException if non-integer port is set    *  in the remote process info    */
DECL|method|getJmxPortNumber ()
specifier|public
name|int
name|getJmxPortNumber
parameter_list|()
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
name|int
name|portNo
init|=
name|getJmxPortNumber
argument_list|(
name|HADOOP_OPTS_ENV
argument_list|)
decl_stmt|;
return|return
name|portNo
operator|!=
operator|-
literal|1
condition|?
name|portNo
else|:
name|getJmxPortNumber
argument_list|(
name|getHadoopOptsEnvName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Checks remote daemon process info to find remote JMX server port number    *    * @param envivar name of the env. var. to look for JMX specific settings    * @return number of remote JMX server or -1 if it can't be found    * @throws IOException is throws in case of communication errors    * @throws IllegalArgumentException if non-integer port is set    *  in the remote process info    */
DECL|method|getJmxPortNumber (final String envivar)
specifier|protected
name|int
name|getJmxPortNumber
parameter_list|(
specifier|final
name|String
name|envivar
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalArgumentException
block|{
if|if
condition|(
name|jmxPortNumber
operator|!=
operator|-
literal|1
condition|)
return|return
name|jmxPortNumber
return|;
name|String
name|jmxPortString
init|=
literal|"-Dcom.sun.management.jmxremote.port"
decl_stmt|;
name|String
name|hadoopOpts
init|=
name|getProcessInfo
argument_list|()
operator|.
name|getEnv
argument_list|()
operator|.
name|get
argument_list|(
name|envivar
argument_list|)
decl_stmt|;
name|int
name|portNumber
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|options
init|=
name|hadoopOpts
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|option
range|:
name|options
control|)
block|{
if|if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
name|jmxPortString
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|portNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JMX port number isn't integer"
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't detect JMX port number"
argument_list|)
throw|;
name|jmxPortNumber
operator|=
name|portNumber
expr_stmt|;
return|return
name|jmxPortNumber
return|;
block|}
comment|/**    * Return a file status object that represents the path.    * @param path    *          given path    * @param local    *          whether the path is local or not    * @return a FileStatus object    * @throws IOException see specific implementation    */
DECL|method|getFileStatus (String path, boolean local)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|,
name|local
argument_list|)
return|;
block|}
comment|/**    * Create a file with full permissions in a file system.    * @param path - source path where the file has to create.    * @param fileName - file name    * @param local - identifying the path whether its local or not.    * @throws IOException - if an I/O error occurs.    */
DECL|method|createFile (String path, String fileName, boolean local)
specifier|public
name|void
name|createFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|fileName
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|createFile
argument_list|(
name|path
argument_list|,
name|fileName
argument_list|,
literal|null
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a file with given permissions in a file system.    * @param path - source path where the file has to create.    * @param fileName - file name.    * @param permission - file permissions.    * @param local - identifying the path whether its local or not.    * @throws IOException - if an I/O error occurs.    */
DECL|method|createFile (String path, String fileName, FsPermission permission, boolean local)
specifier|public
name|void
name|createFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|fileName
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|createFile
argument_list|(
name|path
argument_list|,
name|fileName
argument_list|,
name|permission
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a folder with default permissions in a file system.    * @param path - source path where the file has to be creating.    * @param folderName - folder name.    * @param local - identifying the path whether its local or not.    * @throws IOException - if an I/O error occurs.     */
DECL|method|createFolder (String path, String folderName, boolean local)
specifier|public
name|void
name|createFolder
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|folderName
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|createFolder
argument_list|(
name|path
argument_list|,
name|folderName
argument_list|,
literal|null
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a folder with given permissions in a file system.    * @param path - source path where the file has to be creating.    * @param folderName - folder name.    * @param permission - folder permissions.    * @param local - identifying the path whether its local or not.    * @throws IOException - if an I/O error occurs.    */
DECL|method|createFolder (String path, String folderName, FsPermission permission, boolean local)
specifier|public
name|void
name|createFolder
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|folderName
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|IOException
block|{
name|getProxy
argument_list|()
operator|.
name|createFolder
argument_list|(
name|path
argument_list|,
name|folderName
argument_list|,
name|permission
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
comment|/**    * List the statuses of the files/directories in the given path if the path is    * a directory.    *     * @param path    *          given path    * @param local    *          whether the path is local or not    * @return the statuses of the files/directories in the given patch    * @throws IOException on RPC error.     */
DECL|method|listStatus (String path, boolean local)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getProxy
argument_list|()
operator|.
name|listStatus
argument_list|(
name|path
argument_list|,
name|local
argument_list|)
return|;
block|}
comment|/**    * List the statuses of the files/directories in the given path if the path is    * a directory recursive/nonrecursively depending on parameters    *     * @param path    *          given path    * @param local    *          whether the path is local or not    * @param recursive     *          whether to recursively get the status    * @return the statuses of the files/directories in the given patch    * @throws IOException is thrown on RPC error.     */
DECL|method|listStatus (String path, boolean local, boolean recursive)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|local
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|status
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|addStatus
argument_list|(
name|status
argument_list|,
name|path
argument_list|,
name|local
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
return|return
name|status
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|addStatus (List<FileStatus> status, String f, boolean local, boolean recursive)
specifier|private
name|void
name|addStatus
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|status
parameter_list|,
name|String
name|f
parameter_list|,
name|boolean
name|local
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|fs
init|=
name|listStatus
argument_list|(
name|f
argument_list|,
name|local
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fs
control|)
block|{
if|if
condition|(
operator|!
name|f
operator|.
name|equals
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|status
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
name|addStatus
argument_list|(
name|status
argument_list|,
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|local
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Gets number of times FATAL log messages where logged in Daemon logs.     *<br/>    * Pattern used for searching is FATAL.<br/>    * @param excludeExpList list of exception to exclude     * @return number of occurrence of fatal message.    * @throws IOException in case of communication errors    */
DECL|method|getNumberOfFatalStatementsInLog (String [] excludeExpList)
specifier|public
name|int
name|getNumberOfFatalStatementsInLog
parameter_list|(
name|String
index|[]
name|excludeExpList
parameter_list|)
throws|throws
name|IOException
block|{
name|DaemonProtocol
name|proxy
init|=
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
literal|"FATAL"
decl_stmt|;
return|return
name|proxy
operator|.
name|getNumberOfMatchesInLogFile
argument_list|(
name|pattern
argument_list|,
name|excludeExpList
argument_list|)
return|;
block|}
comment|/**    * Gets number of times ERROR log messages where logged in Daemon logs.     *<br/>    * Pattern used for searching is ERROR.<br/>    * @param excludeExpList list of exception to exclude     * @return number of occurrence of error message.    * @throws IOException is thrown on RPC error.     */
DECL|method|getNumberOfErrorStatementsInLog (String[] excludeExpList)
specifier|public
name|int
name|getNumberOfErrorStatementsInLog
parameter_list|(
name|String
index|[]
name|excludeExpList
parameter_list|)
throws|throws
name|IOException
block|{
name|DaemonProtocol
name|proxy
init|=
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
literal|"ERROR"
decl_stmt|;
return|return
name|proxy
operator|.
name|getNumberOfMatchesInLogFile
argument_list|(
name|pattern
argument_list|,
name|excludeExpList
argument_list|)
return|;
block|}
comment|/**    * Gets number of times Warning log messages where logged in Daemon logs.     *<br/>    * Pattern used for searching is WARN.<br/>    * @param excludeExpList list of exception to exclude     * @return number of occurrence of warning message.    * @throws IOException thrown on RPC error.     */
DECL|method|getNumberOfWarnStatementsInLog (String[] excludeExpList)
specifier|public
name|int
name|getNumberOfWarnStatementsInLog
parameter_list|(
name|String
index|[]
name|excludeExpList
parameter_list|)
throws|throws
name|IOException
block|{
name|DaemonProtocol
name|proxy
init|=
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
literal|"WARN"
decl_stmt|;
return|return
name|proxy
operator|.
name|getNumberOfMatchesInLogFile
argument_list|(
name|pattern
argument_list|,
name|excludeExpList
argument_list|)
return|;
block|}
comment|/**    * Gets number of time given Exception were present in log file.<br/>    *     * @param e exception class.    * @param excludeExpList list of exceptions to exclude.     * @return number of exceptions in log    * @throws IOException is thrown on RPC error.     */
DECL|method|getNumberOfExceptionsInLog (Exception e, String[] excludeExpList)
specifier|public
name|int
name|getNumberOfExceptionsInLog
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
index|[]
name|excludeExpList
parameter_list|)
throws|throws
name|IOException
block|{
name|DaemonProtocol
name|proxy
init|=
name|getProxy
argument_list|()
decl_stmt|;
name|String
name|pattern
init|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
return|return
name|proxy
operator|.
name|getNumberOfMatchesInLogFile
argument_list|(
name|pattern
argument_list|,
name|excludeExpList
argument_list|)
return|;
block|}
comment|/**    * Number of times ConcurrentModificationException present in log file.     *<br/>    * @param excludeExpList list of exceptions to exclude.    * @return number of times exception in log file.    * @throws IOException is thrown on RPC error.     */
DECL|method|getNumberOfConcurrentModificationExceptionsInLog ( String[] excludeExpList)
specifier|public
name|int
name|getNumberOfConcurrentModificationExceptionsInLog
parameter_list|(
name|String
index|[]
name|excludeExpList
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNumberOfExceptionsInLog
argument_list|(
operator|new
name|ConcurrentModificationException
argument_list|()
argument_list|,
name|excludeExpList
argument_list|)
return|;
block|}
DECL|field|errorCount
specifier|private
name|int
name|errorCount
decl_stmt|;
DECL|field|fatalCount
specifier|private
name|int
name|fatalCount
decl_stmt|;
DECL|field|concurrentExceptionCount
specifier|private
name|int
name|concurrentExceptionCount
decl_stmt|;
comment|/**    * Populate the initial exception counts to be used to assert once a testcase    * is done there was no exception in the daemon when testcase was run.    * @param excludeExpList list of exceptions to exclude    * @throws IOException is thrown on RPC error.     */
DECL|method|populateExceptionCount (String [] excludeExpList)
specifier|protected
name|void
name|populateExceptionCount
parameter_list|(
name|String
index|[]
name|excludeExpList
parameter_list|)
throws|throws
name|IOException
block|{
name|errorCount
operator|=
name|getNumberOfErrorStatementsInLog
argument_list|(
name|excludeExpList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of error messages in logs : "
operator|+
name|errorCount
argument_list|)
expr_stmt|;
name|fatalCount
operator|=
name|getNumberOfFatalStatementsInLog
argument_list|(
name|excludeExpList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of fatal statement in logs : "
operator|+
name|fatalCount
argument_list|)
expr_stmt|;
name|concurrentExceptionCount
operator|=
name|getNumberOfConcurrentModificationExceptionsInLog
argument_list|(
name|excludeExpList
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of concurrent modification in logs : "
operator|+
name|concurrentExceptionCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert if the new exceptions were logged into the log file.    *<br/>    *<b><i>    * Pre-req for the method is that populateExceptionCount() has     * to be called before calling this method.</b></i>    * @param excludeExpList list of exceptions to exclude    * @throws IOException is thrown on RPC error.     */
DECL|method|assertNoExceptionsOccurred (String [] excludeExpList)
specifier|protected
name|void
name|assertNoExceptionsOccurred
parameter_list|(
name|String
index|[]
name|excludeExpList
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|newerrorCount
init|=
name|getNumberOfErrorStatementsInLog
argument_list|(
name|excludeExpList
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of error messages while asserting :"
operator|+
name|newerrorCount
argument_list|)
expr_stmt|;
name|int
name|newfatalCount
init|=
name|getNumberOfFatalStatementsInLog
argument_list|(
name|excludeExpList
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of fatal messages while asserting : "
operator|+
name|newfatalCount
argument_list|)
expr_stmt|;
name|int
name|newconcurrentExceptionCount
init|=
name|getNumberOfConcurrentModificationExceptionsInLog
argument_list|(
name|excludeExpList
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of concurrentmodification exception while asserting :"
operator|+
name|newconcurrentExceptionCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New Error Messages logged in the log file"
argument_list|,
name|errorCount
argument_list|,
name|newerrorCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New Fatal messages logged in the log file"
argument_list|,
name|fatalCount
argument_list|,
name|newfatalCount
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"New ConcurrentModificationException in log file"
argument_list|,
name|concurrentExceptionCount
argument_list|,
name|newconcurrentExceptionCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Builds correct name of JMX object name from given domain, service name, type    * @param domain JMX domain name    * @param serviceName of the service where MBean is registered (NameNode)    * @param typeName of the MXBean class    * @return ObjectName for requested MXBean of<code>null</code> if one wasn't    *    found    * @throws java.io.IOException in if object name is malformed    */
DECL|method|getJmxBeanName (String domain, String serviceName, String typeName)
specifier|protected
name|ObjectName
name|getJmxBeanName
parameter_list|(
name|String
name|domain
parameter_list|,
name|String
name|serviceName
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|domain
operator|==
literal|null
condition|)
name|domain
operator|=
name|HADOOP_JMX_DOMAIN
expr_stmt|;
name|ObjectName
name|jmxBean
decl_stmt|;
try|try
block|{
name|jmxBean
operator|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":service="
operator|+
name|serviceName
operator|+
literal|",name="
operator|+
name|typeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|jmxBean
return|;
block|}
comment|/**    * Create connection with the remote JMX server at given host and port    * @param host name of the remote JMX server host    * @param port port number of the remote JXM server host    * @return instance of MBeanServerConnection or<code>null</code> if one    *    hasn't been established    * @throws IOException in case of comminication errors    */
DECL|method|establishJmxConnection (String host, int port)
specifier|protected
name|MBeanServerConnection
name|establishJmxConnection
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
return|return
name|connection
return|;
name|String
name|urlPattern
init|=
literal|null
decl_stmt|;
try|try
block|{
name|urlPattern
operator|=
literal|"service:jmx:rmi:///jndi/rmi://"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|"/jmxrmi"
expr_stmt|;
name|JMXServiceURL
name|url
init|=
operator|new
name|JMXServiceURL
argument_list|(
name|urlPattern
argument_list|)
decl_stmt|;
name|JMXConnector
name|connector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connection
operator|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|net
operator|.
name|MalformedURLException
name|badURLExc
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"bad url: "
operator|+
name|urlPattern
argument_list|,
name|badURLExc
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|badURLExc
argument_list|)
throw|;
block|}
return|return
name|connection
return|;
block|}
DECL|field|jmxObjectNames
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ObjectName
argument_list|>
name|jmxObjectNames
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Method implements all logic for receiving a bean's attribute.    * If any initializations such as establishing bean server connections, etc.    * are need it will do it.    * @param serviceName name of the service where MBean is registered (NameNode)    * @param type name of the MXBean class    * @param attributeName name of the attribute to be retrieved    * @return Object value of the attribute or<code>null</code> if not found    * @throws IOException is thrown in case of any errors    */
DECL|method|getJmxAttribute (String serviceName, String type, String attributeName)
specifier|protected
name|Object
name|getJmxAttribute
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|attributeName
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|retAttribute
init|=
literal|null
decl_stmt|;
name|String
name|domain
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isJmxEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|MBeanServerConnection
name|conn
init|=
name|establishJmxConnection
argument_list|(
name|getHostName
argument_list|()
argument_list|,
name|getJmxPortNumber
argument_list|(
name|HADOOP_OPTS_ENV
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|d
range|:
name|conn
operator|.
name|getDomains
argument_list|()
control|)
block|{
if|if
condition|(
name|d
operator|!=
literal|null
operator|&&
name|d
operator|.
name|startsWith
argument_list|(
name|HADOOP_JMX_DOMAIN
argument_list|)
condition|)
name|domain
operator|=
name|d
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|jmxObjectNames
operator|.
name|containsKey
argument_list|(
name|type
argument_list|)
condition|)
name|jmxObjectNames
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|getJmxBeanName
argument_list|(
name|domain
argument_list|,
name|serviceName
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|retAttribute
operator|=
name|conn
operator|.
name|getAttribute
argument_list|(
name|jmxObjectNames
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|attributeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MBeanException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AttributeNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ReflectionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|retAttribute
return|;
block|}
comment|/**    * This method has to be implemented by appropriate concrete daemon client    * e.g. DNClient, NNClient, etc.    * Concrete implementation has to provide names of the service and bean type    * @param attributeName name of the attribute to be retrieved    * @return Object value of the given attribute    * @throws IOException is thrown in case of communication errors    */
DECL|method|getDaemonAttribute (String attributeName)
specifier|public
specifier|abstract
name|Object
name|getDaemonAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

