begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.test.system.process
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|system
operator|.
name|process
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_comment
comment|/**  * The concrete class which implements the start up and shut down based routines  * based on the hadoop-daemon.sh.<br/>  *   * Class requires two keys to be present in the Configuration objects passed to  * it. Look at<code>CONF_HADOOPHOME</code> and  *<code>CONF_HADOOPCONFDIR</code> for the names of the  * configuration keys.  *   * Following will be the format which the final command execution would look :   *<br/>  *<code>  *  ssh host 'hadoop-home/bin/hadoop-daemon.sh --script scriptName   *  --config HADOOP_CONF_DIR (start|stop) command'  *</code>  */
end_comment

begin_class
DECL|class|HadoopDaemonRemoteCluster
specifier|public
specifier|abstract
class|class
name|HadoopDaemonRemoteCluster
implements|implements
name|ClusterProcessManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HadoopDaemonRemoteCluster
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|CONF_HADOOPNEWCONFDIR
specifier|public
specifier|static
specifier|final
name|String
name|CONF_HADOOPNEWCONFDIR
init|=
literal|"test.system.hdrc.hadoopnewconfdir"
decl_stmt|;
comment|/**    * Key used to configure the HADOOP_HOME to be used by the    * HadoopDaemonRemoteCluster.    */
DECL|field|CONF_HADOOPHOME
specifier|public
specifier|final
specifier|static
name|String
name|CONF_HADOOPHOME
init|=
literal|"test.system.hdrc.hadoophome"
decl_stmt|;
DECL|field|CONF_SCRIPTDIR
specifier|public
specifier|final
specifier|static
name|String
name|CONF_SCRIPTDIR
init|=
literal|"test.system.hdrc.deployed.scripts.dir"
decl_stmt|;
comment|/**    * Key used to configure the HADOOP_CONF_DIR to be used by the    * HadoopDaemonRemoteCluster.    */
DECL|field|CONF_HADOOPCONFDIR
specifier|public
specifier|final
specifier|static
name|String
name|CONF_HADOOPCONFDIR
init|=
literal|"test.system.hdrc.hadoopconfdir"
decl_stmt|;
DECL|field|CONF_DEPLOYED_HADOOPCONFDIR
specifier|public
specifier|final
specifier|static
name|String
name|CONF_DEPLOYED_HADOOPCONFDIR
init|=
literal|"test.system.hdrc.deployed.hadoopconfdir"
decl_stmt|;
DECL|field|hadoopHome
specifier|private
name|String
name|hadoopHome
decl_stmt|;
DECL|field|hadoopConfDir
specifier|protected
name|String
name|hadoopConfDir
decl_stmt|;
DECL|field|scriptsDir
specifier|protected
name|String
name|scriptsDir
decl_stmt|;
DECL|field|hadoopNewConfDir
specifier|protected
name|String
name|hadoopNewConfDir
decl_stmt|;
DECL|field|roles
specifier|private
specifier|final
name|Set
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|>
name|roles
decl_stmt|;
DECL|field|daemonInfos
specifier|private
specifier|final
name|List
argument_list|<
name|HadoopDaemonInfo
argument_list|>
name|daemonInfos
decl_stmt|;
DECL|field|processes
specifier|private
name|List
argument_list|<
name|RemoteProcess
argument_list|>
name|processes
decl_stmt|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|class|HadoopDaemonInfo
specifier|public
specifier|static
class|class
name|HadoopDaemonInfo
block|{
DECL|field|cmd
specifier|public
specifier|final
name|String
name|cmd
decl_stmt|;
DECL|field|role
specifier|public
specifier|final
name|Enum
argument_list|<
name|?
argument_list|>
name|role
decl_stmt|;
DECL|field|hostNames
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|hostNames
decl_stmt|;
DECL|method|HadoopDaemonInfo (String cmd, Enum<?> role, List<String> hostNames)
specifier|public
name|HadoopDaemonInfo
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|role
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|hostNames
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
name|this
operator|.
name|hostNames
operator|=
name|hostNames
expr_stmt|;
block|}
DECL|method|HadoopDaemonInfo (String cmd, Enum<?> role, String hostFile)
specifier|public
name|HadoopDaemonInfo
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|role
parameter_list|,
name|String
name|hostFile
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|cmd
operator|=
name|cmd
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|getDeployedHadoopConfDir
argument_list|()
argument_list|,
name|hostFile
argument_list|)
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|hostNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|host
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|host
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|host
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|host
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
block|{
comment|// Skip empty and possible comment lines
comment|// throw new IllegalArgumentException(
comment|// "Hostname could not be found in file " + hostFile);
continue|continue;
block|}
name|hostNames
operator|.
name|add
argument_list|(
name|host
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hostNames
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"At least one hostname "
operator|+
literal|"is required to be present in file - "
operator|+
name|hostFile
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not close reader"
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created HadoopDaemonInfo for "
operator|+
name|cmd
operator|+
literal|" "
operator|+
name|role
operator|+
literal|" from "
operator|+
name|hostFile
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|pushConfig (String localDir)
specifier|public
name|String
name|pushConfig
parameter_list|(
name|String
name|localDir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|RemoteProcess
name|process
range|:
name|processes
control|)
block|{
name|process
operator|.
name|pushConfig
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
block|}
return|return
name|hadoopNewConfDir
return|;
block|}
DECL|method|HadoopDaemonRemoteCluster (List<HadoopDaemonInfo> daemonInfos)
specifier|public
name|HadoopDaemonRemoteCluster
parameter_list|(
name|List
argument_list|<
name|HadoopDaemonInfo
argument_list|>
name|daemonInfos
parameter_list|)
block|{
name|this
operator|.
name|daemonInfos
operator|=
name|daemonInfos
expr_stmt|;
name|this
operator|.
name|roles
operator|=
operator|new
name|HashSet
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|HadoopDaemonInfo
name|info
range|:
name|daemonInfos
control|)
block|{
name|this
operator|.
name|roles
operator|.
name|add
argument_list|(
name|info
operator|.
name|role
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|populateDirectories
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|processes
operator|=
operator|new
name|ArrayList
argument_list|<
name|RemoteProcess
argument_list|>
argument_list|()
expr_stmt|;
name|populateDaemons
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAllProcesses ()
specifier|public
name|List
argument_list|<
name|RemoteProcess
argument_list|>
name|getAllProcesses
parameter_list|()
block|{
return|return
name|processes
return|;
block|}
annotation|@
name|Override
DECL|method|getRoles ()
specifier|public
name|Set
argument_list|<
name|Enum
argument_list|<
name|?
argument_list|>
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|roles
return|;
block|}
comment|/**    * Method to populate the hadoop home and hadoop configuration directories.    *     * @param conf    *          Configuration object containing values for    *          CONF_HADOOPHOME and    *          CONF_HADOOPCONFDIR    *     * @throws IllegalArgumentException    *           if the configuration or system property set does not contain    *           values for the required keys.    */
DECL|method|populateDirectories (Configuration conf)
specifier|protected
name|void
name|populateDirectories
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|hadoopHome
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_HADOOPHOME
argument_list|)
expr_stmt|;
name|hadoopConfDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_HADOOPCONFDIR
argument_list|)
expr_stmt|;
name|scriptsDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_SCRIPTDIR
argument_list|)
expr_stmt|;
name|hadoopNewConfDir
operator|=
name|conf
operator|.
name|get
argument_list|(
name|CONF_HADOOPNEWCONFDIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|hadoopHome
operator|==
literal|null
operator|||
name|hadoopConfDir
operator|==
literal|null
operator|||
name|hadoopHome
operator|.
name|isEmpty
argument_list|()
operator|||
name|hadoopConfDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No configuration "
operator|+
literal|"for the HADOOP_HOME and HADOOP_CONF_DIR passed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Configuration passed for hadoop home "
operator|+
literal|"and hadoop conf directories"
argument_list|)
throw|;
block|}
block|}
DECL|method|getDeployedHadoopConfDir ()
specifier|public
specifier|static
name|String
name|getDeployedHadoopConfDir
parameter_list|()
block|{
name|String
name|dir
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|CONF_DEPLOYED_HADOOPCONFDIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
operator|||
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No configuration "
operator|+
literal|"for the CONF_DEPLOYED_HADOOPCONFDIR passed"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No Configuration passed for hadoop deployed conf directory"
argument_list|)
throw|;
block|}
return|return
name|dir
return|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|RemoteProcess
name|process
range|:
name|processes
control|)
block|{
name|process
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|start (String newConfLocation)
specifier|public
name|void
name|start
parameter_list|(
name|String
name|newConfLocation
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|RemoteProcess
name|process
range|:
name|processes
control|)
block|{
name|process
operator|.
name|start
argument_list|(
name|newConfLocation
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|RemoteProcess
name|process
range|:
name|processes
control|)
block|{
name|process
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop (String newConfLocation)
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|newConfLocation
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|RemoteProcess
name|process
range|:
name|processes
control|)
block|{
name|process
operator|.
name|kill
argument_list|(
name|newConfLocation
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateDaemon (HadoopDaemonInfo info)
specifier|protected
name|void
name|populateDaemon
parameter_list|(
name|HadoopDaemonInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|host
range|:
name|info
operator|.
name|hostNames
control|)
block|{
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|RemoteProcess
name|process
init|=
name|getProcessManager
argument_list|(
name|info
argument_list|,
name|addr
operator|.
name|getCanonicalHostName
argument_list|()
argument_list|)
decl_stmt|;
name|processes
operator|.
name|add
argument_list|(
name|process
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateDaemons ()
specifier|protected
name|void
name|populateDaemons
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|HadoopDaemonInfo
name|info
range|:
name|daemonInfos
control|)
block|{
name|populateDaemon
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|isMultiUserSupported ()
specifier|public
name|boolean
name|isMultiUserSupported
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
DECL|method|getProcessManager ( HadoopDaemonInfo info, String hostName)
specifier|protected
name|RemoteProcess
name|getProcessManager
parameter_list|(
name|HadoopDaemonInfo
name|info
parameter_list|,
name|String
name|hostName
parameter_list|)
block|{
name|RemoteProcess
name|process
init|=
operator|new
name|ScriptDaemon
argument_list|(
name|info
operator|.
name|cmd
argument_list|,
name|hostName
argument_list|,
name|info
operator|.
name|role
argument_list|)
decl_stmt|;
return|return
name|process
return|;
block|}
comment|/**    * The core daemon class which actually implements the remote process    * management of actual daemon processes in the cluster.    *     */
DECL|class|ScriptDaemon
class|class
name|ScriptDaemon
implements|implements
name|RemoteProcess
block|{
DECL|field|STOP_COMMAND
specifier|private
specifier|static
specifier|final
name|String
name|STOP_COMMAND
init|=
literal|"stop"
decl_stmt|;
DECL|field|START_COMMAND
specifier|private
specifier|static
specifier|final
name|String
name|START_COMMAND
init|=
literal|"start"
decl_stmt|;
DECL|field|SCRIPT_NAME
specifier|private
specifier|static
specifier|final
name|String
name|SCRIPT_NAME
init|=
literal|"hadoop-daemon.sh"
decl_stmt|;
DECL|field|PUSH_CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|PUSH_CONFIG
init|=
literal|"pushConfig.sh"
decl_stmt|;
DECL|field|daemonName
specifier|protected
specifier|final
name|String
name|daemonName
decl_stmt|;
DECL|field|hostName
specifier|protected
specifier|final
name|String
name|hostName
decl_stmt|;
DECL|field|role
specifier|private
specifier|final
name|Enum
argument_list|<
name|?
argument_list|>
name|role
decl_stmt|;
DECL|method|ScriptDaemon (String daemonName, String hostName, Enum<?> role)
specifier|public
name|ScriptDaemon
parameter_list|(
name|String
name|daemonName
parameter_list|,
name|String
name|hostName
parameter_list|,
name|Enum
argument_list|<
name|?
argument_list|>
name|role
parameter_list|)
block|{
name|this
operator|.
name|daemonName
operator|=
name|daemonName
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|role
operator|=
name|role
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
DECL|method|getPushConfigCommand (String localDir, String remoteDir, File scriptDir)
specifier|private
name|String
index|[]
name|getPushConfigCommand
parameter_list|(
name|String
name|localDir
parameter_list|,
name|String
name|remoteDir
parameter_list|,
name|File
name|scriptDir
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|cmdArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|scriptDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|PUSH_CONFIG
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|localDir
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|remoteDir
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|hadoopConfDir
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|cmdArgs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|cmdArgs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|buildPushConfig (String local, String remote )
specifier|private
name|ShellCommandExecutor
name|buildPushConfig
parameter_list|(
name|String
name|local
parameter_list|,
name|String
name|remote
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|scriptDir
init|=
operator|new
name|File
argument_list|(
name|scriptsDir
argument_list|)
decl_stmt|;
name|String
index|[]
name|commandArgs
init|=
name|getPushConfigCommand
argument_list|(
name|local
argument_list|,
name|remote
argument_list|,
name|scriptDir
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ShellCommandExecutor
name|executor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|commandArgs
argument_list|,
name|scriptDir
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|executor
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
DECL|method|createNewConfDir ()
specifier|private
name|ShellCommandExecutor
name|createNewConfDir
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|cmdArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
literal|"ssh"
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
literal|"if [ -d "
operator|+
name|hadoopNewConfDir
operator|+
literal|" ];\n then echo Will remove existing directory;  rm -rf "
operator|+
name|hadoopNewConfDir
operator|+
literal|";\nmkdir "
operator|+
name|hadoopNewConfDir
operator|+
literal|"; else \n"
operator|+
literal|"echo "
operator|+
name|hadoopNewConfDir
operator|+
literal|" doesnt exist hence creating"
operator|+
literal|";  mkdir "
operator|+
name|hadoopNewConfDir
operator|+
literal|";\n  fi"
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmd
init|=
operator|(
name|String
index|[]
operator|)
name|cmdArgs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|cmdArgs
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|ShellCommandExecutor
name|executor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|executor
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
annotation|@
name|Override
DECL|method|pushConfig (String localDir)
specifier|public
name|void
name|pushConfig
parameter_list|(
name|String
name|localDir
parameter_list|)
throws|throws
name|IOException
block|{
name|createNewConfDir
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
name|buildPushConfig
argument_list|(
name|localDir
argument_list|,
name|hadoopNewConfDir
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
DECL|method|buildCommandExecutor (String command, String confDir)
specifier|private
name|ShellCommandExecutor
name|buildCommandExecutor
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|confDir
parameter_list|)
block|{
name|String
index|[]
name|commandArgs
init|=
name|getCommand
argument_list|(
name|command
argument_list|,
name|confDir
argument_list|)
decl_stmt|;
name|File
name|cwd
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"HADOOP_CONF_DIR"
argument_list|,
name|confDir
argument_list|)
expr_stmt|;
name|ShellCommandExecutor
name|executor
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|commandArgs
argument_list|,
name|cwd
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|executor
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|executor
return|;
block|}
DECL|method|getBinDir ()
specifier|private
name|File
name|getBinDir
parameter_list|()
block|{
name|File
name|binDir
init|=
operator|new
name|File
argument_list|(
name|hadoopHome
argument_list|,
literal|"bin"
argument_list|)
decl_stmt|;
return|return
name|binDir
return|;
block|}
DECL|method|getCommand (String command, String confDir)
specifier|protected
name|String
index|[]
name|getCommand
parameter_list|(
name|String
name|command
parameter_list|,
name|String
name|confDir
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|cmdArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|File
name|binDir
init|=
name|getBinDir
argument_list|()
decl_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
literal|"ssh"
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|binDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|SCRIPT_NAME
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
literal|"--config"
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|confDir
argument_list|)
expr_stmt|;
comment|// XXX Twenty internal version does not support --script option.
name|cmdArgs
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|cmdArgs
operator|.
name|add
argument_list|(
name|daemonName
argument_list|)
expr_stmt|;
return|return
operator|(
name|String
index|[]
operator|)
name|cmdArgs
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|cmdArgs
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|kill ()
specifier|public
name|void
name|kill
parameter_list|()
throws|throws
name|IOException
block|{
name|kill
argument_list|(
name|hadoopConfDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|start
argument_list|(
name|hadoopConfDir
argument_list|)
expr_stmt|;
block|}
DECL|method|start (String newConfLocation)
specifier|public
name|void
name|start
parameter_list|(
name|String
name|newConfLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|ShellCommandExecutor
name|cme
init|=
name|buildCommandExecutor
argument_list|(
name|START_COMMAND
argument_list|,
name|newConfLocation
argument_list|)
decl_stmt|;
name|cme
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|cme
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//getOutput() never returns null value
if|if
condition|(
name|output
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"error"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error is detected."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Start error\n"
operator|+
name|output
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|kill (String newConfLocation)
specifier|public
name|void
name|kill
parameter_list|(
name|String
name|newConfLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|ShellCommandExecutor
name|cme
init|=
name|buildCommandExecutor
argument_list|(
name|STOP_COMMAND
argument_list|,
name|newConfLocation
argument_list|)
decl_stmt|;
name|cme
operator|.
name|execute
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|cme
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|output
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//getOutput() never returns null value
if|if
condition|(
name|output
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"error"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error is detected."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Kill error\n"
operator|+
name|output
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getRole ()
specifier|public
name|Enum
argument_list|<
name|?
argument_list|>
name|getRole
parameter_list|()
block|{
return|return
name|role
return|;
block|}
block|}
block|}
end_class

end_unit

