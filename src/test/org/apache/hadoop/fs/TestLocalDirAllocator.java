begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** This test LocalDirAllocator works correctly;  * Every test case uses different buffer dirs to   * enforce the AllocatorPerContext initialization.  * This test does not run on Cygwin because under Cygwin  * a directory can be created in a read-only directory  * which breaks this test.  */
end_comment

begin_class
DECL|class|TestLocalDirAllocator
specifier|public
class|class
name|TestLocalDirAllocator
extends|extends
name|TestCase
block|{
DECL|field|conf
specifier|final
specifier|static
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|BUFFER_DIR_ROOT
specifier|final
specifier|static
specifier|private
name|String
name|BUFFER_DIR_ROOT
init|=
literal|"build/test/temp"
decl_stmt|;
DECL|field|BUFFER_PATH_ROOT
specifier|final
specifier|static
specifier|private
name|Path
name|BUFFER_PATH_ROOT
init|=
operator|new
name|Path
argument_list|(
name|BUFFER_DIR_ROOT
argument_list|)
decl_stmt|;
DECL|field|BUFFER_ROOT
specifier|final
specifier|static
specifier|private
name|File
name|BUFFER_ROOT
init|=
operator|new
name|File
argument_list|(
name|BUFFER_DIR_ROOT
argument_list|)
decl_stmt|;
DECL|field|BUFFER_DIR
specifier|final
specifier|static
specifier|private
name|String
name|BUFFER_DIR
index|[]
init|=
operator|new
name|String
index|[]
block|{
name|BUFFER_DIR_ROOT
operator|+
literal|"/tmp0"
block|,
name|BUFFER_DIR_ROOT
operator|+
literal|"/tmp1"
block|,
name|BUFFER_DIR_ROOT
operator|+
literal|"/tmp2"
block|,
name|BUFFER_DIR_ROOT
operator|+
literal|"/tmp3"
block|,
name|BUFFER_DIR_ROOT
operator|+
literal|"/tmp4"
block|,
name|BUFFER_DIR_ROOT
operator|+
literal|"/tmp5"
block|,
name|BUFFER_DIR_ROOT
operator|+
literal|"/tmp6"
block|}
decl_stmt|;
DECL|field|BUFFER_PATH
specifier|final
specifier|static
specifier|private
name|Path
name|BUFFER_PATH
index|[]
init|=
operator|new
name|Path
index|[]
block|{
operator|new
name|Path
argument_list|(
name|BUFFER_DIR
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|BUFFER_DIR
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|BUFFER_DIR
index|[
literal|2
index|]
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|BUFFER_DIR
index|[
literal|3
index|]
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|BUFFER_DIR
index|[
literal|4
index|]
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|BUFFER_DIR
index|[
literal|5
index|]
argument_list|)
block|,
operator|new
name|Path
argument_list|(
name|BUFFER_DIR
index|[
literal|6
index|]
argument_list|)
block|}
decl_stmt|;
DECL|field|CONTEXT
specifier|final
specifier|static
specifier|private
name|String
name|CONTEXT
init|=
literal|"dfs.client.buffer.dir"
decl_stmt|;
DECL|field|FILENAME
specifier|final
specifier|static
specifier|private
name|String
name|FILENAME
init|=
literal|"block"
decl_stmt|;
DECL|field|dirAllocator
specifier|final
specifier|static
specifier|private
name|LocalDirAllocator
name|dirAllocator
init|=
operator|new
name|LocalDirAllocator
argument_list|(
name|CONTEXT
argument_list|)
decl_stmt|;
DECL|field|localFs
specifier|static
name|LocalFileSystem
name|localFs
decl_stmt|;
DECL|field|isWindows
specifier|final
specifier|static
specifier|private
name|boolean
name|isWindows
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
decl_stmt|;
DECL|field|SMALL_FILE_SIZE
specifier|final
specifier|static
name|int
name|SMALL_FILE_SIZE
init|=
literal|100
decl_stmt|;
static|static
block|{
try|try
block|{
name|localFs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rmBufferDirs ()
specifier|private
specifier|static
name|void
name|rmBufferDirs
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
operator|!
name|localFs
operator|.
name|exists
argument_list|(
name|BUFFER_PATH_ROOT
argument_list|)
operator|||
name|localFs
operator|.
name|delete
argument_list|(
name|BUFFER_PATH_ROOT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateTempDirCreation (int i)
specifier|private
name|void
name|validateTempDirCreation
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|result
init|=
name|createTempFile
argument_list|(
name|SMALL_FILE_SIZE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Checking for "
operator|+
name|BUFFER_DIR
index|[
name|i
index|]
operator|+
literal|" in "
operator|+
name|result
operator|+
literal|" - FAILED!"
argument_list|,
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
operator|new
name|File
argument_list|(
name|BUFFER_DIR
index|[
name|i
index|]
argument_list|,
name|FILENAME
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createTempFile ()
specifier|private
name|File
name|createTempFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|result
init|=
name|dirAllocator
operator|.
name|createTmpFileForWrite
argument_list|(
name|FILENAME
argument_list|,
operator|-
literal|1
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createTempFile (long size)
specifier|private
name|File
name|createTempFile
parameter_list|(
name|long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|result
init|=
name|dirAllocator
operator|.
name|createTmpFileForWrite
argument_list|(
name|FILENAME
argument_list|,
name|size
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** Two buffer dirs. The first dir does not exist& is on a read-only disk;     * The second dir exists& is RW    * @throws Exception    */
DECL|method|test0 ()
specifier|public
name|void
name|test0
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|BUFFER_DIR
index|[
literal|0
index|]
operator|+
literal|","
operator|+
name|BUFFER_DIR
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
name|BUFFER_PATH
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|BUFFER_ROOT
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|validateTempDirCreation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"u+w"
block|,
name|BUFFER_DIR_ROOT
block|}
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two buffer dirs. The first dir exists& is on a read-only disk;     * The second dir exists& is RW    * @throws Exception    */
DECL|method|test1 ()
specifier|public
name|void
name|test1
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|BUFFER_DIR
index|[
literal|1
index|]
operator|+
literal|","
operator|+
name|BUFFER_DIR
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
name|BUFFER_PATH
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|BUFFER_ROOT
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|validateTempDirCreation
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Shell
operator|.
name|execCommand
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"chmod"
block|,
literal|"u+w"
block|,
name|BUFFER_DIR_ROOT
block|}
argument_list|)
expr_stmt|;
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two buffer dirs. Both do not exist but on a RW disk.    * Check if tmp dirs are allocated in a round-robin     */
DECL|method|test2 ()
specifier|public
name|void
name|test2
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|BUFFER_DIR
index|[
literal|2
index|]
operator|+
literal|","
operator|+
name|BUFFER_DIR
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// create the first file, and then figure the round-robin sequence
name|createTempFile
argument_list|(
name|SMALL_FILE_SIZE
argument_list|)
expr_stmt|;
name|int
name|firstDirIdx
init|=
operator|(
name|dirAllocator
operator|.
name|getCurrentDirectoryIndex
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|2
else|:
literal|3
decl_stmt|;
name|int
name|secondDirIdx
init|=
operator|(
name|firstDirIdx
operator|==
literal|2
operator|)
condition|?
literal|3
else|:
literal|2
decl_stmt|;
comment|// check if tmp dirs are allocated in a round-robin manner
name|validateTempDirCreation
argument_list|(
name|firstDirIdx
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|secondDirIdx
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
name|firstDirIdx
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Two buffer dirs. Both exists and on a R/W disk.     * Later disk1 becomes read-only.    * @throws Exception    */
DECL|method|test3 ()
specifier|public
name|void
name|test3
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|BUFFER_DIR
index|[
literal|3
index|]
operator|+
literal|","
operator|+
name|BUFFER_DIR
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
name|BUFFER_PATH
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
name|BUFFER_PATH
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// create the first file with size, and then figure the round-robin sequence
name|createTempFile
argument_list|(
name|SMALL_FILE_SIZE
argument_list|)
expr_stmt|;
name|int
name|nextDirIdx
init|=
operator|(
name|dirAllocator
operator|.
name|getCurrentDirectoryIndex
argument_list|()
operator|==
literal|0
operator|)
condition|?
literal|3
else|:
literal|4
decl_stmt|;
name|validateTempDirCreation
argument_list|(
name|nextDirIdx
argument_list|)
expr_stmt|;
comment|// change buffer directory 2 to be read only
operator|new
name|File
argument_list|(
name|BUFFER_DIR
index|[
literal|4
index|]
argument_list|)
operator|.
name|setReadOnly
argument_list|()
expr_stmt|;
name|validateTempDirCreation
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|validateTempDirCreation
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Two buffer dirs, on read-write disk.    *     * Try to create a whole bunch of files.    *  Verify that they do indeed all get created where they should.    *      *  Would ideally check statistical properties of distribution, but    *  we don't have the nerve to risk false-positives here.    *     * @throws Exception    */
DECL|field|TRIALS
specifier|static
specifier|final
name|int
name|TRIALS
init|=
literal|100
decl_stmt|;
DECL|method|test4 ()
specifier|public
name|void
name|test4
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isWindows
condition|)
return|return;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CONTEXT
argument_list|,
name|BUFFER_DIR
index|[
literal|5
index|]
operator|+
literal|","
operator|+
name|BUFFER_DIR
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
name|BUFFER_PATH
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|localFs
operator|.
name|mkdirs
argument_list|(
name|BUFFER_PATH
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|inDir5
init|=
literal|0
decl_stmt|,
name|inDir6
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TRIALS
condition|;
operator|++
name|i
control|)
block|{
name|File
name|result
init|=
name|createTempFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
operator|new
name|File
argument_list|(
name|BUFFER_DIR
index|[
literal|5
index|]
argument_list|,
name|FILENAME
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|inDir5
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
operator|new
name|File
argument_list|(
name|BUFFER_DIR
index|[
literal|6
index|]
argument_list|,
name|FILENAME
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|inDir6
operator|++
expr_stmt|;
block|}
name|result
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|inDir5
operator|+
name|inDir6
operator|==
name|TRIALS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmBufferDirs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

