begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TestShell
specifier|public
class|class
name|TestShell
extends|extends
name|TestCase
block|{
DECL|class|Command
specifier|private
specifier|static
class|class
name|Command
extends|extends
name|Shell
block|{
DECL|field|runCount
specifier|private
name|int
name|runCount
init|=
literal|0
decl_stmt|;
DECL|method|Command (long interval)
specifier|private
name|Command
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
DECL|method|getExecString ()
specifier|protected
name|String
index|[]
name|getExecString
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"echo"
block|,
literal|"hello"
block|}
return|;
block|}
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
operator|++
name|runCount
expr_stmt|;
block|}
DECL|method|getRunCount ()
specifier|public
name|int
name|getRunCount
parameter_list|()
block|{
return|return
name|runCount
return|;
block|}
block|}
DECL|method|testInterval ()
specifier|public
name|void
name|testInterval
parameter_list|()
throws|throws
name|IOException
block|{
name|testInterval
argument_list|(
name|Long
operator|.
name|MIN_VALUE
operator|/
literal|60000
argument_list|)
expr_stmt|;
comment|// test a negative interval
name|testInterval
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
comment|// test a zero interval
name|testInterval
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
comment|// interval equal to 10mins
name|testInterval
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|60000
operator|+
literal|60
argument_list|)
expr_stmt|;
comment|// test a very big interval
block|}
comment|/**    * Assert that a string has a substring in it    * @param string string to search    * @param search what to search for it    */
DECL|method|assertInString (String string, String search)
specifier|private
name|void
name|assertInString
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|search
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Empty String"
argument_list|,
name|string
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|string
operator|.
name|contains
argument_list|(
name|search
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Did not find \""
operator|+
name|search
operator|+
literal|"\" in "
operator|+
name|string
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShellCommandExecutorToString ()
specifier|public
name|void
name|testShellCommandExecutorToString
parameter_list|()
throws|throws
name|Throwable
block|{
name|Shell
operator|.
name|ShellCommandExecutor
name|sce
init|=
operator|new
name|Shell
operator|.
name|ShellCommandExecutor
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ls"
block|,
literal|".."
block|,
literal|"arg 2"
block|}
argument_list|)
decl_stmt|;
name|String
name|command
init|=
name|sce
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertInString
argument_list|(
name|command
argument_list|,
literal|"ls"
argument_list|)
expr_stmt|;
name|assertInString
argument_list|(
name|command
argument_list|,
literal|" .. "
argument_list|)
expr_stmt|;
name|assertInString
argument_list|(
name|command
argument_list|,
literal|"\"arg 2\""
argument_list|)
expr_stmt|;
block|}
DECL|method|testInterval (long interval)
specifier|private
name|void
name|testInterval
parameter_list|(
name|long
name|interval
parameter_list|)
throws|throws
name|IOException
block|{
name|Command
name|command
init|=
operator|new
name|Command
argument_list|(
name|interval
argument_list|)
decl_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|command
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
if|if
condition|(
name|interval
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|command
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|command
operator|.
name|getRunCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

