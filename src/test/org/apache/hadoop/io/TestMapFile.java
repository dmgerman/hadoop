begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestMapFile
specifier|public
class|class
name|TestMapFile
extends|extends
name|TestCase
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|/**    * Test getClosest feature.    * @throws Exception    */
DECL|method|testGetClosest ()
specifier|public
name|void
name|testGetClosest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write a mapfile of simple data: keys are
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
name|getName
argument_list|()
operator|+
literal|".mapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
comment|// Make an index entry for every third insertion.
name|MapFile
operator|.
name|Writer
operator|.
name|setIndexInterval
argument_list|(
name|conf
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Assert that the index interval is 1
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|writer
operator|.
name|getIndexInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add entries up to 100 in intervals of ten.
specifier|final
name|int
name|FIRST_KEY
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|FIRST_KEY
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|String
name|iStr
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
literal|"00"
operator|.
name|substring
argument_list|(
name|iStr
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|iStr
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now do getClosest on created mapfile.
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
literal|"55"
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|Text
name|closest
init|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// Assert that closest after 55 is 60
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"60"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Get closest that falls before the passed key: 50
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"50"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Test get closest when we pass explicit key
specifier|final
name|Text
name|TWENTY
init|=
operator|new
name|Text
argument_list|(
literal|"20"
argument_list|)
decl_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|TWENTY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWENTY
argument_list|,
name|closest
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|TWENTY
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TWENTY
argument_list|,
name|closest
argument_list|)
expr_stmt|;
comment|// Test what happens at boundaries.  Assert if searching a key that is
comment|// less than first key in the mapfile, that the first key is returned.
name|key
operator|=
operator|new
name|Text
argument_list|(
literal|"00"
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FIRST_KEY
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|closest
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we're looking for the first key before, and we pass in a key before
comment|// the first key in the file, we should get null
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|closest
argument_list|)
expr_stmt|;
comment|// Assert that null is returned if key is> last entry in mapfile.
name|key
operator|=
operator|new
name|Text
argument_list|(
literal|"99"
argument_list|)
expr_stmt|;
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|closest
argument_list|)
expr_stmt|;
comment|// If we were looking for the key before, we should get the last key
name|closest
operator|=
operator|(
name|Text
operator|)
name|reader
operator|.
name|getClosest
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"90"
argument_list|)
argument_list|,
name|closest
argument_list|)
expr_stmt|;
block|}
DECL|method|testMidKey ()
specifier|public
name|void
name|testMidKey
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write a mapfile of simple data: keys are
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
name|getName
argument_list|()
operator|+
literal|".mapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now do getClosest on created mapfile.
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|reader
operator|.
name|midKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMidKeyEmpty ()
specifier|public
name|void
name|testMidKeyEmpty
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Write a mapfile of simple data: keys are
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
name|getName
argument_list|()
operator|+
literal|".mapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|MapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|MapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now do getClosest on created mapfile.
name|MapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|MapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|reader
operator|.
name|midKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

