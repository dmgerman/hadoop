begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestWritableUtils
specifier|public
class|class
name|TestWritableUtils
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWritableUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|testValue (int val, int vintlen)
specifier|public
specifier|static
name|void
name|testValue
parameter_list|(
name|int
name|val
parameter_list|,
name|int
name|vintlen
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|buf
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|DataInputBuffer
name|inbuf
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|buf
argument_list|,
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Value = "
operator|+
name|val
argument_list|)
expr_stmt|;
name|BytesWritable
name|printer
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|printer
operator|.
name|set
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Buffer = "
operator|+
name|printer
argument_list|)
expr_stmt|;
block|}
name|inbuf
operator|.
name|reset
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|inbuf
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vintlen
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vintlen
argument_list|,
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|vintlen
argument_list|,
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|buf
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testVInt ()
specifier|public
specifier|static
name|void
name|testVInt
parameter_list|()
throws|throws
name|Exception
block|{
name|testValue
argument_list|(
literal|12
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
literal|127
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|112
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|113
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|128
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
literal|128
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|129
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
literal|255
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|256
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
literal|256
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|257
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
literal|65535
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|65536
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
literal|65536
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|testValue
argument_list|(
operator|-
literal|65537
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

