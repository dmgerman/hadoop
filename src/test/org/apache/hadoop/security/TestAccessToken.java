begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|TestWritable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Unit tests for access tokens */
end_comment

begin_class
DECL|class|TestAccessToken
specifier|public
class|class
name|TestAccessToken
extends|extends
name|TestCase
block|{
DECL|field|accessKeyUpdateInterval
name|long
name|accessKeyUpdateInterval
init|=
literal|10
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 10 mins
DECL|field|accessTokenLifetime
name|long
name|accessTokenLifetime
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 2 mins
DECL|field|blockID1
name|long
name|blockID1
init|=
literal|0L
decl_stmt|;
DECL|field|blockID2
name|long
name|blockID2
init|=
literal|10L
decl_stmt|;
DECL|field|blockID3
name|long
name|blockID3
init|=
operator|-
literal|108L
decl_stmt|;
comment|/** test Writable */
DECL|method|testWritable ()
specifier|public
name|void
name|testWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|ExportedAccessKeys
operator|.
name|DUMMY_KEYS
argument_list|)
expr_stmt|;
name|AccessTokenHandler
name|handler
init|=
operator|new
name|AccessTokenHandler
argument_list|(
literal|true
argument_list|,
name|accessKeyUpdateInterval
argument_list|,
name|accessTokenLifetime
argument_list|)
decl_stmt|;
name|ExportedAccessKeys
name|keys
init|=
name|handler
operator|.
name|exportKeys
argument_list|()
decl_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|AccessToken
operator|.
name|DUMMY_TOKEN
argument_list|)
expr_stmt|;
name|AccessToken
name|token
init|=
name|handler
operator|.
name|generateToken
argument_list|(
name|blockID3
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|AccessTokenHandler
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|tokenGenerationAndVerification (AccessTokenHandler master, AccessTokenHandler slave)
specifier|private
name|void
name|tokenGenerationAndVerification
parameter_list|(
name|AccessTokenHandler
name|master
parameter_list|,
name|AccessTokenHandler
name|slave
parameter_list|)
throws|throws
name|Exception
block|{
comment|// single-mode tokens
for|for
control|(
name|AccessTokenHandler
operator|.
name|AccessMode
name|mode
range|:
name|AccessTokenHandler
operator|.
name|AccessMode
operator|.
name|values
argument_list|()
control|)
block|{
comment|// generated by master
name|AccessToken
name|token1
init|=
name|master
operator|.
name|generateToken
argument_list|(
name|blockID1
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|checkAccess
argument_list|(
name|token1
argument_list|,
literal|null
argument_list|,
name|blockID1
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slave
operator|.
name|checkAccess
argument_list|(
name|token1
argument_list|,
literal|null
argument_list|,
name|blockID1
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
comment|// generated by slave
name|AccessToken
name|token2
init|=
name|slave
operator|.
name|generateToken
argument_list|(
name|blockID2
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|checkAccess
argument_list|(
name|token2
argument_list|,
literal|null
argument_list|,
name|blockID2
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slave
operator|.
name|checkAccess
argument_list|(
name|token2
argument_list|,
literal|null
argument_list|,
name|blockID2
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// multi-mode tokens
name|AccessToken
name|mtoken
init|=
name|master
operator|.
name|generateToken
argument_list|(
name|blockID3
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|AccessTokenHandler
operator|.
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessTokenHandler
operator|.
name|AccessMode
name|mode
range|:
name|AccessTokenHandler
operator|.
name|AccessMode
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|master
operator|.
name|checkAccess
argument_list|(
name|mtoken
argument_list|,
literal|null
argument_list|,
name|blockID3
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slave
operator|.
name|checkAccess
argument_list|(
name|mtoken
argument_list|,
literal|null
argument_list|,
name|blockID3
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** test access key and token handling */
DECL|method|testAccessTokenHandler ()
specifier|public
name|void
name|testAccessTokenHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTokenHandler
name|masterHandler
init|=
operator|new
name|AccessTokenHandler
argument_list|(
literal|true
argument_list|,
name|accessKeyUpdateInterval
argument_list|,
name|accessTokenLifetime
argument_list|)
decl_stmt|;
name|AccessTokenHandler
name|slaveHandler
init|=
operator|new
name|AccessTokenHandler
argument_list|(
literal|false
argument_list|,
name|accessKeyUpdateInterval
argument_list|,
name|accessTokenLifetime
argument_list|)
decl_stmt|;
name|ExportedAccessKeys
name|keys
init|=
name|masterHandler
operator|.
name|exportKeys
argument_list|()
decl_stmt|;
name|slaveHandler
operator|.
name|setKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|)
expr_stmt|;
comment|// key updating
name|masterHandler
operator|.
name|updateKeys
argument_list|()
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|)
expr_stmt|;
name|keys
operator|=
name|masterHandler
operator|.
name|exportKeys
argument_list|()
expr_stmt|;
name|slaveHandler
operator|.
name|setKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|tokenGenerationAndVerification
argument_list|(
name|masterHandler
argument_list|,
name|slaveHandler
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

