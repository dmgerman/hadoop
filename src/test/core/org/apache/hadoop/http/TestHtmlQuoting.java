begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestHtmlQuoting
specifier|public
class|class
name|TestHtmlQuoting
block|{
DECL|method|testNeedsQuoting ()
annotation|@
name|Test
specifier|public
name|void
name|testNeedsQuoting
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|HtmlQuoting
operator|.
name|needsQuoting
argument_list|(
literal|"abcde>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HtmlQuoting
operator|.
name|needsQuoting
argument_list|(
literal|"<abcde"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HtmlQuoting
operator|.
name|needsQuoting
argument_list|(
literal|"abc'de"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HtmlQuoting
operator|.
name|needsQuoting
argument_list|(
literal|"abcde\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|HtmlQuoting
operator|.
name|needsQuoting
argument_list|(
literal|"&"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HtmlQuoting
operator|.
name|needsQuoting
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HtmlQuoting
operator|.
name|needsQuoting
argument_list|(
literal|"ab\ncdef"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testQuoting ()
annotation|@
name|Test
specifier|public
name|void
name|testQuoting
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"ab&lt;cd"
argument_list|,
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
literal|"ab<cd"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab&gt;"
argument_list|,
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
literal|"ab>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&amp;&amp;&amp;"
argument_list|,
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
literal|"&&&"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&apos;\n"
argument_list|,
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
literal|" '\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"&quot;"
argument_list|,
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|runRoundTrip (String str)
specifier|private
name|void
name|runRoundTrip
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|str
argument_list|,
name|HtmlQuoting
operator|.
name|unquoteHtmlChars
argument_list|(
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|str
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRoundtrip ()
annotation|@
name|Test
specifier|public
name|void
name|testRoundtrip
parameter_list|()
throws|throws
name|Exception
block|{
name|runRoundTrip
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|runRoundTrip
argument_list|(
literal|"<>&'\""
argument_list|)
expr_stmt|;
name|runRoundTrip
argument_list|(
literal|"ab>cd<ef&ghi'\""
argument_list|)
expr_stmt|;
name|runRoundTrip
argument_list|(
literal|"A string\n with no quotable chars in it!"
argument_list|)
expr_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|char
name|ch
init|=
literal|0
init|;
name|ch
operator|<
literal|127
condition|;
operator|++
name|ch
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|runRoundTrip
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

