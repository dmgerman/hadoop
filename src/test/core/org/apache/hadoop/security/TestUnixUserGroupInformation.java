begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|TestWritable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Unit tests for UnixUserGroupInformation */
end_comment

begin_class
DECL|class|TestUnixUserGroupInformation
specifier|public
class|class
name|TestUnixUserGroupInformation
extends|extends
name|TestCase
block|{
DECL|field|USER_NAME
specifier|final
specifier|private
specifier|static
name|String
name|USER_NAME
init|=
literal|"user1"
decl_stmt|;
DECL|field|GROUP1_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP1_NAME
init|=
literal|"group1"
decl_stmt|;
DECL|field|GROUP2_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP2_NAME
init|=
literal|"group2"
decl_stmt|;
DECL|field|GROUP3_NAME
specifier|final
specifier|private
specifier|static
name|String
name|GROUP3_NAME
init|=
literal|"group3"
decl_stmt|;
DECL|field|GROUP_NAMES
specifier|final
specifier|private
specifier|static
name|String
index|[]
name|GROUP_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
name|GROUP2_NAME
block|,
name|GROUP3_NAME
block|}
decl_stmt|;
comment|/** Test login method */
DECL|method|testLogin ()
specifier|public
name|void
name|testLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// loin from unix
name|String
name|userName
init|=
name|UnixUserGroupInformation
operator|.
name|getUnixUserName
argument_list|()
decl_stmt|;
name|UnixUserGroupInformation
name|curUserGroupInfo
init|=
name|UnixUserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|curUserGroupInfo
operator|.
name|getUserName
argument_list|()
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curUserGroupInfo
operator|==
name|UnixUserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// login from the configuration
name|UnixUserGroupInformation
name|userGroupInfo
init|=
operator|new
name|UnixUserGroupInformation
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|UnixUserGroupInformation
operator|.
name|saveToConf
argument_list|(
name|conf
argument_list|,
name|UnixUserGroupInformation
operator|.
name|UGI_PROPERTY_NAME
argument_list|,
name|userGroupInfo
argument_list|)
expr_stmt|;
name|curUserGroupInfo
operator|=
name|UnixUserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|curUserGroupInfo
argument_list|,
name|userGroupInfo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|curUserGroupInfo
operator|==
name|UnixUserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test constructor */
DECL|method|testConstructor ()
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|UnixUserGroupInformation
name|uugi
init|=
operator|new
name|UnixUserGroupInformation
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uugi
argument_list|,
operator|new
name|UnixUserGroupInformation
argument_list|(
operator|new
name|String
index|[]
block|{
name|USER_NAME
block|,
name|GROUP1_NAME
block|,
name|GROUP2_NAME
block|,
name|GROUP3_NAME
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// failure test
name|testConstructorFailures
argument_list|(
literal|null
argument_list|,
name|GROUP_NAMES
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
literal|""
argument_list|,
name|GROUP_NAMES
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
name|USER_NAME
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
name|USER_NAME
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
name|USER_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
name|USER_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
name|USER_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
literal|null
block|}
argument_list|)
expr_stmt|;
name|testConstructorFailures
argument_list|(
name|USER_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
literal|null
block|,
name|GROUP2_NAME
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testConstructorFailures (String userName, String[] groupNames)
specifier|private
name|void
name|testConstructorFailures
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
index|[]
name|groupNames
parameter_list|)
block|{
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
try|try
block|{
operator|new
name|UnixUserGroupInformation
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|gotException
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquals ()
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|UnixUserGroupInformation
name|uugi
init|=
operator|new
name|UnixUserGroupInformation
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uugi
argument_list|,
name|uugi
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uugi
argument_list|,
operator|new
name|UnixUserGroupInformation
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uugi
argument_list|,
operator|new
name|UnixUserGroupInformation
argument_list|(
name|USER_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP1_NAME
block|,
name|GROUP3_NAME
block|,
name|GROUP2_NAME
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uugi
operator|.
name|equals
argument_list|(
operator|new
name|UnixUserGroupInformation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uugi
operator|.
name|equals
argument_list|(
operator|new
name|UnixUserGroupInformation
argument_list|(
name|USER_NAME
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP2_NAME
block|,
name|GROUP3_NAME
block|,
name|GROUP1_NAME
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** test Writable */
DECL|method|testWritable ()
specifier|public
name|void
name|testWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|UnixUserGroupInformation
name|ugi
init|=
operator|new
name|UnixUserGroupInformation
argument_list|(
name|USER_NAME
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|ugi
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

