begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authorize
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestProxyUsers
specifier|public
class|class
name|TestProxyUsers
block|{
DECL|field|REAL_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|REAL_USER_NAME
init|=
literal|"proxier"
decl_stmt|;
DECL|field|PROXY_USER_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_USER_NAME
init|=
literal|"proxied_user"
decl_stmt|;
DECL|field|GROUP_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|GROUP_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"foo_group"
block|}
decl_stmt|;
DECL|field|OTHER_GROUP_NAMES
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|OTHER_GROUP_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"bar_group"
block|}
decl_stmt|;
DECL|field|PROXY_IP
specifier|private
specifier|static
specifier|final
name|String
name|PROXY_IP
init|=
literal|"1.2.3.4"
decl_stmt|;
annotation|@
name|Test
DECL|method|testProxyUsers ()
specifier|public
name|void
name|testProxyUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_NAME
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|GROUP_NAMES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|REAL_USER_NAME
argument_list|)
argument_list|,
name|PROXY_IP
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// First try proxying a group that's allowed
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
comment|// From good IP
name|assertAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
comment|// From bad IP
name|assertNotAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.5"
argument_list|)
expr_stmt|;
comment|// Now try proxying a group that's not allowed
name|realUserUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
expr_stmt|;
name|proxyUserUgi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|OTHER_GROUP_NAMES
argument_list|)
expr_stmt|;
comment|// From good IP
name|assertNotAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
comment|// From bad IP
name|assertNotAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardGroup ()
specifier|public
name|void
name|testWildcardGroup
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_NAME
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|REAL_USER_NAME
argument_list|)
argument_list|,
name|PROXY_IP
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// First try proxying a group that's allowed
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
comment|// From good IP
name|assertAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
comment|// From bad IP
name|assertNotAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.5"
argument_list|)
expr_stmt|;
comment|// Now try proxying a different group (just to make sure we aren't getting spill over
comment|// from the other test case!)
name|realUserUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
expr_stmt|;
name|proxyUserUgi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|OTHER_GROUP_NAMES
argument_list|)
expr_stmt|;
comment|// From good IP
name|assertAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
comment|// From bad IP
name|assertNotAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWildcardIP ()
specifier|public
name|void
name|testWildcardIP
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|getProxySuperuserGroupConfKey
argument_list|(
name|REAL_USER_NAME
argument_list|)
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|GROUP_NAMES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ProxyUsers
operator|.
name|getProxySuperuserIpConfKey
argument_list|(
name|REAL_USER_NAME
argument_list|)
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// First try proxying a group that's allowed
name|UserGroupInformation
name|realUserUgi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|proxyUserUgi
init|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|GROUP_NAMES
argument_list|)
decl_stmt|;
comment|// From either IP should be fine
name|assertAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|assertAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.5"
argument_list|)
expr_stmt|;
comment|// Now set up an unallowed group
name|realUserUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|REAL_USER_NAME
argument_list|)
expr_stmt|;
name|proxyUserUgi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUserForTesting
argument_list|(
name|PROXY_USER_NAME
argument_list|,
name|realUserUgi
argument_list|,
name|OTHER_GROUP_NAMES
argument_list|)
expr_stmt|;
comment|// Neither IP should be OK
name|assertNotAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|assertNotAuthorized
argument_list|(
name|proxyUserUgi
argument_list|,
literal|"1.2.3.5"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNotAuthorized (UserGroupInformation proxyUgi, String host)
specifier|private
name|void
name|assertNotAuthorized
parameter_list|(
name|UserGroupInformation
name|proxyUgi
parameter_list|,
name|String
name|host
parameter_list|)
block|{
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|proxyUgi
argument_list|,
name|host
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Allowed authorization of "
operator|+
name|proxyUgi
operator|+
literal|" from "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
DECL|method|assertAuthorized (UserGroupInformation proxyUgi, String host)
specifier|private
name|void
name|assertAuthorized
parameter_list|(
name|UserGroupInformation
name|proxyUgi
parameter_list|,
name|String
name|host
parameter_list|)
block|{
try|try
block|{
name|ProxyUsers
operator|.
name|authorize
argument_list|(
name|proxyUgi
argument_list|,
name|host
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Did not allowed authorization of "
operator|+
name|proxyUgi
operator|+
literal|" from "
operator|+
name|host
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

