begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|kerberos
operator|.
name|KerberosPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSecurityUtil
specifier|public
class|class
name|TestSecurityUtil
block|{
annotation|@
name|Test
DECL|method|isOriginalTGTReturnsCorrectValues ()
specifier|public
name|void
name|isOriginalTGTReturnsCorrectValues
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
literal|"krbtgt/foo@foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
literal|"krbtgt/foo.bar.bat@foo.bar.bat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
literal|"blah"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
literal|"krbtgt/hello"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
literal|"/@"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|SecurityUtil
operator|.
name|isTGSPrincipal
argument_list|(
operator|new
name|KerberosPrincipal
argument_list|(
literal|"krbtgt/foo@FOO"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verify (String original, String hostname, String expected)
specifier|private
name|void
name|verify
parameter_list|(
name|String
name|original
parameter_list|,
name|String
name|hostname
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|original
argument_list|,
name|hostname
argument_list|)
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|original
argument_list|,
literal|null
argument_list|)
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|original
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SecurityUtil
operator|.
name|getServerPrincipal
argument_list|(
name|original
argument_list|,
literal|"0.0.0.0"
argument_list|)
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetServerPrincipal ()
specifier|public
name|void
name|testGetServerPrincipal
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|service
init|=
literal|"hdfs/"
decl_stmt|;
name|String
name|realm
init|=
literal|"@REALM"
decl_stmt|;
name|String
name|hostname
init|=
name|SecurityUtil
operator|.
name|getLocalHostName
argument_list|()
decl_stmt|;
name|String
name|shouldReplace
init|=
name|service
operator|+
name|SecurityUtil
operator|.
name|HOSTNAME_PATTERN
operator|+
name|realm
decl_stmt|;
name|String
name|replaced
init|=
name|service
operator|+
name|hostname
operator|+
name|realm
decl_stmt|;
name|verify
argument_list|(
name|shouldReplace
argument_list|,
name|hostname
argument_list|,
name|replaced
argument_list|)
expr_stmt|;
name|String
name|shouldNotReplace
init|=
name|service
operator|+
name|SecurityUtil
operator|.
name|HOSTNAME_PATTERN
operator|+
literal|"NAME"
operator|+
name|realm
decl_stmt|;
name|verify
argument_list|(
name|shouldNotReplace
argument_list|,
name|hostname
argument_list|,
name|shouldNotReplace
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|shouldNotReplace
argument_list|,
name|shouldNotReplace
argument_list|,
name|shouldNotReplace
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

