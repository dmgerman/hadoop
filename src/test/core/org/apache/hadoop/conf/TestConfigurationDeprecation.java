begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestConfigurationDeprecation
specifier|public
class|class
name|TestConfigurationDeprecation
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|CONFIG
specifier|final
specifier|static
name|String
name|CONFIG
init|=
operator|new
name|File
argument_list|(
literal|"./test-config.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG2
specifier|final
specifier|static
name|String
name|CONFIG2
init|=
operator|new
name|File
argument_list|(
literal|"./test-config2.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|CONFIG3
specifier|final
specifier|static
name|String
name|CONFIG3
init|=
operator|new
name|File
argument_list|(
literal|"./test-config3.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|out
name|BufferedWriter
name|out
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|File
argument_list|(
name|CONFIG
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG2
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
operator|new
name|File
argument_list|(
name|CONFIG3
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
DECL|method|startConfig ()
specifier|private
name|void
name|startConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<configuration>\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|endConfig ()
specifier|private
name|void
name|endConfig
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"</configuration>\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|appendProperty (String name, String val)
name|void
name|appendProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|appendProperty
argument_list|(
name|name
argument_list|,
name|val
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|appendProperty (String name, String val, boolean isFinal)
name|void
name|appendProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|isFinal
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<property>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</name>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"<value>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"</value>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFinal
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"<final>true</final>"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|write
argument_list|(
literal|"</property>\n"
argument_list|)
expr_stmt|;
block|}
DECL|class|MyConf
specifier|static
class|class
name|MyConf
extends|extends
name|Configuration
block|{
static|static
block|{
comment|// add deprecation mappings.
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key1"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key2"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key3"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key3"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key4"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key4"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key5"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key5"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key6"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key6"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key7"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key7"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key8"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key8"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key9"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key9"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key10"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key10"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key11"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key11"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key12"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key12"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key13"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key13"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key14"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key14"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key15"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key15"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"old.key16"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"new.key16"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"A"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"B"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"C"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"D"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"E"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"F"
block|}
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDeprecation
argument_list|(
literal|"G"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"H"
block|,
literal|"I"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test is to check the precedence order between being final and     * deprecation.Based on the order of occurrence of deprecated key and     * its corresponding mapping key, various cases arise.    * The precedence order being followed is:    * 1. Final Parameter     * 2. Deprecated key's value.    * @throws IOException     *     * @throws IOException    * @throws ClassNotFoundException     */
annotation|@
name|Test
DECL|method|testDeprecation ()
specifier|public
name|void
name|testDeprecation
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
name|appendProperty
argument_list|(
literal|"hadoop.conf.extra.classes"
argument_list|,
name|MyConf
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|",myconf1"
argument_list|)
expr_stmt|;
comment|// load keys with default values. Some of them are set to final to
comment|// test the precedence order between deprecation and being final
name|appendProperty
argument_list|(
literal|"new.key1"
argument_list|,
literal|"default.value1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key2"
argument_list|,
literal|"default.value2"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key3"
argument_list|,
literal|"default.value3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key4"
argument_list|,
literal|"default.value4"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key5"
argument_list|,
literal|"default.value5"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key6"
argument_list|,
literal|"default.value6"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key7"
argument_list|,
literal|"default.value7"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key8"
argument_list|,
literal|"default.value8"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key9"
argument_list|,
literal|"default.value9"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key10"
argument_list|,
literal|"default.value10"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key11"
argument_list|,
literal|"default.value11"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key12"
argument_list|,
literal|"default.value12"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key13"
argument_list|,
literal|"default.value13"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key14"
argument_list|,
literal|"default.value14"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key15"
argument_list|,
literal|"default.value15"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key16"
argument_list|,
literal|"default.value16"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource
init|=
operator|new
name|Path
argument_list|(
name|CONFIG
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG2
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
comment|// add keys that are tested while they are loaded just after their
comment|// corresponding default values
name|appendProperty
argument_list|(
literal|"old.key1"
argument_list|,
literal|"old.value1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key2"
argument_list|,
literal|"old.value2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key3"
argument_list|,
literal|"old.value3"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key4"
argument_list|,
literal|"old.value4"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key5"
argument_list|,
literal|"new.value5"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key6"
argument_list|,
literal|"new.value6"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key7"
argument_list|,
literal|"new.value7"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key8"
argument_list|,
literal|"new.value8"
argument_list|)
expr_stmt|;
comment|// add keys that are tested while they are loaded first and are followed by
comment|// loading of their corresponding deprecated or replacing key
name|appendProperty
argument_list|(
literal|"new.key9"
argument_list|,
literal|"new.value9"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key10"
argument_list|,
literal|"new.value10"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key11"
argument_list|,
literal|"new.value11"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key12"
argument_list|,
literal|"new.value12"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key13"
argument_list|,
literal|"old.value13"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key14"
argument_list|,
literal|"old.value14"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key15"
argument_list|,
literal|"old.value15"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key16"
argument_list|,
literal|"old.value16"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource1
init|=
operator|new
name|Path
argument_list|(
name|CONFIG2
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource1
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|CONFIG3
argument_list|)
argument_list|)
expr_stmt|;
name|startConfig
argument_list|()
expr_stmt|;
comment|// add keys which are already loaded by the corresponding replacing or
comment|// deprecated key.
name|appendProperty
argument_list|(
literal|"old.key9"
argument_list|,
literal|"old.value9"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key10"
argument_list|,
literal|"old.value10"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key11"
argument_list|,
literal|"old.value11"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"old.key12"
argument_list|,
literal|"old.value12"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key13"
argument_list|,
literal|"new.value13"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key14"
argument_list|,
literal|"new.value14"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key15"
argument_list|,
literal|"new.value15"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"new.key16"
argument_list|,
literal|"new.value16"
argument_list|)
expr_stmt|;
name|appendProperty
argument_list|(
literal|"B"
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
name|endConfig
argument_list|()
expr_stmt|;
name|Path
name|fileResource2
init|=
operator|new
name|Path
argument_list|(
name|CONFIG3
argument_list|)
decl_stmt|;
name|conf
operator|.
name|addResource
argument_list|(
name|fileResource2
argument_list|)
expr_stmt|;
comment|// get the values. Also check for consistency in get of old and new keys,
comment|// when they are set to final or non-final
comment|// Key - the key that is being loaded
comment|// isFinal - true if the key is marked as final
comment|// prev.occurrence - key that most recently loaded the current key
comment|//                   with its value.
comment|// isPrevFinal - true if key corresponding to
comment|//               prev.occurrence is marked as final.
comment|// Key-deprecated , isFinal-true, prev.occurrence-default.xml,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"old.value1"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key1"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-deprecated , isFinal-true, prev.occurrence-default.xml,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"old.value2"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key2"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-deprecated , isFinal-false, prev.occurrence-default.xml,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"default.value3"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key3"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-deprecated , isFinal-false, prev.occurrence-default.xml,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"old.value4"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key4"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-true, prev.occurrence-default.xml,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"default.value5"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key5"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key5"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-true, prev.occurrence-default.xml,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"new.value6"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key6"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key6"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key6"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-false, prev.occurrence-default.xml,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"default.value7"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key7"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key7"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key7"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-false, prev.occurrence-default.xml,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"new.value8"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key8"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-deprecated , isFinal-true, prev.occurrence-site.xml,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"old.value9"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key9"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key9"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key9"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-deprecated , isFinal-true, prev.occurrence-site.xml,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"old.value10"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key10"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key10"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key10"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-deprecated , isFinal-false, prev.occurrence-site.xml,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"new.value11"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key11"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key11"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key11"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-deprecated , isFinal-false, prev.occurrence-site.xml,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"old.value12"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key12"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key12"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key12"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-true, prev.occurrence-deprecated,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"old.value13"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key13"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key13"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key13"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-true, prev.occurrence-deprecated,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"new.value14"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key14"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key14"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key14"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-false, prev.occurrence-deprecated,
comment|// isPrevFinal-true
name|assertEquals
argument_list|(
literal|"old.value15"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key15"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key15"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key15"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Key-site.xml , isFinal-false, prev.occurrence-deprecated,
comment|// isPrevFinal-false
name|assertEquals
argument_list|(
literal|"old.value16"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key16"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"old.key16"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"new.key16"
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure that reloadConfiguration doesn't deprecation information
name|conf
operator|.
name|reloadConfiguration
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|"valueB"
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for consistency in get and set of deprecated and corresponding
comment|// new keys from the user code
comment|// set old key
name|conf
operator|.
name|set
argument_list|(
literal|"C"
argument_list|,
literal|"valueC"
argument_list|)
expr_stmt|;
comment|// get new key
name|assertEquals
argument_list|(
literal|"valueC"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"D"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set new key
name|conf
operator|.
name|set
argument_list|(
literal|"F"
argument_list|,
literal|"valueF"
argument_list|)
expr_stmt|;
comment|// get old key
name|assertEquals
argument_list|(
literal|"valueF"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"E"
argument_list|)
argument_list|)
expr_stmt|;
comment|// check consistency in get of old and new keys
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"E"
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"F"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"G"
argument_list|,
literal|"valueG"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueG"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"G"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueG"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"H"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueG"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"I"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

