begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_class
DECL|class|TestDFVariations
specifier|public
class|class
name|TestDFVariations
extends|extends
name|TestCase
block|{
DECL|class|XXDF
specifier|public
specifier|static
class|class
name|XXDF
extends|extends
name|DF
block|{
DECL|field|osName
specifier|private
specifier|final
name|String
name|osName
decl_stmt|;
DECL|method|XXDF (String osName)
specifier|public
name|XXDF
parameter_list|(
name|String
name|osName
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|this
operator|.
name|osName
operator|=
name|osName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOSType ()
specifier|public
name|DF
operator|.
name|OSType
name|getOSType
parameter_list|()
block|{
return|return
name|DF
operator|.
name|getOSType
argument_list|(
name|osName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getExecString ()
specifier|protected
name|String
index|[]
name|getExecString
parameter_list|()
block|{
switch|switch
condition|(
name|getOSType
argument_list|()
condition|)
block|{
case|case
name|OS_TYPE_AIX
case|:
return|return
operator|new
name|String
index|[]
block|{
literal|"echo"
block|,
literal|"IGNORE\n"
block|,
literal|"/dev/sda3"
block|,
literal|"453115160"
block|,
literal|"400077240"
block|,
literal|"11%"
block|,
literal|"18"
block|,
literal|"skip%"
block|,
literal|"/foo/bar"
block|,
literal|"\n"
block|}
return|;
default|default:
return|return
operator|new
name|String
index|[]
block|{
literal|"echo"
block|,
literal|"IGNORE\n"
block|,
literal|"/dev/sda3"
block|,
literal|"453115160"
block|,
literal|"53037920"
block|,
literal|"400077240"
block|,
literal|"11%"
block|,
literal|"/foo/bar"
block|,
literal|"\n"
block|}
return|;
block|}
block|}
block|}
DECL|method|testOSParsing ()
specifier|public
name|void
name|testOSParsing
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|DF
operator|.
name|OSType
name|ost
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DF
operator|.
name|OSType
operator|.
name|class
argument_list|)
control|)
block|{
name|XXDF
name|df
init|=
operator|new
name|XXDF
argument_list|(
name|ost
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ost
operator|.
name|getId
argument_list|()
operator|+
literal|" mount"
argument_list|,
literal|"/foo/bar"
argument_list|,
name|df
operator|.
name|getMount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

