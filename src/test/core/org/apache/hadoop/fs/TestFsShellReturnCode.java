begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test validates that chmod, chown, chgrp returning correct exit codes  *   */
end_comment

begin_class
DECL|class|TestFsShellReturnCode
specifier|public
class|class
name|TestFsShellReturnCode
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.fs.TestFsShellReturnCode"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"build/test/data/testCHReturnCode"
argument_list|)
decl_stmt|;
DECL|method|writeFile (FileSystem fs, Path name)
specifier|static
name|void
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|FSDataOutputStream
name|stm
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|stm
operator|.
name|writeBytes
argument_list|(
literal|"42\n"
argument_list|)
expr_stmt|;
name|stm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verify (String cmd, String argv[], int cmdIndex, FsShell fsShell, int exitCode)
specifier|public
name|void
name|verify
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|argv
index|[]
parameter_list|,
name|int
name|cmdIndex
parameter_list|,
name|FsShell
name|fsShell
parameter_list|,
name|int
name|exitCode
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|ec
decl_stmt|;
name|ec
operator|=
name|FsShellPermissions
operator|.
name|changePermissions
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|cmdIndex
argument_list|,
name|fsShell
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ec
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Chmod 1. Create and write file on FS 2. Verify that exit code for    * chmod on existing file is 0 3. Verify that exit code for chmod on    * non-existing file is 1 4. Verify that exit code for chmod with glob input    * on non-existing file is 1 5. Verify that exit code for chmod with glob    * input on existing file in 0    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testChmod ()
specifier|public
name|void
name|testChmod
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|fsShell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|f1
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChmod/fileExists"
decl_stmt|;
specifier|final
name|String
name|f2
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChmod/fileDoesNotExist"
decl_stmt|;
specifier|final
name|String
name|f3
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChmod/nonExistingfiles*"
decl_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
name|f1
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p4
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChmod/file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p5
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChmod/file2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p6
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChmod/file3"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|f7
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChmod/file*"
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create and write test file
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test 1: Test 1: exit code for chmod on existing is 0
name|String
name|argv
index|[]
init|=
block|{
literal|"-chmod"
block|,
literal|"777"
block|,
name|f1
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chmod"
argument_list|,
name|argv
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test 2: exit code for chmod on non-existing path is 1
name|String
name|argv2
index|[]
init|=
block|{
literal|"-chmod"
block|,
literal|"777"
block|,
name|f2
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chmod"
argument_list|,
name|argv2
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Test 3: exit code for chmod on non-existing path with globbed input is 1
name|String
name|argv3
index|[]
init|=
block|{
literal|"-chmod"
block|,
literal|"777"
block|,
name|f3
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chmod"
argument_list|,
name|argv3
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// create required files
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p4
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p5
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p6
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test 4: exit code for chmod on existing path with globbed input is 0
name|String
name|argv4
index|[]
init|=
block|{
literal|"-chmod"
block|,
literal|"777"
block|,
name|f7
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chmod"
argument_list|,
name|argv4
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Chown 1. Create and write file on FS 2. Verify that exit code for    * Chown on existing file is 0 3. Verify that exit code for Chown on    * non-existing file is 1 4. Verify that exit code for Chown with glob input    * on non-existing file is 1 5. Verify that exit code for Chown with glob    * input on existing file in 0    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testChown ()
specifier|public
name|void
name|testChown
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|fsShell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|f1
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChown/fileExists"
decl_stmt|;
specifier|final
name|String
name|f2
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChown/fileDoesNotExist"
decl_stmt|;
specifier|final
name|String
name|f3
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChown/nonExistingfiles*"
decl_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
name|f1
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p4
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChown/file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p5
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChown/file2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p6
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChown/file3"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|f7
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChown/file*"
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create and write test file
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test 1: exit code for chown on existing file is 0
name|String
name|argv
index|[]
init|=
block|{
literal|"-chown"
block|,
literal|"admin"
block|,
name|f1
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chown"
argument_list|,
name|argv
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test 2: exit code for chown on non-existing path is 1
name|String
name|argv2
index|[]
init|=
block|{
literal|"-chown"
block|,
literal|"admin"
block|,
name|f2
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chown"
argument_list|,
name|argv2
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Test 3: exit code for chown on non-existing path with globbed input is 1
name|String
name|argv3
index|[]
init|=
block|{
literal|"-chown"
block|,
literal|"admin"
block|,
name|f3
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chown"
argument_list|,
name|argv3
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// create required files
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p4
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p5
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p6
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test 4: exit code for chown on existing path with globbed input is 0
name|String
name|argv4
index|[]
init|=
block|{
literal|"-chown"
block|,
literal|"admin"
block|,
name|f7
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chown"
argument_list|,
name|argv4
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Test 5: test for setOwner invocation on FS from command handler.
name|conf
operator|.
name|set
argument_list|(
literal|"fs.testfs.impl"
argument_list|,
literal|"org.apache.hadoop.fs.TestFsShellReturnCode$LocalFileSystemExtn"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|file
init|=
literal|"testfs:///testFile"
decl_stmt|;
name|LocalFileSystemExtn
name|fileSystem
init|=
operator|(
name|LocalFileSystemExtn
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|file
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|argv5
index|[]
init|=
block|{
literal|"-chown"
block|,
literal|"admin:Test"
block|,
name|file
block|}
decl_stmt|;
name|FsShellPermissions
operator|.
name|changePermissions
argument_list|(
literal|"-chown"
argument_list|,
name|argv5
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not invoked the setOwner on Fs"
argument_list|,
name|fileSystem
operator|.
name|groupname
operator|.
name|equals
argument_list|(
literal|"Test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not invoked the setOwner on Fs"
argument_list|,
name|fileSystem
operator|.
name|username
operator|.
name|equals
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|argv6
index|[]
init|=
block|{
literal|"-chown"
block|,
literal|"admin:"
block|,
name|file
block|}
decl_stmt|;
name|FsShellPermissions
operator|.
name|changePermissions
argument_list|(
literal|"-chown"
argument_list|,
name|argv6
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not invoked the setOwner on Fs"
argument_list|,
name|fileSystem
operator|.
name|groupname
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not invoked the setOwner on Fs"
argument_list|,
name|fileSystem
operator|.
name|username
operator|.
name|equals
argument_list|(
literal|"admin"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test Chgrp 1. Create and write file on FS 2. Verify that exit code for    * chgrp on existing file is 0 3. Verify that exit code for chgrp on    * non-existing file is 1 4. Verify that exit code for chgrp with glob input    * on non-existing file is 1 5. Verify that exit code for chgrp with glob    * input on existing file in 0    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testChgrp ()
specifier|public
name|void
name|testChgrp
parameter_list|()
throws|throws
name|Exception
block|{
name|FsShell
name|fsShell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|String
name|f1
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChgrp/fileExists"
decl_stmt|;
specifier|final
name|String
name|f2
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChgrp/fileDoesNotExist"
decl_stmt|;
specifier|final
name|String
name|f3
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChgrp/nonExistingfiles*"
decl_stmt|;
name|Path
name|p1
init|=
operator|new
name|Path
argument_list|(
name|f1
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p4
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChgrp/file1"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p5
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChgrp/file2"
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p6
init|=
operator|new
name|Path
argument_list|(
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChgrp/file3"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|f7
init|=
name|TEST_ROOT_DIR
operator|+
literal|"/"
operator|+
literal|"testChgrp/file*"
decl_stmt|;
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// create and write test file
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test 1: exit code for chgrp on existing file is 0
name|String
name|argv
index|[]
init|=
block|{
literal|"-chgrp"
block|,
literal|"admin"
block|,
name|f1
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chgrp"
argument_list|,
name|argv
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test 2: exit code for chgrp on non existing path is 1
name|String
name|argv2
index|[]
init|=
block|{
literal|"-chgrp"
block|,
literal|"admin"
block|,
name|f2
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chgrp"
argument_list|,
name|argv2
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Test 3: exit code for chgrp on non-existing path with globbed input is 1
name|String
name|argv3
index|[]
init|=
block|{
literal|"-chgrp"
block|,
literal|"admin"
block|,
name|f3
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chgrp"
argument_list|,
name|argv3
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// create required files
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p4
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p5
argument_list|)
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fileSys
argument_list|,
name|p6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fileSys
operator|.
name|exists
argument_list|(
name|p6
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test 4: exit code for chgrp on existing path with globbed input is 0
name|String
name|argv4
index|[]
init|=
block|{
literal|"-chgrp"
block|,
literal|"admin"
block|,
name|f7
block|}
decl_stmt|;
name|verify
argument_list|(
literal|"-chgrp"
argument_list|,
name|argv4
argument_list|,
literal|1
argument_list|,
name|fsShell
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetWithInvalidSourcePathShouldNotDisplayNullInConsole ()
specifier|public
name|void
name|testGetWithInvalidSourcePathShouldNotDisplayNullInConsole
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|String
name|results
decl_stmt|;
try|try
block|{
name|FileSystem
name|fileSys
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-get"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"/invalidPath"
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"/test/tmp"
expr_stmt|;
name|assertTrue
argument_list|(
literal|"file exists"
argument_list|,
operator|!
name|fileSys
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|run
init|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|results
operator|=
name|bytes
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return code should be -1"
argument_list|,
name|run
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" Null is coming when source path is invalid. "
argument_list|,
operator|!
name|results
operator|.
name|contains
argument_list|(
literal|"get: null"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" Not displaying the intended message "
argument_list|,
name|results
operator|.
name|contains
argument_list|(
literal|"get: "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|": No such file or directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|oldErr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidDefautlFS ()
specifier|public
name|void
name|testInvalidDefautlFS
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if default fs doesn't exist or is invalid, but the path provided in
comment|// arguments is valid - fsshell should work
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FsConfig
operator|.
name|setDefaultFS
argument_list|(
name|conf
argument_list|,
literal|"hhhh://doesnotexist/"
argument_list|)
expr_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-ls"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
literal|"file:///"
expr_stmt|;
comment|// this is valid, so command should run
name|int
name|res
init|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"res ="
operator|+
name|res
argument_list|)
expr_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldErr
init|=
name|System
operator|.
name|err
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|out
argument_list|)
expr_stmt|;
specifier|final
name|String
name|results
decl_stmt|;
try|try
block|{
name|int
name|run
init|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|results
operator|=
name|bytes
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"result="
operator|+
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return code should be 0"
argument_list|,
name|run
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|oldErr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LocalFileSystemExtn
specifier|static
class|class
name|LocalFileSystemExtn
extends|extends
name|RawLocalFileSystem
block|{
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|groupname
specifier|private
name|String
name|groupname
decl_stmt|;
annotation|@
name|Override
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|username
operator|=
name|username
expr_stmt|;
name|this
operator|.
name|groupname
operator|=
name|groupname
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileStatus
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

