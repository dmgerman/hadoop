begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.permission
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestFsPermission
specifier|public
class|class
name|TestFsPermission
extends|extends
name|TestCase
block|{
DECL|method|testFsAction ()
specifier|public
name|void
name|testFsAction
parameter_list|()
block|{
comment|//implies
for|for
control|(
name|FsAction
name|a
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|ALL
operator|.
name|implies
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FsAction
name|a
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|==
name|NONE
condition|?
name|NONE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
else|:
operator|!
name|NONE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FsAction
name|a
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|a
operator|==
name|READ_EXECUTE
operator|||
name|a
operator|==
name|READ
operator|||
name|a
operator|==
name|EXECUTE
operator|||
name|a
operator|==
name|NONE
condition|?
name|READ_EXECUTE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
else|:
operator|!
name|READ_EXECUTE
operator|.
name|implies
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//masks
name|assertEquals
argument_list|(
name|EXECUTE
argument_list|,
name|EXECUTE
operator|.
name|and
argument_list|(
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|READ
argument_list|,
name|READ
operator|.
name|and
argument_list|(
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NONE
argument_list|,
name|WRITE
operator|.
name|and
argument_list|(
name|READ_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|READ
argument_list|,
name|READ_EXECUTE
operator|.
name|and
argument_list|(
name|READ_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NONE
argument_list|,
name|READ_EXECUTE
operator|.
name|and
argument_list|(
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|WRITE_EXECUTE
argument_list|,
name|ALL
operator|.
name|and
argument_list|(
name|WRITE_EXECUTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Ensure that when manually specifying permission modes we get    * the expected values back out for all combinations    */
DECL|method|testConvertingPermissions ()
specifier|public
name|void
name|testConvertingPermissions
parameter_list|()
block|{
for|for
control|(
name|short
name|s
init|=
literal|0
init|;
name|s
operator|<
literal|01777
condition|;
name|s
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|s
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|s
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|short
name|s
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|sb
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
for|for
control|(
name|FsAction
name|u
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|g
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|o
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|FsPermission
name|f
init|=
operator|new
name|FsPermission
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|,
name|sb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|f
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testStickyBitToString ()
specifier|public
name|void
name|testStickyBitToString
parameter_list|()
block|{
comment|// Check that every permission has its sticky bit represented correctly
for|for
control|(
name|boolean
name|sb
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
for|for
control|(
name|FsAction
name|u
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|g
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|o
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|FsPermission
name|f
init|=
operator|new
name|FsPermission
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|,
name|sb
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getStickyBit
argument_list|()
operator|&&
name|f
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|EXECUTE
argument_list|)
condition|)
name|assertEquals
argument_list|(
literal|'t'
argument_list|,
name|f
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|f
operator|.
name|getStickyBit
argument_list|()
operator|&&
operator|!
name|f
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|EXECUTE
argument_list|)
condition|)
name|assertEquals
argument_list|(
literal|'T'
argument_list|,
name|f
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|f
operator|.
name|getStickyBit
argument_list|()
operator|&&
name|f
operator|.
name|getOtherAction
argument_list|()
operator|.
name|implies
argument_list|(
name|EXECUTE
argument_list|)
condition|)
name|assertEquals
argument_list|(
literal|'x'
argument_list|,
name|f
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
literal|'-'
argument_list|,
name|f
operator|.
name|toString
argument_list|()
operator|.
name|charAt
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|testFsPermission ()
specifier|public
name|void
name|testFsPermission
parameter_list|()
block|{
name|String
name|symbolic
init|=
literal|"-rwxrwxrwx"
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"-123456789"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
literal|1
operator|<<
literal|9
operator|)
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|b
operator|.
name|setCharAt
argument_list|(
name|j
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|String
name|binary
init|=
name|Integer
operator|.
name|toBinaryString
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|len
init|=
name|binary
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|binary
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|int
name|k
init|=
literal|9
operator|-
operator|(
name|len
operator|-
literal|1
operator|-
name|j
operator|)
decl_stmt|;
name|b
operator|.
name|setCharAt
argument_list|(
name|k
argument_list|,
name|symbolic
operator|.
name|charAt
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|FsPermission
operator|.
name|valueOf
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testUMaskParser ()
specifier|public
name|void
name|testUMaskParser
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Ensure that we get the right octal values back for all legal values
for|for
control|(
name|FsAction
name|u
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|g
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|FsAction
name|o
range|:
name|FsAction
operator|.
name|values
argument_list|()
control|)
block|{
name|FsPermission
name|f
init|=
operator|new
name|FsPermission
argument_list|(
name|u
argument_list|,
name|g
argument_list|,
name|o
argument_list|)
decl_stmt|;
name|String
name|asOctal
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%1$03o"
argument_list|,
name|f
operator|.
name|toShort
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
name|asOctal
argument_list|)
expr_stmt|;
name|FsPermission
name|fromConf
init|=
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|f
argument_list|,
name|fromConf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|TestSymbolicUmasks ()
specifier|public
name|void
name|TestSymbolicUmasks
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Test some symbolic settings       Setting       Octal result
name|String
index|[]
name|symbolic
init|=
operator|new
name|String
index|[]
block|{
literal|"a+rw"
block|,
literal|"666"
block|,
literal|"u=x,g=r,o=w"
block|,
literal|"142"
block|,
literal|"u=x"
block|,
literal|"100"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|symbolic
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
name|symbolic
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|short
name|val
init|=
name|Short
operator|.
name|valueOf
argument_list|(
name|symbolic
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|val
argument_list|,
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBadUmasks ()
specifier|public
name|void
name|testBadUmasks
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|b
range|:
operator|new
name|String
index|[]
block|{
literal|"1777"
block|,
literal|"22"
block|,
literal|"99"
block|,
literal|"foo"
block|,
literal|""
block|}
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|UMASK_LABEL
argument_list|,
name|b
argument_list|)
expr_stmt|;
try|try
block|{
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't have been able to parse bad umask"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Ensure that when the deprecated decimal umask key is used, it is correctly
comment|// parsed as such and converted correctly to an FsPermission value
DECL|method|testDeprecatedUmask ()
specifier|public
name|void
name|testDeprecatedUmask
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FsPermission
operator|.
name|DEPRECATED_UMASK_LABEL
argument_list|,
literal|"302"
argument_list|)
expr_stmt|;
comment|// 302 = 0456
name|FsPermission
name|umask
init|=
name|FsPermission
operator|.
name|getUMask
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0456
argument_list|,
name|umask
operator|.
name|toShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

