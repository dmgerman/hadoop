begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_class
DECL|class|TestFileStatus
specifier|public
class|class
name|TestFileStatus
block|{
annotation|@
name|Test
DECL|method|testFileStatusNullPath ()
specifier|public
name|void
name|testFileStatusNullPath
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|FileStatus
argument_list|()
expr_stmt|;
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|)
argument_list|,
literal|"bla"
argument_list|,
literal|"bla"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/b/c"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a/b"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|error
init|=
literal|false
decl_stmt|;
try|try
block|{
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exc
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Accepted null path"
argument_list|,
name|error
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exc
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Accepted null path"
argument_list|,
name|error
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exc
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Accepted null path"
argument_list|,
name|error
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|)
argument_list|,
literal|"bla"
argument_list|,
literal|"bla"
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/b/c"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exc
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Accepted null path"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

