begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Trash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_comment
comment|/**  * This class tests commands from Trash.  */
end_comment

begin_class
DECL|class|TestTrash
specifier|public
class|class
name|TestTrash
extends|extends
name|TestCase
block|{
DECL|field|TEST_DIR
specifier|private
specifier|final
specifier|static
name|Path
name|TEST_DIR
init|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
argument_list|,
literal|"testTrash"
argument_list|)
decl_stmt|;
DECL|method|writeFile (FileSystem fs, Path f)
specifier|protected
specifier|static
name|Path
name|writeFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
literal|"dhruba: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|mkdir (FileSystem fs, Path p)
specifier|protected
specifier|static
name|Path
name|mkdir
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|// check that the specified file is in Trash
DECL|method|checkTrash (FileSystem fs, Path trashRoot, Path path)
specifier|protected
specifier|static
name|void
name|checkTrash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|trashRoot
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|trashRoot
operator|+
literal|"/"
operator|+
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that the specified file is not in Trash
DECL|method|checkNotInTrash (FileSystem fs, Path trashRoot, String pathname)
specifier|static
name|void
name|checkNotInTrash
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|trashRoot
parameter_list|,
name|String
name|pathname
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|trashRoot
operator|+
literal|"/"
operator|+
operator|new
name|Path
argument_list|(
name|pathname
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|trashShell (final FileSystem fs, final Path base)
specifier|protected
specifier|static
name|void
name|trashShell
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|base
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
comment|// 10 minute
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|shell
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|trashRoot
init|=
literal|null
decl_stmt|;
comment|// First create a new directory with mkdirs
name|Path
name|myPath
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs"
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
comment|// Second, create a file in that directory.
name|Path
name|myFile
init|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
comment|// Verify that expunge without Trash directory
comment|// won't throw Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-expunge"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we succeed in removing the file we created.
comment|// This should go into Trash.
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|trashRoot
operator|=
name|shell
operator|.
name|getCurrentTrashDir
argument_list|()
expr_stmt|;
name|checkTrash
argument_list|(
name|fs
argument_list|,
name|trashRoot
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we can recreate the file
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
comment|// Verify that we succeed in removing the file we re-created
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Verify that we can recreate the file
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
comment|// Verify that we succeed in removing the whole directory
comment|// along with the file inside it.
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// recreate directory
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
comment|// Verify that we succeed in removing the whole directory
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Check that we can delete a file from the trash
block|{
name|Path
name|toErase
init|=
operator|new
name|Path
argument_list|(
name|trashRoot
argument_list|,
literal|"toErase"
argument_list|)
decl_stmt|;
name|int
name|retVal
init|=
operator|-
literal|1
decl_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|toErase
argument_list|)
expr_stmt|;
try|try
block|{
name|retVal
operator|=
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-rm"
block|,
name|toErase
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|retVal
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkNotInTrash
argument_list|(
name|fs
argument_list|,
name|trashRoot
argument_list|,
name|toErase
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkNotInTrash
argument_list|(
name|fs
argument_list|,
name|trashRoot
argument_list|,
name|toErase
operator|.
name|toString
argument_list|()
operator|+
literal|".1"
argument_list|)
expr_stmt|;
block|}
comment|// simulate Trash removal
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|1
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-expunge"
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// verify that after expunging the Trash, it really goes away
name|checkNotInTrash
argument_list|(
name|fs
argument_list|,
name|trashRoot
argument_list|,
operator|new
name|Path
argument_list|(
name|base
argument_list|,
literal|"test/mkdirs/myFile"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// recreate directory and file
name|mkdir
argument_list|(
name|fs
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
name|writeFile
argument_list|(
name|fs
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
comment|// remove file first, then remove directory
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rm"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myFile
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkTrash
argument_list|(
name|fs
argument_list|,
name|trashRoot
argument_list|,
name|myFile
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|myPath
operator|.
name|toString
argument_list|()
expr_stmt|;
name|val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
literal|0
argument_list|)
expr_stmt|;
name|checkTrash
argument_list|(
name|fs
argument_list|,
name|trashRoot
argument_list|,
name|myPath
argument_list|)
expr_stmt|;
block|}
comment|// attempt to remove parent of trash
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"-rmr"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|trashRoot
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|val
operator|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception raised from Trash.run "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|val
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|trashRoot
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|trashNonDefaultFS (Configuration conf)
specifier|public
specifier|static
name|void
name|trashNonDefaultFS
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"fs.trash.interval"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
comment|// 10 minute
comment|// attempt non-default FileSystem trash
block|{
specifier|final
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|TEST_DIR
decl_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|"foo/bar"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|f
operator|=
name|writeFile
argument_list|(
name|lfs
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAll
argument_list|()
expr_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"file:///"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Trash
name|lTrash
init|=
operator|new
name|Trash
argument_list|(
name|localFs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|lTrash
operator|.
name|moveToTrash
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|checkTrash
argument_list|(
name|localFs
argument_list|,
name|lTrash
operator|.
name|getCurrentTrashDir
argument_list|()
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|lfs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|lfs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testTrash ()
specifier|public
name|void
name|testTrash
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|trashShell
argument_list|(
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonDefaultFS ()
specifier|public
name|void
name|testNonDefaultFS
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|TestLFS
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
literal|"invalid://host/bar/foo"
argument_list|)
expr_stmt|;
name|trashNonDefaultFS
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|class|TestLFS
specifier|static
class|class
name|TestLFS
extends|extends
name|LocalFileSystem
block|{
DECL|field|home
name|Path
name|home
decl_stmt|;
DECL|method|TestLFS ()
name|TestLFS
parameter_list|()
block|{
name|this
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|TestLFS (Path home)
name|TestLFS
parameter_list|(
name|Path
name|home
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|home
operator|=
name|home
expr_stmt|;
block|}
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|home
return|;
block|}
block|}
block|}
end_class

end_unit

