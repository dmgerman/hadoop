begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFileSystemCaching
specifier|public
class|class
name|TestFileSystemCaching
block|{
annotation|@
name|Test
DECL|method|testCacheEnabled ()
specifier|public
name|void
name|testCacheEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.cachedfile.impl"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"fs.file.impl"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|fs1
argument_list|,
name|fs2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheDisabled ()
specifier|public
name|void
name|testCacheDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.uncachedfile.impl"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"fs.file.impl"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.uncachedfile.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"uncachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"uncachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|fs1
argument_list|,
name|fs2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLocal ()
specifier|public
name|void
name|testGetLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_DEFAULT
argument_list|)
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs1
operator|instanceof
name|LocalFileSystem
argument_list|)
expr_stmt|;
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|LocalFileSystem
operator|.
name|NAME
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs2
operator|instanceof
name|LocalFileSystem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDefaultFs ()
specifier|public
name|void
name|testGetDefaultFs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|checkDefaultFsParam (Configuration conf, String uri)
specifier|private
name|void
name|checkDefaultFsParam
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidDefaultFsParam ()
specifier|public
name|void
name|testInvalidDefaultFsParam
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// All of the following set the default filesystem config
comment|// to an invalid URI. Subsequent requests for a FileSystem
comment|// should return the internal default fs.
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"this-is-an-/invalid_uri"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"/foo"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"foo:8020"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"foo/bar"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"foo:8020/bar"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"hdfs://"
argument_list|)
expr_stmt|;
name|checkDefaultFsParam
argument_list|(
name|conf
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetInvalidFs ()
specifier|public
name|void
name|testGetInvalidFs
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// None of these are valid FileSystem URIs. The default FS
comment|// should be returned in all cases.
name|assertNotNull
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/foo"
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"/foo/bar"
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"foo/bar"
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"local"
argument_list|)
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBadUri (Configuration conf, String uri)
specifier|private
name|void
name|checkBadUri
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
try|try
block|{
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected invalid URI: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Got expected exception; ok.
block|}
block|}
annotation|@
name|Test
DECL|method|testDefaultUri ()
specifier|public
name|void
name|testDefaultUri
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|URI
name|exampleGoodUri
init|=
operator|new
name|URI
argument_list|(
literal|"hdfs://foo.example.com:999"
argument_list|)
decl_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|exampleGoodUri
argument_list|)
expr_stmt|;
name|URI
name|out
init|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exampleGoodUri
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|checkBadUri
argument_list|(
name|conf
argument_list|,
literal|"bla"
argument_list|)
expr_stmt|;
comment|// no scheme
name|checkBadUri
argument_list|(
name|conf
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
comment|// deprecated syntax
name|checkBadUri
argument_list|(
name|conf
argument_list|,
literal|"foo:8020"
argument_list|)
expr_stmt|;
comment|// no scheme, deprecated syntax.
name|checkBadUri
argument_list|(
name|conf
argument_list|,
literal|"hdfs://"
argument_list|)
expr_stmt|;
comment|// not a valid uri; requires authority-part
name|checkBadUri
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// not a uri.
comment|// Check that none of these actually changed the conf.
name|out
operator|=
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exampleGoodUri
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

