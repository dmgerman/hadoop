begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|TestFileSystemCaching
specifier|public
class|class
name|TestFileSystemCaching
block|{
annotation|@
name|Test
DECL|method|testCacheEnabled ()
specifier|public
name|void
name|testCacheEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.cachedfile.impl"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"fs.file.impl"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|fs1
argument_list|,
name|fs2
argument_list|)
expr_stmt|;
block|}
DECL|class|InitializeForeverFileSystem
specifier|public
specifier|static
class|class
name|InitializeForeverFileSystem
extends|extends
name|LocalFileSystem
block|{
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// notify that InitializeForeverFileSystem started initialization
synchronized|synchronized
init|(
name|conf
init|)
block|{
name|conf
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testCacheEnabledWithInitializeForeverFS ()
specifier|public
name|void
name|testCacheEnabledWithInitializeForeverFS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"fs.localfs1.impl"
argument_list|,
literal|"org.apache.hadoop.fs."
operator|+
literal|"TestFileSystemCaching$InitializeForeverFileSystem"
argument_list|)
expr_stmt|;
try|try
block|{
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"localfs1://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for InitializeForeverFileSystem to start initialization
synchronized|synchronized
init|(
name|conf
init|)
block|{
name|conf
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"fs.cachedfile.impl"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"fs.file.impl"
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCacheDisabled ()
specifier|public
name|void
name|testCacheDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.uncachedfile.impl"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"fs.file.impl"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"fs.uncachedfile.impl.disable.cache"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|fs1
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"uncachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs2
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"uncachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|fs1
argument_list|,
name|fs2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testCacheForUgi ()
specifier|public
parameter_list|<
name|T
extends|extends
name|TokenIdentifier
parameter_list|>
name|void
name|testCacheForUgi
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"fs.cachedfile.impl"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"fs.file.impl"
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugiA
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugiB
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|FileSystem
name|fsA
init|=
name|ugiA
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|FileSystem
name|fsA1
init|=
name|ugiA
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|//Since the UGIs are the same, we should have the same filesystem for both
name|assertSame
argument_list|(
name|fsA
argument_list|,
name|fsA1
argument_list|)
expr_stmt|;
name|FileSystem
name|fsB
init|=
name|ugiB
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|//Since the UGIs are different, we should end up with different filesystems
comment|//corresponding to the two UGIs
name|assertNotSame
argument_list|(
name|fsA
argument_list|,
name|fsB
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|T
argument_list|>
name|t1
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|ugiA
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ugiA
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|fsA
operator|=
name|ugiA
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//Although the users in the UGI are same, ugiA has tokens in it, and
comment|//we should end up with different filesystems corresponding to the two UGIs
name|assertNotSame
argument_list|(
name|fsA
argument_list|,
name|fsA1
argument_list|)
expr_stmt|;
name|ugiA
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ugiA
operator|.
name|addToken
argument_list|(
name|t1
argument_list|)
expr_stmt|;
name|fsA1
operator|=
name|ugiA
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|FileSystem
argument_list|>
argument_list|()
block|{
specifier|public
name|FileSystem
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
literal|"cachedfile://a"
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//Now the users in the UGI are the same, and they also have the same token.
comment|//We should have the same filesystem for both
name|assertSame
argument_list|(
name|fsA
argument_list|,
name|fsA1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

