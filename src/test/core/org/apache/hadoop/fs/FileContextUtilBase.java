begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContextTestHelper
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>  * A collection of Util tests for the {@link FileContext#util()}.  * This test should be used for testing an instance of {@link FileContext#util()}  *  that has been initialized to a specific default FileSystem such a  *  LocalFileSystem, HDFS,S3, etc.  *</p>  *<p>  * To test a given {@link FileSystem} implementation create a subclass of this  * test and override {@link #setUp()} to initialize the<code>fc</code>   * {@link FileContext} instance variable.  *   *</p>  */
end_comment

begin_class
DECL|class|FileContextUtilBase
specifier|public
specifier|abstract
class|class
name|FileContextUtilBase
block|{
DECL|field|fc
specifier|protected
name|FileContext
name|fc
decl_stmt|;
block|{
try|try
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
operator|)
name|FileSystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cannot change log level\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|fc
operator|.
name|mkdir
argument_list|(
name|getTestRootPath
argument_list|(
name|fc
argument_list|)
argument_list|,
name|FileContext
operator|.
name|DEFAULT_PERM
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fc
operator|.
name|delete
argument_list|(
name|getTestRootPath
argument_list|(
name|fc
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFcCopy ()
specifier|public
name|void
name|testFcCopy
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|ts
init|=
literal|"some random text"
decl_stmt|;
name|Path
name|file1
init|=
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
literal|"file1"
argument_list|)
decl_stmt|;
name|Path
name|file2
init|=
name|getTestRootPath
argument_list|(
name|fc
argument_list|,
literal|"file2"
argument_list|)
decl_stmt|;
name|writeFile
argument_list|(
name|fc
argument_list|,
name|file1
argument_list|,
name|ts
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|file1
argument_list|)
argument_list|)
expr_stmt|;
name|fc
operator|.
name|util
argument_list|()
operator|.
name|copy
argument_list|(
name|file1
argument_list|,
name|file2
argument_list|)
expr_stmt|;
comment|// verify that newly copied file2 exists
name|assertTrue
argument_list|(
literal|"Failed to copy file2  "
argument_list|,
name|fc
operator|.
name|util
argument_list|()
operator|.
name|exists
argument_list|(
name|file2
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that file2 contains test string
name|assertTrue
argument_list|(
literal|"Copied files does not match "
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|ts
operator|.
name|getBytes
argument_list|()
argument_list|,
name|readFile
argument_list|(
name|fc
argument_list|,
name|file2
argument_list|,
name|ts
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

