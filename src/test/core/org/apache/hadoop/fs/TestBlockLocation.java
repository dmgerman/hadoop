begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_class
DECL|class|TestBlockLocation
specifier|public
class|class
name|TestBlockLocation
extends|extends
name|TestCase
block|{
comment|// Verify fix of bug identified in HADOOP-6004
DECL|method|testDeserialization ()
specifier|public
name|void
name|testDeserialization
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a test BlockLocation
name|String
index|[]
name|names
init|=
block|{
literal|"one"
block|,
literal|"two"
block|}
decl_stmt|;
name|String
index|[]
name|hosts
init|=
block|{
literal|"three"
block|,
literal|"four"
block|}
decl_stmt|;
name|String
index|[]
name|topologyPaths
init|=
block|{
literal|"five"
block|,
literal|"six"
block|}
decl_stmt|;
name|long
name|offset
init|=
literal|25l
decl_stmt|;
name|long
name|length
init|=
literal|55l
decl_stmt|;
name|BlockLocation
name|bl
init|=
operator|new
name|BlockLocation
argument_list|(
name|names
argument_list|,
name|hosts
argument_list|,
name|topologyPaths
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
comment|// Serialize it
try|try
block|{
name|bl
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to serialize data: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|bytes
init|=
name|dob
operator|.
name|getData
argument_list|()
decl_stmt|;
name|DataInput
name|da
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
comment|// Try to re-create the BlockLocation the same way as is done during
comment|// deserialization
name|BlockLocation
name|bl2
init|=
operator|new
name|BlockLocation
argument_list|()
decl_stmt|;
try|try
block|{
name|bl2
operator|.
name|readFields
argument_list|(
name|da
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to deserialize BlockLocation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check that we got back what we started with
name|verifyDeserialization
argument_list|(
name|bl2
operator|.
name|getHosts
argument_list|()
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
name|verifyDeserialization
argument_list|(
name|bl2
operator|.
name|getNames
argument_list|()
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|verifyDeserialization
argument_list|(
name|bl2
operator|.
name|getTopologyPaths
argument_list|()
argument_list|,
name|topologyPaths
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bl2
operator|.
name|getOffset
argument_list|()
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bl2
operator|.
name|getLength
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDeserialization (String[] ar1, String[] ar2)
specifier|private
name|void
name|verifyDeserialization
parameter_list|(
name|String
index|[]
name|ar1
parameter_list|,
name|String
index|[]
name|ar2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ar1
operator|.
name|length
argument_list|,
name|ar2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ar1
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertEquals
argument_list|(
name|ar1
index|[
name|i
index|]
argument_list|,
name|ar2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

