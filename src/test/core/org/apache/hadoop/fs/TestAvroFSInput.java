begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestAvroFSInput
specifier|public
class|class
name|TestAvroFSInput
extends|extends
name|TestCase
block|{
DECL|field|INPUT_DIR
specifier|private
specifier|static
specifier|final
name|String
name|INPUT_DIR
init|=
literal|"AvroFSInput"
decl_stmt|;
DECL|method|getInputPath ()
specifier|private
name|Path
name|getInputPath
parameter_list|()
block|{
name|String
name|dataDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|dataDir
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|INPUT_DIR
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|dataDir
argument_list|)
argument_list|,
name|INPUT_DIR
argument_list|)
return|;
block|}
block|}
DECL|method|testAFSInput ()
specifier|public
name|void
name|testAFSInput
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|getInputPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|filePath
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|FSDataOutputStream
name|ostream
init|=
name|fs
operator|.
name|create
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|BufferedWriter
name|w
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|ostream
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"0123456789"
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create the stream
name|FileContext
name|fc
init|=
name|FileContext
operator|.
name|getFileContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|AvroFSInput
name|avroFSIn
init|=
operator|new
name|AvroFSInput
argument_list|(
name|fc
argument_list|,
name|filePath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|avroFSIn
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check initial position
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|avroFSIn
operator|.
name|tell
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check a read from that position.
name|avroFSIn
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|avroFSIn
operator|.
name|tell
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'0'
argument_list|,
operator|(
name|char
operator|)
name|buf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Check a seek + read
name|avroFSIn
operator|.
name|seek
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|avroFSIn
operator|.
name|tell
argument_list|()
argument_list|)
expr_stmt|;
name|avroFSIn
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'4'
argument_list|,
operator|(
name|char
operator|)
name|buf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|avroFSIn
operator|.
name|tell
argument_list|()
argument_list|)
expr_stmt|;
name|avroFSIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

