begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * A JUnit test to test ProcfsBasedProcessTree.  */
end_comment

begin_class
DECL|class|TestProcfsBasedProcessTree
specifier|public
class|class
name|TestProcfsBasedProcessTree
extends|extends
name|TestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestProcfsBasedProcessTree
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_ROOT_DIR
specifier|private
specifier|static
name|String
name|TEST_ROOT_DIR
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'+'
argument_list|)
decl_stmt|;
DECL|field|shexec
specifier|private
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
DECL|field|pidFile
DECL|field|lowestDescendant
specifier|private
name|String
name|pidFile
decl_stmt|,
name|lowestDescendant
decl_stmt|;
DECL|field|shellScript
specifier|private
name|String
name|shellScript
decl_stmt|;
DECL|field|N
specifier|private
specifier|static
specifier|final
name|int
name|N
init|=
literal|6
decl_stmt|;
comment|// Controls the RogueTask
DECL|class|RogueTaskThread
specifier|private
class|class
name|RogueTaskThread
extends|extends
name|Thread
block|{
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Vector
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
name|args
operator|.
name|add
argument_list|(
literal|"setsid"
argument_list|)
expr_stmt|;
block|}
name|args
operator|.
name|add
argument_list|(
literal|"bash"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-c"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|" echo $$> "
operator|+
name|pidFile
operator|+
literal|"; sh "
operator|+
name|shellScript
operator|+
literal|" "
operator|+
name|N
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shell Command exit with a non-zero exit code. This is"
operator|+
literal|" expected as we are killing the subprocesses of the"
operator|+
literal|" task intentionally. "
operator|+
name|ee
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error executing shell command "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exit code: "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getRogueTaskPID ()
specifier|private
name|String
name|getRogueTaskPID
parameter_list|()
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|pidFile
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
comment|// read from pidFile
return|return
name|getPidFromPidFile
argument_list|(
name|pidFile
argument_list|)
return|;
block|}
DECL|method|testProcessTree ()
specifier|public
name|void
name|testProcessTree
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|ProcfsBasedProcessTree
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ProcfsBasedProcessTree is not available on this system. Not testing"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// create shell script
name|Random
name|rm
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"_shellScript_"
operator|+
name|rm
operator|.
name|nextInt
argument_list|()
operator|+
literal|".sh"
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|shellScript
operator|=
name|TEST_ROOT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
name|tempFile
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// create pid file
name|tempFile
operator|=
operator|new
name|File
argument_list|(
name|TEST_ROOT_DIR
argument_list|,
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"_pidFile_"
operator|+
name|rm
operator|.
name|nextInt
argument_list|()
operator|+
literal|".pid"
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|pidFile
operator|=
name|TEST_ROOT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
name|tempFile
operator|.
name|getName
argument_list|()
expr_stmt|;
name|lowestDescendant
operator|=
name|TEST_ROOT_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"lowestDescendantPidFile"
expr_stmt|;
comment|// write to shell-script
try|try
block|{
name|FileWriter
name|fWriter
init|=
operator|new
name|FileWriter
argument_list|(
name|shellScript
argument_list|)
decl_stmt|;
name|fWriter
operator|.
name|write
argument_list|(
literal|"# rogue task\n"
operator|+
literal|"sleep 1\n"
operator|+
literal|"echo hello\n"
operator|+
literal|"if [ $1 -ne 0 ]\n"
operator|+
literal|"then\n"
operator|+
literal|" sh "
operator|+
name|shellScript
operator|+
literal|" $(($1-1))\n"
operator|+
literal|"else\n"
operator|+
literal|" echo $$> "
operator|+
name|lowestDescendant
operator|+
literal|"\n"
operator|+
literal|" while true\n do\n"
operator|+
literal|"  sleep 5\n"
operator|+
literal|" done\n"
operator|+
literal|"fi"
argument_list|)
expr_stmt|;
name|fWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error: "
operator|+
name|ioe
argument_list|)
expr_stmt|;
return|return;
block|}
name|Thread
name|t
init|=
operator|new
name|RogueTaskThread
argument_list|()
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|pid
init|=
name|getRogueTaskPID
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Root process pid: "
operator|+
name|pid
argument_list|)
expr_stmt|;
name|ProcfsBasedProcessTree
name|p
init|=
operator|new
name|ProcfsBasedProcessTree
argument_list|(
name|pid
argument_list|,
name|ProcessTree
operator|.
name|isSetsidAvailable
argument_list|,
name|ProcessTree
operator|.
name|DEFAULT_SLEEPTIME_BEFORE_SIGKILL
argument_list|)
decl_stmt|;
name|p
operator|=
name|p
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
comment|// initialize
name|LOG
operator|.
name|info
argument_list|(
literal|"ProcessTree: "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|leaf
init|=
operator|new
name|File
argument_list|(
name|lowestDescendant
argument_list|)
decl_stmt|;
comment|//wait till lowest descendant process of Rougue Task starts execution
while|while
condition|(
operator|!
name|leaf
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
break|break;
block|}
block|}
name|p
operator|=
name|p
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
comment|// reconstruct
name|LOG
operator|.
name|info
argument_list|(
literal|"ProcessTree: "
operator|+
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// destroy the map task and all its subprocesses
name|p
operator|.
name|destroy
argument_list|(
literal|true
comment|/*in the background*/
argument_list|)
expr_stmt|;
if|if
condition|(
name|ProcessTree
operator|.
name|isSetsidAvailable
condition|)
block|{
comment|// whole processtree should be gone
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|p
operator|.
name|isAnyProcessInTreeAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// process should be gone
name|assertFalse
argument_list|(
literal|"ProcessTree must have been gone"
argument_list|,
name|p
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Not able to join thread sometimes when forking with large N.
try|try
block|{
name|t
operator|.
name|join
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RogueTaskThread successfully joined."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Interrupted while joining RogueTaskThread."
argument_list|)
expr_stmt|;
block|}
comment|// ProcessTree is gone now. Any further calls should be sane.
name|p
operator|=
name|p
operator|.
name|getProcessTree
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ProcessTree must have been gone"
argument_list|,
name|p
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cumulative vmem for the gone-process is "
operator|+
name|p
operator|.
name|getCumulativeVmem
argument_list|()
operator|+
literal|" . It should be zero."
argument_list|,
name|p
operator|.
name|getCumulativeVmem
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"[ ]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get PID from a pid-file.    *     * @param pidFileName    *          Name of the pid-file.    * @return the PID string read from the pid-file. Returns null if the    *         pidFileName points to a non-existing file or if read fails from the    *         file.    */
DECL|method|getPidFromPidFile (String pidFileName)
specifier|public
specifier|static
name|String
name|getPidFromPidFile
parameter_list|(
name|String
name|pidFileName
parameter_list|)
block|{
name|BufferedReader
name|pidFile
init|=
literal|null
decl_stmt|;
name|FileReader
name|fReader
init|=
literal|null
decl_stmt|;
name|String
name|pid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|FileReader
argument_list|(
name|pidFileName
argument_list|)
expr_stmt|;
name|pidFile
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"PidFile doesn't exist : "
operator|+
name|pidFileName
argument_list|)
expr_stmt|;
return|return
name|pid
return|;
block|}
try|try
block|{
name|pid
operator|=
name|pidFile
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to read from "
operator|+
name|pidFileName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fReader
operator|!=
literal|null
condition|)
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|pidFile
operator|!=
literal|null
condition|)
block|{
name|pidFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|pidFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|pid
return|;
block|}
block|}
end_class

end_unit

