begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|CRC32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Unit test to verify that the pure-Java CRC32 algorithm gives  * the same results as the built-in implementation.  */
end_comment

begin_class
DECL|class|TestPureJavaCrc32
specifier|public
class|class
name|TestPureJavaCrc32
extends|extends
name|TestCase
block|{
DECL|field|theirs
specifier|private
name|CRC32
name|theirs
decl_stmt|;
DECL|field|ours
specifier|private
name|PureJavaCrc32
name|ours
decl_stmt|;
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|theirs
operator|=
operator|new
name|CRC32
argument_list|()
expr_stmt|;
name|ours
operator|=
operator|new
name|PureJavaCrc32
argument_list|()
expr_stmt|;
block|}
DECL|method|testCorrectness ()
specifier|public
name|void
name|testCorrectness
parameter_list|()
throws|throws
name|Exception
block|{
name|checkSame
argument_list|()
expr_stmt|;
name|theirs
operator|.
name|update
argument_list|(
literal|104
argument_list|)
expr_stmt|;
name|ours
operator|.
name|update
argument_list|(
literal|104
argument_list|)
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
name|checkOnBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|40
block|,
literal|60
block|,
literal|97
block|,
operator|-
literal|70
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkOnBytes
argument_list|(
literal|"hello world!"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|randomBytes
index|[]
init|=
operator|new
name|byte
index|[
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2048
argument_list|)
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|randomBytes
argument_list|)
expr_stmt|;
name|checkOnBytes
argument_list|(
name|randomBytes
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkOnBytes (byte[] bytes, boolean print)
specifier|private
name|void
name|checkOnBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|boolean
name|print
parameter_list|)
block|{
name|theirs
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ours
operator|.
name|reset
argument_list|()
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ours
operator|.
name|update
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|theirs
operator|.
name|update
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|print
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"theirs:\t"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|theirs
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"\nours:\t"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|ours
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|theirs
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ours
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ours
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|theirs
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|print
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"theirs:\t"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|theirs
operator|.
name|getValue
argument_list|()
argument_list|)
operator|+
literal|"\nours:\t"
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|ours
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkSame
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytes
operator|.
name|length
operator|>=
literal|10
condition|)
block|{
name|ours
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|theirs
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|checkSame
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkSame ()
specifier|private
name|void
name|checkSame
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|theirs
operator|.
name|getValue
argument_list|()
argument_list|,
name|ours
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performance tests to compare performance of the Pure Java implementation    * to the built-in java.util.zip implementation. This can be run from the    * command line with:    *    *   java -cp path/to/test/classes:path/to/common/classes \    *      'org.apache.hadoop.util.TestPureJavaCrc32$PerformanceTest'    *    * The output is in JIRA table format.    */
DECL|class|PerformanceTest
specifier|public
specifier|static
class|class
name|PerformanceTest
block|{
DECL|field|MAX_LEN
specifier|public
specifier|static
specifier|final
name|int
name|MAX_LEN
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// up to 32MB chunks
DECL|field|BYTES_PER_SIZE
specifier|public
specifier|static
specifier|final
name|int
name|BYTES_PER_SIZE
init|=
name|MAX_LEN
operator|*
literal|4
decl_stmt|;
DECL|method|getImplsToTest ()
specifier|public
specifier|static
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Checksum
argument_list|>
name|getImplsToTest
parameter_list|()
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Checksum
argument_list|>
name|impls
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Checksum
argument_list|>
argument_list|()
decl_stmt|;
name|impls
operator|.
name|put
argument_list|(
literal|"BuiltIn"
argument_list|,
operator|new
name|CRC32
argument_list|()
argument_list|)
expr_stmt|;
name|impls
operator|.
name|put
argument_list|(
literal|"PureJava"
argument_list|,
operator|new
name|PureJavaCrc32
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|impls
return|;
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Checksum
argument_list|>
name|impls
init|=
name|getImplsToTest
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|MAX_LEN
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
comment|// Print header
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"||num bytes||"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|entry
range|:
name|impls
operator|.
name|keySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
name|entry
operator|+
literal|" MB/sec||"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|// Warm up implementations to get jit going.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Checksum
argument_list|>
name|entry
range|:
name|impls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|doBench
argument_list|(
literal|"warmUp"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|bytes
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doBench
argument_list|(
literal|"warmUp"
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|bytes
argument_list|,
literal|2101
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Test on a variety of sizes
for|for
control|(
name|int
name|size
init|=
literal|1
init|;
name|size
operator|<
name|MAX_LEN
condition|;
name|size
operator|*=
literal|2
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"| %d\t|"
argument_list|,
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Checksum
argument_list|>
name|entry
range|:
name|impls
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|doBench
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doBench (String id, Checksum crc, byte[] bytes, int size, boolean printout)
specifier|private
specifier|static
name|void
name|doBench
parameter_list|(
name|String
name|id
parameter_list|,
name|Checksum
name|crc
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|size
parameter_list|,
name|boolean
name|printout
parameter_list|)
block|{
name|long
name|st
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|int
name|trials
init|=
name|BYTES_PER_SIZE
operator|/
name|size
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trials
condition|;
name|i
operator|++
control|)
block|{
name|crc
operator|.
name|update
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
name|long
name|et
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|double
name|mbProcessed
init|=
name|trials
operator|*
name|size
operator|/
literal|1024.0
operator|/
literal|1024.0
decl_stmt|;
name|double
name|secsElapsed
init|=
operator|(
name|et
operator|-
name|st
operator|)
operator|/
literal|1000000000.0d
decl_stmt|;
if|if
condition|(
name|printout
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%.3f \t|"
argument_list|,
name|mbProcessed
operator|/
name|secsElapsed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

