begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_class
DECL|class|TestStringUtils
specifier|public
class|class
name|TestStringUtils
extends|extends
name|TestCase
block|{
DECL|field|NULL_STR
specifier|final
specifier|private
specifier|static
name|String
name|NULL_STR
init|=
literal|null
decl_stmt|;
DECL|field|EMPTY_STR
specifier|final
specifier|private
specifier|static
name|String
name|EMPTY_STR
init|=
literal|""
decl_stmt|;
DECL|field|STR_WO_SPECIAL_CHARS
specifier|final
specifier|private
specifier|static
name|String
name|STR_WO_SPECIAL_CHARS
init|=
literal|"AB"
decl_stmt|;
DECL|field|STR_WITH_COMMA
specifier|final
specifier|private
specifier|static
name|String
name|STR_WITH_COMMA
init|=
literal|"A,B"
decl_stmt|;
DECL|field|ESCAPED_STR_WITH_COMMA
specifier|final
specifier|private
specifier|static
name|String
name|ESCAPED_STR_WITH_COMMA
init|=
literal|"A\\,B"
decl_stmt|;
DECL|field|STR_WITH_ESCAPE
specifier|final
specifier|private
specifier|static
name|String
name|STR_WITH_ESCAPE
init|=
literal|"AB\\"
decl_stmt|;
DECL|field|ESCAPED_STR_WITH_ESCAPE
specifier|final
specifier|private
specifier|static
name|String
name|ESCAPED_STR_WITH_ESCAPE
init|=
literal|"AB\\\\"
decl_stmt|;
DECL|field|STR_WITH_BOTH2
specifier|final
specifier|private
specifier|static
name|String
name|STR_WITH_BOTH2
init|=
literal|",A\\,,B\\\\,"
decl_stmt|;
DECL|field|ESCAPED_STR_WITH_BOTH2
specifier|final
specifier|private
specifier|static
name|String
name|ESCAPED_STR_WITH_BOTH2
init|=
literal|"\\,A\\\\\\,\\,B\\\\\\\\\\,"
decl_stmt|;
DECL|method|testEscapeString ()
specifier|public
name|void
name|testEscapeString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|NULL_STR
argument_list|,
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|NULL_STR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EMPTY_STR
argument_list|,
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|EMPTY_STR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STR_WO_SPECIAL_CHARS
argument_list|,
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|STR_WO_SPECIAL_CHARS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ESCAPED_STR_WITH_COMMA
argument_list|,
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|STR_WITH_COMMA
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ESCAPED_STR_WITH_ESCAPE
argument_list|,
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|STR_WITH_ESCAPE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ESCAPED_STR_WITH_BOTH2
argument_list|,
name|StringUtils
operator|.
name|escapeString
argument_list|(
name|STR_WITH_BOTH2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplit ()
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|NULL_STR
argument_list|,
name|StringUtils
operator|.
name|split
argument_list|(
name|NULL_STR
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|splits
init|=
name|StringUtils
operator|.
name|split
argument_list|(
name|EMPTY_STR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|splits
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
literal|",,"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|splits
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|STR_WO_SPECIAL_CHARS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STR_WO_SPECIAL_CHARS
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|splits
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|STR_WITH_COMMA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A"
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B"
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|splits
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|ESCAPED_STR_WITH_COMMA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ESCAPED_STR_WITH_COMMA
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|splits
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|STR_WITH_ESCAPE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STR_WITH_ESCAPE
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|splits
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|STR_WITH_BOTH2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EMPTY_STR
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"A\\,"
argument_list|,
name|splits
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"B\\\\"
argument_list|,
name|splits
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|splits
operator|=
name|StringUtils
operator|.
name|split
argument_list|(
name|ESCAPED_STR_WITH_BOTH2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ESCAPED_STR_WITH_BOTH2
argument_list|,
name|splits
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnescapeString ()
specifier|public
name|void
name|testUnescapeString
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|NULL_STR
argument_list|,
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|NULL_STR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EMPTY_STR
argument_list|,
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|EMPTY_STR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|STR_WO_SPECIAL_CHARS
argument_list|,
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|STR_WO_SPECIAL_CHARS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|STR_WITH_COMMA
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
name|STR_WITH_COMMA
argument_list|,
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|ESCAPED_STR_WITH_COMMA
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|STR_WITH_ESCAPE
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
name|STR_WITH_ESCAPE
argument_list|,
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|ESCAPED_STR_WITH_ESCAPE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|STR_WITH_BOTH2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|assertEquals
argument_list|(
name|STR_WITH_BOTH2
argument_list|,
name|StringUtils
operator|.
name|unEscapeString
argument_list|(
name|ESCAPED_STR_WITH_BOTH2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testTraditionalBinaryPrefix ()
specifier|public
name|void
name|testTraditionalBinaryPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|symbol
init|=
block|{
literal|"k"
block|,
literal|"m"
block|,
literal|"g"
block|,
literal|"t"
block|,
literal|"p"
block|,
literal|"e"
block|}
decl_stmt|;
name|long
name|m
init|=
literal|1024
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|symbol
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
literal|0
operator|+
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
literal|1
operator|+
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|*=
literal|1024
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1259520L
argument_list|,
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
literal|"-1230k"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|956703965184L
argument_list|,
name|StringUtils
operator|.
name|TraditionalBinaryPrefix
operator|.
name|string2long
argument_list|(
literal|"891g"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testJoin ()
specifier|public
name|void
name|testJoin
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|s
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|":"
argument_list|,
name|s
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|":"
argument_list|,
name|s
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a:b"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|":"
argument_list|,
name|s
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a:b:c"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
literal|":"
argument_list|,
name|s
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGetTrimmedStrings ()
specifier|public
name|void
name|testGetTrimmedStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|compactDirList
init|=
literal|"/spindle1/hdfs,/spindle2/hdfs,/spindle3/hdfs"
decl_stmt|;
name|String
name|spacedDirList
init|=
literal|"/spindle1/hdfs, /spindle2/hdfs, /spindle3/hdfs"
decl_stmt|;
name|String
name|pathologicalDirList1
init|=
literal|" /spindle1/hdfs  ,  /spindle2/hdfs ,/spindle3/hdfs "
decl_stmt|;
name|String
name|pathologicalDirList2
init|=
literal|" /spindle1/hdfs  ,  /spindle2/hdfs ,/spindle3/hdfs , "
decl_stmt|;
name|String
name|emptyList1
init|=
literal|""
decl_stmt|;
name|String
name|emptyList2
init|=
literal|"   "
decl_stmt|;
name|String
index|[]
name|expectedArray
init|=
block|{
literal|"/spindle1/hdfs"
block|,
literal|"/spindle2/hdfs"
block|,
literal|"/spindle3/hdfs"
block|}
decl_stmt|;
name|String
index|[]
name|emptyArray
init|=
block|{}
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedArray
argument_list|,
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|compactDirList
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedArray
argument_list|,
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|spacedDirList
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedArray
argument_list|,
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|pathologicalDirList1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedArray
argument_list|,
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|pathologicalDirList2
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|emptyArray
argument_list|,
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|emptyList1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|emptyArray
argument_list|,
name|StringUtils
operator|.
name|getTrimmedStrings
argument_list|(
name|emptyList2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

