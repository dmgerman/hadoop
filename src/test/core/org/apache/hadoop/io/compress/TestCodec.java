begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RandomDatum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
operator|.
name|CompressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibCompressor
operator|.
name|CompressionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
operator|.
name|ZlibFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestCodec
specifier|public
class|class
name|TestCodec
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCodec
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|10000
decl_stmt|;
DECL|field|seed
specifier|private
name|int
name|seed
init|=
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testDefaultCodec ()
specifier|public
name|void
name|testDefaultCodec
parameter_list|()
throws|throws
name|IOException
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCodec ()
specifier|public
name|void
name|testGzipCodec
parameter_list|()
throws|throws
name|IOException
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBZip2Codec ()
specifier|public
name|void
name|testBZip2Codec
parameter_list|()
throws|throws
name|IOException
block|{
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGzipCodecWithParam ()
specifier|public
name|void
name|testGzipCodecWithParam
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|setCompressionStrategy
argument_list|(
name|conf
argument_list|,
name|CompressionStrategy
operator|.
name|HUFFMAN_ONLY
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
literal|"org.apache.hadoop.io.compress.GzipCodec"
argument_list|)
expr_stmt|;
block|}
DECL|method|codecTest (Configuration conf, int seed, int count, String codecClass)
specifier|private
specifier|static
name|void
name|codecTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|seed
parameter_list|,
name|int
name|count
parameter_list|,
name|String
name|codecClass
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Create the codec
name|CompressionCodec
name|codec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|codec
operator|=
operator|(
name|CompressionCodec
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|codecClass
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal codec!"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Created a Codec object of type: "
operator|+
name|codecClass
argument_list|)
expr_stmt|;
comment|// Generate data
name|DataOutputBuffer
name|data
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|RandomDatum
operator|.
name|Generator
name|generator
init|=
operator|new
name|RandomDatum
operator|.
name|Generator
argument_list|(
name|seed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|generator
operator|.
name|next
argument_list|()
expr_stmt|;
name|RandomDatum
name|key
init|=
name|generator
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RandomDatum
name|value
init|=
name|generator
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|key
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|value
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|DataInputBuffer
name|originalData
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|DataInputStream
name|originalIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|originalData
argument_list|)
argument_list|)
decl_stmt|;
name|originalData
operator|.
name|reset
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Generated "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
comment|// Compress data
name|DataOutputBuffer
name|compressedDataBuffer
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|deflateFilter
init|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|compressedDataBuffer
argument_list|)
decl_stmt|;
name|DataOutputStream
name|deflateOut
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|deflateFilter
argument_list|)
argument_list|)
decl_stmt|;
name|deflateOut
operator|.
name|write
argument_list|(
name|data
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|deflateOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|deflateFilter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished compressing data"
argument_list|)
expr_stmt|;
comment|// De-compress data
name|DataInputBuffer
name|deCompressedDataBuffer
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|deCompressedDataBuffer
operator|.
name|reset
argument_list|(
name|compressedDataBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|compressedDataBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|CompressionInputStream
name|inflateFilter
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|deCompressedDataBuffer
argument_list|)
decl_stmt|;
name|DataInputStream
name|inflateIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|BufferedInputStream
argument_list|(
name|inflateFilter
argument_list|)
argument_list|)
decl_stmt|;
comment|// Check
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|RandomDatum
name|k1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v1
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|v1
operator|.
name|readFields
argument_list|(
name|originalIn
argument_list|)
expr_stmt|;
name|RandomDatum
name|k2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|RandomDatum
name|v2
init|=
operator|new
name|RandomDatum
argument_list|()
decl_stmt|;
name|k2
operator|.
name|readFields
argument_list|(
name|inflateIn
argument_list|)
expr_stmt|;
name|v2
operator|.
name|readFields
argument_list|(
name|inflateIn
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"SUCCESS! Completed checking "
operator|+
name|count
operator|+
literal|" records"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitableCodecs ()
specifier|public
name|void
name|testSplitableCodecs
parameter_list|()
throws|throws
name|Exception
block|{
name|testSplitableCodec
argument_list|(
name|BZip2Codec
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitableCodec ( Class<? extends SplittableCompressionCodec> codecClass)
specifier|private
name|void
name|testSplitableCodec
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|SplittableCompressionCodec
argument_list|>
name|codecClass
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|DEFLBYTES
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|SplittableCompressionCodec
name|codec
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|codecClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|infile
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|writeSplitTestFile
argument_list|(
name|fs
argument_list|,
name|rand
argument_list|,
name|codec
argument_list|,
name|DEFLBYTES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|infile
operator|.
name|getLen
argument_list|()
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected compression: "
operator|+
name|DEFLBYTES
operator|+
literal|" -> "
operator|+
name|infile
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|flen
init|=
operator|(
name|int
operator|)
name|infile
operator|.
name|getLen
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
specifier|final
name|Decompressor
name|dcmp
init|=
name|CodecPool
operator|.
name|getDecompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|infile
operator|.
name|getLen
argument_list|()
condition|;
name|pos
operator|+=
name|rand
operator|.
name|nextInt
argument_list|(
name|flen
operator|/
literal|8
argument_list|)
control|)
block|{
comment|// read from random positions, verifying that there exist two sequential
comment|// lines as written in writeSplitTestFile
specifier|final
name|SplitCompressionInputStream
name|in
init|=
name|codec
operator|.
name|createInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|infile
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|dcmp
argument_list|,
name|pos
argument_list|,
name|flen
argument_list|,
name|SplittableCompressionCodec
operator|.
name|READ_MODE
operator|.
name|BYBLOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|getAdjustedStart
argument_list|()
operator|>=
name|flen
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"SAMPLE "
operator|+
name|in
operator|.
name|getAdjustedStart
argument_list|()
operator|+
literal|","
operator|+
name|in
operator|.
name|getAdjustedEnd
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LineReader
name|lreader
init|=
operator|new
name|LineReader
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|lreader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|// ignore; likely partial
if|if
condition|(
name|in
operator|.
name|getPos
argument_list|()
operator|>=
name|flen
condition|)
block|{
break|break;
block|}
name|lreader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
specifier|final
name|int
name|seq1
init|=
name|readLeadingInt
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|lreader
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|.
name|getPos
argument_list|()
operator|>=
name|flen
condition|)
block|{
break|break;
block|}
specifier|final
name|int
name|seq2
init|=
name|readLeadingInt
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatched lines"
argument_list|,
name|seq1
operator|+
literal|1
argument_list|,
name|seq2
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|CodecPool
operator|.
name|returnDecompressor
argument_list|(
name|dcmp
argument_list|)
expr_stmt|;
block|}
comment|// remove on success
name|fs
operator|.
name|delete
argument_list|(
name|infile
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|readLeadingInt (Text txt)
specifier|private
specifier|static
name|int
name|readLeadingInt
parameter_list|(
name|Text
name|txt
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|txt
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|in
operator|.
name|readInt
argument_list|()
return|;
block|}
comment|/** Write infLen bytes (deflated) to file in test dir using codec.    * Records are of the form    *&lt;i&gt;&lt;b64 rand&gt;&lt;i+i&gt;&lt;b64 rand&gt;    */
DECL|method|writeSplitTestFile (FileSystem fs, Random rand, CompressionCodec codec, long infLen)
specifier|private
specifier|static
name|Path
name|writeSplitTestFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Random
name|rand
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|,
name|long
name|infLen
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|REC_SIZE
init|=
literal|1024
decl_stmt|;
specifier|final
name|Path
name|wd
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
argument_list|,
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|wd
argument_list|,
literal|"test"
operator|+
name|codec
operator|.
name|getDefaultExtension
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|REC_SIZE
index|]
decl_stmt|;
specifier|final
name|Base64
name|b64
init|=
operator|new
name|Base64
argument_list|()
decl_stmt|;
name|DataOutputStream
name|fout
init|=
literal|null
decl_stmt|;
name|Compressor
name|cmp
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
try|try
block|{
name|fout
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|codec
operator|.
name|createOutputStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
argument_list|,
name|cmp
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|(
name|REC_SIZE
operator|*
literal|4
operator|/
literal|3
operator|+
literal|4
argument_list|)
decl_stmt|;
name|int
name|seq
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|infLen
operator|>
literal|0
condition|)
block|{
name|rand
operator|.
name|nextBytes
argument_list|(
name|b
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|b64enc
init|=
name|b64
operator|.
name|encode
argument_list|(
name|b
argument_list|)
decl_stmt|;
comment|// ensures rand printable, no LF
name|dob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|dob
operator|.
name|writeInt
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b64enc
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|fout
operator|.
name|write
argument_list|(
name|b64enc
argument_list|)
expr_stmt|;
name|fout
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
operator|++
name|seq
expr_stmt|;
name|infLen
operator|-=
name|b64enc
operator|.
name|length
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Wrote "
operator|+
name|seq
operator|+
literal|" records to "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|cleanup
argument_list|(
name|LOG
argument_list|,
name|fout
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
annotation|@
name|Test
DECL|method|testCodecPoolGzipReuse ()
specifier|public
name|void
name|testCodecPoolGzipReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hadoop.native.lib"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"testCodecPoolGzipReuse skipped: native libs not loaded"
argument_list|)
expr_stmt|;
return|return;
block|}
name|GzipCodec
name|gzc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|GzipCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|DefaultCodec
name|dfc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|DefaultCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Compressor
name|c1
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|gzc
argument_list|)
decl_stmt|;
name|Compressor
name|c2
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|dfc
argument_list|)
decl_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c1
argument_list|)
expr_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Got mismatched ZlibCompressor"
argument_list|,
name|c2
operator|!=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|gzc
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|gzipReinitTest (Configuration conf, CompressionCodec codec)
specifier|private
specifier|static
name|void
name|gzipReinitTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CompressionCodec
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add codec to cache
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|BEST_COMPRESSION
argument_list|)
expr_stmt|;
name|ZlibFactory
operator|.
name|setCompressionStrategy
argument_list|(
name|conf
argument_list|,
name|CompressionStrategy
operator|.
name|DEFAULT_STRATEGY
argument_list|)
expr_stmt|;
name|Compressor
name|c1
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|)
decl_stmt|;
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c1
argument_list|)
expr_stmt|;
comment|// reset compressor's compression level to perform no compression
name|ZlibFactory
operator|.
name|setCompressionLevel
argument_list|(
name|conf
argument_list|,
name|CompressionLevel
operator|.
name|NO_COMPRESSION
argument_list|)
expr_stmt|;
name|Compressor
name|c2
init|=
name|CodecPool
operator|.
name|getCompressor
argument_list|(
name|codec
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// ensure same compressor placed earlier
name|assertTrue
argument_list|(
literal|"Got mismatched ZlibCompressor"
argument_list|,
name|c1
operator|==
name|c2
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|CompressionOutputStream
name|cos
init|=
literal|null
decl_stmt|;
comment|// write trivially compressable data
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1
operator|<<
literal|15
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
operator|(
name|byte
operator|)
literal|43
argument_list|)
expr_stmt|;
try|try
block|{
name|cos
operator|=
name|codec
operator|.
name|createOutputStream
argument_list|(
name|bos
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|cos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cos
operator|!=
literal|null
condition|)
block|{
name|cos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|CodecPool
operator|.
name|returnCompressor
argument_list|(
name|c2
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|outbytes
init|=
name|bos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
comment|// verify data were not compressed
name|assertTrue
argument_list|(
literal|"Compressed bytes contrary to configuration"
argument_list|,
name|outbytes
operator|.
name|length
operator|>=
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCodecPoolCompressorReinit ()
specifier|public
name|void
name|testCodecPoolCompressorReinit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hadoop.native.lib"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ZlibFactory
operator|.
name|isNativeZlibLoaded
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|GzipCodec
name|gzc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|GzipCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|gzipReinitTest
argument_list|(
name|conf
argument_list|,
name|gzc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"testCodecPoolCompressorReinit skipped: native libs not loaded"
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hadoop.native.lib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DefaultCodec
name|dfc
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|DefaultCodec
operator|.
name|class
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|gzipReinitTest
argument_list|(
name|conf
argument_list|,
name|dfc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSequenceFileDefaultCodec ()
specifier|public
name|void
name|testSequenceFileDefaultCodec
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|200000
argument_list|,
literal|"org.apache.hadoop.io.compress.DefaultCodec"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSequenceFileBZip2Codec ()
specifier|public
name|void
name|testSequenceFileBZip2Codec
parameter_list|()
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|0
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|100
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sequenceFileCodecTest
argument_list|(
name|conf
argument_list|,
literal|200000
argument_list|,
literal|"org.apache.hadoop.io.compress.BZip2Codec"
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
DECL|method|sequenceFileCodecTest (Configuration conf, int lines, String codecClass, int blockSize)
specifier|private
specifier|static
name|void
name|sequenceFileCodecTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|lines
parameter_list|,
name|String
name|codecClass
parameter_list|,
name|int
name|blockSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|Path
name|filePath
init|=
operator|new
name|Path
argument_list|(
literal|"SequenceFileCodecTest."
operator|+
name|codecClass
argument_list|)
decl_stmt|;
comment|// Configuration
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.seqfile.compress.blocksize"
argument_list|,
name|blockSize
argument_list|)
expr_stmt|;
comment|// Create the SequenceFile
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating SequenceFile with codec \""
operator|+
name|codecClass
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|filePath
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|CompressionType
operator|.
name|BLOCK
argument_list|,
operator|(
name|CompressionCodec
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|codecClass
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
comment|// Write some data
name|LOG
operator|.
name|info
argument_list|(
literal|"Writing to SequenceFile..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
condition|;
name|i
operator|++
control|)
block|{
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
literal|"key"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|(
literal|"value"
operator|+
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Read the data back and check
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading from the SequenceFile..."
argument_list|)
expr_stmt|;
name|SequenceFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|filePath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Writable
name|key
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|getKeyClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Writable
name|value
init|=
operator|(
name|Writable
operator|)
name|reader
operator|.
name|getValueClass
argument_list|()
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|int
name|lc
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"key"
operator|+
name|lc
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value"
operator|+
name|lc
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lc
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|lines
argument_list|,
name|lc
argument_list|)
expr_stmt|;
comment|// Delete temporary files
name|fs
operator|.
name|delete
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SUCCESS! Completed SequenceFileCodecTest with codec \""
operator|+
name|codecClass
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|String
name|codecClass
init|=
literal|"org.apache.hadoop.io.compress.DefaultCodec"
decl_stmt|;
name|String
name|usage
init|=
literal|"TestCodec [-count N] [-codec<codec class>]"
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|usage
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
comment|// parse command line
if|if
condition|(
name|args
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-count"
argument_list|)
condition|)
block|{
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"-codec"
argument_list|)
condition|)
block|{
name|codecClass
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|seed
init|=
literal|0
decl_stmt|;
name|codecTest
argument_list|(
name|conf
argument_list|,
name|seed
argument_list|,
name|count
argument_list|,
name|codecClass
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

