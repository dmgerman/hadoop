begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
DECL|class|TestBloomMapFile
specifier|public
class|class
name|TestBloomMapFile
extends|extends
name|TestCase
block|{
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|method|testMembershipTest ()
specifier|public
name|void
name|testMembershipTest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// write the file
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
name|getName
argument_list|()
operator|+
literal|".bloommapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"io.mapfile.bloom.size"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
decl_stmt|;
name|IntWritable
name|key
init|=
operator|new
name|IntWritable
argument_list|()
decl_stmt|;
name|Text
name|value
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|value
operator|.
name|set
argument_list|(
literal|"00"
operator|+
name|i
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|BloomMapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|BloomMapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|reader
operator|.
name|probablyHasKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
name|falseNeg
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|qualifiedDirName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"False negatives: "
operator|+
name|falseNeg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"False positives: "
operator|+
name|falsePos
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|falsePos
operator|<
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkMembershipVaryingSizedKeys (String name, List<Text> keys)
specifier|private
name|void
name|checkMembershipVaryingSizedKeys
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Text
argument_list|>
name|keys
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"."
argument_list|)
operator|+
name|name
operator|+
literal|".bloommapfile"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDirName
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|BloomMapFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|BloomMapFile
operator|.
name|Writer
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|Text
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Text
name|key
range|:
name|keys
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|NullWritable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// will check for membership in the opposite order of how keys were inserted
name|BloomMapFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|BloomMapFile
operator|.
name|Reader
argument_list|(
name|fs
argument_list|,
name|qualifiedDirName
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|keys
argument_list|)
expr_stmt|;
for|for
control|(
name|Text
name|key
range|:
name|keys
control|)
block|{
name|assertTrue
argument_list|(
literal|"False negative for existing key "
operator|+
name|key
argument_list|,
name|reader
operator|.
name|probablyHasKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|qualifiedDirName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testMembershipVaryingSizedKeysTest1 ()
specifier|public
name|void
name|testMembershipVaryingSizedKeysTest1
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"BB"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMembershipVaryingSizedKeys
argument_list|(
name|getName
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
DECL|method|testMembershipVaryingSizedKeysTest2 ()
specifier|public
name|void
name|testMembershipVaryingSizedKeysTest2
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Text
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Text
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"AA"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|Text
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|checkMembershipVaryingSizedKeys
argument_list|(
name|getName
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

