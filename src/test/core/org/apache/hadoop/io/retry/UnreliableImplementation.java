begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.retry
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_class
DECL|class|UnreliableImplementation
specifier|public
class|class
name|UnreliableImplementation
implements|implements
name|UnreliableInterface
block|{
DECL|field|failsOnceInvocationCount
specifier|private
name|int
name|failsOnceInvocationCount
decl_stmt|,
DECL|field|failsOnceWithValueInvocationCount
name|failsOnceWithValueInvocationCount
decl_stmt|,
DECL|field|failsTenTimesInvocationCount
name|failsTenTimesInvocationCount
decl_stmt|;
DECL|method|alwaysSucceeds ()
specifier|public
name|void
name|alwaysSucceeds
parameter_list|()
block|{
comment|// do nothing
block|}
DECL|method|alwaysFailsWithFatalException ()
specifier|public
name|void
name|alwaysFailsWithFatalException
parameter_list|()
throws|throws
name|FatalException
block|{
throw|throw
operator|new
name|FatalException
argument_list|()
throw|;
block|}
DECL|method|alwaysFailsWithRemoteFatalException ()
specifier|public
name|void
name|alwaysFailsWithRemoteFatalException
parameter_list|()
throws|throws
name|RemoteException
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|FatalException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Oops"
argument_list|)
throw|;
block|}
DECL|method|failsOnceThenSucceeds ()
specifier|public
name|void
name|failsOnceThenSucceeds
parameter_list|()
throws|throws
name|UnreliableException
block|{
if|if
condition|(
name|failsOnceInvocationCount
operator|++
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|UnreliableException
argument_list|()
throw|;
block|}
block|}
DECL|method|failsOnceThenSucceedsWithReturnValue ()
specifier|public
name|boolean
name|failsOnceThenSucceedsWithReturnValue
parameter_list|()
throws|throws
name|UnreliableException
block|{
if|if
condition|(
name|failsOnceWithValueInvocationCount
operator|++
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|UnreliableException
argument_list|()
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|failsTenTimesThenSucceeds ()
specifier|public
name|void
name|failsTenTimesThenSucceeds
parameter_list|()
throws|throws
name|UnreliableException
block|{
if|if
condition|(
name|failsTenTimesInvocationCount
operator|++
operator|<
literal|10
condition|)
block|{
throw|throw
operator|new
name|UnreliableException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

