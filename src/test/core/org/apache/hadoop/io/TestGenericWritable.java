begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * TestCase for {@link GenericWritable} class.  * @see TestWritable#testWritable(Writable)  */
end_comment

begin_class
DECL|class|TestGenericWritable
specifier|public
class|class
name|TestGenericWritable
extends|extends
name|TestCase
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|CONF_TEST_KEY
specifier|public
specifier|static
specifier|final
name|String
name|CONF_TEST_KEY
init|=
literal|"test.generic.writable"
decl_stmt|;
DECL|field|CONF_TEST_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|CONF_TEST_VALUE
init|=
literal|"dummy"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|//set the configuration parameter
name|conf
operator|.
name|set
argument_list|(
name|CONF_TEST_KEY
argument_list|,
name|CONF_TEST_VALUE
argument_list|)
expr_stmt|;
block|}
comment|/** Dummy class for testing {@link GenericWritable} */
DECL|class|Foo
specifier|public
specifier|static
class|class
name|Foo
implements|implements
name|Writable
block|{
DECL|field|foo
specifier|private
name|String
name|foo
init|=
literal|"foo"
decl_stmt|;
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|foo
operator|=
name|Text
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|foo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Foo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|foo
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Foo
operator|)
name|obj
operator|)
operator|.
name|foo
argument_list|)
return|;
block|}
block|}
comment|/** Dummy class for testing {@link GenericWritable} */
DECL|class|Bar
specifier|public
specifier|static
class|class
name|Bar
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|bar
specifier|private
name|int
name|bar
init|=
literal|42
decl_stmt|;
comment|//The Answer to The Ultimate Question Of Life, the Universe and Everything
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|bar
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|Bar
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|bar
operator|==
operator|(
operator|(
name|Bar
operator|)
name|obj
operator|)
operator|.
name|bar
return|;
block|}
block|}
comment|/** Dummy class for testing {@link GenericWritable} */
DECL|class|Baz
specifier|public
specifier|static
class|class
name|Baz
extends|extends
name|Bar
block|{
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|//needs a configuration parameter
name|assertEquals
argument_list|(
literal|"Configuration is not set for the wrapped object"
argument_list|,
name|CONF_TEST_VALUE
argument_list|,
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|CONF_TEST_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Dummy class for testing {@link GenericWritable} */
DECL|class|FooGenericWritable
specifier|public
specifier|static
class|class
name|FooGenericWritable
extends|extends
name|GenericWritable
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getTypes ()
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
index|[]
name|getTypes
parameter_list|()
block|{
return|return
operator|new
name|Class
index|[]
block|{
name|Foo
operator|.
name|class
block|,
name|Bar
operator|.
name|class
block|,
name|Baz
operator|.
name|class
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|FooGenericWritable
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|get
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|FooGenericWritable
operator|)
name|obj
operator|)
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|testFooWritable ()
specifier|public
name|void
name|testFooWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing Writable wrapped in GenericWritable"
argument_list|)
expr_stmt|;
name|FooGenericWritable
name|generic
init|=
operator|new
name|FooGenericWritable
argument_list|()
decl_stmt|;
name|generic
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Foo
name|foo
init|=
operator|new
name|Foo
argument_list|()
decl_stmt|;
name|generic
operator|.
name|set
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generic
argument_list|)
expr_stmt|;
block|}
DECL|method|testBarWritable ()
specifier|public
name|void
name|testBarWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing Writable, Configurable wrapped in GenericWritable"
argument_list|)
expr_stmt|;
name|FooGenericWritable
name|generic
init|=
operator|new
name|FooGenericWritable
argument_list|()
decl_stmt|;
name|generic
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Bar
name|bar
init|=
operator|new
name|Bar
argument_list|()
decl_stmt|;
name|bar
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|generic
operator|.
name|set
argument_list|(
name|bar
argument_list|)
expr_stmt|;
comment|//test writing generic writable
name|FooGenericWritable
name|after
init|=
operator|(
name|FooGenericWritable
operator|)
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generic
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|//test configuration
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing if Configuration is passed to wrapped classes"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|after
operator|.
name|get
argument_list|()
operator|instanceof
name|Configurable
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|Configurable
operator|)
name|after
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testBazWritable ()
specifier|public
name|void
name|testBazWritable
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Testing for GenericWritable to find class names"
argument_list|)
expr_stmt|;
name|FooGenericWritable
name|generic
init|=
operator|new
name|FooGenericWritable
argument_list|()
decl_stmt|;
name|generic
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Baz
name|baz
init|=
operator|new
name|Baz
argument_list|()
decl_stmt|;
name|generic
operator|.
name|set
argument_list|(
name|baz
argument_list|)
expr_stmt|;
name|TestWritable
operator|.
name|testWritable
argument_list|(
name|generic
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|testSet ()
specifier|public
name|void
name|testSet
parameter_list|()
throws|throws
name|Exception
block|{
name|Foo
name|foo
init|=
operator|new
name|Foo
argument_list|()
decl_stmt|;
name|FooGenericWritable
name|generic
init|=
operator|new
name|FooGenericWritable
argument_list|()
decl_stmt|;
comment|//exception should not occur
name|generic
operator|.
name|set
argument_list|(
name|foo
argument_list|)
expr_stmt|;
try|try
block|{
comment|//exception should occur, since IntWritable is not registered
name|generic
operator|=
operator|new
name|FooGenericWritable
argument_list|()
expr_stmt|;
name|generic
operator|.
name|set
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Generic writable should have thrown an exception for a Writable not registered"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
DECL|method|testGet ()
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|Foo
name|foo
init|=
operator|new
name|Foo
argument_list|()
decl_stmt|;
name|FooGenericWritable
name|generic
init|=
operator|new
name|FooGenericWritable
argument_list|()
decl_stmt|;
name|generic
operator|.
name|set
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|foo
argument_list|,
name|generic
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

