begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Tests MapWritable  */
end_comment

begin_class
DECL|class|TestMapWritable
specifier|public
class|class
name|TestMapWritable
extends|extends
name|TestCase
block|{
comment|/** the test */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testMapWritable ()
specifier|public
name|void
name|testMapWritable
parameter_list|()
block|{
name|Text
index|[]
name|keys
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"Key3"
argument_list|)
block|,     }
decl_stmt|;
name|BytesWritable
index|[]
name|values
init|=
block|{
operator|new
name|BytesWritable
argument_list|(
literal|"value1"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|BytesWritable
argument_list|(
literal|"value2"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|,
operator|new
name|BytesWritable
argument_list|(
literal|"value3"
operator|.
name|getBytes
argument_list|()
argument_list|)
block|}
decl_stmt|;
name|MapWritable
name|inMap
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inMap
operator|.
name|put
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|MapWritable
name|outMap
init|=
operator|new
name|MapWritable
argument_list|(
name|inMap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inMap
operator|.
name|size
argument_list|()
argument_list|,
name|outMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Writable
argument_list|,
name|Writable
argument_list|>
name|e
range|:
name|inMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|outMap
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|WritableComparable
operator|)
name|outMap
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now for something a little harder...
name|Text
index|[]
name|maps
init|=
block|{
operator|new
name|Text
argument_list|(
literal|"map1"
argument_list|)
block|,
operator|new
name|Text
argument_list|(
literal|"map2"
argument_list|)
block|}
decl_stmt|;
name|MapWritable
name|mapOfMaps
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
name|mapOfMaps
operator|.
name|put
argument_list|(
name|maps
index|[
literal|0
index|]
argument_list|,
name|inMap
argument_list|)
expr_stmt|;
name|mapOfMaps
operator|.
name|put
argument_list|(
name|maps
index|[
literal|1
index|]
argument_list|,
name|outMap
argument_list|)
expr_stmt|;
name|MapWritable
name|copyOfMapOfMaps
init|=
operator|new
name|MapWritable
argument_list|(
name|mapOfMaps
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|copyOfMapOfMaps
operator|.
name|containsKey
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|MapWritable
name|a
init|=
operator|(
name|MapWritable
operator|)
name|mapOfMaps
operator|.
name|get
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|MapWritable
name|b
init|=
operator|(
name|MapWritable
operator|)
name|copyOfMapOfMaps
operator|.
name|get
argument_list|(
name|maps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Writable
name|key
range|:
name|a
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|b
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// This will work because we know what we put into each set
name|WritableComparable
name|aValue
init|=
operator|(
name|WritableComparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|WritableComparable
name|bValue
init|=
operator|(
name|WritableComparable
operator|)
name|b
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|aValue
operator|.
name|compareTo
argument_list|(
name|bValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that number of "unknown" classes is propagated across multiple copies.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testForeignClass ()
specifier|public
name|void
name|testForeignClass
parameter_list|()
block|{
name|MapWritable
name|inMap
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
name|inMap
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key"
argument_list|)
argument_list|,
operator|new
name|UTF8
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|inMap
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
operator|new
name|UTF8
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|MapWritable
name|outMap
init|=
operator|new
name|MapWritable
argument_list|(
name|inMap
argument_list|)
decl_stmt|;
name|MapWritable
name|copyOfCopy
init|=
operator|new
name|MapWritable
argument_list|(
name|outMap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|copyOfCopy
operator|.
name|getNewClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert MapWritable does not grow across calls to readFields.    * @throws Exception    * @see<a href="https://issues.apache.org/jira/browse/HADOOP-2244">HADOOP-2244</a>    */
DECL|method|testMultipleCallsToReadFieldsAreSafe ()
specifier|public
name|void
name|testMultipleCallsToReadFieldsAreSafe
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create an instance and add a key/value.
name|MapWritable
name|m
init|=
operator|new
name|MapWritable
argument_list|()
decl_stmt|;
specifier|final
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Get current size of map.  Key values are 't'.
name|int
name|count
init|=
name|m
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Now serialize... save off the bytes.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|m
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now add new values to the MapWritable.
name|m
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key2"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now deserialize the original MapWritable.  Ensure count and key values
comment|// match original state.
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|m
operator|.
name|readFields
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|m
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|t
argument_list|)
operator|.
name|equals
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

