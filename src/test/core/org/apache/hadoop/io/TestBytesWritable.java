begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * This is the unit test for BytesWritable.  */
end_comment

begin_class
DECL|class|TestBytesWritable
specifier|public
class|class
name|TestBytesWritable
extends|extends
name|TestCase
block|{
DECL|method|testSizeChange ()
specifier|public
name|void
name|testSizeChange
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|hadoop
init|=
literal|"hadoop"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|BytesWritable
name|buf
init|=
operator|new
name|BytesWritable
argument_list|(
name|hadoop
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|buf
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|orig_capacity
init|=
name|buf
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|buf
operator|.
name|setSize
argument_list|(
name|size
operator|*
literal|2
argument_list|)
expr_stmt|;
name|int
name|new_capacity
init|=
name|buf
operator|.
name|getCapacity
argument_list|()
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|getBytes
argument_list|()
argument_list|,
name|size
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|new_capacity
operator|>=
name|size
operator|*
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
operator|*
literal|2
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|new_capacity
operator|!=
name|orig_capacity
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setSize
argument_list|(
name|size
operator|*
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|new_capacity
operator|!=
name|buf
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|hadoop
index|[
name|i
operator|%
name|size
index|]
argument_list|,
name|buf
operator|.
name|getBytes
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// ensure that copyBytes is exactly the right length
name|assertEquals
argument_list|(
name|size
operator|*
literal|4
argument_list|,
name|buf
operator|.
name|copyBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// shrink the buffer
name|buf
operator|.
name|setCapacity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// make sure the size has been cut down too
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// but that the data is still there
name|assertEquals
argument_list|(
name|hadoop
index|[
literal|0
index|]
argument_list|,
name|buf
operator|.
name|getBytes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testHash ()
specifier|public
name|void
name|testHash
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|owen
init|=
literal|"owen"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|BytesWritable
name|buf
init|=
operator|new
name|BytesWritable
argument_list|(
name|owen
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4347922
argument_list|,
name|buf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setCapacity
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4347922
argument_list|,
name|buf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|buf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCompare ()
specifier|public
name|void
name|testCompare
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[]
index|[]
block|{
literal|"abc"
operator|.
name|getBytes
argument_list|()
block|,
literal|"ad"
operator|.
name|getBytes
argument_list|()
block|,
literal|"abcd"
operator|.
name|getBytes
argument_list|()
block|,
literal|""
operator|.
name|getBytes
argument_list|()
block|,
literal|"b"
operator|.
name|getBytes
argument_list|()
block|}
decl_stmt|;
name|BytesWritable
index|[]
name|buf
init|=
operator|new
name|BytesWritable
index|[
name|values
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|buf
index|[
name|i
index|]
operator|=
operator|new
name|BytesWritable
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// check to make sure the compare function is symetric and reflexive
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertTrue
argument_list|(
name|buf
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|buf
index|[
name|j
index|]
argument_list|)
operator|==
operator|-
name|buf
index|[
name|j
index|]
operator|.
name|compareTo
argument_list|(
name|buf
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|i
operator|==
name|j
operator|)
operator|==
operator|(
name|buf
index|[
name|i
index|]
operator|.
name|compareTo
argument_list|(
name|buf
index|[
name|j
index|]
argument_list|)
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|buf
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|buf
index|[
literal|1
index|]
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buf
index|[
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|buf
index|[
literal|2
index|]
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buf
index|[
literal|2
index|]
operator|.
name|compareTo
argument_list|(
name|buf
index|[
literal|3
index|]
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buf
index|[
literal|3
index|]
operator|.
name|compareTo
argument_list|(
name|buf
index|[
literal|4
index|]
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|checkToString (byte[] input, String expected)
specifier|private
name|void
name|checkToString
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|String
name|actual
init|=
operator|new
name|BytesWritable
argument_list|(
name|input
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString ()
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|checkToString
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|0x10
block|}
argument_list|,
literal|"00 01 02 10"
argument_list|)
expr_stmt|;
name|checkToString
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|-
literal|0x80
block|,
operator|-
literal|0x7f
block|,
operator|-
literal|0x1
block|,
operator|-
literal|0x2
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
literal|"80 81 ff fe 01 00"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

