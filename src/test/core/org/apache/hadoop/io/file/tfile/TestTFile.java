begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
import|;
end_import

begin_comment
comment|/**  * test tfile features.  *   */
end_comment

begin_class
DECL|class|TestTFile
specifier|public
class|class
name|TestTFile
extends|extends
name|TestCase
block|{
DECL|field|ROOT
specifier|private
specifier|static
name|String
name|ROOT
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/tfile-test"
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|minBlockSize
specifier|private
specifier|static
specifier|final
name|int
name|minBlockSize
init|=
literal|512
decl_stmt|;
DECL|field|largeVal
specifier|private
specifier|static
specifier|final
name|int
name|largeVal
init|=
literal|3
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|field|localFormatter
specifier|private
specifier|static
specifier|final
name|String
name|localFormatter
init|=
literal|"%010d"
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
comment|// do nothing
block|}
comment|// read a key from the scanner
DECL|method|readKey (Scanner scanner)
specifier|public
name|byte
index|[]
name|readKey
parameter_list|(
name|Scanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|keylen
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKeyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|read
init|=
operator|new
name|byte
index|[
name|keylen
index|]
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getKey
argument_list|(
name|read
argument_list|)
expr_stmt|;
return|return
name|read
return|;
block|}
comment|// read a value from the scanner
DECL|method|readValue (Scanner scanner)
specifier|public
name|byte
index|[]
name|readValue
parameter_list|(
name|Scanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|valueLen
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|read
init|=
operator|new
name|byte
index|[
name|valueLen
index|]
decl_stmt|;
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|read
argument_list|)
expr_stmt|;
return|return
name|read
return|;
block|}
comment|// read a long value from the scanner
DECL|method|readLongValue (Scanner scanner, int len)
specifier|public
name|byte
index|[]
name|readLongValue
parameter_list|(
name|Scanner
name|scanner
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|din
init|=
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValueStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|din
operator|.
name|readFully
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|din
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|b
return|;
block|}
comment|// write some records into the tfile
comment|// write them twice
DECL|method|writeSomeRecords (Writer writer, int start, int n)
specifier|private
name|int
name|writeSomeRecords
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
literal|"value"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|value
operator|+
name|key
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
name|value
operator|+
name|key
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
comment|// read the records and check
DECL|method|readAndCheckbytes (Scanner scanner, int start, int n)
specifier|private
name|int
name|readAndCheckbytes
parameter_list|(
name|Scanner
name|scanner
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|value
init|=
literal|"value"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|readKey
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|readValue
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|String
name|keyStr
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|valStr
init|=
name|value
operator|+
name|keyStr
decl_stmt|;
name|assertTrue
argument_list|(
literal|"btyes for keys do not match "
operator|+
name|keyStr
operator|+
literal|" "
operator|+
operator|new
name|String
argument_list|(
name|key
argument_list|)
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|keyStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bytes for vals do not match "
operator|+
name|valStr
operator|+
literal|" "
operator|+
operator|new
name|String
argument_list|(
name|val
argument_list|)
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|valStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
name|readKey
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|val
operator|=
name|readValue
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"btyes for keys do not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|keyStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bytes for vals do not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|valStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
comment|// write some large records
comment|// write them twice
DECL|method|writeLargeRecords (Writer writer, int start, int n)
specifier|private
name|int
name|writeLargeRecords
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|largeVal
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
comment|// read large records
comment|// read them twice since its duplicated
DECL|method|readLargeRecords (Scanner scanner, int start, int n)
specifier|private
name|int
name|readLargeRecords
parameter_list|(
name|Scanner
name|scanner
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
name|readKey
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|String
name|keyStr
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"btyes for keys do not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|keyStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
name|key
operator|=
name|readKey
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"btyes for keys do not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|keyStr
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
comment|// write empty keys and values
DECL|method|writeEmptyRecords (Writer writer, int n)
specifier|private
name|void
name|writeEmptyRecords
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|// read empty keys and values
DECL|method|readEmptyRecords (Scanner scanner, int n)
specifier|private
name|void
name|readEmptyRecords
parameter_list|(
name|Scanner
name|scanner
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|readKey
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|readValue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|readKey
operator|=
name|readKey
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|readValue
operator|=
name|readValue
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed to match keys"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readKey
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed to match values"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed to advance cursor"
argument_list|,
name|scanner
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writePrepWithKnownLength (Writer writer, int start, int n)
specifier|private
name|int
name|writePrepWithKnownLength
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the length of the key
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|start
argument_list|)
decl_stmt|;
name|int
name|keyLen
init|=
name|key
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
name|String
name|value
init|=
literal|"value"
operator|+
name|key
decl_stmt|;
name|int
name|valueLen
init|=
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|DataOutputStream
name|out
init|=
name|writer
operator|.
name|prepareAppendKey
argument_list|(
name|keyLen
argument_list|)
decl_stmt|;
name|String
name|localKey
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|localKey
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|writer
operator|.
name|prepareAppendValue
argument_list|(
name|valueLen
argument_list|)
expr_stmt|;
name|String
name|localValue
init|=
literal|"value"
operator|+
name|localKey
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|localValue
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
DECL|method|readPrepWithKnownLength (Scanner scanner, int start, int n)
specifier|private
name|int
name|readPrepWithKnownLength
parameter_list|(
name|Scanner
name|scanner
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|read
init|=
name|readKey
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"keys not equal"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|value
init|=
literal|"value"
operator|+
name|key
decl_stmt|;
name|read
operator|=
name|readValue
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"values not equal"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
DECL|method|writePrepWithUnkownLength (Writer writer, int start, int n)
specifier|private
name|int
name|writePrepWithUnkownLength
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
operator|(
name|start
operator|+
name|n
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|DataOutputStream
name|out
init|=
name|writer
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
name|localKey
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|localKey
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|value
init|=
literal|"value"
operator|+
name|localKey
decl_stmt|;
name|out
operator|=
name|writer
operator|.
name|prepareAppendValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
DECL|method|readPrepWithUnknownLength (Scanner scanner, int start, int n)
specifier|private
name|int
name|readPrepWithUnknownLength
parameter_list|(
name|Scanner
name|scanner
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|read
init|=
name|readKey
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"keys not equal"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|read
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|read
operator|=
name|readValue
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|// should have thrown exception
block|}
name|String
name|value
init|=
literal|"value"
operator|+
name|key
decl_stmt|;
name|read
operator|=
name|readLongValue
argument_list|(
name|scanner
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"values nto equal"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|read
argument_list|,
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|start
operator|+
name|n
operator|)
return|;
block|}
DECL|method|getSomeKey (int rowId)
specifier|private
name|byte
index|[]
name|getSomeKey
parameter_list|(
name|int
name|rowId
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|rowId
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
DECL|method|writeRecords (Writer writer)
specifier|private
name|void
name|writeRecords
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writeEmptyRecords
argument_list|(
name|writer
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|writeSomeRecords
argument_list|(
name|writer
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|ret
operator|=
name|writeLargeRecords
argument_list|(
name|writer
argument_list|,
name|ret
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|writePrepWithKnownLength
argument_list|(
name|writer
argument_list|,
name|ret
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|ret
operator|=
name|writePrepWithUnkownLength
argument_list|(
name|writer
argument_list|,
name|ret
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readAllRecords (Scanner scanner)
specifier|private
name|void
name|readAllRecords
parameter_list|(
name|Scanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|readEmptyRecords
argument_list|(
name|scanner
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|ret
init|=
name|readAndCheckbytes
argument_list|(
name|scanner
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|ret
operator|=
name|readLargeRecords
argument_list|(
name|scanner
argument_list|,
name|ret
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|readPrepWithKnownLength
argument_list|(
name|scanner
argument_list|,
name|ret
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|ret
operator|=
name|readPrepWithUnknownLength
argument_list|(
name|scanner
argument_list|,
name|ret
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
DECL|method|createFSOutput (Path name)
specifier|private
name|FSDataOutputStream
name|createFSOutput
parameter_list|(
name|Path
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|name
argument_list|)
condition|)
name|fs
operator|.
name|delete
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|fs
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|fout
return|;
block|}
comment|/**    * test none codecs    */
DECL|method|basicWithSomeCodec (String codec)
name|void
name|basicWithSomeCodec
parameter_list|(
name|String
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|ncTFile
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"basic.tfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|createFSOutput
argument_list|(
name|ncTFile
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|Writer
argument_list|(
name|fout
argument_list|,
name|minBlockSize
argument_list|,
name|codec
argument_list|,
literal|"memcmp"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writeRecords
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|fin
init|=
name|fs
operator|.
name|open
argument_list|(
name|ncTFile
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|ncTFile
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|ncTFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|readAllRecords
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"location lookup failed"
argument_list|,
name|scanner
operator|.
name|seekTo
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the key and see if it matches
name|byte
index|[]
name|readKey
init|=
name|readKey
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"seeked key does not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|,
name|readKey
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|val1
init|=
name|readValue
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|val2
init|=
name|readValue
argument_list|(
name|scanner
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|val1
argument_list|,
name|val2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for lowerBound
name|scanner
operator|.
name|lowerBound
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"locaton lookup failed"
argument_list|,
name|scanner
operator|.
name|currentLocation
operator|.
name|compareTo
argument_list|(
name|reader
operator|.
name|end
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|readKey
operator|=
name|readKey
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"seeked key does not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readKey
argument_list|,
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check for upper bound
name|scanner
operator|.
name|upperBound
argument_list|(
name|getSomeKey
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"location lookup failed"
argument_list|,
name|scanner
operator|.
name|currentLocation
operator|.
name|compareTo
argument_list|(
name|reader
operator|.
name|end
argument_list|()
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|readKey
operator|=
name|readKey
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"seeked key does not match"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|readKey
argument_list|,
name|getSomeKey
argument_list|(
literal|51
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test for a range of scanner
name|scanner
operator|=
name|reader
operator|.
name|createScanner
argument_list|(
name|getSomeKey
argument_list|(
literal|10
argument_list|)
argument_list|,
name|getSomeKey
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|readAndCheckbytes
argument_list|(
name|scanner
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|ncTFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// unsorted with some codec
DECL|method|unsortedWithSomeCodec (String codec)
name|void
name|unsortedWithSomeCodec
parameter_list|(
name|String
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|uTfile
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"unsorted.tfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|createFSOutput
argument_list|(
name|uTfile
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|Writer
argument_list|(
name|fout
argument_list|,
name|minBlockSize
argument_list|,
name|codec
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writeRecords
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|fin
init|=
name|fs
operator|.
name|open
argument_list|(
name|uTfile
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|uTfile
argument_list|)
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|uTfile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|readAllRecords
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|uTfile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testTFileFeatures ()
specifier|public
name|void
name|testTFileFeatures
parameter_list|()
throws|throws
name|IOException
block|{
name|basicWithSomeCodec
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
name|basicWithSomeCodec
argument_list|(
literal|"gz"
argument_list|)
expr_stmt|;
block|}
comment|// test unsorted t files.
DECL|method|testUnsortedTFileFeatures ()
specifier|public
name|void
name|testUnsortedTFileFeatures
parameter_list|()
throws|throws
name|IOException
block|{
name|unsortedWithSomeCodec
argument_list|(
literal|"none"
argument_list|)
expr_stmt|;
name|unsortedWithSomeCodec
argument_list|(
literal|"gz"
argument_list|)
expr_stmt|;
block|}
DECL|method|writeNumMetablocks (Writer writer, String compression, int n)
specifier|private
name|void
name|writeNumMetablocks
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|compression
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|DataOutputStream
name|dout
init|=
name|writer
operator|.
name|prepareMetaBlock
argument_list|(
literal|"TfileMeta"
operator|+
name|i
argument_list|,
name|compression
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|(
literal|"something to test"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|dout
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|dout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|someTestingWithMetaBlock (Writer writer, String compression)
specifier|private
name|void
name|someTestingWithMetaBlock
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|compression
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|dout
init|=
literal|null
decl_stmt|;
name|writeNumMetablocks
argument_list|(
name|writer
argument_list|,
name|compression
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|dout
operator|=
name|writer
operator|.
name|prepareMetaBlock
argument_list|(
literal|"TfileMeta1"
argument_list|,
name|compression
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaBlockAlreadyExists
name|me
parameter_list|)
block|{
comment|// avoid this exception
block|}
name|dout
operator|=
name|writer
operator|.
name|prepareMetaBlock
argument_list|(
literal|"TFileMeta100"
argument_list|,
name|compression
argument_list|)
expr_stmt|;
name|dout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|readNumMetablocks (Reader reader, int n)
specifier|private
name|void
name|readNumMetablocks
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
literal|"something to test"
operator|+
literal|0
operator|)
operator|.
name|getBytes
argument_list|()
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|DataInputStream
name|din
init|=
name|reader
operator|.
name|getMetaBlock
argument_list|(
literal|"TfileMeta"
operator|+
name|i
argument_list|)
decl_stmt|;
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|din
operator|.
name|readFully
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"faield to match metadata"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
literal|"something to test"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|din
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|someReadingWithMetaBlock (Reader reader)
specifier|private
name|void
name|someReadingWithMetaBlock
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|din
init|=
literal|null
decl_stmt|;
name|readNumMetablocks
argument_list|(
name|reader
argument_list|,
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|din
operator|=
name|reader
operator|.
name|getMetaBlock
argument_list|(
literal|"NO ONE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaBlockDoesNotExist
name|me
parameter_list|)
block|{
comment|// should catch
block|}
name|din
operator|=
name|reader
operator|.
name|getMetaBlock
argument_list|(
literal|"TFileMeta100"
argument_list|)
expr_stmt|;
name|int
name|read
init|=
name|din
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"check for status"
argument_list|,
operator|(
name|read
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|din
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// test meta blocks for tfiles
DECL|method|testMetaBlocks ()
specifier|public
name|void
name|testMetaBlocks
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|mFile
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
literal|"meta.tfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|createFSOutput
argument_list|(
name|mFile
argument_list|)
decl_stmt|;
name|Writer
name|writer
init|=
operator|new
name|Writer
argument_list|(
name|fout
argument_list|,
name|minBlockSize
argument_list|,
literal|"none"
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|someTestingWithMetaBlock
argument_list|(
name|writer
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSDataInputStream
name|fin
init|=
name|fs
operator|.
name|open
argument_list|(
name|mFile
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|Reader
argument_list|(
name|fin
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|mFile
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|someReadingWithMetaBlock
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|mFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|fin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

