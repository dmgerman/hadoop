begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
operator|.
name|TFile
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestTFileComparator2
specifier|public
class|class
name|TestTFileComparator2
block|{
DECL|field|ROOT
specifier|private
specifier|static
specifier|final
name|String
name|ROOT
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp/tfile-test"
argument_list|)
decl_stmt|;
DECL|field|name
specifier|private
specifier|static
specifier|final
name|String
name|name
init|=
literal|"test-tfile-comparator2"
decl_stmt|;
DECL|field|BLOCK_SIZE
specifier|private
specifier|final
specifier|static
name|int
name|BLOCK_SIZE
init|=
literal|512
decl_stmt|;
DECL|field|VALUE
specifier|private
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
DECL|field|jClassLongWritableComparator
specifier|private
specifier|static
specifier|final
name|String
name|jClassLongWritableComparator
init|=
literal|"jclass:"
operator|+
name|LongWritable
operator|.
name|Comparator
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|NENTRY
specifier|private
specifier|static
specifier|final
name|long
name|NENTRY
init|=
literal|10000
decl_stmt|;
DECL|method|cube (long n)
specifier|private
specifier|static
name|long
name|cube
parameter_list|(
name|long
name|n
parameter_list|)
block|{
return|return
name|n
operator|*
name|n
operator|*
name|n
return|;
block|}
DECL|method|buildValue (long i)
specifier|private
specifier|static
name|String
name|buildValue
parameter_list|(
name|long
name|i
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s-%d"
argument_list|,
name|VALUE
argument_list|,
name|i
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSortedLongWritable ()
specifier|public
name|void
name|testSortedLongWritable
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|ROOT
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|TFile
operator|.
name|Writer
name|writer
init|=
operator|new
name|Writer
argument_list|(
name|out
argument_list|,
name|BLOCK_SIZE
argument_list|,
literal|"gz"
argument_list|,
name|jClassLongWritableComparator
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|LongWritable
name|key
init|=
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NENTRY
condition|;
operator|++
name|i
control|)
block|{
name|key
operator|.
name|set
argument_list|(
name|cube
argument_list|(
name|i
operator|-
name|NENTRY
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|DataOutputStream
name|dos
init|=
name|writer
operator|.
name|prepareAppendKey
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|key
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|dos
operator|=
name|writer
operator|.
name|prepareAppendValue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|dos
operator|.
name|write
argument_list|(
name|buildValue
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|TFile
operator|.
name|Reader
name|reader
init|=
operator|new
name|TFile
operator|.
name|Reader
argument_list|(
name|in
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|TFile
operator|.
name|Reader
operator|.
name|Scanner
name|scanner
init|=
name|reader
operator|.
name|createScanner
argument_list|()
decl_stmt|;
name|long
name|i
init|=
literal|0
decl_stmt|;
name|BytesWritable
name|value
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
for|for
control|(
init|;
operator|!
name|scanner
operator|.
name|atEnd
argument_list|()
condition|;
name|scanner
operator|.
name|advance
argument_list|()
control|)
block|{
name|scanner
operator|.
name|entry
argument_list|()
operator|.
name|getValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buildValue
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

