begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/** Unit tests for {@link ArrayPrimitiveWritable} */
end_comment

begin_class
DECL|class|TestArrayPrimitiveWritable
specifier|public
class|class
name|TestArrayPrimitiveWritable
extends|extends
name|TestCase
block|{
DECL|field|b
specifier|static
specifier|final
name|boolean
index|[]
name|b
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|false
block|}
decl_stmt|;
DECL|field|c
specifier|static
specifier|final
name|char
index|[]
name|c
init|=
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
DECL|field|by
specifier|static
specifier|final
name|byte
index|[]
name|by
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
DECL|field|sh
specifier|static
specifier|final
name|short
index|[]
name|sh
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
DECL|field|i
specifier|static
specifier|final
name|int
index|[]
name|i
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
DECL|field|lo
specifier|static
specifier|final
name|long
index|[]
name|lo
init|=
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|}
decl_stmt|;
DECL|field|f
specifier|static
specifier|final
name|float
index|[]
name|f
init|=
block|{
operator|(
name|float
operator|)
literal|1.0
block|,
operator|(
name|float
operator|)
literal|2.5
block|,
operator|(
name|float
operator|)
literal|3.3
block|}
decl_stmt|;
DECL|field|d
specifier|static
specifier|final
name|double
index|[]
name|d
init|=
block|{
literal|1.0
block|,
literal|2.5
block|,
literal|3.3
block|}
decl_stmt|;
DECL|field|bigSet
specifier|static
specifier|final
name|Object
index|[]
name|bigSet
init|=
block|{
name|b
block|,
name|c
block|,
name|by
block|,
name|sh
block|,
name|i
block|,
name|lo
block|,
name|f
block|,
name|d
block|}
decl_stmt|;
DECL|field|expectedResultSet
specifier|static
specifier|final
name|Object
index|[]
name|expectedResultSet
init|=
block|{
name|b
block|,
name|b
block|,
name|c
block|,
name|c
block|,
name|by
block|,
name|by
block|,
name|sh
block|,
name|sh
block|,
name|i
block|,
name|i
block|,
name|lo
block|,
name|lo
block|,
name|f
block|,
name|f
block|,
name|d
block|,
name|d
block|}
decl_stmt|;
DECL|field|resultSet
specifier|final
name|Object
index|[]
name|resultSet
init|=
operator|new
name|Object
index|[
name|bigSet
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
DECL|field|out
specifier|final
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
DECL|field|in
specifier|final
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|resetBuffers ()
specifier|public
name|void
name|resetBuffers
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMany ()
specifier|public
name|void
name|testMany
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Write a big set of data, one of each primitive type array
for|for
control|(
name|Object
name|x
range|:
name|bigSet
control|)
block|{
comment|//write each test object two ways
comment|//First, transparently via ObjectWritable
name|ObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|x
argument_list|,
name|x
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Second, explicitly via ArrayPrimitiveWritable
operator|(
operator|new
name|ArrayPrimitiveWritable
argument_list|(
name|x
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|//Now read the data back in
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|resultSet
operator|.
name|length
condition|;
control|)
block|{
comment|//First, transparently
name|resultSet
index|[
name|x
operator|++
index|]
operator|=
name|ObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Second, explicitly
name|ArrayPrimitiveWritable
name|apw
init|=
operator|new
name|ArrayPrimitiveWritable
argument_list|()
decl_stmt|;
name|apw
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|resultSet
index|[
name|x
operator|++
index|]
operator|=
name|apw
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|//validate data structures and values
name|assertEquals
argument_list|(
name|expectedResultSet
operator|.
name|length
argument_list|,
name|resultSet
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|resultSet
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"ComponentType of array "
operator|+
name|x
argument_list|,
name|expectedResultSet
index|[
name|x
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|resultSet
index|[
name|x
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"In and Out arrays didn't match values"
argument_list|,
name|Arrays
operator|.
name|deepEquals
argument_list|(
name|expectedResultSet
argument_list|,
name|resultSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|testObjectLabeling ()
specifier|public
name|void
name|testObjectLabeling
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Do a few tricky experiments to make sure things are being written
comment|//the way we expect
comment|//Write the data array with ObjectWritable
comment|//which will indirectly write it using APW.Internal
name|ObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|i
argument_list|,
name|i
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Write the corresponding APW directly with ObjectWritable
name|ArrayPrimitiveWritable
name|apw
init|=
operator|new
name|ArrayPrimitiveWritable
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|apw
argument_list|,
name|apw
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Get ready to read it back
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|//Read the int[] object as written by ObjectWritable, but
comment|//"going around" ObjectWritable
name|String
name|className
init|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The int[] written by ObjectWritable was not labelled as "
operator|+
literal|"an ArrayPrimitiveWritable.Internal"
argument_list|,
name|ArrayPrimitiveWritable
operator|.
name|Internal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|ArrayPrimitiveWritable
operator|.
name|Internal
name|apwi
init|=
operator|new
name|ArrayPrimitiveWritable
operator|.
name|Internal
argument_list|()
decl_stmt|;
name|apwi
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The ArrayPrimitiveWritable.Internal component type was corrupted"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|apw
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The int[] written by ObjectWritable as "
operator|+
literal|"ArrayPrimitiveWritable.Internal was corrupted"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|i
argument_list|,
operator|(
name|int
index|[]
operator|)
operator|(
name|apwi
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Read the APW object as written by ObjectWritable, but
comment|//"going around" ObjectWritable
name|String
name|declaredClassName
init|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The APW written by ObjectWritable was not labelled as "
operator|+
literal|"declaredClass ArrayPrimitiveWritable"
argument_list|,
name|ArrayPrimitiveWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|declaredClassName
argument_list|)
expr_stmt|;
name|className
operator|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The APW written by ObjectWritable was not labelled as "
operator|+
literal|"class ArrayPrimitiveWritable"
argument_list|,
name|ArrayPrimitiveWritable
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|ArrayPrimitiveWritable
name|apw2
init|=
operator|new
name|ArrayPrimitiveWritable
argument_list|()
decl_stmt|;
name|apw2
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The ArrayPrimitiveWritable component type was corrupted"
argument_list|,
name|int
operator|.
name|class
argument_list|,
name|apw2
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The int[] written by ObjectWritable as "
operator|+
literal|"ArrayPrimitiveWritable was corrupted"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|i
argument_list|,
operator|(
name|int
index|[]
operator|)
operator|(
name|apw2
operator|.
name|get
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOldFormat ()
specifier|public
name|void
name|testOldFormat
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Make sure we still correctly write the old format if desired.
comment|//Write the data array with old ObjectWritable API
comment|//which will set allowCompactArrays false.
name|ObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|i
argument_list|,
name|i
operator|.
name|getClass
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Get ready to read it back
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|//Read the int[] object as written by ObjectWritable, but
comment|//"going around" ObjectWritable
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|String
name|className
init|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The int[] written by ObjectWritable as a non-compact array "
operator|+
literal|"was not labelled as an array of int"
argument_list|,
name|i
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The int[] written by ObjectWritable as a non-compact array "
operator|+
literal|"was not expected length"
argument_list|,
name|i
operator|.
name|length
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|int
index|[]
name|readValue
init|=
operator|new
name|int
index|[
name|length
index|]
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|readValue
index|[
name|i
index|]
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|Integer
operator|)
name|ObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"The int[] written by ObjectWritable as a non-compact array "
operator|+
literal|"was corrupted.  Failed to correctly read int[] of length "
operator|+
name|length
operator|+
literal|". Got exception:\n"
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"The int[] written by ObjectWritable as a non-compact array "
operator|+
literal|"was corrupted."
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|i
argument_list|,
name|readValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

