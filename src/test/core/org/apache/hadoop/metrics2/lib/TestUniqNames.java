begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestUniqNames
specifier|public
class|class
name|TestUniqNames
block|{
DECL|method|testCommonCases ()
annotation|@
name|Test
specifier|public
name|void
name|testCommonCases
parameter_list|()
block|{
name|UniqueNames
name|u
init|=
operator|new
name|UniqueNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|u
operator|.
name|uniqueName
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo-1"
argument_list|,
name|u
operator|.
name|uniqueName
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCollisions ()
annotation|@
name|Test
specifier|public
name|void
name|testCollisions
parameter_list|()
block|{
name|UniqueNames
name|u
init|=
operator|new
name|UniqueNames
argument_list|()
decl_stmt|;
name|u
operator|.
name|uniqueName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo-1"
argument_list|,
name|u
operator|.
name|uniqueName
argument_list|(
literal|"foo-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo-2"
argument_list|,
name|u
operator|.
name|uniqueName
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo-1-1"
argument_list|,
name|u
operator|.
name|uniqueName
argument_list|(
literal|"foo-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo-2-1"
argument_list|,
name|u
operator|.
name|uniqueName
argument_list|(
literal|"foo-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

