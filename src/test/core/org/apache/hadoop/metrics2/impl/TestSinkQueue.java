begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|SinkQueue
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test the half-blocking metrics sink queue  */
end_comment

begin_class
DECL|class|TestSinkQueue
specifier|public
class|class
name|TestSinkQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSinkQueue
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Test common use case    * @throws Exception    */
DECL|method|testCommon ()
annotation|@
name|Test
specifier|public
name|void
name|testCommon
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
operator|new
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|q
operator|.
name|enqueue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue front"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue back"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|dequeue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should enqueue"
argument_list|,
name|q
operator|.
name|enqueue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|consume
argument_list|(
operator|new
name|Consumer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|Integer
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|2
argument_list|,
operator|(
name|int
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should enqueue"
argument_list|,
name|q
operator|.
name|enqueue
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|3
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|dequeue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
literal|0
argument_list|,
name|q
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue front"
argument_list|,
literal|null
argument_list|,
name|q
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue back"
argument_list|,
literal|null
argument_list|,
name|q
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test blocking when queue is empty    * @throws Exception    */
DECL|method|testEmptyBlocking ()
annotation|@
name|Test
specifier|public
name|void
name|testEmptyBlocking
parameter_list|()
throws|throws
name|Exception
block|{
name|testEmptyBlocking
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testEmptyBlocking
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmptyBlocking (int awhile)
specifier|private
name|void
name|testEmptyBlocking
parameter_list|(
name|int
name|awhile
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
operator|new
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Runnable
name|trigger
init|=
name|mock
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// try consuming emtpy equeue and blocking
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|dequeue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|consume
argument_list|(
operator|new
name|Consumer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|Integer
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|2
argument_list|,
operator|(
name|int
operator|)
name|e
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Should work with or without sleep
if|if
condition|(
name|awhile
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|awhile
argument_list|)
expr_stmt|;
block|}
name|q
operator|.
name|enqueue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|q
operator|.
name|enqueue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|trigger
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test nonblocking enqueue when queue is full    * @throws Exception    */
DECL|method|testFull ()
annotation|@
name|Test
specifier|public
name|void
name|testFull
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
operator|new
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|q
operator|.
name|enqueue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should drop"
argument_list|,
operator|!
name|q
operator|.
name|enqueue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|dequeue
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|enqueue
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|q
operator|.
name|consume
argument_list|(
operator|new
name|Consumer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|Integer
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|3
argument_list|,
operator|(
name|int
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
literal|0
argument_list|,
name|q
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the consumeAll method    * @throws Exception    */
DECL|method|testConsumeAll ()
annotation|@
name|Test
specifier|public
name|void
name|testConsumeAll
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|capacity
init|=
literal|64
decl_stmt|;
comment|// arbitrary
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
operator|new
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
literal|"should enqueue"
argument_list|,
name|q
operator|.
name|enqueue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"should not enqueue"
argument_list|,
operator|!
name|q
operator|.
name|enqueue
argument_list|(
name|capacity
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Runnable
name|trigger
init|=
name|mock
argument_list|(
name|Runnable
operator|.
name|class
argument_list|)
decl_stmt|;
name|q
operator|.
name|consumeAll
argument_list|(
operator|new
name|Consumer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|expected
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|Integer
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
name|expected
operator|++
argument_list|,
operator|(
name|int
operator|)
name|e
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|trigger
argument_list|,
name|times
argument_list|(
name|capacity
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the consumer throwing exceptions    * @throws Exception    */
DECL|method|testConsumerException ()
annotation|@
name|Test
specifier|public
name|void
name|testConsumerException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
operator|new
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|RuntimeException
name|ex
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"expected"
argument_list|)
decl_stmt|;
name|q
operator|.
name|enqueue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|q
operator|.
name|consume
argument_list|(
operator|new
name|Consumer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|Integer
name|e
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{
name|assertSame
argument_list|(
literal|"consumer exception"
argument_list|,
name|ex
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
comment|// The queue should be in consistent state after exception
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
literal|1
argument_list|,
name|q
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"element"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|dequeue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the clear method    */
DECL|method|testClear ()
annotation|@
name|Test
specifier|public
name|void
name|testClear
parameter_list|()
block|{
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
operator|new
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
literal|128
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|q
operator|.
name|capacity
argument_list|()
operator|+
literal|97
condition|;
operator|++
name|i
control|)
block|{
name|q
operator|.
name|enqueue
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
name|q
operator|.
name|capacity
argument_list|()
argument_list|,
name|q
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|q
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
literal|0
argument_list|,
name|q
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test consumers that take their time.    * @throws Exception    */
DECL|method|testHangingConsumer ()
annotation|@
name|Test
specifier|public
name|void
name|testHangingConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|newSleepingConsumerQueue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"queue back"
argument_list|,
literal|2
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should drop"
argument_list|,
operator|!
name|q
operator|.
name|enqueue
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// should not block
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
literal|2
argument_list|,
name|q
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue head"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue back"
argument_list|,
literal|2
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test concurrent consumer access, which is illegal    * @throws Exception    */
DECL|method|testConcurrentConsumers ()
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentConsumers
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
name|newSleepingConsumerQueue
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should enqueue"
argument_list|,
name|q
operator|.
name|enqueue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue back"
argument_list|,
literal|2
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should drop"
argument_list|,
operator|!
name|q
operator|.
name|enqueue
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// should not block
name|shouldThrowCME
argument_list|(
operator|new
name|Fun
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|q
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|shouldThrowCME
argument_list|(
operator|new
name|Fun
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|q
operator|.
name|consume
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|shouldThrowCME
argument_list|(
operator|new
name|Fun
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|q
operator|.
name|consumeAll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|shouldThrowCME
argument_list|(
operator|new
name|Fun
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|q
operator|.
name|dequeue
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The queue should still be in consistent state after all the exceptions
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
literal|2
argument_list|,
name|q
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue front"
argument_list|,
literal|1
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue back"
argument_list|,
literal|2
argument_list|,
operator|(
name|int
operator|)
name|q
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|shouldThrowCME (Fun callback)
specifier|private
name|void
name|shouldThrowCME
parameter_list|(
name|Fun
name|callback
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|callback
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"should've thrown CME"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should've thrown CME"
argument_list|)
expr_stmt|;
block|}
DECL|method|newSleepingConsumerQueue (int capacity, int... values)
specifier|private
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|newSleepingConsumerQueue
parameter_list|(
name|int
name|capacity
parameter_list|,
name|int
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
name|q
init|=
operator|new
name|SinkQueue
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|capacity
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|values
control|)
block|{
name|q
operator|.
name|enqueue
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|barrier
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// causes failure without barrier
name|q
operator|.
name|consume
argument_list|(
operator|new
name|Consumer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|consume
parameter_list|(
name|Integer
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sleeping"
argument_list|)
expr_stmt|;
name|barrier
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
operator|*
literal|86400
argument_list|)
expr_stmt|;
comment|// a long time
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"Sleeping consumer"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// so jvm can exit
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Returning new sleeping consumer queue"
argument_list|)
expr_stmt|;
return|return
name|q
return|;
block|}
DECL|interface|Fun
specifier|static
interface|interface
name|Fun
block|{
DECL|method|run ()
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

