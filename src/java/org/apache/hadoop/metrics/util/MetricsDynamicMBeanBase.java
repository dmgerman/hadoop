begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|DynamicMBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InvalidAttributeValueException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanOperationInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_comment
comment|/**  * This abstract base class facilitates creating dynamic mbeans automatically from  * metrics.   * The metrics constructors registers metrics in a registry.   * Different categories of metrics should be in differnt classes with their own  * registry (as in NameNodeMetrics and DataNodeMetrics).  * Then the MBean can be created passing the registry to the constructor.  * The MBean should be then registered using a mbean name (example):  *  MetricsHolder myMetrics = new MetricsHolder(); // has metrics and registry  *  MetricsTestMBean theMBean = new MetricsTestMBean(myMetrics.mregistry);  *  ObjectName mbeanName = MBeanUtil.registerMBean("ServiceFoo",  *                "TestStatistics", theMBean);  *   *  */
end_comment

begin_class
DECL|class|MetricsDynamicMBeanBase
specifier|public
specifier|abstract
class|class
name|MetricsDynamicMBeanBase
implements|implements
name|DynamicMBean
block|{
DECL|field|AVG_TIME
specifier|private
specifier|final
specifier|static
name|String
name|AVG_TIME
init|=
literal|"AvgTime"
decl_stmt|;
DECL|field|MIN_TIME
specifier|private
specifier|final
specifier|static
name|String
name|MIN_TIME
init|=
literal|"MinTime"
decl_stmt|;
DECL|field|MAX_TIME
specifier|private
specifier|final
specifier|static
name|String
name|MAX_TIME
init|=
literal|"MaxTime"
decl_stmt|;
DECL|field|NUM_OPS
specifier|private
specifier|final
specifier|static
name|String
name|NUM_OPS
init|=
literal|"NumOps"
decl_stmt|;
DECL|field|RESET_ALL_MIN_MAX_OP
specifier|private
specifier|final
specifier|static
name|String
name|RESET_ALL_MIN_MAX_OP
init|=
literal|"resetAllMinMax"
decl_stmt|;
DECL|field|metricsRegistry
specifier|private
name|MetricsRegistry
name|metricsRegistry
decl_stmt|;
DECL|field|mbeanInfo
specifier|private
name|MBeanInfo
name|mbeanInfo
decl_stmt|;
DECL|field|metricsRateAttributeMod
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsBase
argument_list|>
name|metricsRateAttributeMod
decl_stmt|;
DECL|field|numEntriesInRegistry
specifier|private
name|int
name|numEntriesInRegistry
init|=
literal|0
decl_stmt|;
DECL|field|mbeanDescription
specifier|private
name|String
name|mbeanDescription
decl_stmt|;
DECL|method|MetricsDynamicMBeanBase (final MetricsRegistry mr, final String aMBeanDescription)
specifier|protected
name|MetricsDynamicMBeanBase
parameter_list|(
specifier|final
name|MetricsRegistry
name|mr
parameter_list|,
specifier|final
name|String
name|aMBeanDescription
parameter_list|)
block|{
name|metricsRegistry
operator|=
name|mr
expr_stmt|;
name|mbeanDescription
operator|=
name|aMBeanDescription
expr_stmt|;
name|createMBeanInfo
argument_list|()
expr_stmt|;
block|}
DECL|method|updateMbeanInfoIfMetricsListChanged ()
specifier|private
name|void
name|updateMbeanInfoIfMetricsListChanged
parameter_list|()
block|{
if|if
condition|(
name|numEntriesInRegistry
operator|!=
name|metricsRegistry
operator|.
name|size
argument_list|()
condition|)
name|createMBeanInfo
argument_list|()
expr_stmt|;
block|}
DECL|method|createMBeanInfo ()
specifier|private
name|void
name|createMBeanInfo
parameter_list|()
block|{
name|metricsRateAttributeMod
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MetricsBase
argument_list|>
argument_list|()
expr_stmt|;
name|boolean
name|needsMinMaxResetOperation
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MBeanAttributeInfo
argument_list|>
name|attributesInfo
init|=
operator|new
name|ArrayList
argument_list|<
name|MBeanAttributeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|MBeanOperationInfo
index|[]
name|operationsInfo
init|=
literal|null
decl_stmt|;
name|numEntriesInRegistry
operator|=
name|metricsRegistry
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|MetricsBase
name|o
range|:
name|metricsRegistry
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
if|if
condition|(
name|MetricsTimeVaryingRate
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
condition|)
block|{
comment|// For each of the metrics there are 3 different attributes
name|attributesInfo
operator|.
name|add
argument_list|(
operator|new
name|MBeanAttributeInfo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|NUM_OPS
argument_list|,
literal|"java.lang.Integer"
argument_list|,
name|o
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|attributesInfo
operator|.
name|add
argument_list|(
operator|new
name|MBeanAttributeInfo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|AVG_TIME
argument_list|,
literal|"java.lang.Long"
argument_list|,
name|o
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|attributesInfo
operator|.
name|add
argument_list|(
operator|new
name|MBeanAttributeInfo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|MIN_TIME
argument_list|,
literal|"java.lang.Long"
argument_list|,
name|o
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|attributesInfo
operator|.
name|add
argument_list|(
operator|new
name|MBeanAttributeInfo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|MAX_TIME
argument_list|,
literal|"java.lang.Long"
argument_list|,
name|o
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|needsMinMaxResetOperation
operator|=
literal|true
expr_stmt|;
comment|// the min and max can be reset.
comment|// Note the special attributes (AVG_TIME, MIN_TIME, ..) are derived from metrics
comment|// Rather than check for the suffix we store them in a map.
name|metricsRateAttributeMod
operator|.
name|put
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|NUM_OPS
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|metricsRateAttributeMod
operator|.
name|put
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|AVG_TIME
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|metricsRateAttributeMod
operator|.
name|put
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|MIN_TIME
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|metricsRateAttributeMod
operator|.
name|put
argument_list|(
name|o
operator|.
name|getName
argument_list|()
operator|+
name|MAX_TIME
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MetricsIntValue
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
operator|||
name|MetricsTimeVaryingInt
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|attributesInfo
operator|.
name|add
argument_list|(
operator|new
name|MBeanAttributeInfo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|,
literal|"java.lang.Integer"
argument_list|,
name|o
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MetricsLongValue
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
operator|||
name|MetricsTimeVaryingLong
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|attributesInfo
operator|.
name|add
argument_list|(
operator|new
name|MBeanAttributeInfo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|,
literal|"java.lang.Long"
argument_list|,
name|o
operator|.
name|getDescription
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MetricsUtil
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"unknown metrics type: "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|needsMinMaxResetOperation
condition|)
block|{
name|operationsInfo
operator|=
operator|new
name|MBeanOperationInfo
index|[]
block|{
operator|new
name|MBeanOperationInfo
argument_list|(
name|RESET_ALL_MIN_MAX_OP
argument_list|,
literal|"Reset (zero) All Min Max"
argument_list|,
literal|null
argument_list|,
literal|"void"
argument_list|,
name|MBeanOperationInfo
operator|.
name|ACTION
argument_list|)
block|}
expr_stmt|;
block|}
block|}
name|MBeanAttributeInfo
index|[]
name|attrArray
init|=
operator|new
name|MBeanAttributeInfo
index|[
name|attributesInfo
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|mbeanInfo
operator|=
operator|new
name|MBeanInfo
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|mbeanDescription
argument_list|,
name|attributesInfo
operator|.
name|toArray
argument_list|(
name|attrArray
argument_list|)
argument_list|,
literal|null
argument_list|,
name|operationsInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAttribute (String attributeName)
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|attributeName
parameter_list|)
throws|throws
name|AttributeNotFoundException
throws|,
name|MBeanException
throws|,
name|ReflectionException
block|{
if|if
condition|(
name|attributeName
operator|==
literal|null
operator|||
name|attributeName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
name|updateMbeanInfoIfMetricsListChanged
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|metricsRateAttributeMod
operator|.
name|get
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|o
operator|=
name|metricsRegistry
operator|.
name|get
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AttributeNotFoundException
argument_list|()
throw|;
if|if
condition|(
name|o
operator|instanceof
name|MetricsIntValue
condition|)
return|return
operator|(
operator|(
name|MetricsIntValue
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|MetricsLongValue
condition|)
return|return
operator|(
operator|(
name|MetricsLongValue
operator|)
name|o
operator|)
operator|.
name|get
argument_list|()
return|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|MetricsTimeVaryingInt
condition|)
return|return
operator|(
operator|(
name|MetricsTimeVaryingInt
operator|)
name|o
operator|)
operator|.
name|getPreviousIntervalValue
argument_list|()
return|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|MetricsTimeVaryingLong
condition|)
return|return
operator|(
operator|(
name|MetricsTimeVaryingLong
operator|)
name|o
operator|)
operator|.
name|getPreviousIntervalValue
argument_list|()
return|;
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|MetricsTimeVaryingRate
condition|)
block|{
name|MetricsTimeVaryingRate
name|or
init|=
operator|(
name|MetricsTimeVaryingRate
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|attributeName
operator|.
name|endsWith
argument_list|(
name|NUM_OPS
argument_list|)
condition|)
return|return
name|or
operator|.
name|getPreviousIntervalNumOps
argument_list|()
return|;
elseif|else
if|if
condition|(
name|attributeName
operator|.
name|endsWith
argument_list|(
name|AVG_TIME
argument_list|)
condition|)
return|return
name|or
operator|.
name|getPreviousIntervalAverageTime
argument_list|()
return|;
elseif|else
if|if
condition|(
name|attributeName
operator|.
name|endsWith
argument_list|(
name|MIN_TIME
argument_list|)
condition|)
return|return
name|or
operator|.
name|getMinTime
argument_list|()
return|;
elseif|else
if|if
condition|(
name|attributeName
operator|.
name|endsWith
argument_list|(
name|MAX_TIME
argument_list|)
condition|)
return|return
name|or
operator|.
name|getMaxTime
argument_list|()
return|;
else|else
block|{
name|MetricsUtil
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected attrubute suffix"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AttributeNotFoundException
argument_list|()
throw|;
block|}
block|}
else|else
block|{
name|MetricsUtil
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"unknown metrics type: "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AttributeNotFoundException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAttributes (String[] attributeNames)
specifier|public
name|AttributeList
name|getAttributes
parameter_list|(
name|String
index|[]
name|attributeNames
parameter_list|)
block|{
if|if
condition|(
name|attributeNames
operator|==
literal|null
operator|||
name|attributeNames
operator|.
name|length
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
name|updateMbeanInfoIfMetricsListChanged
argument_list|()
expr_stmt|;
name|AttributeList
name|result
init|=
operator|new
name|AttributeList
argument_list|(
name|attributeNames
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|iAttributeName
range|:
name|attributeNames
control|)
block|{
try|try
block|{
name|Object
name|value
init|=
name|getAttribute
argument_list|(
name|iAttributeName
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Attribute
argument_list|(
name|iAttributeName
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|getMBeanInfo ()
specifier|public
name|MBeanInfo
name|getMBeanInfo
parameter_list|()
block|{
return|return
name|mbeanInfo
return|;
block|}
annotation|@
name|Override
DECL|method|invoke (String actionName, Object[] parms, String[] signature)
specifier|public
name|Object
name|invoke
parameter_list|(
name|String
name|actionName
parameter_list|,
name|Object
index|[]
name|parms
parameter_list|,
name|String
index|[]
name|signature
parameter_list|)
throws|throws
name|MBeanException
throws|,
name|ReflectionException
block|{
if|if
condition|(
name|actionName
operator|==
literal|null
operator|||
name|actionName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
comment|// Right now we support only one fixed operation (if it applies)
if|if
condition|(
operator|!
operator|(
name|actionName
operator|.
name|equals
argument_list|(
name|RESET_ALL_MIN_MAX_OP
argument_list|)
operator|)
operator|||
name|mbeanInfo
operator|.
name|getOperations
argument_list|()
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|ReflectionException
argument_list|(
operator|new
name|NoSuchMethodException
argument_list|(
name|actionName
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
name|MetricsBase
name|m
range|:
name|metricsRegistry
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
if|if
condition|(
name|MetricsTimeVaryingRate
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|MetricsTimeVaryingRate
operator|.
name|class
operator|.
name|cast
argument_list|(
name|m
argument_list|)
operator|.
name|resetMinMax
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|setAttribute (Attribute attribute)
specifier|public
name|void
name|setAttribute
parameter_list|(
name|Attribute
name|attribute
parameter_list|)
throws|throws
name|AttributeNotFoundException
throws|,
name|InvalidAttributeValueException
throws|,
name|MBeanException
throws|,
name|ReflectionException
block|{
throw|throw
operator|new
name|ReflectionException
argument_list|(
operator|new
name|NoSuchMethodException
argument_list|(
literal|"set"
operator|+
name|attribute
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setAttributes (AttributeList attributes)
specifier|public
name|AttributeList
name|setAttributes
parameter_list|(
name|AttributeList
name|attributes
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

