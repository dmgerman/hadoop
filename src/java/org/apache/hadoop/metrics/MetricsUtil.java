begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Utility class to simplify creation and reporting of hadoop metrics.  *  * For examples of usage, see NameNodeMetrics.  * @see org.apache.hadoop.metrics.MetricsRecord  * @see org.apache.hadoop.metrics.MetricsContext  * @see org.apache.hadoop.metrics.ContextFactory  */
end_comment

begin_class
DECL|class|MetricsUtil
specifier|public
class|class
name|MetricsUtil
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetricsUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Don't allow creation of a new instance of Metrics    */
DECL|method|MetricsUtil ()
specifier|private
name|MetricsUtil
parameter_list|()
block|{}
DECL|method|getContext (String contextName)
specifier|public
specifier|static
name|MetricsContext
name|getContext
parameter_list|(
name|String
name|contextName
parameter_list|)
block|{
return|return
name|getContext
argument_list|(
name|contextName
argument_list|,
name|contextName
argument_list|)
return|;
block|}
comment|/**    * Utility method to return the named context.    * If the desired context cannot be created for any reason, the exception    * is logged, and a null context is returned.    */
DECL|method|getContext (String refName, String contextName)
specifier|public
specifier|static
name|MetricsContext
name|getContext
parameter_list|(
name|String
name|refName
parameter_list|,
name|String
name|contextName
parameter_list|)
block|{
name|MetricsContext
name|metricsContext
decl_stmt|;
try|try
block|{
name|metricsContext
operator|=
name|ContextFactory
operator|.
name|getFactory
argument_list|()
operator|.
name|getContext
argument_list|(
name|refName
argument_list|,
name|contextName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|metricsContext
operator|.
name|isMonitoring
argument_list|()
condition|)
block|{
name|metricsContext
operator|.
name|startMonitoring
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create metrics context "
operator|+
name|contextName
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|metricsContext
operator|=
name|ContextFactory
operator|.
name|getNullContext
argument_list|(
name|contextName
argument_list|)
expr_stmt|;
block|}
return|return
name|metricsContext
return|;
block|}
comment|/**    * Utility method to create and return new metrics record instance within the    * given context. This record is tagged with the host name.    *    * @param context the context    * @param recordName name of the record    * @return newly created metrics record    */
DECL|method|createRecord (MetricsContext context, String recordName)
specifier|public
specifier|static
name|MetricsRecord
name|createRecord
parameter_list|(
name|MetricsContext
name|context
parameter_list|,
name|String
name|recordName
parameter_list|)
block|{
name|MetricsRecord
name|metricsRecord
init|=
name|context
operator|.
name|createRecord
argument_list|(
name|recordName
argument_list|)
decl_stmt|;
name|metricsRecord
operator|.
name|setTag
argument_list|(
literal|"hostName"
argument_list|,
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|metricsRecord
return|;
block|}
comment|/**    * Returns the host name.  If the host name is unobtainable, logs the    * exception and returns "unknown".    */
DECL|method|getHostName ()
specifier|private
specifier|static
name|String
name|getHostName
parameter_list|()
block|{
name|String
name|hostName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hostName
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to obtain hostName"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|hostName
operator|=
literal|"unknown"
expr_stmt|;
block|}
return|return
name|hostName
return|;
block|}
block|}
end_class

end_unit

