begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics.jvm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|jvm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_comment
comment|/**  * A log4J Appender that simply counts logging events in three levels:  * fatal, error and warn.  */
end_comment

begin_class
DECL|class|EventCounter
specifier|public
class|class
name|EventCounter
extends|extends
name|AppenderSkeleton
block|{
DECL|field|FATAL
specifier|private
specifier|static
specifier|final
name|int
name|FATAL
init|=
literal|0
decl_stmt|;
DECL|field|ERROR
specifier|private
specifier|static
specifier|final
name|int
name|ERROR
init|=
literal|1
decl_stmt|;
DECL|field|WARN
specifier|private
specifier|static
specifier|final
name|int
name|WARN
init|=
literal|2
decl_stmt|;
DECL|field|INFO
specifier|private
specifier|static
specifier|final
name|int
name|INFO
init|=
literal|3
decl_stmt|;
DECL|class|EventCounts
specifier|private
specifier|static
class|class
name|EventCounts
block|{
DECL|field|counts
specifier|private
specifier|final
name|long
index|[]
name|counts
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
DECL|method|incr (int i)
specifier|private
specifier|synchronized
name|void
name|incr
parameter_list|(
name|int
name|i
parameter_list|)
block|{
operator|++
name|counts
index|[
name|i
index|]
expr_stmt|;
block|}
DECL|method|get (int i)
specifier|private
specifier|synchronized
name|long
name|get
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|counts
index|[
name|i
index|]
return|;
block|}
block|}
DECL|field|counts
specifier|private
specifier|static
name|EventCounts
name|counts
init|=
operator|new
name|EventCounts
argument_list|()
decl_stmt|;
DECL|method|getFatal ()
specifier|public
specifier|static
name|long
name|getFatal
parameter_list|()
block|{
return|return
name|counts
operator|.
name|get
argument_list|(
name|FATAL
argument_list|)
return|;
block|}
DECL|method|getError ()
specifier|public
specifier|static
name|long
name|getError
parameter_list|()
block|{
return|return
name|counts
operator|.
name|get
argument_list|(
name|ERROR
argument_list|)
return|;
block|}
DECL|method|getWarn ()
specifier|public
specifier|static
name|long
name|getWarn
parameter_list|()
block|{
return|return
name|counts
operator|.
name|get
argument_list|(
name|WARN
argument_list|)
return|;
block|}
DECL|method|getInfo ()
specifier|public
specifier|static
name|long
name|getInfo
parameter_list|()
block|{
return|return
name|counts
operator|.
name|get
argument_list|(
name|INFO
argument_list|)
return|;
block|}
DECL|method|append (LoggingEvent event)
specifier|public
name|void
name|append
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|Level
name|level
init|=
name|event
operator|.
name|getLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|level
operator|==
name|Level
operator|.
name|INFO
condition|)
block|{
name|counts
operator|.
name|incr
argument_list|(
name|INFO
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
name|Level
operator|.
name|WARN
condition|)
block|{
name|counts
operator|.
name|incr
argument_list|(
name|WARN
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
name|Level
operator|.
name|ERROR
condition|)
block|{
name|counts
operator|.
name|incr
argument_list|(
name|ERROR
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
name|Level
operator|.
name|FATAL
condition|)
block|{
name|counts
operator|.
name|incr
argument_list|(
name|FATAL
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Strange: these two methods are abstract in AppenderSkeleton, but not
comment|// included in the javadoc (log4j 1.2.13).
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{     }
DECL|method|requiresLayout ()
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

