begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.http
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|log
operator|.
name|LogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|security
operator|.
name|SslSocketConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|DefaultServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|webapp
operator|.
name|WebAppContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|MultiException
import|;
end_import

begin_comment
comment|/**  * Create a Jetty embedded server to answer http requests. The primary goal  * is to serve up status information for the server.  * There are three contexts:  *   "/logs/" -> points to the log directory  *   "/static/" -> points to common static files (src/webapps/static)  *   "/" -> the jsp server code from (src/webapps/<name>)  */
end_comment

begin_class
DECL|class|HttpServer
specifier|public
class|class
name|HttpServer
implements|implements
name|FilterContainer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HttpServer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FILTER_INITIALIZER_PROPERTY
specifier|static
specifier|final
name|String
name|FILTER_INITIALIZER_PROPERTY
init|=
literal|"hadoop.http.filter.initializers"
decl_stmt|;
DECL|field|webServer
specifier|protected
specifier|final
name|Server
name|webServer
decl_stmt|;
DECL|field|listener
specifier|protected
specifier|final
name|Connector
name|listener
decl_stmt|;
DECL|field|webAppContext
specifier|protected
specifier|final
name|WebAppContext
name|webAppContext
decl_stmt|;
DECL|field|findPort
specifier|protected
specifier|final
name|boolean
name|findPort
decl_stmt|;
DECL|field|defaultContexts
specifier|protected
specifier|final
name|Map
argument_list|<
name|Context
argument_list|,
name|Boolean
argument_list|>
name|defaultContexts
init|=
operator|new
name|HashMap
argument_list|<
name|Context
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|filterNames
specifier|protected
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|filterNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|MAX_RETRIES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_RETRIES
init|=
literal|10
decl_stmt|;
comment|/** Same as this(name, bindAddress, port, findPort, null); */
DECL|method|HttpServer (String name, String bindAddress, int port, boolean findPort )
specifier|public
name|HttpServer
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|findPort
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|name
argument_list|,
name|bindAddress
argument_list|,
name|port
argument_list|,
name|findPort
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a status server on the given port.    * The jsp scripts are taken from src/webapps/<name>.    * @param name The name of the server    * @param port The port to use on the server    * @param findPort whether the server should start at the given port and     *        increment by 1 until it finds a free port.    * @param conf Configuration     */
DECL|method|HttpServer (String name, String bindAddress, int port, boolean findPort, Configuration conf)
specifier|public
name|HttpServer
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|boolean
name|findPort
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|webServer
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|this
operator|.
name|findPort
operator|=
name|findPort
expr_stmt|;
name|listener
operator|=
name|createBaseListener
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setHost
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|addConnector
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|setThreadPool
argument_list|(
operator|new
name|QueuedThreadPool
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|appDir
init|=
name|getWebAppsPath
argument_list|()
decl_stmt|;
name|ContextHandlerCollection
name|contexts
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|webServer
operator|.
name|setHandler
argument_list|(
name|contexts
argument_list|)
expr_stmt|;
name|webAppContext
operator|=
operator|new
name|WebAppContext
argument_list|()
expr_stmt|;
name|webAppContext
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|webAppContext
operator|.
name|setWar
argument_list|(
name|appDir
operator|+
literal|"/"
operator|+
name|name
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|addHandler
argument_list|(
name|webAppContext
argument_list|)
expr_stmt|;
name|addDefaultApps
argument_list|(
name|contexts
argument_list|,
name|appDir
argument_list|)
expr_stmt|;
name|addGlobalFilter
argument_list|(
literal|"safety"
argument_list|,
name|QuotingInputFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|FilterInitializer
index|[]
name|initializers
init|=
name|getFilterInitializers
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FilterInitializer
name|c
range|:
name|initializers
control|)
block|{
name|c
operator|.
name|initFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
name|addDefaultServlets
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a required listener for the Jetty instance listening on the port    * provided. This wrapper and all subclasses must create at least one    * listener.    */
DECL|method|createBaseListener (Configuration conf)
specifier|protected
name|Connector
name|createBaseListener
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|SelectChannelConnector
name|ret
init|=
operator|new
name|SelectChannelConnector
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setLowResourceMaxIdleTime
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAcceptQueueSize
argument_list|(
literal|128
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setResolveNames
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setUseDirectBuffers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/** Get an array of FilterConfiguration specified in the conf */
DECL|method|getFilterInitializers (Configuration conf)
specifier|private
specifier|static
name|FilterInitializer
index|[]
name|getFilterInitializers
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|classes
init|=
name|conf
operator|.
name|getClasses
argument_list|(
name|FILTER_INITIALIZER_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FilterInitializer
index|[]
name|initializers
init|=
operator|new
name|FilterInitializer
index|[
name|classes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|classes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|initializers
index|[
name|i
index|]
operator|=
operator|(
name|FilterInitializer
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|classes
index|[
name|i
index|]
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|initializers
return|;
block|}
comment|/**    * Add default apps.    * @param appDir The application directory    * @throws IOException    */
DECL|method|addDefaultApps (ContextHandlerCollection parent, final String appDir)
specifier|protected
name|void
name|addDefaultApps
parameter_list|(
name|ContextHandlerCollection
name|parent
parameter_list|,
specifier|final
name|String
name|appDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// set up the context for "/logs/" if "hadoop.log.dir" property is defined.
name|String
name|logDir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.log.dir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|logDir
operator|!=
literal|null
condition|)
block|{
name|Context
name|logContext
init|=
operator|new
name|Context
argument_list|(
name|parent
argument_list|,
literal|"/logs"
argument_list|)
decl_stmt|;
name|logContext
operator|.
name|setResourceBase
argument_list|(
name|logDir
argument_list|)
expr_stmt|;
name|logContext
operator|.
name|addServlet
argument_list|(
name|DefaultServlet
operator|.
name|class
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|defaultContexts
operator|.
name|put
argument_list|(
name|logContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// set up the context for "/static/*"
name|Context
name|staticContext
init|=
operator|new
name|Context
argument_list|(
name|parent
argument_list|,
literal|"/static"
argument_list|)
decl_stmt|;
name|staticContext
operator|.
name|setResourceBase
argument_list|(
name|appDir
operator|+
literal|"/static"
argument_list|)
expr_stmt|;
name|staticContext
operator|.
name|addServlet
argument_list|(
name|DefaultServlet
operator|.
name|class
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
name|defaultContexts
operator|.
name|put
argument_list|(
name|staticContext
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add default servlets.    */
DECL|method|addDefaultServlets ()
specifier|protected
name|void
name|addDefaultServlets
parameter_list|()
block|{
comment|// set up default servlets
name|addServlet
argument_list|(
literal|"stacks"
argument_list|,
literal|"/stacks"
argument_list|,
name|StackServlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|addServlet
argument_list|(
literal|"logLevel"
argument_list|,
literal|"/logLevel"
argument_list|,
name|LogLevel
operator|.
name|Servlet
operator|.
name|class
argument_list|)
expr_stmt|;
name|addServlet
argument_list|(
literal|"metrics"
argument_list|,
literal|"/metrics"
argument_list|,
name|MetricsServlet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|addContext (Context ctxt, boolean isFiltered)
specifier|public
name|void
name|addContext
parameter_list|(
name|Context
name|ctxt
parameter_list|,
name|boolean
name|isFiltered
parameter_list|)
throws|throws
name|IOException
block|{
name|webServer
operator|.
name|addHandler
argument_list|(
name|ctxt
argument_list|)
expr_stmt|;
name|defaultContexts
operator|.
name|put
argument_list|(
name|ctxt
argument_list|,
name|isFiltered
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a context     * @param pathSpec The path spec for the context    * @param dir The directory containing the context    * @param isFiltered if true, the servlet is added to the filter path mapping     * @throws IOException    */
DECL|method|addContext (String pathSpec, String dir, boolean isFiltered)
specifier|protected
name|void
name|addContext
parameter_list|(
name|String
name|pathSpec
parameter_list|,
name|String
name|dir
parameter_list|,
name|boolean
name|isFiltered
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|0
operator|==
name|webServer
operator|.
name|getHandlers
argument_list|()
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't find handler"
argument_list|)
throw|;
block|}
name|WebAppContext
name|webAppCtx
init|=
operator|new
name|WebAppContext
argument_list|()
decl_stmt|;
name|webAppCtx
operator|.
name|setContextPath
argument_list|(
name|pathSpec
argument_list|)
expr_stmt|;
name|webAppCtx
operator|.
name|setWar
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|addContext
argument_list|(
name|webAppCtx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set a value in the webapp context. These values are available to the jsp    * pages as "application.getAttribute(name)".    * @param name The name of the attribute    * @param value The value of the attribute    */
DECL|method|setAttribute (String name, Object value)
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|webAppContext
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a servlet in the server.    * @param name The name of the servlet (can be passed as null)    * @param pathSpec The path spec for the servlet    * @param clazz The servlet class    */
DECL|method|addServlet (String name, String pathSpec, Class<? extends HttpServlet> clazz)
specifier|public
name|void
name|addServlet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HttpServlet
argument_list|>
name|clazz
parameter_list|)
block|{
name|addInternalServlet
argument_list|(
name|name
argument_list|,
name|pathSpec
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|addFilterPathMapping
argument_list|(
name|pathSpec
argument_list|,
name|webAppContext
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add an internal servlet in the server.     * Note: This method is to be used for adding servlets that facilitate    * internal communication and not for user facing functionality. For    * servlets added using this method, filters are not enabled.     *     * @param name The name of the servlet (can be passed as null)    * @param pathSpec The path spec for the servlet    * @param clazz The servlet class    */
DECL|method|addInternalServlet (String name, String pathSpec, Class<? extends HttpServlet> clazz)
specifier|public
name|void
name|addInternalServlet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|pathSpec
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HttpServlet
argument_list|>
name|clazz
parameter_list|)
block|{
name|ServletHolder
name|holder
init|=
operator|new
name|ServletHolder
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|holder
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|webAppContext
operator|.
name|addServlet
argument_list|(
name|holder
argument_list|,
name|pathSpec
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|addFilter (String name, String classname, Map<String, String> parameters)
specifier|public
name|void
name|addFilter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|classname
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|USER_FACING_URLS
init|=
block|{
literal|"*.html"
block|,
literal|"*.jsp"
block|}
decl_stmt|;
name|defineFilter
argument_list|(
name|webAppContext
argument_list|,
name|name
argument_list|,
name|classname
argument_list|,
name|parameters
argument_list|,
name|USER_FACING_URLS
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|ALL_URLS
init|=
block|{
literal|"/*"
block|}
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Context
argument_list|,
name|Boolean
argument_list|>
name|e
range|:
name|defaultContexts
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|Context
name|ctx
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|defineFilter
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|,
name|classname
argument_list|,
name|parameters
argument_list|,
name|ALL_URLS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added filter "
operator|+
name|name
operator|+
literal|" (class="
operator|+
name|classname
operator|+
literal|") to context "
operator|+
name|ctx
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|filterNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|addGlobalFilter (String name, String classname, Map<String, String> parameters)
specifier|public
name|void
name|addGlobalFilter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|classname
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|ALL_URLS
init|=
block|{
literal|"/*"
block|}
decl_stmt|;
name|defineFilter
argument_list|(
name|webAppContext
argument_list|,
name|name
argument_list|,
name|classname
argument_list|,
name|parameters
argument_list|,
name|ALL_URLS
argument_list|)
expr_stmt|;
for|for
control|(
name|Context
name|ctx
range|:
name|defaultContexts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|defineFilter
argument_list|(
name|ctx
argument_list|,
name|name
argument_list|,
name|classname
argument_list|,
name|parameters
argument_list|,
name|ALL_URLS
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Added global filter"
operator|+
name|name
operator|+
literal|" (class="
operator|+
name|classname
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Define a filter for a context and set up default url mappings.    */
DECL|method|defineFilter (Context ctx, String name, String classname, Map<String,String> parameters, String[] urls)
specifier|protected
name|void
name|defineFilter
parameter_list|(
name|Context
name|ctx
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|classname
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|String
index|[]
name|urls
parameter_list|)
block|{
name|FilterHolder
name|holder
init|=
operator|new
name|FilterHolder
argument_list|()
decl_stmt|;
name|holder
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setClassName
argument_list|(
name|classname
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setInitParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|FilterMapping
name|fmap
init|=
operator|new
name|FilterMapping
argument_list|()
decl_stmt|;
name|fmap
operator|.
name|setPathSpecs
argument_list|(
name|urls
argument_list|)
expr_stmt|;
name|fmap
operator|.
name|setDispatches
argument_list|(
name|Handler
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|fmap
operator|.
name|setFilterName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ServletHandler
name|handler
init|=
name|ctx
operator|.
name|getServletHandler
argument_list|()
decl_stmt|;
name|handler
operator|.
name|addFilter
argument_list|(
name|holder
argument_list|,
name|fmap
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add the path spec to the filter path mapping.    * @param pathSpec The path spec    * @param webAppCtx The WebApplicationContext to add to    */
DECL|method|addFilterPathMapping (String pathSpec, Context webAppCtx)
specifier|protected
name|void
name|addFilterPathMapping
parameter_list|(
name|String
name|pathSpec
parameter_list|,
name|Context
name|webAppCtx
parameter_list|)
block|{
name|ServletHandler
name|handler
init|=
name|webAppCtx
operator|.
name|getServletHandler
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|filterNames
control|)
block|{
name|FilterMapping
name|fmap
init|=
operator|new
name|FilterMapping
argument_list|()
decl_stmt|;
name|fmap
operator|.
name|setPathSpec
argument_list|(
name|pathSpec
argument_list|)
expr_stmt|;
name|fmap
operator|.
name|setFilterName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fmap
operator|.
name|setDispatches
argument_list|(
name|Handler
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|handler
operator|.
name|addFilterMapping
argument_list|(
name|fmap
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the value in the webapp context.    * @param name The name of the attribute    * @return The value of the attribute    */
DECL|method|getAttribute (String name)
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|webAppContext
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * Get the pathname to the webapps files.    * @return the pathname as a URL    * @throws IOException if 'webapps' directory cannot be found on CLASSPATH.    */
DECL|method|getWebAppsPath ()
specifier|protected
name|String
name|getWebAppsPath
parameter_list|()
throws|throws
name|IOException
block|{
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"webapps"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"webapps not found in CLASSPATH"
argument_list|)
throw|;
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the port that the server is on    * @return the port    */
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|webServer
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
comment|/**    * Set the min, max number of worker threads (simultaneous connections).    */
DECL|method|setThreads (int min, int max)
specifier|public
name|void
name|setThreads
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|QueuedThreadPool
name|pool
init|=
operator|(
name|QueuedThreadPool
operator|)
name|webServer
operator|.
name|getThreadPool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|setMinThreads
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setMaxThreads
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configure an ssl listener on the server.    * @param addr address to listen on    * @param keystore location of the keystore    * @param storPass password for the keystore    * @param keyPass password for the key    * @deprecated Use {@link #addSslListener(InetSocketAddress, Configuration, boolean)}    */
annotation|@
name|Deprecated
DECL|method|addSslListener (InetSocketAddress addr, String keystore, String storPass, String keyPass)
specifier|public
name|void
name|addSslListener
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|String
name|keystore
parameter_list|,
name|String
name|storPass
parameter_list|,
name|String
name|keyPass
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|webServer
operator|.
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to add ssl listener"
argument_list|)
throw|;
block|}
name|SslSocketConnector
name|sslListener
init|=
operator|new
name|SslSocketConnector
argument_list|()
decl_stmt|;
name|sslListener
operator|.
name|setHost
argument_list|(
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setKeystore
argument_list|(
name|keystore
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setPassword
argument_list|(
name|storPass
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setKeyPassword
argument_list|(
name|keyPass
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|addConnector
argument_list|(
name|sslListener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Configure an ssl listener on the server.    * @param addr address to listen on    * @param sslConf conf to retrieve ssl options    * @param needClientAuth whether client authentication is required    */
DECL|method|addSslListener (InetSocketAddress addr, Configuration sslConf, boolean needClientAuth)
specifier|public
name|void
name|addSslListener
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|sslConf
parameter_list|,
name|boolean
name|needClientAuth
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|webServer
operator|.
name|isStarted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to add ssl listener"
argument_list|)
throw|;
block|}
if|if
condition|(
name|needClientAuth
condition|)
block|{
comment|// setting up SSL truststore for authenticating clients
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.location"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.password"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStoreType"
argument_list|,
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.truststore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SslSocketConnector
name|sslListener
init|=
operator|new
name|SslSocketConnector
argument_list|()
decl_stmt|;
name|sslListener
operator|.
name|setHost
argument_list|(
name|addr
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setPort
argument_list|(
name|addr
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setKeystore
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.location"
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setPassword
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.password"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setKeyPassword
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.keypassword"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setKeystoreType
argument_list|(
name|sslConf
operator|.
name|get
argument_list|(
literal|"ssl.server.keystore.type"
argument_list|,
literal|"jks"
argument_list|)
argument_list|)
expr_stmt|;
name|sslListener
operator|.
name|setNeedClientAuth
argument_list|(
name|needClientAuth
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|addConnector
argument_list|(
name|sslListener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the server. Does not wait for the server to start.    */
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|port
init|=
literal|0
decl_stmt|;
name|int
name|oriPort
init|=
name|listener
operator|.
name|getPort
argument_list|()
decl_stmt|;
comment|// The original requested port
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|port
operator|=
name|webServer
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Port returned by webServer.getConnectors()[0]."
operator|+
literal|"getLocalPort() before open() is "
operator|+
name|port
operator|+
literal|". Opening the listener on "
operator|+
name|oriPort
argument_list|)
expr_stmt|;
name|listener
operator|.
name|open
argument_list|()
expr_stmt|;
name|port
operator|=
name|listener
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"listener.getLocalPort() returned "
operator|+
name|listener
operator|.
name|getLocalPort
argument_list|()
operator|+
literal|" webServer.getConnectors()[0].getLocalPort() returned "
operator|+
name|webServer
operator|.
name|getConnectors
argument_list|()
index|[
literal|0
index|]
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
comment|//Workaround to handle the problem reported in HADOOP-4744
if|if
condition|(
name|port
operator|<
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|int
name|numRetries
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|port
operator|<
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"listener.getLocalPort returned "
operator|+
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRetries
operator|++
operator|>
name|MAX_RETRIES
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|" listener.getLocalPort is returning "
operator|+
literal|"less than 0 even after "
operator|+
name|numRetries
operator|+
literal|" resets"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying listener.getLocalPort()"
argument_list|)
expr_stmt|;
name|port
operator|=
name|listener
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|port
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Bouncing the listener"
argument_list|)
expr_stmt|;
name|listener
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setPort
argument_list|(
name|oriPort
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|oriPort
operator|+=
literal|1
operator|)
argument_list|)
expr_stmt|;
name|listener
operator|.
name|open
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|port
operator|=
name|listener
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
block|}
comment|//Workaround end
name|LOG
operator|.
name|info
argument_list|(
literal|"Jetty bound to port "
operator|+
name|port
argument_list|)
expr_stmt|;
name|webServer
operator|.
name|start
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// if this is a bind exception,
comment|// then try the next port number.
if|if
condition|(
name|ex
operator|instanceof
name|BindException
condition|)
block|{
if|if
condition|(
operator|!
name|findPort
condition|)
block|{
throw|throw
operator|(
name|BindException
operator|)
name|ex
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HttpServer.start() threw a non Bind IOException"
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MultiException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"HttpServer.start() threw a MultiException"
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
name|listener
operator|.
name|setPort
argument_list|(
operator|(
name|oriPort
operator|+=
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Problem starting http server"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * stop the server    */
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|listener
operator|.
name|close
argument_list|()
expr_stmt|;
name|webServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|join ()
specifier|public
name|void
name|join
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|webServer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
comment|/**    * A very simple servlet to serve up a text representation of the current    * stack traces. It both returns the stacks to the caller and logs them.    * Currently the stack traces are done sequentially rather than exactly the    * same data.    */
DECL|class|StackServlet
specifier|public
specifier|static
class|class
name|StackServlet
extends|extends
name|HttpServlet
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|6284183679759467039L
decl_stmt|;
annotation|@
name|Override
DECL|method|doGet (HttpServletRequest request, HttpServletResponse response)
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|HtmlQuoting
operator|.
name|quoteOutputStream
argument_list|(
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ReflectionUtils
operator|.
name|printThreadInfo
argument_list|(
name|out
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ReflectionUtils
operator|.
name|logThreadInfo
argument_list|(
name|LOG
argument_list|,
literal|"jsp requested"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A Servlet input filter that quotes all HTML active characters in the    * parameter names and values. The goal is to quote the characters to make    * all of the servlets resistant to cross-site scripting attacks.    */
DECL|class|QuotingInputFilter
specifier|public
specifier|static
class|class
name|QuotingInputFilter
implements|implements
name|Filter
block|{
DECL|class|RequestQuoter
specifier|public
specifier|static
class|class
name|RequestQuoter
extends|extends
name|HttpServletRequestWrapper
block|{
DECL|field|rawRequest
specifier|private
specifier|final
name|HttpServletRequest
name|rawRequest
decl_stmt|;
DECL|method|RequestQuoter (HttpServletRequest rawRequest)
specifier|public
name|RequestQuoter
parameter_list|(
name|HttpServletRequest
name|rawRequest
parameter_list|)
block|{
name|super
argument_list|(
name|rawRequest
argument_list|)
expr_stmt|;
name|this
operator|.
name|rawRequest
operator|=
name|rawRequest
expr_stmt|;
block|}
comment|/**        * Return the set of parameter names, quoting each name.        */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getParameterNames ()
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
block|{
return|return
operator|new
name|Enumeration
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|private
name|Enumeration
argument_list|<
name|String
argument_list|>
name|rawIterator
init|=
name|rawRequest
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|rawIterator
operator|.
name|hasMoreElements
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|rawIterator
operator|.
name|nextElement
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**        * Unquote the name and quote the value.        */
annotation|@
name|Override
DECL|method|getParameter (String name)
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|rawRequest
operator|.
name|getParameter
argument_list|(
name|HtmlQuoting
operator|.
name|unquoteHtmlChars
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParameterValues (String name)
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|unquoteName
init|=
name|HtmlQuoting
operator|.
name|unquoteHtmlChars
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
index|[]
name|unquoteValue
init|=
name|rawRequest
operator|.
name|getParameterValues
argument_list|(
name|unquoteName
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|unquoteValue
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|unquoteValue
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getParameterMap ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|getParameterMap
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|raw
init|=
name|rawRequest
operator|.
name|getParameterMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|item
range|:
name|raw
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
index|[]
name|rawValue
init|=
name|item
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
index|[]
name|cookedValue
init|=
operator|new
name|String
index|[
name|rawValue
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rawValue
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|cookedValue
index|[
name|i
index|]
operator|=
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|rawValue
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|HtmlQuoting
operator|.
name|quoteHtmlChars
argument_list|(
name|item
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|cookedValue
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (FilterConfig config)
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{     }
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|doFilter (ServletRequest request, ServletResponse response, FilterChain chain )
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequestWrapper
name|quoted
init|=
operator|new
name|RequestQuoter
argument_list|(
operator|(
name|HttpServletRequest
operator|)
name|request
argument_list|)
decl_stmt|;
name|chain
operator|.
name|doFilter
argument_list|(
name|quoted
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

