begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|ipc
operator|.
name|Responder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|ipc
operator|.
name|Transceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectRequestor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectResponder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRequestor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_comment
comment|/** Tunnel Avro-format RPC requests over a Hadoop {@link RPC} connection.  This  * does not give cross-language wire compatibility, since the Hadoop RPC wire  * format is non-standard, but it does permit use of Avro's protocol versioning  * features for inter-Java RPCs. */
end_comment

begin_class
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|AvroRpcEngine
specifier|public
class|class
name|AvroRpcEngine
implements|implements
name|RpcEngine
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RPC
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|static
name|int
name|VERSION
init|=
literal|0
decl_stmt|;
comment|// the implementation we tunnel through
DECL|field|ENGINE
specifier|private
specifier|static
specifier|final
name|RpcEngine
name|ENGINE
init|=
operator|new
name|WritableRpcEngine
argument_list|()
decl_stmt|;
comment|/** Tunnel an Avro RPC request and response through Hadoop's RPC. */
DECL|interface|TunnelProtocol
specifier|private
specifier|static
interface|interface
name|TunnelProtocol
extends|extends
name|VersionedProtocol
block|{
comment|//WritableRpcEngine expects a versionID in every protocol.
DECL|field|versionID
specifier|public
specifier|static
specifier|final
name|long
name|versionID
init|=
literal|0L
decl_stmt|;
comment|/** All Avro methods and responses go through this. */
DECL|method|call (BufferListWritable request)
name|BufferListWritable
name|call
parameter_list|(
name|BufferListWritable
name|request
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** A Writable that holds a List<ByteBuffer>, The Avro RPC Transceiver's    * basic unit of data transfer.*/
DECL|class|BufferListWritable
specifier|private
specifier|static
class|class
name|BufferListWritable
implements|implements
name|Writable
block|{
DECL|field|buffers
specifier|private
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
decl_stmt|;
DECL|method|BufferListWritable ()
specifier|public
name|BufferListWritable
parameter_list|()
block|{}
comment|// required for RPC Writables
DECL|method|BufferListWritable (List<ByteBuffer> buffers)
specifier|public
name|BufferListWritable
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
parameter_list|)
block|{
name|this
operator|.
name|buffers
operator|=
name|buffers
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|buffers
operator|=
operator|new
name|ArrayList
argument_list|<
name|ByteBuffer
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|buffers
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|buffers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|buffer
range|:
name|buffers
control|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|array
argument_list|()
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
argument_list|,
name|buffer
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** An Avro RPC Transceiver that tunnels client requests through Hadoop    * RPC. */
DECL|class|ClientTransceiver
specifier|private
specifier|static
class|class
name|ClientTransceiver
extends|extends
name|Transceiver
block|{
DECL|field|tunnel
specifier|private
name|TunnelProtocol
name|tunnel
decl_stmt|;
DECL|field|remote
specifier|private
name|InetSocketAddress
name|remote
decl_stmt|;
DECL|method|ClientTransceiver (InetSocketAddress addr, UserGroupInformation ticket, Configuration conf, SocketFactory factory, int rpcTimeout)
specifier|public
name|ClientTransceiver
parameter_list|(
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tunnel
operator|=
name|ENGINE
operator|.
name|getProxy
argument_list|(
name|TunnelProtocol
operator|.
name|class
argument_list|,
name|VERSION
argument_list|,
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|rpcTimeout
argument_list|)
operator|.
name|getProxy
argument_list|()
expr_stmt|;
name|this
operator|.
name|remote
operator|=
name|addr
expr_stmt|;
block|}
DECL|method|getRemoteName ()
specifier|public
name|String
name|getRemoteName
parameter_list|()
block|{
return|return
name|remote
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|transceive (List<ByteBuffer> request)
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|transceive
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tunnel
operator|.
name|call
argument_list|(
operator|new
name|BufferListWritable
argument_list|(
name|request
argument_list|)
argument_list|)
operator|.
name|buffers
return|;
block|}
DECL|method|readBuffers ()
specifier|public
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|readBuffers
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|writeBuffers (List<ByteBuffer> buffers)
specifier|public
name|void
name|writeBuffers
parameter_list|(
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|buffers
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ENGINE
operator|.
name|stopProxy
argument_list|(
name|tunnel
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Construct a client-side proxy object that implements the named protocol,    * talking to a server at the named address.     * @param<T>*/
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getProxy (Class<T> protocol, long clientVersion, InetSocketAddress addr, UserGroupInformation ticket, Configuration conf, SocketFactory factory, int rpcTimeout)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|ProtocolProxy
argument_list|<
name|T
argument_list|>
name|getProxy
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|protocol
parameter_list|,
name|long
name|clientVersion
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ProtocolProxy
argument_list|<
name|T
argument_list|>
argument_list|(
name|protocol
argument_list|,
operator|(
name|T
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|protocol
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|protocol
block|}
argument_list|,
operator|new
name|Invoker
argument_list|(
name|protocol
argument_list|,
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|rpcTimeout
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/** Stop this proxy. */
DECL|method|stopProxy (Object proxy)
specifier|public
name|void
name|stopProxy
parameter_list|(
name|Object
name|proxy
parameter_list|)
block|{
try|try
block|{
operator|(
operator|(
name|Invoker
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|proxy
argument_list|)
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while stopping "
operator|+
name|proxy
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Invoker
specifier|private
class|class
name|Invoker
implements|implements
name|InvocationHandler
implements|,
name|Closeable
block|{
DECL|field|tx
specifier|private
specifier|final
name|ClientTransceiver
name|tx
decl_stmt|;
DECL|field|requestor
specifier|private
specifier|final
name|SpecificRequestor
name|requestor
decl_stmt|;
DECL|method|Invoker (Class<?> protocol, InetSocketAddress addr, UserGroupInformation ticket, Configuration conf, SocketFactory factory, int rpcTimeout)
specifier|public
name|Invoker
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SocketFactory
name|factory
parameter_list|,
name|int
name|rpcTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|tx
operator|=
operator|new
name|ClientTransceiver
argument_list|(
name|addr
argument_list|,
name|ticket
argument_list|,
name|conf
argument_list|,
name|factory
argument_list|,
name|rpcTimeout
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestor
operator|=
name|createRequestor
argument_list|(
name|protocol
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
DECL|method|invoke (Object proxy, Method method, Object[] args)
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|requestor
operator|.
name|invoke
argument_list|(
name|proxy
argument_list|,
name|method
argument_list|,
name|args
argument_list|)
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|tx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createRequestor (Class<?> protocol, Transceiver transeiver)
specifier|protected
name|SpecificRequestor
name|createRequestor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|Transceiver
name|transeiver
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ReflectRequestor
argument_list|(
name|protocol
argument_list|,
name|transeiver
argument_list|)
return|;
block|}
DECL|method|createResponder (Class<?> iface, Object impl)
specifier|protected
name|Responder
name|createResponder
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|,
name|Object
name|impl
parameter_list|)
block|{
return|return
operator|new
name|ReflectResponder
argument_list|(
name|iface
argument_list|,
name|impl
argument_list|)
return|;
block|}
comment|/** An Avro RPC Responder that can process requests passed via Hadoop RPC. */
DECL|class|TunnelResponder
specifier|private
class|class
name|TunnelResponder
implements|implements
name|TunnelProtocol
block|{
DECL|field|responder
specifier|private
name|Responder
name|responder
decl_stmt|;
DECL|method|TunnelResponder (Class<?> iface, Object impl)
specifier|public
name|TunnelResponder
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|,
name|Object
name|impl
parameter_list|)
block|{
name|responder
operator|=
name|createResponder
argument_list|(
name|iface
argument_list|,
name|impl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProtocolVersion (String protocol, long version)
specifier|public
name|long
name|getProtocolVersion
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|VERSION
return|;
block|}
annotation|@
name|Override
DECL|method|getProtocolSignature ( String protocol, long version, int clientMethodsHashCode)
specifier|public
name|ProtocolSignature
name|getProtocolSignature
parameter_list|(
name|String
name|protocol
parameter_list|,
name|long
name|version
parameter_list|,
name|int
name|clientMethodsHashCode
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ProtocolSignature
argument_list|(
name|VERSION
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|call (final BufferListWritable request)
specifier|public
name|BufferListWritable
name|call
parameter_list|(
specifier|final
name|BufferListWritable
name|request
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BufferListWritable
argument_list|(
name|responder
operator|.
name|respond
argument_list|(
name|request
operator|.
name|buffers
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|call (Method method, Object[][] params, InetSocketAddress[] addrs, UserGroupInformation ticket, Configuration conf)
specifier|public
name|Object
index|[]
name|call
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
index|[]
name|params
parameter_list|,
name|InetSocketAddress
index|[]
name|addrs
parameter_list|,
name|UserGroupInformation
name|ticket
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/** Construct a server for a protocol implementation instance listening on a    * port and address. */
DECL|method|getServer (Class<?> iface, Object impl, String bindAddress, int port, int numHandlers, int numReaders, int queueSizePerHandler, boolean verbose, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager )
specifier|public
name|RPC
operator|.
name|Server
name|getServer
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|,
name|Object
name|impl
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|numHandlers
parameter_list|,
name|int
name|numReaders
parameter_list|,
name|int
name|queueSizePerHandler
parameter_list|,
name|boolean
name|verbose
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SecretManager
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ENGINE
operator|.
name|getServer
argument_list|(
name|TunnelProtocol
operator|.
name|class
argument_list|,
operator|new
name|TunnelResponder
argument_list|(
name|iface
argument_list|,
name|impl
argument_list|)
argument_list|,
name|bindAddress
argument_list|,
name|port
argument_list|,
name|numHandlers
argument_list|,
name|numReaders
argument_list|,
name|queueSizePerHandler
argument_list|,
name|verbose
argument_list|,
name|conf
argument_list|,
name|secretManager
argument_list|)
return|;
block|}
block|}
end_class

end_unit

