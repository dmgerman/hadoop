begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.ipc.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|MetricsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|Updater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsIntValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics
operator|.
name|util
operator|.
name|MetricsTimeVaryingRate
import|;
end_import

begin_comment
comment|/**  *   * This class is for maintaining  the various RPC statistics  * and publishing them through the metrics interfaces.  * This also registers the JMX MBean for RPC.  *<p>  * This class has a number of metrics variables that are publicly accessible;  * these variables (objects) have methods to update their values;  * for example:  *<p> {@link #rpcQueueTime}.inc(time)  *  */
end_comment

begin_class
DECL|class|RpcMetrics
specifier|public
class|class
name|RpcMetrics
implements|implements
name|Updater
block|{
DECL|field|registry
specifier|public
name|MetricsRegistry
name|registry
init|=
operator|new
name|MetricsRegistry
argument_list|()
decl_stmt|;
DECL|field|metricsRecord
specifier|private
name|MetricsRecord
name|metricsRecord
decl_stmt|;
DECL|field|myServer
specifier|private
name|Server
name|myServer
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RpcMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rpcMBean
name|RpcActivityMBean
name|rpcMBean
decl_stmt|;
DECL|method|RpcMetrics (String hostName, String port, Server server)
specifier|public
name|RpcMetrics
parameter_list|(
name|String
name|hostName
parameter_list|,
name|String
name|port
parameter_list|,
name|Server
name|server
parameter_list|)
block|{
name|myServer
operator|=
name|server
expr_stmt|;
name|MetricsContext
name|context
init|=
name|MetricsUtil
operator|.
name|getContext
argument_list|(
literal|"rpc"
argument_list|)
decl_stmt|;
name|metricsRecord
operator|=
name|MetricsUtil
operator|.
name|createRecord
argument_list|(
name|context
argument_list|,
literal|"metrics"
argument_list|)
expr_stmt|;
name|metricsRecord
operator|.
name|setTag
argument_list|(
literal|"port"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing RPC Metrics with hostName="
operator|+
name|hostName
operator|+
literal|", port="
operator|+
name|port
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerUpdater
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Need to clean up the interface to RpcMgt - don't need both metrics and server params
name|rpcMBean
operator|=
operator|new
name|RpcActivityMBean
argument_list|(
name|registry
argument_list|,
name|hostName
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
comment|/**    * The metrics variables are public:    *  - they can be set directly by calling their set/inc methods    *  -they can also be read directly - e.g. JMX does this.    */
DECL|field|rpcQueueTime
specifier|public
name|MetricsTimeVaryingRate
name|rpcQueueTime
init|=
operator|new
name|MetricsTimeVaryingRate
argument_list|(
literal|"RpcQueueTime"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
DECL|field|rpcProcessingTime
specifier|public
name|MetricsTimeVaryingRate
name|rpcProcessingTime
init|=
operator|new
name|MetricsTimeVaryingRate
argument_list|(
literal|"RpcProcessingTime"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
DECL|field|numOpenConnections
specifier|public
name|MetricsIntValue
name|numOpenConnections
init|=
operator|new
name|MetricsIntValue
argument_list|(
literal|"NumOpenConnections"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
DECL|field|callQueueLen
specifier|public
name|MetricsIntValue
name|callQueueLen
init|=
operator|new
name|MetricsIntValue
argument_list|(
literal|"callQueueLen"
argument_list|,
name|registry
argument_list|)
decl_stmt|;
comment|/**    * Push the metrics to the monitoring subsystem on doUpdate() call.    */
DECL|method|doUpdates (MetricsContext context)
specifier|public
name|void
name|doUpdates
parameter_list|(
name|MetricsContext
name|context
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// ToFix - fix server to use the following two metrics directly so
comment|// the metrics do not have be copied here.
name|numOpenConnections
operator|.
name|set
argument_list|(
name|myServer
operator|.
name|getNumOpenConnections
argument_list|()
argument_list|)
expr_stmt|;
name|callQueueLen
operator|.
name|set
argument_list|(
name|myServer
operator|.
name|getCallQueueLen
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MetricsBase
name|m
range|:
name|registry
operator|.
name|getMetricsList
argument_list|()
control|)
block|{
name|m
operator|.
name|pushMetric
argument_list|(
name|metricsRecord
argument_list|)
expr_stmt|;
block|}
block|}
name|metricsRecord
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
if|if
condition|(
name|rpcMBean
operator|!=
literal|null
condition|)
name|rpcMBean
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

