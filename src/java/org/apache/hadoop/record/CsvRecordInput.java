begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PushbackReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|CsvRecordInput
specifier|public
class|class
name|CsvRecordInput
implements|implements
name|RecordInput
block|{
DECL|field|stream
specifier|private
name|PushbackReader
name|stream
decl_stmt|;
DECL|class|CsvIndex
specifier|private
class|class
name|CsvIndex
implements|implements
name|Index
block|{
DECL|method|done ()
specifier|public
name|boolean
name|done
parameter_list|()
block|{
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
try|try
block|{
name|c
operator|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
name|stream
operator|.
name|unread
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{       }
return|return
operator|(
name|c
operator|==
literal|'}'
operator|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
DECL|method|incr ()
specifier|public
name|void
name|incr
parameter_list|()
block|{}
block|}
DECL|method|throwExceptionOnError (String tag)
specifier|private
name|void
name|throwExceptionOnError
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
DECL|method|readField (String tag)
specifier|private
name|String
name|readField
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|','
case|:
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
case|case
literal|'}'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
name|stream
operator|.
name|unread
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
default|default:
name|buf
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error reading "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
comment|/** Creates a new instance of CsvRecordInput */
DECL|method|CsvRecordInput (InputStream in)
specifier|public
name|CsvRecordInput
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
try|try
block|{
name|stream
operator|=
operator|new
name|PushbackReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|readByte (String tag)
specifier|public
name|byte
name|readByte
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|byte
operator|)
name|readLong
argument_list|(
name|tag
argument_list|)
return|;
block|}
DECL|method|readBool (String tag)
specifier|public
name|boolean
name|readBool
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sval
init|=
name|readField
argument_list|(
name|tag
argument_list|)
decl_stmt|;
return|return
literal|"T"
operator|.
name|equals
argument_list|(
name|sval
argument_list|)
condition|?
literal|true
else|:
literal|false
return|;
block|}
DECL|method|readInt (String tag)
specifier|public
name|int
name|readInt
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|int
operator|)
name|readLong
argument_list|(
name|tag
argument_list|)
return|;
block|}
DECL|method|readLong (String tag)
specifier|public
name|long
name|readLong
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sval
init|=
name|readField
argument_list|(
name|tag
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|lval
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|sval
argument_list|)
decl_stmt|;
return|return
name|lval
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
DECL|method|readFloat (String tag)
specifier|public
name|float
name|readFloat
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|float
operator|)
name|readDouble
argument_list|(
name|tag
argument_list|)
return|;
block|}
DECL|method|readDouble (String tag)
specifier|public
name|double
name|readDouble
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sval
init|=
name|readField
argument_list|(
name|tag
argument_list|)
decl_stmt|;
try|try
block|{
name|double
name|dval
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|sval
argument_list|)
decl_stmt|;
return|return
name|dval
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
DECL|method|readString (String tag)
specifier|public
name|String
name|readString
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sval
init|=
name|readField
argument_list|(
name|tag
argument_list|)
decl_stmt|;
return|return
name|Utils
operator|.
name|fromCSVString
argument_list|(
name|sval
argument_list|)
return|;
block|}
DECL|method|readBuffer (String tag)
specifier|public
name|Buffer
name|readBuffer
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sval
init|=
name|readField
argument_list|(
name|tag
argument_list|)
decl_stmt|;
return|return
name|Utils
operator|.
name|fromCSVBuffer
argument_list|(
name|sval
argument_list|)
return|;
block|}
DECL|method|startRecord (String tag)
specifier|public
name|void
name|startRecord
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tag
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|)
block|{
name|char
name|c1
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|char
name|c2
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|'s'
operator|||
name|c2
operator|!=
literal|'{'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|endRecord (String tag)
specifier|public
name|void
name|endRecord
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|tag
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|!=
literal|'\n'
operator|&&
name|c
operator|!=
literal|'\r'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing record."
argument_list|)
throw|;
block|}
else|else
block|{
return|return;
block|}
block|}
if|if
condition|(
name|c
operator|!=
literal|'}'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
name|c
operator|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|','
condition|)
block|{
name|stream
operator|.
name|unread
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
DECL|method|startVector (String tag)
specifier|public
name|Index
name|startVector
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|char
name|c1
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|char
name|c2
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|'v'
operator|||
name|c2
operator|!=
literal|'{'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
return|return
operator|new
name|CsvIndex
argument_list|()
return|;
block|}
DECL|method|endVector (String tag)
specifier|public
name|void
name|endVector
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'}'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
name|c
operator|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|','
condition|)
block|{
name|stream
operator|.
name|unread
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
DECL|method|startMap (String tag)
specifier|public
name|Index
name|startMap
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|char
name|c1
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|char
name|c2
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c1
operator|!=
literal|'m'
operator|||
name|c2
operator|!=
literal|'{'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
return|return
operator|new
name|CsvIndex
argument_list|()
return|;
block|}
DECL|method|endMap (String tag)
specifier|public
name|void
name|endMap
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|char
name|c
init|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'}'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing "
operator|+
name|tag
argument_list|)
throw|;
block|}
name|c
operator|=
operator|(
name|char
operator|)
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|','
condition|)
block|{
name|stream
operator|.
name|unread
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
end_class

end_unit

