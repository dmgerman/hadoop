begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Abstract Base class for all types supported by Hadoop Record I/O.  */
end_comment

begin_class
DECL|class|JType
specifier|abstract
specifier|public
class|class
name|JType
block|{
DECL|method|toCamelCase (String name)
specifier|static
name|String
name|toCamelCase
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|char
name|firstChar
init|=
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|firstChar
argument_list|)
condition|)
block|{
return|return
literal|""
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|firstChar
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
DECL|field|javaType
name|JavaType
name|javaType
decl_stmt|;
DECL|field|cppType
name|CppType
name|cppType
decl_stmt|;
DECL|field|cType
name|CType
name|cType
decl_stmt|;
DECL|class|JavaType
specifier|abstract
class|class
name|JavaType
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|methodSuffix
specifier|private
name|String
name|methodSuffix
decl_stmt|;
DECL|field|wrapper
specifier|private
name|String
name|wrapper
decl_stmt|;
DECL|field|typeIDByteString
specifier|private
name|String
name|typeIDByteString
decl_stmt|;
comment|// points to TypeID.RIOType
DECL|method|JavaType (String javaname, String suffix, String wrapper, String typeIDByteString)
name|JavaType
parameter_list|(
name|String
name|javaname
parameter_list|,
name|String
name|suffix
parameter_list|,
name|String
name|wrapper
parameter_list|,
name|String
name|typeIDByteString
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|javaname
expr_stmt|;
name|this
operator|.
name|methodSuffix
operator|=
name|suffix
expr_stmt|;
name|this
operator|.
name|wrapper
operator|=
name|wrapper
expr_stmt|;
name|this
operator|.
name|typeIDByteString
operator|=
name|typeIDByteString
expr_stmt|;
block|}
DECL|method|genDecl (CodeBuffer cb, String fname)
name|void
name|genDecl
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"private "
operator|+
name|name
operator|+
literal|" "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genStaticTypeInfo (CodeBuffer cb, String fname)
name|void
name|genStaticTypeInfo
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|".addField(\""
operator|+
name|fname
operator|+
literal|"\", "
operator|+
name|getTypeIDObjectString
argument_list|()
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|getTypeIDObjectString ()
specifier|abstract
name|String
name|getTypeIDObjectString
parameter_list|()
function_decl|;
DECL|method|genSetRTIFilter (CodeBuffer cb, Map<String, Integer> nestedStructMap)
name|void
name|genSetRTIFilter
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nestedStructMap
parameter_list|)
block|{
comment|// do nothing by default
return|return;
block|}
comment|/*void genRtiFieldCondition(CodeBuffer cb, String fname, int ct) {       cb.append("if ((tInfo.fieldID.equals(\"" + fname + "\"))&& (typeVal ==" +           " org.apache.hadoop.record.meta." + getTypeIDByteString() + ")) {\n");       cb.append("rtiFilterFields[i] = " + ct + ";\n");       cb.append("}\n");     }      void genRtiNestedFieldCondition(CodeBuffer cb, String varName, int ct) {       cb.append("if (" + varName + ".getElementTypeID().getTypeVal() == " +           "org.apache.hadoop.record.meta." + getTypeIDByteString() +            ") {\n");       cb.append("rtiFilterFields[i] = " + ct + ";\n");       cb.append("}\n");       }*/
DECL|method|genConstructorParam (CodeBuffer cb, String fname)
name|void
name|genConstructorParam
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"final "
operator|+
name|name
operator|+
literal|" "
operator|+
name|fname
argument_list|)
expr_stmt|;
block|}
DECL|method|genGetSet (CodeBuffer cb, String fname)
name|void
name|genGetSet
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"public "
operator|+
name|name
operator|+
literal|" get"
operator|+
name|toCamelCase
argument_list|(
name|fname
argument_list|)
operator|+
literal|"() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public void set"
operator|+
name|toCamelCase
argument_list|(
name|fname
argument_list|)
operator|+
literal|"(final "
operator|+
name|name
operator|+
literal|" "
operator|+
name|fname
operator|+
literal|") {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"this."
operator|+
name|fname
operator|+
literal|"="
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|getType ()
name|String
name|getType
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getWrapperType ()
name|String
name|getWrapperType
parameter_list|()
block|{
return|return
name|wrapper
return|;
block|}
DECL|method|getMethodSuffix ()
name|String
name|getMethodSuffix
parameter_list|()
block|{
return|return
name|methodSuffix
return|;
block|}
DECL|method|getTypeIDByteString ()
name|String
name|getTypeIDByteString
parameter_list|()
block|{
return|return
name|typeIDByteString
return|;
block|}
DECL|method|genWriteMethod (CodeBuffer cb, String fname, String tag)
name|void
name|genWriteMethod
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|".write"
operator|+
name|methodSuffix
operator|+
literal|"("
operator|+
name|fname
operator|+
literal|",\""
operator|+
name|tag
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genReadMethod (CodeBuffer cb, String fname, String tag, boolean decl)
name|void
name|genReadMethod
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|tag
parameter_list|,
name|boolean
name|decl
parameter_list|)
block|{
if|if
condition|(
name|decl
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|name
operator|+
literal|" "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
name|fname
operator|+
literal|"="
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".read"
operator|+
name|methodSuffix
operator|+
literal|"(\""
operator|+
name|tag
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genCompareTo (CodeBuffer cb, String fname, String other)
name|void
name|genCompareTo
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|other
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = ("
operator|+
name|fname
operator|+
literal|" == "
operator|+
name|other
operator|+
literal|")? 0 :(("
operator|+
name|fname
operator|+
literal|"<"
operator|+
name|other
operator|+
literal|")?-1:1);\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genCompareBytes (CodeBuffer cb)
specifier|abstract
name|void
name|genCompareBytes
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|)
function_decl|;
DECL|method|genSlurpBytes (CodeBuffer cb, String b, String s, String l)
specifier|abstract
name|void
name|genSlurpBytes
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|b
parameter_list|,
name|String
name|s
parameter_list|,
name|String
name|l
parameter_list|)
function_decl|;
DECL|method|genEquals (CodeBuffer cb, String fname, String peer)
name|void
name|genEquals
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|peer
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = ("
operator|+
name|fname
operator|+
literal|"=="
operator|+
name|peer
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genHashCode (CodeBuffer cb, String fname)
name|void
name|genHashCode
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = (int)"
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genConstructorSet (CodeBuffer cb, String fname)
name|void
name|genConstructorSet
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"this."
operator|+
name|fname
operator|+
literal|" = "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genClone (CodeBuffer cb, String fname)
name|void
name|genClone
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"other."
operator|+
name|fname
operator|+
literal|" = this."
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CppType
specifier|abstract
class|class
name|CppType
block|{
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|CppType (String cppname)
name|CppType
parameter_list|(
name|String
name|cppname
parameter_list|)
block|{
name|name
operator|=
name|cppname
expr_stmt|;
block|}
DECL|method|genDecl (CodeBuffer cb, String fname)
name|void
name|genDecl
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|name
operator|+
literal|" "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genStaticTypeInfo (CodeBuffer cb, String fname)
name|void
name|genStaticTypeInfo
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"p->addField(new ::std::string(\""
operator|+
name|fname
operator|+
literal|"\"), "
operator|+
name|getTypeIDObjectString
argument_list|()
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genGetSet (CodeBuffer cb, String fname)
name|void
name|genGetSet
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"virtual "
operator|+
name|name
operator|+
literal|" get"
operator|+
name|toCamelCase
argument_list|(
name|fname
argument_list|)
operator|+
literal|"() const {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"virtual void set"
operator|+
name|toCamelCase
argument_list|(
name|fname
argument_list|)
operator|+
literal|"("
operator|+
name|name
operator|+
literal|" m_) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|fname
operator|+
literal|"=m_;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|getTypeIDObjectString ()
specifier|abstract
name|String
name|getTypeIDObjectString
parameter_list|()
function_decl|;
DECL|method|genSetRTIFilter (CodeBuffer cb)
name|void
name|genSetRTIFilter
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|)
block|{
comment|// do nothing by default
return|return;
block|}
DECL|method|getType ()
name|String
name|getType
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|class|CType
class|class
name|CType
block|{        }
DECL|method|getSignature ()
specifier|abstract
name|String
name|getSignature
parameter_list|()
function_decl|;
DECL|method|setJavaType (JavaType jType)
name|void
name|setJavaType
parameter_list|(
name|JavaType
name|jType
parameter_list|)
block|{
name|this
operator|.
name|javaType
operator|=
name|jType
expr_stmt|;
block|}
DECL|method|getJavaType ()
name|JavaType
name|getJavaType
parameter_list|()
block|{
return|return
name|javaType
return|;
block|}
DECL|method|setCppType (CppType cppType)
name|void
name|setCppType
parameter_list|(
name|CppType
name|cppType
parameter_list|)
block|{
name|this
operator|.
name|cppType
operator|=
name|cppType
expr_stmt|;
block|}
DECL|method|getCppType ()
name|CppType
name|getCppType
parameter_list|()
block|{
return|return
name|cppType
return|;
block|}
DECL|method|setCType (CType cType)
name|void
name|setCType
parameter_list|(
name|CType
name|cType
parameter_list|)
block|{
name|this
operator|.
name|cType
operator|=
name|cType
expr_stmt|;
block|}
DECL|method|getCType ()
name|CType
name|getCType
parameter_list|()
block|{
return|return
name|cType
return|;
block|}
block|}
end_class

end_unit

