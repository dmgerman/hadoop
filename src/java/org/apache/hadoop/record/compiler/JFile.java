begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Container for the Hadoop Record DDL.  * The main components of the file are filename, list of included files,  * and records defined in that file.  */
end_comment

begin_class
DECL|class|JFile
specifier|public
class|class
name|JFile
block|{
comment|/** Possibly full name of the file */
DECL|field|mName
specifier|private
name|String
name|mName
decl_stmt|;
comment|/** Ordered list of included files */
DECL|field|mInclFiles
specifier|private
name|ArrayList
argument_list|<
name|JFile
argument_list|>
name|mInclFiles
decl_stmt|;
comment|/** Ordered list of records declared in this file */
DECL|field|mRecords
specifier|private
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|mRecords
decl_stmt|;
comment|/** Creates a new instance of JFile    *    * @param name possibly full pathname to the file    * @param inclFiles included files (as JFile)    * @param recList List of records defined within this file    */
DECL|method|JFile (String name, ArrayList<JFile> inclFiles, ArrayList<JRecord> recList)
specifier|public
name|JFile
parameter_list|(
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|JFile
argument_list|>
name|inclFiles
parameter_list|,
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|recList
parameter_list|)
block|{
name|mName
operator|=
name|name
expr_stmt|;
name|mInclFiles
operator|=
name|inclFiles
expr_stmt|;
name|mRecords
operator|=
name|recList
expr_stmt|;
block|}
comment|/** Strip the other pathname components and return the basename */
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
name|int
name|idx
init|=
name|mName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
return|return
operator|(
name|idx
operator|>
literal|0
operator|)
condition|?
name|mName
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
else|:
name|mName
return|;
block|}
comment|/** Generate record code in given language. Language should be all    *  lowercase.    */
DECL|method|genCode (String language, String destDir, ArrayList<String> options)
specifier|public
name|int
name|genCode
parameter_list|(
name|String
name|language
parameter_list|,
name|String
name|destDir
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|CodeGenerator
name|gen
init|=
name|CodeGenerator
operator|.
name|get
argument_list|(
name|language
argument_list|)
decl_stmt|;
if|if
condition|(
name|gen
operator|!=
literal|null
condition|)
block|{
name|gen
operator|.
name|genCode
argument_list|(
name|mName
argument_list|,
name|mInclFiles
argument_list|,
name|mRecords
argument_list|,
name|destDir
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannnot recognize language:"
operator|+
name|language
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

