begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * CodeGenerator is a Factory and a base class for Hadoop Record I/O translators.  * Different translators register creation methods with this factory.  */
end_comment

begin_class
DECL|class|CodeGenerator
specifier|abstract
class|class
name|CodeGenerator
block|{
DECL|field|generators
specifier|private
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|CodeGenerator
argument_list|>
name|generators
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CodeGenerator
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|register
argument_list|(
literal|"c"
argument_list|,
operator|new
name|CGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|register
argument_list|(
literal|"c++"
argument_list|,
operator|new
name|CppGenerator
argument_list|()
argument_list|)
expr_stmt|;
name|register
argument_list|(
literal|"java"
argument_list|,
operator|new
name|JavaGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|register (String lang, CodeGenerator gen)
specifier|static
name|void
name|register
parameter_list|(
name|String
name|lang
parameter_list|,
name|CodeGenerator
name|gen
parameter_list|)
block|{
name|generators
operator|.
name|put
argument_list|(
name|lang
argument_list|,
name|gen
argument_list|)
expr_stmt|;
block|}
DECL|method|get (String lang)
specifier|static
name|CodeGenerator
name|get
parameter_list|(
name|String
name|lang
parameter_list|)
block|{
return|return
name|generators
operator|.
name|get
argument_list|(
name|lang
argument_list|)
return|;
block|}
DECL|method|genCode (String file, ArrayList<JFile> inclFiles, ArrayList<JRecord> records, String destDir, ArrayList<String> options)
specifier|abstract
name|void
name|genCode
parameter_list|(
name|String
name|file
parameter_list|,
name|ArrayList
argument_list|<
name|JFile
argument_list|>
name|inclFiles
parameter_list|,
name|ArrayList
argument_list|<
name|JRecord
argument_list|>
name|records
parameter_list|,
name|String
name|destDir
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

