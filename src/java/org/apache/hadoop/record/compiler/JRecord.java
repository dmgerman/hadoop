begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
DECL|class|JRecord
specifier|public
class|class
name|JRecord
extends|extends
name|JCompType
block|{
DECL|class|JavaRecord
class|class
name|JavaRecord
extends|extends
name|JavaCompType
block|{
DECL|field|fullName
specifier|private
name|String
name|fullName
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|module
specifier|private
name|String
name|module
decl_stmt|;
DECL|field|fields
specifier|private
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|JavaRecord (String name, ArrayList<JField<JType>> flist)
name|JavaRecord
parameter_list|(
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
name|flist
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|"Record"
argument_list|,
name|name
argument_list|,
literal|"TypeID.RIOType.STRUCT"
argument_list|)
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|name
expr_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|module
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
name|iter
init|=
name|flist
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JType
argument_list|>
name|f
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getJavaType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTypeIDObjectString ()
name|String
name|getTypeIDObjectString
parameter_list|()
block|{
return|return
literal|"new org.apache.hadoop.record.meta.StructTypeID("
operator|+
name|fullName
operator|+
literal|".getTypeInfo())"
return|;
block|}
DECL|method|genSetRTIFilter (CodeBuffer cb, Map<String, Integer> nestedStructMap)
name|void
name|genSetRTIFilter
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nestedStructMap
parameter_list|)
block|{
comment|// ignore, if we'ev already set the type filter for this record
if|if
condition|(
operator|!
name|nestedStructMap
operator|.
name|containsKey
argument_list|(
name|fullName
argument_list|)
condition|)
block|{
comment|// we set the RTI filter here
name|cb
operator|.
name|append
argument_list|(
name|fullName
operator|+
literal|".setTypeFilter(rti.getNestedStructTypeInfo(\""
operator|+
name|name
operator|+
literal|"\"));\n"
argument_list|)
expr_stmt|;
name|nestedStructMap
operator|.
name|put
argument_list|(
name|fullName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|// for each typeInfo in the filter, we see if there's a similar one in the record.
comment|// Since we store typeInfos in ArrayLists, thsi search is O(n squared). We do it faster
comment|// if we also store a map (of TypeInfo to index), but since setupRtiFields() is called
comment|// only once when deserializing, we're sticking with the former, as the code is easier.
DECL|method|genSetupRtiFields (CodeBuffer cb)
name|void
name|genSetupRtiFields
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"private static void setupRtiFields()\n{\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (null == "
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|") return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"// we may already have done this\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (null != "
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|") return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i, "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|" = new int ["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"rtiFilter.getFieldTypeInfos().size()];\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"for ("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i=0; "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i<"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|".length; "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i++) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|"["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i] = 0;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"java.util.Iterator<org.apache.hadoop.record.meta."
operator|+
literal|"FieldTypeInfo> "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"itFilter = "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"rtiFilter.getFieldTypeInfos().iterator();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i=0;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"while ("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"itFilter.hasNext()) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.record.meta.FieldTypeInfo "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"tInfoFilter = "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"itFilter.next();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"java.util.Iterator<org.apache.hadoop.record.meta."
operator|+
literal|"FieldTypeInfo> "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"it = "
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|".getFieldTypeInfos().iterator();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j=1;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"while ("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"it.hasNext()) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.record.meta.FieldTypeInfo "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"tInfo = "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"it.next();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if ("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"tInfo.equals("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"tInfoFilter)) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|"["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i] = "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"break;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j++;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|/*int ct = 0;       for (Iterator<JField<JavaType>> i = fields.iterator(); i.hasNext();) {         ct++;         JField<JavaType> jf = i.next();         JavaType type = jf.getType();         String name = jf.getName();         if (ct != 1) {           cb.append("else ");         }         type.genRtiFieldCondition(cb, name, ct);       }       if (ct != 0) {         cb.append("else {\n");         cb.append("rtiFilterFields[i] = 0;\n");         cb.append("}\n");       }*/
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i++;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genReadMethod (CodeBuffer cb, String fname, String tag, boolean decl)
name|void
name|genReadMethod
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|tag
parameter_list|,
name|boolean
name|decl
parameter_list|)
block|{
if|if
condition|(
name|decl
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|fullName
operator|+
literal|" "
operator|+
name|fname
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
name|fname
operator|+
literal|"= new "
operator|+
name|fullName
operator|+
literal|"();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|fname
operator|+
literal|".deserialize("
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|",\""
operator|+
name|tag
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genWriteMethod (CodeBuffer cb, String fname, String tag)
name|void
name|genWriteMethod
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|fname
parameter_list|,
name|String
name|tag
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|fname
operator|+
literal|".serialize("
operator|+
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|",\""
operator|+
name|tag
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genSlurpBytes (CodeBuffer cb, String b, String s, String l)
name|void
name|genSlurpBytes
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|,
name|String
name|b
parameter_list|,
name|String
name|s
parameter_list|,
name|String
name|l
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int r = "
operator|+
name|fullName
operator|+
literal|".Comparator.slurpRaw("
operator|+
name|b
operator|+
literal|","
operator|+
name|s
operator|+
literal|","
operator|+
name|l
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|s
operator|+
literal|"+=r; "
operator|+
name|l
operator|+
literal|"-=r;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genCompareBytes (CodeBuffer cb)
name|void
name|genCompareBytes
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int r1 = "
operator|+
name|fullName
operator|+
literal|".Comparator.compareRaw(b1,s1,l1,b2,s2,l2);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (r1<= 0) { return r1; }\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"s1+=r1; s2+=r1; l1-=r1; l2-=r1;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genCode (String destDir, ArrayList<String> options)
name|void
name|genCode
parameter_list|(
name|String
name|destDir
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|pkg
init|=
name|module
decl_stmt|;
name|String
name|pkgpath
init|=
name|pkg
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|File
name|pkgdir
init|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|pkgpath
argument_list|)
decl_stmt|;
specifier|final
name|File
name|jfile
init|=
operator|new
name|File
argument_list|(
name|pkgdir
argument_list|,
name|name
operator|+
literal|".java"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pkgdir
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// create the pkg directory
name|boolean
name|ret
init|=
name|pkgdir
operator|.
name|mkdirs
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ret
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannnot create directory: "
operator|+
name|pkgpath
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|pkgdir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// not a directory
throw|throw
operator|new
name|IOException
argument_list|(
name|pkgpath
operator|+
literal|" is not a directory."
argument_list|)
throw|;
block|}
name|CodeBuffer
name|cb
init|=
operator|new
name|CodeBuffer
argument_list|()
decl_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"// File generated by hadoop record compiler. Do not edit.\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"package "
operator|+
name|module
operator|+
literal|";\n\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public class "
operator|+
name|name
operator|+
literal|" extends org.apache.hadoop.record.Record {\n"
argument_list|)
expr_stmt|;
comment|// type information declarations
name|cb
operator|.
name|append
argument_list|(
literal|"private static final "
operator|+
literal|"org.apache.hadoop.record.meta.RecordTypeInfo "
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"private static "
operator|+
literal|"org.apache.hadoop.record.meta.RecordTypeInfo "
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"private static int[] "
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
comment|// static init for type information
name|cb
operator|.
name|append
argument_list|(
literal|"static {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|" = "
operator|+
literal|"new org.apache.hadoop.record.meta.RecordTypeInfo(\""
operator|+
name|name
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genStaticTypeInfo
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"}\n\n"
argument_list|)
expr_stmt|;
comment|// field definitions
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genDecl
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// default constructor
name|cb
operator|.
name|append
argument_list|(
literal|"public "
operator|+
name|name
operator|+
literal|"() { }\n"
argument_list|)
expr_stmt|;
comment|// constructor
name|cb
operator|.
name|append
argument_list|(
literal|"public "
operator|+
name|name
operator|+
literal|"(\n"
argument_list|)
expr_stmt|;
name|int
name|fIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|fIdx
operator|++
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genConstructorParam
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
operator|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
operator|)
condition|?
literal|""
else|:
literal|",\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|") {\n"
argument_list|)
expr_stmt|;
name|fIdx
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|fIdx
operator|++
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genConstructorSet
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// getter/setter for type info
name|cb
operator|.
name|append
argument_list|(
literal|"public static org.apache.hadoop.record.meta.RecordTypeInfo"
operator|+
literal|" getTypeInfo() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public static void setTypeFilter("
operator|+
literal|"org.apache.hadoop.record.meta.RecordTypeInfo rti) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (null == rti) return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|" = rti;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|" = null;\n"
argument_list|)
expr_stmt|;
comment|// set RTIFilter for nested structs.
comment|// To prevent setting up the type filter for the same struct more than once,
comment|// we use a hash map to keep track of what we've set.
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|nestedStructMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
range|:
name|fields
control|)
block|{
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genSetRTIFilter
argument_list|(
name|cb
argument_list|,
name|nestedStructMap
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// setupRtiFields()
name|genSetupRtiFields
argument_list|(
name|cb
argument_list|)
expr_stmt|;
comment|// getters/setters for member variables
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genGetSet
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// serialize()
name|cb
operator|.
name|append
argument_list|(
literal|"public void serialize("
operator|+
literal|"final org.apache.hadoop.record.RecordOutput "
operator|+
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|", final String "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|")\n"
operator|+
literal|"throws java.io.IOException {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|".startRecord(this,"
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genWriteMethod
argument_list|(
name|cb
argument_list|,
name|name
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|".endRecord(this,"
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// deserializeWithoutFilter()
name|cb
operator|.
name|append
argument_list|(
literal|"private void deserializeWithoutFilter("
operator|+
literal|"final org.apache.hadoop.record.RecordInput "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", final String "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|")\n"
operator|+
literal|"throws java.io.IOException {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".startRecord("
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genReadMethod
argument_list|(
name|cb
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".endRecord("
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// deserialize()
name|cb
operator|.
name|append
argument_list|(
literal|"public void deserialize(final "
operator|+
literal|"org.apache.hadoop.record.RecordInput "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", final String "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|")\n"
operator|+
literal|"throws java.io.IOException {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (null == "
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|") {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"deserializeWithoutFilter("
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"// if we're here, we need to read based on version info\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".startRecord("
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"setupRtiFields();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"for (int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i=0; "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i<"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|".getFieldTypeInfos().size(); "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i++) {\n"
argument_list|)
expr_stmt|;
name|int
name|ct
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|ct
operator|++
expr_stmt|;
if|if
condition|(
literal|1
operator|!=
name|ct
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"else "
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"if ("
operator|+
name|ct
operator|+
literal|" == "
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|"["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i]) {\n"
argument_list|)
expr_stmt|;
name|type
operator|.
name|genReadMethod
argument_list|(
name|cb
argument_list|,
name|name
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|!=
name|ct
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"else {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"java.util.ArrayList<"
operator|+
literal|"org.apache.hadoop.record.meta.FieldTypeInfo> typeInfos = "
operator|+
literal|"(java.util.ArrayList<"
operator|+
literal|"org.apache.hadoop.record.meta.FieldTypeInfo>)"
operator|+
literal|"("
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|".getFieldTypeInfos());\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.record.meta.Utils.skip("
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", "
operator|+
literal|"typeInfos.get("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i).getFieldID(), typeInfos.get("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i).getTypeID());\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".endRecord("
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// compareTo()
name|cb
operator|.
name|append
argument_list|(
literal|"public int compareTo (final Object "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer_) throws ClassCastException {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (!("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer_ instanceof "
operator|+
name|name
operator|+
literal|")) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"throw new ClassCastException(\"Comparing different types of records.\");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|name
operator|+
literal|" "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer = ("
operator|+
name|name
operator|+
literal|") "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer_;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = 0;\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genCompareTo
argument_list|(
name|cb
argument_list|,
name|name
argument_list|,
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer."
operator|+
name|name
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if ("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret != 0) return "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret;\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// equals()
name|cb
operator|.
name|append
argument_list|(
literal|"public boolean equals(final Object "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer_) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (!("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer_ instanceof "
operator|+
name|name
operator|+
literal|")) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return false;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if ("
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer_ == this) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return true;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|name
operator|+
literal|" "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer = ("
operator|+
name|name
operator|+
literal|") "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer_;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"boolean "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret = false;\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genEquals
argument_list|(
name|cb
argument_list|,
name|name
argument_list|,
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"peer."
operator|+
name|name
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (!"
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret) return "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret;\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// clone()
name|cb
operator|.
name|append
argument_list|(
literal|"public Object clone() throws CloneNotSupportedException {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|name
operator|+
literal|" "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"other = new "
operator|+
name|name
operator|+
literal|"();\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genClone
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"other;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public int hashCode() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"result = 17;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret;\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genHashCode
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"result = 37*"
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"result + "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"ret;\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"return "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"result;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public static String signature() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return \""
operator|+
name|getSignature
argument_list|()
operator|+
literal|"\";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public static class Comparator extends"
operator|+
literal|" org.apache.hadoop.record.RecordComparator {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public Comparator() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"super("
operator|+
name|name
operator|+
literal|".class);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"static public int slurpRaw(byte[] b, int s, int l) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"try {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int os = s;\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genSlurpBytes
argument_list|(
name|cb
argument_list|,
literal|"b"
argument_list|,
literal|"s"
argument_list|,
literal|"l"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"return (os - s);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"} catch(java.io.IOException e) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"throw new RuntimeException(e);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"static public int compareRaw(byte[] b1, int s1, int l1,\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"                             byte[] b2, int s2, int l2) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"try {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int os1 = s1;\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JavaType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JavaType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JavaType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genCompareBytes
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"return (os1 - s1);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"} catch(java.io.IOException e) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"throw new RuntimeException(e);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"public int compare(byte[] b1, int s1, int l1,\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"                   byte[] b2, int s2, int l2) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int ret = compareRaw(b1,s1,l1,b2,s2,l2);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return (ret == -1)? -1 : ((ret==0)? 1 : 0);"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"static {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"org.apache.hadoop.record.RecordComparator.define("
operator|+
name|name
operator|+
literal|".class, new Comparator());\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|FileWriter
name|jj
init|=
operator|new
name|FileWriter
argument_list|(
name|jfile
argument_list|)
decl_stmt|;
try|try
block|{
name|jj
operator|.
name|write
argument_list|(
name|cb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|jj
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|CppRecord
class|class
name|CppRecord
extends|extends
name|CppCompType
block|{
DECL|field|fullName
specifier|private
name|String
name|fullName
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|module
specifier|private
name|String
name|module
decl_stmt|;
DECL|field|fields
specifier|private
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|CppRecord (String name, ArrayList<JField<JType>> flist)
name|CppRecord
parameter_list|(
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
name|flist
parameter_list|)
block|{
name|super
argument_list|(
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"::"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|fullName
operator|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"::"
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|module
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"::"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
name|iter
init|=
name|flist
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|JType
argument_list|>
name|f
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getCppType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTypeIDObjectString ()
name|String
name|getTypeIDObjectString
parameter_list|()
block|{
return|return
literal|"new ::hadoop::StructTypeID("
operator|+
name|fullName
operator|+
literal|"::getTypeInfo().getFieldTypeInfos())"
return|;
block|}
DECL|method|genDecl (String fname)
name|String
name|genDecl
parameter_list|(
name|String
name|fname
parameter_list|)
block|{
return|return
literal|"  "
operator|+
name|name
operator|+
literal|" "
operator|+
name|fname
operator|+
literal|";\n"
return|;
block|}
DECL|method|genSetRTIFilter (CodeBuffer cb)
name|void
name|genSetRTIFilter
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|)
block|{
comment|// we set the RTI filter here
name|cb
operator|.
name|append
argument_list|(
name|fullName
operator|+
literal|"::setTypeFilter(rti.getNestedStructTypeInfo(\""
operator|+
name|name
operator|+
literal|"\"));\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genSetupRTIFields (CodeBuffer cb)
name|void
name|genSetupRTIFields
parameter_list|(
name|CodeBuffer
name|cb
parameter_list|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"void "
operator|+
name|fullName
operator|+
literal|"::setupRtiFields() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (NULL == p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|") return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (NULL != p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|") return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|" = new int[p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|"->getFieldTypeInfos().size()];\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"for (unsigned int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i=0; "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i<p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|"->getFieldTypeInfos().size(); "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i++) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|"["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i] = 0;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"for (unsigned int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i=0; "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i<p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|"->getFieldTypeInfos().size(); "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i++) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"for (unsigned int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j=0; "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j<p"
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|"->getFieldTypeInfos().size(); "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j++) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (*(p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|"->getFieldTypeInfos()["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i]) == *(p"
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|"->getFieldTypeInfos()["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j])) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|"["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i] = "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"j+1;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"break;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|genCode (FileWriter hh, FileWriter cc, ArrayList<String> options)
name|void
name|genCode
parameter_list|(
name|FileWriter
name|hh
parameter_list|,
name|FileWriter
name|cc
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|CodeBuffer
name|hb
init|=
operator|new
name|CodeBuffer
argument_list|()
decl_stmt|;
name|String
index|[]
name|ns
init|=
name|module
operator|.
name|split
argument_list|(
literal|"::"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ns
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hb
operator|.
name|append
argument_list|(
literal|"namespace "
operator|+
name|ns
index|[
name|i
index|]
operator|+
literal|" {\n"
argument_list|)
expr_stmt|;
block|}
name|hb
operator|.
name|append
argument_list|(
literal|"class "
operator|+
name|name
operator|+
literal|" : public ::hadoop::Record {\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"private:\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|CppType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genDecl
argument_list|(
name|hb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|// type info vars
name|hb
operator|.
name|append
argument_list|(
literal|"static ::hadoop::RecordTypeInfo* p"
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"static ::hadoop::RecordTypeInfo* p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"static int* p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"static ::hadoop::RecordTypeInfo* setupTypeInfo();\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"static void setupRtiFields();\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual void deserializeWithoutFilter(::hadoop::IArchive& "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", const char* "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"public:\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"static const ::hadoop::RecordTypeInfo& getTypeInfo() "
operator|+
literal|"{return *p"
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|";}\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"static void setTypeFilter(const ::hadoop::RecordTypeInfo& rti);\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"static void setTypeFilter(const ::hadoop::RecordTypeInfo* prti);\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual void serialize(::hadoop::OArchive& "
operator|+
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|", const char* "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|") const;\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual void deserialize(::hadoop::IArchive& "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", const char* "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual const ::std::string& type() const;\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual const ::std::string& signature() const;\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual bool operator<(const "
operator|+
name|name
operator|+
literal|"& peer_) const;\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual bool operator==(const "
operator|+
name|name
operator|+
literal|"& peer_) const;\n"
argument_list|)
expr_stmt|;
name|hb
operator|.
name|append
argument_list|(
literal|"virtual ~"
operator|+
name|name
operator|+
literal|"() {};\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|CppType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genGetSet
argument_list|(
name|hb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|hb
operator|.
name|append
argument_list|(
literal|"}; // end record "
operator|+
name|name
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|ns
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|hb
operator|.
name|append
argument_list|(
literal|"} // end namespace "
operator|+
name|ns
index|[
name|i
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|hh
operator|.
name|write
argument_list|(
name|hb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|CodeBuffer
name|cb
init|=
operator|new
name|CodeBuffer
argument_list|()
decl_stmt|;
comment|// initialize type info vars
name|cb
operator|.
name|append
argument_list|(
literal|"::hadoop::RecordTypeInfo* "
operator|+
name|fullName
operator|+
literal|"::p"
operator|+
name|Consts
operator|.
name|RTI_VAR
operator|+
literal|" = "
operator|+
name|fullName
operator|+
literal|"::setupTypeInfo();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"::hadoop::RecordTypeInfo* "
operator|+
name|fullName
operator|+
literal|"::p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|" = NULL;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"int* "
operator|+
name|fullName
operator|+
literal|"::p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|" = NULL;\n\n"
argument_list|)
expr_stmt|;
comment|// setupTypeInfo()
name|cb
operator|.
name|append
argument_list|(
literal|"::hadoop::RecordTypeInfo* "
operator|+
name|fullName
operator|+
literal|"::setupTypeInfo() {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"::hadoop::RecordTypeInfo* p = new ::hadoop::RecordTypeInfo(\""
operator|+
name|name
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|CppType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genStaticTypeInfo
argument_list|(
name|cb
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"return p;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// setTypeFilter()
name|cb
operator|.
name|append
argument_list|(
literal|"void "
operator|+
name|fullName
operator|+
literal|"::setTypeFilter(const "
operator|+
literal|"::hadoop::RecordTypeInfo& rti) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (NULL != p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|") {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"delete p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|" = new ::hadoop::RecordTypeInfo(rti);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (NULL != p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|") {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"delete p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|";\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|" = NULL;\n"
argument_list|)
expr_stmt|;
comment|// set RTIFilter for nested structs. We may end up with multiple lines that
comment|// do the same thing, if the same struct is nested in more than one field,
comment|// but that's OK.
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CppType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|type
operator|.
name|genSetRTIFilter
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// setTypeFilter()
name|cb
operator|.
name|append
argument_list|(
literal|"void "
operator|+
name|fullName
operator|+
literal|"::setTypeFilter(const "
operator|+
literal|"::hadoop::RecordTypeInfo* prti) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (NULL != prti) {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"setTypeFilter(*prti);\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// setupRtiFields()
name|genSetupRTIFields
argument_list|(
name|cb
argument_list|)
expr_stmt|;
comment|// serialize()
name|cb
operator|.
name|append
argument_list|(
literal|"void "
operator|+
name|fullName
operator|+
literal|"::serialize(::hadoop::OArchive& "
operator|+
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|", const char* "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|") const {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|".startRecord(*this,"
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|CppType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|JBuffer
operator|.
name|CppBuffer
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|".serialize("
operator|+
name|name
operator|+
literal|","
operator|+
name|name
operator|+
literal|".length(),\""
operator|+
name|name
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|".serialize("
operator|+
name|name
operator|+
literal|",\""
operator|+
name|name
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_OUTPUT
operator|+
literal|".endRecord(*this,"
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// deserializeWithoutFilter()
name|cb
operator|.
name|append
argument_list|(
literal|"void "
operator|+
name|fullName
operator|+
literal|"::deserializeWithoutFilter(::hadoop::IArchive& "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", const char* "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|") {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".startRecord(*this,"
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|CppType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|JBuffer
operator|.
name|CppBuffer
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"{\nsize_t len=0; "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".deserialize("
operator|+
name|name
operator|+
literal|",len,\""
operator|+
name|name
operator|+
literal|"\");\n}\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".deserialize("
operator|+
name|name
operator|+
literal|",\""
operator|+
name|name
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".endRecord(*this,"
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// deserialize()
name|cb
operator|.
name|append
argument_list|(
literal|"void "
operator|+
name|fullName
operator|+
literal|"::deserialize(::hadoop::IArchive& "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", const char* "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|") {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"if (NULL == p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|") {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"deserializeWithoutFilter("
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"// if we're here, we need to read based on version info\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".startRecord(*this,"
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"setupRtiFields();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"for (unsigned int "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i=0; "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i<p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|"->getFieldTypeInfos().size(); "
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i++) {\n"
argument_list|)
expr_stmt|;
name|int
name|ct
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|CppType
name|type
init|=
name|jf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|ct
operator|++
expr_stmt|;
if|if
condition|(
literal|1
operator|!=
name|ct
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"else "
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"if ("
operator|+
name|ct
operator|+
literal|" == p"
operator|+
name|Consts
operator|.
name|RTI_FILTER_FIELDS
operator|+
literal|"["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i]) {\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|JBuffer
operator|.
name|CppBuffer
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"{\nsize_t len=0; "
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".deserialize("
operator|+
name|name
operator|+
literal|",len,\""
operator|+
name|name
operator|+
literal|"\");\n}\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".deserialize("
operator|+
name|name
operator|+
literal|",\""
operator|+
name|name
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|!=
name|ct
condition|)
block|{
name|cb
operator|.
name|append
argument_list|(
literal|"else {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"const std::vector< ::hadoop::FieldTypeInfo*>& typeInfos = p"
operator|+
name|Consts
operator|.
name|RTI_FILTER
operator|+
literal|"->getFieldTypeInfos();\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"::hadoop::Utils::skip("
operator|+
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|", typeInfos["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i]->getFieldID()->c_str()"
operator|+
literal|", *(typeInfos["
operator|+
name|Consts
operator|.
name|RIO_PREFIX
operator|+
literal|"i]->getTypeID()));\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
name|Consts
operator|.
name|RECORD_INPUT
operator|+
literal|".endRecord(*this, "
operator|+
name|Consts
operator|.
name|TAG
operator|+
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
comment|// operator<
name|cb
operator|.
name|append
argument_list|(
literal|"bool "
operator|+
name|fullName
operator|+
literal|"::operator< (const "
operator|+
name|fullName
operator|+
literal|"& peer_) const {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return (1\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"&& ("
operator|+
name|name
operator|+
literal|"< peer_."
operator|+
name|name
operator|+
literal|")\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"bool "
operator|+
name|fullName
operator|+
literal|"::operator== (const "
operator|+
name|fullName
operator|+
literal|"& peer_) const {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return (1\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|CppType
argument_list|>
argument_list|>
name|i
init|=
name|fields
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JField
argument_list|<
name|CppType
argument_list|>
name|jf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|jf
operator|.
name|getName
argument_list|()
decl_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"&& ("
operator|+
name|name
operator|+
literal|" == peer_."
operator|+
name|name
operator|+
literal|")\n"
argument_list|)
expr_stmt|;
block|}
name|cb
operator|.
name|append
argument_list|(
literal|");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"const ::std::string&"
operator|+
name|fullName
operator|+
literal|"::type() const {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"static const ::std::string type_(\""
operator|+
name|name
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return type_;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"const ::std::string&"
operator|+
name|fullName
operator|+
literal|"::signature() const {\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"static const ::std::string sig_(\""
operator|+
name|getSignature
argument_list|()
operator|+
literal|"\");\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"return sig_;\n"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|cc
operator|.
name|write
argument_list|(
name|cb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CRecord
class|class
name|CRecord
extends|extends
name|CCompType
block|{        }
DECL|field|signature
specifier|private
name|String
name|signature
decl_stmt|;
comment|/**    * Creates a new instance of JRecord    */
DECL|method|JRecord (String name, ArrayList<JField<JType>> flist)
specifier|public
name|JRecord
parameter_list|(
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
name|flist
parameter_list|)
block|{
name|setJavaType
argument_list|(
operator|new
name|JavaRecord
argument_list|(
name|name
argument_list|,
name|flist
argument_list|)
argument_list|)
expr_stmt|;
name|setCppType
argument_list|(
operator|new
name|CppRecord
argument_list|(
name|name
argument_list|,
name|flist
argument_list|)
argument_list|)
expr_stmt|;
name|setCType
argument_list|(
operator|new
name|CRecord
argument_list|()
argument_list|)
expr_stmt|;
comment|// precompute signature
name|int
name|idx
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|recName
init|=
name|name
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"L"
argument_list|)
operator|.
name|append
argument_list|(
name|recName
argument_list|)
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JField
argument_list|<
name|JType
argument_list|>
argument_list|>
name|i
init|=
name|flist
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|s
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|signature
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
DECL|method|getSignature ()
name|String
name|getSignature
parameter_list|()
block|{
return|return
name|signature
return|;
block|}
DECL|method|genCppCode (FileWriter hh, FileWriter cc, ArrayList<String> options)
name|void
name|genCppCode
parameter_list|(
name|FileWriter
name|hh
parameter_list|,
name|FileWriter
name|cc
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|CppRecord
operator|)
name|getCppType
argument_list|()
operator|)
operator|.
name|genCode
argument_list|(
name|hh
argument_list|,
name|cc
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|genJavaCode (String destDir, ArrayList<String> options)
name|void
name|genJavaCode
parameter_list|(
name|String
name|destDir
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|JavaRecord
operator|)
name|getJavaType
argument_list|()
operator|)
operator|.
name|genCode
argument_list|(
name|destDir
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

