begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. RccTokenManager.java */
end_comment

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler.generated
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
operator|.
name|generated
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|RccTokenManager
specifier|public
class|class
name|RccTokenManager
implements|implements
name|RccConstants
block|{
DECL|field|debugStream
specifier|public
name|java
operator|.
name|io
operator|.
name|PrintStream
name|debugStream
init|=
name|System
operator|.
name|out
decl_stmt|;
DECL|method|setDebugStream (java.io.PrintStream ds)
specifier|public
name|void
name|setDebugStream
parameter_list|(
name|java
operator|.
name|io
operator|.
name|PrintStream
name|ds
parameter_list|)
block|{
name|debugStream
operator|=
name|ds
expr_stmt|;
block|}
DECL|method|jjMoveStringLiteralDfa0_1 ()
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa0_1
parameter_list|()
block|{
return|return
name|jjMoveNfa_1
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|jjCheckNAdd (int state)
specifier|private
specifier|final
name|void
name|jjCheckNAdd
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|jjrounds
index|[
name|state
index|]
operator|!=
name|jjround
condition|)
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|state
expr_stmt|;
name|jjrounds
index|[
name|state
index|]
operator|=
name|jjround
expr_stmt|;
block|}
block|}
DECL|method|jjAddStates (int start, int end)
specifier|private
specifier|final
name|void
name|jjAddStates
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
do|do
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|jjnextStates
index|[
name|start
index|]
expr_stmt|;
block|}
do|while
condition|(
name|start
operator|++
operator|!=
name|end
condition|)
do|;
block|}
DECL|method|jjCheckNAddTwoStates (int state1, int state2)
specifier|private
specifier|final
name|void
name|jjCheckNAddTwoStates
parameter_list|(
name|int
name|state1
parameter_list|,
name|int
name|state2
parameter_list|)
block|{
name|jjCheckNAdd
argument_list|(
name|state1
argument_list|)
expr_stmt|;
name|jjCheckNAdd
argument_list|(
name|state2
argument_list|)
expr_stmt|;
block|}
DECL|method|jjCheckNAddStates (int start, int end)
specifier|private
specifier|final
name|void
name|jjCheckNAddStates
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
do|do
block|{
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|start
operator|++
operator|!=
name|end
condition|)
do|;
block|}
DECL|method|jjCheckNAddStates (int start)
specifier|private
specifier|final
name|void
name|jjCheckNAddStates
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
index|]
argument_list|)
expr_stmt|;
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|jjMoveNfa_1 (int startState, int curPos)
specifier|private
specifier|final
name|int
name|jjMoveNfa_1
parameter_list|(
name|int
name|startState
parameter_list|,
name|int
name|curPos
parameter_list|)
block|{
name|int
index|[]
name|nextStates
decl_stmt|;
name|int
name|startsAt
init|=
literal|0
decl_stmt|;
name|jjnewStateCnt
operator|=
literal|3
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|jjstateSet
index|[
literal|0
index|]
operator|=
name|startState
expr_stmt|;
name|int
name|j
decl_stmt|,
name|kind
init|=
literal|0x7fffffff
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|++
name|jjround
operator|==
literal|0x7fffffff
condition|)
name|ReInitRounds
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|<
literal|64
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
name|curChar
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
operator|(
literal|0x2400L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|6
condition|)
name|kind
operator|=
literal|6
expr_stmt|;
block|}
if|if
condition|(
name|curChar
operator|==
literal|13
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|1
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|curChar
operator|==
literal|10
operator|&&
name|kind
operator|>
literal|6
condition|)
name|kind
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|curChar
operator|==
literal|13
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|1
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|<
literal|128
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
else|else
block|{
name|int
name|i2
init|=
operator|(
name|curChar
operator|&
literal|0xff
operator|)
operator|>>
literal|6
decl_stmt|;
name|long
name|l2
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
if|if
condition|(
name|kind
operator|!=
literal|0x7fffffff
condition|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|curPos
expr_stmt|;
name|kind
operator|=
literal|0x7fffffff
expr_stmt|;
block|}
operator|++
name|curPos
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|=
name|jjnewStateCnt
operator|)
operator|==
operator|(
name|startsAt
operator|=
literal|3
operator|-
operator|(
name|jjnewStateCnt
operator|=
name|startsAt
operator|)
operator|)
condition|)
return|return
name|curPos
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|curPos
return|;
block|}
block|}
block|}
DECL|method|jjStopStringLiteralDfa_0 (int pos, long active0)
specifier|private
specifier|final
name|int
name|jjStopStringLiteralDfa_0
parameter_list|(
name|int
name|pos
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
switch|switch
condition|(
name|pos
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0xfff800L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|32
expr_stmt|;
return|return
literal|4
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|1
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0xfff800L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|32
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
return|return
literal|4
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|2
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x7ef800L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|32
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
return|return
literal|4
return|;
block|}
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x810000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|4
return|;
return|return
operator|-
literal|1
return|;
case|case
literal|3
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x24000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|4
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x7cb800L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|32
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
return|return
literal|4
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|4
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x41000L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|4
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x78a800L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|32
expr_stmt|;
name|jjmatchedPos
operator|=
literal|4
expr_stmt|;
return|return
literal|4
return|;
block|}
return|return
operator|-
literal|1
return|;
case|case
literal|5
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x680800L
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|4
return|;
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x10a000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|32
expr_stmt|;
name|jjmatchedPos
operator|=
literal|5
expr_stmt|;
return|return
literal|4
return|;
block|}
return|return
operator|-
literal|1
return|;
default|default :
return|return
operator|-
literal|1
return|;
block|}
block|}
DECL|method|jjStartNfa_0 (int pos, long active0)
specifier|private
specifier|final
name|int
name|jjStartNfa_0
parameter_list|(
name|int
name|pos
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
name|jjStopStringLiteralDfa_0
argument_list|(
name|pos
argument_list|,
name|active0
argument_list|)
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|jjStopAtPos (int pos, int kind)
specifier|private
specifier|final
name|int
name|jjStopAtPos
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|kind
parameter_list|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|pos
expr_stmt|;
return|return
name|pos
operator|+
literal|1
return|;
block|}
DECL|method|jjStartNfaWithStates_0 (int pos, int kind, int state)
specifier|private
specifier|final
name|int
name|jjStartNfaWithStates_0
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|kind
parameter_list|,
name|int
name|state
parameter_list|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|pos
expr_stmt|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|pos
operator|+
literal|1
return|;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
name|state
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|jjMoveStringLiteralDfa0_0 ()
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa0_0
parameter_list|()
block|{
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|44
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|29
argument_list|)
return|;
case|case
literal|46
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|30
argument_list|)
return|;
case|case
literal|47
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x120L
argument_list|)
return|;
case|case
literal|59
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|28
argument_list|)
return|;
case|case
literal|60
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|26
argument_list|)
return|;
case|case
literal|62
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|27
argument_list|)
return|;
case|case
literal|98
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x20c000L
argument_list|)
return|;
case|case
literal|99
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x1000L
argument_list|)
return|;
case|case
literal|100
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x80000L
argument_list|)
return|;
case|case
literal|102
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x40000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x12000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x20000L
argument_list|)
return|;
case|case
literal|109
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x800800L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x100000L
argument_list|)
return|;
case|case
literal|118
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x400000L
argument_list|)
return|;
case|case
literal|123
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|24
argument_list|)
return|;
case|case
literal|125
case|:
return|return
name|jjStopAtPos
argument_list|(
literal|0
argument_list|,
literal|25
argument_list|)
return|;
default|default :
return|return
name|jjMoveNfa_0
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
DECL|method|jjMoveStringLiteralDfa1_0 (long active0)
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa1_0
parameter_list|(
name|long
name|active0
parameter_list|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|0
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|42
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStopAtPos
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
return|;
break|break;
case|case
literal|47
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStopAtPos
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
return|;
break|break;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x800000L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x400000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x41000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x12000L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0xa8800L
argument_list|)
return|;
case|case
literal|115
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
case|case
literal|121
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x4000L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|0
argument_list|,
name|active0
argument_list|)
return|;
block|}
DECL|method|jjMoveStringLiteralDfa2_0 (long old0, long active0)
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa2_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|0
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|1
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x1000L
argument_list|)
return|;
case|case
literal|99
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x402000L
argument_list|)
return|;
case|case
literal|100
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|102
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x20000L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x48000L
argument_list|)
return|;
case|case
literal|112
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x800000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|23
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x10000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|2
argument_list|,
literal|16
argument_list|,
literal|4
argument_list|)
return|;
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x104000L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|1
argument_list|,
name|active0
argument_list|)
return|;
block|}
DECL|method|jjMoveStringLiteralDfa3_0 (long old0, long active0)
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa3_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|1
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|2
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x40000L
argument_list|)
return|;
case|case
literal|98
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x4000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|3
argument_list|,
literal|14
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|102
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x200000L
argument_list|)
return|;
case|case
literal|103
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|3
argument_list|,
literal|17
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0xa000L
argument_list|)
return|;
case|case
literal|114
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|115
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x1000L
argument_list|)
return|;
case|case
literal|116
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x400000L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|2
argument_list|,
name|active0
argument_list|)
return|;
block|}
DECL|method|jjMoveStringLiteralDfa4_0 (long old0, long active0)
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa4_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|2
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|3
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|4
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x208000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x80800L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x400000L
argument_list|)
return|;
case|case
literal|115
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x1000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|4
argument_list|,
literal|12
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|4
argument_list|,
literal|18
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|3
argument_list|,
name|active0
argument_list|)
return|;
block|}
DECL|method|jjMoveStringLiteralDfa5_0 (long old0, long active0)
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa5_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|3
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|4
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|5
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x8000L
argument_list|)
return|;
case|case
literal|100
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x800L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|11
argument_list|,
literal|4
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|19
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|114
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|21
argument_list|,
literal|4
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x400000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|5
argument_list|,
literal|22
argument_list|,
literal|4
argument_list|)
return|;
break|break;
default|default :
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|4
argument_list|,
name|active0
argument_list|)
return|;
block|}
DECL|method|jjMoveStringLiteralDfa6_0 (long old0, long active0)
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa6_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjStartNfa_0
argument_list|(
literal|4
argument_list|,
name|old0
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjStopStringLiteralDfa_0
argument_list|(
literal|5
argument_list|,
name|active0
argument_list|)
expr_stmt|;
return|return
literal|6
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x2000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|6
argument_list|,
literal|13
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|103
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|6
argument_list|,
literal|20
argument_list|,
literal|4
argument_list|)
return|;
break|break;
case|case
literal|110
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8000L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStartNfaWithStates_0
argument_list|(
literal|6
argument_list|,
literal|15
argument_list|,
literal|4
argument_list|)
return|;
break|break;
default|default :
break|break;
block|}
return|return
name|jjStartNfa_0
argument_list|(
literal|5
argument_list|,
name|active0
argument_list|)
return|;
block|}
DECL|field|jjbitVec0
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec0
init|=
block|{
literal|0x0L
block|,
literal|0x0L
block|,
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|}
decl_stmt|;
DECL|method|jjMoveNfa_0 (int startState, int curPos)
specifier|private
specifier|final
name|int
name|jjMoveNfa_0
parameter_list|(
name|int
name|startState
parameter_list|,
name|int
name|curPos
parameter_list|)
block|{
name|int
index|[]
name|nextStates
decl_stmt|;
name|int
name|startsAt
init|=
literal|0
decl_stmt|;
name|jjnewStateCnt
operator|=
literal|5
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|jjstateSet
index|[
literal|0
index|]
operator|=
name|startState
expr_stmt|;
name|int
name|j
decl_stmt|,
name|kind
init|=
literal|0x7fffffff
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|++
name|jjround
operator|==
literal|0x7fffffff
condition|)
name|ReInitRounds
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|<
literal|64
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
name|curChar
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|curChar
operator|==
literal|34
condition|)
name|jjCheckNAdd
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|(
literal|0xfffffffbffffffffL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|curChar
operator|==
literal|34
operator|&&
name|kind
operator|>
literal|31
condition|)
name|kind
operator|=
literal|31
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|32
condition|)
name|kind
operator|=
literal|32
expr_stmt|;
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|4
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|<
literal|128
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
operator|(
literal|0x7fffffe07fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|32
condition|)
name|kind
operator|=
literal|32
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|jjAddStates
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
operator|(
literal|0x7fffffe87fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|32
condition|)
name|kind
operator|=
literal|32
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|4
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
else|else
block|{
name|int
name|i2
init|=
operator|(
name|curChar
operator|&
literal|0xff
operator|)
operator|>>
literal|6
decl_stmt|;
name|long
name|l2
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
operator|(
name|jjbitVec0
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
if|if
condition|(
name|kind
operator|!=
literal|0x7fffffff
condition|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|curPos
expr_stmt|;
name|kind
operator|=
literal|0x7fffffff
expr_stmt|;
block|}
operator|++
name|curPos
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|=
name|jjnewStateCnt
operator|)
operator|==
operator|(
name|startsAt
operator|=
literal|5
operator|-
operator|(
name|jjnewStateCnt
operator|=
name|startsAt
operator|)
operator|)
condition|)
return|return
name|curPos
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|curPos
return|;
block|}
block|}
block|}
DECL|method|jjMoveStringLiteralDfa0_2 ()
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa0_2
parameter_list|()
block|{
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|42
case|:
return|return
name|jjMoveStringLiteralDfa1_2
argument_list|(
literal|0x200L
argument_list|)
return|;
default|default :
return|return
literal|1
return|;
block|}
block|}
DECL|method|jjMoveStringLiteralDfa1_2 (long active0)
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa1_2
parameter_list|(
name|long
name|active0
parameter_list|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|47
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200L
operator|)
operator|!=
literal|0L
condition|)
return|return
name|jjStopAtPos
argument_list|(
literal|1
argument_list|,
literal|9
argument_list|)
return|;
break|break;
default|default :
return|return
literal|2
return|;
block|}
return|return
literal|2
return|;
block|}
DECL|field|jjnextStates
specifier|static
specifier|final
name|int
index|[]
name|jjnextStates
init|=
block|{
literal|1
block|,
literal|2
block|,    }
decl_stmt|;
DECL|field|jjstrLiteralImages
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|jjstrLiteralImages
init|=
block|{
literal|""
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"\155\157\144\165\154\145"
block|,
literal|"\143\154\141\163\163"
block|,
literal|"\151\156\143\154\165\144\145"
block|,
literal|"\142\171\164\145"
block|,
literal|"\142\157\157\154\145\141\156"
block|,
literal|"\151\156\164"
block|,
literal|"\154\157\156\147"
block|,
literal|"\146\154\157\141\164"
block|,
literal|"\144\157\165\142\154\145"
block|,
literal|"\165\163\164\162\151\156\147"
block|,
literal|"\142\165\146\146\145\162"
block|,
literal|"\166\145\143\164\157\162"
block|,
literal|"\155\141\160"
block|,
literal|"\173"
block|,
literal|"\175"
block|,
literal|"\74"
block|,
literal|"\76"
block|,
literal|"\73"
block|,
literal|"\54"
block|,
literal|"\56"
block|,
literal|null
block|,
literal|null
block|, }
decl_stmt|;
DECL|field|lexStateNames
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|lexStateNames
init|=
block|{
literal|"DEFAULT"
block|,
literal|"WithinOneLineComment"
block|,
literal|"WithinMultiLineComment"
block|,    }
decl_stmt|;
DECL|field|jjnewLexState
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|jjnewLexState
init|=
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|0
block|,
operator|-
literal|1
block|,
literal|2
block|,
literal|0
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,    }
decl_stmt|;
DECL|field|jjtoToken
specifier|static
specifier|final
name|long
index|[]
name|jjtoToken
init|=
block|{
literal|0x1fffff801L
block|,    }
decl_stmt|;
DECL|field|jjtoSkip
specifier|static
specifier|final
name|long
index|[]
name|jjtoSkip
init|=
block|{
literal|0x37eL
block|,    }
decl_stmt|;
DECL|field|jjtoSpecial
specifier|static
specifier|final
name|long
index|[]
name|jjtoSpecial
init|=
block|{
literal|0x360L
block|,    }
decl_stmt|;
DECL|field|jjtoMore
specifier|static
specifier|final
name|long
index|[]
name|jjtoMore
init|=
block|{
literal|0x480L
block|,    }
decl_stmt|;
DECL|field|input_stream
specifier|protected
name|SimpleCharStream
name|input_stream
decl_stmt|;
DECL|field|jjrounds
specifier|private
specifier|final
name|int
index|[]
name|jjrounds
init|=
operator|new
name|int
index|[
literal|5
index|]
decl_stmt|;
DECL|field|jjstateSet
specifier|private
specifier|final
name|int
index|[]
name|jjstateSet
init|=
operator|new
name|int
index|[
literal|10
index|]
decl_stmt|;
DECL|field|image
name|StringBuffer
name|image
decl_stmt|;
DECL|field|jjimageLen
name|int
name|jjimageLen
decl_stmt|;
DECL|field|lengthOfMatch
name|int
name|lengthOfMatch
decl_stmt|;
DECL|field|curChar
specifier|protected
name|char
name|curChar
decl_stmt|;
DECL|method|RccTokenManager (SimpleCharStream stream)
specifier|public
name|RccTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
if|if
condition|(
name|SimpleCharStream
operator|.
name|staticFlag
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer."
argument_list|)
throw|;
name|input_stream
operator|=
name|stream
expr_stmt|;
block|}
DECL|method|RccTokenManager (SimpleCharStream stream, int lexState)
specifier|public
name|RccTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
DECL|method|ReInit (SimpleCharStream stream)
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
name|jjmatchedPos
operator|=
name|jjnewStateCnt
operator|=
literal|0
expr_stmt|;
name|curLexState
operator|=
name|defaultLexState
expr_stmt|;
name|input_stream
operator|=
name|stream
expr_stmt|;
name|ReInitRounds
argument_list|()
expr_stmt|;
block|}
DECL|method|ReInitRounds ()
specifier|private
specifier|final
name|void
name|ReInitRounds
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|jjround
operator|=
literal|0x80000001
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|5
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
name|jjrounds
index|[
name|i
index|]
operator|=
literal|0x80000000
expr_stmt|;
block|}
DECL|method|ReInit (SimpleCharStream stream, int lexState)
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
DECL|method|SwitchTo (int lexState)
specifier|public
name|void
name|SwitchTo
parameter_list|(
name|int
name|lexState
parameter_list|)
block|{
if|if
condition|(
name|lexState
operator|>=
literal|3
operator|||
name|lexState
operator|<
literal|0
condition|)
throw|throw
operator|new
name|TokenMgrError
argument_list|(
literal|"Error: Ignoring invalid lexical state : "
operator|+
name|lexState
operator|+
literal|". State unchanged."
argument_list|,
name|TokenMgrError
operator|.
name|INVALID_LEXICAL_STATE
argument_list|)
throw|;
else|else
name|curLexState
operator|=
name|lexState
expr_stmt|;
block|}
DECL|method|jjFillToken ()
specifier|protected
name|Token
name|jjFillToken
parameter_list|()
block|{
name|Token
name|t
init|=
name|Token
operator|.
name|newToken
argument_list|(
name|jjmatchedKind
argument_list|)
decl_stmt|;
name|t
operator|.
name|kind
operator|=
name|jjmatchedKind
expr_stmt|;
name|String
name|im
init|=
name|jjstrLiteralImages
index|[
name|jjmatchedKind
index|]
decl_stmt|;
name|t
operator|.
name|image
operator|=
operator|(
name|im
operator|==
literal|null
operator|)
condition|?
name|input_stream
operator|.
name|GetImage
argument_list|()
else|:
name|im
expr_stmt|;
name|t
operator|.
name|beginLine
operator|=
name|input_stream
operator|.
name|getBeginLine
argument_list|()
expr_stmt|;
name|t
operator|.
name|beginColumn
operator|=
name|input_stream
operator|.
name|getBeginColumn
argument_list|()
expr_stmt|;
name|t
operator|.
name|endLine
operator|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
expr_stmt|;
name|t
operator|.
name|endColumn
operator|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|field|curLexState
name|int
name|curLexState
init|=
literal|0
decl_stmt|;
DECL|field|defaultLexState
name|int
name|defaultLexState
init|=
literal|0
decl_stmt|;
DECL|field|jjnewStateCnt
name|int
name|jjnewStateCnt
decl_stmt|;
DECL|field|jjround
name|int
name|jjround
decl_stmt|;
DECL|field|jjmatchedPos
name|int
name|jjmatchedPos
decl_stmt|;
DECL|field|jjmatchedKind
name|int
name|jjmatchedKind
decl_stmt|;
DECL|method|getNextToken ()
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
name|int
name|kind
decl_stmt|;
name|Token
name|specialToken
init|=
literal|null
decl_stmt|;
name|Token
name|matchedToken
decl_stmt|;
name|int
name|curPos
init|=
literal|0
decl_stmt|;
name|EOFLoop
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|BeginToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjmatchedKind
operator|=
literal|0
expr_stmt|;
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
name|matchedToken
operator|.
name|specialToken
operator|=
name|specialToken
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
name|image
operator|=
literal|null
expr_stmt|;
name|jjimageLen
operator|=
literal|0
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
switch|switch
condition|(
name|curLexState
condition|)
block|{
case|case
literal|0
case|:
try|try
block|{
name|input_stream
operator|.
name|backup
argument_list|(
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|curChar
operator|<=
literal|32
operator|&&
operator|(
literal|0x100002600L
operator|&
operator|(
literal|1L
operator|<<
name|curChar
operator|)
operator|)
operator|!=
literal|0L
condition|)
name|curChar
operator|=
name|input_stream
operator|.
name|BeginToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{
continue|continue
name|EOFLoop
continue|;
block|}
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
name|jjmatchedPos
operator|=
literal|0
expr_stmt|;
name|curPos
operator|=
name|jjMoveStringLiteralDfa0_0
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
name|jjmatchedPos
operator|=
literal|0
expr_stmt|;
name|curPos
operator|=
name|jjMoveStringLiteralDfa0_1
argument_list|()
expr_stmt|;
if|if
condition|(
name|jjmatchedPos
operator|==
literal|0
operator|&&
name|jjmatchedKind
operator|>
literal|7
condition|)
block|{
name|jjmatchedKind
operator|=
literal|7
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
name|jjmatchedPos
operator|=
literal|0
expr_stmt|;
name|curPos
operator|=
name|jjMoveStringLiteralDfa0_2
argument_list|()
expr_stmt|;
if|if
condition|(
name|jjmatchedPos
operator|==
literal|0
operator|&&
name|jjmatchedKind
operator|>
literal|10
condition|)
block|{
name|jjmatchedKind
operator|=
literal|10
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|jjmatchedKind
operator|!=
literal|0x7fffffff
condition|)
block|{
if|if
condition|(
name|jjmatchedPos
operator|+
literal|1
operator|<
name|curPos
condition|)
name|input_stream
operator|.
name|backup
argument_list|(
name|curPos
operator|-
name|jjmatchedPos
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|jjtoToken
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
name|matchedToken
operator|.
name|specialToken
operator|=
name|specialToken
expr_stmt|;
if|if
condition|(
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
operator|!=
operator|-
literal|1
condition|)
name|curLexState
operator|=
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|jjtoSkip
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
operator|(
name|jjtoSpecial
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|specialToken
operator|==
literal|null
condition|)
name|specialToken
operator|=
name|matchedToken
expr_stmt|;
else|else
block|{
name|matchedToken
operator|.
name|specialToken
operator|=
name|specialToken
expr_stmt|;
name|specialToken
operator|=
operator|(
name|specialToken
operator|.
name|next
operator|=
name|matchedToken
operator|)
expr_stmt|;
block|}
name|SkipLexicalActions
argument_list|(
name|matchedToken
argument_list|)
expr_stmt|;
block|}
else|else
name|SkipLexicalActions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
operator|!=
operator|-
literal|1
condition|)
name|curLexState
operator|=
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
expr_stmt|;
continue|continue
name|EOFLoop
continue|;
block|}
name|jjimageLen
operator|+=
name|jjmatchedPos
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
operator|!=
operator|-
literal|1
condition|)
name|curLexState
operator|=
name|jjnewLexState
index|[
name|jjmatchedKind
index|]
expr_stmt|;
name|curPos
operator|=
literal|0
expr_stmt|;
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
continue|continue;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{ }
block|}
name|int
name|error_line
init|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
decl_stmt|;
name|int
name|error_column
init|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
decl_stmt|;
name|String
name|error_after
init|=
literal|null
decl_stmt|;
name|boolean
name|EOFSeen
init|=
literal|false
decl_stmt|;
try|try
block|{
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{
name|EOFSeen
operator|=
literal|true
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|==
literal|'\n'
operator|||
name|curChar
operator|==
literal|'\r'
condition|)
block|{
name|error_line
operator|++
expr_stmt|;
name|error_column
operator|=
literal|0
expr_stmt|;
block|}
else|else
name|error_column
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|EOFSeen
condition|)
block|{
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|TokenMgrError
argument_list|(
name|EOFSeen
argument_list|,
name|curLexState
argument_list|,
name|error_line
argument_list|,
name|error_column
argument_list|,
name|error_after
argument_list|,
name|curChar
argument_list|,
name|TokenMgrError
operator|.
name|LEXICAL_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|SkipLexicalActions (Token matchedToken)
name|void
name|SkipLexicalActions
parameter_list|(
name|Token
name|matchedToken
parameter_list|)
block|{
switch|switch
condition|(
name|jjmatchedKind
condition|)
block|{
default|default :
break|break;
block|}
block|}
block|}
end_class

end_unit

