begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.compiler.ant
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|compiler
operator|.
name|generated
operator|.
name|Rcc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|DirectoryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|FileSet
import|;
end_import

begin_comment
comment|/**  * Hadoop record compiler ant Task  *<p> This task takes the given record definition files and compiles them into  * java or c++  * files. It is then up to the user to compile the generated files.  *  *<p> The task requires the<code>file</code> or the nested fileset element to be  * specified. Optional attributes are<code>language</code> (set the output  * language, default is "java"),  *<code>destdir</code> (name of the destination directory for generated java/c++  * code, default is ".") and<code>failonerror</code> (specifies error handling  * behavior. default is true).  *<p><h4>Usage</h4>  *<pre>  *&lt;recordcc  *       destdir="${basedir}/gensrc"  *       language="java"&gt;  *&lt;fileset include="**\/*.jr" /&gt;  *&lt;/recordcc&gt;  *</pre>  *   * @deprecated Replaced by<a href="http://hadoop.apache.org/avro/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|RccTask
specifier|public
class|class
name|RccTask
extends|extends
name|Task
block|{
DECL|field|language
specifier|private
name|String
name|language
init|=
literal|"java"
decl_stmt|;
DECL|field|src
specifier|private
name|File
name|src
decl_stmt|;
DECL|field|dest
specifier|private
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
DECL|field|filesets
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|FileSet
argument_list|>
name|filesets
init|=
operator|new
name|ArrayList
argument_list|<
name|FileSet
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|failOnError
specifier|private
name|boolean
name|failOnError
init|=
literal|true
decl_stmt|;
comment|/** Creates a new instance of RccTask */
DECL|method|RccTask ()
specifier|public
name|RccTask
parameter_list|()
block|{   }
comment|/**    * Sets the output language option    * @param language "java"/"c++"    */
DECL|method|setLanguage (String language)
specifier|public
name|void
name|setLanguage
parameter_list|(
name|String
name|language
parameter_list|)
block|{
name|this
operator|.
name|language
operator|=
name|language
expr_stmt|;
block|}
comment|/**    * Sets the record definition file attribute    * @param file record definition file    */
DECL|method|setFile (File file)
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|src
operator|=
name|file
expr_stmt|;
block|}
comment|/**    * Given multiple files (via fileset), set the error handling behavior    * @param flag true will throw build exception in case of failure (default)    */
DECL|method|setFailonerror (boolean flag)
specifier|public
name|void
name|setFailonerror
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|failOnError
operator|=
name|flag
expr_stmt|;
block|}
comment|/**    * Sets directory where output files will be generated    * @param dir output directory    */
DECL|method|setDestdir (File dir)
specifier|public
name|void
name|setDestdir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dest
operator|=
name|dir
expr_stmt|;
block|}
comment|/**    * Adds a fileset that can consist of one or more files    * @param set Set of record definition files    */
DECL|method|addFileset (FileSet set)
specifier|public
name|void
name|addFileset
parameter_list|(
name|FileSet
name|set
parameter_list|)
block|{
name|filesets
operator|.
name|add
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invoke the Hadoop record compiler on each record definition file    */
DECL|method|execute ()
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|src
operator|==
literal|null
operator|&&
name|filesets
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"There must be a file attribute or a fileset child element"
argument_list|)
throw|;
block|}
if|if
condition|(
name|src
operator|!=
literal|null
condition|)
block|{
name|doCompile
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
name|Project
name|myProject
init|=
name|getProject
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filesets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileSet
name|fs
init|=
name|filesets
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DirectoryScanner
name|ds
init|=
name|fs
operator|.
name|getDirectoryScanner
argument_list|(
name|myProject
argument_list|)
decl_stmt|;
name|File
name|dir
init|=
name|fs
operator|.
name|getDir
argument_list|(
name|myProject
argument_list|)
decl_stmt|;
name|String
index|[]
name|srcs
init|=
name|ds
operator|.
name|getIncludedFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|srcs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|doCompile
argument_list|(
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|srcs
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doCompile (File file)
specifier|private
name|void
name|doCompile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|BuildException
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"--language"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|this
operator|.
name|language
expr_stmt|;
name|args
index|[
literal|2
index|]
operator|=
literal|"--destdir"
expr_stmt|;
name|args
index|[
literal|3
index|]
operator|=
name|this
operator|.
name|dest
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|args
index|[
literal|4
index|]
operator|=
name|file
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|int
name|retVal
init|=
name|Rcc
operator|.
name|driver
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|!=
literal|0
operator|&&
name|failOnError
condition|)
block|{
throw|throw
operator|new
name|BuildException
argument_list|(
literal|"Hadoop record compiler returned error code "
operator|+
name|retVal
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

