begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record.meta
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|meta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|RecordInput
import|;
end_import

begin_comment
comment|/**  * Various utility functions for Hadooop record I/O platform.  */
end_comment

begin_class
DECL|class|Utils
specifier|public
class|class
name|Utils
block|{
comment|/** Cannot create a new instance of Utils */
DECL|method|Utils ()
specifier|private
name|Utils
parameter_list|()
block|{   }
comment|/**    * read/skip bytes from stream based on a type    */
DECL|method|skip (RecordInput rin, String tag, TypeID typeID)
specifier|public
specifier|static
name|void
name|skip
parameter_list|(
name|RecordInput
name|rin
parameter_list|,
name|String
name|tag
parameter_list|,
name|TypeID
name|typeID
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|typeID
operator|.
name|typeVal
condition|)
block|{
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|BOOL
case|:
name|rin
operator|.
name|readBool
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|BUFFER
case|:
name|rin
operator|.
name|readBuffer
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|BYTE
case|:
name|rin
operator|.
name|readByte
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|DOUBLE
case|:
name|rin
operator|.
name|readDouble
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|FLOAT
case|:
name|rin
operator|.
name|readFloat
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|INT
case|:
name|rin
operator|.
name|readInt
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|LONG
case|:
name|rin
operator|.
name|readLong
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|MAP
case|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|Index
name|midx1
init|=
name|rin
operator|.
name|startMap
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|MapTypeID
name|mtID
init|=
operator|(
name|MapTypeID
operator|)
name|typeID
decl_stmt|;
for|for
control|(
init|;
operator|!
name|midx1
operator|.
name|done
argument_list|()
condition|;
name|midx1
operator|.
name|incr
argument_list|()
control|)
block|{
name|skip
argument_list|(
name|rin
argument_list|,
name|tag
argument_list|,
name|mtID
operator|.
name|getKeyTypeID
argument_list|()
argument_list|)
expr_stmt|;
name|skip
argument_list|(
name|rin
argument_list|,
name|tag
argument_list|,
name|mtID
operator|.
name|getValueTypeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rin
operator|.
name|endMap
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|STRING
case|:
name|rin
operator|.
name|readString
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|STRUCT
case|:
name|rin
operator|.
name|startRecord
argument_list|(
name|tag
argument_list|)
expr_stmt|;
comment|// read past each field in the struct
name|StructTypeID
name|stID
init|=
operator|(
name|StructTypeID
operator|)
name|typeID
decl_stmt|;
name|Iterator
argument_list|<
name|FieldTypeInfo
argument_list|>
name|it
init|=
name|stID
operator|.
name|getFieldTypeInfos
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|FieldTypeInfo
name|tInfo
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|skip
argument_list|(
name|rin
argument_list|,
name|tag
argument_list|,
name|tInfo
operator|.
name|getTypeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rin
operator|.
name|endRecord
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
case|case
name|TypeID
operator|.
name|RIOType
operator|.
name|VECTOR
case|:
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|Index
name|vidx1
init|=
name|rin
operator|.
name|startVector
argument_list|(
name|tag
argument_list|)
decl_stmt|;
name|VectorTypeID
name|vtID
init|=
operator|(
name|VectorTypeID
operator|)
name|typeID
decl_stmt|;
for|for
control|(
init|;
operator|!
name|vidx1
operator|.
name|done
argument_list|()
condition|;
name|vidx1
operator|.
name|incr
argument_list|()
control|)
block|{
name|skip
argument_list|(
name|rin
argument_list|,
name|tag
argument_list|,
name|vtID
operator|.
name|getElementTypeID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rin
operator|.
name|endVector
argument_list|(
name|tag
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// shouldn't be here
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown typeID when skipping bytes"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

