begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/** A Writable wrapper for EnumSet. */
end_comment

begin_class
DECL|class|EnumSetWritable
specifier|public
class|class
name|EnumSetWritable
parameter_list|<
name|E
extends|extends
name|Enum
parameter_list|<
name|E
parameter_list|>
parameter_list|>
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|value
specifier|private
name|EnumSet
argument_list|<
name|E
argument_list|>
name|value
decl_stmt|;
DECL|field|elementType
specifier|private
name|Class
argument_list|<
name|E
argument_list|>
name|elementType
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|EnumSetWritable ()
name|EnumSetWritable
parameter_list|()
block|{   }
comment|/**    * Construct a new EnumSetWritable. If the<tt>value</tt> argument is null or    * its size is zero, the<tt>elementType</tt> argument must not be null. If    * the argument<tt>value</tt>'s size is bigger than zero, the argument    *<tt>elementType</tt> is not be used.    *     * @param value    * @param elementType    */
DECL|method|EnumSetWritable (EnumSet<E> value, Class<E> elementType)
specifier|public
name|EnumSetWritable
parameter_list|(
name|EnumSet
argument_list|<
name|E
argument_list|>
name|value
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|elementType
parameter_list|)
block|{
name|set
argument_list|(
name|value
argument_list|,
name|elementType
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a new EnumSetWritable. Argument<tt>value</tt> should not be null    * or empty.    *     * @param value    */
DECL|method|EnumSetWritable (EnumSet<E> value)
specifier|public
name|EnumSetWritable
parameter_list|(
name|EnumSet
argument_list|<
name|E
argument_list|>
name|value
parameter_list|)
block|{
name|this
argument_list|(
name|value
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * reset the EnumSetWritable with specified    *<tt>value</value> and<tt>elementType</tt>. If the<tt>value</tt> argument    * is null or its size is zero, the<tt>elementType</tt> argument must not be    * null. If the argument<tt>value</tt>'s size is bigger than zero, the    * argument<tt>elementType</tt> is not be used.    *     * @param value    * @param elementType    */
DECL|method|set (EnumSet<E> value, Class<E> elementType)
specifier|public
name|void
name|set
parameter_list|(
name|EnumSet
argument_list|<
name|E
argument_list|>
name|value
parameter_list|,
name|Class
argument_list|<
name|E
argument_list|>
name|elementType
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|this
operator|.
name|elementType
operator|==
literal|null
operator|&&
name|elementType
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The EnumSet argument is null, or is an empty set but with no elementType provided."
argument_list|)
throw|;
block|}
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Iterator
argument_list|<
name|E
argument_list|>
name|iterator
init|=
name|value
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|this
operator|.
name|elementType
operator|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getDeclaringClass
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|elementType
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|elementType
operator|=
name|elementType
expr_stmt|;
block|}
block|}
comment|/** Return the value of this EnumSetWritable. */
DECL|method|get ()
specifier|public
name|EnumSet
argument_list|<
name|E
argument_list|>
name|get
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|==
operator|-
literal|1
condition|)
name|this
operator|.
name|value
operator|=
literal|null
expr_stmt|;
elseif|else
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|elementType
operator|=
operator|(
name|Class
argument_list|<
name|E
argument_list|>
operator|)
name|ObjectWritable
operator|.
name|loadClass
argument_list|(
name|conf
argument_list|,
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|this
operator|.
name|elementType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|E
name|first
init|=
operator|(
name|E
operator|)
name|ObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|this
operator|.
name|value
operator|=
operator|(
name|EnumSet
argument_list|<
name|E
argument_list|>
operator|)
name|EnumSet
operator|.
name|of
argument_list|(
name|first
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
name|this
operator|.
name|value
operator|.
name|add
argument_list|(
operator|(
name|E
operator|)
name|ObjectWritable
operator|.
name|readObject
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|value
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|elementType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
index|[]
name|array
init|=
name|this
operator|.
name|value
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|array
operator|.
name|length
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|elementType
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Unable to serialize empty EnumSet with no element type provided."
argument_list|)
throw|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|this
operator|.
name|elementType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ObjectWritable
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|array
index|[
name|i
index|]
argument_list|,
name|array
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Returns true if<code>o</code> is an EnumSetWritable with the same value,    * or both are null.    */
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null argument passed in equal()."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|EnumSetWritable
operator|)
condition|)
return|return
literal|false
return|;
name|EnumSetWritable
argument_list|<
name|?
argument_list|>
name|other
init|=
operator|(
name|EnumSetWritable
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|==
name|o
operator|||
operator|(
name|this
operator|.
name|value
operator|==
name|other
operator|.
name|value
operator|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|this
operator|.
name|value
operator|==
literal|null
condition|)
comment|// other.value must not be null if we reach here
return|return
literal|false
return|;
return|return
name|this
operator|.
name|value
operator|.
name|equals
argument_list|(
name|other
operator|.
name|value
argument_list|)
return|;
block|}
comment|/**    * Returns the class of all the elements of the underlying EnumSetWriable. It    * may return null.    *     * @return the element class    */
DECL|method|getElementType ()
specifier|public
name|Class
argument_list|<
name|E
argument_list|>
name|getElementType
parameter_list|()
block|{
return|return
name|elementType
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|0
return|;
return|return
operator|(
name|int
operator|)
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|"(null)"
return|;
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
static|static
block|{
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|EnumSetWritable
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|EnumSetWritable
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

