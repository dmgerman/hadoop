begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_comment
comment|/** A polymorphic Writable that writes an instance with it's class name.  * Handles arrays, strings and primitive types without a Writable wrapper.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|ObjectWritable
specifier|public
class|class
name|ObjectWritable
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|declaredClass
specifier|private
name|Class
name|declaredClass
decl_stmt|;
DECL|field|instance
specifier|private
name|Object
name|instance
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|ObjectWritable ()
specifier|public
name|ObjectWritable
parameter_list|()
block|{}
DECL|method|ObjectWritable (Object instance)
specifier|public
name|ObjectWritable
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|set
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
DECL|method|ObjectWritable (Class declaredClass, Object instance)
specifier|public
name|ObjectWritable
parameter_list|(
name|Class
name|declaredClass
parameter_list|,
name|Object
name|instance
parameter_list|)
block|{
name|this
operator|.
name|declaredClass
operator|=
name|declaredClass
expr_stmt|;
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
comment|/** Return the instance, or null if none. */
DECL|method|get ()
specifier|public
name|Object
name|get
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
comment|/** Return the class this is meant to be. */
DECL|method|getDeclaredClass ()
specifier|public
name|Class
name|getDeclaredClass
parameter_list|()
block|{
return|return
name|declaredClass
return|;
block|}
comment|/** Reset the instance. */
DECL|method|set (Object instance)
specifier|public
name|void
name|set
parameter_list|(
name|Object
name|instance
parameter_list|)
block|{
name|this
operator|.
name|declaredClass
operator|=
name|instance
operator|.
name|getClass
argument_list|()
expr_stmt|;
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OW[class="
operator|+
name|declaredClass
operator|+
literal|",value="
operator|+
name|instance
operator|+
literal|"]"
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|readObject
argument_list|(
name|in
argument_list|,
name|this
argument_list|,
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|writeObject
argument_list|(
name|out
argument_list|,
name|instance
argument_list|,
name|declaredClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|field|PRIMITIVE_NAMES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|PRIMITIVE_NAMES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"char"
argument_list|,
name|Character
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|)
expr_stmt|;
name|PRIMITIVE_NAMES
operator|.
name|put
argument_list|(
literal|"void"
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|)
expr_stmt|;
block|}
DECL|class|NullInstance
specifier|private
specifier|static
class|class
name|NullInstance
extends|extends
name|Configured
implements|implements
name|Writable
block|{
DECL|field|declaredClass
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|declaredClass
decl_stmt|;
DECL|method|NullInstance ()
specifier|public
name|NullInstance
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|NullInstance (Class declaredClass, Configuration conf)
specifier|public
name|NullInstance
parameter_list|(
name|Class
name|declaredClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|declaredClass
operator|=
name|declaredClass
expr_stmt|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|declaredClass
operator|=
name|PRIMITIVE_NAMES
operator|.
name|get
argument_list|(
name|className
argument_list|)
expr_stmt|;
if|if
condition|(
name|declaredClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|declaredClass
operator|=
name|getConf
argument_list|()
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|UTF8
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|declaredClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Write a {@link Writable}, {@link String}, primitive type, or an array of    * the preceding. */
DECL|method|writeObject (DataOutput out, Object instance, Class declaredClass, Configuration conf)
specifier|public
specifier|static
name|void
name|writeObject
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|Object
name|instance
parameter_list|,
name|Class
name|declaredClass
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
comment|// null
name|instance
operator|=
operator|new
name|NullInstance
argument_list|(
name|declaredClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|declaredClass
operator|=
name|Writable
operator|.
name|class
expr_stmt|;
block|}
name|UTF8
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|declaredClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// always write declared
if|if
condition|(
name|declaredClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// array
name|int
name|length
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|writeObject
argument_list|(
name|out
argument_list|,
name|Array
operator|.
name|get
argument_list|(
name|instance
argument_list|,
name|i
argument_list|)
argument_list|,
name|declaredClass
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|String
operator|.
name|class
condition|)
block|{
comment|// String
name|UTF8
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
operator|(
name|String
operator|)
name|instance
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
comment|// primitive type
if|if
condition|(
name|declaredClass
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
block|{
comment|// boolean
name|out
operator|.
name|writeBoolean
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|instance
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Character
operator|.
name|TYPE
condition|)
block|{
comment|// char
name|out
operator|.
name|writeChar
argument_list|(
operator|(
operator|(
name|Character
operator|)
name|instance
operator|)
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Byte
operator|.
name|TYPE
condition|)
block|{
comment|// byte
name|out
operator|.
name|writeByte
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|instance
operator|)
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Short
operator|.
name|TYPE
condition|)
block|{
comment|// short
name|out
operator|.
name|writeShort
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|instance
operator|)
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
comment|// int
name|out
operator|.
name|writeInt
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|instance
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Long
operator|.
name|TYPE
condition|)
block|{
comment|// long
name|out
operator|.
name|writeLong
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|instance
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Float
operator|.
name|TYPE
condition|)
block|{
comment|// float
name|out
operator|.
name|writeFloat
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|instance
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
comment|// double
name|out
operator|.
name|writeDouble
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|instance
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
comment|// void
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a primitive: "
operator|+
name|declaredClass
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|.
name|isEnum
argument_list|()
condition|)
block|{
comment|// enum
name|UTF8
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
operator|(
operator|(
name|Enum
operator|)
name|instance
operator|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Writable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|declaredClass
argument_list|)
condition|)
block|{
comment|// Writable
name|UTF8
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Writable
operator|)
name|instance
operator|)
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't write: "
operator|+
name|instance
operator|+
literal|" as "
operator|+
name|declaredClass
argument_list|)
throw|;
block|}
block|}
comment|/** Read a {@link Writable}, {@link String}, primitive type, or an array of    * the preceding. */
DECL|method|readObject (DataInput in, Configuration conf)
specifier|public
specifier|static
name|Object
name|readObject
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readObject
argument_list|(
name|in
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Read a {@link Writable}, {@link String}, primitive type, or an array of    * the preceding. */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|readObject (DataInput in, ObjectWritable objectWritable, Configuration conf)
specifier|public
specifier|static
name|Object
name|readObject
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|ObjectWritable
name|objectWritable
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|className
init|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|declaredClass
init|=
name|PRIMITIVE_NAMES
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|declaredClass
operator|==
literal|null
condition|)
block|{
name|declaredClass
operator|=
name|loadClass
argument_list|(
name|conf
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
name|Object
name|instance
decl_stmt|;
if|if
condition|(
name|declaredClass
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
comment|// primitive types
if|if
condition|(
name|declaredClass
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
block|{
comment|// boolean
name|instance
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Character
operator|.
name|TYPE
condition|)
block|{
comment|// char
name|instance
operator|=
name|Character
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readChar
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Byte
operator|.
name|TYPE
condition|)
block|{
comment|// byte
name|instance
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Short
operator|.
name|TYPE
condition|)
block|{
comment|// short
name|instance
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Integer
operator|.
name|TYPE
condition|)
block|{
comment|// int
name|instance
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Long
operator|.
name|TYPE
condition|)
block|{
comment|// long
name|instance
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Float
operator|.
name|TYPE
condition|)
block|{
comment|// float
name|instance
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Double
operator|.
name|TYPE
condition|)
block|{
comment|// double
name|instance
operator|=
name|Double
operator|.
name|valueOf
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
comment|// void
name|instance
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a primitive: "
operator|+
name|declaredClass
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|// array
name|int
name|length
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|instance
operator|=
name|Array
operator|.
name|newInstance
argument_list|(
name|declaredClass
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Array
operator|.
name|set
argument_list|(
name|instance
argument_list|,
name|i
argument_list|,
name|readObject
argument_list|(
name|in
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|==
name|String
operator|.
name|class
condition|)
block|{
comment|// String
name|instance
operator|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|declaredClass
operator|.
name|isEnum
argument_list|()
condition|)
block|{
comment|// enum
name|instance
operator|=
name|Enum
operator|.
name|valueOf
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
operator|)
name|declaredClass
argument_list|,
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Writable
name|Class
name|instanceClass
init|=
literal|null
decl_stmt|;
name|String
name|str
init|=
name|UTF8
operator|.
name|readString
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|instanceClass
operator|=
name|loadClass
argument_list|(
name|conf
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|Writable
name|writable
init|=
name|WritableFactories
operator|.
name|newInstance
argument_list|(
name|instanceClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|writable
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|instance
operator|=
name|writable
expr_stmt|;
if|if
condition|(
name|instanceClass
operator|==
name|NullInstance
operator|.
name|class
condition|)
block|{
comment|// null
name|declaredClass
operator|=
operator|(
operator|(
name|NullInstance
operator|)
name|instance
operator|)
operator|.
name|declaredClass
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|objectWritable
operator|!=
literal|null
condition|)
block|{
comment|// store values
name|objectWritable
operator|.
name|declaredClass
operator|=
name|declaredClass
expr_stmt|;
name|objectWritable
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**    * Find and load the class with given name<tt>className</tt> by first finding    * it in the specified<tt>conf</tt>. If the specified<tt>conf</tt> is null,    * try load it directly.    */
DECL|method|loadClass (Configuration conf, String className)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|declaredClass
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
name|declaredClass
operator|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
expr_stmt|;
else|else
name|declaredClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"readObject can't find class "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|declaredClass
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
block|}
end_class

end_unit

