begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * A wrapper for Writable instances.  *<p>  * When two sequence files, which have same Key type but different Value  * types, are mapped out to reduce, multiple Value types is not allowed.  * In this case, this class can help you wrap instances with different types.  *</p>  *   *<p>  * Compared with<code>ObjectWritable</code>, this class is much more effective,  * because<code>ObjectWritable</code> will append the class declaration as a String   * into the output file in every Key-Value pair.  *</p>  *   *<p>  * Generic Writable implements {@link Configurable} interface, so that it will be   * configured by the framework. The configuration is passed to the wrapped objects  * implementing {@link Configurable} interface<i>before deserialization</i>.   *</p>  *   * how to use it:<br>  * 1. Write your own class, such as GenericObject, which extends GenericWritable.<br>   * 2. Implements the abstract method<code>getTypes()</code>, defines   *    the classes which will be wrapped in GenericObject in application.  *    Attention: this classes defined in<code>getTypes()</code> method, must  *    implement<code>Writable</code> interface.  *<br><br>  *   * The code looks like this:  *<blockquote><pre>  * public class GenericObject extends GenericWritable {  *   *   private static Class[] CLASSES = {  *               ClassType1.class,   *               ClassType2.class,  *               ClassType3.class,  *               };  *  *   protected Class[] getTypes() {  *       return CLASSES;  *   }  *  * }  *</pre></blockquote>  *   * @since Nov 8, 2006  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|GenericWritable
specifier|public
specifier|abstract
class|class
name|GenericWritable
implements|implements
name|Writable
implements|,
name|Configurable
block|{
DECL|field|NOT_SET
specifier|private
specifier|static
specifier|final
name|byte
name|NOT_SET
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|type
specifier|private
name|byte
name|type
init|=
name|NOT_SET
decl_stmt|;
DECL|field|instance
specifier|private
name|Writable
name|instance
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
comment|/**    * Set the instance that is wrapped.    *     * @param obj    */
DECL|method|set (Writable obj)
specifier|public
name|void
name|set
parameter_list|(
name|Writable
name|obj
parameter_list|)
block|{
name|instance
operator|=
name|obj
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|instanceClazz
init|=
name|instance
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
index|[]
name|clazzes
init|=
name|getTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clazzes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|clazz
init|=
name|clazzes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|instanceClazz
argument_list|)
condition|)
block|{
name|type
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
return|return;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The type of instance is: "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|+
literal|", which is NOT registered."
argument_list|)
throw|;
block|}
comment|/**    * Return the wrapped instance.    */
DECL|method|get ()
specifier|public
name|Writable
name|get
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"GW["
operator|+
operator|(
name|instance
operator|!=
literal|null
condition|?
operator|(
literal|"class="
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|",value="
operator|+
name|instance
operator|.
name|toString
argument_list|()
operator|)
else|:
literal|"(null)"
operator|)
operator|+
literal|"]"
return|;
block|}
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|type
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|clazz
init|=
name|getTypes
argument_list|()
index|[
name|type
operator|&
literal|0xff
index|]
decl_stmt|;
try|try
block|{
name|instance
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot initialize the class: "
operator|+
name|clazz
argument_list|)
throw|;
block|}
name|instance
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|type
operator|==
name|NOT_SET
operator|||
name|instance
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The GenericWritable has NOT been set correctly. type="
operator|+
name|type
operator|+
literal|", instance="
operator|+
name|instance
argument_list|)
throw|;
name|out
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|instance
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return all classes that may be wrapped.  Subclasses should implement this    * to return a constant array of classes.    */
DECL|method|getTypes ()
specifier|abstract
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
index|[]
name|getTypes
parameter_list|()
function_decl|;
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
block|}
end_class

end_unit

