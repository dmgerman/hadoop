begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_comment
comment|/**  * Adaptor class to wrap byte-array backed objects (including java byte array)  * as RawComparable objects.  */
end_comment

begin_class
DECL|class|ByteArray
specifier|public
specifier|final
class|class
name|ByteArray
implements|implements
name|RawComparable
block|{
DECL|field|buffer
specifier|private
specifier|final
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|offset
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
DECL|field|len
specifier|private
specifier|final
name|int
name|len
decl_stmt|;
comment|/**    * Constructing a ByteArray from a {@link BytesWritable}.    *     * @param other    */
DECL|method|ByteArray (BytesWritable other)
specifier|public
name|ByteArray
parameter_list|(
name|BytesWritable
name|other
parameter_list|)
block|{
name|this
argument_list|(
name|other
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|other
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wrap a whole byte array as a RawComparable.    *     * @param buffer    *          the byte array buffer.    */
DECL|method|ByteArray (byte[] buffer)
specifier|public
name|ByteArray
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
block|{
name|this
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wrap a partial byte array as a RawComparable.    *     * @param buffer    *          the byte array buffer.    * @param offset    *          the starting offset    * @param len    *          the length of the consecutive bytes to be wrapped.    */
DECL|method|ByteArray (byte[] buffer, int offset, int len)
specifier|public
name|ByteArray
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
operator|(
name|offset
operator||
name|len
operator||
operator|(
name|buffer
operator|.
name|length
operator|-
name|offset
operator|-
name|len
operator|)
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
block|}
comment|/**    * @return the underlying buffer.    */
annotation|@
name|Override
DECL|method|buffer ()
specifier|public
name|byte
index|[]
name|buffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
comment|/**    * @return the offset in the buffer.    */
annotation|@
name|Override
DECL|method|offset ()
specifier|public
name|int
name|offset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
comment|/**    * @return the size of the byte array.    */
annotation|@
name|Override
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|len
return|;
block|}
block|}
end_class

end_unit

