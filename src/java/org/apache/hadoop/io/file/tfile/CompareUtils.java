begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_class
DECL|class|CompareUtils
class|class
name|CompareUtils
block|{
comment|/**    * Prevent the instantiation of class.    */
DECL|method|CompareUtils ()
specifier|private
name|CompareUtils
parameter_list|()
block|{
comment|// nothing
block|}
comment|/**    * A comparator to compare anything that implements {@link RawComparable}    * using a customized comparator.    */
DECL|class|BytesComparator
specifier|public
specifier|static
specifier|final
class|class
name|BytesComparator
implements|implements
name|Comparator
argument_list|<
name|RawComparable
argument_list|>
block|{
DECL|field|cmp
specifier|private
name|RawComparator
argument_list|<
name|Object
argument_list|>
name|cmp
decl_stmt|;
DECL|method|BytesComparator (RawComparator<Object> cmp)
specifier|public
name|BytesComparator
parameter_list|(
name|RawComparator
argument_list|<
name|Object
argument_list|>
name|cmp
parameter_list|)
block|{
name|this
operator|.
name|cmp
operator|=
name|cmp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare (RawComparable o1, RawComparable o2)
specifier|public
name|int
name|compare
parameter_list|(
name|RawComparable
name|o1
parameter_list|,
name|RawComparable
name|o2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|o1
operator|.
name|buffer
argument_list|()
argument_list|,
name|o1
operator|.
name|offset
argument_list|()
argument_list|,
name|o1
operator|.
name|size
argument_list|()
argument_list|,
name|o2
operator|.
name|buffer
argument_list|()
argument_list|,
name|o2
operator|.
name|offset
argument_list|()
argument_list|,
name|o2
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
DECL|method|compare (byte[] a, int off1, int len1, byte[] b, int off2, int len2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|a
parameter_list|,
name|int
name|off1
parameter_list|,
name|int
name|len1
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off2
parameter_list|,
name|int
name|len2
parameter_list|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|a
argument_list|,
name|off1
argument_list|,
name|len1
argument_list|,
name|b
argument_list|,
name|off2
argument_list|,
name|len2
argument_list|)
return|;
block|}
block|}
comment|/**    * Interface for all objects that has a single integer magnitude.    */
DECL|interface|Scalar
specifier|static
interface|interface
name|Scalar
block|{
DECL|method|magnitude ()
name|long
name|magnitude
parameter_list|()
function_decl|;
block|}
DECL|class|ScalarLong
specifier|static
specifier|final
class|class
name|ScalarLong
implements|implements
name|Scalar
block|{
DECL|field|magnitude
specifier|private
name|long
name|magnitude
decl_stmt|;
DECL|method|ScalarLong (long m)
specifier|public
name|ScalarLong
parameter_list|(
name|long
name|m
parameter_list|)
block|{
name|magnitude
operator|=
name|m
expr_stmt|;
block|}
DECL|method|magnitude ()
specifier|public
name|long
name|magnitude
parameter_list|()
block|{
return|return
name|magnitude
return|;
block|}
block|}
DECL|class|ScalarComparator
specifier|public
specifier|static
specifier|final
class|class
name|ScalarComparator
implements|implements
name|Comparator
argument_list|<
name|Scalar
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (Scalar o1, Scalar o2)
specifier|public
name|int
name|compare
parameter_list|(
name|Scalar
name|o1
parameter_list|,
name|Scalar
name|o2
parameter_list|)
block|{
name|long
name|diff
init|=
name|o1
operator|.
name|magnitude
argument_list|()
operator|-
name|o2
operator|.
name|magnitude
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|diff
operator|>
literal|0
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
block|}
DECL|class|MemcmpRawComparator
specifier|public
specifier|static
specifier|final
class|class
name|MemcmpRawComparator
implements|implements
name|RawComparator
argument_list|<
name|Object
argument_list|>
block|{
annotation|@
name|Override
DECL|method|compare (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compare (Object o1, Object o2)
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Object comparison not supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

