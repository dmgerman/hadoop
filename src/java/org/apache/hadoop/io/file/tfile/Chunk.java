begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.file.tfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|file
operator|.
name|tfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_comment
comment|/**  * Several related classes to support chunk-encoded sub-streams on top of a  * regular stream.  */
end_comment

begin_class
DECL|class|Chunk
specifier|final
class|class
name|Chunk
block|{
comment|/**    * Prevent the instantiation of class.    */
DECL|method|Chunk ()
specifier|private
name|Chunk
parameter_list|()
block|{
comment|// nothing
block|}
comment|/**    * Decoding a chain of chunks encoded through ChunkEncoder or    * SingleChunkEncoder.    */
DECL|class|ChunkDecoder
specifier|static
specifier|public
class|class
name|ChunkDecoder
extends|extends
name|InputStream
block|{
DECL|field|in
specifier|private
name|DataInputStream
name|in
init|=
literal|null
decl_stmt|;
DECL|field|lastChunk
specifier|private
name|boolean
name|lastChunk
decl_stmt|;
DECL|field|remain
specifier|private
name|int
name|remain
init|=
literal|0
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|ChunkDecoder ()
specifier|public
name|ChunkDecoder
parameter_list|()
block|{
name|lastChunk
operator|=
literal|true
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|reset (DataInputStream downStream)
specifier|public
name|void
name|reset
parameter_list|(
name|DataInputStream
name|downStream
parameter_list|)
block|{
comment|// no need to wind forward the old input.
name|in
operator|=
name|downStream
expr_stmt|;
name|lastChunk
operator|=
literal|false
expr_stmt|;
name|remain
operator|=
literal|0
expr_stmt|;
name|closed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Constructor      *       * @param in      *          The source input stream which contains chunk-encoded data      *          stream.      */
DECL|method|ChunkDecoder (DataInputStream in)
specifier|public
name|ChunkDecoder
parameter_list|(
name|DataInputStream
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|lastChunk
operator|=
literal|false
expr_stmt|;
name|closed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Have we reached the last chunk.      *       * @return true if we have reached the last chunk.      * @throws java.io.IOException      */
DECL|method|isLastChunk ()
specifier|public
name|boolean
name|isLastChunk
parameter_list|()
throws|throws
name|IOException
block|{
name|checkEOF
argument_list|()
expr_stmt|;
return|return
name|lastChunk
return|;
block|}
comment|/**      * How many bytes remain in the current chunk?      *       * @return remaining bytes left in the current chunk.      * @throws java.io.IOException      */
DECL|method|getRemain ()
specifier|public
name|int
name|getRemain
parameter_list|()
throws|throws
name|IOException
block|{
name|checkEOF
argument_list|()
expr_stmt|;
return|return
name|remain
return|;
block|}
comment|/**      * Reading the length of next chunk.      *       * @throws java.io.IOException      *           when no more data is available.      */
DECL|method|readLength ()
specifier|private
name|void
name|readLength
parameter_list|()
throws|throws
name|IOException
block|{
name|remain
operator|=
name|Utils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|remain
operator|>=
literal|0
condition|)
block|{
name|lastChunk
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|remain
operator|=
operator|-
name|remain
expr_stmt|;
block|}
block|}
comment|/**      * Check whether we reach the end of the stream.      *       * @return false if the chunk encoded stream has more data to read (in which      *         case available() will be greater than 0); true otherwise.      * @throws java.io.IOException      *           on I/O errors.      */
DECL|method|checkEOF ()
specifier|private
name|boolean
name|checkEOF
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
return|return
literal|true
return|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|remain
operator|>
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|lastChunk
condition|)
return|return
literal|true
return|;
name|readLength
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|/*      * This method never blocks the caller. Returning 0 does not mean we reach      * the end of the stream.      */
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|remain
return|;
block|}
annotation|@
name|Override
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkEOF
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|ret
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupted chunk encoding stream"
argument_list|)
throw|;
operator|--
name|remain
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|off
operator||
name|len
operator||
operator|(
name|off
operator|+
name|len
operator|)
operator||
operator|(
name|b
operator|.
name|length
operator|-
operator|(
name|off
operator|+
name|len
operator|)
operator|)
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|checkEOF
argument_list|()
condition|)
block|{
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|remain
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|int
name|ret
init|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupted chunk encoding stream"
argument_list|)
throw|;
name|remain
operator|-=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|checkEOF
argument_list|()
condition|)
block|{
name|long
name|ret
init|=
name|in
operator|.
name|skip
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|remain
argument_list|,
name|n
argument_list|)
argument_list|)
decl_stmt|;
name|remain
operator|-=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isClosed ()
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|closed
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|==
literal|false
condition|)
block|{
try|try
block|{
while|while
condition|(
operator|!
name|checkEOF
argument_list|()
condition|)
block|{
name|skip
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Chunk Encoder. Encoding the output data into a chain of chunks in the    * following sequences: -len1, byte[len1], -len2, byte[len2], ... len_n,    * byte[len_n]. Where len1, len2, ..., len_n are the lengths of the data    * chunks. Non-terminal chunks have their lengths negated. Non-terminal chunks    * cannot have length 0. All lengths are in the range of 0 to    * Integer.MAX_VALUE and are encoded in Utils.VInt format.    */
DECL|class|ChunkEncoder
specifier|static
specifier|public
class|class
name|ChunkEncoder
extends|extends
name|OutputStream
block|{
comment|/**      * The data output stream it connects to.      */
DECL|field|out
specifier|private
name|DataOutputStream
name|out
decl_stmt|;
comment|/**      * The internal buffer that is only used when we do not know the advertised      * size.      */
DECL|field|buf
specifier|private
name|byte
name|buf
index|[]
decl_stmt|;
comment|/**      * The number of valid bytes in the buffer. This value is always in the      * range<tt>0</tt> through<tt>buf.length</tt>; elements<tt>buf[0]</tt>      * through<tt>buf[count-1]</tt> contain valid byte data.      */
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
comment|/**      * Constructor.      *       * @param out      *          the underlying output stream.      * @param buf      *          user-supplied buffer. The buffer would be used exclusively by      *          the ChunkEncoder during its life cycle.      */
DECL|method|ChunkEncoder (DataOutputStream out, byte[] buf)
specifier|public
name|ChunkEncoder
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|byte
index|[]
name|buf
parameter_list|)
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|count
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Write out a chunk.      *       * @param chunk      *          The chunk buffer.      * @param offset      *          Offset to chunk buffer for the beginning of chunk.      * @param len      * @param last      *          Is this the last call to flushBuffer?      */
DECL|method|writeChunk (byte[] chunk, int offset, int len, boolean last)
specifier|private
name|void
name|writeChunk
parameter_list|(
name|byte
index|[]
name|chunk
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|last
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|last
condition|)
block|{
comment|// always write out the length for the last chunk.
name|Utils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|chunk
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|Utils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
operator|-
name|len
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|chunk
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Write out a chunk that is a concatenation of the internal buffer plus      * user supplied data. This will never be the last block.      *       * @param data      *          User supplied data buffer.      * @param offset      *          Offset to user data buffer.      * @param len      *          User data buffer size.      */
DECL|method|writeBufData (byte[] data, int offset, int len)
specifier|private
name|void
name|writeBufData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|+
name|len
operator|>
literal|0
condition|)
block|{
name|Utils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
operator|-
operator|(
name|count
operator|+
name|len
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Flush the internal buffer.      *       * Is this the last call to flushBuffer?      *       * @throws java.io.IOException      */
DECL|method|flushBuffer ()
specifier|private
name|void
name|flushBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|writeChunk
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|>=
name|buf
operator|.
name|length
condition|)
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
name|buf
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte b[])
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte b[], int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|len
operator|+
name|count
operator|)
operator|>=
name|buf
operator|.
name|length
condition|)
block|{
comment|/*          * If the input data do not fit in buffer, flush the output buffer and          * then write the data directly. In this way buffered streams will          * cascade harmlessly.          */
name|writeBufData
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|buf
argument_list|,
name|count
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|count
operator|+=
name|len
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|flushBuffer
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|buf
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writeChunk
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|count
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|buf
operator|=
literal|null
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Encode the whole stream as a single chunk. Expecting to know the size of    * the chunk up-front.    */
DECL|class|SingleChunkEncoder
specifier|static
specifier|public
class|class
name|SingleChunkEncoder
extends|extends
name|OutputStream
block|{
comment|/**      * The data output stream it connects to.      */
DECL|field|out
specifier|private
specifier|final
name|DataOutputStream
name|out
decl_stmt|;
comment|/**      * The remaining bytes to be written.      */
DECL|field|remain
specifier|private
name|int
name|remain
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
comment|/**      * Constructor.      *       * @param out      *          the underlying output stream.      * @param size      *          The total # of bytes to be written as a single chunk.      * @throws java.io.IOException      *           if an I/O error occurs.      */
DECL|method|SingleChunkEncoder (DataOutputStream out, int size)
specifier|public
name|SingleChunkEncoder
parameter_list|(
name|DataOutputStream
name|out
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|out
operator|=
name|out
expr_stmt|;
name|this
operator|.
name|remain
operator|=
name|size
expr_stmt|;
name|Utils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remain
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
operator|--
name|remain
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Writing more bytes than advertised size."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (byte b[])
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte b[], int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|remain
operator|>=
name|len
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|remain
operator|-=
name|len
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Writing more bytes than advertised size."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
operator|==
literal|true
condition|)
block|{
return|return;
block|}
try|try
block|{
if|if
condition|(
name|remain
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Writing less bytes than advertised size."
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

