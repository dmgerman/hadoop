begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/** Factories for non-public writables.  Defining a factory permits {@link  * ObjectWritable} to be able to construct instances of non-public classes. */
end_comment

begin_class
DECL|class|WritableFactories
specifier|public
class|class
name|WritableFactories
block|{
DECL|field|CLASS_TO_FACTORY
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|Class
argument_list|,
name|WritableFactory
argument_list|>
name|CLASS_TO_FACTORY
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|WritableFactory
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|WritableFactories ()
specifier|private
name|WritableFactories
parameter_list|()
block|{}
comment|// singleton
comment|/** Define a factory for a class. */
DECL|method|setFactory (Class c, WritableFactory factory)
specifier|public
specifier|static
specifier|synchronized
name|void
name|setFactory
parameter_list|(
name|Class
name|c
parameter_list|,
name|WritableFactory
name|factory
parameter_list|)
block|{
name|CLASS_TO_FACTORY
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
comment|/** Define a factory for a class. */
DECL|method|getFactory (Class c)
specifier|public
specifier|static
specifier|synchronized
name|WritableFactory
name|getFactory
parameter_list|(
name|Class
name|c
parameter_list|)
block|{
return|return
name|CLASS_TO_FACTORY
operator|.
name|get
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/** Create a new instance of a class with a defined factory. */
DECL|method|newInstance (Class<? extends Writable> c, Configuration conf)
specifier|public
specifier|static
name|Writable
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|c
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|WritableFactory
name|factory
init|=
name|WritableFactories
operator|.
name|getFactory
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|Writable
name|result
init|=
name|factory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|Configurable
condition|)
block|{
operator|(
operator|(
name|Configurable
operator|)
name|result
operator|)
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|c
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
comment|/** Create a new instance of a class with a defined factory. */
DECL|method|newInstance (Class<? extends Writable> c)
specifier|public
specifier|static
name|Writable
name|newInstance
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|newInstance
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

