begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.hadoop.io.compress.DecompressorStream} which works  * with 'block-based' based compression algorithms, as opposed to   * 'stream-based' compression algorithms.  *    */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|BlockDecompressorStream
specifier|public
class|class
name|BlockDecompressorStream
extends|extends
name|DecompressorStream
block|{
DECL|field|originalBlockSize
specifier|private
name|int
name|originalBlockSize
init|=
literal|0
decl_stmt|;
DECL|field|noUncompressedBytes
specifier|private
name|int
name|noUncompressedBytes
init|=
literal|0
decl_stmt|;
comment|/**    * Create a {@link BlockDecompressorStream}.    *     * @param in input stream    * @param decompressor decompressor to use    * @param bufferSize size of buffer    * @throws IOException    */
DECL|method|BlockDecompressorStream (InputStream in, Decompressor decompressor, int bufferSize)
specifier|public
name|BlockDecompressorStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|decompressor
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a {@link BlockDecompressorStream}.    *     * @param in input stream    * @param decompressor decompressor to use    * @throws IOException    */
DECL|method|BlockDecompressorStream (InputStream in, Decompressor decompressor)
specifier|public
name|BlockDecompressorStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|,
name|decompressor
argument_list|)
expr_stmt|;
block|}
DECL|method|BlockDecompressorStream (InputStream in)
specifier|protected
name|BlockDecompressorStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|method|decompress (byte[] b, int off, int len)
specifier|protected
name|int
name|decompress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if we are the beginning of a block
if|if
condition|(
name|noUncompressedBytes
operator|==
name|originalBlockSize
condition|)
block|{
comment|// Get original data size
try|try
block|{
name|originalBlockSize
operator|=
name|rawReadInt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|noUncompressedBytes
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|decompressor
operator|.
name|decompress
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|decompressor
operator|.
name|finished
argument_list|()
operator|||
name|decompressor
operator|.
name|needsDictionary
argument_list|()
condition|)
block|{
if|if
condition|(
name|noUncompressedBytes
operator|>=
name|originalBlockSize
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
if|if
condition|(
name|decompressor
operator|.
name|needsInput
argument_list|()
condition|)
block|{
name|int
name|m
init|=
name|getCompressedData
argument_list|()
decl_stmt|;
comment|// Send the read data to the decompressor
name|decompressor
operator|.
name|setInput
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Note the no. of decompressed bytes read from 'current' block
name|noUncompressedBytes
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
DECL|method|getCompressedData ()
specifier|protected
name|int
name|getCompressedData
parameter_list|()
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
comment|// Get the size of the compressed chunk (always non-negative)
name|int
name|len
init|=
name|rawReadInt
argument_list|()
decl_stmt|;
comment|// Read len bytes from underlying stream
if|if
condition|(
name|len
operator|>
name|buffer
operator|.
name|length
condition|)
block|{
name|buffer
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|,
name|off
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|len
condition|)
block|{
name|int
name|count
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|off
operator|+
name|n
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unexpected end of block in input stream"
argument_list|)
throw|;
block|}
name|n
operator|+=
name|count
expr_stmt|;
block|}
return|return
name|len
return|;
block|}
DECL|method|resetState ()
specifier|public
name|void
name|resetState
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|resetState
argument_list|()
expr_stmt|;
block|}
DECL|method|rawReadInt ()
specifier|private
name|int
name|rawReadInt
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|b1
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|b2
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|b3
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
name|int
name|b4
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|b1
operator||
name|b2
operator||
name|b3
operator||
name|b4
operator|)
operator|<
literal|0
condition|)
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
return|return
operator|(
operator|(
name|b1
operator|<<
literal|24
operator|)
operator|+
operator|(
name|b2
operator|<<
literal|16
operator|)
operator|+
operator|(
name|b3
operator|<<
literal|8
operator|)
operator|+
operator|(
name|b4
operator|<<
literal|0
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

