begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress.zlib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|zlib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|NativeCodeLoader
import|;
end_import

begin_comment
comment|/**  * A {@link Compressor} based on the popular   * zlib compression algorithm.  * http://www.zlib.net/  *   */
end_comment

begin_class
DECL|class|ZlibCompressor
specifier|public
class|class
name|ZlibCompressor
implements|implements
name|Compressor
block|{
DECL|field|DEFAULT_DIRECT_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_DIRECT_BUFFER_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|// HACK - Use this as a global lock in the JNI layer
DECL|field|clazz
specifier|private
specifier|static
name|Class
name|clazz
init|=
name|ZlibCompressor
operator|.
name|class
decl_stmt|;
DECL|field|stream
specifier|private
name|long
name|stream
decl_stmt|;
DECL|field|level
specifier|private
name|CompressionLevel
name|level
decl_stmt|;
DECL|field|strategy
specifier|private
name|CompressionStrategy
name|strategy
decl_stmt|;
DECL|field|windowBits
specifier|private
name|CompressionHeader
name|windowBits
decl_stmt|;
DECL|field|directBufferSize
specifier|private
name|int
name|directBufferSize
decl_stmt|;
DECL|field|userBuf
specifier|private
name|byte
index|[]
name|userBuf
init|=
literal|null
decl_stmt|;
DECL|field|userBufOff
DECL|field|userBufLen
specifier|private
name|int
name|userBufOff
init|=
literal|0
decl_stmt|,
name|userBufLen
init|=
literal|0
decl_stmt|;
DECL|field|uncompressedDirectBuf
specifier|private
name|Buffer
name|uncompressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|uncompressedDirectBufOff
DECL|field|uncompressedDirectBufLen
specifier|private
name|int
name|uncompressedDirectBufOff
init|=
literal|0
decl_stmt|,
name|uncompressedDirectBufLen
init|=
literal|0
decl_stmt|;
DECL|field|compressedDirectBuf
specifier|private
name|Buffer
name|compressedDirectBuf
init|=
literal|null
decl_stmt|;
DECL|field|finish
DECL|field|finished
specifier|private
name|boolean
name|finish
decl_stmt|,
name|finished
decl_stmt|;
comment|/**    * The compression level for zlib library.    */
DECL|enum|CompressionLevel
specifier|public
specifier|static
enum|enum
name|CompressionLevel
block|{
comment|/**      * Compression level for no compression.      */
DECL|enumConstant|NO_COMPRESSION
name|NO_COMPRESSION
argument_list|(
literal|0
argument_list|)
block|,
comment|/**      * Compression level for fastest compression.      */
DECL|enumConstant|BEST_SPEED
name|BEST_SPEED
argument_list|(
literal|1
argument_list|)
block|,
comment|/**      * Compression level for best compression.      */
DECL|enumConstant|BEST_COMPRESSION
name|BEST_COMPRESSION
argument_list|(
literal|9
argument_list|)
block|,
comment|/**      * Default compression level.      */
DECL|enumConstant|DEFAULT_COMPRESSION
name|DEFAULT_COMPRESSION
argument_list|(
operator|-
literal|1
argument_list|)
block|;
DECL|field|compressionLevel
specifier|private
specifier|final
name|int
name|compressionLevel
decl_stmt|;
DECL|method|CompressionLevel (int level)
name|CompressionLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|compressionLevel
operator|=
name|level
expr_stmt|;
block|}
DECL|method|compressionLevel ()
name|int
name|compressionLevel
parameter_list|()
block|{
return|return
name|compressionLevel
return|;
block|}
block|}
empty_stmt|;
comment|/**    * The compression level for zlib library.    */
DECL|enum|CompressionStrategy
specifier|public
specifier|static
enum|enum
name|CompressionStrategy
block|{
comment|/**      * Compression strategy best used for data consisting mostly of small      * values with a somewhat random distribution. Forces more Huffman coding      * and less string matching.      */
DECL|enumConstant|FILTERED
name|FILTERED
argument_list|(
literal|1
argument_list|)
block|,
comment|/**      * Compression strategy for Huffman coding only.      */
DECL|enumConstant|HUFFMAN_ONLY
name|HUFFMAN_ONLY
argument_list|(
literal|2
argument_list|)
block|,
comment|/**      * Compression strategy to limit match distances to one      * (run-length encoding).      */
DECL|enumConstant|RLE
name|RLE
argument_list|(
literal|3
argument_list|)
block|,
comment|/**      * Compression strategy to prevent the use of dynamic Huffman codes,       * allowing for a simpler decoder for special applications.      */
DECL|enumConstant|FIXED
name|FIXED
argument_list|(
literal|4
argument_list|)
block|,
comment|/**      * Default compression strategy.      */
DECL|enumConstant|DEFAULT_STRATEGY
name|DEFAULT_STRATEGY
argument_list|(
literal|0
argument_list|)
block|;
DECL|field|compressionStrategy
specifier|private
specifier|final
name|int
name|compressionStrategy
decl_stmt|;
DECL|method|CompressionStrategy (int strategy)
name|CompressionStrategy
parameter_list|(
name|int
name|strategy
parameter_list|)
block|{
name|compressionStrategy
operator|=
name|strategy
expr_stmt|;
block|}
DECL|method|compressionStrategy ()
name|int
name|compressionStrategy
parameter_list|()
block|{
return|return
name|compressionStrategy
return|;
block|}
block|}
empty_stmt|;
comment|/**    * The type of header for compressed data.    */
DECL|enum|CompressionHeader
specifier|public
specifier|static
enum|enum
name|CompressionHeader
block|{
comment|/**      * No headers/trailers/checksums.      */
DECL|enumConstant|NO_HEADER
name|NO_HEADER
argument_list|(
operator|-
literal|15
argument_list|)
block|,
comment|/**      * Default headers/trailers/checksums.      */
DECL|enumConstant|DEFAULT_HEADER
name|DEFAULT_HEADER
argument_list|(
literal|15
argument_list|)
block|,
comment|/**      * Simple gzip headers/trailers.      */
DECL|enumConstant|GZIP_FORMAT
name|GZIP_FORMAT
argument_list|(
literal|31
argument_list|)
block|;
DECL|field|windowBits
specifier|private
specifier|final
name|int
name|windowBits
decl_stmt|;
DECL|method|CompressionHeader (int windowBits)
name|CompressionHeader
parameter_list|(
name|int
name|windowBits
parameter_list|)
block|{
name|this
operator|.
name|windowBits
operator|=
name|windowBits
expr_stmt|;
block|}
DECL|method|windowBits ()
specifier|public
name|int
name|windowBits
parameter_list|()
block|{
return|return
name|windowBits
return|;
block|}
block|}
DECL|field|nativeZlibLoaded
specifier|private
specifier|static
name|boolean
name|nativeZlibLoaded
init|=
literal|false
decl_stmt|;
static|static
block|{
if|if
condition|(
name|NativeCodeLoader
operator|.
name|isNativeCodeLoaded
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Initialize the native library
name|initIDs
argument_list|()
expr_stmt|;
name|nativeZlibLoaded
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Ignore failure to load/initialize native-zlib
block|}
block|}
block|}
DECL|method|isNativeZlibLoaded ()
specifier|static
name|boolean
name|isNativeZlibLoaded
parameter_list|()
block|{
return|return
name|nativeZlibLoaded
return|;
block|}
comment|/**     * Creates a new compressor using the specified compression level.    * Compressed data will be generated in ZLIB format.    *     * @param level Compression level #CompressionLevel    * @param strategy Compression strategy #CompressionStrategy    * @param header Compression header #CompressionHeader    * @param directBufferSize Size of the direct buffer to be used.    */
DECL|method|ZlibCompressor (CompressionLevel level, CompressionStrategy strategy, CompressionHeader header, int directBufferSize)
specifier|public
name|ZlibCompressor
parameter_list|(
name|CompressionLevel
name|level
parameter_list|,
name|CompressionStrategy
name|strategy
parameter_list|,
name|CompressionHeader
name|header
parameter_list|,
name|int
name|directBufferSize
parameter_list|)
block|{
name|this
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|this
operator|.
name|strategy
operator|=
name|strategy
expr_stmt|;
name|this
operator|.
name|windowBits
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|directBufferSize
operator|=
name|directBufferSize
expr_stmt|;
name|uncompressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|stream
operator|=
name|init
argument_list|(
name|this
operator|.
name|level
operator|.
name|compressionLevel
argument_list|()
argument_list|,
name|this
operator|.
name|strategy
operator|.
name|compressionStrategy
argument_list|()
argument_list|,
name|this
operator|.
name|windowBits
operator|.
name|windowBits
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new compressor with the default compression level.    * Compressed data will be generated in ZLIB format.    */
DECL|method|ZlibCompressor ()
specifier|public
name|ZlibCompressor
parameter_list|()
block|{
name|this
argument_list|(
name|CompressionLevel
operator|.
name|DEFAULT_COMPRESSION
argument_list|,
name|CompressionStrategy
operator|.
name|DEFAULT_STRATEGY
argument_list|,
name|CompressionHeader
operator|.
name|DEFAULT_HEADER
argument_list|,
name|DEFAULT_DIRECT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
DECL|method|setInput (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|void
name|setInput
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|this
operator|.
name|userBuf
operator|=
name|b
expr_stmt|;
name|this
operator|.
name|userBufOff
operator|=
name|off
expr_stmt|;
name|this
operator|.
name|userBufLen
operator|=
name|len
expr_stmt|;
name|setInputFromSavedData
argument_list|()
expr_stmt|;
comment|// Reinitialize zlib's output direct buffer
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
block|}
DECL|method|setInputFromSavedData ()
specifier|synchronized
name|void
name|setInputFromSavedData
parameter_list|()
block|{
name|uncompressedDirectBufOff
operator|=
literal|0
expr_stmt|;
name|uncompressedDirectBufLen
operator|=
name|userBufLen
expr_stmt|;
if|if
condition|(
name|uncompressedDirectBufLen
operator|>
name|directBufferSize
condition|)
block|{
name|uncompressedDirectBufLen
operator|=
name|directBufferSize
expr_stmt|;
block|}
comment|// Reinitialize zlib's input direct buffer
name|uncompressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ByteBuffer
operator|)
name|uncompressedDirectBuf
operator|)
operator|.
name|put
argument_list|(
name|userBuf
argument_list|,
name|userBufOff
argument_list|,
name|uncompressedDirectBufLen
argument_list|)
expr_stmt|;
comment|// Note how much data is being fed to zlib
name|userBufOff
operator|+=
name|uncompressedDirectBufLen
expr_stmt|;
name|userBufLen
operator|-=
name|uncompressedDirectBufLen
expr_stmt|;
block|}
DECL|method|setDictionary (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|void
name|setDictionary
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|stream
operator|==
literal|0
operator|||
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|setDictionary
argument_list|(
name|stream
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|needsInput ()
specifier|public
specifier|synchronized
name|boolean
name|needsInput
parameter_list|()
block|{
comment|// Consume remaining compressed data?
if|if
condition|(
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Check if zlib has consumed all input
if|if
condition|(
name|uncompressedDirectBufLen
operator|<=
literal|0
condition|)
block|{
comment|// Check if we have consumed all user-input
if|if
condition|(
name|userBufLen
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|setInputFromSavedData
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|finish ()
specifier|public
specifier|synchronized
name|void
name|finish
parameter_list|()
block|{
name|finish
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|finished ()
specifier|public
specifier|synchronized
name|boolean
name|finished
parameter_list|()
block|{
comment|// Check if 'zlib' says its 'finished' and
comment|// all compressed data has been consumed
return|return
operator|(
name|finished
operator|&&
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
DECL|method|compress (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|compress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|off
operator|<
literal|0
operator|||
name|len
argument_list|<
literal|0
operator|||
name|off
argument_list|>
name|b
operator|.
name|length
operator|-
name|len
condition|)
block|{
throw|throw
operator|new
name|ArrayIndexOutOfBoundsException
argument_list|()
throw|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
comment|// Check if there is compressed data
name|n
operator|=
name|compressedDirectBuf
operator|.
name|remaining
argument_list|()
expr_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|len
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ByteBuffer
operator|)
name|compressedDirectBuf
operator|)
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|// Re-initialize the zlib's output direct buffer
name|compressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
comment|// Compress data
name|n
operator|=
name|deflateBytesDirect
argument_list|()
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|n
argument_list|)
expr_stmt|;
comment|// Get atmost 'len' bytes
name|n
operator|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|len
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ByteBuffer
operator|)
name|compressedDirectBuf
operator|)
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**    * Returns the total number of compressed bytes output so far.    *    * @return the total (non-negative) number of compressed bytes output so far    */
DECL|method|getBytesWritten ()
specifier|public
specifier|synchronized
name|long
name|getBytesWritten
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
name|getBytesWritten
argument_list|(
name|stream
argument_list|)
return|;
block|}
comment|/**    * Returns the total number of uncompressed bytes input so far.</p>    *    * @return the total (non-negative) number of uncompressed bytes input so far    */
DECL|method|getBytesRead ()
specifier|public
specifier|synchronized
name|long
name|getBytesRead
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
name|getBytesRead
argument_list|(
name|stream
argument_list|)
return|;
block|}
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|reset
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|finish
operator|=
literal|false
expr_stmt|;
name|finished
operator|=
literal|false
expr_stmt|;
name|uncompressedDirectBuf
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|uncompressedDirectBufOff
operator|=
name|uncompressedDirectBufLen
operator|=
literal|0
expr_stmt|;
name|compressedDirectBuf
operator|.
name|limit
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|compressedDirectBuf
operator|.
name|position
argument_list|(
name|directBufferSize
argument_list|)
expr_stmt|;
name|userBufOff
operator|=
name|userBufLen
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|end ()
specifier|public
specifier|synchronized
name|void
name|end
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|!=
literal|0
condition|)
block|{
name|end
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|method|checkStream ()
specifier|private
name|void
name|checkStream
parameter_list|()
block|{
if|if
condition|(
name|stream
operator|==
literal|0
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
DECL|method|initIDs ()
specifier|private
specifier|native
specifier|static
name|void
name|initIDs
parameter_list|()
function_decl|;
DECL|method|init (int level, int strategy, int windowBits)
specifier|private
specifier|native
specifier|static
name|long
name|init
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|strategy
parameter_list|,
name|int
name|windowBits
parameter_list|)
function_decl|;
DECL|method|setDictionary (long strm, byte[] b, int off, int len)
specifier|private
specifier|native
specifier|static
name|void
name|setDictionary
parameter_list|(
name|long
name|strm
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
DECL|method|deflateBytesDirect ()
specifier|private
specifier|native
name|int
name|deflateBytesDirect
parameter_list|()
function_decl|;
DECL|method|getBytesRead (long strm)
specifier|private
specifier|native
specifier|static
name|long
name|getBytesRead
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|getBytesWritten (long strm)
specifier|private
specifier|native
specifier|static
name|long
name|getBytesWritten
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|reset (long strm)
specifier|private
specifier|native
specifier|static
name|void
name|reset
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
DECL|method|end (long strm)
specifier|private
specifier|native
specifier|static
name|void
name|end
parameter_list|(
name|long
name|strm
parameter_list|)
function_decl|;
block|}
end_class

end_unit

