begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|BZip2DummyCompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|BZip2DummyDecompressor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|CBZip2InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|bzip2
operator|.
name|CBZip2OutputStream
import|;
end_import

begin_comment
comment|/**  * This class provides CompressionOutputStream and CompressionInputStream for  * compression and decompression. Currently we dont have an implementation of  * the Compressor and Decompressor interfaces, so those methods of  * CompressionCodec which have a Compressor or Decompressor type argument, throw  * UnsupportedOperationException.  */
end_comment

begin_class
DECL|class|BZip2Codec
specifier|public
class|class
name|BZip2Codec
implements|implements
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
block|{
DECL|field|HEADER
specifier|private
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"BZ"
decl_stmt|;
DECL|field|HEADER_LEN
specifier|private
specifier|static
specifier|final
name|int
name|HEADER_LEN
init|=
name|HEADER
operator|.
name|length
argument_list|()
decl_stmt|;
comment|/**   * Creates a new instance of BZip2Codec   */
DECL|method|BZip2Codec ()
specifier|public
name|BZip2Codec
parameter_list|()
block|{   }
comment|/**   * Creates CompressionOutputStream for BZip2   *   * @param out   *            The output Stream   * @return The BZip2 CompressionOutputStream   * @throws java.io.IOException   *             Throws IO exception   */
DECL|method|createOutputStream (OutputStream out)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BZip2CompressionOutputStream
argument_list|(
name|out
argument_list|)
return|;
block|}
comment|/**    * This functionality is currently not supported.    *    * @throws java.lang.UnsupportedOperationException    *             Throws UnsupportedOperationException    */
DECL|method|createOutputStream (OutputStream out, Compressor compressor)
specifier|public
name|CompressionOutputStream
name|createOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Compressor
name|compressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createOutputStream
argument_list|(
name|out
argument_list|)
return|;
block|}
comment|/**   * This functionality is currently not supported.   *   * @throws java.lang.UnsupportedOperationException   *             Throws UnsupportedOperationException   */
DECL|method|getCompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Compressor
argument_list|>
name|getCompressorType
parameter_list|()
block|{
return|return
name|BZip2DummyCompressor
operator|.
name|class
return|;
block|}
comment|/**   * This functionality is currently not supported.   *   * @throws java.lang.UnsupportedOperationException   *             Throws UnsupportedOperationException   */
DECL|method|createCompressor ()
specifier|public
name|Compressor
name|createCompressor
parameter_list|()
block|{
return|return
operator|new
name|BZip2DummyCompressor
argument_list|()
return|;
block|}
comment|/**   * Creates CompressionInputStream to be used to read off uncompressed data.   *   * @param in   *            The InputStream   * @return Returns CompressionInputStream for BZip2   * @throws java.io.IOException   *             Throws IOException   */
DECL|method|createInputStream (InputStream in)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BZip2CompressionInputStream
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**   * This functionality is currently not supported.   *   * @throws java.lang.UnsupportedOperationException   *             Throws UnsupportedOperationException   */
DECL|method|createInputStream (InputStream in, Decompressor decompressor)
specifier|public
name|CompressionInputStream
name|createInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createInputStream
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**   * This functionality is currently not supported.   *   * @throws java.lang.UnsupportedOperationException   *             Throws UnsupportedOperationException   */
DECL|method|getDecompressorType ()
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
argument_list|>
name|getDecompressorType
parameter_list|()
block|{
return|return
name|BZip2DummyDecompressor
operator|.
name|class
return|;
block|}
comment|/**   * This functionality is currently not supported.   *   * @throws java.lang.UnsupportedOperationException   *             Throws UnsupportedOperationException   */
DECL|method|createDecompressor ()
specifier|public
name|Decompressor
name|createDecompressor
parameter_list|()
block|{
return|return
operator|new
name|BZip2DummyDecompressor
argument_list|()
return|;
block|}
comment|/**   * .bz2 is recognized as the default extension for compressed BZip2 files   *   * @return A String telling the default bzip2 file extension   */
DECL|method|getDefaultExtension ()
specifier|public
name|String
name|getDefaultExtension
parameter_list|()
block|{
return|return
literal|".bz2"
return|;
block|}
DECL|class|BZip2CompressionOutputStream
specifier|private
specifier|static
class|class
name|BZip2CompressionOutputStream
extends|extends
name|CompressionOutputStream
block|{
comment|// class data starts here//
DECL|field|output
specifier|private
name|CBZip2OutputStream
name|output
decl_stmt|;
DECL|field|needsReset
specifier|private
name|boolean
name|needsReset
decl_stmt|;
comment|// class data ends here//
DECL|method|BZip2CompressionOutputStream (OutputStream out)
specifier|public
name|BZip2CompressionOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|needsReset
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|writeStreamHeader ()
specifier|private
name|void
name|writeStreamHeader
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|super
operator|.
name|out
operator|!=
literal|null
condition|)
block|{
comment|// The compressed bzip2 stream should start with the
comment|// identifying characters BZ. Caller of CBZip2OutputStream
comment|// i.e. this class must write these characters.
name|out
operator|.
name|write
argument_list|(
name|HEADER
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|finish ()
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
comment|// In the case that nothing is written to this stream, we still need to
comment|// write out the header before closing, otherwise the stream won't be
comment|// recognized by BZip2CompressionInputStream.
name|internalReset
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|output
operator|.
name|finish
argument_list|()
expr_stmt|;
name|needsReset
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|internalReset ()
specifier|private
name|void
name|internalReset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
name|needsReset
operator|=
literal|false
expr_stmt|;
name|writeStreamHeader
argument_list|()
expr_stmt|;
name|this
operator|.
name|output
operator|=
operator|new
name|CBZip2OutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resetState ()
specifier|public
name|void
name|resetState
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Cannot write to out at this point because out might not be ready
comment|// yet, as in SequenceFile.Writer implementation.
name|needsReset
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
name|internalReset
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|output
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
name|internalReset
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|output
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
comment|// In the case that nothing is written to this stream, we still need to
comment|// write out the header before closing, otherwise the stream won't be
comment|// recognized by BZip2CompressionInputStream.
name|internalReset
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|output
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
name|needsReset
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// end of class BZip2CompressionOutputStream
DECL|class|BZip2CompressionInputStream
specifier|private
specifier|static
class|class
name|BZip2CompressionInputStream
extends|extends
name|CompressionInputStream
block|{
comment|// class data starts here//
DECL|field|input
specifier|private
name|CBZip2InputStream
name|input
decl_stmt|;
DECL|field|needsReset
name|boolean
name|needsReset
decl_stmt|;
comment|// class data ends here//
DECL|method|BZip2CompressionInputStream (InputStream in)
specifier|public
name|BZip2CompressionInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|needsReset
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|readStreamHeader ()
specifier|private
name|BufferedInputStream
name|readStreamHeader
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We are flexible enough to allow the compressed stream not to
comment|// start with the header of BZ. So it works fine either we have
comment|// the header or not.
name|BufferedInputStream
name|bufferedIn
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|super
operator|.
name|in
operator|!=
literal|null
condition|)
block|{
name|bufferedIn
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|super
operator|.
name|in
argument_list|)
expr_stmt|;
name|bufferedIn
operator|.
name|mark
argument_list|(
name|HEADER_LEN
argument_list|)
expr_stmt|;
name|byte
index|[]
name|headerBytes
init|=
operator|new
name|byte
index|[
name|HEADER_LEN
index|]
decl_stmt|;
name|int
name|actualRead
init|=
name|bufferedIn
operator|.
name|read
argument_list|(
name|headerBytes
argument_list|,
literal|0
argument_list|,
name|HEADER_LEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualRead
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|header
init|=
operator|new
name|String
argument_list|(
name|headerBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|header
operator|.
name|compareTo
argument_list|(
name|HEADER
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|bufferedIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bufferedIn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to read bzip2 stream."
argument_list|)
throw|;
block|}
return|return
name|bufferedIn
return|;
block|}
comment|// end of method
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|needsReset
condition|)
block|{
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|needsReset
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
name|internalReset
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|input
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|method|internalReset ()
specifier|private
name|void
name|internalReset
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
name|needsReset
operator|=
literal|false
expr_stmt|;
name|BufferedInputStream
name|bufferedIn
init|=
name|readStreamHeader
argument_list|()
decl_stmt|;
name|input
operator|=
operator|new
name|CBZip2InputStream
argument_list|(
name|bufferedIn
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resetState ()
specifier|public
name|void
name|resetState
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Cannot read from bufferedIn at this point because bufferedIn might not be ready
comment|// yet, as in SequenceFile.Reader implementation.
name|needsReset
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|needsReset
condition|)
block|{
name|internalReset
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|input
operator|.
name|read
argument_list|()
return|;
block|}
block|}
comment|// end of BZip2CompressionInputStream
block|}
end_class

end_unit

