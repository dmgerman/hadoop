begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.compress
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|Decompressor
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|DecompressorStream
specifier|public
class|class
name|DecompressorStream
extends|extends
name|CompressionInputStream
block|{
DECL|field|decompressor
specifier|protected
name|Decompressor
name|decompressor
init|=
literal|null
decl_stmt|;
DECL|field|buffer
specifier|protected
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|eof
specifier|protected
name|boolean
name|eof
init|=
literal|false
decl_stmt|;
DECL|field|closed
specifier|protected
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|DecompressorStream (InputStream in, Decompressor decompressor, int bufferSize)
specifier|public
name|DecompressorStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
operator|||
name|decompressor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|bufferSize
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal bufferSize"
argument_list|)
throw|;
block|}
name|this
operator|.
name|decompressor
operator|=
name|decompressor
expr_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
name|bufferSize
index|]
expr_stmt|;
block|}
DECL|method|DecompressorStream (InputStream in, Decompressor decompressor)
specifier|public
name|DecompressorStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|Decompressor
name|decompressor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|in
argument_list|,
name|decompressor
argument_list|,
literal|512
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allow derived classes to directly set the underlying stream.    *     * @param in Underlying input stream.  * @throws IOException    */
DECL|method|DecompressorStream (InputStream in)
specifier|protected
name|DecompressorStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
DECL|field|oneByte
specifier|private
name|byte
index|[]
name|oneByte
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
operator|(
name|read
argument_list|(
name|oneByte
argument_list|,
literal|0
argument_list|,
name|oneByte
operator|.
name|length
argument_list|)
operator|==
operator|-
literal|1
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|oneByte
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|off
operator||
name|len
operator||
operator|(
name|off
operator|+
name|len
operator|)
operator||
operator|(
name|b
operator|.
name|length
operator|-
operator|(
name|off
operator|+
name|len
operator|)
operator|)
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|decompress
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|method|decompress (byte[] b, int off, int len)
specifier|protected
name|int
name|decompress
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|decompressor
operator|.
name|decompress
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|decompressor
operator|.
name|finished
argument_list|()
operator|||
name|decompressor
operator|.
name|needsDictionary
argument_list|()
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|decompressor
operator|.
name|needsInput
argument_list|()
condition|)
block|{
name|getCompressedData
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|n
return|;
block|}
DECL|method|getCompressedData ()
specifier|protected
name|void
name|getCompressedData
parameter_list|()
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
name|int
name|n
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|(
literal|"Unexpected end of input stream"
argument_list|)
throw|;
block|}
name|decompressor
operator|.
name|setInput
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|checkStream ()
specifier|protected
name|void
name|checkStream
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed"
argument_list|)
throw|;
block|}
block|}
DECL|method|resetState ()
specifier|public
name|void
name|resetState
parameter_list|()
throws|throws
name|IOException
block|{
name|decompressor
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|field|skipBytes
specifier|private
name|byte
index|[]
name|skipBytes
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Sanity checks
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"negative skip length"
argument_list|)
throw|;
block|}
name|checkStream
argument_list|()
expr_stmt|;
comment|// Read 'n' bytes
name|int
name|skipped
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|skipped
operator|<
name|n
condition|)
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|int
operator|)
name|n
operator|-
name|skipped
operator|)
argument_list|,
name|skipBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|len
operator|=
name|read
argument_list|(
name|skipBytes
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|==
operator|-
literal|1
condition|)
block|{
name|eof
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|skipped
operator|+=
name|len
expr_stmt|;
block|}
return|return
name|skipped
return|;
block|}
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|checkStream
argument_list|()
expr_stmt|;
return|return
operator|(
name|eof
operator|)
condition|?
literal|0
else|:
literal|1
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|mark (int readlimit)
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|readlimit
parameter_list|)
block|{   }
DECL|method|reset ()
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"mark/reset not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

