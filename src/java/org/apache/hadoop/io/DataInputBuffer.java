begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/** A reusable {@link DataInput} implementation that reads from an in-memory  * buffer.  *  *<p>This saves memory over creating a new DataInputStream and  * ByteArrayInputStream each time data is read.  *  *<p>Typical usage is something like the following:<pre>  *  * DataInputBuffer buffer = new DataInputBuffer();  * while (... loop condition ...) {  *   byte[] data = ... get data ...;  *   int dataLength = ... get data length ...;  *   buffer.reset(data, dataLength);  *   ... read buffer using DataInput methods ...  * }  *</pre>  *    */
end_comment

begin_class
DECL|class|DataInputBuffer
specifier|public
class|class
name|DataInputBuffer
extends|extends
name|DataInputStream
block|{
DECL|class|Buffer
specifier|private
specifier|static
class|class
name|Buffer
extends|extends
name|ByteArrayInputStream
block|{
DECL|method|Buffer ()
specifier|public
name|Buffer
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
DECL|method|reset (byte[] input, int start, int length)
specifier|public
name|void
name|reset
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|start
operator|+
name|length
expr_stmt|;
name|this
operator|.
name|mark
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|start
expr_stmt|;
block|}
DECL|method|getData ()
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
DECL|method|getPosition ()
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
DECL|field|buffer
specifier|private
name|Buffer
name|buffer
decl_stmt|;
comment|/** Constructs a new empty buffer. */
DECL|method|DataInputBuffer ()
specifier|public
name|DataInputBuffer
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Buffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|DataInputBuffer (Buffer buffer)
specifier|private
name|DataInputBuffer
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
block|{
name|super
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
block|}
comment|/** Resets the data that the buffer reads. */
DECL|method|reset (byte[] input, int length)
specifier|public
name|void
name|reset
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|buffer
operator|.
name|reset
argument_list|(
name|input
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/** Resets the data that the buffer reads. */
DECL|method|reset (byte[] input, int start, int length)
specifier|public
name|void
name|reset
parameter_list|(
name|byte
index|[]
name|input
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|buffer
operator|.
name|reset
argument_list|(
name|input
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getData ()
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getData
argument_list|()
return|;
block|}
comment|/** Returns the current position in the input. */
DECL|method|getPosition ()
specifier|public
name|int
name|getPosition
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getPosition
argument_list|()
return|;
block|}
comment|/** Returns the length of the input. */
DECL|method|getLength ()
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
end_class

end_unit

