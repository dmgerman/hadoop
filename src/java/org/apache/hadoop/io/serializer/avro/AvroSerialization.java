begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.serializer.avro
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|BinaryDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|BinaryEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|Serializer
import|;
end_import

begin_comment
comment|/**  * Base class for providing serialization to Avro types.  */
end_comment

begin_class
DECL|class|AvroSerialization
specifier|public
specifier|abstract
class|class
name|AvroSerialization
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Configured
implements|implements
name|Serialization
argument_list|<
name|T
argument_list|>
block|{
DECL|method|getDeserializer (Class<T> c)
specifier|public
name|Deserializer
argument_list|<
name|T
argument_list|>
name|getDeserializer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|new
name|AvroDeserializer
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|getSerializer (Class<T> c)
specifier|public
name|Serializer
argument_list|<
name|T
argument_list|>
name|getSerializer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|new
name|AvroSerializer
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/**    * Return an Avro Schema instance for the given class.    */
DECL|method|getSchema (T t)
specifier|protected
specifier|abstract
name|Schema
name|getSchema
parameter_list|(
name|T
name|t
parameter_list|)
function_decl|;
comment|/**    * Create and return Avro DatumWriter for the given class.    */
DECL|method|getWriter (Class<T> clazz)
specifier|protected
specifier|abstract
name|DatumWriter
argument_list|<
name|T
argument_list|>
name|getWriter
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
function_decl|;
comment|/**    * Create and return Avro DatumReader for the given class.    */
DECL|method|getReader (Class<T> clazz)
specifier|protected
specifier|abstract
name|DatumReader
argument_list|<
name|T
argument_list|>
name|getReader
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
function_decl|;
DECL|class|AvroSerializer
class|class
name|AvroSerializer
implements|implements
name|Serializer
argument_list|<
name|T
argument_list|>
block|{
DECL|field|writer
specifier|private
name|DatumWriter
argument_list|<
name|T
argument_list|>
name|writer
decl_stmt|;
DECL|field|encoder
specifier|private
name|BinaryEncoder
name|encoder
decl_stmt|;
DECL|field|outStream
specifier|private
name|OutputStream
name|outStream
decl_stmt|;
DECL|field|clazz
specifier|protected
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
decl_stmt|;
DECL|method|AvroSerializer (Class<T> clazz)
name|AvroSerializer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|writer
operator|=
name|getWriter
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|encoder
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|open (OutputStream out)
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|outStream
operator|=
name|out
expr_stmt|;
name|encoder
operator|=
operator|new
name|BinaryEncoder
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
DECL|method|serialize (T t)
specifier|public
name|void
name|serialize
parameter_list|(
name|T
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|setSchema
argument_list|(
name|getSchema
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|t
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|AvroDeserializer
class|class
name|AvroDeserializer
implements|implements
name|Deserializer
argument_list|<
name|T
argument_list|>
block|{
DECL|field|reader
specifier|private
name|DatumReader
argument_list|<
name|T
argument_list|>
name|reader
decl_stmt|;
DECL|field|decoder
specifier|private
name|BinaryDecoder
name|decoder
decl_stmt|;
DECL|field|inStream
specifier|private
name|InputStream
name|inStream
decl_stmt|;
DECL|method|AvroDeserializer (Class<T> clazz)
name|AvroDeserializer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|getReader
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|deserialize (T t)
specifier|public
name|T
name|deserialize
parameter_list|(
name|T
name|t
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|reader
operator|.
name|read
argument_list|(
name|t
argument_list|,
name|decoder
argument_list|)
return|;
block|}
DECL|method|open (InputStream in)
specifier|public
name|void
name|open
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|inStream
operator|=
name|in
expr_stmt|;
name|decoder
operator|=
operator|new
name|BinaryDecoder
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

