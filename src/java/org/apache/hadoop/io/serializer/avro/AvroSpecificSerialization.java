begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.serializer.avro
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericDatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|DatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificDatumReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificDatumWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|specific
operator|.
name|SpecificRecord
import|;
end_import

begin_comment
comment|/**  * Serialization for Avro Specific classes. This serialization is to be used   * for classes generated by Avro's 'specific' compiler.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|AvroSpecificSerialization
specifier|public
class|class
name|AvroSpecificSerialization
extends|extends
name|AvroSerialization
argument_list|<
name|SpecificRecord
argument_list|>
block|{
annotation|@
name|Override
DECL|method|accept (Map<String, String> metadata)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
if|if
condition|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|metadata
operator|.
name|get
argument_list|(
name|SERIALIZATION_KEY
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|getClassFromMetadata
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
return|return
name|c
operator|==
literal|null
condition|?
literal|false
else|:
name|SpecificRecord
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getReader (Map<String, String> metadata)
specifier|protected
name|DatumReader
name|getReader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|SpecificDatumReader
argument_list|(
name|getClassFromMetadata
argument_list|(
name|metadata
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSchema (Map<String, String> metadata)
specifier|protected
name|Schema
name|getSchema
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|getClassFromMetadata
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
return|return
name|SpecificData
operator|.
name|get
argument_list|()
operator|.
name|getSchema
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getWriter (Map<String, String> metadata)
specifier|protected
name|DatumWriter
name|getWriter
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
return|return
operator|new
name|SpecificDatumWriter
argument_list|()
return|;
block|}
block|}
end_class

end_unit

