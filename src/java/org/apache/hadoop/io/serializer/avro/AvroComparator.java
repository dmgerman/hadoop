begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.serializer.avro
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|io
operator|.
name|BinaryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_comment
comment|/**  *<p>  * A {@link RawComparator} that uses Avro to extract data from the  * source stream and compare their contents without explicit  * deserialization.  */
end_comment

begin_class
DECL|class|AvroComparator
specifier|public
class|class
name|AvroComparator
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
implements|implements
name|RawComparator
argument_list|<
name|T
argument_list|>
block|{
DECL|field|schema
specifier|private
specifier|final
name|Schema
name|schema
decl_stmt|;
DECL|method|AvroComparator (final Schema s)
specifier|public
name|AvroComparator
parameter_list|(
specifier|final
name|Schema
name|s
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|s
expr_stmt|;
block|}
DECL|method|compare (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
return|return
name|BinaryData
operator|.
name|compare
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|schema
argument_list|)
return|;
block|}
DECL|method|compare (T t1, T t2)
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|t1
parameter_list|,
name|T
name|t2
parameter_list|)
block|{
return|return
name|t1
operator|.
name|compareTo
argument_list|(
name|t2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

