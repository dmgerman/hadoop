begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.serializer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|RawComparator
import|;
end_import

begin_comment
comment|/**  *<p>  * An experimental {@link Serialization} for Java {@link Serializable} classes.  *</p>  * @see JavaSerializationComparator  */
end_comment

begin_class
DECL|class|JavaSerialization
specifier|public
class|class
name|JavaSerialization
extends|extends
name|SerializationBase
argument_list|<
name|Serializable
argument_list|>
block|{
DECL|class|JavaSerializationDeserializer
specifier|static
class|class
name|JavaSerializationDeserializer
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
extends|extends
name|DeserializerBase
argument_list|<
name|T
argument_list|>
block|{
DECL|field|ois
specifier|private
name|ObjectInputStream
name|ois
decl_stmt|;
DECL|method|open (InputStream in)
specifier|public
name|void
name|open
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|ois
operator|=
operator|new
name|ObjectInputStream
argument_list|(
name|in
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|readStreamHeader
parameter_list|()
block|{
comment|// no header
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|deserialize (T object)
specifier|public
name|T
name|deserialize
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// ignore passed-in object
return|return
operator|(
name|T
operator|)
name|ois
operator|.
name|readObject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|ois
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|JavaSerializationSerializer
specifier|static
class|class
name|JavaSerializationSerializer
parameter_list|<
name|T
extends|extends
name|Serializable
parameter_list|>
extends|extends
name|SerializerBase
argument_list|<
name|T
argument_list|>
block|{
DECL|field|oos
specifier|private
name|ObjectOutputStream
name|oos
decl_stmt|;
DECL|field|metadata
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
decl_stmt|;
DECL|method|JavaSerializationSerializer (Map<String, String> metadata)
specifier|public
name|JavaSerializationSerializer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
block|}
DECL|method|open (OutputStream out)
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|oos
operator|=
operator|new
name|ObjectOutputStream
argument_list|(
name|out
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|writeStreamHeader
parameter_list|()
block|{
comment|// no header
block|}
block|}
expr_stmt|;
block|}
DECL|method|serialize (T object)
specifier|public
name|void
name|serialize
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|oos
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// clear (class) back-references
name|oos
operator|.
name|writeObject
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetadata ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|metadata
return|;
block|}
block|}
DECL|method|accept (Map<String, String> metadata)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|String
name|intendedSerializer
init|=
name|metadata
operator|.
name|get
argument_list|(
name|SERIALIZATION_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|intendedSerializer
operator|!=
literal|null
operator|&&
operator|!
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|intendedSerializer
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|getClassFromMetadata
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
return|return
name|Serializable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
return|;
block|}
DECL|method|getDeserializer ( Map<String, String> metadata)
specifier|public
name|DeserializerBase
argument_list|<
name|Serializable
argument_list|>
name|getDeserializer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
return|return
operator|new
name|JavaSerializationDeserializer
argument_list|<
name|Serializable
argument_list|>
argument_list|()
return|;
block|}
DECL|method|getSerializer ( Map<String, String> metadata)
specifier|public
name|SerializerBase
argument_list|<
name|Serializable
argument_list|>
name|getSerializer
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
return|return
operator|new
name|JavaSerializationSerializer
argument_list|<
name|Serializable
argument_list|>
argument_list|(
name|metadata
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|getRawComparator ( Map<String, String> metadata)
specifier|public
name|RawComparator
argument_list|<
name|Serializable
argument_list|>
name|getRawComparator
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|klazz
init|=
name|getClassFromMetadata
argument_list|(
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|klazz
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot get comparator without "
operator|+
name|SerializationBase
operator|.
name|CLASS_KEY
operator|+
literal|" set in metadata"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Serializable
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|klazz
argument_list|)
condition|)
block|{
try|try
block|{
return|return
operator|(
name|RawComparator
argument_list|<
name|Serializable
argument_list|>
operator|)
operator|new
name|JavaSerializationComparator
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not instantiate JavaSerializationComparator for type "
operator|+
name|klazz
operator|.
name|getName
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Class "
operator|+
name|klazz
operator|.
name|getName
argument_list|()
operator|+
literal|" is incompatible with JavaSerialization"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

