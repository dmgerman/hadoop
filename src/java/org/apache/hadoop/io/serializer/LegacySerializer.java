begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.io.serializer
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|class|LegacySerializer
class|class
name|LegacySerializer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SerializerBase
argument_list|<
name|T
argument_list|>
block|{
DECL|field|serializer
specifier|private
name|Serializer
argument_list|<
name|T
argument_list|>
name|serializer
decl_stmt|;
DECL|method|LegacySerializer (Serializer<T> serializer)
specifier|public
name|LegacySerializer
parameter_list|(
name|Serializer
argument_list|<
name|T
argument_list|>
name|serializer
parameter_list|)
block|{
name|this
operator|.
name|serializer
operator|=
name|serializer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|open (OutputStream out)
specifier|public
name|void
name|open
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|serializer
operator|.
name|open
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serialize (T t)
specifier|public
name|void
name|serialize
parameter_list|(
name|T
name|t
parameter_list|)
throws|throws
name|IOException
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|serializer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMetadata ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Collections
operator|.
expr|<
name|String
operator|,
name|String
operator|>
name|emptyMap
argument_list|()
return|;
block|}
block|}
end_class

end_unit

