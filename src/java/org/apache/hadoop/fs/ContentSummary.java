begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/** Store the summary of a content (a directory or a file). */
end_comment

begin_class
DECL|class|ContentSummary
specifier|public
class|class
name|ContentSummary
implements|implements
name|Writable
block|{
DECL|field|length
specifier|private
name|long
name|length
decl_stmt|;
DECL|field|fileCount
specifier|private
name|long
name|fileCount
decl_stmt|;
DECL|field|directoryCount
specifier|private
name|long
name|directoryCount
decl_stmt|;
DECL|field|quota
specifier|private
name|long
name|quota
decl_stmt|;
DECL|field|spaceConsumed
specifier|private
name|long
name|spaceConsumed
decl_stmt|;
DECL|field|spaceQuota
specifier|private
name|long
name|spaceQuota
decl_stmt|;
comment|/** Constructor */
DECL|method|ContentSummary ()
specifier|public
name|ContentSummary
parameter_list|()
block|{}
comment|/** Constructor */
DECL|method|ContentSummary (long length, long fileCount, long directoryCount)
specifier|public
name|ContentSummary
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|fileCount
parameter_list|,
name|long
name|directoryCount
parameter_list|)
block|{
name|this
argument_list|(
name|length
argument_list|,
name|fileCount
argument_list|,
name|directoryCount
argument_list|,
operator|-
literal|1L
argument_list|,
name|length
argument_list|,
operator|-
literal|1L
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor */
DECL|method|ContentSummary ( long length, long fileCount, long directoryCount, long quota, long spaceConsumed, long spaceQuota)
specifier|public
name|ContentSummary
parameter_list|(
name|long
name|length
parameter_list|,
name|long
name|fileCount
parameter_list|,
name|long
name|directoryCount
parameter_list|,
name|long
name|quota
parameter_list|,
name|long
name|spaceConsumed
parameter_list|,
name|long
name|spaceQuota
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|fileCount
operator|=
name|fileCount
expr_stmt|;
name|this
operator|.
name|directoryCount
operator|=
name|directoryCount
expr_stmt|;
name|this
operator|.
name|quota
operator|=
name|quota
expr_stmt|;
name|this
operator|.
name|spaceConsumed
operator|=
name|spaceConsumed
expr_stmt|;
name|this
operator|.
name|spaceQuota
operator|=
name|spaceQuota
expr_stmt|;
block|}
comment|/** @return the length */
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/** @return the directory count */
DECL|method|getDirectoryCount ()
specifier|public
name|long
name|getDirectoryCount
parameter_list|()
block|{
return|return
name|directoryCount
return|;
block|}
comment|/** @return the file count */
DECL|method|getFileCount ()
specifier|public
name|long
name|getFileCount
parameter_list|()
block|{
return|return
name|fileCount
return|;
block|}
comment|/** Return the directory quota */
DECL|method|getQuota ()
specifier|public
name|long
name|getQuota
parameter_list|()
block|{
return|return
name|quota
return|;
block|}
comment|/** Retuns (disk) space consumed */
DECL|method|getSpaceConsumed ()
specifier|public
name|long
name|getSpaceConsumed
parameter_list|()
block|{
return|return
name|spaceConsumed
return|;
block|}
comment|/** Returns (disk) space quota */
DECL|method|getSpaceQuota ()
specifier|public
name|long
name|getSpaceQuota
parameter_list|()
block|{
return|return
name|spaceQuota
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|fileCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|directoryCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|quota
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|spaceConsumed
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|spaceQuota
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|length
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|fileCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|directoryCount
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|quota
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|spaceConsumed
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|spaceQuota
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
comment|/**     * Output format:    *<----12----><----12----><-------18------->    *    DIR_COUNT   FILE_COUNT       CONTENT_SIZE FILE_NAME        */
DECL|field|STRING_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|STRING_FORMAT
init|=
literal|"%12d %12d %18d "
decl_stmt|;
comment|/**     * Output format:    *<----12----><----15----><----15----><----15----><----12----><----12----><-------18------->    *    QUOTA   REMAINING_QUATA SPACE_QUOTA SPACE_QUOTA_REM DIR_COUNT   FILE_COUNT   CONTENT_SIZE     FILE_NAME        */
DECL|field|QUOTA_STRING_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|QUOTA_STRING_FORMAT
init|=
literal|"%12s %15s "
decl_stmt|;
DECL|field|SPACE_QUOTA_STRING_FORMAT
specifier|private
specifier|static
specifier|final
name|String
name|SPACE_QUOTA_STRING_FORMAT
init|=
literal|"%15s %15s "
decl_stmt|;
comment|/** The header string */
DECL|field|HEADER
specifier|private
specifier|static
specifier|final
name|String
name|HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|STRING_FORMAT
operator|.
name|replace
argument_list|(
literal|'d'
argument_list|,
literal|'s'
argument_list|)
argument_list|,
literal|"directories"
argument_list|,
literal|"files"
argument_list|,
literal|"bytes"
argument_list|)
decl_stmt|;
DECL|field|QUOTA_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|QUOTA_HEADER
init|=
name|String
operator|.
name|format
argument_list|(
name|QUOTA_STRING_FORMAT
operator|+
name|SPACE_QUOTA_STRING_FORMAT
argument_list|,
literal|"quota"
argument_list|,
literal|"remaining quota"
argument_list|,
literal|"space quota"
argument_list|,
literal|"reamaining quota"
argument_list|)
operator|+
name|HEADER
decl_stmt|;
comment|/** Return the header of the output.    * if qOption is false, output directory count, file count, and content size;    * if qOption is true, output quota and remaining quota as well.    *     * @param qOption a flag indicating if quota needs to be printed or not    * @return the header of the output    */
DECL|method|getHeader (boolean qOption)
specifier|public
specifier|static
name|String
name|getHeader
parameter_list|(
name|boolean
name|qOption
parameter_list|)
block|{
return|return
name|qOption
condition|?
name|QUOTA_HEADER
else|:
name|HEADER
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/** Return the string representation of the object in the output format.    * if qOption is false, output directory count, file count, and content size;    * if qOption is true, output quota and remaining quota as well.    *     * @param qOption a flag indicating if quota needs to be printed or not    * @return the string representation of the object    */
DECL|method|toString (boolean qOption)
specifier|public
name|String
name|toString
parameter_list|(
name|boolean
name|qOption
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|qOption
condition|)
block|{
name|String
name|quotaStr
init|=
literal|"none"
decl_stmt|;
name|String
name|quotaRem
init|=
literal|"inf"
decl_stmt|;
name|String
name|spaceQuotaStr
init|=
literal|"none"
decl_stmt|;
name|String
name|spaceQuotaRem
init|=
literal|"inf"
decl_stmt|;
if|if
condition|(
name|quota
operator|>
literal|0
condition|)
block|{
name|quotaStr
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|quota
argument_list|)
expr_stmt|;
name|quotaRem
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|quota
operator|-
operator|(
name|directoryCount
operator|+
name|fileCount
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spaceQuota
operator|>
literal|0
condition|)
block|{
name|spaceQuotaStr
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|spaceQuota
argument_list|)
expr_stmt|;
name|spaceQuotaRem
operator|=
name|Long
operator|.
name|toString
argument_list|(
name|spaceQuota
operator|-
name|spaceConsumed
argument_list|)
expr_stmt|;
block|}
name|prefix
operator|=
name|String
operator|.
name|format
argument_list|(
name|QUOTA_STRING_FORMAT
operator|+
name|SPACE_QUOTA_STRING_FORMAT
argument_list|,
name|quotaStr
argument_list|,
name|quotaRem
argument_list|,
name|spaceQuotaStr
argument_list|,
name|spaceQuotaRem
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
operator|+
name|String
operator|.
name|format
argument_list|(
name|STRING_FORMAT
argument_list|,
name|directoryCount
argument_list|,
name|fileCount
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

