begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|CreateOpts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Options
operator|.
name|Rename
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MultipleIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/****************************************************************  * An abstract base class for a fairly generic filesystem.  It  * may be implemented as a distributed filesystem, or as a "local"  * one that reflects the locally-connected disk.  The local version  * exists for small Hadoop instances and for testing.  *  *<p>  *  * All user code that may potentially use the Hadoop Distributed  * File System should be written to use a FileSystem object.  The  * Hadoop DFS is a multi-machine system that appears as a single  * disk.  It's useful because of its fault tolerance and potentially  * very large capacity.  *   *<p>  * The local implementation is {@link LocalFileSystem} and distributed  * implementation is DistributedFileSystem.  *****************************************************************/
end_comment

begin_class
DECL|class|FileSystem
specifier|public
specifier|abstract
class|class
name|FileSystem
extends|extends
name|Configured
implements|implements
name|Closeable
block|{
DECL|field|FS_DEFAULT_NAME_KEY
specifier|public
specifier|static
specifier|final
name|String
name|FS_DEFAULT_NAME_KEY
init|=
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
decl_stmt|;
DECL|field|DEFAULT_FS
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FS
init|=
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_DEFAULT
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** FileSystem cache */
DECL|field|CACHE
specifier|static
specifier|final
name|Cache
name|CACHE
init|=
operator|new
name|Cache
argument_list|()
decl_stmt|;
comment|/** The key this instance is stored under in the cache. */
DECL|field|key
specifier|private
name|Cache
operator|.
name|Key
name|key
decl_stmt|;
comment|/** Recording statistics per a FileSystem class */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
argument_list|,
name|Statistics
argument_list|>
DECL|field|statisticsTable
name|statisticsTable
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
argument_list|,
name|Statistics
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * The statistics for this file system.    */
DECL|field|statistics
specifier|protected
name|Statistics
name|statistics
decl_stmt|;
comment|/**    * A cache of files that should be deleted when filsystem is closed    * or the JVM is exited.    */
DECL|field|deleteOnExit
specifier|private
name|Set
argument_list|<
name|Path
argument_list|>
name|deleteOnExit
init|=
operator|new
name|TreeSet
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Returns the configured filesystem implementation.*/
DECL|method|get (Configuration conf)
specifier|public
specifier|static
name|FileSystem
name|get
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Get the default filesystem URI from a configuration.    * @param conf the configuration to access    * @return the uri of the default filesystem    */
DECL|method|getDefaultUri (Configuration conf)
specifier|public
specifier|static
name|URI
name|getDefaultUri
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|String
name|uri
init|=
name|conf
operator|.
name|get
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|checkName
argument_list|(
name|uri
argument_list|)
expr_stmt|;
return|return
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fs.default.name not set, or set to an invalid value. Create
comment|// one based on a known-good URI
return|return
name|URI
operator|.
name|create
argument_list|(
name|DEFAULT_FS
argument_list|)
return|;
block|}
block|}
comment|/** Set the default filesystem URI in a configuration.    * @param conf the configuration to alter    * @param uri the new default filesystem uri    */
DECL|method|setDefaultUri (Configuration conf, URI uri)
specifier|public
specifier|static
name|void
name|setDefaultUri
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|URI
name|uri
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Set the default filesystem URI in a configuration.    * @param conf the configuration to alter    * @param uri the new default filesystem uri    * @throws IOException if the URI is invalid.    */
DECL|method|setDefaultUri (Configuration conf, String uri)
specifier|public
specifier|static
name|void
name|setDefaultUri
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|checkName
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|URI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Called after a new FileSystem instance is constructed.    * @param name a uri whose authority section names the host, port, etc.    *   for this FileSystem    * @param conf the configuration    */
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|=
name|getStatistics
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
argument_list|,
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns a URI whose scheme and authority identify this FileSystem.*/
DECL|method|getUri ()
specifier|public
specifier|abstract
name|URI
name|getUri
parameter_list|()
function_decl|;
comment|/** Checks that a FileSystem name is given in an understandable format.    * The old "local" alias for "file:///" is unsupported, as are any    * URIs without a scheme component.    * @throws IOException if a name is in an unsupported format    */
DECL|method|checkName (String name)
specifier|private
specifier|static
name|void
name|checkName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|name
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Null FS name provided to checkName()"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
literal|"local"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FileSystem 'local' is not supported; use 'file:///'"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Try parsing this into a URI
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// No scheme; don't know how to parse this.
if|if
condition|(
literal|null
operator|==
name|uri
operator|.
name|getScheme
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FileSystem name '"
operator|+
name|name
operator|+
literal|"' is provided in an unsupported format. (Try 'hdfs://"
operator|+
name|name
operator|+
literal|"' instead?)"
argument_list|)
throw|;
block|}
comment|// This may have been a misparse. java.net.URI specifies that
comment|// a URI is of the form:
comment|// URI ::= [SCHEME-PART:]SCHEME-SPECIFIC-PART
comment|//
comment|// The scheme-specific-part may be parsed in numerous ways, but if
comment|// it starts with a '/' character, that makes it a "hierarchical URI",
comment|// subject to the following parsing:
comment|// SCHEME-SPECIFIC-PART ::= "//" AUTHORITY-PART
comment|// AUTHORITY-PART ::= [USER-INFO-PART] HOSTNAME [ ":" PORT ]
comment|//
comment|// In Hadoop, we require a host-based authority as well.
comment|// java.net.URI parses left-to-right, so deprecated hostnames of the
comment|// form 'foo:8020' will have 'foo' as their scheme and '8020' as their
comment|// scheme-specific-part. We don't want this behavior.
if|if
condition|(
literal|null
operator|==
name|uri
operator|.
name|getAuthority
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FileSystem name '"
operator|+
name|name
operator|+
literal|"' is provided in an unsupported format. (Try 'hdfs://"
operator|+
name|name
operator|+
literal|"' instead?)"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|use
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"FileSystem name cannot be understood as a URI"
argument_list|,
name|use
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Get the local file syste    * @param conf the configuration to configure the file system with    * @return a LocalFileSystem    */
DECL|method|getLocal (Configuration conf)
specifier|public
specifier|static
name|LocalFileSystem
name|getLocal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|LocalFileSystem
operator|)
name|get
argument_list|(
name|LocalFileSystem
operator|.
name|NAME
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Returns the FileSystem for this URI's scheme and authority.  The scheme    * of the URI determines a configuration property name,    *<tt>fs.<i>scheme</i>.class</tt> whose value names the FileSystem class.    * The entire URI is passed to the FileSystem instance's initialize method.    */
DECL|method|get (URI uri, Configuration conf)
specifier|public
specifier|static
name|FileSystem
name|get
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
comment|// no scheme: use default FS
return|return
name|get
argument_list|(
name|conf
argument_list|)
return|;
block|}
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
comment|// no authority
name|URI
name|defaultUri
init|=
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|scheme
operator|.
name|equals
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|)
comment|// if scheme matches default
operator|&&
name|defaultUri
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//& default has authority
return|return
name|get
argument_list|(
name|defaultUri
argument_list|,
name|conf
argument_list|)
return|;
comment|// return default
block|}
block|}
name|String
name|disableCacheName
init|=
name|String
operator|.
name|format
argument_list|(
literal|"fs.%s.impl.disable.cache"
argument_list|,
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|disableCacheName
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
name|createFileSystem
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
return|return
name|CACHE
operator|.
name|get
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Returns the FileSystem for this URI's scheme and authority.  The scheme    * of the URI determines a configuration property name,    *<tt>fs.<i>scheme</i>.class</tt> whose value names the FileSystem class.    * The entire URI is passed to the FileSystem instance's initialize method.    * This always returns a new FileSystem object.    */
DECL|method|newInstance (URI uri, Configuration conf)
specifier|public
specifier|static
name|FileSystem
name|newInstance
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
comment|// no scheme: use default FS
return|return
name|newInstance
argument_list|(
name|conf
argument_list|)
return|;
block|}
if|if
condition|(
name|authority
operator|==
literal|null
condition|)
block|{
comment|// no authority
name|URI
name|defaultUri
init|=
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|scheme
operator|.
name|equals
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|)
comment|// if scheme matches default
operator|&&
name|defaultUri
operator|.
name|getAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//& default has authority
return|return
name|newInstance
argument_list|(
name|defaultUri
argument_list|,
name|conf
argument_list|)
return|;
comment|// return default
block|}
block|}
return|return
name|CACHE
operator|.
name|getUnique
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Returns a unique configured filesystem implementation.    * This always returns a new FileSystem object. */
DECL|method|newInstance (Configuration conf)
specifier|public
specifier|static
name|FileSystem
name|newInstance
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newInstance
argument_list|(
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Get a unique local file system object    * @param conf the configuration to configure the file system with    * @return a LocalFileSystem    * This always returns a new FileSystem object.    */
DECL|method|newInstanceLocal (Configuration conf)
specifier|public
specifier|static
name|LocalFileSystem
name|newInstanceLocal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|LocalFileSystem
operator|)
name|newInstance
argument_list|(
name|LocalFileSystem
operator|.
name|NAME
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/**    * Close all cached filesystems. Be sure those filesystems are not    * used anymore.    *     * @throws IOException    */
DECL|method|closeAll ()
specifier|public
specifier|static
name|void
name|closeAll
parameter_list|()
throws|throws
name|IOException
block|{
name|CACHE
operator|.
name|closeAll
argument_list|()
expr_stmt|;
block|}
comment|/** Make sure that a path specifies a FileSystem. */
DECL|method|makeQualified (Path path)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|checkPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|path
operator|.
name|makeQualified
argument_list|(
name|this
operator|.
name|getUri
argument_list|()
argument_list|,
name|this
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
return|;
block|}
comment|/** create a file with the provided permission    * The permission of the file is set to be the provided permission as in    * setPermission, not permission&~umask    *     * It is implemented using two RPCs. It is understood that it is inefficient,    * but the implementation is thread-safe. The other option is to change the    * value of umask in configuration to be 0, but it is not thread-safe.    *     * @param fs file system handle    * @param file the name of the file to be created    * @param permission the permission of the file    * @return an output stream    * @throws IOException    */
DECL|method|create (FileSystem fs, Path file, FsPermission permission)
specifier|public
specifier|static
name|FSDataOutputStream
name|create
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|file
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create the file with default permission
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// set its permission to the supplied one
name|fs
operator|.
name|setPermission
argument_list|(
name|file
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
comment|/** create a directory with the provided permission    * The permission of the directory is set to be the provided permission as in    * setPermission, not permission&~umask    *     * @see #create(FileSystem, Path, FsPermission)    *     * @param fs file system handle    * @param dir the name of the directory to be created    * @param permission the permission of the directory    * @return true if the directory creation succeeds; false otherwise    * @throws IOException    */
DECL|method|mkdirs (FileSystem fs, Path dir, FsPermission permission)
specifier|public
specifier|static
name|boolean
name|mkdirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
comment|// create the directory using the default permission
name|boolean
name|result
init|=
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// set its permission to be the supplied one
name|fs
operator|.
name|setPermission
argument_list|(
name|dir
argument_list|,
name|permission
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|///////////////////////////////////////////////////////////////
comment|// FileSystem
comment|///////////////////////////////////////////////////////////////
DECL|method|FileSystem ()
specifier|protected
name|FileSystem
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Check that a Path belongs to this FileSystem. */
DECL|method|checkPath (Path path)
specifier|protected
name|void
name|checkPath
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|URI
name|uri
init|=
name|path
operator|.
name|toUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
comment|// fs is relative
return|return;
name|String
name|thisScheme
init|=
name|this
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|thatScheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|String
name|thisAuthority
init|=
name|this
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|thatAuthority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
comment|//authority and scheme are not case sensitive
if|if
condition|(
name|thisScheme
operator|.
name|equalsIgnoreCase
argument_list|(
name|thatScheme
argument_list|)
condition|)
block|{
comment|// schemes match
if|if
condition|(
name|thisAuthority
operator|==
name|thatAuthority
operator|||
comment|//& authorities match
operator|(
name|thisAuthority
operator|!=
literal|null
operator|&&
name|thisAuthority
operator|.
name|equalsIgnoreCase
argument_list|(
name|thatAuthority
argument_list|)
operator|)
condition|)
return|return;
if|if
condition|(
name|thatAuthority
operator|==
literal|null
operator|&&
comment|// path's authority is null
name|thisAuthority
operator|!=
literal|null
condition|)
block|{
comment|// fs has an authority
name|URI
name|defaultUri
init|=
name|getDefaultUri
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
comment|//& is the conf default
if|if
condition|(
name|thisScheme
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
name|thisAuthority
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultUri
operator|.
name|getAuthority
argument_list|()
argument_list|)
condition|)
return|return;
try|try
block|{
comment|// or the default fs's uri
name|defaultUri
operator|=
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getUri
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|thisScheme
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultUri
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|&&
name|thisAuthority
operator|.
name|equalsIgnoreCase
argument_list|(
name|defaultUri
operator|.
name|getAuthority
argument_list|()
argument_list|)
condition|)
return|return;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong FS: "
operator|+
name|path
operator|+
literal|", expected: "
operator|+
name|this
operator|.
name|getUri
argument_list|()
argument_list|)
throw|;
block|}
comment|/**    * Return an array containing hostnames, offset and size of     * portions of the given file.  For a nonexistent     * file or regions, null will be returned.    *    * This call is most helpful with DFS, where it returns     * hostnames of machines that contain the given file.    *    * The FileSystem will simply return an elt containing 'localhost'.    */
DECL|method|getFileBlockLocations (FileStatus file, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|start
operator|<
literal|0
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid start or len parameter"
argument_list|)
throw|;
block|}
if|if
condition|(
name|file
operator|.
name|getLen
argument_list|()
operator|<
name|start
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
name|String
index|[]
name|name
init|=
block|{
literal|"localhost:50010"
block|}
decl_stmt|;
name|String
index|[]
name|host
init|=
block|{
literal|"localhost"
block|}
decl_stmt|;
return|return
operator|new
name|BlockLocation
index|[]
block|{
operator|new
name|BlockLocation
argument_list|(
name|name
argument_list|,
name|host
argument_list|,
literal|0
argument_list|,
name|file
operator|.
name|getLen
argument_list|()
argument_list|)
block|}
return|;
block|}
comment|/**    * Return an array containing hostnames, offset and size of     * portions of the given file.  For a nonexistent     * file or regions, null will be returned.    *    * This call is most helpful with DFS, where it returns     * hostnames of machines that contain the given file.    *    * The FileSystem will simply return an elt containing 'localhost'.    */
DECL|method|getFileBlockLocations (Path p, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|FileStatus
name|file
init|=
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
name|getFileBlockLocations
argument_list|(
name|file
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**    * Return a set of server default configuration values    * @return server default configuration values    * @throws IOException    */
DECL|method|getServerDefaults ()
specifier|public
name|FsServerDefaults
name|getServerDefaults
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
return|return
operator|new
name|FsServerDefaults
argument_list|(
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.bytes.per.checksum"
argument_list|,
literal|512
argument_list|)
argument_list|,
literal|64
operator|*
literal|1024
argument_list|,
name|getDefaultReplication
argument_list|()
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataInputStream at the indicated Path.    * @param f the file name to open    * @param bufferSize the size of the buffer to be used.    */
DECL|method|open (Path f, int bufferSize)
specifier|public
specifier|abstract
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Opens an FSDataInputStream at the indicated Path.    * @param f the file to open    */
DECL|method|open (Path f)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|open
argument_list|(
name|f
argument_list|,
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path.    * Files are overwritten by default.    */
DECL|method|create (Path f)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path.    */
DECL|method|create (Path f, boolean overwrite)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|getDefaultReplication
argument_list|()
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create an FSDataOutputStream at the indicated Path with write-progress    * reporting.    * Files are overwritten by default.    */
DECL|method|create (Path f, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|getDefaultReplication
argument_list|()
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path.    * Files are overwritten by default.    */
DECL|method|create (Path f, short replication)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|replication
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting.    * Files are overwritten by default.    */
DECL|method|create (Path f, short replication, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|short
name|replication
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
literal|true
argument_list|,
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|replication
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path.    * @param f the file name to open    * @param overwrite if a file with this name already exists, then if true,    *   the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    */
DECL|method|create (Path f, boolean overwrite, int bufferSize )
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|getDefaultReplication
argument_list|()
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting.    * @param f the file name to open    * @param overwrite if a file with this name already exists, then if true,    *   the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    */
DECL|method|create (Path f, boolean overwrite, int bufferSize, Progressable progress )
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|getDefaultReplication
argument_list|()
argument_list|,
name|getDefaultBlockSize
argument_list|()
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path.    * @param f the file name to open    * @param overwrite if a file with this name already exists, then if true,    *   the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    * @param replication required block replication for the file.     */
DECL|method|create (Path f, boolean overwrite, int bufferSize, short replication, long blockSize )
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting.    * @param f the file name to open    * @param overwrite if a file with this name already exists, then if true,    *   the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    * @param replication required block replication for the file.     */
DECL|method|create (Path f, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress )
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|create
argument_list|(
name|f
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|,
name|overwrite
condition|?
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting.    * @deprecated Consider using {@link #create(Path, FsPermission, EnumSet, int, short, long, Progressable)} instead.    * @param f the file name to open    * @param permission    * @param overwrite if a file with this name already exists, then if true,    *   the file will be overwritten, and if false an error will be thrown.    * @param bufferSize the size of the buffer to be used.    * @param replication required block replication for the file.    * @param blockSize    * @param progress    * @throws IOException    * @see #setPermission(Path, FsPermission)    */
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
condition|?
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
else|:
name|EnumSet
operator|.
name|of
argument_list|(
name|CreateFlag
operator|.
name|CREATE
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * Opens an FSDataOutputStream at the indicated Path with write-progress    * reporting.    * @param f the file name to open.    * @param permission - applied against umask    * @param flag determines the semantic of this create.    * @param bufferSize the size of the buffer to be used.    * @param replication required block replication for the file.    * @param blockSize    * @param progress    * @throws IOException    * @see #setPermission(Path, FsPermission)    * @see CreateFlag    */
DECL|method|create (Path f, FsPermission permission, EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
specifier|abstract
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*.    * This create has been added to support the FileContext that processes    * the permission    * with umask before calling this method.    * This a temporary method added to support the transition from FileSystem    * to FileContext for user applications.    */
annotation|@
name|Deprecated
DECL|method|primitiveCreate (Path f, FsPermission absolutePermission, EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize, Progressable progress, int bytesPerChecksum)
specifier|protected
name|FSDataOutputStream
name|primitiveCreate
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|bytesPerChecksum
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Default impl  assumes that permissions do not matter and
comment|// nor does the bytesPerChecksum  hence
comment|// calling the regular create is good enough.
comment|// FSs that implement permissions should override this.
return|return
name|this
operator|.
name|create
argument_list|(
name|f
argument_list|,
name|absolutePermission
argument_list|,
name|flag
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/*.    * This create has been added to support the FileContext that passes    * an absolute permission with (ie umask was already applied)     * This a temporary method added to support the transition from FileSystem    * to FileContext for user applications.    */
annotation|@
name|Deprecated
DECL|method|primitiveCreate (final Path f, final EnumSet<CreateFlag> createFlag, CreateOpts... opts)
specifier|protected
name|FSDataOutputStream
name|primitiveCreate
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|createFlag
parameter_list|,
name|CreateOpts
modifier|...
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPath
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|int
name|bufferSize
init|=
operator|-
literal|1
decl_stmt|;
name|short
name|replication
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|blockSize
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|bytesPerChecksum
init|=
operator|-
literal|1
decl_stmt|;
name|FsPermission
name|permission
init|=
literal|null
decl_stmt|;
name|Progressable
name|progress
init|=
literal|null
decl_stmt|;
name|Boolean
name|createParent
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CreateOpts
name|iOpt
range|:
name|opts
control|)
block|{
if|if
condition|(
name|CreateOpts
operator|.
name|BlockSize
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|iOpt
argument_list|)
condition|)
block|{
if|if
condition|(
name|blockSize
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"multiple varargs of same kind"
argument_list|)
throw|;
block|}
name|blockSize
operator|=
operator|(
operator|(
name|CreateOpts
operator|.
name|BlockSize
operator|)
name|iOpt
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CreateOpts
operator|.
name|BufferSize
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|iOpt
argument_list|)
condition|)
block|{
if|if
condition|(
name|bufferSize
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"multiple varargs of same kind"
argument_list|)
throw|;
block|}
name|bufferSize
operator|=
operator|(
operator|(
name|CreateOpts
operator|.
name|BufferSize
operator|)
name|iOpt
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CreateOpts
operator|.
name|ReplicationFactor
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|iOpt
argument_list|)
condition|)
block|{
if|if
condition|(
name|replication
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"multiple varargs of same kind"
argument_list|)
throw|;
block|}
name|replication
operator|=
operator|(
operator|(
name|CreateOpts
operator|.
name|ReplicationFactor
operator|)
name|iOpt
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CreateOpts
operator|.
name|BytesPerChecksum
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|iOpt
argument_list|)
condition|)
block|{
if|if
condition|(
name|bytesPerChecksum
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"multiple varargs of same kind"
argument_list|)
throw|;
block|}
name|bytesPerChecksum
operator|=
operator|(
operator|(
name|CreateOpts
operator|.
name|BytesPerChecksum
operator|)
name|iOpt
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CreateOpts
operator|.
name|Perms
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|iOpt
argument_list|)
condition|)
block|{
if|if
condition|(
name|permission
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"multiple varargs of same kind"
argument_list|)
throw|;
block|}
name|permission
operator|=
operator|(
operator|(
name|CreateOpts
operator|.
name|Perms
operator|)
name|iOpt
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CreateOpts
operator|.
name|Progress
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|iOpt
argument_list|)
condition|)
block|{
if|if
condition|(
name|progress
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"multiple varargs of same kind"
argument_list|)
throw|;
block|}
name|progress
operator|=
operator|(
operator|(
name|CreateOpts
operator|.
name|Progress
operator|)
name|iOpt
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|CreateOpts
operator|.
name|CreateParent
operator|.
name|class
operator|.
name|isInstance
argument_list|(
name|iOpt
argument_list|)
condition|)
block|{
if|if
condition|(
name|createParent
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"multiple varargs of same kind"
argument_list|)
throw|;
block|}
name|createParent
operator|=
operator|(
operator|(
name|CreateOpts
operator|.
name|CreateParent
operator|)
name|iOpt
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unkown CreateOpts of type "
operator|+
name|iOpt
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|blockSize
operator|%
name|bytesPerChecksum
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"blockSize should be a multiple of checksumsize"
argument_list|)
throw|;
block|}
name|FsServerDefaults
name|ssDef
init|=
name|getServerDefaults
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockSize
operator|==
operator|-
literal|1
condition|)
block|{
name|blockSize
operator|=
name|ssDef
operator|.
name|getBlockSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bufferSize
operator|==
operator|-
literal|1
condition|)
block|{
name|bufferSize
operator|=
name|ssDef
operator|.
name|getFileBufferSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|replication
operator|==
operator|-
literal|1
condition|)
block|{
name|replication
operator|=
name|ssDef
operator|.
name|getReplication
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|permission
operator|==
literal|null
condition|)
block|{
name|permission
operator|=
name|FsPermission
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|createParent
operator|==
literal|null
condition|)
block|{
name|createParent
operator|=
literal|false
expr_stmt|;
block|}
comment|// Default impl  assumes that permissions do not matter and
comment|// nor does the bytesPerChecksum  hence
comment|// calling the regular create is good enough.
comment|// FSs that implement permissions should override this.
if|if
condition|(
operator|!
name|createParent
condition|)
block|{
comment|// parent must exist.
comment|// since this.create makes parent dirs automatically
comment|// we must throw exception if parent does not exist.
specifier|final
name|FileStatus
name|stat
init|=
name|getFileStatus
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Missing parent:"
operator|+
name|f
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|stat
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParentNotDirectoryException
argument_list|(
literal|"parent is not a dir:"
operator|+
name|f
argument_list|)
throw|;
block|}
comment|// parent does exist - go ahead with create of file.
block|}
return|return
name|this
operator|.
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|createFlag
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
comment|/**    * This version of the mkdirs method assumes that the permission is absolute.    * It has been added to support the FileContext that processes the permission    * with umask before calling this method.    * This a temporary method added to support the transition from FileSystem    * to FileContext for user applications.    */
annotation|@
name|Deprecated
DECL|method|primitiveMkdir (Path f, FsPermission absolutePermission)
specifier|protected
name|boolean
name|primitiveMkdir
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Default impl is to assume that permissions do not matter and hence
comment|// calling the regular mkdirs is good enough.
comment|// FSs that implement permissions should override this.
return|return
name|this
operator|.
name|mkdirs
argument_list|(
name|f
argument_list|,
name|absolutePermission
argument_list|)
return|;
block|}
comment|/**    * This version of the mkdirs method assumes that the permission is absolute.    * It has been added to support the FileContext that processes the permission    * with umask before calling this method.    * This a temporary method added to support the transition from FileSystem    * to FileContext for user applications.    */
annotation|@
name|Deprecated
DECL|method|primitiveMkdir (Path f, FsPermission absolutePermission, boolean createParent)
specifier|protected
name|void
name|primitiveMkdir
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|absolutePermission
parameter_list|,
name|boolean
name|createParent
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|createParent
condition|)
block|{
comment|// parent must exist.
comment|// since the this.mkdirs makes parent dirs automatically
comment|// we must throw exception if parent does not exist.
specifier|final
name|FileStatus
name|stat
init|=
name|getFileStatus
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Missing parent:"
operator|+
name|f
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|stat
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParentNotDirectoryException
argument_list|(
literal|"parent is not a dir"
argument_list|)
throw|;
block|}
comment|// parent does exist - go ahead with mkdir of leaf
block|}
comment|// Default impl is to assume that permissions do not matter and hence
comment|// calling the regular mkdirs is good enough.
comment|// FSs that implement permissions should override this.
if|if
condition|(
operator|!
name|this
operator|.
name|mkdirs
argument_list|(
name|f
argument_list|,
name|absolutePermission
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"mkdir of "
operator|+
name|f
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Creates the given Path as a brand-new zero-length file.  If    * create fails, or if it already existed, return false.    */
DECL|method|createNewFile (Path f)
specifier|public
name|boolean
name|createNewFile
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|create
argument_list|(
name|f
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**    * Append to an existing file (optional operation).    * Same as append(f, getConf().getInt("io.file.buffer.size", 4096), null)    * @param f the existing file to be appended.    * @throws IOException    */
DECL|method|append (Path f)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|append
argument_list|(
name|f
argument_list|,
name|getConf
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"io.file.buffer.size"
argument_list|,
literal|4096
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Append to an existing file (optional operation).    * Same as append(f, bufferSize, null).    * @param f the existing file to be appended.    * @param bufferSize the size of the buffer to be used.    * @throws IOException    */
DECL|method|append (Path f, int bufferSize)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|append
argument_list|(
name|f
argument_list|,
name|bufferSize
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * Append to an existing file (optional operation).    * @param f the existing file to be appended.    * @param bufferSize the size of the buffer to be used.    * @param progress for reporting progress if it is not null.    * @throws IOException    */
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
specifier|abstract
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Set replication for an existing file.    *     * @param src file name    * @param replication new replication    * @throws IOException    * @return true if successful;    *         false if file does not exist or is a directory    */
DECL|method|setReplication (Path src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
comment|/**    * Renames Path src to Path dst.  Can take place on local fs    * or remote DFS.    * @throws IOException on failure    * @return true if rename is successful    */
DECL|method|rename (Path src, Path dst)
specifier|public
specifier|abstract
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Renames Path src to Path dst    *<ul>    *<li    *<li>Fails if src is a file and dst is a directory.    *<li>Fails if src is a directory and dst is a file.    *<li>Fails if the parent of dst does not exist or is a file.    *</ul>    *<p>    * If OVERWRITE option is not passed as an argument, rename fails    * if the dst already exists.    *<p>    * If OVERWRITE option is passed as an argument, rename overwrites    * the dst if it is a file or an empty directory. Rename fails if dst is    * a non-empty directory.    *<p>    * Note that atomicity of rename is dependent on the file system    * implementation. Please refer to the file system documentation for    * details. This default implementation is non atomic.    *<p>    * This method is deprecated since it is a temporary method added to     * support the transition from FileSystem to FileContext for user     * applications.    *     * @param src path to be renamed    * @param dst new path after rename    * @throws IOException on failure    */
annotation|@
name|Deprecated
DECL|method|rename (final Path src, final Path dst, final Rename... options)
specifier|protected
name|void
name|rename
parameter_list|(
specifier|final
name|Path
name|src
parameter_list|,
specifier|final
name|Path
name|dst
parameter_list|,
specifier|final
name|Rename
modifier|...
name|options
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Default implementation
specifier|final
name|FileStatus
name|srcStatus
init|=
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcStatus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"rename source "
operator|+
name|src
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
name|boolean
name|overwrite
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|options
condition|)
block|{
for|for
control|(
name|Rename
name|option
range|:
name|options
control|)
block|{
if|if
condition|(
name|option
operator|==
name|Rename
operator|.
name|OVERWRITE
condition|)
block|{
name|overwrite
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|FileStatus
name|dstStatus
decl_stmt|;
try|try
block|{
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|dstStatus
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dstStatus
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|srcStatus
operator|.
name|isDir
argument_list|()
operator|!=
name|dstStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source "
operator|+
name|src
operator|+
literal|" Destination "
operator|+
name|dst
operator|+
literal|" both should be either file or directory"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"rename destination "
operator|+
name|dst
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
comment|// Delete the destination that is a file or an empty directory
if|if
condition|(
name|dstStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|list
init|=
name|listStatus
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
name|list
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"rename cannot overwrite non empty destination directory "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
name|delete
argument_list|(
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Path
name|parent
init|=
name|dst
operator|.
name|getParent
argument_list|()
decl_stmt|;
specifier|final
name|FileStatus
name|parentStatus
init|=
name|getFileStatus
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentStatus
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"rename destination parent "
operator|+
name|parent
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|parentStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParentNotDirectoryException
argument_list|(
literal|"rename destination parent "
operator|+
name|parent
operator|+
literal|" is a file."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|rename
argument_list|(
name|src
argument_list|,
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"rename from "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
operator|+
literal|" failed."
argument_list|)
throw|;
block|}
block|}
comment|/** Delete a file.    *    * @param f the path to delete.    * @param recursive if path is a directory and set to     * true, the directory is deleted else throws an exception. In    * case of a file the recursive can be set to either true or false.     * @return  true if delete is successful else false.     * @throws IOException    */
DECL|method|delete (Path f, boolean recursive)
specifier|public
specifier|abstract
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Mark a path to be deleted when FileSystem is closed.    * When the JVM shuts down,    * all FileSystem objects will be closed automatically.    * Then,    * the marked path will be deleted as a result of closing the FileSystem.    *    * The path has to exist in the file system.    *     * @param f the path to delete.    * @return  true if deleteOnExit is successful, otherwise false.    * @throws IOException    */
DECL|method|deleteOnExit (Path f)
specifier|public
name|boolean
name|deleteOnExit
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
synchronized|synchronized
init|(
name|deleteOnExit
init|)
block|{
name|deleteOnExit
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Delete all files that were marked as delete-on-exit. This recursively    * deletes all files in the specified paths.    */
DECL|method|processDeleteOnExit ()
specifier|protected
name|void
name|processDeleteOnExit
parameter_list|()
block|{
synchronized|synchronized
init|(
name|deleteOnExit
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Path
argument_list|>
name|iter
init|=
name|deleteOnExit
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Path
name|path
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring failure to deleteOnExit for path "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Check if exists.    * @param f source file    */
DECL|method|exists (Path f)
specifier|public
name|boolean
name|exists
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** True iff the named path is a directory.    * Note: Avoid using this method. Instead reuse the FileStatus     * returned by getFileStatus() or listStatus() methods.    */
DECL|method|isDirectory (Path f)
specifier|public
name|boolean
name|isDirectory
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|isDir
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// f does not exist
block|}
block|}
comment|/** True iff the named path is a regular file.    * Note: Avoid using this method. Instead reuse the FileStatus     * returned by getFileStatus() or listStatus() methods.    */
DECL|method|isFile (Path f)
specifier|public
name|boolean
name|isFile
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|!
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|isDir
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// f does not exist
block|}
block|}
comment|/** Return the {@link ContentSummary} of a given {@link Path}. */
DECL|method|getContentSummary (Path f)
specifier|public
name|ContentSummary
name|getContentSummary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// f is a file
return|return
operator|new
name|ContentSummary
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// f is a directory
name|long
index|[]
name|summary
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|}
decl_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|listStatus
argument_list|(
name|f
argument_list|)
control|)
block|{
name|ContentSummary
name|c
init|=
name|s
operator|.
name|isDir
argument_list|()
condition|?
name|getContentSummary
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
else|:
operator|new
name|ContentSummary
argument_list|(
name|s
operator|.
name|getLen
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|summary
index|[
literal|0
index|]
operator|+=
name|c
operator|.
name|getLength
argument_list|()
expr_stmt|;
name|summary
index|[
literal|1
index|]
operator|+=
name|c
operator|.
name|getFileCount
argument_list|()
expr_stmt|;
name|summary
index|[
literal|2
index|]
operator|+=
name|c
operator|.
name|getDirectoryCount
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|ContentSummary
argument_list|(
name|summary
index|[
literal|0
index|]
argument_list|,
name|summary
index|[
literal|1
index|]
argument_list|,
name|summary
index|[
literal|2
index|]
argument_list|)
return|;
block|}
DECL|field|DEFAULT_FILTER
specifier|final
specifier|private
specifier|static
name|PathFilter
name|DEFAULT_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
comment|/**    * List the statuses of the files/directories in the given path if the path is    * a directory.    *     * @param f given path    * @return the statuses of the files/directories in the given patch    * @throws FileNotFoundException when the path does not exist;    *         IOException see specific implementation    */
DECL|method|listStatus (Path f)
specifier|public
specifier|abstract
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
function_decl|;
comment|/*    * Filter files/directories in the given path using the user-supplied path    * filter. Results are added to the given array<code>results</code>.    */
DECL|method|listStatus (ArrayList<FileStatus> results, Path f, PathFilter filter)
specifier|private
name|void
name|listStatus
parameter_list|(
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|results
parameter_list|,
name|Path
name|f
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|FileStatus
name|listing
index|[]
init|=
name|listStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listing
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|listing
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|listing
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Filter files/directories in the given path using the user-supplied path    * filter.    *     * @param f    *          a path name    * @param filter    *          the user-supplied path filter    * @return an array of FileStatus objects for the files under the given path    *         after applying the filter    * @throws FileNotFoundException when the path does not exist;    *         IOException see specific implementation       */
DECL|method|listStatus (Path f, PathFilter filter)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|listStatus
argument_list|(
name|results
argument_list|,
name|f
argument_list|,
name|filter
argument_list|)
expr_stmt|;
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Filter files/directories in the given list of paths using default    * path filter.    *     * @param files    *          a list of paths    * @return a list of statuses for the files under the given paths after    *         applying the filter default Path filter    * @throws FileNotFoundException when the path does not exist;    *         IOException see specific implementation    */
DECL|method|listStatus (Path[] files)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
index|[]
name|files
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
return|return
name|listStatus
argument_list|(
name|files
argument_list|,
name|DEFAULT_FILTER
argument_list|)
return|;
block|}
comment|/**    * Filter files/directories in the given list of paths using user-supplied    * path filter.    *     * @param files    *          a list of paths    * @param filter    *          the user-supplied path filter    * @return a list of statuses for the files under the given paths after    *         applying the filter    * @throws FileNotFoundException when the path does not exist;    *         IOException see specific implementation    */
DECL|method|listStatus (Path[] files, PathFilter filter)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
index|[]
name|files
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|listStatus
argument_list|(
name|results
argument_list|,
name|files
index|[
name|i
index|]
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    *<p>Return all the files that match filePattern and are not checksum    * files. Results are sorted by their names.    *     *<p>    * A filename pattern is composed of<i>regular</i> characters and    *<i>special pattern matching</i> characters, which are:    *    *<dl>    *<dd>    *<dl>    *<p>    *<dt><tt> ?</tt>    *<dd> Matches any single character.    *    *<p>    *<dt><tt> *</tt>    *<dd> Matches zero or more characters.    *    *<p>    *<dt><tt> [<i>abc</i>]</tt>    *<dd> Matches a single character from character set    *<tt>{<i>a,b,c</i>}</tt>.    *    *<p>    *<dt><tt> [<i>a</i>-<i>b</i>]</tt>    *<dd> Matches a single character from the character range    *<tt>{<i>a...b</i>}</tt>.  Note that character<tt><i>a</i></tt> must be    *     lexicographically less than or equal to character<tt><i>b</i></tt>.    *    *<p>    *<dt><tt> [^<i>a</i>]</tt>    *<dd> Matches a single character that is not from character set or range    *<tt>{<i>a</i>}</tt>.  Note that the<tt>^</tt> character must occur    *     immediately to the right of the opening bracket.    *    *<p>    *<dt><tt> \<i>c</i></tt>    *<dd> Removes (escapes) any special meaning of character<i>c</i>.    *    *<p>    *<dt><tt> {ab,cd}</tt>    *<dd> Matches a string from the string set<tt>{<i>ab, cd</i>}</tt>    *        *<p>    *<dt><tt> {ab,c{de,fh}}</tt>    *<dd> Matches a string from the string set<tt>{<i>ab, cde, cfh</i>}</tt>    *    *</dl>    *</dd>    *</dl>    *    * @param pathPattern a regular expression specifying a pth pattern     * @return an array of paths that match the path pattern    * @throws IOException    */
DECL|method|globStatus (Path pathPattern)
specifier|public
name|FileStatus
index|[]
name|globStatus
parameter_list|(
name|Path
name|pathPattern
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|globStatus
argument_list|(
name|pathPattern
argument_list|,
name|DEFAULT_FILTER
argument_list|)
return|;
block|}
comment|/**    * Return an array of FileStatus objects whose path names match pathPattern    * and is accepted by the user-supplied path filter. Results are sorted by    * their path names.    * Return null if pathPattern has no glob and the path does not exist.    * Return an empty array if pathPattern has a glob and no path matches it.     *     * @param pathPattern    *          a regular expression specifying the path pattern    * @param filter    *          a user-supplied path filter    * @return an array of FileStatus objects    * @throws IOException if any I/O error occurs when fetching file status    */
DECL|method|globStatus (Path pathPattern, PathFilter filter)
specifier|public
name|FileStatus
index|[]
name|globStatus
parameter_list|(
name|Path
name|pathPattern
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filename
init|=
name|pathPattern
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|filePatterns
init|=
name|GlobExpander
operator|.
name|expand
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|filePatterns
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|globStatusInternal
argument_list|(
name|pathPattern
argument_list|,
name|filter
argument_list|)
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|filePattern
range|:
name|filePatterns
control|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|globStatusInternal
argument_list|(
operator|new
name|Path
argument_list|(
name|filePattern
argument_list|)
argument_list|,
name|filter
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
DECL|method|globStatusInternal (Path pathPattern, PathFilter filter)
specifier|private
name|FileStatus
index|[]
name|globStatusInternal
parameter_list|(
name|Path
name|pathPattern
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
index|[]
name|parents
init|=
operator|new
name|Path
index|[
literal|1
index|]
decl_stmt|;
name|int
name|level
init|=
literal|0
decl_stmt|;
name|String
name|filename
init|=
name|pathPattern
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// path has only zero component
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|filename
argument_list|)
operator|||
name|Path
operator|.
name|SEPARATOR
operator|.
name|equals
argument_list|(
name|filename
argument_list|)
condition|)
block|{
return|return
name|getFileStatus
argument_list|(
operator|new
name|Path
index|[]
block|{
name|pathPattern
block|}
argument_list|)
return|;
block|}
comment|// path has at least one component
name|String
index|[]
name|components
init|=
name|filename
operator|.
name|split
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
comment|// get the first component
if|if
condition|(
name|pathPattern
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|parents
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
expr_stmt|;
name|level
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|parents
index|[
literal|0
index|]
operator|=
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|CUR_DIR
argument_list|)
expr_stmt|;
block|}
comment|// glob the paths that match the parent path, i.e., [0, components.length-1]
name|boolean
index|[]
name|hasGlob
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|Path
index|[]
name|parentPaths
init|=
name|globPathsLevel
argument_list|(
name|parents
argument_list|,
name|components
argument_list|,
name|level
argument_list|,
name|hasGlob
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|results
decl_stmt|;
if|if
condition|(
name|parentPaths
operator|==
literal|null
operator|||
name|parentPaths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|results
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// Now work on the last component of the path
name|GlobFilter
name|fp
init|=
operator|new
name|GlobFilter
argument_list|(
name|components
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|fp
operator|.
name|hasPattern
argument_list|()
condition|)
block|{
comment|// last component has a pattern
comment|// list parent directories and then glob the results
name|results
operator|=
name|listStatus
argument_list|(
name|parentPaths
argument_list|,
name|fp
argument_list|)
expr_stmt|;
name|hasGlob
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// last component does not have a pattern
comment|// get all the path names
name|ArrayList
argument_list|<
name|Path
argument_list|>
name|filteredPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
name|parentPaths
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parentPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parentPaths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parentPaths
index|[
name|i
index|]
argument_list|,
name|components
index|[
name|components
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fp
operator|.
name|accept
argument_list|(
name|parentPaths
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|filteredPaths
operator|.
name|add
argument_list|(
name|parentPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// get all their statuses
name|results
operator|=
name|getFileStatus
argument_list|(
name|filteredPaths
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
name|filteredPaths
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Decide if the pathPattern contains a glob or not
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|hasGlob
index|[
literal|0
index|]
condition|)
block|{
name|results
operator|=
operator|new
name|FileStatus
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|results
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|hasGlob
index|[
literal|0
index|]
condition|)
block|{
name|results
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/*    * For a path of N components, return a list of paths that match the    * components [<code>level</code>,<code>N-1</code>].    */
DECL|method|globPathsLevel (Path[] parents, String[] filePattern, int level, boolean[] hasGlob)
specifier|private
name|Path
index|[]
name|globPathsLevel
parameter_list|(
name|Path
index|[]
name|parents
parameter_list|,
name|String
index|[]
name|filePattern
parameter_list|,
name|int
name|level
parameter_list|,
name|boolean
index|[]
name|hasGlob
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|level
operator|==
name|filePattern
operator|.
name|length
operator|-
literal|1
condition|)
return|return
name|parents
return|;
if|if
condition|(
name|parents
operator|==
literal|null
operator|||
name|parents
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|GlobFilter
name|fp
init|=
operator|new
name|GlobFilter
argument_list|(
name|filePattern
index|[
name|level
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|fp
operator|.
name|hasPattern
argument_list|()
condition|)
block|{
name|parents
operator|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|listStatus
argument_list|(
name|parents
argument_list|,
name|fp
argument_list|)
argument_list|)
expr_stmt|;
name|hasGlob
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|parents
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|parents
index|[
name|i
index|]
argument_list|,
name|filePattern
index|[
name|level
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|globPathsLevel
argument_list|(
name|parents
argument_list|,
name|filePattern
argument_list|,
name|level
operator|+
literal|1
argument_list|,
name|hasGlob
argument_list|)
return|;
block|}
comment|/* A class that could decide if a string matches the glob or not */
DECL|class|GlobFilter
specifier|private
specifier|static
class|class
name|GlobFilter
implements|implements
name|PathFilter
block|{
DECL|field|userFilter
specifier|private
name|PathFilter
name|userFilter
init|=
name|DEFAULT_FILTER
decl_stmt|;
DECL|field|regex
specifier|private
name|Pattern
name|regex
decl_stmt|;
DECL|field|hasPattern
specifier|private
name|boolean
name|hasPattern
init|=
literal|false
decl_stmt|;
comment|/** Default pattern character: Escape any special meaning. */
DECL|field|PAT_ESCAPE
specifier|private
specifier|static
specifier|final
name|char
name|PAT_ESCAPE
init|=
literal|'\\'
decl_stmt|;
comment|/** Default pattern character: Any single character. */
DECL|field|PAT_ANY
specifier|private
specifier|static
specifier|final
name|char
name|PAT_ANY
init|=
literal|'.'
decl_stmt|;
comment|/** Default pattern character: Character set close. */
DECL|field|PAT_SET_CLOSE
specifier|private
specifier|static
specifier|final
name|char
name|PAT_SET_CLOSE
init|=
literal|']'
decl_stmt|;
DECL|method|GlobFilter ()
name|GlobFilter
parameter_list|()
block|{     }
DECL|method|GlobFilter (String filePattern)
name|GlobFilter
parameter_list|(
name|String
name|filePattern
parameter_list|)
throws|throws
name|IOException
block|{
name|setRegex
argument_list|(
name|filePattern
argument_list|)
expr_stmt|;
block|}
DECL|method|GlobFilter (String filePattern, PathFilter filter)
name|GlobFilter
parameter_list|(
name|String
name|filePattern
parameter_list|,
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|userFilter
operator|=
name|filter
expr_stmt|;
name|setRegex
argument_list|(
name|filePattern
argument_list|)
expr_stmt|;
block|}
DECL|method|isJavaRegexSpecialChar (char pChar)
specifier|private
name|boolean
name|isJavaRegexSpecialChar
parameter_list|(
name|char
name|pChar
parameter_list|)
block|{
return|return
name|pChar
operator|==
literal|'.'
operator|||
name|pChar
operator|==
literal|'$'
operator|||
name|pChar
operator|==
literal|'('
operator|||
name|pChar
operator|==
literal|')'
operator|||
name|pChar
operator|==
literal|'|'
operator|||
name|pChar
operator|==
literal|'+'
return|;
block|}
DECL|method|setRegex (String filePattern)
name|void
name|setRegex
parameter_list|(
name|String
name|filePattern
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
decl_stmt|;
name|int
name|setOpen
decl_stmt|;
name|int
name|curlyOpen
decl_stmt|;
name|boolean
name|setRange
decl_stmt|;
name|StringBuilder
name|fileRegex
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Validate the pattern
name|len
operator|=
name|filePattern
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
return|return;
name|setOpen
operator|=
literal|0
expr_stmt|;
name|setRange
operator|=
literal|false
expr_stmt|;
name|curlyOpen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|pCh
decl_stmt|;
comment|// Examine a single pattern character
name|pCh
operator|=
name|filePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|pCh
operator|==
name|PAT_ESCAPE
condition|)
block|{
name|fileRegex
operator|.
name|append
argument_list|(
name|pCh
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|len
condition|)
name|error
argument_list|(
literal|"An escaped character does not present"
argument_list|,
name|filePattern
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|pCh
operator|=
name|filePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isJavaRegexSpecialChar
argument_list|(
name|pCh
argument_list|)
condition|)
block|{
name|fileRegex
operator|.
name|append
argument_list|(
name|PAT_ESCAPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|'*'
condition|)
block|{
name|fileRegex
operator|.
name|append
argument_list|(
name|PAT_ANY
argument_list|)
expr_stmt|;
name|hasPattern
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|'?'
condition|)
block|{
name|pCh
operator|=
name|PAT_ANY
expr_stmt|;
name|hasPattern
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|'{'
condition|)
block|{
name|fileRegex
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|pCh
operator|=
literal|'('
expr_stmt|;
name|curlyOpen
operator|++
expr_stmt|;
name|hasPattern
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|','
operator|&&
name|curlyOpen
operator|>
literal|0
condition|)
block|{
name|fileRegex
operator|.
name|append
argument_list|(
literal|")|"
argument_list|)
expr_stmt|;
name|pCh
operator|=
literal|'('
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|'}'
operator|&&
name|curlyOpen
operator|>
literal|0
condition|)
block|{
comment|// End of a group
name|curlyOpen
operator|--
expr_stmt|;
name|fileRegex
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|pCh
operator|=
literal|')'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|'['
operator|&&
name|setOpen
operator|==
literal|0
condition|)
block|{
name|setOpen
operator|++
expr_stmt|;
name|hasPattern
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|'^'
operator|&&
name|setOpen
operator|>
literal|0
condition|)
block|{         }
elseif|else
if|if
condition|(
name|pCh
operator|==
literal|'-'
operator|&&
name|setOpen
operator|>
literal|0
condition|)
block|{
comment|// Character set range
name|setRange
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
name|PAT_SET_CLOSE
operator|&&
name|setRange
condition|)
block|{
comment|// Incomplete character set range
name|error
argument_list|(
literal|"Incomplete character set range"
argument_list|,
name|filePattern
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pCh
operator|==
name|PAT_SET_CLOSE
operator|&&
name|setOpen
operator|>
literal|0
condition|)
block|{
comment|// End of a character set
if|if
condition|(
name|setOpen
operator|<
literal|2
condition|)
name|error
argument_list|(
literal|"Unexpected end of set"
argument_list|,
name|filePattern
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|setOpen
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|setOpen
operator|>
literal|0
condition|)
block|{
comment|// Normal character, or the end of a character set range
name|setOpen
operator|++
expr_stmt|;
name|setRange
operator|=
literal|false
expr_stmt|;
block|}
name|fileRegex
operator|.
name|append
argument_list|(
name|pCh
argument_list|)
expr_stmt|;
block|}
comment|// Check for a well-formed pattern
if|if
condition|(
name|setOpen
operator|>
literal|0
operator|||
name|setRange
operator|||
name|curlyOpen
operator|>
literal|0
condition|)
block|{
comment|// Incomplete character set or character range
name|error
argument_list|(
literal|"Expecting set closure character or end of range, or }"
argument_list|,
name|filePattern
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|regex
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|fileRegex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hasPattern ()
name|boolean
name|hasPattern
parameter_list|()
block|{
return|return
name|hasPattern
return|;
block|}
DECL|method|accept (Path path)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|regex
operator|.
name|matcher
argument_list|(
name|path
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
operator|&&
name|userFilter
operator|.
name|accept
argument_list|(
name|path
argument_list|)
return|;
block|}
DECL|method|error (String s, String pattern, int pos)
specifier|private
name|void
name|error
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|pattern
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal file pattern: "
operator|+
name|s
operator|+
literal|" for glob "
operator|+
name|pattern
operator|+
literal|" at "
operator|+
name|pos
argument_list|)
throw|;
block|}
block|}
comment|/** Return the current user's home directory in this filesystem.    * The default implementation returns "/user/$USER/".    */
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/user/"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Set the current working directory for the given file system. All relative    * paths will be resolved relative to it.    *     * @param new_dir    */
DECL|method|setWorkingDirectory (Path new_dir)
specifier|public
specifier|abstract
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|new_dir
parameter_list|)
function_decl|;
comment|/**    * Get the current working directory for the given file system    * @return the directory pathname    */
DECL|method|getWorkingDirectory ()
specifier|public
specifier|abstract
name|Path
name|getWorkingDirectory
parameter_list|()
function_decl|;
comment|/**    * Note: with the new FilesContext class, getWorkingDirectory()    * will be removed.     * The working directory is implemented in FilesContext.    *     * Some file systems like LocalFileSystem have an initial workingDir    * that we use as the starting workingDir. For other file systems    * like HDFS there is no built in notion of an inital workingDir.    *     * @return if there is built in notion of workingDir then it    * is returned; else a null is returned.    */
DECL|method|getInitialWorkingDirectory ()
specifier|protected
name|Path
name|getInitialWorkingDirectory
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Call {@link #mkdirs(Path, FsPermission)} with default permission.    */
DECL|method|mkdirs (Path f)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|mkdirs
argument_list|(
name|f
argument_list|,
name|FsPermission
operator|.
name|getDefault
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Make the given file and all non-existent parents into    * directories. Has the semantics of Unix 'mkdir -p'.    * Existence of the directory hierarchy is not an error.    */
DECL|method|mkdirs (Path f, FsPermission permission )
specifier|public
specifier|abstract
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * The src file is on the local disk.  Add it to FS at    * the given dst name and the source is kept intact afterwards    */
DECL|method|copyFromLocalFile (Path src, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src files is on the local disk.  Add it to FS at    * the given dst name, removing the source afterwards.    */
DECL|method|moveFromLocalFile (Path[] srcs, Path dst)
specifier|public
name|void
name|moveFromLocalFile
parameter_list|(
name|Path
index|[]
name|srcs
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyFromLocalFile
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|srcs
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src file is on the local disk.  Add it to FS at    * the given dst name, removing the source afterwards.    */
DECL|method|moveFromLocalFile (Path src, Path dst)
specifier|public
name|void
name|moveFromLocalFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyFromLocalFile
argument_list|(
literal|true
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src file is on the local disk.  Add it to FS at    * the given dst name.    * delSrc indicates if the source should be removed    */
DECL|method|copyFromLocalFile (boolean delSrc, Path src, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyFromLocalFile
argument_list|(
name|delSrc
argument_list|,
literal|true
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src files are on the local disk.  Add it to FS at    * the given dst name.    * delSrc indicates if the source should be removed    */
DECL|method|copyFromLocalFile (boolean delSrc, boolean overwrite, Path[] srcs, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Path
index|[]
name|srcs
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|srcs
argument_list|,
name|this
argument_list|,
name|dst
argument_list|,
name|delSrc
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src file is on the local disk.  Add it to FS at    * the given dst name.    * delSrc indicates if the source should be removed    */
DECL|method|copyFromLocalFile (boolean delSrc, boolean overwrite, Path src, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|getLocal
argument_list|(
name|conf
argument_list|)
argument_list|,
name|src
argument_list|,
name|this
argument_list|,
name|dst
argument_list|,
name|delSrc
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src file is under FS, and the dst is on the local disk.    * Copy it from FS control to the local dst name.    */
DECL|method|copyToLocalFile (Path src, Path dst)
specifier|public
name|void
name|copyToLocalFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyToLocalFile
argument_list|(
literal|false
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src file is under FS, and the dst is on the local disk.    * Copy it from FS control to the local dst name.    * Remove the source afterwards    */
DECL|method|moveToLocalFile (Path src, Path dst)
specifier|public
name|void
name|moveToLocalFile
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyToLocalFile
argument_list|(
literal|true
argument_list|,
name|src
argument_list|,
name|dst
argument_list|)
expr_stmt|;
block|}
comment|/**    * The src file is under FS, and the dst is on the local disk.    * Copy it from FS control to the local dst name.    * delSrc indicates if the src will be removed or not.    */
DECL|method|copyToLocalFile (boolean delSrc, Path src, Path dst)
specifier|public
name|void
name|copyToLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|getLocal
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|dst
argument_list|,
name|delSrc
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns a local File that the user can write output to.  The caller    * provides both the eventual FS target name and the local working    * file.  If the FS is local, we write directly into the target.  If    * the FS is remote, we write into the tmp local area.    */
DECL|method|startLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|Path
name|startLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tmpLocalFile
return|;
block|}
comment|/**    * Called when we're all done writing to the target.  A local FS will    * do nothing, because we've written to exactly the right place.  A remote    * FS will copy the contents of tmpLocalFile to the correct target at    * fsOutputFile.    */
DECL|method|completeLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|void
name|completeLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
name|moveFromLocalFile
argument_list|(
name|tmpLocalFile
argument_list|,
name|fsOutputFile
argument_list|)
expr_stmt|;
block|}
comment|/**    * No more filesystem operations are needed.  Will    * release any held locks.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// delete all files that were marked as delete-on-exit.
name|processDeleteOnExit
argument_list|()
expr_stmt|;
name|CACHE
operator|.
name|remove
argument_list|(
name|this
operator|.
name|key
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/** Return the total size of all files in the filesystem.*/
DECL|method|getUsed ()
specifier|public
name|long
name|getUsed
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|used
init|=
literal|0
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|used
operator|+=
name|file
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
return|return
name|used
return|;
block|}
comment|/** Return the number of bytes that large input files should be optimally    * be split into to minimize i/o time. */
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
comment|// default to 32MB: large enough to minimize the impact of seeks
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
literal|"fs.local.block.size"
argument_list|,
literal|32
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
return|;
block|}
comment|/**    * Get the default replication.    */
DECL|method|getDefaultReplication ()
specifier|public
name|short
name|getDefaultReplication
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|/**    * Return a file status object that represents the path.    * @param f The path we want information from    * @return a FileStatus object    * @throws FileNotFoundException when the path does not exist;    *         IOException see specific implementation    */
DECL|method|getFileStatus (Path f)
specifier|public
specifier|abstract
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Get the checksum of a file.    *    * @param f The file path    * @return The file checksum.  The default return value is null,    *  which indicates that no checksum algorithm is implemented    *  in the corresponding FileSystem.    */
DECL|method|getFileChecksum (Path f)
specifier|public
name|FileChecksum
name|getFileChecksum
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
comment|/**    * Set the verify checksum flag. This is only applicable if the     * corresponding FileSystem supports checksum. By default doesn't do anything.    * @param verifyChecksum    */
DECL|method|setVerifyChecksum (boolean verifyChecksum)
specifier|public
name|void
name|setVerifyChecksum
parameter_list|(
name|boolean
name|verifyChecksum
parameter_list|)
block|{
comment|//doesn't do anything
block|}
comment|/**    * Return a list of file status objects that corresponds to the list of paths    * excluding those non-existent paths.    *     * @param paths    *          the list of paths we want information from    * @return a list of FileStatus objects    * @throws IOException    *           see specific implementation    */
DECL|method|getFileStatus (Path[] paths)
specifier|private
name|FileStatus
index|[]
name|getFileStatus
parameter_list|(
name|Path
index|[]
name|paths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|paths
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|(
name|paths
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|results
operator|.
name|add
argument_list|(
name|getFileStatus
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
return|return
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Returns a status object describing the use and capacity of the    * file system. If the file system has multiple partitions, the    * use and capacity of the root partition is reflected.    *     * @return a FsStatus object    * @throws IOException    *           see specific implementation    */
DECL|method|getStatus ()
specifier|public
name|FsStatus
name|getStatus
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getStatus
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**    * Returns a status object describing the use and capacity of the    * file system. If the file system has multiple partitions, the    * use and capacity of the partition pointed to by the specified    * path is reflected.    * @param p Path for which status should be obtained. null means    * the default partition.     * @return a FsStatus object    * @throws IOException    *           see specific implementation    */
DECL|method|getStatus (Path p)
specifier|public
name|FsStatus
name|getStatus
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FsStatus
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**    * Set permission of a path.    * @param p    * @param permission    */
DECL|method|setPermission (Path p, FsPermission permission )
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/**    * Set owner of a path (i.e. a file or a directory).    * The parameters username and groupname cannot both be null.    * @param p The path    * @param username If it is null, the original username remains unchanged.    * @param groupname If it is null, the original groupname remains unchanged.    */
DECL|method|setOwner (Path p, String username, String groupname )
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{   }
comment|/**    * Set access time of a file    * @param p The path    * @param mtime Set the modification time of this file.    *              The number of milliseconds since Jan 1, 1970.     *              A value of -1 means that this call should not set modification time.    * @param atime Set the access time of this file.    *              The number of milliseconds since Jan 1, 1970.     *              A value of -1 means that this call should not set access time.    */
DECL|method|setTimes (Path p, long mtime, long atime )
specifier|public
name|void
name|setTimes
parameter_list|(
name|Path
name|p
parameter_list|,
name|long
name|mtime
parameter_list|,
name|long
name|atime
parameter_list|)
throws|throws
name|IOException
block|{   }
DECL|method|createFileSystem (URI uri, Configuration conf )
specifier|private
specifier|static
name|FileSystem
name|createFileSystem
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"fs."
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|".impl"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No FileSystem for scheme: "
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
throw|;
block|}
name|FileSystem
name|fs
init|=
operator|(
name|FileSystem
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
comment|/** Caching FileSystem objects */
DECL|class|Cache
specifier|static
class|class
name|Cache
block|{
DECL|field|clientFinalizer
specifier|private
specifier|final
name|ClientFinalizer
name|clientFinalizer
init|=
operator|new
name|ClientFinalizer
argument_list|()
decl_stmt|;
DECL|field|map
specifier|private
specifier|final
name|Map
argument_list|<
name|Key
argument_list|,
name|FileSystem
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Key
argument_list|,
name|FileSystem
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|toAutoClose
specifier|private
specifier|final
name|Set
argument_list|<
name|Key
argument_list|>
name|toAutoClose
init|=
operator|new
name|HashSet
argument_list|<
name|Key
argument_list|>
argument_list|()
decl_stmt|;
comment|/** A variable that makes all objects in the cache unique */
DECL|field|unique
specifier|private
specifier|static
name|AtomicLong
name|unique
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|method|get (URI uri, Configuration conf)
specifier|synchronized
name|FileSystem
name|get
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
name|getInternal
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
name|key
argument_list|)
return|;
block|}
comment|/** The objects inserted into the cache using this method are all unique */
DECL|method|getUnique (URI uri, Configuration conf)
specifier|synchronized
name|FileSystem
name|getUnique
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Key
name|key
init|=
operator|new
name|Key
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
name|unique
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getInternal
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
name|key
argument_list|)
return|;
block|}
DECL|method|getInternal (URI uri, Configuration conf, Key key)
specifier|private
name|FileSystem
name|getInternal
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|createFileSystem
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|clientFinalizer
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|clientFinalizer
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolean
argument_list|(
literal|"fs.automatic.close"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|toAutoClose
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fs
return|;
block|}
DECL|method|remove (Key key, FileSystem fs)
specifier|synchronized
name|void
name|remove
parameter_list|(
name|Key
name|key
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
name|fs
operator|==
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|toAutoClose
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|clientFinalizer
operator|.
name|isAlive
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|clientFinalizer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Could not cancel cleanup thread, though no "
operator|+
literal|"FileSystems are open"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|closeAll ()
specifier|synchronized
name|void
name|closeAll
parameter_list|()
throws|throws
name|IOException
block|{
name|closeAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Close all FileSystem instances in the Cache.      * @param onlyAutomatic only close those that are marked for automatic closing      */
DECL|method|closeAll (boolean onlyAutomatic)
specifier|synchronized
name|void
name|closeAll
parameter_list|(
name|boolean
name|onlyAutomatic
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
comment|// Make a copy of the keys in the map since we'll be modifying
comment|// the map while iterating over it, which isn't safe.
name|List
argument_list|<
name|Key
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<
name|Key
argument_list|>
argument_list|()
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Key
name|key
range|:
name|keys
control|)
block|{
specifier|final
name|FileSystem
name|fs
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyAutomatic
operator|&&
operator|!
name|toAutoClose
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|//remove from cache
name|remove
argument_list|(
name|key
argument_list|,
name|fs
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|MultipleIOException
operator|.
name|createIOException
argument_list|(
name|exceptions
argument_list|)
throw|;
block|}
block|}
DECL|class|ClientFinalizer
specifier|private
class|class
name|ClientFinalizer
extends|extends
name|Thread
block|{
DECL|method|run ()
specifier|public
specifier|synchronized
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|closeAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FileSystem.Cache.closeAll() threw an exception:\n"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** FileSystem.Cache.Key */
DECL|class|Key
specifier|static
class|class
name|Key
block|{
DECL|field|scheme
specifier|final
name|String
name|scheme
decl_stmt|;
DECL|field|authority
specifier|final
name|String
name|authority
decl_stmt|;
DECL|field|username
specifier|final
name|String
name|username
decl_stmt|;
DECL|field|unique
specifier|final
name|long
name|unique
decl_stmt|;
comment|// an artificial way to make a key unique
DECL|method|Key (URI uri, Configuration conf)
name|Key
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|Key (URI uri, Configuration conf, long unique)
name|Key
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|long
name|unique
parameter_list|)
throws|throws
name|IOException
block|{
name|scheme
operator|=
name|uri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|authority
operator|=
name|uri
operator|.
name|getAuthority
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|uri
operator|.
name|getAuthority
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|this
operator|.
name|unique
operator|=
name|unique
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|readFrom
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"uri="
operator|+
name|uri
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|username
operator|=
name|ugi
operator|==
literal|null
condition|?
literal|null
else|:
name|ugi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|scheme
operator|+
name|authority
operator|+
name|username
operator|)
operator|.
name|hashCode
argument_list|()
operator|+
operator|(
name|int
operator|)
name|unique
return|;
block|}
DECL|method|isEqual (Object a, Object b)
specifier|static
name|boolean
name|isEqual
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
name|b
operator|||
operator|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|Key
condition|)
block|{
name|Key
name|that
init|=
operator|(
name|Key
operator|)
name|obj
decl_stmt|;
return|return
name|isEqual
argument_list|(
name|this
operator|.
name|scheme
argument_list|,
name|that
operator|.
name|scheme
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|authority
argument_list|,
name|that
operator|.
name|authority
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|username
argument_list|,
name|that
operator|.
name|username
argument_list|)
operator|&&
operator|(
name|this
operator|.
name|unique
operator|==
name|that
operator|.
name|unique
operator|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|username
operator|+
literal|"@"
operator|+
name|scheme
operator|+
literal|"://"
operator|+
name|authority
return|;
block|}
block|}
block|}
DECL|class|Statistics
specifier|public
specifier|static
specifier|final
class|class
name|Statistics
block|{
DECL|field|scheme
specifier|private
specifier|final
name|String
name|scheme
decl_stmt|;
DECL|field|bytesRead
specifier|private
name|AtomicLong
name|bytesRead
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|bytesWritten
specifier|private
name|AtomicLong
name|bytesWritten
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|method|Statistics (String scheme)
specifier|public
name|Statistics
parameter_list|(
name|String
name|scheme
parameter_list|)
block|{
name|this
operator|.
name|scheme
operator|=
name|scheme
expr_stmt|;
block|}
comment|/**      * Increment the bytes read in the statistics      * @param newBytes the additional bytes read      */
DECL|method|incrementBytesRead (long newBytes)
specifier|public
name|void
name|incrementBytesRead
parameter_list|(
name|long
name|newBytes
parameter_list|)
block|{
name|bytesRead
operator|.
name|getAndAdd
argument_list|(
name|newBytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Increment the bytes written in the statistics      * @param newBytes the additional bytes written      */
DECL|method|incrementBytesWritten (long newBytes)
specifier|public
name|void
name|incrementBytesWritten
parameter_list|(
name|long
name|newBytes
parameter_list|)
block|{
name|bytesWritten
operator|.
name|getAndAdd
argument_list|(
name|newBytes
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the total number of bytes read      * @return the number of bytes      */
DECL|method|getBytesRead ()
specifier|public
name|long
name|getBytesRead
parameter_list|()
block|{
return|return
name|bytesRead
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Get the total number of bytes written      * @return the number of bytes      */
DECL|method|getBytesWritten ()
specifier|public
name|long
name|getBytesWritten
parameter_list|()
block|{
return|return
name|bytesWritten
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|bytesRead
operator|+
literal|" bytes read and "
operator|+
name|bytesWritten
operator|+
literal|" bytes written"
return|;
block|}
comment|/**      * Reset the counts of bytes to 0.      */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|bytesWritten
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bytesRead
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the uri scheme associated with this statistics object.      * @return the schema associated with this set of statistics      */
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|scheme
return|;
block|}
block|}
comment|/**    * Get the Map of Statistics object indexed by URI Scheme.    * @return a Map having a key as URI scheme and value as Statistics object    * @deprecated use {@link #getAllStatistics} instead    */
annotation|@
name|Deprecated
DECL|method|getStatistics ()
specifier|public
specifier|static
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|Statistics
argument_list|>
name|getStatistics
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Statistics
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Statistics
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Statistics
name|stat
range|:
name|statisticsTable
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|stat
operator|.
name|getScheme
argument_list|()
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return the FileSystem classes that have Statistics    */
DECL|method|getAllStatistics ()
specifier|public
specifier|static
specifier|synchronized
name|List
argument_list|<
name|Statistics
argument_list|>
name|getAllStatistics
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Statistics
argument_list|>
argument_list|(
name|statisticsTable
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get the statistics for a particular file system    * @param cls the class to lookup    * @return a statistics object    */
specifier|public
specifier|static
specifier|synchronized
DECL|method|getStatistics (String scheme, Class<? extends FileSystem> cls)
name|Statistics
name|getStatistics
parameter_list|(
name|String
name|scheme
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
name|cls
parameter_list|)
block|{
name|Statistics
name|result
init|=
name|statisticsTable
operator|.
name|get
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Statistics
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|statisticsTable
operator|.
name|put
argument_list|(
name|cls
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|clearStatistics ()
specifier|public
specifier|static
specifier|synchronized
name|void
name|clearStatistics
parameter_list|()
block|{
for|for
control|(
name|Statistics
name|stat
range|:
name|statisticsTable
operator|.
name|values
argument_list|()
control|)
block|{
name|stat
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
DECL|method|printStatistics ()
name|void
name|printStatistics
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|FileSystem
argument_list|>
argument_list|,
name|Statistics
argument_list|>
name|pair
range|:
name|statisticsTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  FileSystem "
operator|+
name|pair
operator|.
name|getKey
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

