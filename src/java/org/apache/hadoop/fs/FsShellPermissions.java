begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
operator|.
name|CmdHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|ChmodParser
import|;
end_import

begin_comment
comment|/**  * This class is the home for file permissions related commands.  * Moved to this separate class since FsShell is getting too large.  */
end_comment

begin_class
DECL|class|FsShellPermissions
class|class
name|FsShellPermissions
block|{
comment|/*========== chmod ==========*/
comment|/*    * The pattern is almost as flexible as mode allowed by chmod shell command.    * The main restriction is that we recognize only rwxXt. To reduce errors we    * also enforce octal mode specifications of either 3 digits without a sticky    * bit setting or four digits with a sticky bit setting.    */
DECL|field|CHMOD_USAGE
specifier|static
name|String
name|CHMOD_USAGE
init|=
literal|"-chmod [-R]<MODE[,MODE]... | OCTALMODE> PATH..."
decl_stmt|;
DECL|field|pp
specifier|private
specifier|static
name|ChmodParser
name|pp
decl_stmt|;
DECL|class|ChmodHandler
specifier|private
specifier|static
class|class
name|ChmodHandler
extends|extends
name|CmdHandler
block|{
DECL|method|ChmodHandler (FileSystem fs, String modeStr)
name|ChmodHandler
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|modeStr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"chmod"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
try|try
block|{
name|pp
operator|=
operator|new
name|ChmodParser
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iea
parameter_list|)
block|{
name|patternError
argument_list|(
name|iea
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|patternError (String mode)
specifier|private
name|void
name|patternError
parameter_list|(
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"chmod : mode '"
operator|+
name|mode
operator|+
literal|"' does not match the expected pattern."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|run (FileStatus file, FileSystem srcFs)
specifier|public
name|void
name|run
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|newperms
init|=
name|pp
operator|.
name|applyNewPermission
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|getPermission
argument_list|()
operator|.
name|toShort
argument_list|()
operator|!=
name|newperms
condition|)
block|{
try|try
block|{
name|srcFs
operator|.
name|setPermission
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|newperms
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|": changing permissions of '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"':"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*========== chown ==========*/
DECL|field|allowedChars
specifier|static
specifier|private
name|String
name|allowedChars
init|=
literal|"[-_./@a-zA-Z0-9]"
decl_stmt|;
comment|///allows only "allowedChars" above in names for owner and group
DECL|field|chownPattern
specifier|static
specifier|private
name|Pattern
name|chownPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*("
operator|+
name|allowedChars
operator|+
literal|"+)?"
operator|+
literal|"([:]("
operator|+
name|allowedChars
operator|+
literal|"*))?\\s*$"
argument_list|)
decl_stmt|;
DECL|field|chgrpPattern
specifier|static
specifier|private
name|Pattern
name|chgrpPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*("
operator|+
name|allowedChars
operator|+
literal|"+)\\s*$"
argument_list|)
decl_stmt|;
DECL|field|CHOWN_USAGE
specifier|static
name|String
name|CHOWN_USAGE
init|=
literal|"-chown [-R] [OWNER][:[GROUP]] PATH..."
decl_stmt|;
DECL|field|CHGRP_USAGE
specifier|static
name|String
name|CHGRP_USAGE
init|=
literal|"-chgrp [-R] GROUP PATH..."
decl_stmt|;
DECL|class|ChownHandler
specifier|private
specifier|static
class|class
name|ChownHandler
extends|extends
name|CmdHandler
block|{
DECL|field|owner
specifier|protected
name|String
name|owner
init|=
literal|null
decl_stmt|;
DECL|field|group
specifier|protected
name|String
name|group
init|=
literal|null
decl_stmt|;
DECL|method|ChownHandler (String cmd, FileSystem fs)
specifier|protected
name|ChownHandler
parameter_list|(
name|String
name|cmd
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
comment|//for chgrp
name|super
argument_list|(
name|cmd
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|ChownHandler (FileSystem fs, String ownerStr)
name|ChownHandler
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|ownerStr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"chown"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|chownPattern
operator|.
name|matcher
argument_list|(
name|ownerStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"'"
operator|+
name|ownerStr
operator|+
literal|"' does not match "
operator|+
literal|"expected pattern for [owner][:group]."
argument_list|)
throw|;
block|}
name|owner
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|group
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
name|group
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|group
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|owner
operator|==
literal|null
operator|&&
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"'"
operator|+
name|ownerStr
operator|+
literal|"' does not specify "
operator|+
literal|" onwer or group."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|run (FileStatus file, FileSystem srcFs)
specifier|public
name|void
name|run
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Should we do case insensitive match?
name|String
name|newOwner
init|=
operator|(
name|owner
operator|==
literal|null
operator|||
name|owner
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|)
condition|?
literal|null
else|:
name|owner
decl_stmt|;
name|String
name|newGroup
init|=
operator|(
name|group
operator|==
literal|null
operator|||
name|group
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|)
condition|?
literal|null
else|:
name|group
decl_stmt|;
if|if
condition|(
name|newOwner
operator|!=
literal|null
operator|||
name|newGroup
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|srcFs
operator|.
name|setOwner
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|newOwner
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|": changing ownership of '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"':"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*========== chgrp ==========*/
DECL|class|ChgrpHandler
specifier|private
specifier|static
class|class
name|ChgrpHandler
extends|extends
name|ChownHandler
block|{
DECL|method|ChgrpHandler (FileSystem fs, String groupStr)
name|ChgrpHandler
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|groupStr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"chgrp"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|chgrpPattern
operator|.
name|matcher
argument_list|(
name|groupStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"'"
operator|+
name|groupStr
operator|+
literal|"' does not match "
operator|+
literal|"expected pattern for group"
argument_list|)
throw|;
block|}
name|group
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|changePermissions (FileSystem fs, String cmd, String argv[], int startIndex, FsShell shell)
specifier|static
name|void
name|changePermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|argv
index|[]
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|FsShell
name|shell
parameter_list|)
throws|throws
name|IOException
block|{
name|CmdHandler
name|handler
init|=
literal|null
decl_stmt|;
name|boolean
name|recursive
init|=
literal|false
decl_stmt|;
comment|// handle common arguments, currently only "-R"
for|for
control|(
init|;
name|startIndex
operator|<
name|argv
operator|.
name|length
operator|&&
name|argv
index|[
name|startIndex
index|]
operator|.
name|equals
argument_list|(
literal|"-R"
argument_list|)
condition|;
name|startIndex
operator|++
control|)
block|{
name|recursive
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|startIndex
operator|>=
name|argv
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not enough arguments for the command"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chmod"
argument_list|)
condition|)
block|{
name|handler
operator|=
operator|new
name|ChmodHandler
argument_list|(
name|fs
argument_list|,
name|argv
index|[
name|startIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chown"
argument_list|)
condition|)
block|{
name|handler
operator|=
operator|new
name|ChownHandler
argument_list|(
name|fs
argument_list|,
name|argv
index|[
name|startIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chgrp"
argument_list|)
condition|)
block|{
name|handler
operator|=
operator|new
name|ChgrpHandler
argument_list|(
name|fs
argument_list|,
name|argv
index|[
name|startIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|shell
operator|.
name|runCmdHandler
argument_list|(
name|handler
argument_list|,
name|argv
argument_list|,
name|startIndex
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

