begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
operator|.
name|CmdHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_comment
comment|/**  * This class is the home for file permissions related commands.  * Moved to this separate class since FsShell is getting too large.  */
end_comment

begin_class
DECL|class|FsShellPermissions
class|class
name|FsShellPermissions
block|{
comment|/*========== chmod ==========*/
comment|/*    * The pattern is almost as flexible as mode allowed by chmod shell command.    * The main restriction is that we recognize only rwxXt. To reduce errors we    * also enforce octal mode specifications of either 3 digits without a sticky    * bit setting or four digits with a sticky bit setting.    */
DECL|field|chmodNormalPattern
specifier|private
specifier|static
name|Pattern
name|chmodNormalPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\G\\s*([ugoa]*)([+=-]+)([rwxXt]+)([,\\s]*)\\s*"
argument_list|)
decl_stmt|;
DECL|field|chmodOctalPattern
specifier|private
specifier|static
name|Pattern
name|chmodOctalPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*[+]?([01]?)([0-7]{3})\\s*$"
argument_list|)
decl_stmt|;
DECL|field|CHMOD_USAGE
specifier|static
name|String
name|CHMOD_USAGE
init|=
literal|"-chmod [-R]<MODE[,MODE]... | OCTALMODE> PATH..."
decl_stmt|;
DECL|class|ChmodHandler
specifier|private
specifier|static
class|class
name|ChmodHandler
extends|extends
name|CmdHandler
block|{
DECL|field|userMode
specifier|private
name|short
name|userMode
decl_stmt|;
DECL|field|groupMode
specifier|private
name|short
name|groupMode
decl_stmt|;
DECL|field|othersMode
specifier|private
name|short
name|othersMode
decl_stmt|;
DECL|field|stickyMode
specifier|private
name|short
name|stickyMode
decl_stmt|;
DECL|field|userType
specifier|private
name|char
name|userType
init|=
literal|'+'
decl_stmt|;
DECL|field|groupType
specifier|private
name|char
name|groupType
init|=
literal|'+'
decl_stmt|;
DECL|field|othersType
specifier|private
name|char
name|othersType
init|=
literal|'+'
decl_stmt|;
DECL|field|stickyBitType
specifier|private
name|char
name|stickyBitType
init|=
literal|'+'
decl_stmt|;
DECL|method|applyNormalPattern (String modeStr, Matcher matcher)
specifier|private
name|void
name|applyNormalPattern
parameter_list|(
name|String
name|modeStr
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Are there multiple permissions stored in one chmod?
name|boolean
name|commaSeperated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
operator|||
name|matcher
operator|.
name|end
argument_list|()
operator|<
name|modeStr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
operator|(
operator|!
name|commaSeperated
operator|||
operator|!
name|matcher
operator|.
name|find
argument_list|()
operator|)
condition|)
block|{
name|patternError
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
block|}
comment|/* groups : 1 : [ugoa]*          *          2 : [+-=]          *          3 : [rwxXt]+          *          4 : [,\s]*          */
name|String
name|str
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|char
name|type
init|=
name|str
operator|.
name|charAt
argument_list|(
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|user
decl_stmt|,
name|group
decl_stmt|,
name|others
decl_stmt|,
name|stickyBit
decl_stmt|;
name|user
operator|=
name|group
operator|=
name|others
operator|=
name|stickyBit
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|char
name|c
range|:
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|toCharArray
argument_list|()
control|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'u'
case|:
name|user
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'g'
case|:
name|group
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'o'
case|:
name|others
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
break|break;
default|default  :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
name|user
operator|||
name|group
operator|||
name|others
operator|)
condition|)
block|{
comment|// same as specifying 'a'
name|user
operator|=
name|group
operator|=
name|others
operator|=
literal|true
expr_stmt|;
block|}
name|short
name|mode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|char
name|c
range|:
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
operator|.
name|toCharArray
argument_list|()
control|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'r'
case|:
name|mode
operator||=
literal|4
expr_stmt|;
break|break;
case|case
literal|'w'
case|:
name|mode
operator||=
literal|2
expr_stmt|;
break|break;
case|case
literal|'x'
case|:
name|mode
operator||=
literal|1
expr_stmt|;
break|break;
case|case
literal|'X'
case|:
name|mode
operator||=
literal|8
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|stickyBit
operator|=
literal|true
expr_stmt|;
break|break;
default|default  :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|user
condition|)
block|{
name|userMode
operator|=
name|mode
expr_stmt|;
name|userType
operator|=
name|type
expr_stmt|;
block|}
if|if
condition|(
name|group
condition|)
block|{
name|groupMode
operator|=
name|mode
expr_stmt|;
name|groupType
operator|=
name|type
expr_stmt|;
block|}
if|if
condition|(
name|others
condition|)
block|{
name|othersMode
operator|=
name|mode
expr_stmt|;
name|othersType
operator|=
name|type
expr_stmt|;
name|stickyMode
operator|=
call|(
name|short
call|)
argument_list|(
name|stickyBit
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|stickyBitType
operator|=
name|type
expr_stmt|;
block|}
name|commaSeperated
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|.
name|contains
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyOctalPattern (String modeStr, Matcher matcher)
specifier|private
name|void
name|applyOctalPattern
parameter_list|(
name|String
name|modeStr
parameter_list|,
name|Matcher
name|matcher
parameter_list|)
block|{
name|userType
operator|=
name|groupType
operator|=
name|othersType
operator|=
literal|'='
expr_stmt|;
comment|// Check if sticky bit is specified
name|String
name|sb
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|stickyMode
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|stickyBitType
operator|=
literal|'='
expr_stmt|;
block|}
name|String
name|str
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|userMode
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|groupMode
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|othersMode
operator|=
name|Short
operator|.
name|valueOf
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|patternError (String mode)
specifier|private
name|void
name|patternError
parameter_list|(
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"chmod : mode '"
operator|+
name|mode
operator|+
literal|"' does not match the expected pattern."
argument_list|)
throw|;
block|}
DECL|method|ChmodHandler (FileSystem fs, String modeStr)
name|ChmodHandler
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|modeStr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"chmod"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|matcher
operator|=
name|chmodNormalPattern
operator|.
name|matcher
argument_list|(
name|modeStr
argument_list|)
operator|)
operator|.
name|find
argument_list|()
condition|)
block|{
name|applyNormalPattern
argument_list|(
name|modeStr
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|matcher
operator|=
name|chmodOctalPattern
operator|.
name|matcher
argument_list|(
name|modeStr
argument_list|)
operator|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|applyOctalPattern
argument_list|(
name|modeStr
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|patternError
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|applyChmod (char type, int mode, int existing, boolean exeOk)
specifier|private
name|int
name|applyChmod
parameter_list|(
name|char
name|type
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|existing
parameter_list|,
name|boolean
name|exeOk
parameter_list|)
block|{
name|boolean
name|capX
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|mode
operator|&
literal|8
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// convert X to x;
name|capX
operator|=
literal|true
expr_stmt|;
name|mode
operator|&=
operator|~
literal|8
expr_stmt|;
name|mode
operator||=
literal|1
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|'+'
case|:
name|mode
operator|=
name|mode
operator||
name|existing
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|mode
operator|=
operator|(
operator|~
name|mode
operator|)
operator|&
name|existing
expr_stmt|;
break|break;
case|case
literal|'='
case|:
break|break;
default|default  :
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected"
argument_list|)
throw|;
block|}
comment|// if X is specified add 'x' only if exeOk or x was already set.
if|if
condition|(
name|capX
operator|&&
operator|!
name|exeOk
operator|&&
operator|(
name|mode
operator|&
literal|1
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|existing
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
block|{
name|mode
operator|&=
operator|~
literal|1
expr_stmt|;
comment|// remove x
block|}
return|return
name|mode
return|;
block|}
annotation|@
name|Override
DECL|method|run (FileStatus file, FileSystem srcFs)
specifier|public
name|void
name|run
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
name|FsPermission
name|perms
init|=
name|file
operator|.
name|getPermission
argument_list|()
decl_stmt|;
name|int
name|existing
init|=
name|perms
operator|.
name|toShort
argument_list|()
decl_stmt|;
name|boolean
name|exeOk
init|=
name|file
operator|.
name|isDir
argument_list|()
operator|||
operator|(
name|existing
operator|&
literal|0111
operator|)
operator|!=
literal|0
decl_stmt|;
name|int
name|newperms
init|=
operator|(
name|applyChmod
argument_list|(
name|stickyBitType
argument_list|,
name|stickyMode
argument_list|,
operator|(
name|existing
operator|>>>
literal|9
operator|)
argument_list|,
literal|false
argument_list|)
operator|<<
literal|9
operator||
name|applyChmod
argument_list|(
name|userType
argument_list|,
name|userMode
argument_list|,
operator|(
name|existing
operator|>>>
literal|6
operator|)
operator|&
literal|7
argument_list|,
name|exeOk
argument_list|)
operator|<<
literal|6
operator||
name|applyChmod
argument_list|(
name|groupType
argument_list|,
name|groupMode
argument_list|,
operator|(
name|existing
operator|>>>
literal|3
operator|)
operator|&
literal|7
argument_list|,
name|exeOk
argument_list|)
operator|<<
literal|3
operator||
name|applyChmod
argument_list|(
name|othersType
argument_list|,
name|othersMode
argument_list|,
name|existing
operator|&
literal|7
argument_list|,
name|exeOk
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
name|newperms
condition|)
block|{
try|try
block|{
name|srcFs
operator|.
name|setPermission
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
operator|(
name|short
operator|)
name|newperms
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|": changing permissions of '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"':"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*========== chown ==========*/
DECL|field|allowedChars
specifier|static
specifier|private
name|String
name|allowedChars
init|=
literal|"[-_./@a-zA-Z0-9]"
decl_stmt|;
comment|///allows only "allowedChars" above in names for owner and group
DECL|field|chownPattern
specifier|static
specifier|private
name|Pattern
name|chownPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*("
operator|+
name|allowedChars
operator|+
literal|"+)?"
operator|+
literal|"([:]("
operator|+
name|allowedChars
operator|+
literal|"*))?\\s*$"
argument_list|)
decl_stmt|;
DECL|field|chgrpPattern
specifier|static
specifier|private
name|Pattern
name|chgrpPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*("
operator|+
name|allowedChars
operator|+
literal|"+)\\s*$"
argument_list|)
decl_stmt|;
DECL|field|CHOWN_USAGE
specifier|static
name|String
name|CHOWN_USAGE
init|=
literal|"-chown [-R] [OWNER][:[GROUP]] PATH..."
decl_stmt|;
DECL|field|CHGRP_USAGE
specifier|static
name|String
name|CHGRP_USAGE
init|=
literal|"-chgrp [-R] GROUP PATH..."
decl_stmt|;
DECL|class|ChownHandler
specifier|private
specifier|static
class|class
name|ChownHandler
extends|extends
name|CmdHandler
block|{
DECL|field|owner
specifier|protected
name|String
name|owner
init|=
literal|null
decl_stmt|;
DECL|field|group
specifier|protected
name|String
name|group
init|=
literal|null
decl_stmt|;
DECL|method|ChownHandler (String cmd, FileSystem fs)
specifier|protected
name|ChownHandler
parameter_list|(
name|String
name|cmd
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
block|{
comment|//for chgrp
name|super
argument_list|(
name|cmd
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
DECL|method|ChownHandler (FileSystem fs, String ownerStr)
name|ChownHandler
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|ownerStr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"chown"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|chownPattern
operator|.
name|matcher
argument_list|(
name|ownerStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"'"
operator|+
name|ownerStr
operator|+
literal|"' does not match "
operator|+
literal|"expected pattern for [owner][:group]."
argument_list|)
throw|;
block|}
name|owner
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|group
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
operator|&&
name|group
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|group
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|owner
operator|==
literal|null
operator|&&
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"'"
operator|+
name|ownerStr
operator|+
literal|"' does not specify "
operator|+
literal|" onwer or group."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|run (FileStatus file, FileSystem srcFs)
specifier|public
name|void
name|run
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
comment|//Should we do case insensitive match?
name|String
name|newOwner
init|=
operator|(
name|owner
operator|==
literal|null
operator|||
name|owner
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|)
condition|?
literal|null
else|:
name|owner
decl_stmt|;
name|String
name|newGroup
init|=
operator|(
name|group
operator|==
literal|null
operator|||
name|group
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|)
condition|?
literal|null
else|:
name|group
decl_stmt|;
if|if
condition|(
name|newOwner
operator|!=
literal|null
operator|||
name|newGroup
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|srcFs
operator|.
name|setOwner
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|newOwner
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getName
argument_list|()
operator|+
literal|": changing ownership of '"
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|"':"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*========== chgrp ==========*/
DECL|class|ChgrpHandler
specifier|private
specifier|static
class|class
name|ChgrpHandler
extends|extends
name|ChownHandler
block|{
DECL|method|ChgrpHandler (FileSystem fs, String groupStr)
name|ChgrpHandler
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|groupStr
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
literal|"chgrp"
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|Matcher
name|matcher
init|=
name|chgrpPattern
operator|.
name|matcher
argument_list|(
name|groupStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"'"
operator|+
name|groupStr
operator|+
literal|"' does not match "
operator|+
literal|"expected pattern for group"
argument_list|)
throw|;
block|}
name|group
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|changePermissions (FileSystem fs, String cmd, String argv[], int startIndex, FsShell shell)
specifier|static
name|void
name|changePermissions
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|String
name|cmd
parameter_list|,
name|String
name|argv
index|[]
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|FsShell
name|shell
parameter_list|)
throws|throws
name|IOException
block|{
name|CmdHandler
name|handler
init|=
literal|null
decl_stmt|;
name|boolean
name|recursive
init|=
literal|false
decl_stmt|;
comment|// handle common arguments, currently only "-R"
for|for
control|(
init|;
name|startIndex
operator|<
name|argv
operator|.
name|length
operator|&&
name|argv
index|[
name|startIndex
index|]
operator|.
name|equals
argument_list|(
literal|"-R"
argument_list|)
condition|;
name|startIndex
operator|++
control|)
block|{
name|recursive
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|startIndex
operator|>=
name|argv
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not enough arguments for the command"
argument_list|)
throw|;
block|}
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chmod"
argument_list|)
condition|)
block|{
name|handler
operator|=
operator|new
name|ChmodHandler
argument_list|(
name|fs
argument_list|,
name|argv
index|[
name|startIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chown"
argument_list|)
condition|)
block|{
name|handler
operator|=
operator|new
name|ChownHandler
argument_list|(
name|fs
argument_list|,
name|argv
index|[
name|startIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-chgrp"
argument_list|)
condition|)
block|{
name|handler
operator|=
operator|new
name|ChgrpHandler
argument_list|(
name|fs
argument_list|,
name|argv
index|[
name|startIndex
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|shell
operator|.
name|runCmdHandler
argument_list|(
name|handler
argument_list|,
name|argv
argument_list|,
name|startIndex
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

