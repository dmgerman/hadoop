begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Utility that wraps a {@link OutputStream} in a {@link DataOutputStream},  * buffers output through a {@link BufferedOutputStream} and creates a checksum  * file. */
end_comment

begin_class
DECL|class|FSDataOutputStream
specifier|public
class|class
name|FSDataOutputStream
extends|extends
name|DataOutputStream
implements|implements
name|Syncable
block|{
DECL|field|wrappedStream
specifier|private
name|OutputStream
name|wrappedStream
decl_stmt|;
DECL|class|PositionCache
specifier|private
specifier|static
class|class
name|PositionCache
extends|extends
name|FilterOutputStream
block|{
DECL|field|statistics
specifier|private
name|FileSystem
operator|.
name|Statistics
name|statistics
decl_stmt|;
DECL|field|position
name|long
name|position
decl_stmt|;
DECL|method|PositionCache (OutputStream out, FileSystem.Statistics stats, long pos)
specifier|public
name|PositionCache
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|,
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|statistics
operator|=
name|stats
expr_stmt|;
name|position
operator|=
name|pos
expr_stmt|;
block|}
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|position
operator|++
expr_stmt|;
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|incrementBytesWritten
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|write (byte b[], int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|position
operator|+=
name|len
expr_stmt|;
comment|// update position
if|if
condition|(
name|statistics
operator|!=
literal|null
condition|)
block|{
name|statistics
operator|.
name|incrementBytesWritten
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|position
return|;
comment|// return cached position
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Deprecated
DECL|method|FSDataOutputStream (OutputStream out)
specifier|public
name|FSDataOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FSDataOutputStream (OutputStream out, FileSystem.Statistics stats)
specifier|public
name|FSDataOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|out
argument_list|,
name|stats
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FSDataOutputStream (OutputStream out, FileSystem.Statistics stats, long startPosition)
specifier|public
name|FSDataOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stats
parameter_list|,
name|long
name|startPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|PositionCache
argument_list|(
name|out
argument_list|,
name|stats
argument_list|,
name|startPosition
argument_list|)
argument_list|)
expr_stmt|;
name|wrappedStream
operator|=
name|out
expr_stmt|;
block|}
DECL|method|getPos ()
specifier|public
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
operator|(
name|PositionCache
operator|)
name|out
operator|)
operator|.
name|getPos
argument_list|()
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// This invokes PositionCache.close()
block|}
comment|// Returns the underlying output stream. This is used by unit tests.
DECL|method|getWrappedStream ()
specifier|public
name|OutputStream
name|getWrappedStream
parameter_list|()
block|{
return|return
name|wrappedStream
return|;
block|}
annotation|@
name|Override
comment|// Syncable
annotation|@
name|Deprecated
DECL|method|sync ()
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|wrappedStream
operator|instanceof
name|Syncable
condition|)
block|{
operator|(
operator|(
name|Syncable
operator|)
name|wrappedStream
operator|)
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// Syncable
DECL|method|hflush ()
specifier|public
name|void
name|hflush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|wrappedStream
operator|instanceof
name|Syncable
condition|)
block|{
operator|(
operator|(
name|Syncable
operator|)
name|wrappedStream
operator|)
operator|.
name|hflush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wrappedStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
comment|// Syncable
DECL|method|hsync ()
specifier|public
name|void
name|hsync
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|wrappedStream
operator|instanceof
name|Syncable
condition|)
block|{
operator|(
operator|(
name|Syncable
operator|)
name|wrappedStream
operator|)
operator|.
name|hsync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wrappedStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

