begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|file
operator|.
name|SeekableInput
import|;
end_import

begin_comment
comment|/** Adapts an {@link FSDataInputStream} to Avro's SeekableInput interface. */
end_comment

begin_class
DECL|class|AvroFSInput
specifier|public
class|class
name|AvroFSInput
implements|implements
name|Closeable
implements|,
name|SeekableInput
block|{
DECL|field|stream
specifier|private
specifier|final
name|FSDataInputStream
name|stream
decl_stmt|;
DECL|field|len
specifier|private
specifier|final
name|long
name|len
decl_stmt|;
comment|/** Construct given an {@link FSDataInputStream} and its length. */
DECL|method|AvroFSInput (final FSDataInputStream in, final long len)
specifier|public
name|AvroFSInput
parameter_list|(
specifier|final
name|FSDataInputStream
name|in
parameter_list|,
specifier|final
name|long
name|len
parameter_list|)
block|{
name|this
operator|.
name|stream
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|len
operator|=
name|len
expr_stmt|;
block|}
comment|/** Construct given a {@link FileContext} and a {@link Path}. */
DECL|method|AvroFSInput (final FileContext fc, final Path p)
specifier|public
name|AvroFSInput
parameter_list|(
specifier|final
name|FileContext
name|fc
parameter_list|,
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
name|fc
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|this
operator|.
name|len
operator|=
name|status
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|this
operator|.
name|stream
operator|=
name|fc
operator|.
name|open
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|length ()
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|len
return|;
block|}
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|stream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
DECL|method|seek (long p)
specifier|public
name|void
name|seek
parameter_list|(
name|long
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|stream
operator|.
name|seek
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|tell ()
specifier|public
name|long
name|tell
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|stream
operator|.
name|getPos
argument_list|()
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

