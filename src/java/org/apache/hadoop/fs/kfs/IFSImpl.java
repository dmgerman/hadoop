begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  * implied. See the License for the specific language governing  * permissions and limitations under the License.  *  *   * We need to provide the ability to the code in fs/kfs without really  * having a KFS deployment.  In particular, the glue code that wraps  * around calls to KfsAccess object.  This is accomplished by defining a  * filesystem implementation interface:    *   -- for testing purposes, a dummy implementation of this interface  * will suffice; as long as the dummy implementation is close enough  * to doing what KFS does, we are good.  *   -- for deployment purposes with KFS, this interface is  * implemented by the KfsImpl object.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.kfs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|kfs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_interface
DECL|interface|IFSImpl
interface|interface
name|IFSImpl
block|{
DECL|method|exists (String path)
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|isDirectory (String path)
specifier|public
name|boolean
name|isDirectory
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|isFile (String path)
specifier|public
name|boolean
name|isFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|readdir (String path)
specifier|public
name|String
index|[]
name|readdir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|readdirplus (Path path)
specifier|public
name|FileStatus
index|[]
name|readdirplus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|mkdirs (String path)
specifier|public
name|int
name|mkdirs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|rename (String source, String dest)
specifier|public
name|int
name|rename
parameter_list|(
name|String
name|source
parameter_list|,
name|String
name|dest
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|rmdir (String path)
specifier|public
name|int
name|rmdir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|remove (String path)
specifier|public
name|int
name|remove
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|filesize (String path)
specifier|public
name|long
name|filesize
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getReplication (String path)
specifier|public
name|short
name|getReplication
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|setReplication (String path, short replication)
specifier|public
name|short
name|setReplication
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getDataLocation (String path, long start, long len)
specifier|public
name|String
index|[]
index|[]
name|getDataLocation
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getModificationTime (String path)
specifier|public
name|long
name|getModificationTime
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|create (String path, short replication, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|String
name|path
parameter_list|,
name|short
name|replication
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|open (String path, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|append (String path, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|String
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

