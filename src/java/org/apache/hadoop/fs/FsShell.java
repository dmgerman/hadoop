begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|FsCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathExceptions
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/** Provide command line access to a FileSystem. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FsShell
specifier|public
class|class
name|FsShell
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FsShell
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|trash
specifier|private
name|Trash
name|trash
decl_stmt|;
DECL|field|commandFactory
specifier|protected
name|CommandFactory
name|commandFactory
decl_stmt|;
DECL|field|dateForm
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|dateForm
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
DECL|field|BORDER
specifier|static
specifier|final
name|int
name|BORDER
init|=
literal|2
decl_stmt|;
DECL|field|GET_SHORT_USAGE
specifier|static
specifier|final
name|String
name|GET_SHORT_USAGE
init|=
literal|"-get [-ignoreCrc] [-crc]<src><localdst>"
decl_stmt|;
DECL|field|COPYTOLOCAL_SHORT_USAGE
specifier|static
specifier|final
name|String
name|COPYTOLOCAL_SHORT_USAGE
init|=
name|GET_SHORT_USAGE
operator|.
name|replace
argument_list|(
literal|"-get"
argument_list|,
literal|"-copyToLocal"
argument_list|)
decl_stmt|;
comment|/**    */
DECL|method|FsShell ()
specifier|public
name|FsShell
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FsShell (Configuration conf)
specifier|public
name|FsShell
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|trash
operator|=
literal|null
expr_stmt|;
name|commandFactory
operator|=
operator|new
name|CommandFactory
argument_list|()
expr_stmt|;
block|}
DECL|method|getFS ()
specifier|protected
name|FileSystem
name|getFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|getTrash ()
specifier|protected
name|Trash
name|getTrash
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|trash
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|trash
operator|=
operator|new
name|Trash
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|trash
return|;
block|}
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|getConf
argument_list|()
operator|.
name|setQuietMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copies from stdin to the indicated file.    */
DECL|method|copyFromStdin (Path dst, FileSystem dstFs)
specifier|private
name|void
name|copyFromStdin
parameter_list|(
name|Path
name|dst
parameter_list|,
name|FileSystem
name|dstFs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dstFs
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When source is stdin, destination must be a file."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dstFs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|.
name|toString
argument_list|()
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|FSDataOutputStream
name|out
init|=
name|dstFs
operator|.
name|create
argument_list|(
name|dst
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|out
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Print from src to stdout.    */
DECL|method|printToStdout (InputStream in)
specifier|private
name|void
name|printToStdout
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add local files to the indicated FileSystem name. src is kept.    */
DECL|method|copyFromLocal (Path[] srcs, String dstf)
name|void
name|copyFromLocal
parameter_list|(
name|Path
index|[]
name|srcs
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|==
literal|1
operator|&&
name|srcs
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
name|copyFromStdin
argument_list|(
name|dstPath
argument_list|,
name|dstFs
argument_list|)
expr_stmt|;
else|else
name|dstFs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|srcs
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add local files to the indicated FileSystem name. src is removed.    */
DECL|method|moveFromLocal (Path[] srcs, String dstf)
name|void
name|moveFromLocal
parameter_list|(
name|Path
index|[]
name|srcs
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|dstFs
operator|.
name|moveFromLocalFile
argument_list|(
name|srcs
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a local file to the indicated FileSystem name. src is removed.    */
DECL|method|moveFromLocal (Path src, String dstf)
name|void
name|moveFromLocal
parameter_list|(
name|Path
name|src
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|moveFromLocal
argument_list|(
operator|(
operator|new
name|Path
index|[]
block|{
name|src
block|}
operator|)
argument_list|,
name|dstf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Obtain the indicated files that match the file pattern<i>srcf</i>    * and copy them to the local name. srcf is kept.    * When copying multiple files, the destination must be a directory.     * Otherwise, IOException is thrown.    * @param argv : arguments    * @param pos : Ignore everything before argv[pos]      * @throws Exception     * @see org.apache.hadoop.fs.FileSystem.globStatus     */
DECL|method|copyToLocal (String[]argv, int pos)
name|void
name|copyToLocal
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|Exception
block|{
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|"copyToLocal"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|"crc"
argument_list|,
literal|"ignoreCrc"
argument_list|)
decl_stmt|;
name|String
name|srcstr
init|=
literal|null
decl_stmt|;
name|String
name|dststr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|cf
operator|.
name|parse
argument_list|(
name|argv
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|srcstr
operator|=
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dststr
operator|=
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell "
operator|+
name|GET_SHORT_USAGE
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
name|boolean
name|copyCrc
init|=
name|cf
operator|.
name|getOpt
argument_list|(
literal|"crc"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|verifyChecksum
init|=
operator|!
name|cf
operator|.
name|getOpt
argument_list|(
literal|"ignoreCrc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dststr
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|copyCrc
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-crc option is not valid when destination is stdout."
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|catArgv
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|catArgv
operator|.
name|add
argument_list|(
literal|"-cat"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cf
operator|.
name|getOpt
argument_list|(
literal|"ignoreCrc"
argument_list|)
condition|)
name|catArgv
operator|.
name|add
argument_list|(
literal|"-ignoreCrc"
argument_list|)
expr_stmt|;
name|catArgv
operator|.
name|add
argument_list|(
name|srcstr
argument_list|)
expr_stmt|;
name|run
argument_list|(
name|catArgv
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|dst
init|=
operator|new
name|File
argument_list|(
name|dststr
argument_list|)
decl_stmt|;
name|Path
name|srcpath
init|=
operator|new
name|Path
argument_list|(
name|srcstr
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFS
init|=
name|getSrcFileSystem
argument_list|(
name|srcpath
argument_list|,
name|verifyChecksum
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyCrc
operator|&&
operator|!
operator|(
name|srcFS
operator|instanceof
name|ChecksumFileSystem
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-crc option is not valid when source file system "
operator|+
literal|"does not have crc files. Automatically turn the option off."
argument_list|)
expr_stmt|;
name|copyCrc
operator|=
literal|false
expr_stmt|;
block|}
name|FileStatus
index|[]
name|srcs
init|=
name|srcFS
operator|.
name|globStatus
argument_list|(
name|srcpath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|srcs
condition|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|srcstr
argument_list|)
throw|;
block|}
name|boolean
name|dstIsDir
init|=
name|dst
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|dstIsDir
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When copying multiple files, "
operator|+
literal|"destination should be a directory."
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|srcs
control|)
block|{
name|Path
name|p
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|f
init|=
name|dstIsDir
condition|?
operator|new
name|File
argument_list|(
name|dst
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|dst
decl_stmt|;
name|copyToLocal
argument_list|(
name|srcFS
argument_list|,
name|status
argument_list|,
name|f
argument_list|,
name|copyCrc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return the {@link FileSystem} specified by src and the conf.    * It the {@link FileSystem} supports checksum, set verifyChecksum.    */
DECL|method|getSrcFileSystem (Path src, boolean verifyChecksum )
specifier|private
name|FileSystem
name|getSrcFileSystem
parameter_list|(
name|Path
name|src
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|srcFs
init|=
name|src
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|srcFs
operator|.
name|setVerifyChecksum
argument_list|(
name|verifyChecksum
argument_list|)
expr_stmt|;
return|return
name|srcFs
return|;
block|}
comment|/**    * The prefix for the tmp file used in copyToLocal.    * It must be at least three characters long, required by    * {@link java.io.File#createTempFile(String, String, File)}.    */
DECL|field|COPYTOLOCAL_PREFIX
specifier|static
specifier|final
name|String
name|COPYTOLOCAL_PREFIX
init|=
literal|"_copyToLocal_"
decl_stmt|;
comment|/**    * Copy a source file from a given file system to local destination.    * @param srcFS source file system    * @param src source path    * @param dst destination    * @param copyCrc copy CRC files?    * @exception IOException If some IO failed    */
DECL|method|copyToLocal (final FileSystem srcFS, final FileStatus srcStatus, final File dst, final boolean copyCrc)
specifier|private
name|void
name|copyToLocal
parameter_list|(
specifier|final
name|FileSystem
name|srcFS
parameter_list|,
specifier|final
name|FileStatus
name|srcStatus
parameter_list|,
specifier|final
name|File
name|dst
parameter_list|,
specifier|final
name|boolean
name|copyCrc
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Keep the structure similar to ChecksumFileSystem.copyToLocal().       * Ideal these two should just invoke FileUtil.copy() and not repeat      * recursion here. Of course, copy() should support two more options :      * copyCrc and useTmpFile (may be useTmpFile need not be an option).      */
name|Path
name|src
init|=
name|srcStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|dst
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// match the error message in FileUtil.checkDest():
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// use absolute name so that tmp file is always created under dest dir
name|File
name|tmp
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|dst
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|COPYTOLOCAL_PREFIX
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|tmp
argument_list|,
literal|false
argument_list|,
name|srcFS
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to copy "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tmp
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to rename tmp file "
operator|+
name|tmp
operator|+
literal|" to local destination \""
operator|+
name|dst
operator|+
literal|"\"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|copyCrc
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|srcFS
operator|instanceof
name|ChecksumFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source file system does not have crc files"
argument_list|)
throw|;
block|}
name|ChecksumFileSystem
name|csfs
init|=
operator|(
name|ChecksumFileSystem
operator|)
name|srcFS
decl_stmt|;
name|File
name|dstcs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|srcFS
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|pathToFile
argument_list|(
name|csfs
operator|.
name|getChecksumFile
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|csfs
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|csfs
operator|.
name|getFileStatus
argument_list|(
name|csfs
operator|.
name|getChecksumFile
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|copyToLocal
argument_list|(
name|fs
argument_list|,
name|status
argument_list|,
name|dstcs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|srcStatus
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Symlinks unsupported"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// once FileUtil.copy() supports tmp file, we don't need to mkdirs().
if|if
condition|(
operator|!
name|dst
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create local destination \""
operator|+
name|dst
operator|+
literal|"\"."
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|srcFS
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
control|)
block|{
name|copyToLocal
argument_list|(
name|srcFS
argument_list|,
name|status
argument_list|,
operator|new
name|File
argument_list|(
name|dst
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|copyCrc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Obtain the indicated file and copy to the local name.    * srcf is removed.    */
DECL|method|moveToLocal (String srcf, Path dst)
name|void
name|moveToLocal
parameter_list|(
name|String
name|srcf
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Option '-moveToLocal' is not implemented yet."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Move files that match the file pattern<i>srcf</i>    * to a destination file.    * When moving mutiple files, the destination must be a directory.     * Otherwise, IOException is thrown.    * @param srcf a file pattern specifying source files    * @param dstf a destination local file/directory     * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|rename (String srcf, String dstf)
name|void
name|rename
parameter_list|(
name|String
name|srcf
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|srcURI
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|URI
name|dstURI
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcURI
operator|.
name|compareTo
argument_list|(
name|dstURI
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"src and destination filesystems do not match."
argument_list|)
throw|;
block|}
name|Path
index|[]
name|srcs
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|fs
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When moving multiple files, "
operator|+
literal|"destination should be a directory."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|,
name|dst
argument_list|)
condition|)
block|{
name|FileStatus
name|srcFstatus
init|=
literal|null
decl_stmt|;
name|FileStatus
name|dstFstatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|srcFstatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PathNotFoundException
argument_list|(
name|srcs
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|dstFstatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error getting file status of "
operator|+
name|dst
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|srcFstatus
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dstFstatus
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|srcFstatus
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|dstFstatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot overwrite non directory "
operator|+
name|dst
operator|+
literal|" with directory "
operator|+
name|srcs
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to rename "
operator|+
name|srcs
index|[
name|i
index|]
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Move/rename file(s) to a destination file. Multiple source    * files can be specified. The destination is the last element of    * the argvp[] array.    * If multiple source files are specified, then the destination     * must be a directory. Otherwise, IOException is thrown.    * @exception: IOException      */
DECL|method|rename (String argv[], Configuration conf)
specifier|private
name|int
name|rename
parameter_list|(
name|String
name|argv
index|[]
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
name|dest
init|=
name|argv
index|[
name|argv
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|//
comment|// If the user has specified multiple source files, then
comment|// the destination has to be a directory
comment|//
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|3
condition|)
block|{
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dst
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstFs
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When moving multiple files, "
operator|+
literal|"destination "
operator|+
name|dest
operator|+
literal|" should be a directory."
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// for each source file, issue the rename
comment|//
for|for
control|(
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|//
comment|// issue the rename to the fs
comment|//
name|rename
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error renaming "
operator|+
name|argv
index|[
name|i
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error mesage.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error renaming "
operator|+
name|argv
index|[
name|i
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// IO exception encountered locally.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|displayError
argument_list|(
name|cmd
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Copy files that match the file pattern<i>srcf</i>    * to a destination file.    * When copying mutiple files, the destination must be a directory.     * Otherwise, IOException is thrown.    * @param srcf a file pattern specifying source files    * @param dstf a destination local file/directory     * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|copy (String srcf, String dstf, Configuration conf)
name|void
name|copy
parameter_list|(
name|String
name|srcf
parameter_list|,
name|String
name|dstf
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|srcs
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|dstFs
operator|.
name|isDirectory
argument_list|(
name|dstPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When copying multiple files, "
operator|+
literal|"destination should be a directory."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|dstFs
argument_list|,
name|dstPath
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copy file(s) to a destination file. Multiple source    * files can be specified. The destination is the last element of    * the argvp[] array.    * If multiple source files are specified, then the destination     * must be a directory. Otherwise, IOException is thrown.    * @exception: IOException      */
DECL|method|copy (String argv[], Configuration conf)
specifier|private
name|int
name|copy
parameter_list|(
name|String
name|argv
index|[]
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
name|dest
init|=
name|argv
index|[
name|argv
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|//
comment|// If the user has specified multiple source files, then
comment|// the destination has to be a directory
comment|//
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|3
condition|)
block|{
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|FileSystem
name|pFS
init|=
name|dst
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pFS
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When copying multiple files, "
operator|+
literal|"destination "
operator|+
name|dest
operator|+
literal|" should be a directory."
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// for each source file, issue the copy
comment|//
for|for
control|(
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|//
comment|// issue the copy to the fs
comment|//
name|copy
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
name|dest
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error copying "
operator|+
name|argv
index|[
name|i
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|displayError
argument_list|(
name|cmd
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Returns the Trash object associated with this shell.    */
DECL|method|getCurrentTrashDir ()
specifier|public
name|Path
name|getCurrentTrashDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getTrash
argument_list|()
operator|.
name|getCurrentTrashDir
argument_list|()
return|;
block|}
comment|/**    * Return an abbreviated English-language desc of the byte length    * @deprecated Consider using {@link org.apache.hadoop.util.StringUtils#byteDesc} instead.    */
annotation|@
name|Deprecated
DECL|method|byteDesc (long len)
specifier|public
specifier|static
name|String
name|byteDesc
parameter_list|(
name|long
name|len
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|len
argument_list|)
return|;
block|}
comment|/**    * @deprecated Consider using {@link org.apache.hadoop.util.StringUtils#limitDecimalTo2} instead.    */
annotation|@
name|Deprecated
DECL|method|limitDecimalTo2 (double d)
specifier|public
specifier|static
specifier|synchronized
name|String
name|limitDecimalTo2
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|limitDecimalTo2
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|printHelp (String cmd)
specifier|private
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|summary
init|=
literal|"hadoop fs is the command to execute fs commands. "
operator|+
literal|"The full syntax is: \n\n"
operator|+
literal|"hadoop fs [-fs<local | file system URI>] [-conf<configuration file>]\n\t"
operator|+
literal|"[-D<property=value>]\n\t"
operator|+
literal|"[-mv<src><dst>] [-cp<src><dst>]\n\t"
operator|+
literal|"[-put<localsrc> ...<dst>] [-copyFromLocal<localsrc> ...<dst>]\n\t"
operator|+
literal|"[-moveFromLocal<localsrc> ...<dst>] ["
operator|+
name|GET_SHORT_USAGE
operator|+
literal|"\n\t"
operator|+
literal|"["
operator|+
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|"] [-moveToLocal<src><localdst>]\n\t"
operator|+
literal|"[-report]"
decl_stmt|;
name|String
name|conf
init|=
literal|"-conf<configuration file>:  Specify an application configuration file."
decl_stmt|;
name|String
name|D
init|=
literal|"-D<property=value>:  Use value for given property."
decl_stmt|;
name|String
name|fs
init|=
literal|"-fs [local |<file system URI>]: \tSpecify the file system to use.\n"
operator|+
literal|"\t\tIf not specified, the current configuration is used, \n"
operator|+
literal|"\t\ttaken from the following, in increasing precedence: \n"
operator|+
literal|"\t\t\tcore-default.xml inside the hadoop jar file \n"
operator|+
literal|"\t\t\tcore-site.xml in $HADOOP_CONF_DIR \n"
operator|+
literal|"\t\t'local' means use the local file system as your DFS. \n"
operator|+
literal|"\t\t<file system URI> specifies a particular file system to \n"
operator|+
literal|"\t\tcontact. This argument is optional but if used must appear\n"
operator|+
literal|"\t\tappear first on the command line.  Exactly one additional\n"
operator|+
literal|"\t\targument must be specified. \n"
decl_stmt|;
name|String
name|mv
init|=
literal|"-mv<src><dst>:   Move files that match the specified file pattern<src>\n"
operator|+
literal|"\t\tto a destination<dst>.  When moving multiple files, the \n"
operator|+
literal|"\t\tdestination must be a directory. \n"
decl_stmt|;
name|String
name|cp
init|=
literal|"-cp<src><dst>:   Copy files that match the file pattern<src> to a \n"
operator|+
literal|"\t\tdestination.  When copying multiple files, the destination\n"
operator|+
literal|"\t\tmust be a directory. \n"
decl_stmt|;
name|String
name|put
init|=
literal|"-put<localsrc> ...<dst>: \tCopy files "
operator|+
literal|"from the local file system \n\t\tinto fs. \n"
decl_stmt|;
name|String
name|copyFromLocal
init|=
literal|"-copyFromLocal<localsrc> ...<dst>:"
operator|+
literal|" Identical to the -put command.\n"
decl_stmt|;
name|String
name|moveFromLocal
init|=
literal|"-moveFromLocal<localsrc> ...<dst>:"
operator|+
literal|" Same as -put, except that the source is\n\t\tdeleted after it's copied.\n"
decl_stmt|;
name|String
name|get
init|=
name|GET_SHORT_USAGE
operator|+
literal|":  Copy files that match the file pattern<src> \n"
operator|+
literal|"\t\tto the local name.<src> is kept.  When copying mutiple, \n"
operator|+
literal|"\t\tfiles, the destination must be a directory. \n"
decl_stmt|;
name|String
name|copyToLocal
init|=
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|":  Identical to the -get command.\n"
decl_stmt|;
name|String
name|moveToLocal
init|=
literal|"-moveToLocal<src><localdst>:  Not implemented yet \n"
decl_stmt|;
name|String
name|help
init|=
literal|"-help [cmd]: \tDisplays help for given command or all commands if none\n"
operator|+
literal|"\t\tis specified.\n"
decl_stmt|;
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|printHelp
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"D"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|D
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyFromLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveFromLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyToLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveToLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|thisCmdName
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|thisCmdName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instance
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t[-help [cmd]]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mv
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyFromLocal
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveFromLocal
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyToLocal
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveToLocal
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|thisCmdName
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|thisCmdName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instance
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|printHelp
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: will eventually auto-wrap the text, but this matches the expected
comment|// output for the hdfs tests...
DECL|method|printHelp (Command instance)
specifier|private
name|void
name|printHelp
parameter_list|(
name|Command
name|instance
parameter_list|)
block|{
name|boolean
name|firstLine
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|instance
operator|.
name|getDescription
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
name|String
name|prefix
decl_stmt|;
if|if
condition|(
name|firstLine
condition|)
block|{
name|prefix
operator|=
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|":\t"
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|"\t\t"
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Displays format of commands.    *     */
DECL|method|printUsage (String cmd)
specifier|private
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|"Usage: java "
operator|+
name|FsShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|" ["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-fs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-fs<local | file system URI>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-conf"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-conf<configuration file>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-D"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-D<[property=value>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|"<src><dst>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|"<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell ["
operator|+
name|GET_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell ["
operator|+
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|" [-crc]<src><localdst>]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-mv<src><dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-cp<src><dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-put<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-copyFromLocal<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-moveFromLocal<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|GET_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-moveToLocal [-crc]<src><localdst>]"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instance
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-help [cmd]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * run    */
DECL|method|run (String argv[])
specifier|public
name|int
name|run
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: This isn't the best place, but this class is being abused with
comment|// subclasses which of course override this method.  There really needs
comment|// to be a better base class for all commands
name|commandFactory
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|commandFactory
operator|.
name|registerCommands
argument_list|(
name|FsCommand
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|//
comment|// verify that we have enough command line parameters
comment|//
if|if
condition|(
literal|"-put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
comment|// initialize FsShell
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RPC
operator|.
name|VersionMismatch
name|v
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Version mismatch"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Version Mismatch between client and server"
operator|+
literal|"... command aborted."
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bad connection to FS. Command aborted. Exception: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|exitCode
operator|=
name|instance
operator|.
name|run
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|argv
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|instance
operator|.
name|displayError
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"-put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|argv
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
control|)
name|srcs
index|[
name|j
operator|++
index|]
operator|=
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|copyFromLocal
argument_list|(
name|srcs
argument_list|,
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|argv
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
control|)
name|srcs
index|[
name|j
operator|++
index|]
operator|=
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|moveFromLocal
argument_list|(
name|srcs
argument_list|,
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|copyToLocal
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|moveToLocal
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|rename
argument_list|(
name|argv
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|copy
argument_list|(
name|argv
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|argv
operator|.
name|length
condition|)
block|{
name|printHelp
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|arge
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|re
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|displayError
argument_list|(
name|cmd
argument_list|,
name|re
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{     }
return|return
name|exitCode
return|;
block|}
comment|// TODO: this is a quick workaround to accelerate the integration of
comment|// redesigned commands.  this will be removed this once all commands are
comment|// converted.  this change will avoid having to change the hdfs tests
comment|// every time a command is converted to use path-based exceptions
DECL|field|fnfPatterns
specifier|private
specifier|static
name|Pattern
index|[]
name|fnfPatterns
init|=
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"File (.*) does not exist\\."
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"File does not exist: (.*)"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"`(.*)': specified destination directory doest not exist"
argument_list|)
block|}
decl_stmt|;
DECL|method|displayError (String cmd, Exception e)
specifier|private
name|void
name|displayError
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|fnfPatterns
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|message
operator|=
operator|new
name|PathNotFoundException
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * main() has some simple utility methods    */
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|int
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

