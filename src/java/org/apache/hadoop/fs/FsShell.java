begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|FsCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/** Provide command line access to a FileSystem. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FsShell
specifier|public
class|class
name|FsShell
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FsShell
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|trash
specifier|private
name|Trash
name|trash
decl_stmt|;
DECL|field|commandFactory
specifier|protected
name|CommandFactory
name|commandFactory
decl_stmt|;
DECL|field|dateForm
specifier|public
specifier|static
specifier|final
name|SimpleDateFormat
name|dateForm
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm"
argument_list|)
decl_stmt|;
DECL|field|modifFmt
specifier|protected
specifier|static
specifier|final
name|SimpleDateFormat
name|modifFmt
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
DECL|field|BORDER
specifier|static
specifier|final
name|int
name|BORDER
init|=
literal|2
decl_stmt|;
static|static
block|{
name|modifFmt
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|SETREP_SHORT_USAGE
specifier|static
specifier|final
name|String
name|SETREP_SHORT_USAGE
init|=
literal|"-setrep [-R] [-w]<rep><path/file>"
decl_stmt|;
DECL|field|GET_SHORT_USAGE
specifier|static
specifier|final
name|String
name|GET_SHORT_USAGE
init|=
literal|"-get [-ignoreCrc] [-crc]<src><localdst>"
decl_stmt|;
DECL|field|COPYTOLOCAL_SHORT_USAGE
specifier|static
specifier|final
name|String
name|COPYTOLOCAL_SHORT_USAGE
init|=
name|GET_SHORT_USAGE
operator|.
name|replace
argument_list|(
literal|"-get"
argument_list|,
literal|"-copyToLocal"
argument_list|)
decl_stmt|;
DECL|field|TAIL_USAGE
specifier|static
specifier|final
name|String
name|TAIL_USAGE
init|=
literal|"-tail [-f]<file>"
decl_stmt|;
DECL|field|DU_USAGE
specifier|static
specifier|final
name|String
name|DU_USAGE
init|=
literal|"-du [-s] [-h]<paths...>"
decl_stmt|;
comment|/**    */
DECL|method|FsShell ()
specifier|public
name|FsShell
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FsShell (Configuration conf)
specifier|public
name|FsShell
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|trash
operator|=
literal|null
expr_stmt|;
name|commandFactory
operator|=
operator|new
name|CommandFactory
argument_list|()
expr_stmt|;
block|}
DECL|method|getFS ()
specifier|protected
name|FileSystem
name|getFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|getTrash ()
specifier|protected
name|Trash
name|getTrash
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|trash
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|trash
operator|=
operator|new
name|Trash
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|trash
return|;
block|}
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|getConf
argument_list|()
operator|.
name|setQuietMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Copies from stdin to the indicated file.    */
DECL|method|copyFromStdin (Path dst, FileSystem dstFs)
specifier|private
name|void
name|copyFromStdin
parameter_list|(
name|Path
name|dst
parameter_list|,
name|FileSystem
name|dstFs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dstFs
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When source is stdin, destination must be a file."
argument_list|)
throw|;
block|}
if|if
condition|(
name|dstFs
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|.
name|toString
argument_list|()
operator|+
literal|" already exists."
argument_list|)
throw|;
block|}
name|FSDataOutputStream
name|out
init|=
name|dstFs
operator|.
name|create
argument_list|(
name|dst
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|out
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**     * Print from src to stdout.    */
DECL|method|printToStdout (InputStream in)
specifier|private
name|void
name|printToStdout
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Add local files to the indicated FileSystem name. src is kept.    */
DECL|method|copyFromLocal (Path[] srcs, String dstf)
name|void
name|copyFromLocal
parameter_list|(
name|Path
index|[]
name|srcs
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|==
literal|1
operator|&&
name|srcs
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
name|copyFromStdin
argument_list|(
name|dstPath
argument_list|,
name|dstFs
argument_list|)
expr_stmt|;
else|else
name|dstFs
operator|.
name|copyFromLocalFile
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|srcs
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add local files to the indicated FileSystem name. src is removed.    */
DECL|method|moveFromLocal (Path[] srcs, String dstf)
name|void
name|moveFromLocal
parameter_list|(
name|Path
index|[]
name|srcs
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|dstFs
operator|.
name|moveFromLocalFile
argument_list|(
name|srcs
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * Add a local file to the indicated FileSystem name. src is removed.    */
DECL|method|moveFromLocal (Path src, String dstf)
name|void
name|moveFromLocal
parameter_list|(
name|Path
name|src
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|moveFromLocal
argument_list|(
operator|(
operator|new
name|Path
index|[]
block|{
name|src
block|}
operator|)
argument_list|,
name|dstf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Obtain the indicated files that match the file pattern<i>srcf</i>    * and copy them to the local name. srcf is kept.    * When copying multiple files, the destination must be a directory.     * Otherwise, IOException is thrown.    * @param argv: arguments    * @param pos: Ignore everything before argv[pos]      * @exception: IOException      * @see org.apache.hadoop.fs.FileSystem.globStatus     */
DECL|method|copyToLocal (String[]argv, int pos)
name|void
name|copyToLocal
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|"copyToLocal"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|"crc"
argument_list|,
literal|"ignoreCrc"
argument_list|)
decl_stmt|;
name|String
name|srcstr
init|=
literal|null
decl_stmt|;
name|String
name|dststr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|cf
operator|.
name|parse
argument_list|(
name|argv
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|srcstr
operator|=
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dststr
operator|=
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell "
operator|+
name|GET_SHORT_USAGE
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
name|boolean
name|copyCrc
init|=
name|cf
operator|.
name|getOpt
argument_list|(
literal|"crc"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|verifyChecksum
init|=
operator|!
name|cf
operator|.
name|getOpt
argument_list|(
literal|"ignoreCrc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dststr
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|copyCrc
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-crc option is not valid when destination is stdout."
argument_list|)
expr_stmt|;
block|}
name|cat
argument_list|(
name|srcstr
argument_list|,
name|verifyChecksum
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|File
name|dst
init|=
operator|new
name|File
argument_list|(
name|dststr
argument_list|)
decl_stmt|;
name|Path
name|srcpath
init|=
operator|new
name|Path
argument_list|(
name|srcstr
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFS
init|=
name|getSrcFileSystem
argument_list|(
name|srcpath
argument_list|,
name|verifyChecksum
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyCrc
operator|&&
operator|!
operator|(
name|srcFS
operator|instanceof
name|ChecksumFileSystem
operator|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"-crc option is not valid when source file system "
operator|+
literal|"does not have crc files. Automatically turn the option off."
argument_list|)
expr_stmt|;
name|copyCrc
operator|=
literal|false
expr_stmt|;
block|}
name|FileStatus
index|[]
name|srcs
init|=
name|srcFS
operator|.
name|globStatus
argument_list|(
name|srcpath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|srcs
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|srcpath
operator|+
literal|": No such file or directory"
argument_list|)
throw|;
block|}
name|boolean
name|dstIsDir
init|=
name|dst
operator|.
name|isDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|dstIsDir
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When copying multiple files, "
operator|+
literal|"destination should be a directory."
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|srcs
control|)
block|{
name|Path
name|p
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|File
name|f
init|=
name|dstIsDir
condition|?
operator|new
name|File
argument_list|(
name|dst
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|dst
decl_stmt|;
name|copyToLocal
argument_list|(
name|srcFS
argument_list|,
name|status
argument_list|,
name|f
argument_list|,
name|copyCrc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Return the {@link FileSystem} specified by src and the conf.    * It the {@link FileSystem} supports checksum, set verifyChecksum.    */
DECL|method|getSrcFileSystem (Path src, boolean verifyChecksum )
specifier|private
name|FileSystem
name|getSrcFileSystem
parameter_list|(
name|Path
name|src
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|srcFs
init|=
name|src
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|srcFs
operator|.
name|setVerifyChecksum
argument_list|(
name|verifyChecksum
argument_list|)
expr_stmt|;
return|return
name|srcFs
return|;
block|}
comment|/**    * The prefix for the tmp file used in copyToLocal.    * It must be at least three characters long, required by    * {@link java.io.File#createTempFile(String, String, File)}.    */
DECL|field|COPYTOLOCAL_PREFIX
specifier|static
specifier|final
name|String
name|COPYTOLOCAL_PREFIX
init|=
literal|"_copyToLocal_"
decl_stmt|;
comment|/**    * Copy a source file from a given file system to local destination.    * @param srcFS source file system    * @param src source path    * @param dst destination    * @param copyCrc copy CRC files?    * @exception IOException If some IO failed    */
DECL|method|copyToLocal (final FileSystem srcFS, final FileStatus srcStatus, final File dst, final boolean copyCrc)
specifier|private
name|void
name|copyToLocal
parameter_list|(
specifier|final
name|FileSystem
name|srcFS
parameter_list|,
specifier|final
name|FileStatus
name|srcStatus
parameter_list|,
specifier|final
name|File
name|dst
parameter_list|,
specifier|final
name|boolean
name|copyCrc
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* Keep the structure similar to ChecksumFileSystem.copyToLocal().       * Ideal these two should just invoke FileUtil.copy() and not repeat      * recursion here. Of course, copy() should support two more options :      * copyCrc and useTmpFile (may be useTmpFile need not be an option).      */
name|Path
name|src
init|=
name|srcStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcStatus
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|dst
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// match the error message in FileUtil.checkDest():
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// use absolute name so that tmp file is always created under dest dir
name|File
name|tmp
init|=
name|FileUtil
operator|.
name|createLocalTempFile
argument_list|(
name|dst
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|,
name|COPYTOLOCAL_PREFIX
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|tmp
argument_list|,
literal|false
argument_list|,
name|srcFS
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to copy "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tmp
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to rename tmp file "
operator|+
name|tmp
operator|+
literal|" to local destination \""
operator|+
name|dst
operator|+
literal|"\"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|copyCrc
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|srcFS
operator|instanceof
name|ChecksumFileSystem
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source file system does not have crc files"
argument_list|)
throw|;
block|}
name|ChecksumFileSystem
name|csfs
init|=
operator|(
name|ChecksumFileSystem
operator|)
name|srcFS
decl_stmt|;
name|File
name|dstcs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|srcFS
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|pathToFile
argument_list|(
name|csfs
operator|.
name|getChecksumFile
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|csfs
operator|.
name|getRawFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|csfs
operator|.
name|getFileStatus
argument_list|(
name|csfs
operator|.
name|getChecksumFile
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
name|copyToLocal
argument_list|(
name|fs
argument_list|,
name|status
argument_list|,
name|dstcs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|srcStatus
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Symlinks unsupported"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// once FileUtil.copy() supports tmp file, we don't need to mkdirs().
if|if
condition|(
operator|!
name|dst
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create local destination \""
operator|+
name|dst
operator|+
literal|"\"."
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|status
range|:
name|srcFS
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
control|)
block|{
name|copyToLocal
argument_list|(
name|srcFS
argument_list|,
name|status
argument_list|,
operator|new
name|File
argument_list|(
name|dst
argument_list|,
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|copyCrc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get all the files in the directories that match the source file     * pattern and merge and sort them to only one file on local fs     * srcf is kept.    * @param srcf: a file pattern specifying source files    * @param dstf: a destination local file/directory     * @exception: IOException      * @see org.apache.hadoop.fs.FileSystem.globStatus     */
DECL|method|copyMergeToLocal (String srcf, Path dst)
name|void
name|copyMergeToLocal
parameter_list|(
name|String
name|srcf
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|copyMergeToLocal
argument_list|(
name|srcf
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get all the files in the directories that match the source file pattern    * and merge and sort them to only one file on local fs     * srcf is kept.    *     * Also adds a string between the files (useful for adding \n    * to a text file)    * @param srcf: a file pattern specifying source files    * @param dstf: a destination local file/directory    * @param endline: if an end of line character is added to a text file     * @exception: IOException      * @see org.apache.hadoop.fs.FileSystem.globStatus     */
DECL|method|copyMergeToLocal (String srcf, Path dst, boolean endline)
name|void
name|copyMergeToLocal
parameter_list|(
name|String
name|srcf
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|endline
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|srcs
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|endline
condition|)
block|{
name|FileUtil
operator|.
name|copyMerge
argument_list|(
name|srcFs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FileUtil
operator|.
name|copyMerge
argument_list|(
name|srcFs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Obtain the indicated file and copy to the local name.    * srcf is removed.    */
DECL|method|moveToLocal (String srcf, Path dst)
name|void
name|moveToLocal
parameter_list|(
name|String
name|srcf
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Option '-moveToLocal' is not implemented yet."
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fetch all files that match the file pattern<i>srcf</i> and display    * their content on stdout.     * @param srcf: a file pattern specifying source files    * @exception: IOException    * @see org.apache.hadoop.fs.FileSystem.globStatus     */
DECL|method|cat (String src, boolean verifyChecksum)
name|void
name|cat
parameter_list|(
name|String
name|src
parameter_list|,
name|boolean
name|verifyChecksum
parameter_list|)
throws|throws
name|IOException
block|{
comment|//cat behavior in Linux
comment|//  [~/1207]$ ls ?.txt
comment|//  x.txt  z.txt
comment|//  [~/1207]$ cat x.txt y.txt z.txt
comment|//  xxx
comment|//  cat: y.txt: No such file or directory
comment|//  zzz
name|Path
name|srcPattern
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
operator|new
name|DelayedExceptionThrowing
argument_list|()
block|{
annotation|@
name|Override
name|void
name|process
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
name|printToStdout
argument_list|(
name|srcFs
operator|.
name|open
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|globAndProcess
argument_list|(
name|srcPattern
argument_list|,
name|getSrcFileSystem
argument_list|(
name|srcPattern
argument_list|,
name|verifyChecksum
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|TextRecordInputStream
specifier|private
class|class
name|TextRecordInputStream
extends|extends
name|InputStream
block|{
DECL|field|r
name|SequenceFile
operator|.
name|Reader
name|r
decl_stmt|;
DECL|field|key
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|key
decl_stmt|;
DECL|field|val
name|Writable
name|val
decl_stmt|;
DECL|field|inbuf
name|DataInputBuffer
name|inbuf
decl_stmt|;
DECL|field|outbuf
name|DataOutputBuffer
name|outbuf
decl_stmt|;
DECL|method|TextRecordInputStream (FileStatus f)
specifier|public
name|TextRecordInputStream
parameter_list|(
name|FileStatus
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|fpath
init|=
name|f
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|lconf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|r
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|lconf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|fpath
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|r
operator|.
name|getKeyClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
argument_list|,
name|lconf
argument_list|)
expr_stmt|;
name|val
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|r
operator|.
name|getValueClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
argument_list|,
name|lconf
argument_list|)
expr_stmt|;
name|inbuf
operator|=
operator|new
name|DataInputBuffer
argument_list|()
expr_stmt|;
name|outbuf
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|inbuf
operator|||
operator|-
literal|1
operator|==
operator|(
name|ret
operator|=
name|inbuf
operator|.
name|read
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|byte
index|[]
name|tmp
init|=
name|key
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|val
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|outbuf
operator|.
name|getData
argument_list|()
argument_list|,
name|outbuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ret
operator|=
name|inbuf
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|forMagic (Path p, FileSystem srcFs)
specifier|private
name|InputStream
name|forMagic
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|i
init|=
name|srcFs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|// check codecs
name|CompressionCodecFactory
name|cf
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|cf
operator|.
name|getCodec
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
return|return
name|codec
operator|.
name|createInputStream
argument_list|(
name|i
argument_list|)
return|;
block|}
switch|switch
condition|(
name|i
operator|.
name|readShort
argument_list|()
condition|)
block|{
case|case
literal|0x1f8b
case|:
comment|// RFC 1952
name|i
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|GZIPInputStream
argument_list|(
name|i
argument_list|)
return|;
case|case
literal|0x5345
case|:
comment|// 'S' 'E'
if|if
condition|(
name|i
operator|.
name|readByte
argument_list|()
operator|==
literal|'Q'
condition|)
block|{
name|i
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|TextRecordInputStream
argument_list|(
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
break|break;
block|}
name|i
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
DECL|method|text (String srcf)
name|void
name|text
parameter_list|(
name|String
name|srcf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPattern
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
operator|new
name|DelayedExceptionThrowing
argument_list|()
block|{
annotation|@
name|Override
name|void
name|process
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcFs
operator|.
name|isDirectory
argument_list|(
name|p
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source must be a file."
argument_list|)
throw|;
block|}
name|printToStdout
argument_list|(
name|forMagic
argument_list|(
name|p
argument_list|,
name|srcFs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|globAndProcess
argument_list|(
name|srcPattern
argument_list|,
name|srcPattern
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse the incoming command string    * @param cmd    * @param pos ignore anything before this pos in cmd    * @throws IOException     */
DECL|method|setReplication (String[] cmd, int pos)
specifier|private
name|void
name|setReplication
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
literal|"setrep"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|"R"
argument_list|,
literal|"w"
argument_list|)
decl_stmt|;
name|String
name|dst
init|=
literal|null
decl_stmt|;
name|short
name|rep
init|=
literal|0
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|c
operator|.
name|parse
argument_list|(
name|cmd
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|rep
operator|=
name|Short
operator|.
name|parseShort
argument_list|(
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dst
operator|=
name|parameters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Illegal replication, a positive integer expected"
argument_list|)
expr_stmt|;
throw|throw
name|nfe
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell "
operator|+
name|SETREP_SHORT_USAGE
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
if|if
condition|(
name|rep
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot set replication to: "
operator|+
name|rep
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"replication must be>= 1"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|waitList
init|=
name|c
operator|.
name|getOpt
argument_list|(
literal|"w"
argument_list|)
condition|?
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
else|:
literal|null
decl_stmt|;
name|setReplication
argument_list|(
name|rep
argument_list|,
name|dst
argument_list|,
name|c
operator|.
name|getOpt
argument_list|(
literal|"R"
argument_list|)
argument_list|,
name|waitList
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitList
operator|!=
literal|null
condition|)
block|{
name|waitForReplication
argument_list|(
name|waitList
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Wait for all files in waitList to have replication number equal to rep.    * @param waitList The files are waited for.    * @param rep The new replication number.    * @throws IOException IOException    */
DECL|method|waitForReplication (List<Path> waitList, int rep)
name|void
name|waitForReplication
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|waitList
parameter_list|,
name|int
name|rep
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Path
name|f
range|:
name|waitList
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Waiting for "
operator|+
name|f
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|boolean
name|printWarning
init|=
literal|false
decl_stmt|;
name|FileSystem
name|pFS
init|=
name|f
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
name|pFS
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|long
name|len
init|=
name|status
operator|.
name|getLen
argument_list|()
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|false
init|;
operator|!
name|done
condition|;
control|)
block|{
name|BlockLocation
index|[]
name|locations
init|=
name|pFS
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|locations
operator|.
name|length
operator|&&
name|locations
index|[
name|i
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|==
name|rep
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|printWarning
operator|&&
name|locations
index|[
name|i
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
operator|>
name|rep
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nWARNING: the waiting time may be long for "
operator|+
literal|"DECREASING the number of replication."
argument_list|)
expr_stmt|;
name|printWarning
operator|=
literal|true
expr_stmt|;
block|}
name|done
operator|=
name|i
operator|==
name|locations
operator|.
name|length
expr_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|" done"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the replication for files that match file pattern<i>srcf</i>    * if it's a directory and recursive is true,    * set replication for all the subdirs and those files too.    * @param newRep new replication factor    * @param srcf a file pattern specifying source files    * @param recursive if need to set replication factor for files in subdirs    * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|setReplication (short newRep, String srcf, boolean recursive, List<Path> waitingList)
name|void
name|setReplication
parameter_list|(
name|short
name|newRep
parameter_list|,
name|String
name|srcf
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|waitingList
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|srcs
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|setReplication
argument_list|(
name|newRep
argument_list|,
name|srcFs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|recursive
argument_list|,
name|waitingList
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setReplication (short newRep, FileSystem srcFs, Path src, boolean recursive, List<Path> waitingList)
specifier|private
name|void
name|setReplication
parameter_list|(
name|short
name|newRep
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|,
name|Path
name|src
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|waitingList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|setFileReplication
argument_list|(
name|src
argument_list|,
name|srcFs
argument_list|,
name|newRep
argument_list|,
name|waitingList
argument_list|)
expr_stmt|;
return|return;
block|}
name|FileStatus
name|items
index|[]
decl_stmt|;
try|try
block|{
name|items
operator|=
name|srcFs
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not get listing for "
operator|+
name|src
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|items
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|setFileReplication
argument_list|(
name|items
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|srcFs
argument_list|,
name|newRep
argument_list|,
name|waitingList
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|items
index|[
name|i
index|]
operator|.
name|isSymlink
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Symlinks unsupported"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|recursive
condition|)
block|{
name|setReplication
argument_list|(
name|newRep
argument_list|,
name|srcFs
argument_list|,
name|items
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|recursive
argument_list|,
name|waitingList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Actually set the replication for this file    * If it fails either throw IOException or print an error msg    * @param file: a file/directory    * @param newRep: new replication factor    * @throws IOException    */
DECL|method|setFileReplication (Path file, FileSystem srcFs, short newRep, List<Path> waitList)
specifier|private
name|void
name|setFileReplication
parameter_list|(
name|Path
name|file
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|,
name|short
name|newRep
parameter_list|,
name|List
argument_list|<
name|Path
argument_list|>
name|waitList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcFs
operator|.
name|setReplication
argument_list|(
name|file
argument_list|,
name|newRep
argument_list|)
condition|)
block|{
if|if
condition|(
name|waitList
operator|!=
literal|null
condition|)
block|{
name|waitList
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Replication "
operator|+
name|newRep
operator|+
literal|" set: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not set replication for: "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Show the size of a partition in the filesystem that contains    * the specified<i>path</i>.    * @param path a path specifying the source partition. null means /.    * @throws IOException      */
DECL|method|df (String path)
name|void
name|df
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
name|path
operator|=
literal|"/"
expr_stmt|;
specifier|final
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcFs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Cannot access "
operator|+
name|srcPath
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|FsStatus
name|stats
init|=
name|srcFs
operator|.
name|getStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
specifier|final
name|int
name|PercentUsed
init|=
call|(
name|int
call|)
argument_list|(
literal|100.0f
operator|*
operator|(
name|float
operator|)
name|stats
operator|.
name|getUsed
argument_list|()
operator|/
operator|(
name|float
operator|)
name|stats
operator|.
name|getCapacity
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Filesystem\t\tSize\tUsed\tAvail\tUse%"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%s\t\t%d\t%d\t%d\t%d%%\n"
argument_list|,
name|path
argument_list|,
name|stats
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|stats
operator|.
name|getUsed
argument_list|()
argument_list|,
name|stats
operator|.
name|getRemaining
argument_list|()
argument_list|,
name|PercentUsed
argument_list|)
expr_stmt|;
block|}
comment|/**    * Show the size of all files that match the file pattern<i>src</i>    * @param cmd    * @param pos ignore anything before this pos in cmd    * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|du (String[] cmd, int pos)
name|void
name|du
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
literal|"du"
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"h"
argument_list|,
literal|"s"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|params
decl_stmt|;
try|try
block|{
name|params
operator|=
name|c
operator|.
name|parse
argument_list|(
name|cmd
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell "
operator|+
name|DU_USAGE
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
name|boolean
name|humanReadable
init|=
name|c
operator|.
name|getOpt
argument_list|(
literal|"h"
argument_list|)
decl_stmt|;
name|boolean
name|summary
init|=
name|c
operator|.
name|getOpt
argument_list|(
literal|"s"
argument_list|)
decl_stmt|;
comment|// Default to cwd
if|if
condition|(
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|UsagePair
argument_list|>
name|usages
init|=
operator|new
name|ArrayList
argument_list|<
name|UsagePair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|src
range|:
name|params
control|)
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|globStatus
index|[]
init|=
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|FileStatus
name|statusToPrint
index|[]
decl_stmt|;
if|if
condition|(
name|summary
condition|)
block|{
name|statusToPrint
operator|=
name|globStatus
expr_stmt|;
block|}
else|else
block|{
name|Path
name|statPaths
index|[]
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|globStatus
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
try|try
block|{
name|statusToPrint
operator|=
name|srcFs
operator|.
name|listStatus
argument_list|(
name|statPaths
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|statusToPrint
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|statusToPrint
operator|==
literal|null
operator|)
operator|||
operator|(
operator|(
name|statusToPrint
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
operator|(
operator|!
name|srcFs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Cannot access "
operator|+
name|src
operator|+
literal|": No such file or directory."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|summary
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|statusToPrint
operator|.
name|length
operator|+
literal|" items"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FileStatus
name|stat
range|:
name|statusToPrint
control|)
block|{
name|long
name|length
decl_stmt|;
if|if
condition|(
name|summary
operator|||
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|length
operator|=
name|srcFs
operator|.
name|getContentSummary
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|stat
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|usages
operator|.
name|add
argument_list|(
operator|new
name|UsagePair
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|stat
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|printUsageSummary
argument_list|(
name|usages
argument_list|,
name|humanReadable
argument_list|)
expr_stmt|;
block|}
comment|/**    * Show the summary disk usage of each dir/file     * that matches the file pattern<i>src</i>    * @param cmd    * @param pos ignore anything before this pos in cmd    * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|dus (String[] cmd, int pos)
name|void
name|dus
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|newcmd
index|[]
init|=
operator|new
name|String
index|[
name|cmd
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|cmd
argument_list|,
literal|0
argument_list|,
name|newcmd
argument_list|,
literal|0
argument_list|,
name|cmd
operator|.
name|length
argument_list|)
expr_stmt|;
name|newcmd
index|[
name|cmd
operator|.
name|length
index|]
operator|=
literal|"-s"
expr_stmt|;
name|du
argument_list|(
name|newcmd
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
DECL|method|printUsageSummary (List<UsagePair> usages, boolean humanReadable)
specifier|private
name|void
name|printUsageSummary
parameter_list|(
name|List
argument_list|<
name|UsagePair
argument_list|>
name|usages
parameter_list|,
name|boolean
name|humanReadable
parameter_list|)
block|{
name|int
name|maxColumnWidth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|UsagePair
name|usage
range|:
name|usages
control|)
block|{
name|String
name|toPrint
init|=
name|humanReadable
condition|?
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|usage
operator|.
name|bytes
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|usage
operator|.
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|toPrint
operator|.
name|length
argument_list|()
operator|>
name|maxColumnWidth
condition|)
block|{
name|maxColumnWidth
operator|=
name|toPrint
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|UsagePair
name|usage
range|:
name|usages
control|)
block|{
name|String
name|toPrint
init|=
name|humanReadable
condition|?
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|usage
operator|.
name|bytes
argument_list|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|usage
operator|.
name|bytes
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%-"
operator|+
operator|(
name|maxColumnWidth
operator|+
name|BORDER
operator|)
operator|+
literal|"s"
argument_list|,
name|toPrint
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|usage
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create the given dir    */
DECL|method|mkdir (String src)
name|void
name|mkdir
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|f
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|fstatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fstatus
operator|=
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|fstatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot create directory "
operator|+
name|src
operator|+
literal|": File exists"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|+
literal|" exists but "
operator|+
literal|"is not a directory"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|srcFs
operator|.
name|mkdirs
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failed to create "
operator|+
name|src
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * (Re)create zero-length file at the specified path.    * This will be replaced by a more UNIX-like touch when files may be    * modified.    */
DECL|method|touchz (String src)
name|void
name|touchz
parameter_list|(
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|f
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|st
decl_stmt|;
if|if
condition|(
name|srcFs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|st
operator|=
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// TODO: handle this
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|+
literal|" is a directory"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|st
operator|.
name|getLen
argument_list|()
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|+
literal|" must be a zero-length file"
argument_list|)
throw|;
block|}
name|FSDataOutputStream
name|out
init|=
name|srcFs
operator|.
name|create
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check file types.    */
DECL|method|test (String argv[], int i)
name|int
name|test
parameter_list|(
name|String
name|argv
index|[]
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|argv
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
operator|||
name|argv
index|[
name|i
index|]
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not a flag: "
operator|+
name|argv
index|[
name|i
index|]
argument_list|)
throw|;
name|char
name|flag
init|=
name|argv
index|[
name|i
index|]
operator|.
name|toCharArray
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|f
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
literal|'e'
case|:
return|return
name|srcFs
operator|.
name|exists
argument_list|(
name|f
argument_list|)
condition|?
literal|0
else|:
literal|1
return|;
case|case
literal|'z'
case|:
return|return
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|getLen
argument_list|()
operator|==
literal|0
condition|?
literal|0
else|:
literal|1
return|;
case|case
literal|'d'
case|:
return|return
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|f
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|?
literal|0
else|:
literal|1
return|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown flag: "
operator|+
name|flag
argument_list|)
throw|;
block|}
block|}
comment|/**    * Print statistics about path in specified format.    * Format sequences:    *   %b: Size of file in blocks    *   %n: Filename    *   %o: Block size    *   %r: replication    *   %y: UTC date as&quot;yyyy-MM-dd HH:mm:ss&quot;    *   %Y: Milliseconds since January 1, 1970 UTC    */
DECL|method|stat (char[] fmt, String src)
name|void
name|stat
parameter_list|(
name|char
index|[]
name|fmt
parameter_list|,
name|String
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|glob
index|[]
init|=
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|glob
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot stat `"
operator|+
name|src
operator|+
literal|"': No such file or directory"
argument_list|)
throw|;
for|for
control|(
name|FileStatus
name|f
range|:
name|glob
control|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fmt
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|fmt
index|[
name|i
index|]
operator|!=
literal|'%'
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|fmt
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|fmt
operator|.
name|length
condition|)
break|break;
switch|switch
condition|(
name|fmt
index|[
operator|++
name|i
index|]
condition|)
block|{
case|case
literal|'b'
case|:
name|buf
operator|.
name|append
argument_list|(
name|f
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|buf
operator|.
name|append
argument_list|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|?
literal|"directory"
else|:
operator|(
name|f
operator|.
name|isFile
argument_list|()
condition|?
literal|"regular file"
else|:
literal|"symlink"
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|buf
operator|.
name|append
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'o'
case|:
name|buf
operator|.
name|append
argument_list|(
name|f
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|buf
operator|.
name|append
argument_list|(
name|f
operator|.
name|getReplication
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'y'
case|:
name|buf
operator|.
name|append
argument_list|(
name|modifFmt
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'Y'
case|:
name|buf
operator|.
name|append
argument_list|(
name|f
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|buf
operator|.
name|append
argument_list|(
name|fmt
index|[
name|i
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Move files that match the file pattern<i>srcf</i>    * to a destination file.    * When moving mutiple files, the destination must be a directory.     * Otherwise, IOException is thrown.    * @param srcf a file pattern specifying source files    * @param dstf a destination local file/directory     * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|rename (String srcf, String dstf)
name|void
name|rename
parameter_list|(
name|String
name|srcf
parameter_list|,
name|String
name|dstf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|srcURI
init|=
name|fs
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|URI
name|dstURI
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
operator|.
name|getUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcURI
operator|.
name|compareTo
argument_list|(
name|dstURI
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"src and destination filesystems do not match."
argument_list|)
throw|;
block|}
name|Path
index|[]
name|srcs
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|fs
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When moving multiple files, "
operator|+
literal|"destination should be a directory."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fs
operator|.
name|rename
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|,
name|dst
argument_list|)
condition|)
block|{
name|FileStatus
name|srcFstatus
init|=
literal|null
decl_stmt|;
name|FileStatus
name|dstFstatus
init|=
literal|null
decl_stmt|;
try|try
block|{
name|srcFstatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|srcs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|srcs
index|[
name|i
index|]
operator|+
literal|": No such file or directory"
argument_list|)
throw|;
block|}
try|try
block|{
name|dstFstatus
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error getting file status of "
operator|+
name|dst
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|srcFstatus
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|dstFstatus
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|srcFstatus
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|dstFstatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"cannot overwrite non directory "
operator|+
name|dst
operator|+
literal|" with directory "
operator|+
name|srcs
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to rename "
operator|+
name|srcs
index|[
name|i
index|]
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * Move/rename file(s) to a destination file. Multiple source    * files can be specified. The destination is the last element of    * the argvp[] array.    * If multiple source files are specified, then the destination     * must be a directory. Otherwise, IOException is thrown.    * @exception: IOException      */
DECL|method|rename (String argv[], Configuration conf)
specifier|private
name|int
name|rename
parameter_list|(
name|String
name|argv
index|[]
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
name|dest
init|=
name|argv
index|[
name|argv
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|//
comment|// If the user has specified multiple source files, then
comment|// the destination has to be a directory
comment|//
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|3
condition|)
block|{
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dst
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstFs
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When moving multiple files, "
operator|+
literal|"destination "
operator|+
name|dest
operator|+
literal|" should be a directory."
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// for each source file, issue the rename
comment|//
for|for
control|(
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|//
comment|// issue the rename to the fs
comment|//
name|rename
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error renaming "
operator|+
name|argv
index|[
name|i
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error mesage.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error renaming "
operator|+
name|argv
index|[
name|i
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// IO exception encountered locally.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Copy files that match the file pattern<i>srcf</i>    * to a destination file.    * When copying mutiple files, the destination must be a directory.     * Otherwise, IOException is thrown.    * @param srcf a file pattern specifying source files    * @param dstf a destination local file/directory     * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|copy (String srcf, String dstf, Configuration conf)
name|void
name|copy
parameter_list|(
name|String
name|srcf
parameter_list|,
name|String
name|dstf
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|dstf
argument_list|)
decl_stmt|;
name|FileSystem
name|dstFs
init|=
name|dstPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|srcs
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|>
literal|1
operator|&&
operator|!
name|dstFs
operator|.
name|isDirectory
argument_list|(
name|dstPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When copying multiple files, "
operator|+
literal|"destination should be a directory."
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|srcs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|srcFs
argument_list|,
name|srcs
index|[
name|i
index|]
argument_list|,
name|dstFs
argument_list|,
name|dstPath
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Copy file(s) to a destination file. Multiple source    * files can be specified. The destination is the last element of    * the argvp[] array.    * If multiple source files are specified, then the destination     * must be a directory. Otherwise, IOException is thrown.    * @exception: IOException      */
DECL|method|copy (String argv[], Configuration conf)
specifier|private
name|int
name|copy
parameter_list|(
name|String
name|argv
index|[]
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
name|String
name|dest
init|=
name|argv
index|[
name|argv
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
comment|//
comment|// If the user has specified multiple source files, then
comment|// the destination has to be a directory
comment|//
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|3
condition|)
block|{
name|Path
name|dst
init|=
operator|new
name|Path
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|FileSystem
name|pFS
init|=
name|dst
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pFS
operator|.
name|isDirectory
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"When copying multiple files, "
operator|+
literal|"destination "
operator|+
name|dest
operator|+
literal|" should be a directory."
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// for each source file, issue the copy
comment|//
for|for
control|(
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|//
comment|// issue the copy to the fs
comment|//
name|copy
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
name|dest
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error copying "
operator|+
name|argv
index|[
name|i
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error mesage.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error copying "
operator|+
name|argv
index|[
name|i
index|]
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// IO exception encountered locally.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Delete all files that match the file pattern<i>srcf</i>.    * @param srcf a file pattern specifying source files    * @param recursive if need to delete subdirs    * @param skipTrash Should we skip the trash, if it's enabled?    * @throws IOException      * @see org.apache.hadoop.fs.FileSystem#globStatus(Path)    */
DECL|method|delete (String srcf, final boolean recursive, final boolean skipTrash)
name|void
name|delete
parameter_list|(
name|String
name|srcf
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|,
specifier|final
name|boolean
name|skipTrash
parameter_list|)
throws|throws
name|IOException
block|{
comment|//rm behavior in Linux
comment|//  [~/1207]$ ls ?.txt
comment|//  x.txt  z.txt
comment|//  [~/1207]$ rm x.txt y.txt z.txt
comment|//  rm: cannot remove `y.txt': No such file or directory
name|Path
name|srcPattern
init|=
operator|new
name|Path
argument_list|(
name|srcf
argument_list|)
decl_stmt|;
operator|new
name|DelayedExceptionThrowing
argument_list|()
block|{
annotation|@
name|Override
name|void
name|process
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
argument_list|(
name|p
argument_list|,
name|srcFs
argument_list|,
name|recursive
argument_list|,
name|skipTrash
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|globAndProcess
argument_list|(
name|srcPattern
argument_list|,
name|srcPattern
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* delete a file */
DECL|method|delete (Path src, FileSystem srcFs, boolean recursive, boolean skipTrash)
specifier|private
name|void
name|delete
parameter_list|(
name|Path
name|src
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|skipTrash
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fs
operator|=
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// Have to re-throw so that console output is as expected
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"cannot remove "
operator|+
name|src
operator|+
literal|": No such file or directory."
argument_list|)
throw|;
block|}
if|if
condition|(
name|fs
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|recursive
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory \""
operator|+
name|src
operator|+
literal|"\", use -rmr instead"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|skipTrash
condition|)
block|{
try|try
block|{
name|Trash
name|trashTmp
init|=
operator|new
name|Trash
argument_list|(
name|srcFs
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|trashTmp
operator|.
name|moveToTrash
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Moved to trash: "
operator|+
name|src
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error with trash"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Exception
name|cause
init|=
operator|(
name|Exception
operator|)
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|cause
operator|.
name|getLocalizedMessage
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Problem with Trash."
operator|+
name|msg
operator|+
literal|". Consider using -skipTrash option"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|srcFs
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Deleted "
operator|+
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Delete failed "
operator|+
name|src
argument_list|)
throw|;
block|}
block|}
DECL|method|expunge ()
specifier|private
name|void
name|expunge
parameter_list|()
throws|throws
name|IOException
block|{
name|getTrash
argument_list|()
operator|.
name|expunge
argument_list|()
expr_stmt|;
name|getTrash
argument_list|()
operator|.
name|checkpoint
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns the Trash object associated with this shell.    */
DECL|method|getCurrentTrashDir ()
specifier|public
name|Path
name|getCurrentTrashDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getTrash
argument_list|()
operator|.
name|getCurrentTrashDir
argument_list|()
return|;
block|}
comment|/**    * Parse the incoming command string    * @param cmd    * @param pos ignore anything before this pos in cmd    * @throws IOException     */
DECL|method|tail (String[] cmd, int pos)
specifier|private
name|void
name|tail
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|,
name|int
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
literal|"tail"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|String
name|src
init|=
literal|null
decl_stmt|;
name|Path
name|path
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|c
operator|.
name|parse
argument_list|(
name|cmd
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|src
operator|=
name|parameters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell "
operator|+
name|TAIL_USAGE
argument_list|)
expr_stmt|;
throw|throw
name|iae
throw|;
block|}
name|boolean
name|foption
init|=
name|c
operator|.
name|getOpt
argument_list|(
literal|"f"
argument_list|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|FileSystem
name|srcFs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
name|fileStatus
init|=
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Source must be a file."
argument_list|)
throw|;
block|}
name|long
name|fileSize
init|=
name|fileStatus
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
operator|(
name|fileSize
operator|>
literal|1024
operator|)
condition|?
name|fileSize
operator|-
literal|1024
else|:
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|FSDataInputStream
name|in
init|=
name|srcFs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|in
operator|.
name|seek
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|offset
operator|=
name|in
operator|.
name|getPos
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|foption
condition|)
block|{
break|break;
block|}
name|fileSize
operator|=
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
operator|.
name|getLen
argument_list|()
expr_stmt|;
name|offset
operator|=
operator|(
name|fileSize
operator|>
name|offset
operator|)
condition|?
name|offset
else|:
name|fileSize
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
comment|/**    * This class runs a command on a given FileStatus. This can be used for    * running various commands like chmod, chown etc.    */
DECL|class|CmdHandler
specifier|static
specifier|abstract
class|class
name|CmdHandler
block|{
DECL|field|errorCode
specifier|protected
name|int
name|errorCode
init|=
literal|0
decl_stmt|;
DECL|field|okToContinue
specifier|protected
name|boolean
name|okToContinue
init|=
literal|true
decl_stmt|;
DECL|field|cmdName
specifier|protected
name|String
name|cmdName
decl_stmt|;
DECL|method|getErrorCode ()
name|int
name|getErrorCode
parameter_list|()
block|{
return|return
name|errorCode
return|;
block|}
DECL|method|okToContinue ()
name|boolean
name|okToContinue
parameter_list|()
block|{
return|return
name|okToContinue
return|;
block|}
DECL|method|getName ()
name|String
name|getName
parameter_list|()
block|{
return|return
name|cmdName
return|;
block|}
DECL|method|CmdHandler (String cmdName)
specifier|protected
name|CmdHandler
parameter_list|(
name|String
name|cmdName
parameter_list|)
block|{
name|this
operator|.
name|cmdName
operator|=
name|cmdName
expr_stmt|;
block|}
DECL|method|run (FileStatus file, FileSystem fs)
specifier|public
specifier|abstract
name|void
name|run
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/** helper returns listStatus() */
DECL|method|shellListStatus (String cmd, FileSystem srcFs, FileStatus src)
specifier|private
specifier|static
name|FileStatus
index|[]
name|shellListStatus
parameter_list|(
name|String
name|cmd
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|,
name|FileStatus
name|src
parameter_list|)
block|{
if|if
condition|(
name|src
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
block|{
name|src
block|}
decl_stmt|;
return|return
name|files
return|;
block|}
name|Path
name|path
init|=
name|src
operator|.
name|getPath
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStatus
index|[]
name|files
init|=
name|srcFs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|files
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|+
literal|": could not get listing for '"
operator|+
name|path
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error listing "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|+
literal|": could not get get listing for '"
operator|+
name|path
operator|+
literal|"' : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Runs the command on a given file with the command handler.     * If recursive is set, command is run recursively.    */
DECL|method|runCmdHandler (CmdHandler handler, FileStatus stat, FileSystem srcFs, boolean recursive)
specifier|private
specifier|static
name|int
name|runCmdHandler
parameter_list|(
name|CmdHandler
name|handler
parameter_list|,
name|FileStatus
name|stat
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|errors
init|=
literal|0
decl_stmt|;
name|handler
operator|.
name|run
argument_list|(
name|stat
argument_list|,
name|srcFs
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
operator|&&
name|stat
operator|.
name|isDirectory
argument_list|()
operator|&&
name|handler
operator|.
name|okToContinue
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|shellListStatus
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
argument_list|,
name|srcFs
argument_list|,
name|stat
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|errors
operator|+=
name|runCmdHandler
argument_list|(
name|handler
argument_list|,
name|file
argument_list|,
name|srcFs
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|errors
return|;
block|}
comment|///top level runCmdHandler
DECL|method|runCmdHandler (CmdHandler handler, String[] args, int startIndex, boolean recursive)
name|int
name|runCmdHandler
parameter_list|(
name|CmdHandler
name|handler
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|int
name|startIndex
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|errors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIndex
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|FileSystem
name|srcFs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
comment|// if nothing matches to given glob pattern then increment error count
if|if
condition|(
name|paths
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
operator|+
literal|": could not get status for '"
operator|+
name|args
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|errors
operator|++
expr_stmt|;
block|}
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
try|try
block|{
name|FileStatus
name|file
init|=
name|srcFs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
operator|+
literal|": could not get status for '"
operator|+
name|path
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|errors
operator|++
expr_stmt|;
block|}
else|else
block|{
name|errors
operator|+=
name|runCmdHandler
argument_list|(
name|handler
argument_list|,
name|file
argument_list|,
name|srcFs
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error getting status for "
operator|+
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
operator|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getLocalizedMessage
argument_list|()
else|:
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getLocalizedMessage
argument_list|()
else|:
literal|"null"
operator|)
operator|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
operator|+
literal|": could not get status for '"
operator|+
name|path
operator|+
literal|"': "
operator|+
name|msg
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|errors
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|errors
operator|>
literal|0
operator|||
name|handler
operator|.
name|getErrorCode
argument_list|()
operator|!=
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
return|;
block|}
comment|/**    * Return an abbreviated English-language desc of the byte length    * @deprecated Consider using {@link org.apache.hadoop.util.StringUtils#byteDesc} instead.    */
annotation|@
name|Deprecated
DECL|method|byteDesc (long len)
specifier|public
specifier|static
name|String
name|byteDesc
parameter_list|(
name|long
name|len
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|len
argument_list|)
return|;
block|}
comment|/**    * @deprecated Consider using {@link org.apache.hadoop.util.StringUtils#limitDecimalTo2} instead.    */
annotation|@
name|Deprecated
DECL|method|limitDecimalTo2 (double d)
specifier|public
specifier|static
specifier|synchronized
name|String
name|limitDecimalTo2
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|limitDecimalTo2
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|printHelp (String cmd)
specifier|private
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|summary
init|=
literal|"hadoop fs is the command to execute fs commands. "
operator|+
literal|"The full syntax is: \n\n"
operator|+
literal|"hadoop fs [-fs<local | file system URI>] [-conf<configuration file>]\n\t"
operator|+
literal|"[-D<property=value>] [-df [<path>]] [-du [-s] [-h]<path>]\n\t"
operator|+
literal|"[-dus<path>] [-mv<src><dst>] [-cp<src><dst>] [-rm [-skipTrash]<src>]\n\t"
operator|+
literal|"[-rmr [-skipTrash]<src>] [-put<localsrc> ...<dst>] [-copyFromLocal<localsrc> ...<dst>]\n\t"
operator|+
literal|"[-moveFromLocal<localsrc> ...<dst>] ["
operator|+
name|GET_SHORT_USAGE
operator|+
literal|"\n\t"
operator|+
literal|"[-getmerge<src><localdst> [addnl]] [-cat<src>]\n\t"
operator|+
literal|"["
operator|+
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|"] [-moveToLocal<src><localdst>]\n\t"
operator|+
literal|"[-mkdir<path>] [-report] ["
operator|+
name|SETREP_SHORT_USAGE
operator|+
literal|"]\n\t"
operator|+
literal|"[-touchz<path>] [-test -[ezd]<path>] [-stat [format]<path>]\n\t"
operator|+
literal|"[-tail [-f]<path>] [-text<path>]\n\t"
operator|+
literal|"["
operator|+
name|FsShellPermissions
operator|.
name|CHMOD_USAGE
operator|+
literal|"]\n\t"
operator|+
literal|"["
operator|+
name|FsShellPermissions
operator|.
name|CHOWN_USAGE
operator|+
literal|"]\n\t"
operator|+
literal|"["
operator|+
name|FsShellPermissions
operator|.
name|CHGRP_USAGE
operator|+
literal|"]"
decl_stmt|;
name|String
name|conf
init|=
literal|"-conf<configuration file>:  Specify an application configuration file."
decl_stmt|;
name|String
name|D
init|=
literal|"-D<property=value>:  Use value for given property."
decl_stmt|;
name|String
name|fs
init|=
literal|"-fs [local |<file system URI>]: \tSpecify the file system to use.\n"
operator|+
literal|"\t\tIf not specified, the current configuration is used, \n"
operator|+
literal|"\t\ttaken from the following, in increasing precedence: \n"
operator|+
literal|"\t\t\tcore-default.xml inside the hadoop jar file \n"
operator|+
literal|"\t\t\tcore-site.xml in $HADOOP_CONF_DIR \n"
operator|+
literal|"\t\t'local' means use the local file system as your DFS. \n"
operator|+
literal|"\t\t<file system URI> specifies a particular file system to \n"
operator|+
literal|"\t\tcontact. This argument is optional but if used must appear\n"
operator|+
literal|"\t\tappear first on the command line.  Exactly one additional\n"
operator|+
literal|"\t\targument must be specified. \n"
decl_stmt|;
name|String
name|df
init|=
literal|"-df [<path>]: \tShows the capacity, free and used space of the filesystem.\n"
operator|+
literal|"\t\tIf the filesystem has multiple partitions, and no path to a particular partition\n"
operator|+
literal|"\t\tis specified, then the status of the root partitions will be shown.\n"
decl_stmt|;
name|String
name|du
init|=
literal|"-du [-s] [-h]<path>: \tShow the amount of space, in bytes, used by the files that \n"
operator|+
literal|"\t\tmatch the specified file pattern. The following flags are optional:\n"
operator|+
literal|"\t\t  -s   Rather than showing the size of each individual file that\n"
operator|+
literal|"\t\t       matches the pattern, shows the total (summary) size.\n"
operator|+
literal|"\t\t  -h   Formats the sizes of files in a human-readable fashion\n"
operator|+
literal|"\t\t       rather than a number of bytes.\n"
operator|+
literal|"\n"
operator|+
literal|"\t\tNote that, even without the -s option, this only shows size summaries\n"
operator|+
literal|"\t\tone level deep into a directory.\n"
operator|+
literal|"\t\tThe output is in the form \n"
operator|+
literal|"\t\t\tsize\tname(full path)\n"
decl_stmt|;
name|String
name|dus
init|=
literal|"-dus<path>: \tShow the amount of space, in bytes, used by the files that \n"
operator|+
literal|"\t\tmatch the specified file pattern. This is equivalent to -du -s above.\n"
decl_stmt|;
name|String
name|mv
init|=
literal|"-mv<src><dst>:   Move files that match the specified file pattern<src>\n"
operator|+
literal|"\t\tto a destination<dst>.  When moving multiple files, the \n"
operator|+
literal|"\t\tdestination must be a directory. \n"
decl_stmt|;
name|String
name|cp
init|=
literal|"-cp<src><dst>:   Copy files that match the file pattern<src> to a \n"
operator|+
literal|"\t\tdestination.  When copying multiple files, the destination\n"
operator|+
literal|"\t\tmust be a directory. \n"
decl_stmt|;
name|String
name|rm
init|=
literal|"-rm [-skipTrash]<src>: \tDelete all files that match the specified file pattern.\n"
operator|+
literal|"\t\tEquivalent to the Unix command \"rm<src>\"\n"
operator|+
literal|"\t\t-skipTrash option bypasses trash, if enabled, and immediately\n"
operator|+
literal|"deletes<src>"
decl_stmt|;
name|String
name|rmr
init|=
literal|"-rmr [-skipTrash]<src>: \tRemove all directories which match the specified file \n"
operator|+
literal|"\t\tpattern. Equivalent to the Unix command \"rm -rf<src>\"\n"
operator|+
literal|"\t\t-skipTrash option bypasses trash, if enabled, and immediately\n"
operator|+
literal|"deletes<src>"
decl_stmt|;
name|String
name|put
init|=
literal|"-put<localsrc> ...<dst>: \tCopy files "
operator|+
literal|"from the local file system \n\t\tinto fs. \n"
decl_stmt|;
name|String
name|copyFromLocal
init|=
literal|"-copyFromLocal<localsrc> ...<dst>:"
operator|+
literal|" Identical to the -put command.\n"
decl_stmt|;
name|String
name|moveFromLocal
init|=
literal|"-moveFromLocal<localsrc> ...<dst>:"
operator|+
literal|" Same as -put, except that the source is\n\t\tdeleted after it's copied.\n"
decl_stmt|;
name|String
name|get
init|=
name|GET_SHORT_USAGE
operator|+
literal|":  Copy files that match the file pattern<src> \n"
operator|+
literal|"\t\tto the local name.<src> is kept.  When copying mutiple, \n"
operator|+
literal|"\t\tfiles, the destination must be a directory. \n"
decl_stmt|;
name|String
name|getmerge
init|=
literal|"-getmerge<src><localdst>:  Get all the files in the directories that \n"
operator|+
literal|"\t\tmatch the source file pattern and merge and sort them to only\n"
operator|+
literal|"\t\tone file on local fs.<src> is kept.\n"
decl_stmt|;
name|String
name|cat
init|=
literal|"-cat<src>: \tFetch all files that match the file pattern<src> \n"
operator|+
literal|"\t\tand display their content on stdout.\n"
decl_stmt|;
name|String
name|text
init|=
literal|"-text<src>: \tTakes a source file and outputs the file in text format.\n"
operator|+
literal|"\t\tThe allowed formats are zip and TextRecordInputStream.\n"
decl_stmt|;
name|String
name|copyToLocal
init|=
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|":  Identical to the -get command.\n"
decl_stmt|;
name|String
name|moveToLocal
init|=
literal|"-moveToLocal<src><localdst>:  Not implemented yet \n"
decl_stmt|;
name|String
name|mkdir
init|=
literal|"-mkdir<path>: \tCreate a directory in specified location. \n"
decl_stmt|;
name|String
name|setrep
init|=
name|SETREP_SHORT_USAGE
operator|+
literal|":  Set the replication level of a file. \n"
operator|+
literal|"\t\tThe -R flag requests a recursive change of replication level \n"
operator|+
literal|"\t\tfor an entire tree.\n"
decl_stmt|;
name|String
name|touchz
init|=
literal|"-touchz<path>: Creates a file of zero length\n"
operator|+
literal|"\t\t at<path> with current time as the timestamp of that<path>.\n"
operator|+
literal|"\t\t An error is returned if the file exists with non-zero length\n"
decl_stmt|;
name|String
name|test
init|=
literal|"-test -[ezd]<path>: If file { exists, has zero length, is a directory\n"
operator|+
literal|"\t\tthen return 0, else return 1.\n"
decl_stmt|;
name|String
name|stat
init|=
literal|"-stat [format]<path>: Print statistics about the file/directory at<path>\n"
operator|+
literal|"\t\tin the specified format. Format accepts filesize in blocks (%b), filename (%n),\n"
operator|+
literal|"\t\tblock size (%o), replication (%r), modification date (%y, %Y)\n"
decl_stmt|;
name|String
name|tail
init|=
name|TAIL_USAGE
operator|+
literal|":  Show the last 1KB of the file. \n"
operator|+
literal|"\t\tThe -f option shows apended data as the file grows. \n"
decl_stmt|;
name|String
name|chmod
init|=
name|FsShellPermissions
operator|.
name|CHMOD_USAGE
operator|+
literal|"\n"
operator|+
literal|"\t\tChanges permissions of a file.\n"
operator|+
literal|"\t\tThis works similar to shell's chmod with a few exceptions.\n\n"
operator|+
literal|"\t-R\tmodifies the files recursively. This is the only option\n"
operator|+
literal|"\t\tcurrently supported.\n\n"
operator|+
literal|"\tMODE\tMode is same as mode used for chmod shell command.\n"
operator|+
literal|"\t\tOnly letters recognized are 'rwxXt'. E.g. +t,a+r,g-w,+rwx,o=r\n\n"
operator|+
literal|"\tOCTALMODE Mode specifed in 3 or 4 digits. If 4 digits, the first may\n"
operator|+
literal|"\tbe 1 or 0 to turn the sticky bit on or off, respectively.  Unlike "
operator|+
literal|"\tshell command, it is not possible to specify only part of the mode\n"
operator|+
literal|"\t\tE.g. 754 is same as u=rwx,g=rx,o=r\n\n"
operator|+
literal|"\t\tIf none of 'augo' is specified, 'a' is assumed and unlike\n"
operator|+
literal|"\t\tshell command, no umask is applied.\n"
decl_stmt|;
name|String
name|chown
init|=
name|FsShellPermissions
operator|.
name|CHOWN_USAGE
operator|+
literal|"\n"
operator|+
literal|"\t\tChanges owner and group of a file.\n"
operator|+
literal|"\t\tThis is similar to shell's chown with a few exceptions.\n\n"
operator|+
literal|"\t-R\tmodifies the files recursively. This is the only option\n"
operator|+
literal|"\t\tcurrently supported.\n\n"
operator|+
literal|"\t\tIf only owner or group is specified then only owner or\n"
operator|+
literal|"\t\tgroup is modified.\n\n"
operator|+
literal|"\t\tThe owner and group names may only cosists of digits, alphabet,\n"
operator|+
literal|"\t\tand any of '-_.@/' i.e. [-_.@/a-zA-Z0-9]. The names are case\n"
operator|+
literal|"\t\tsensitive.\n\n"
operator|+
literal|"\t\tWARNING: Avoid using '.' to separate user name and group though\n"
operator|+
literal|"\t\tLinux allows it. If user names have dots in them and you are\n"
operator|+
literal|"\t\tusing local file system, you might see surprising results since\n"
operator|+
literal|"\t\tshell command 'chown' is used for local files.\n"
decl_stmt|;
name|String
name|chgrp
init|=
name|FsShellPermissions
operator|.
name|CHGRP_USAGE
operator|+
literal|"\n"
operator|+
literal|"\t\tThis is equivalent to -chown ... :GROUP ...\n"
decl_stmt|;
name|String
name|expunge
init|=
literal|"-expunge: Empty the Trash.\n"
decl_stmt|;
name|String
name|help
init|=
literal|"-help [cmd]: \tDisplays help for given command or all commands if none\n"
operator|+
literal|"\t\tis specified.\n"
decl_stmt|;
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|printHelp
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"D"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|D
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"df"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|df
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"du"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|du
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"dus"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dus
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"expunge"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|expunge
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"rmr"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mkdir"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mkdir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mv
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyFromLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveFromLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"getmerge"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getmerge
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyToLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveToLocal
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"cat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cat
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"setrep"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|setrep
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"touchz"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|touchz
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"test"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"text"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"stat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"tail"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tail
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"chmod"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|chmod
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"chown"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|chown
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"chgrp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|chgrp
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|thisCmdName
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|thisCmdName
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t[-help [cmd]]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|df
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|du
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|dus
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mv
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cp
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|rmr
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyFromLocal
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveFromLocal
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|getmerge
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cat
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|copyToLocal
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|moveToLocal
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mkdir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|setrep
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|tail
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|touchz
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|stat
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|chmod
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|chown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|chgrp
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|thisCmdName
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|printHelp
argument_list|(
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|thisCmdName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: will eventually auto-wrap the text, but this matches the expected
comment|// output for the hdfs tests...
DECL|method|printHelp (Command instance)
specifier|private
name|void
name|printHelp
parameter_list|(
name|Command
name|instance
parameter_list|)
block|{
name|boolean
name|firstLine
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|instance
operator|.
name|getDescription
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
name|String
name|prefix
decl_stmt|;
if|if
condition|(
name|firstLine
condition|)
block|{
name|prefix
operator|=
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|":\t"
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|"\t\t"
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Apply operation specified by 'cmd' on all parameters    * starting from argv[startindex].    */
DECL|method|doall (String cmd, String argv[], int startindex)
specifier|private
name|int
name|doall
parameter_list|(
name|String
name|cmd
parameter_list|,
name|String
name|argv
index|[]
parameter_list|,
name|int
name|startindex
parameter_list|)
block|{
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
name|int
name|i
init|=
name|startindex
decl_stmt|;
name|boolean
name|rmSkipTrash
init|=
literal|false
decl_stmt|;
comment|// Check for -skipTrash option in rm/rmr
if|if
condition|(
operator|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-rmr"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|)
operator|&&
literal|"-skipTrash"
operator|.
name|equals
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|rmSkipTrash
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
comment|//
comment|// for each source file, issue the command
comment|//
for|for
control|(
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|//
comment|// issue the command to the fs
comment|//
if|if
condition|(
literal|"-cat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|cat
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-mkdir"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|mkdir
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|delete
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|,
name|rmSkipTrash
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-rmr"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|delete
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
name|rmSkipTrash
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-df"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|df
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-touchz"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|touchz
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-text"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|text
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error message.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// IO exception encountered locally.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|String
name|content
init|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|content
operator|=
name|content
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|/**    * Displays format of commands.    *     */
DECL|method|printUsage (String cmd)
specifier|private
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|"Usage: java "
operator|+
name|FsShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|" ["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-fs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-fs<local | file system URI>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-conf"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-conf<configuration file>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-D"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-D<[property=value>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-du"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-dus"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-touchz"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-mkdir"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-text"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|"<path>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-df"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|" [<path>]]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-rmr"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell ["
operator|+
name|cmd
operator|+
literal|" [-skipTrash]<src>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|"<src><dst>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|"<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell ["
operator|+
name|GET_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell ["
operator|+
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|" [-crc]<src><localdst>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-cat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" ["
operator|+
name|cmd
operator|+
literal|"<src>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-setrep"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell ["
operator|+
name|SETREP_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-test"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-test -[ezd]<path>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-stat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-stat [format]<path>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-tail"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell ["
operator|+
name|TAIL_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-df [<path>]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-du [-s] [-h]<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-dus<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-mv<src><dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-cp<src><dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-rm [-skipTrash]<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-rmr [-skipTrash]<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-expunge]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-put<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-copyFromLocal<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-moveFromLocal<localsrc> ...<dst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|GET_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-getmerge<src><localdst> [addnl]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-cat<src>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-text<src>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|COPYTOLOCAL_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-moveToLocal [-crc]<src><localdst>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-mkdir<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|SETREP_SHORT_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-touchz<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-test -[ezd]<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-stat [format]<path>]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|TAIL_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|FsShellPermissions
operator|.
name|CHMOD_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|FsShellPermissions
operator|.
name|CHOWN_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|FsShellPermissions
operator|.
name|CHGRP_USAGE
operator|+
literal|"]"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-help [cmd]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * run    */
DECL|method|run (String argv[])
specifier|public
name|int
name|run
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: This isn't the best place, but this class is being abused with
comment|// subclasses which of course override this method.  There really needs
comment|// to be a better base class for all commands
name|commandFactory
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|commandFactory
operator|.
name|registerCommands
argument_list|(
name|FsCommand
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|//
comment|// verify that we have enough command line parameters
comment|//
if|if
condition|(
literal|"-put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-test"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-rmr"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-cat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-mkdir"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-touchz"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-stat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-text"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
block|}
comment|// initialize FsShell
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RPC
operator|.
name|VersionMismatch
name|v
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Version mismatch"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Version Mismatch between client and server"
operator|+
literal|"... command aborted."
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bad connection to FS. Command aborted. Exception: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
name|exitCode
operator|=
literal|0
expr_stmt|;
try|try
block|{
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|exitCode
operator|=
name|instance
operator|.
name|run
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|argv
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|instance
operator|.
name|displayError
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"-put"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|argv
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
control|)
name|srcs
index|[
name|j
operator|++
index|]
operator|=
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|copyFromLocal
argument_list|(
name|srcs
argument_list|,
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-moveFromLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|Path
index|[]
name|srcs
init|=
operator|new
name|Path
index|[
name|argv
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
operator|-
literal|1
condition|;
control|)
name|srcs
index|[
name|j
operator|++
index|]
operator|=
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
name|moveFromLocal
argument_list|(
name|srcs
argument_list|,
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-get"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-copyToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|copyToLocal
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-getmerge"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|>
name|i
operator|+
literal|2
condition|)
name|copyMergeToLocal
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|,
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|copyMergeToLocal
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-cat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|doall
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-text"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|doall
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-moveToLocal"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|moveToLocal
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|,
operator|new
name|Path
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-setrep"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|setReplication
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-chmod"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-chown"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
operator|||
literal|"-chgrp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|FsShellPermissions
operator|.
name|changePermissions
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-mv"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|rename
argument_list|(
name|argv
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-cp"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|copy
argument_list|(
name|argv
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-rm"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|doall
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-rmr"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|doall
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-expunge"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|expunge
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-df"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|argv
operator|.
name|length
operator|-
literal|1
operator|>
literal|0
condition|)
block|{
name|exitCode
operator|=
name|doall
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|df
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-du"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|du
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-dus"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|dus
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-mkdir"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|doall
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-touchz"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|doall
argument_list|(
name|cmd
argument_list|,
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-test"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|exitCode
operator|=
name|test
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-stat"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|argv
operator|.
name|length
condition|)
block|{
name|stat
argument_list|(
name|argv
index|[
name|i
operator|++
index|]
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|argv
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stat
argument_list|(
literal|"%y"
operator|.
name|toCharArray
argument_list|()
argument_list|,
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|argv
operator|.
name|length
condition|)
block|{
name|printHelp
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"-tail"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|tail
argument_list|(
name|argv
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|arge
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|arge
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|arge
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// This is a error returned by hadoop server. Print
comment|// out the first line of the error mesage, ignore the stack trace.
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|String
index|[]
name|content
decl_stmt|;
name|content
operator|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|content
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//
comment|// IO exception encountered locally.
comment|//
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|re
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|re
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|re
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{     }
return|return
name|exitCode
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * main() has some simple utility methods    */
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|int
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
comment|/**    * Accumulate exceptions if there is any.  Throw them at last.    */
DECL|class|DelayedExceptionThrowing
specifier|private
specifier|abstract
class|class
name|DelayedExceptionThrowing
block|{
DECL|method|process (Path p, FileSystem srcFs)
specifier|abstract
name|void
name|process
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|globAndProcess (Path srcPattern, FileSystem srcFs )
specifier|final
name|void
name|globAndProcess
parameter_list|(
name|Path
name|srcPattern
parameter_list|,
name|FileSystem
name|srcFs
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IOException
argument_list|>
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|srcFs
operator|.
name|globStatus
argument_list|(
name|srcPattern
argument_list|)
argument_list|,
name|srcPattern
argument_list|)
control|)
try|try
block|{
name|process
argument_list|(
name|p
argument_list|,
name|srcFs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
if|if
condition|(
name|exceptions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
throw|throw
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
throw|;
else|else
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Multiple IOExceptions: "
operator|+
name|exceptions
argument_list|)
throw|;
block|}
block|}
comment|/**    * Utility class for a line of du output    */
DECL|class|UsagePair
specifier|private
specifier|static
class|class
name|UsagePair
block|{
DECL|field|path
specifier|public
name|String
name|path
decl_stmt|;
DECL|field|bytes
specifier|public
name|long
name|bytes
decl_stmt|;
DECL|method|UsagePair (String path, long bytes)
specifier|public
name|UsagePair
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|bytes
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

