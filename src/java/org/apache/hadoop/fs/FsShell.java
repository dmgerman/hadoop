begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|CommandFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|FsCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathExceptions
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/** Provide command line access to a FileSystem. */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|FsShell
specifier|public
class|class
name|FsShell
extends|extends
name|Configured
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FsShell
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|trash
specifier|private
name|Trash
name|trash
decl_stmt|;
DECL|field|commandFactory
specifier|protected
name|CommandFactory
name|commandFactory
decl_stmt|;
comment|/**    */
DECL|method|FsShell ()
specifier|public
name|FsShell
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FsShell (Configuration conf)
specifier|public
name|FsShell
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
name|trash
operator|=
literal|null
expr_stmt|;
name|commandFactory
operator|=
operator|new
name|CommandFactory
argument_list|()
expr_stmt|;
block|}
DECL|method|getFS ()
specifier|protected
name|FileSystem
name|getFS
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|getTrash ()
specifier|protected
name|Trash
name|getTrash
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|trash
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|trash
operator|=
operator|new
name|Trash
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|trash
return|;
block|}
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|getConf
argument_list|()
operator|.
name|setQuietMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the Trash object associated with this shell.    */
DECL|method|getCurrentTrashDir ()
specifier|public
name|Path
name|getCurrentTrashDir
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getTrash
argument_list|()
operator|.
name|getCurrentTrashDir
argument_list|()
return|;
block|}
comment|/**    * Return an abbreviated English-language desc of the byte length    * @deprecated Consider using {@link org.apache.hadoop.util.StringUtils#byteDesc} instead.    */
annotation|@
name|Deprecated
DECL|method|byteDesc (long len)
specifier|public
specifier|static
name|String
name|byteDesc
parameter_list|(
name|long
name|len
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|byteDesc
argument_list|(
name|len
argument_list|)
return|;
block|}
comment|/**    * @deprecated Consider using {@link org.apache.hadoop.util.StringUtils#limitDecimalTo2} instead.    */
annotation|@
name|Deprecated
DECL|method|limitDecimalTo2 (double d)
specifier|public
specifier|static
specifier|synchronized
name|String
name|limitDecimalTo2
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|limitDecimalTo2
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|printHelp (String cmd)
specifier|private
name|void
name|printHelp
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|summary
init|=
literal|"hadoop fs is the command to execute fs commands. "
operator|+
literal|"The full syntax is: \n\n"
operator|+
literal|"hadoop fs [-fs<local | file system URI>] [-conf<configuration file>]\n\t"
operator|+
literal|"[-D<property=value>]\n\t"
operator|+
literal|"[-report]"
decl_stmt|;
name|String
name|conf
init|=
literal|"-conf<configuration file>:  Specify an application configuration file."
decl_stmt|;
name|String
name|D
init|=
literal|"-D<property=value>:  Use value for given property."
decl_stmt|;
name|String
name|fs
init|=
literal|"-fs [local |<file system URI>]: \tSpecify the file system to use.\n"
operator|+
literal|"\t\tIf not specified, the current configuration is used, \n"
operator|+
literal|"\t\ttaken from the following, in increasing precedence: \n"
operator|+
literal|"\t\t\tcore-default.xml inside the hadoop jar file \n"
operator|+
literal|"\t\t\tcore-site.xml in $HADOOP_CONF_DIR \n"
operator|+
literal|"\t\t'local' means use the local file system as your DFS. \n"
operator|+
literal|"\t\t<file system URI> specifies a particular file system to \n"
operator|+
literal|"\t\tcontact. This argument is optional but if used must appear\n"
operator|+
literal|"\t\tappear first on the command line.  Exactly one additional\n"
operator|+
literal|"\t\targument must be specified. \n"
decl_stmt|;
name|String
name|help
init|=
literal|"-help [cmd]: \tDisplays help for given command or all commands if none\n"
operator|+
literal|"\t\tis specified.\n"
decl_stmt|;
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
literal|"-"
operator|+
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|printHelp
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"conf"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"D"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|D
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|summary
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|thisCmdName
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|thisCmdName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instance
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t[-help [cmd]]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|thisCmdName
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|thisCmdName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instance
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|printHelp
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|help
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: will eventually auto-wrap the text, but this matches the expected
comment|// output for the hdfs tests...
DECL|method|printHelp (Command instance)
specifier|private
name|void
name|printHelp
parameter_list|(
name|Command
name|instance
parameter_list|)
block|{
name|boolean
name|firstLine
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|instance
operator|.
name|getDescription
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
name|String
name|prefix
decl_stmt|;
if|if
condition|(
name|firstLine
condition|)
block|{
name|prefix
operator|=
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|":\t"
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|"\t\t"
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
name|line
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Displays format of commands.    *     */
DECL|method|printUsage (String cmd)
specifier|private
name|void
name|printUsage
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|"Usage: java "
operator|+
name|FsShell
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|" ["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-fs"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-fs<local | file system URI>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-conf"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-conf<configuration file>]"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-D"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
operator|+
literal|" [-D<[property=value>]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java FsShell"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|commandFactory
operator|.
name|getNames
argument_list|()
control|)
block|{
name|instance
operator|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|instance
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           ["
operator|+
name|instance
operator|.
name|getUsage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"           [-help [cmd]]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ToolRunner
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * run    */
DECL|method|run (String argv[])
specifier|public
name|int
name|run
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO: This isn't the best place, but this class is being abused with
comment|// subclasses which of course override this method.  There really needs
comment|// to be a better base class for all commands
name|commandFactory
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|commandFactory
operator|.
name|registerCommands
argument_list|(
name|FsCommand
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|argv
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|exitCode
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|argv
index|[
name|i
operator|++
index|]
decl_stmt|;
comment|// initialize FsShell
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RPC
operator|.
name|VersionMismatch
name|v
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Version mismatch"
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Version Mismatch between client and server"
operator|+
literal|"... command aborted."
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Bad connection to FS. Command aborted. Exception: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|exitCode
return|;
block|}
try|try
block|{
name|Command
name|instance
init|=
name|commandFactory
operator|.
name|getInstance
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
name|exitCode
operator|=
name|instance
operator|.
name|run
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|argv
argument_list|,
name|i
argument_list|,
name|argv
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-help"
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|<
name|argv
operator|.
name|length
condition|)
block|{
name|printHelp
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printHelp
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|+
literal|": Unknown command"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exitCode
operator|=
literal|1
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|displayError
argument_list|(
name|cmd
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|IllegalArgumentException
condition|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|printUsage
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
comment|// TODO: this is a quick workaround to accelerate the integration of
comment|// redesigned commands.  this will be removed this once all commands are
comment|// converted.  this change will avoid having to change the hdfs tests
comment|// every time a command is converted to use path-based exceptions
DECL|field|fnfPatterns
specifier|private
specifier|static
name|Pattern
index|[]
name|fnfPatterns
init|=
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"File (.*) does not exist\\."
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"File does not exist: (.*)"
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"`(.*)': specified destination directory doest not exist"
argument_list|)
block|}
decl_stmt|;
DECL|method|displayError (String cmd, Exception e)
specifier|private
name|void
name|displayError
parameter_list|(
name|String
name|cmd
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|getLocalizedMessage
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|Pattern
name|pattern
range|:
name|fnfPatterns
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|message
operator|=
operator|new
name|PathNotFoundException
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getMessage
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * main() has some simple utility methods    */
DECL|method|main (String argv[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|()
decl_stmt|;
name|int
name|res
decl_stmt|;
try|try
block|{
name|res
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|shell
argument_list|,
name|argv
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shell
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

