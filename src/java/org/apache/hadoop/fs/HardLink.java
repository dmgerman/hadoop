begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Class for creating hardlinks.  * Supports Unix/Linux, WinXP/2003/Vista via Cygwin, and Mac OS X.  *   * The HardLink class was formerly a static inner class of FSUtil,  * and the methods provided were blatantly non-thread-safe.  * To enable volume-parallel Update snapshots, we now provide static   * threadsafe methods that allocate new buffer string arrays  * upon each call.  We also provide an API to hardlink all files in a  * directory with a single command, which is up to 128 times more   * efficient - and minimizes the impact of the extra buffer creations.  */
end_comment

begin_class
DECL|class|HardLink
specifier|public
class|class
name|HardLink
block|{
DECL|enum|OSType
specifier|public
enum|enum
name|OSType
block|{
DECL|enumConstant|OS_TYPE_UNIX
name|OS_TYPE_UNIX
block|,
DECL|enumConstant|OS_TYPE_WINXP
name|OS_TYPE_WINXP
block|,
DECL|enumConstant|OS_TYPE_SOLARIS
name|OS_TYPE_SOLARIS
block|,
DECL|enumConstant|OS_TYPE_MAC
name|OS_TYPE_MAC
block|}
DECL|field|osType
specifier|public
specifier|static
name|OSType
name|osType
decl_stmt|;
DECL|field|getHardLinkCommand
specifier|private
specifier|static
name|HardLinkCommandGetter
name|getHardLinkCommand
decl_stmt|;
DECL|field|linkStats
specifier|public
specifier|final
name|LinkStats
name|linkStats
decl_stmt|;
comment|//not static
comment|//initialize the command "getters" statically, so can use their
comment|//methods without instantiating the HardLink object
static|static
block|{
name|osType
operator|=
name|getOSType
argument_list|()
expr_stmt|;
if|if
condition|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_WINXP
condition|)
block|{
comment|// Windows
name|getHardLinkCommand
operator|=
operator|new
name|HardLinkCGWin
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Unix
name|getHardLinkCommand
operator|=
operator|new
name|HardLinkCGUnix
argument_list|()
expr_stmt|;
comment|//override getLinkCountCommand for the particular Unix variant
comment|//Linux is already set as the default - {"stat","-c%h", null}
if|if
condition|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_MAC
condition|)
block|{
name|String
index|[]
name|linkCountCmdTemplate
init|=
block|{
literal|"stat"
block|,
literal|"-f%l"
block|,
literal|null
block|}
decl_stmt|;
name|HardLinkCGUnix
operator|.
name|setLinkCountCmdTemplate
argument_list|(
name|linkCountCmdTemplate
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_SOLARIS
condition|)
block|{
name|String
index|[]
name|linkCountCmdTemplate
init|=
block|{
literal|"ls"
block|,
literal|"-l"
block|,
literal|null
block|}
decl_stmt|;
name|HardLinkCGUnix
operator|.
name|setLinkCountCmdTemplate
argument_list|(
name|linkCountCmdTemplate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|HardLink ()
specifier|public
name|HardLink
parameter_list|()
block|{
name|linkStats
operator|=
operator|new
name|LinkStats
argument_list|()
expr_stmt|;
block|}
DECL|method|getOSType ()
specifier|static
specifier|private
name|OSType
name|getOSType
parameter_list|()
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|osName
operator|.
name|contains
argument_list|(
literal|"Windows"
argument_list|)
operator|&&
operator|(
name|osName
operator|.
name|contains
argument_list|(
literal|"XP"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"2003"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"Vista"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"Windows_7"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"Windows 7"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"Windows7"
argument_list|)
operator|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_WINXP
return|;
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|contains
argument_list|(
literal|"SunOS"
argument_list|)
operator|||
name|osName
operator|.
name|contains
argument_list|(
literal|"Solaris"
argument_list|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_SOLARIS
return|;
block|}
elseif|else
if|if
condition|(
name|osName
operator|.
name|contains
argument_list|(
literal|"Mac"
argument_list|)
condition|)
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_MAC
return|;
block|}
else|else
block|{
return|return
name|OSType
operator|.
name|OS_TYPE_UNIX
return|;
block|}
block|}
comment|/**    * This abstract class bridges the OS-dependent implementations of the     * needed functionality for creating hardlinks and querying link counts.    * The particular implementation class is chosen during     * static initialization phase of the HardLink class.    * The "getter" methods construct shell command strings for various purposes.    */
DECL|class|HardLinkCommandGetter
specifier|private
specifier|static
specifier|abstract
class|class
name|HardLinkCommandGetter
block|{
comment|/**      * Get the command string needed to hardlink a bunch of files from      * a single source directory into a target directory.  The source directory      * is not specified here, but the command will be executed using the source      * directory as the "current working directory" of the shell invocation.      *       * @param fileBaseNames - array of path-less file names, relative      *            to the source directory      * @param linkDir - target directory where the hardlinks will be put      * @return - an array of Strings suitable for use as a single shell command      *            with {@link Runtime.exec()}      * @throws IOException - if any of the file or path names misbehave      */
DECL|method|linkMult (String[] fileBaseNames, File linkDir)
specifier|abstract
name|String
index|[]
name|linkMult
parameter_list|(
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Get the command string needed to hardlink a single file      */
DECL|method|linkOne (File file, File linkName)
specifier|abstract
name|String
index|[]
name|linkOne
parameter_list|(
name|File
name|file
parameter_list|,
name|File
name|linkName
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Get the command string to query the hardlink count of a file      */
DECL|method|linkCount (File file)
specifier|abstract
name|String
index|[]
name|linkCount
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Calculate the total string length of the shell command      * resulting from execution of linkMult, plus the length of the      * source directory name (which will also be provided to the shell)      *       * @param fileDir - source directory, parent of fileBaseNames      * @param fileBaseNames - array of path-less file names, relative      *            to the source directory      * @param linkDir - target directory where the hardlinks will be put      * @return - total data length (must not exceed maxAllowedCmdArgLength)      * @throws IOException      */
DECL|method|getLinkMultArgLength ( File fileDir, String[] fileBaseNames, File linkDir)
specifier|abstract
name|int
name|getLinkMultArgLength
parameter_list|(
name|File
name|fileDir
parameter_list|,
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Get the maximum allowed string length of a shell command on this OS,      * which is just the documented minimum guaranteed supported command      * length - aprx. 32KB for Unix, and 8KB for Windows.      */
DECL|method|getMaxAllowedCmdArgLength ()
specifier|abstract
name|int
name|getMaxAllowedCmdArgLength
parameter_list|()
function_decl|;
block|}
comment|/**    * Implementation of HardLinkCommandGetter class for Unix    */
DECL|class|HardLinkCGUnix
specifier|static
class|class
name|HardLinkCGUnix
extends|extends
name|HardLinkCommandGetter
block|{
DECL|field|hardLinkCommand
specifier|private
specifier|static
name|String
index|[]
name|hardLinkCommand
init|=
block|{
literal|"ln"
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
DECL|field|hardLinkMultPrefix
specifier|private
specifier|static
name|String
index|[]
name|hardLinkMultPrefix
init|=
block|{
literal|"ln"
block|}
decl_stmt|;
DECL|field|hardLinkMultSuffix
specifier|private
specifier|static
name|String
index|[]
name|hardLinkMultSuffix
init|=
block|{
literal|null
block|}
decl_stmt|;
DECL|field|getLinkCountCommand
specifier|private
specifier|static
name|String
index|[]
name|getLinkCountCommand
init|=
block|{
literal|"stat"
block|,
literal|"-c%h"
block|,
literal|null
block|}
decl_stmt|;
comment|//Unix guarantees at least 32K bytes cmd length.
comment|//Subtract another 64b to allow for Java 'exec' overhead
DECL|field|maxAllowedCmdArgLength
specifier|private
specifier|static
specifier|final
name|int
name|maxAllowedCmdArgLength
init|=
literal|32
operator|*
literal|1024
operator|-
literal|65
decl_stmt|;
specifier|private
specifier|static
specifier|synchronized
DECL|method|setLinkCountCmdTemplate (String[] template)
name|void
name|setLinkCountCmdTemplate
parameter_list|(
name|String
index|[]
name|template
parameter_list|)
block|{
comment|//May update this for specific unix variants,
comment|//after static initialization phase
name|getLinkCountCommand
operator|=
name|template
expr_stmt|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkOne(java.io.File, java.io.File)      */
annotation|@
name|Override
DECL|method|linkOne (File file, File linkName)
name|String
index|[]
name|linkOne
parameter_list|(
name|File
name|file
parameter_list|,
name|File
name|linkName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|hardLinkCommand
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|hardLinkCommand
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|hardLinkCommand
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//unix wants argument order: "ln<existing><new>"
name|buf
index|[
literal|1
index|]
operator|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|linkName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkMult(java.lang.String[], java.io.File)      */
annotation|@
name|Override
DECL|method|linkMult (String[] fileBaseNames, File linkDir)
name|String
index|[]
name|linkMult
parameter_list|(
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|fileBaseNames
operator|.
name|length
operator|+
name|hardLinkMultPrefix
operator|.
name|length
operator|+
name|hardLinkMultSuffix
operator|.
name|length
index|]
decl_stmt|;
name|int
name|mark
init|=
literal|0
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|hardLinkMultPrefix
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|mark
argument_list|,
name|hardLinkMultPrefix
operator|.
name|length
argument_list|)
expr_stmt|;
name|mark
operator|+=
name|hardLinkMultPrefix
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fileBaseNames
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|mark
argument_list|,
name|fileBaseNames
operator|.
name|length
argument_list|)
expr_stmt|;
name|mark
operator|+=
name|fileBaseNames
operator|.
name|length
expr_stmt|;
name|buf
index|[
name|mark
index|]
operator|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|linkDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkCount(java.io.File)      */
annotation|@
name|Override
DECL|method|linkCount (File file)
name|String
index|[]
name|linkCount
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|getLinkCountCommand
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|getLinkCountCommand
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|getLinkCountCommand
operator|.
name|length
argument_list|)
expr_stmt|;
name|buf
index|[
name|getLinkCountCommand
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#getLinkMultArgLength(java.io.File, java.lang.String[], java.io.File)      */
annotation|@
name|Override
DECL|method|getLinkMultArgLength (File fileDir, String[] fileBaseNames, File linkDir)
name|int
name|getLinkMultArgLength
parameter_list|(
name|File
name|fileDir
parameter_list|,
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|x
range|:
name|fileBaseNames
control|)
block|{
comment|// add 1 to account for terminal null or delimiter space
name|sum
operator|+=
literal|1
operator|+
operator|(
operator|(
name|x
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|x
operator|.
name|length
argument_list|()
operator|)
expr_stmt|;
block|}
name|sum
operator|+=
literal|2
operator|+
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|fileDir
argument_list|,
literal|true
argument_list|)
operator|.
name|length
argument_list|()
operator|+
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|linkDir
argument_list|,
literal|true
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
comment|//add the fixed overhead of the hardLinkMult prefix and suffix
name|sum
operator|+=
literal|3
expr_stmt|;
comment|//length("ln") + 1
return|return
name|sum
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#getMaxAllowedCmdArgLength()      */
annotation|@
name|Override
DECL|method|getMaxAllowedCmdArgLength ()
name|int
name|getMaxAllowedCmdArgLength
parameter_list|()
block|{
return|return
name|maxAllowedCmdArgLength
return|;
block|}
block|}
comment|/**    * Implementation of HardLinkCommandGetter class for Windows    *     * Note that the linkCount shell command for Windows is actually    * a Cygwin shell command, and depends on ${cygwin}/bin    * being in the Windows PATH environment variable, so    * stat.exe can be found.    */
DECL|class|HardLinkCGWin
specifier|static
class|class
name|HardLinkCGWin
extends|extends
name|HardLinkCommandGetter
block|{
comment|//The Windows command getter impl class and its member fields are
comment|//package-private ("default") access instead of "private" to assist
comment|//unit testing (sort of) on non-Win servers
DECL|field|hardLinkCommand
specifier|static
name|String
index|[]
name|hardLinkCommand
init|=
block|{
literal|"fsutil"
block|,
literal|"hardlink"
block|,
literal|"create"
block|,
literal|null
block|,
literal|null
block|}
decl_stmt|;
DECL|field|hardLinkMultPrefix
specifier|static
name|String
index|[]
name|hardLinkMultPrefix
init|=
block|{
literal|"cmd"
block|,
literal|"/q"
block|,
literal|"/c"
block|,
literal|"for"
block|,
literal|"%f"
block|,
literal|"in"
block|,
literal|"("
block|}
decl_stmt|;
DECL|field|hardLinkMultDir
specifier|static
name|String
name|hardLinkMultDir
init|=
literal|"\\%f"
decl_stmt|;
DECL|field|hardLinkMultSuffix
specifier|static
name|String
index|[]
name|hardLinkMultSuffix
init|=
block|{
literal|")"
block|,
literal|"do"
block|,
literal|"fsutil"
block|,
literal|"hardlink"
block|,
literal|"create"
block|,
literal|null
block|,
literal|"%f"
block|,
literal|"1>NUL"
block|}
decl_stmt|;
DECL|field|getLinkCountCommand
specifier|static
name|String
index|[]
name|getLinkCountCommand
init|=
block|{
literal|"stat"
block|,
literal|"-c%h"
block|,
literal|null
block|}
decl_stmt|;
comment|//Windows guarantees only 8K - 1 bytes cmd length.
comment|//Subtract another 64b to allow for Java 'exec' overhead
DECL|field|maxAllowedCmdArgLength
specifier|static
specifier|final
name|int
name|maxAllowedCmdArgLength
init|=
literal|8
operator|*
literal|1024
operator|-
literal|65
decl_stmt|;
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkOne(java.io.File, java.io.File)      */
annotation|@
name|Override
DECL|method|linkOne (File file, File linkName)
name|String
index|[]
name|linkOne
parameter_list|(
name|File
name|file
parameter_list|,
name|File
name|linkName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|hardLinkCommand
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|hardLinkCommand
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|hardLinkCommand
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//windows wants argument order: "create<new><existing>"
name|buf
index|[
literal|4
index|]
operator|=
name|file
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
name|buf
index|[
literal|3
index|]
operator|=
name|linkName
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkMult(java.lang.String[], java.io.File)      */
annotation|@
name|Override
DECL|method|linkMult (String[] fileBaseNames, File linkDir)
name|String
index|[]
name|linkMult
parameter_list|(
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|fileBaseNames
operator|.
name|length
operator|+
name|hardLinkMultPrefix
operator|.
name|length
operator|+
name|hardLinkMultSuffix
operator|.
name|length
index|]
decl_stmt|;
name|String
name|td
init|=
name|linkDir
operator|.
name|getCanonicalPath
argument_list|()
operator|+
name|hardLinkMultDir
decl_stmt|;
name|int
name|mark
init|=
literal|0
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|hardLinkMultPrefix
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|mark
argument_list|,
name|hardLinkMultPrefix
operator|.
name|length
argument_list|)
expr_stmt|;
name|mark
operator|+=
name|hardLinkMultPrefix
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|fileBaseNames
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|mark
argument_list|,
name|fileBaseNames
operator|.
name|length
argument_list|)
expr_stmt|;
name|mark
operator|+=
name|fileBaseNames
operator|.
name|length
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|hardLinkMultSuffix
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|mark
argument_list|,
name|hardLinkMultSuffix
operator|.
name|length
argument_list|)
expr_stmt|;
name|mark
operator|+=
name|hardLinkMultSuffix
operator|.
name|length
expr_stmt|;
name|buf
index|[
name|mark
operator|-
literal|3
index|]
operator|=
name|td
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#linkCount(java.io.File)      */
annotation|@
name|Override
DECL|method|linkCount (File file)
name|String
index|[]
name|linkCount
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|buf
init|=
operator|new
name|String
index|[
name|getLinkCountCommand
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|getLinkCountCommand
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|getLinkCountCommand
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//The linkCount command is actually a Cygwin shell command,
comment|//not a Windows shell command, so we should use "makeShellPath()"
comment|//instead of "getCanonicalPath()".  However, that causes another
comment|//shell exec to "cygpath.exe", and "stat.exe" actually can handle
comment|//DOS-style paths (it just prints a couple hundred bytes of warning
comment|//to stderr), so we use the more efficient "getCanonicalPath()".
name|buf
index|[
name|getLinkCountCommand
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|file
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#getLinkMultArgLength(java.io.File, java.lang.String[], java.io.File)      */
annotation|@
name|Override
DECL|method|getLinkMultArgLength (File fileDir, String[] fileBaseNames, File linkDir)
name|int
name|getLinkMultArgLength
parameter_list|(
name|File
name|fileDir
parameter_list|,
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|x
range|:
name|fileBaseNames
control|)
block|{
comment|// add 1 to account for terminal null or delimiter space
name|sum
operator|+=
literal|1
operator|+
operator|(
operator|(
name|x
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|x
operator|.
name|length
argument_list|()
operator|)
expr_stmt|;
block|}
name|sum
operator|+=
literal|2
operator|+
name|fileDir
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|length
argument_list|()
operator|+
name|linkDir
operator|.
name|getCanonicalPath
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
comment|//add the fixed overhead of the hardLinkMult command
comment|//(prefix, suffix, and Dir suffix)
name|sum
operator|+=
operator|(
literal|"cmd.exe /q /c for %f in ( ) do "
operator|+
literal|"fsutil hardlink create \\%f %f 1>NUL "
operator|)
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
name|sum
return|;
block|}
comment|/*      * @see org.apache.hadoop.fs.HardLink.HardLinkCommandGetter#getMaxAllowedCmdArgLength()      */
annotation|@
name|Override
DECL|method|getMaxAllowedCmdArgLength ()
name|int
name|getMaxAllowedCmdArgLength
parameter_list|()
block|{
return|return
name|maxAllowedCmdArgLength
return|;
block|}
block|}
comment|/**    * Calculate the nominal length of all contributors to the total     * commandstring length, including fixed overhead of the OS-dependent     * command.  It's protected rather than private, to assist unit testing,    * but real clients are not expected to need it -- see the way     * createHardLinkMult() uses it internally so the user doesn't need to worry    * about it.    *     * @param fileDir - source directory, parent of fileBaseNames    * @param fileBaseNames - array of path-less file names, relative    *            to the source directory    * @param linkDir - target directory where the hardlinks will be put    * @return - total data length (must not exceed maxAllowedCmdArgLength)    * @throws IOException    */
DECL|method|getLinkMultArgLength ( File fileDir, String[] fileBaseNames, File linkDir)
specifier|protected
specifier|static
name|int
name|getLinkMultArgLength
parameter_list|(
name|File
name|fileDir
parameter_list|,
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHardLinkCommand
operator|.
name|getLinkMultArgLength
argument_list|(
name|fileDir
argument_list|,
name|fileBaseNames
argument_list|,
name|linkDir
argument_list|)
return|;
block|}
comment|/**    * Return this private value for use by unit tests.    * Shell commands are not allowed to have a total string length    * exceeding this size.    */
DECL|method|getMaxAllowedCmdArgLength ()
specifier|protected
specifier|static
name|int
name|getMaxAllowedCmdArgLength
parameter_list|()
block|{
return|return
name|getHardLinkCommand
operator|.
name|getMaxAllowedCmdArgLength
argument_list|()
return|;
block|}
comment|/*    * ****************************************************    * Complexity is above.  User-visible functionality is below    * ****************************************************    */
comment|/**    * Creates a hardlink     * @param file - existing source file    * @param linkName - desired target link file    */
DECL|method|createHardLink (File file, File linkName)
specifier|public
specifier|static
name|void
name|createHardLink
parameter_list|(
name|File
name|file
parameter_list|,
name|File
name|linkName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLink: source file is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|linkName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLink: link name is null"
argument_list|)
throw|;
block|}
comment|// construct and execute shell command
name|String
index|[]
name|hardLinkCommand
init|=
name|getHardLinkCommand
operator|.
name|linkOne
argument_list|(
name|file
argument_list|,
name|linkName
argument_list|)
decl_stmt|;
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|hardLinkCommand
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|process
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|==
literal|null
condition|)
name|errMsg
operator|=
literal|""
expr_stmt|;
name|String
name|inpMsg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|inpMsg
operator|==
literal|null
condition|)
name|inpMsg
operator|=
literal|""
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
operator|+
name|inpMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Creates hardlinks from multiple existing files within one parent    * directory, into one target directory.    * @param parentDir - directory containing source files    * @param fileBaseNames - list of path-less file names, as returned by     *                        parentDir.list()    * @param linkDir - where the hardlinks should be put.  It must already exist.    *     * If the list of files is too long (overflows maxAllowedCmdArgLength),    * we will automatically split it into multiple invocations of the    * underlying method.    */
DECL|method|createHardLinkMult (File parentDir, String[] fileBaseNames, File linkDir)
specifier|public
specifier|static
name|void
name|createHardLinkMult
parameter_list|(
name|File
name|parentDir
parameter_list|,
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|)
throws|throws
name|IOException
block|{
comment|//This is the public method all non-test clients are expected to use.
comment|//Normal case - allow up to maxAllowedCmdArgLength characters in the cmd
name|createHardLinkMult
argument_list|(
name|parentDir
argument_list|,
name|fileBaseNames
argument_list|,
name|linkDir
argument_list|,
name|getHardLinkCommand
operator|.
name|getMaxAllowedCmdArgLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * Implements {@link createHardLinkMult} with added variable  "maxLength",    * to ease unit testing of the auto-splitting feature for long lists.    * Likewise why it returns "callCount", the number of sub-arrays that    * the file list had to be split into.    * Non-test clients are expected to call the public method instead.    */
DECL|method|createHardLinkMult (File parentDir, String[] fileBaseNames, File linkDir, int maxLength)
specifier|protected
specifier|static
name|int
name|createHardLinkMult
parameter_list|(
name|File
name|parentDir
parameter_list|,
name|String
index|[]
name|fileBaseNames
parameter_list|,
name|File
name|linkDir
parameter_list|,
name|int
name|maxLength
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parentDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLinkMult: parent directory is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|linkDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLinkMult: link directory is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileBaseNames
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid arguments to createHardLinkMult: "
operator|+
literal|"filename list can be empty but not null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|fileBaseNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|//the OS cmds can't handle empty list of filenames,
comment|//but it's legal, so just return.
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|linkDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|linkDir
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
comment|//if the list is too long, split into multiple invocations
name|int
name|callCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|getLinkMultArgLength
argument_list|(
name|parentDir
argument_list|,
name|fileBaseNames
argument_list|,
name|linkDir
argument_list|)
operator|>
name|maxLength
operator|&&
name|fileBaseNames
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|String
index|[]
name|list1
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|fileBaseNames
argument_list|,
name|fileBaseNames
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|callCount
operator|+=
name|createHardLinkMult
argument_list|(
name|parentDir
argument_list|,
name|list1
argument_list|,
name|linkDir
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|String
index|[]
name|list2
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|fileBaseNames
argument_list|,
name|fileBaseNames
operator|.
name|length
operator|/
literal|2
argument_list|,
name|fileBaseNames
operator|.
name|length
argument_list|)
decl_stmt|;
name|callCount
operator|+=
name|createHardLinkMult
argument_list|(
name|parentDir
argument_list|,
name|list2
argument_list|,
name|linkDir
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
return|return
name|callCount
return|;
block|}
else|else
block|{
name|callCount
operator|=
literal|1
expr_stmt|;
block|}
comment|// construct and execute shell command
name|String
index|[]
name|hardLinkCommand
init|=
name|getHardLinkCommand
operator|.
name|linkMult
argument_list|(
name|fileBaseNames
argument_list|,
name|linkDir
argument_list|)
decl_stmt|;
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|hardLinkCommand
argument_list|,
literal|null
argument_list|,
name|parentDir
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|process
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|==
literal|null
condition|)
name|errMsg
operator|=
literal|""
expr_stmt|;
name|String
name|inpMsg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|inpMsg
operator|==
literal|null
condition|)
name|inpMsg
operator|=
literal|""
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
operator|+
name|inpMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
return|return
name|callCount
return|;
block|}
comment|/**    * Retrieves the number of links to the specified file.    */
DECL|method|getLinkCount (File fileName)
specifier|public
specifier|static
name|int
name|getLinkCount
parameter_list|(
name|File
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"invalid argument to getLinkCount: file name is null"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|fileName
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|fileName
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
comment|// construct and execute shell command
name|String
index|[]
name|cmd
init|=
name|getHardLinkCommand
operator|.
name|linkCount
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|String
name|inpMsg
init|=
literal|null
decl_stmt|;
name|String
name|errMsg
init|=
literal|null
decl_stmt|;
name|int
name|exitValue
init|=
operator|-
literal|1
decl_stmt|;
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|err
init|=
literal|null
decl_stmt|;
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
try|try
block|{
name|exitValue
operator|=
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inpMsg
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|err
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|errMsg
operator|=
name|err
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|inpMsg
operator|==
literal|null
operator|||
name|exitValue
operator|!=
literal|0
condition|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
literal|null
argument_list|)
throw|;
block|}
if|if
condition|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_SOLARIS
condition|)
block|{
name|String
index|[]
name|result
init|=
name|inpMsg
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|result
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|inpMsg
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
name|err
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* Create an IOException for failing to get link count. */
DECL|method|createIOException (File f, String message, String error, int exitvalue, Exception cause)
specifier|private
specifier|static
name|IOException
name|createIOException
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|error
parameter_list|,
name|int
name|exitvalue
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
specifier|final
name|String
name|winErrMsg
init|=
literal|"; Windows errors in getLinkCount are often due "
operator|+
literal|"to Cygwin misconfiguration"
decl_stmt|;
specifier|final
name|String
name|s
init|=
literal|"Failed to get link count on file "
operator|+
name|f
operator|+
literal|": message="
operator|+
name|message
operator|+
literal|"; error="
operator|+
name|error
operator|+
operator|(
operator|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_WINXP
operator|)
condition|?
name|winErrMsg
else|:
literal|""
operator|)
operator|+
literal|"; exit value="
operator|+
name|exitvalue
decl_stmt|;
return|return
operator|(
name|cause
operator|==
literal|null
operator|)
condition|?
operator|new
name|IOException
argument_list|(
name|s
argument_list|)
else|:
operator|new
name|IOException
argument_list|(
name|s
argument_list|,
name|cause
argument_list|)
return|;
block|}
comment|/**    * HardLink statistics counters and methods.    * Not multi-thread safe, obviously.    * Init is called during HardLink instantiation, above.    *     * These are intended for use by knowledgeable clients, not internally,     * because many of the internal methods are static and can't update these    * per-instance counters.    */
DECL|class|LinkStats
specifier|public
specifier|static
class|class
name|LinkStats
block|{
DECL|field|countDirs
specifier|public
name|int
name|countDirs
init|=
literal|0
decl_stmt|;
DECL|field|countSingleLinks
specifier|public
name|int
name|countSingleLinks
init|=
literal|0
decl_stmt|;
DECL|field|countMultLinks
specifier|public
name|int
name|countMultLinks
init|=
literal|0
decl_stmt|;
DECL|field|countFilesMultLinks
specifier|public
name|int
name|countFilesMultLinks
init|=
literal|0
decl_stmt|;
DECL|field|countEmptyDirs
specifier|public
name|int
name|countEmptyDirs
init|=
literal|0
decl_stmt|;
DECL|field|countPhysicalFileCopies
specifier|public
name|int
name|countPhysicalFileCopies
init|=
literal|0
decl_stmt|;
DECL|method|clear ()
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|countDirs
operator|=
literal|0
expr_stmt|;
name|countSingleLinks
operator|=
literal|0
expr_stmt|;
name|countMultLinks
operator|=
literal|0
expr_stmt|;
name|countFilesMultLinks
operator|=
literal|0
expr_stmt|;
name|countEmptyDirs
operator|=
literal|0
expr_stmt|;
name|countPhysicalFileCopies
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|report ()
specifier|public
name|String
name|report
parameter_list|()
block|{
return|return
literal|"HardLinkStats: "
operator|+
name|countDirs
operator|+
literal|" Directories, including "
operator|+
name|countEmptyDirs
operator|+
literal|" Empty Directories, "
operator|+
name|countSingleLinks
operator|+
literal|" single Link operations, "
operator|+
name|countMultLinks
operator|+
literal|" multi-Link operations, linking "
operator|+
name|countFilesMultLinks
operator|+
literal|" files, total "
operator|+
operator|(
name|countSingleLinks
operator|+
name|countFilesMultLinks
operator|)
operator|+
literal|" linkable files.  Also physically copied "
operator|+
name|countPhysicalFileCopies
operator|+
literal|" other files."
return|;
block|}
block|}
block|}
end_class

end_unit

