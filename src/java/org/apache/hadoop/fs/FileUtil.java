begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A collection of file-processing util methods  */
end_comment

begin_class
DECL|class|FileUtil
specifier|public
class|class
name|FileUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FileUtil
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * convert an array of FileStatus to an array of Path    *     * @param stats    *          an array of FileStatus objects    * @return an array of paths corresponding to the input    */
DECL|method|stat2Paths (FileStatus[] stats)
specifier|public
specifier|static
name|Path
index|[]
name|stat2Paths
parameter_list|(
name|FileStatus
index|[]
name|stats
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Path
index|[]
name|ret
init|=
operator|new
name|Path
index|[
name|stats
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|stats
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * convert an array of FileStatus to an array of Path.    * If stats if null, return path    * @param stats    *          an array of FileStatus objects    * @param path    *          default path to return in stats is null    * @return an array of paths corresponding to the input    */
DECL|method|stat2Paths (FileStatus[] stats, Path path)
specifier|public
specifier|static
name|Path
index|[]
name|stat2Paths
parameter_list|(
name|FileStatus
index|[]
name|stats
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
return|return
operator|new
name|Path
index|[]
block|{
name|path
block|}
return|;
else|else
return|return
name|stat2Paths
argument_list|(
name|stats
argument_list|)
return|;
block|}
comment|/**    * Delete a directory and all its contents.  If    * we return false, the directory may be partially-deleted.    */
DECL|method|fullyDelete (File dir)
specifier|public
specifier|static
name|boolean
name|fullyDelete
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fullyDeleteContents
argument_list|(
name|dir
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|dir
operator|.
name|delete
argument_list|()
return|;
block|}
comment|/**    * Delete the contents of a directory, not the directory itself.  If    * we return false, the directory may be partially-deleted.    */
DECL|method|fullyDeleteContents (File dir)
specifier|public
specifier|static
name|boolean
name|fullyDeleteContents
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|deletionSucceeded
init|=
literal|true
decl_stmt|;
name|File
name|contents
index|[]
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|contents
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|contents
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
condition|)
block|{
name|deletionSucceeded
operator|=
literal|false
expr_stmt|;
continue|continue;
comment|// continue deletion of other files/dirs under dir
block|}
block|}
else|else
block|{
comment|//try deleting the directory
comment|// this might be a symlink
name|boolean
name|b
init|=
literal|false
decl_stmt|;
name|b
operator|=
name|contents
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
comment|//this was indeed a symlink or an empty directory
continue|continue;
block|}
comment|// if not an empty directory or symlink let
comment|// fullydelete handle it.
if|if
condition|(
operator|!
name|fullyDelete
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|deletionSucceeded
operator|=
literal|false
expr_stmt|;
continue|continue;
comment|// continue deletion of other files/dirs under dir
block|}
block|}
block|}
block|}
return|return
name|deletionSucceeded
return|;
block|}
comment|/**    * Recursively delete a directory.    *     * @param fs {@link FileSystem} on which the path is present    * @param dir directory to recursively delete     * @throws IOException    * @deprecated Use {@link FileSystem#delete(Path, boolean)}    */
annotation|@
name|Deprecated
DECL|method|fullyDelete (FileSystem fs, Path dir)
specifier|public
specifier|static
name|void
name|fullyDelete
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// If the destination is a subdirectory of the source, then
comment|// generate exception
comment|//
DECL|method|checkDependencies (FileSystem srcFS, Path src, FileSystem dstFS, Path dst)
specifier|private
specifier|static
name|void
name|checkDependencies
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcFS
operator|==
name|dstFS
condition|)
block|{
name|String
name|srcq
init|=
name|src
operator|.
name|makeQualified
argument_list|(
name|srcFS
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
name|String
name|dstq
init|=
name|dst
operator|.
name|makeQualified
argument_list|(
name|dstFS
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
if|if
condition|(
name|dstq
operator|.
name|startsWith
argument_list|(
name|srcq
argument_list|)
condition|)
block|{
if|if
condition|(
name|srcq
operator|.
name|length
argument_list|()
operator|==
name|dstq
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot copy "
operator|+
name|src
operator|+
literal|" to itself."
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot copy "
operator|+
name|src
operator|+
literal|" to its subdirectory "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/** Copy files between FileSystems. */
DECL|method|copy (FileSystem srcFS, Path src, FileSystem dstFS, Path dst, boolean deleteSource, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
return|;
block|}
DECL|method|copy (FileSystem srcFS, Path[] srcs, FileSystem dstFS, Path dst, boolean deleteSource, boolean overwrite, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
index|[]
name|srcs
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|gotException
init|=
literal|false
decl_stmt|;
name|boolean
name|returnVal
init|=
literal|true
decl_stmt|;
name|StringBuilder
name|exceptions
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcs
operator|.
name|length
operator|==
literal|1
condition|)
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|srcs
index|[
literal|0
index|]
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
return|;
comment|// Check if dest is directory
if|if
condition|(
operator|!
name|dstFS
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"`"
operator|+
name|dst
operator|+
literal|"': specified destination directory "
operator|+
literal|"doest not exist"
argument_list|)
throw|;
block|}
else|else
block|{
name|FileStatus
name|sdst
init|=
name|dstFS
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sdst
operator|.
name|isDir
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"copying multiple files, but last argument `"
operator|+
name|dst
operator|+
literal|"' is not a directory"
argument_list|)
throw|;
block|}
for|for
control|(
name|Path
name|src
range|:
name|srcs
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|copy
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
condition|)
name|returnVal
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gotException
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|gotException
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exceptions
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|returnVal
return|;
block|}
comment|/** Copy files between FileSystems. */
DECL|method|copy (FileSystem srcFS, Path src, FileSystem dstFS, Path dst, boolean deleteSource, boolean overwrite, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|fileStatus
init|=
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|fileStatus
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Copy files between FileSystems. */
DECL|method|copy (FileSystem srcFS, FileStatus srcStatus, FileSystem dstFS, Path dst, boolean deleteSource, boolean overwrite, Configuration conf)
specifier|private
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|FileStatus
name|srcStatus
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
name|srcStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|dst
operator|=
name|checkDest
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|checkDependencies
argument_list|(
name|srcFS
argument_list|,
name|src
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstFS
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStatus
name|contents
index|[]
init|=
name|srcFS
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|copy
argument_list|(
name|srcFS
argument_list|,
name|contents
index|[
name|i
index|]
argument_list|,
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|contents
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|deleteSource
argument_list|,
name|overwrite
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
name|srcFS
operator|.
name|open
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|out
operator|=
name|dstFS
operator|.
name|create
argument_list|(
name|dst
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|srcFS
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Copy all files in a directory to one output file (merge). */
DECL|method|copyMerge (FileSystem srcFS, Path srcDir, FileSystem dstFS, Path dstFile, boolean deleteSource, Configuration conf, String addString)
specifier|public
specifier|static
name|boolean
name|copyMerge
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|srcDir
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dstFile
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|addString
parameter_list|)
throws|throws
name|IOException
block|{
name|dstFile
operator|=
name|checkDest
argument_list|(
name|srcDir
operator|.
name|getName
argument_list|()
argument_list|,
name|dstFS
argument_list|,
name|dstFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|srcDir
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
return|return
literal|false
return|;
name|OutputStream
name|out
init|=
name|dstFS
operator|.
name|create
argument_list|(
name|dstFile
argument_list|)
decl_stmt|;
try|try
block|{
name|FileStatus
name|contents
index|[]
init|=
name|srcFS
operator|.
name|listStatus
argument_list|(
name|srcDir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|contents
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
name|srcFS
operator|.
name|open
argument_list|(
name|contents
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|addString
operator|!=
literal|null
condition|)
name|out
operator|.
name|write
argument_list|(
name|addString
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|srcFS
operator|.
name|delete
argument_list|(
name|srcDir
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Copy local files to a FileSystem. */
DECL|method|copy (File src, FileSystem dstFS, Path dst, boolean deleteSource, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|File
name|src
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|dst
operator|=
name|checkDest
argument_list|(
name|src
operator|.
name|getName
argument_list|()
argument_list|,
name|dstFS
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|src
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dstFS
operator|.
name|mkdirs
argument_list|(
name|dst
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|File
name|contents
index|[]
init|=
name|src
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|copy
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|,
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|contents
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|deleteSource
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|src
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|OutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|out
operator|=
name|dstFS
operator|.
name|create
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|.
name|toString
argument_list|()
operator|+
literal|": No such file or directory"
argument_list|)
throw|;
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|src
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/** Copy FileSystem files to local files. */
DECL|method|copy (FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf)
specifier|public
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|Path
name|src
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|filestatus
init|=
name|srcFS
operator|.
name|getFileStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
return|return
name|copy
argument_list|(
name|srcFS
argument_list|,
name|filestatus
argument_list|,
name|dst
argument_list|,
name|deleteSource
argument_list|,
name|conf
argument_list|)
return|;
block|}
comment|/** Copy FileSystem files to local files. */
DECL|method|copy (FileSystem srcFS, FileStatus srcStatus, File dst, boolean deleteSource, Configuration conf)
specifier|private
specifier|static
name|boolean
name|copy
parameter_list|(
name|FileSystem
name|srcFS
parameter_list|,
name|FileStatus
name|srcStatus
parameter_list|,
name|File
name|dst
parameter_list|,
name|boolean
name|deleteSource
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|src
init|=
name|srcStatus
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dst
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStatus
name|contents
index|[]
init|=
name|srcFS
operator|.
name|listStatus
argument_list|(
name|src
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|copy
argument_list|(
name|srcFS
argument_list|,
name|contents
index|[
name|i
index|]
argument_list|,
operator|new
name|File
argument_list|(
name|dst
argument_list|,
name|contents
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|deleteSource
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|InputStream
name|in
init|=
name|srcFS
operator|.
name|open
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
operator|new
name|FileOutputStream
argument_list|(
name|dst
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteSource
condition|)
block|{
return|return
name|srcFS
operator|.
name|delete
argument_list|(
name|src
argument_list|,
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|checkDest (String srcName, FileSystem dstFS, Path dst, boolean overwrite)
specifier|private
specifier|static
name|Path
name|checkDest
parameter_list|(
name|String
name|srcName
parameter_list|,
name|FileSystem
name|dstFS
parameter_list|,
name|Path
name|dst
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dstFS
operator|.
name|exists
argument_list|(
name|dst
argument_list|)
condition|)
block|{
name|FileStatus
name|sdst
init|=
name|dstFS
operator|.
name|getFileStatus
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdst
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|srcName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|+
literal|" is a directory"
argument_list|)
throw|;
block|}
return|return
name|checkDest
argument_list|(
literal|null
argument_list|,
name|dstFS
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|srcName
argument_list|)
argument_list|,
name|overwrite
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Target "
operator|+
name|dst
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
return|return
name|dst
return|;
block|}
comment|/**    * This class is only used on windows to invoke the cygpath command.    */
DECL|class|CygPathCommand
specifier|private
specifier|static
class|class
name|CygPathCommand
extends|extends
name|Shell
block|{
DECL|field|command
name|String
index|[]
name|command
decl_stmt|;
DECL|field|result
name|String
name|result
decl_stmt|;
DECL|method|CygPathCommand (String path)
name|CygPathCommand
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|command
operator|=
operator|new
name|String
index|[]
block|{
literal|"cygpath"
block|,
literal|"-u"
block|,
name|path
block|}
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
block|}
DECL|method|getResult ()
name|String
name|getResult
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|result
return|;
block|}
DECL|method|getExecString ()
specifier|protected
name|String
index|[]
name|getExecString
parameter_list|()
block|{
return|return
name|command
return|;
block|}
DECL|method|parseExecResult (BufferedReader lines)
specifier|protected
name|void
name|parseExecResult
parameter_list|(
name|BufferedReader
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|line
init|=
name|lines
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't convert '"
operator|+
name|command
index|[
literal|2
index|]
operator|+
literal|" to a cygwin path"
argument_list|)
throw|;
block|}
name|result
operator|=
name|line
expr_stmt|;
block|}
block|}
comment|/**    * Convert a os-native filename to a path that works for the shell.    * @param filename The filename to convert    * @return The unix pathname    * @throws IOException on windows, there can be problems with the subprocess    */
DECL|method|makeShellPath (String filename)
specifier|public
specifier|static
name|String
name|makeShellPath
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Path
operator|.
name|WINDOWS
condition|)
block|{
return|return
operator|new
name|CygPathCommand
argument_list|(
name|filename
argument_list|)
operator|.
name|getResult
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|filename
return|;
block|}
block|}
comment|/**    * Convert a os-native filename to a path that works for the shell.    * @param file The filename to convert    * @return The unix pathname    * @throws IOException on windows, there can be problems with the subprocess    */
DECL|method|makeShellPath (File file)
specifier|public
specifier|static
name|String
name|makeShellPath
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|makeShellPath
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Convert a os-native filename to a path that works for the shell.    * @param file The filename to convert    * @param makeCanonicalPath     *          Whether to make canonical path for the file passed    * @return The unix pathname    * @throws IOException on windows, there can be problems with the subprocess    */
DECL|method|makeShellPath (File file, boolean makeCanonicalPath)
specifier|public
specifier|static
name|String
name|makeShellPath
parameter_list|(
name|File
name|file
parameter_list|,
name|boolean
name|makeCanonicalPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|makeCanonicalPath
condition|)
block|{
return|return
name|makeShellPath
argument_list|(
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|makeShellPath
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Takes an input dir and returns the du on that local directory. Very basic    * implementation.    *     * @param dir    *          The input dir to get the disk space of this local dir    * @return The total disk space of the input local directory    */
DECL|method|getDU (File dir)
specifier|public
specifier|static
name|long
name|getDU
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|long
name|size
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
return|return
literal|0
return|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|dir
operator|.
name|length
argument_list|()
return|;
block|}
else|else
block|{
name|size
operator|=
name|dir
operator|.
name|length
argument_list|()
expr_stmt|;
name|File
index|[]
name|allFiles
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|size
operator|=
name|size
operator|+
name|getDU
argument_list|(
name|allFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
block|}
comment|/**    * Given a File input it will unzip the file in a the unzip directory    * passed as the second parameter    * @param inFile The zip file as input    * @param unzipDir The unzip directory where to unzip the zip file.    * @throws IOException    */
DECL|method|unZip (File inFile, File unzipDir)
specifier|public
specifier|static
name|void
name|unZip
parameter_list|(
name|File
name|inFile
parameter_list|,
name|File
name|unzipDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|entries
decl_stmt|;
name|ZipFile
name|zipFile
init|=
operator|new
name|ZipFile
argument_list|(
name|inFile
argument_list|)
decl_stmt|;
try|try
block|{
name|entries
operator|=
name|zipFile
operator|.
name|entries
argument_list|()
expr_stmt|;
while|while
condition|(
name|entries
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|ZipEntry
name|entry
init|=
name|entries
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|InputStream
name|in
init|=
name|zipFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
decl_stmt|;
try|try
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|unzipDir
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|file
operator|.
name|getParentFile
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Given a Tar File as input it will untar the file in a the untar directory    * passed as the second parameter    *     * This utility will untar ".tar" files and ".tar.gz","tgz" files.    *      * @param inFile The tar file as input.     * @param untarDir The untar directory where to untar the tar file.    * @throws IOException    */
DECL|method|unTar (File inFile, File untarDir)
specifier|public
specifier|static
name|void
name|unTar
parameter_list|(
name|File
name|inFile
parameter_list|,
name|File
name|untarDir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|untarDir
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|untarDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Mkdirs failed to create "
operator|+
name|untarDir
argument_list|)
throw|;
block|}
block|}
name|StringBuilder
name|untarCommand
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|gzipped
init|=
name|inFile
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"gz"
argument_list|)
decl_stmt|;
if|if
condition|(
name|gzipped
condition|)
block|{
name|untarCommand
operator|.
name|append
argument_list|(
literal|" gzip -dc '"
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|inFile
argument_list|)
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
literal|"' | ("
argument_list|)
expr_stmt|;
block|}
name|untarCommand
operator|.
name|append
argument_list|(
literal|"cd '"
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|untarDir
argument_list|)
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
literal|"' ; "
argument_list|)
expr_stmt|;
name|untarCommand
operator|.
name|append
argument_list|(
literal|"tar -xf "
argument_list|)
expr_stmt|;
if|if
condition|(
name|gzipped
condition|)
block|{
name|untarCommand
operator|.
name|append
argument_list|(
literal|" -)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|untarCommand
operator|.
name|append
argument_list|(
name|FileUtil
operator|.
name|makeShellPath
argument_list|(
name|inFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|shellCmd
init|=
block|{
literal|"bash"
block|,
literal|"-c"
block|,
name|untarCommand
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|shellCmd
argument_list|)
decl_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
name|int
name|exitcode
init|=
name|shexec
operator|.
name|getExitCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitcode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error untarring file "
operator|+
name|inFile
operator|+
literal|". Tar process exited with exit code "
operator|+
name|exitcode
argument_list|)
throw|;
block|}
block|}
comment|/**    * Class for creating hardlinks.    * Supports Unix, Cygwin, WindXP.    *      */
DECL|class|HardLink
specifier|public
specifier|static
class|class
name|HardLink
block|{
DECL|enum|OSType
enum|enum
name|OSType
block|{
DECL|enumConstant|OS_TYPE_UNIX
name|OS_TYPE_UNIX
block|,
DECL|enumConstant|OS_TYPE_WINXP
name|OS_TYPE_WINXP
block|,
DECL|enumConstant|OS_TYPE_SOLARIS
name|OS_TYPE_SOLARIS
block|,
DECL|enumConstant|OS_TYPE_MAC
name|OS_TYPE_MAC
block|;      }
DECL|field|hardLinkCommand
specifier|private
specifier|static
name|String
index|[]
name|hardLinkCommand
decl_stmt|;
DECL|field|getLinkCountCommand
specifier|private
specifier|static
name|String
index|[]
name|getLinkCountCommand
decl_stmt|;
DECL|field|osType
specifier|private
specifier|static
name|OSType
name|osType
decl_stmt|;
static|static
block|{
name|osType
operator|=
name|getOSType
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|osType
condition|)
block|{
case|case
name|OS_TYPE_WINXP
case|:
name|hardLinkCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"fsutil"
block|,
literal|"hardlink"
block|,
literal|"create"
block|,
literal|null
block|,
literal|null
block|}
expr_stmt|;
name|getLinkCountCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"stat"
block|,
literal|"-c%h"
block|}
expr_stmt|;
break|break;
case|case
name|OS_TYPE_SOLARIS
case|:
name|hardLinkCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"ln"
block|,
literal|null
block|,
literal|null
block|}
expr_stmt|;
name|getLinkCountCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"ls"
block|,
literal|"-l"
block|}
expr_stmt|;
break|break;
case|case
name|OS_TYPE_MAC
case|:
name|hardLinkCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"ln"
block|,
literal|null
block|,
literal|null
block|}
expr_stmt|;
name|getLinkCountCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"stat"
block|,
literal|"-f%l"
block|}
expr_stmt|;
break|break;
case|case
name|OS_TYPE_UNIX
case|:
default|default:
name|hardLinkCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"ln"
block|,
literal|null
block|,
literal|null
block|}
expr_stmt|;
name|getLinkCountCommand
operator|=
operator|new
name|String
index|[]
block|{
literal|"stat"
block|,
literal|"-c%h"
block|}
expr_stmt|;
block|}
block|}
DECL|method|getOSType ()
specifier|static
specifier|private
name|OSType
name|getOSType
parameter_list|()
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|osName
operator|.
name|indexOf
argument_list|(
literal|"Windows"
argument_list|)
operator|>=
literal|0
operator|&&
operator|(
name|osName
operator|.
name|indexOf
argument_list|(
literal|"XP"
argument_list|)
operator|>=
literal|0
operator|||
name|osName
operator|.
name|indexOf
argument_list|(
literal|"2003"
argument_list|)
operator|>=
literal|0
operator|||
name|osName
operator|.
name|indexOf
argument_list|(
literal|"Vista"
argument_list|)
operator|>=
literal|0
operator|)
condition|)
return|return
name|OSType
operator|.
name|OS_TYPE_WINXP
return|;
elseif|else
if|if
condition|(
name|osName
operator|.
name|indexOf
argument_list|(
literal|"SunOS"
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|OSType
operator|.
name|OS_TYPE_SOLARIS
return|;
elseif|else
if|if
condition|(
name|osName
operator|.
name|indexOf
argument_list|(
literal|"Mac"
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|OSType
operator|.
name|OS_TYPE_MAC
return|;
else|else
return|return
name|OSType
operator|.
name|OS_TYPE_UNIX
return|;
block|}
comment|/**      * Creates a hardlink       */
DECL|method|createHardLink (File target, File linkName)
specifier|public
specifier|static
name|void
name|createHardLink
parameter_list|(
name|File
name|target
parameter_list|,
name|File
name|linkName
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|hardLinkCommand
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|osType
operator|==
name|OSType
operator|.
name|OS_TYPE_WINXP
condition|)
block|{
name|hardLinkCommand
index|[
name|len
operator|-
literal|1
index|]
operator|=
name|target
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
name|hardLinkCommand
index|[
name|len
operator|-
literal|2
index|]
operator|=
name|linkName
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hardLinkCommand
index|[
name|len
operator|-
literal|2
index|]
operator|=
name|makeShellPath
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hardLinkCommand
index|[
name|len
operator|-
literal|1
index|]
operator|=
name|makeShellPath
argument_list|(
name|linkName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// execute shell command
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|hardLinkCommand
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|process
operator|.
name|waitFor
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|errMsg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|errMsg
operator|==
literal|null
condition|)
name|errMsg
operator|=
literal|""
expr_stmt|;
name|String
name|inpMsg
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|inpMsg
operator|==
literal|null
condition|)
name|inpMsg
operator|=
literal|""
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|errMsg
operator|+
name|inpMsg
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Retrieves the number of links to the specified file.      */
DECL|method|getLinkCount (File fileName)
specifier|public
specifier|static
name|int
name|getLinkCount
parameter_list|(
name|File
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|fileName
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|fileName
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
name|int
name|len
init|=
name|getLinkCountCommand
operator|.
name|length
decl_stmt|;
name|String
index|[]
name|cmd
init|=
operator|new
name|String
index|[
name|len
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|cmd
index|[
name|i
index|]
operator|=
name|getLinkCountCommand
index|[
name|i
index|]
expr_stmt|;
block|}
name|cmd
index|[
name|len
index|]
operator|=
name|fileName
operator|.
name|toString
argument_list|()
expr_stmt|;
name|String
name|inpMsg
init|=
literal|null
decl_stmt|;
name|String
name|errMsg
init|=
literal|null
decl_stmt|;
name|int
name|exitValue
init|=
operator|-
literal|1
decl_stmt|;
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|err
init|=
literal|null
decl_stmt|;
comment|// execute shell command
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
try|try
block|{
name|exitValue
operator|=
name|process
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|inpMsg
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|err
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getErrorStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|errMsg
operator|=
name|err
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|inpMsg
operator|==
literal|null
operator|||
name|exitValue
operator|!=
literal|0
condition|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
literal|null
argument_list|)
throw|;
block|}
if|if
condition|(
name|getOSType
argument_list|()
operator|==
name|OSType
operator|.
name|OS_TYPE_SOLARIS
condition|)
block|{
name|String
index|[]
name|result
init|=
name|inpMsg
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
decl_stmt|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|result
index|[
literal|1
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|inpMsg
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|createIOException
argument_list|(
name|fileName
argument_list|,
name|inpMsg
argument_list|,
name|errMsg
argument_list|,
name|exitValue
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|process
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
name|err
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** Create an IOException for failing to get link count. */
DECL|method|createIOException (File f, String message, String error, int exitvalue, Exception cause)
specifier|static
specifier|private
name|IOException
name|createIOException
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|error
parameter_list|,
name|int
name|exitvalue
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
literal|"Failed to get link count on file "
operator|+
name|f
operator|+
literal|": message="
operator|+
name|message
operator|+
literal|"; error="
operator|+
name|error
operator|+
literal|"; exit value="
operator|+
name|exitvalue
decl_stmt|;
return|return
name|cause
operator|==
literal|null
condition|?
operator|new
name|IOException
argument_list|(
name|s
argument_list|)
else|:
operator|new
name|IOException
argument_list|(
name|s
argument_list|,
name|cause
argument_list|)
return|;
block|}
comment|/**    * Create a soft link between a src and destination    * only on a local disk. HDFS does not support this    * @param target the target for symlink     * @param linkname the symlink    * @return value returned by the command    */
DECL|method|symLink (String target, String linkname)
specifier|public
specifier|static
name|int
name|symLink
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|linkname
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|cmd
init|=
literal|"ln -s "
operator|+
name|target
operator|+
literal|" "
operator|+
name|linkname
decl_stmt|;
name|Process
name|p
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|cmd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|returnVal
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|returnVal
operator|=
name|p
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//do nothing as of yet
block|}
return|return
name|returnVal
return|;
block|}
comment|/**    * Change the permissions on a filename.    * @param filename the name of the file to change    * @param perm the permission string    * @return the exit code from the command    * @throws IOException    * @throws InterruptedException    */
DECL|method|chmod (String filename, String perm )
specifier|public
specifier|static
name|int
name|chmod
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|perm
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|chmod
argument_list|(
name|filename
argument_list|,
name|perm
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Change the permissions on a file / directory, recursively, if    * needed.    * @param filename name of the file whose permissions are to change    * @param perm permission string    * @param recursive true, if permissions should be changed recursively    * @return the exit code from the command.    * @throws IOException    * @throws InterruptedException    */
DECL|method|chmod (String filename, String perm, boolean recursive)
specifier|public
specifier|static
name|int
name|chmod
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|perm
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|StringBuilder
name|cmdBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|cmdBuf
operator|.
name|append
argument_list|(
literal|"chmod "
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
name|cmdBuf
operator|.
name|append
argument_list|(
literal|"-R "
argument_list|)
expr_stmt|;
block|}
name|cmdBuf
operator|.
name|append
argument_list|(
name|perm
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|cmdBuf
operator|.
name|append
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|String
index|[]
name|shellCmd
init|=
block|{
literal|"bash"
block|,
literal|"-c"
block|,
name|cmdBuf
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|ShellCommandExecutor
name|shExec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|shellCmd
argument_list|)
decl_stmt|;
try|try
block|{
name|shExec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error while changing permission : "
operator|+
name|filename
operator|+
literal|" Exception: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|shExec
operator|.
name|getExitCode
argument_list|()
return|;
block|}
comment|/**    * Create a tmp file for a base file.    * @param basefile the base file of the tmp    * @param prefix file name prefix of tmp    * @param isDeleteOnExit if true, the tmp will be deleted when the VM exits    * @return a newly created tmp file    * @exception IOException If a tmp file cannot created    * @see java.io.File#createTempFile(String, String, File)    * @see java.io.File#deleteOnExit()    */
DECL|method|createLocalTempFile (final File basefile, final String prefix, final boolean isDeleteOnExit)
specifier|public
specifier|static
specifier|final
name|File
name|createLocalTempFile
parameter_list|(
specifier|final
name|File
name|basefile
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|boolean
name|isDeleteOnExit
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
name|prefix
operator|+
name|basefile
operator|.
name|getName
argument_list|()
argument_list|,
literal|""
argument_list|,
name|basefile
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDeleteOnExit
condition|)
block|{
name|tmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
return|return
name|tmp
return|;
block|}
comment|/**    * Move the src file to the name specified by target.    * @param src the source file    * @param target the target file    * @exception IOException If this operation fails    */
DECL|method|replaceFile (File src, File target)
specifier|public
specifier|static
name|void
name|replaceFile
parameter_list|(
name|File
name|src
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|/* renameTo() has two limitations on Windows platform.      * src.renameTo(target) fails if      * 1) If target already exists OR      * 2) If target is already open for reading/writing.      */
if|if
condition|(
operator|!
name|src
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|int
name|retries
init|=
literal|5
decl_stmt|;
while|while
condition|(
name|target
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|target
operator|.
name|delete
argument_list|()
operator|&&
name|retries
operator|--
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"replaceFile interrupted."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|src
operator|.
name|renameTo
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|target
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

