begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.s3native
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3native
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BufferedFSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|s3
operator|.
name|S3Exception
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicies
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|retry
operator|.
name|RetryProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  *<p>  * A {@link FileSystem} for reading and writing files stored on  *<a href="http://aws.amazon.com/s3">Amazon S3</a>.  * Unlike {@link org.apache.hadoop.fs.s3.S3FileSystem} this implementation  * stores files on S3 in their  * native form so they can be read by other S3 tools.  *</p>  * @see org.apache.hadoop.fs.s3.S3FileSystem  */
end_comment

begin_class
DECL|class|NativeS3FileSystem
specifier|public
class|class
name|NativeS3FileSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NativeS3FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|FOLDER_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|FOLDER_SUFFIX
init|=
literal|"_$folder$"
decl_stmt|;
DECL|field|MAX_S3_FILE_SIZE
specifier|private
specifier|static
specifier|final
name|long
name|MAX_S3_FILE_SIZE
init|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
DECL|field|PATH_DELIMITER
specifier|static
specifier|final
name|String
name|PATH_DELIMITER
init|=
name|Path
operator|.
name|SEPARATOR
decl_stmt|;
DECL|field|S3_MAX_LISTING_LENGTH
specifier|private
specifier|static
specifier|final
name|int
name|S3_MAX_LISTING_LENGTH
init|=
literal|1000
decl_stmt|;
DECL|class|NativeS3FsInputStream
specifier|private
class|class
name|NativeS3FsInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|in
specifier|private
name|InputStream
name|in
decl_stmt|;
DECL|field|key
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
DECL|field|pos
specifier|private
name|long
name|pos
init|=
literal|0
decl_stmt|;
DECL|method|NativeS3FsInputStream (InputStream in, String key)
specifier|public
name|NativeS3FsInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|pos
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|statistics
operator|!=
literal|null
operator|&&
name|result
operator|!=
operator|-
literal|1
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|read (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|result
init|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|result
expr_stmt|;
block|}
if|if
condition|(
name|statistics
operator|!=
literal|null
operator|&&
name|result
operator|>
literal|0
condition|)
block|{
name|statistics
operator|.
name|incrementBytesRead
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|in
operator|=
name|store
operator|.
name|retrieve
argument_list|(
name|key
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|this
operator|.
name|pos
operator|=
name|pos
expr_stmt|;
block|}
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
return|;
block|}
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|NativeS3FsOutputStream
specifier|private
class|class
name|NativeS3FsOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|backupFile
specifier|private
name|File
name|backupFile
decl_stmt|;
DECL|field|backupStream
specifier|private
name|OutputStream
name|backupStream
decl_stmt|;
DECL|field|digest
specifier|private
name|MessageDigest
name|digest
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|method|NativeS3FsOutputStream (Configuration conf, NativeFileSystemStore store, String key, Progressable progress, int bufferSize)
specifier|public
name|NativeS3FsOutputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|NativeFileSystemStore
name|store
parameter_list|,
name|String
name|key
parameter_list|,
name|Progressable
name|progress
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|backupFile
operator|=
name|newBackupFile
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|digest
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
name|this
operator|.
name|backupStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|backupFile
argument_list|)
argument_list|,
name|this
operator|.
name|digest
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot load MD5 digest algorithm,"
operator|+
literal|"skipping message integrity check."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|backupStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|backupFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|newBackupFile ()
specifier|private
name|File
name|newBackupFile
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|get
argument_list|(
literal|"fs.s3.buffer.dir"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
operator|&&
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create S3 buffer directory: "
operator|+
name|dir
argument_list|)
throw|;
block|}
name|File
name|result
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"output-"
argument_list|,
literal|".tmp"
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|result
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|backupStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|backupStream
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|md5Hash
init|=
name|digest
operator|==
literal|null
condition|?
literal|null
else|:
name|digest
operator|.
name|digest
argument_list|()
decl_stmt|;
name|store
operator|.
name|storeFile
argument_list|(
name|key
argument_list|,
name|backupFile
argument_list|,
name|md5Hash
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|backupFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not delete temporary s3n file: "
operator|+
name|backupFile
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|backupStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|backupStream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|store
specifier|private
name|NativeFileSystemStore
name|store
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|method|NativeS3FileSystem ()
specifier|public
name|NativeS3FileSystem
parameter_list|()
block|{
comment|// set store in initialize()
block|}
DECL|method|NativeS3FileSystem (NativeFileSystemStore store)
specifier|public
name|NativeS3FileSystem
parameter_list|(
name|NativeFileSystemStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|==
literal|null
condition|)
block|{
name|store
operator|=
name|createDefaultStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|initialize
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|URI
operator|.
name|create
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|uri
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|createDefaultStore (Configuration conf)
specifier|private
specifier|static
name|NativeFileSystemStore
name|createDefaultStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|NativeFileSystemStore
name|store
init|=
operator|new
name|Jets3tNativeFileSystemStore
argument_list|()
decl_stmt|;
name|RetryPolicy
name|basePolicy
init|=
name|RetryPolicies
operator|.
name|retryUpToMaximumCountWithFixedSleep
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
literal|"fs.s3.maxRetries"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|conf
operator|.
name|getLong
argument_list|(
literal|"fs.s3.sleepTimeSeconds"
argument_list|,
literal|10
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
name|exceptionToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Exception
argument_list|>
argument_list|,
name|RetryPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|IOException
operator|.
name|class
argument_list|,
name|basePolicy
argument_list|)
expr_stmt|;
name|exceptionToPolicyMap
operator|.
name|put
argument_list|(
name|S3Exception
operator|.
name|class
argument_list|,
name|basePolicy
argument_list|)
expr_stmt|;
name|RetryPolicy
name|methodPolicy
init|=
name|RetryPolicies
operator|.
name|retryByException
argument_list|(
name|RetryPolicies
operator|.
name|TRY_ONCE_THEN_FAIL
argument_list|,
name|exceptionToPolicyMap
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
name|methodNameToPolicyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RetryPolicy
argument_list|>
argument_list|()
decl_stmt|;
name|methodNameToPolicyMap
operator|.
name|put
argument_list|(
literal|"storeFile"
argument_list|,
name|methodPolicy
argument_list|)
expr_stmt|;
return|return
operator|(
name|NativeFileSystemStore
operator|)
name|RetryProxy
operator|.
name|create
argument_list|(
name|NativeFileSystemStore
operator|.
name|class
argument_list|,
name|store
argument_list|,
name|methodNameToPolicyMap
argument_list|)
return|;
block|}
DECL|method|pathToKey (Path path)
specifier|private
specifier|static
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Path must be absolute: "
operator|+
name|path
argument_list|)
throw|;
block|}
return|return
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
comment|// remove initial slash
block|}
DECL|method|keyToPath (String key)
specifier|private
specifier|static
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|key
argument_list|)
return|;
block|}
DECL|method|makeAbsolute (Path path)
specifier|private
name|Path
name|makeAbsolute
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
return|return
name|path
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
return|;
block|}
comment|/** This optional operation is not yet supported. */
DECL|method|append (Path f, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|create (Path f, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exists
argument_list|(
name|f
argument_list|)
operator|&&
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File already exists:"
operator|+
name|f
argument_list|)
throw|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|NativeS3FsOutputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|store
argument_list|,
name|key
argument_list|,
name|progress
argument_list|,
name|bufferSize
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|contents
init|=
name|listStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|recursive
operator|&&
name|contents
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Directory "
operator|+
name|f
operator|.
name|toString
argument_list|()
operator|+
literal|" is not empty."
argument_list|)
throw|;
block|}
for|for
control|(
name|FileStatus
name|p
range|:
name|contents
control|)
block|{
if|if
condition|(
operator|!
name|delete
argument_list|(
name|p
operator|.
name|getPath
argument_list|()
argument_list|,
name|recursive
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|store
operator|.
name|delete
argument_list|(
name|key
operator|+
name|FOLDER_SUFFIX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|delete
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// root always exists
return|return
name|newDirectory
argument_list|(
name|absolutePath
argument_list|)
return|;
block|}
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
return|return
name|newFile
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
return|;
block|}
if|if
condition|(
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
operator|+
name|FOLDER_SUFFIX
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|newDirectory
argument_list|(
name|absolutePath
argument_list|)
return|;
block|}
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|listing
operator|.
name|getFiles
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|||
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|newDirectory
argument_list|(
name|absolutePath
argument_list|)
return|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|absolutePath
operator|+
literal|": No such file or directory."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
comment|/**    *<p>    * If<code>f</code> is a file, this method will make a single call to S3.    * If<code>f</code> is a directory, this method will make a maximum of    * (<i>n</i> / 1000) + 2 calls to S3, where<i>n</i> is the total number of    * files and directories contained directly in<code>f</code>.    *</p>    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|FileStatus
index|[]
block|{
name|newFile
argument_list|(
name|meta
argument_list|,
name|absolutePath
argument_list|)
block|}
return|;
block|}
block|}
name|URI
name|pathUri
init|=
name|absolutePath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|FileStatus
argument_list|>
name|status
init|=
operator|new
name|TreeSet
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
name|S3_MAX_LISTING_LENGTH
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|fileMetadata
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|Path
name|subpath
init|=
name|keyToPath
argument_list|(
name|fileMetadata
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|relativePath
init|=
name|pathUri
operator|.
name|relativize
argument_list|(
name|subpath
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|endsWith
argument_list|(
name|FOLDER_SUFFIX
argument_list|)
condition|)
block|{
name|status
operator|.
name|add
argument_list|(
name|newDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|absolutePath
argument_list|,
name|relativePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|relativePath
operator|.
name|indexOf
argument_list|(
name|FOLDER_SUFFIX
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|add
argument_list|(
name|newFile
argument_list|(
name|fileMetadata
argument_list|,
name|subpath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|commonPrefix
range|:
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|Path
name|subpath
init|=
name|keyToPath
argument_list|(
name|commonPrefix
argument_list|)
decl_stmt|;
name|String
name|relativePath
init|=
name|pathUri
operator|.
name|relativize
argument_list|(
name|subpath
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|status
operator|.
name|add
argument_list|(
name|newDirectory
argument_list|(
operator|new
name|Path
argument_list|(
name|absolutePath
argument_list|,
name|relativePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
if|if
condition|(
name|status
operator|.
name|isEmpty
argument_list|()
operator|&&
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
operator|+
name|FOLDER_SUFFIX
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|status
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
literal|0
index|]
argument_list|)
return|;
block|}
DECL|method|newFile (FileMetadata meta, Path path)
specifier|private
name|FileStatus
name|newFile
parameter_list|(
name|FileMetadata
name|meta
parameter_list|,
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|meta
operator|.
name|getLength
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|MAX_S3_FILE_SIZE
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newDirectory (Path path)
specifier|private
name|FileStatus
name|newDirectory
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
name|MAX_S3_FILE_SIZE
argument_list|,
literal|0
argument_list|,
name|path
operator|.
name|makeQualified
argument_list|(
name|this
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|paths
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|absolutePath
argument_list|)
expr_stmt|;
name|absolutePath
operator|=
name|absolutePath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|absolutePath
operator|!=
literal|null
condition|)
do|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Path
name|path
range|:
name|paths
control|)
block|{
name|result
operator|&=
name|mkdir
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|mkdir (Path f)
specifier|private
name|boolean
name|mkdir
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path %s since it is a file."
argument_list|,
name|f
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
operator|+
name|FOLDER_SUFFIX
decl_stmt|;
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|BufferedFSInputStream
argument_list|(
operator|new
name|NativeS3FsInputStream
argument_list|(
name|store
operator|.
name|retrieve
argument_list|(
name|key
argument_list|)
argument_list|,
name|key
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
argument_list|)
return|;
block|}
comment|// rename() and delete() use this method to ensure that the parent directory
comment|// of the source does not vanish.
DECL|method|createParent (Path path)
specifier|private
name|void
name|createParent
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|parent
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|key
operator|+
name|FOLDER_SUFFIX
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|existsAndIsFile (Path f)
specifier|private
name|boolean
name|existsAndIsFile
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|absolutePath
init|=
name|makeAbsolute
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|absolutePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileMetadata
name|meta
init|=
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
comment|// S3 object with given key exists, so this is a file
return|return
literal|true
return|;
block|}
if|if
condition|(
name|store
operator|.
name|retrieveMetadata
argument_list|(
name|key
operator|+
name|FOLDER_SUFFIX
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Signifies empty directory
return|return
literal|false
return|;
block|}
name|PartialListing
name|listing
init|=
name|store
operator|.
name|list
argument_list|(
name|key
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|listing
operator|.
name|getFiles
argument_list|()
operator|.
name|length
operator|>
literal|0
operator|||
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// Non-empty directory
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|absolutePath
operator|+
literal|": No such file or directory"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|rename (Path src, Path dst)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|src
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcKey
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Cannot rename root of file system
return|return
literal|false
return|;
block|}
comment|// Figure out the final destination
name|String
name|dstKey
decl_stmt|;
try|try
block|{
name|boolean
name|dstIsFile
init|=
name|existsAndIsFile
argument_list|(
name|dst
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstIsFile
condition|)
block|{
comment|// Attempting to overwrite a file using rename()
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// Move to within the existent directory
name|dstKey
operator|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
operator|new
name|Path
argument_list|(
name|dst
argument_list|,
name|src
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// dst doesn't exist, so we can proceed
name|dstKey
operator|=
name|pathToKey
argument_list|(
name|makeAbsolute
argument_list|(
name|dst
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|getFileStatus
argument_list|(
name|dst
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
comment|// parent dst is a file
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|ex
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// parent dst does not exist
block|}
block|}
try|try
block|{
name|boolean
name|srcIsFile
init|=
name|existsAndIsFile
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcIsFile
condition|)
block|{
name|store
operator|.
name|rename
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Move the folder object
name|store
operator|.
name|delete
argument_list|(
name|srcKey
operator|+
name|FOLDER_SUFFIX
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|dstKey
operator|+
name|FOLDER_SUFFIX
argument_list|)
expr_stmt|;
comment|// Move everything inside the folder
name|String
name|priorLastKey
init|=
literal|null
decl_stmt|;
do|do
block|{
name|PartialListing
name|listing
init|=
name|store
operator|.
name|listAll
argument_list|(
name|srcKey
argument_list|,
name|S3_MAX_LISTING_LENGTH
argument_list|,
name|priorLastKey
argument_list|)
decl_stmt|;
for|for
control|(
name|FileMetadata
name|file
range|:
name|listing
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|store
operator|.
name|rename
argument_list|(
name|file
operator|.
name|getKey
argument_list|()
argument_list|,
name|dstKey
operator|+
name|file
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|priorLastKey
operator|=
name|listing
operator|.
name|getPriorLastKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|priorLastKey
operator|!=
literal|null
condition|)
do|;
block|}
name|createParent
argument_list|(
name|src
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// Source file does not exist;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Set the working directory to the given directory.    */
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
name|workingDir
operator|=
name|newDir
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
block|}
end_class

end_unit

