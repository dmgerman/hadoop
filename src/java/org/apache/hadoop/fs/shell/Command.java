begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * An abstract class for the execution of a file system command  */
end_comment

begin_class
DECL|class|Command
specifier|abstract
specifier|public
class|class
name|Command
extends|extends
name|Configured
block|{
DECL|field|args
specifier|protected
name|String
index|[]
name|args
decl_stmt|;
comment|/** Constructor */
DECL|method|Command (Configuration conf)
specifier|protected
name|Command
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/** Return the command's name excluding the leading character - */
DECL|method|getCommandName ()
specifier|abstract
specifier|public
name|String
name|getCommandName
parameter_list|()
function_decl|;
comment|/**     * Execute the command on the input path    *     * @param path the input path    * @throws IOException if any error occurs    */
DECL|method|run (Path path)
specifier|abstract
specifier|protected
name|void
name|run
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**     * For each source path, execute the command    *     * @return 0 if it runs successfully; -1 if it fails    */
DECL|method|runAll ()
specifier|public
name|int
name|runAll
parameter_list|()
block|{
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|src
range|:
name|args
control|)
block|{
try|try
block|{
name|Path
name|srcPath
init|=
operator|new
name|Path
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|srcPath
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
name|fs
operator|.
name|globStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|statuses
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Can not find listing for "
operator|+
name|src
argument_list|)
expr_stmt|;
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|FileStatus
name|s
range|:
name|statuses
control|)
block|{
name|run
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RemoteException
name|re
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|String
name|content
init|=
name|re
operator|.
name|getLocalizedMessage
argument_list|()
decl_stmt|;
name|int
name|eol
init|=
name|content
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|eol
operator|>=
literal|0
condition|)
block|{
name|content
operator|=
name|content
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eol
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getCommandName
argument_list|()
operator|+
literal|": "
operator|+
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exitCode
operator|=
operator|-
literal|1
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|getCommandName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|exitCode
return|;
block|}
block|}
end_class

end_unit

