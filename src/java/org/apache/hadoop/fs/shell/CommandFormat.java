begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Parse the args of a command and check the format of args.  */
end_comment

begin_class
DECL|class|CommandFormat
specifier|public
class|class
name|CommandFormat
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|minPar
DECL|field|maxPar
specifier|final
name|int
name|minPar
decl_stmt|,
name|maxPar
decl_stmt|;
DECL|field|options
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
comment|/** constructor */
DECL|method|CommandFormat (String n, int min, int max, String ... possibleOpt)
specifier|public
name|CommandFormat
parameter_list|(
name|String
name|n
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|String
modifier|...
name|possibleOpt
parameter_list|)
block|{
name|name
operator|=
name|n
expr_stmt|;
name|minPar
operator|=
name|min
expr_stmt|;
name|maxPar
operator|=
name|max
expr_stmt|;
for|for
control|(
name|String
name|opt
range|:
name|possibleOpt
control|)
name|options
operator|.
name|put
argument_list|(
name|opt
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|/** Parse parameters starting from the given position    *     * @param args an array of input arguments    * @param pos the position at which starts to parse    * @return a list of parameters    */
DECL|method|parse (String[] args, int pos)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|pos
operator|<
name|args
operator|.
name|length
condition|;
name|pos
operator|++
control|)
block|{
if|if
condition|(
name|args
index|[
name|pos
index|]
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'-'
operator|&&
name|args
index|[
name|pos
index|]
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|opt
init|=
name|args
index|[
name|pos
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|containsKey
argument_list|(
name|opt
argument_list|)
condition|)
name|options
operator|.
name|put
argument_list|(
name|opt
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
else|else
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal option "
operator|+
name|args
index|[
name|pos
index|]
argument_list|)
throw|;
block|}
else|else
name|parameters
operator|.
name|add
argument_list|(
name|args
index|[
name|pos
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|psize
init|=
name|parameters
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|psize
argument_list|<
name|minPar
operator|||
name|psize
argument_list|>
name|maxPar
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Illegal number of arguments"
argument_list|)
throw|;
return|return
name|parameters
return|;
block|}
comment|/** Return if the option is set or not    *     * @param option String representation of an option    * @return true is the option is set; false otherwise    */
DECL|method|getOpt (String option)
specifier|public
name|boolean
name|getOpt
parameter_list|(
name|String
name|option
parameter_list|)
block|{
return|return
name|options
operator|.
name|get
argument_list|(
name|option
argument_list|)
return|;
block|}
block|}
end_class

end_unit

