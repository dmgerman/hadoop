begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/** class to search for and register commands */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|CommandFactory
specifier|public
class|class
name|CommandFactory
extends|extends
name|Configured
implements|implements
name|Configurable
block|{
DECL|field|classMap
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
argument_list|>
name|classMap
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/** Factory constructor for commands */
DECL|method|CommandFactory ()
specifier|public
name|CommandFactory
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Factory constructor for commands    * @param conf the hadoop configuration    */
DECL|method|CommandFactory (Configuration conf)
specifier|public
name|CommandFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Invokes "static void registerCommands(CommandFactory)" on the given class.    * This method abstracts the contract between the factory and the command    * class.  Do not assume that directly invoking registerCommands on the    * given class will have the same effect.    * @param registrarClass class to allow an opportunity to register    */
DECL|method|registerCommands (Class<?> registrarClass)
specifier|public
name|void
name|registerCommands
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|registrarClass
parameter_list|)
block|{
try|try
block|{
name|registrarClass
operator|.
name|getMethod
argument_list|(
literal|"registerCommands"
argument_list|,
name|CommandFactory
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * Register the given class as handling the given list of command    * names.    * @param cmdClass the class implementing the command names    * @param names one or more command names that will invoke this class    */
DECL|method|addClass (Class<? extends Command> cmdClass, String ... names)
specifier|public
name|void
name|addClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
name|cmdClass
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
name|classMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cmdClass
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns the class implementing the given command.  The    * class must have been registered via    * {@link #addClass(Class, String...)}    * @param cmd name of the command    * @return instance of the requested command    */
DECL|method|getClass (String cmd)
specifier|protected
name|Class
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
name|getClass
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
name|classMap
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
return|;
block|}
comment|/**    * Returns an instance of the class implementing the given command.  The    * class must have been registered via    * {@link #addClass(Class, String...)}    * @param cmd name of the command    * @return instance of the requested command    */
DECL|method|getInstance (String cmd)
specifier|public
name|Command
name|getInstance
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
name|getInstance
argument_list|(
name|cmd
argument_list|,
name|getConf
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Get an instance of the requested command    * @param cmdName name of the command to lookup    * @param conf the hadoop configuration    * @return the {@link Command} or null if the command is unknown    */
DECL|method|getInstance (String cmdName, Configuration conf)
specifier|public
name|Command
name|getInstance
parameter_list|(
name|String
name|cmdName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"configuration is null"
argument_list|)
throw|;
name|Command
name|instance
init|=
literal|null
decl_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
name|cmdClass
init|=
name|getClass
argument_list|(
name|cmdName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdClass
operator|!=
literal|null
condition|)
block|{
name|instance
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|cmdClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|instance
operator|.
name|setCommandName
argument_list|(
name|cmdName
argument_list|)
expr_stmt|;
block|}
return|return
name|instance
return|;
block|}
comment|/**    * Gets all of the registered commands    * @return a sorted list of command names    */
DECL|method|getNames ()
specifier|public
name|String
index|[]
name|getNames
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
name|classMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
block|}
end_class

end_unit

