begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/** Various commands for copy files */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Copy
class|class
name|Copy
extends|extends
name|FsCommand
block|{
DECL|method|registerCommands (CommandFactory factory)
specifier|public
specifier|static
name|void
name|registerCommands
parameter_list|(
name|CommandFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|Merge
operator|.
name|class
argument_list|,
literal|"-getmerge"
argument_list|)
expr_stmt|;
block|}
comment|/** merge multiple files together */
DECL|class|Merge
specifier|public
specifier|static
class|class
name|Merge
extends|extends
name|Copy
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"MergeToLocal"
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"<src><localdst> [addnl]"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Get all the files in the directories that\n"
operator|+
literal|"match the source file pattern and merge and sort them to only\n"
operator|+
literal|"one file on local fs.<src> is kept.\n"
decl_stmt|;
DECL|field|dst
specifier|protected
name|PathData
name|dst
init|=
literal|null
decl_stmt|;
DECL|field|delimiter
specifier|protected
name|String
name|delimiter
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|null
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|cf
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// TODO: this really should be a -nl option
if|if
condition|(
operator|(
name|args
operator|.
name|size
argument_list|()
operator|>
literal|2
operator|)
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|args
operator|.
name|removeLast
argument_list|()
argument_list|)
condition|)
block|{
name|delimiter
operator|=
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|delimiter
operator|=
literal|null
expr_stmt|;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|args
operator|.
name|removeLast
argument_list|()
argument_list|)
decl_stmt|;
name|dst
operator|=
operator|new
name|PathData
argument_list|(
name|path
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPath (PathData src)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|src
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|copyMerge
argument_list|(
name|src
operator|.
name|fs
argument_list|,
name|src
operator|.
name|path
argument_list|,
name|dst
operator|.
name|fs
argument_list|,
name|dst
operator|.
name|path
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
argument_list|,
name|delimiter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

