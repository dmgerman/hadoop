begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Count the number of directories, files, bytes, quota, and remaining quota.  */
end_comment

begin_class
DECL|class|Count
specifier|public
class|class
name|Count
extends|extends
name|Command
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"count"
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"-"
operator|+
name|NAME
operator|+
literal|"[-q]<path>"
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
name|CommandUtils
operator|.
name|formatDescription
argument_list|(
name|USAGE
argument_list|,
literal|"Count the number of directories, files and bytes under the paths"
argument_list|,
literal|"that match the specified file pattern.  The output columns are:"
argument_list|,
literal|"DIR_COUNT FILE_COUNT CONTENT_SIZE FILE_NAME or"
argument_list|,
literal|"QUOTA REMAINING_QUATA SPACE_QUOTA REMAINING_SPACE_QUOTA "
argument_list|,
literal|"      DIR_COUNT FILE_COUNT CONTENT_SIZE FILE_NAME"
argument_list|)
decl_stmt|;
DECL|field|qOption
specifier|private
name|boolean
name|qOption
decl_stmt|;
comment|/** Constructor    *     * @param cmd the count command    * @param pos the starting index of the arguments     */
DECL|method|Count (String[] cmd, int pos, Configuration conf)
specifier|public
name|Count
parameter_list|(
name|String
index|[]
name|cmd
parameter_list|,
name|int
name|pos
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|CommandFormat
name|c
init|=
operator|new
name|CommandFormat
argument_list|(
name|NAME
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"q"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameters
init|=
name|c
operator|.
name|parse
argument_list|(
name|cmd
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|this
operator|.
name|args
operator|=
name|parameters
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|parameters
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// default path is the current working directory
name|this
operator|.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"."
block|}
expr_stmt|;
block|}
name|this
operator|.
name|qOption
operator|=
name|c
operator|.
name|getOpt
argument_list|(
literal|"q"
argument_list|)
condition|?
literal|true
else|:
literal|false
expr_stmt|;
block|}
comment|/** Check if a command is the count command    *     * @param cmd A string representation of a command starting with "-"    * @return true if this is a count command; false otherwise    */
DECL|method|matches (String cmd)
specifier|public
specifier|static
name|boolean
name|matches
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
operator|(
literal|"-"
operator|+
name|NAME
operator|)
operator|.
name|equals
argument_list|(
name|cmd
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCommandName ()
specifier|public
name|String
name|getCommandName
parameter_list|()
block|{
return|return
name|NAME
return|;
block|}
annotation|@
name|Override
DECL|method|run (Path path)
specifier|protected
name|void
name|run
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|fs
operator|.
name|getContentSummary
argument_list|(
name|path
argument_list|)
operator|.
name|toString
argument_list|(
name|qOption
argument_list|)
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

