begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
operator|.
name|PathExceptions
operator|.
name|PathIsDirectoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * Display contents of files   */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|Display
class|class
name|Display
extends|extends
name|FsCommand
block|{
DECL|method|registerCommands (CommandFactory factory)
specifier|public
specifier|static
name|void
name|registerCommands
parameter_list|(
name|CommandFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|addClass
argument_list|(
name|Cat
operator|.
name|class
argument_list|,
literal|"-cat"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|addClass
argument_list|(
name|Text
operator|.
name|class
argument_list|,
literal|"-text"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Displays file content to stdout    */
DECL|class|Cat
specifier|public
specifier|static
class|class
name|Cat
extends|extends
name|Display
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"cat"
decl_stmt|;
DECL|field|USAGE
specifier|public
specifier|static
specifier|final
name|String
name|USAGE
init|=
literal|"[-ignoreCrc]<src> ..."
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Fetch all files that match the file pattern<src> \n"
operator|+
literal|"and display their content on stdout.\n"
decl_stmt|;
DECL|field|verifyChecksum
specifier|private
name|boolean
name|verifyChecksum
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
DECL|method|processOptions (LinkedList<String> args)
specifier|protected
name|void
name|processOptions
parameter_list|(
name|LinkedList
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandFormat
name|cf
init|=
operator|new
name|CommandFormat
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"ignoreCrc"
argument_list|)
decl_stmt|;
name|cf
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|verifyChecksum
operator|=
operator|!
name|cf
operator|.
name|getOpt
argument_list|(
literal|"ignoreCrc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processPath (PathData item)
specifier|protected
name|void
name|processPath
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|item
operator|.
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PathIsDirectoryException
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|item
operator|.
name|fs
operator|.
name|setVerifyChecksum
argument_list|(
name|verifyChecksum
argument_list|)
expr_stmt|;
name|printToStdout
argument_list|(
name|getInputStream
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|printToStdout (InputStream in)
specifier|private
name|void
name|printToStdout
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|out
argument_list|,
name|getConf
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getInputStream (PathData item)
specifier|protected
name|InputStream
name|getInputStream
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|item
operator|.
name|fs
operator|.
name|open
argument_list|(
name|item
operator|.
name|path
argument_list|)
return|;
block|}
block|}
comment|/**    * Same behavior as "-cat", but handles zip and TextRecordInputStream    * encodings.     */
DECL|class|Text
specifier|public
specifier|static
class|class
name|Text
extends|extends
name|Cat
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"text"
decl_stmt|;
DECL|field|SHORT_USAGE
specifier|public
specifier|static
specifier|final
name|String
name|SHORT_USAGE
init|=
name|Cat
operator|.
name|USAGE
decl_stmt|;
DECL|field|DESCRIPTION
specifier|public
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"Takes a source file and outputs the file in text format.\n"
operator|+
literal|"The allowed formats are zip and TextRecordInputStream."
decl_stmt|;
annotation|@
name|Override
DECL|method|getInputStream (PathData item)
specifier|protected
name|InputStream
name|getInputStream
parameter_list|(
name|PathData
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|i
init|=
operator|(
name|FSDataInputStream
operator|)
name|super
operator|.
name|getInputStream
argument_list|(
name|item
argument_list|)
decl_stmt|;
comment|// check codecs
name|CompressionCodecFactory
name|cf
init|=
operator|new
name|CompressionCodecFactory
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|CompressionCodec
name|codec
init|=
name|cf
operator|.
name|getCodec
argument_list|(
name|item
operator|.
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
return|return
name|codec
operator|.
name|createInputStream
argument_list|(
name|i
argument_list|)
return|;
block|}
switch|switch
condition|(
name|i
operator|.
name|readShort
argument_list|()
condition|)
block|{
case|case
literal|0x1f8b
case|:
block|{
comment|// RFC 1952
name|i
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
operator|new
name|GZIPInputStream
argument_list|(
name|i
argument_list|)
return|;
block|}
case|case
literal|0x5345
case|:
block|{
comment|// 'S' 'E'
if|if
condition|(
name|i
operator|.
name|readByte
argument_list|()
operator|==
literal|'Q'
condition|)
block|{
name|i
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|TextRecordInputStream
argument_list|(
name|item
operator|.
name|stat
argument_list|)
return|;
block|}
break|break;
block|}
block|}
name|i
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
DECL|class|TextRecordInputStream
specifier|protected
class|class
name|TextRecordInputStream
extends|extends
name|InputStream
block|{
DECL|field|r
name|SequenceFile
operator|.
name|Reader
name|r
decl_stmt|;
DECL|field|key
name|WritableComparable
argument_list|<
name|?
argument_list|>
name|key
decl_stmt|;
DECL|field|val
name|Writable
name|val
decl_stmt|;
DECL|field|inbuf
name|DataInputBuffer
name|inbuf
decl_stmt|;
DECL|field|outbuf
name|DataOutputBuffer
name|outbuf
decl_stmt|;
DECL|method|TextRecordInputStream (FileStatus f)
specifier|public
name|TextRecordInputStream
parameter_list|(
name|FileStatus
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|fpath
init|=
name|f
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|lconf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|r
operator|=
operator|new
name|SequenceFile
operator|.
name|Reader
argument_list|(
name|lconf
argument_list|,
name|SequenceFile
operator|.
name|Reader
operator|.
name|file
argument_list|(
name|fpath
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|r
operator|.
name|getKeyClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|WritableComparable
operator|.
name|class
argument_list|)
argument_list|,
name|lconf
argument_list|)
expr_stmt|;
name|val
operator|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|r
operator|.
name|getValueClass
argument_list|()
operator|.
name|asSubclass
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
argument_list|,
name|lconf
argument_list|)
expr_stmt|;
name|inbuf
operator|=
operator|new
name|DataInputBuffer
argument_list|()
expr_stmt|;
name|outbuf
operator|=
operator|new
name|DataOutputBuffer
argument_list|()
expr_stmt|;
block|}
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|inbuf
operator|||
operator|-
literal|1
operator|==
operator|(
name|ret
operator|=
name|inbuf
operator|.
name|read
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|byte
index|[]
name|tmp
init|=
name|key
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|val
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|inbuf
operator|.
name|reset
argument_list|(
name|outbuf
operator|.
name|getData
argument_list|()
argument_list|,
name|outbuf
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|outbuf
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ret
operator|=
name|inbuf
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

