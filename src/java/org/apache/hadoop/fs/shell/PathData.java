begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.shell
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|shell
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_comment
comment|/**  * Encapsulates a Path (path), its FileStatus (stat), and its FileSystem (fs).  * The stat field will be null if the path does not exist.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|PathData
specifier|public
class|class
name|PathData
block|{
DECL|field|path
specifier|public
specifier|final
name|Path
name|path
decl_stmt|;
DECL|field|stat
specifier|public
name|FileStatus
name|stat
decl_stmt|;
DECL|field|fs
specifier|public
specifier|final
name|FileSystem
name|fs
decl_stmt|;
DECL|field|exists
specifier|public
name|boolean
name|exists
decl_stmt|;
comment|/**    * Creates an object to wrap the given parameters as fields.    * @param theFs the FileSystem    * @param thePath a Path    * @param theStat the FileStatus (may be null if the path doesn't exist)    */
DECL|method|PathData (FileSystem theFs, Path thePath, FileStatus theStat)
specifier|public
name|PathData
parameter_list|(
name|FileSystem
name|theFs
parameter_list|,
name|Path
name|thePath
parameter_list|,
name|FileStatus
name|theStat
parameter_list|)
block|{
name|path
operator|=
name|thePath
expr_stmt|;
name|stat
operator|=
name|theStat
expr_stmt|;
name|fs
operator|=
name|theFs
expr_stmt|;
name|exists
operator|=
operator|(
name|stat
operator|!=
literal|null
operator|)
expr_stmt|;
block|}
comment|/**    * Convenience ctor that looks up the file status for a path.  If the path    * doesn't exist, then the status will be null    * @param fs the FileSystem for the path    * @param path the pathname to lookup     * @throws IOException     */
DECL|method|PathData (FileSystem fs, Path path)
specifier|public
name|PathData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|getStat
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// need a static method for the ctor above
DECL|method|getStat (FileSystem fs, Path path)
specifier|private
specifier|static
name|FileStatus
name|getStat
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
name|status
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{}
comment|// ignore FNF
return|return
name|status
return|;
block|}
comment|/**    * Convenience ctor that extracts the path from the given file status    * @param fs the FileSystem for the FileStatus    * @param stat the FileStatus     */
DECL|method|PathData (FileSystem fs, FileStatus stat)
specifier|public
name|PathData
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|FileStatus
name|stat
parameter_list|)
block|{
name|this
argument_list|(
name|fs
argument_list|,
name|stat
operator|.
name|getPath
argument_list|()
argument_list|,
name|stat
argument_list|)
expr_stmt|;
block|}
comment|/**    * Updates the paths's file status    * @return the updated FileStatus    * @throws IOException if anything goes wrong...    */
DECL|method|refreshStatus ()
specifier|public
name|FileStatus
name|refreshStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|stat
operator|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|stat
return|;
block|}
comment|/**    * Returns a list of PathData objects of the items contained in the given    * directory.    * @return list of PathData objects for its children    * @throws IOException if anything else goes wrong...    */
DECL|method|getDirectoryContents ()
specifier|public
name|PathData
index|[]
name|getDirectoryContents
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|stat
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|path
operator|+
literal|": Not a directory"
argument_list|)
throw|;
block|}
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|PathData
index|[]
name|items
init|=
operator|new
name|PathData
index|[
name|stats
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stats
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|items
index|[
name|i
index|]
operator|=
operator|new
name|PathData
argument_list|(
name|fs
argument_list|,
name|stats
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
comment|/**    * Returns the printable version of the path that is just the    * filesystem path instead of the full uri    * @return String of the path    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
end_class

end_unit

