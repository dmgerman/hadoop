begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|GlobExpander
class|class
name|GlobExpander
block|{
DECL|class|StringWithOffset
specifier|static
class|class
name|StringWithOffset
block|{
DECL|field|string
name|String
name|string
decl_stmt|;
DECL|field|offset
name|int
name|offset
decl_stmt|;
DECL|method|StringWithOffset (String string, int offset)
specifier|public
name|StringWithOffset
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|string
operator|=
name|string
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
block|}
comment|/**    * Expand globs in the given<code>filePattern</code> into a collection of     * file patterns so that in the expanded set no file pattern has a    * slash character ("/") in a curly bracket pair.    * @param filePattern    * @return expanded file patterns    * @throws IOException     */
DECL|method|expand (String filePattern)
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|expand
parameter_list|(
name|String
name|filePattern
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fullyExpanded
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StringWithOffset
argument_list|>
name|toExpand
init|=
operator|new
name|ArrayList
argument_list|<
name|StringWithOffset
argument_list|>
argument_list|()
decl_stmt|;
name|toExpand
operator|.
name|add
argument_list|(
operator|new
name|StringWithOffset
argument_list|(
name|filePattern
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|toExpand
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StringWithOffset
name|path
init|=
name|toExpand
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StringWithOffset
argument_list|>
name|expanded
init|=
name|expandLeftmost
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|expanded
operator|==
literal|null
condition|)
block|{
name|fullyExpanded
operator|.
name|add
argument_list|(
name|path
operator|.
name|string
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toExpand
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|expanded
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|fullyExpanded
return|;
block|}
comment|/**    * Expand the leftmost outer curly bracket pair containing a    * slash character ("/") in<code>filePattern</code>.    * @param filePattern    * @return expanded file patterns    * @throws IOException     */
DECL|method|expandLeftmost (StringWithOffset filePatternWithOffset)
specifier|private
specifier|static
name|List
argument_list|<
name|StringWithOffset
argument_list|>
name|expandLeftmost
parameter_list|(
name|StringWithOffset
name|filePatternWithOffset
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filePattern
init|=
name|filePatternWithOffset
operator|.
name|string
decl_stmt|;
name|int
name|leftmost
init|=
name|leftmostOuterCurlyContainingSlash
argument_list|(
name|filePattern
argument_list|,
name|filePatternWithOffset
operator|.
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftmost
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|curlyOpen
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|prefix
init|=
operator|new
name|StringBuilder
argument_list|(
name|filePattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|leftmost
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|suffix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|alts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|alt
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|cur
init|=
name|prefix
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|leftmost
init|;
name|i
operator|<
name|filePattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|filePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur
operator|==
name|suffix
condition|)
block|{
name|cur
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|filePattern
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal file pattern: "
operator|+
literal|"An escaped character does not present for glob "
operator|+
name|filePattern
operator|+
literal|" at "
operator|+
name|i
argument_list|)
throw|;
block|}
name|c
operator|=
name|filePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|cur
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
if|if
condition|(
name|curlyOpen
operator|++
operator|==
literal|0
condition|)
block|{
name|alt
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cur
operator|=
name|alt
expr_stmt|;
block|}
else|else
block|{
name|cur
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'}'
operator|&&
name|curlyOpen
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|--
name|curlyOpen
operator|==
literal|0
condition|)
block|{
name|alts
operator|.
name|add
argument_list|(
name|alt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|alt
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cur
operator|=
name|suffix
expr_stmt|;
block|}
else|else
block|{
name|cur
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|','
condition|)
block|{
if|if
condition|(
name|curlyOpen
operator|==
literal|1
condition|)
block|{
name|alts
operator|.
name|add
argument_list|(
name|alt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|alt
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cur
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cur
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|StringWithOffset
argument_list|>
name|exp
init|=
operator|new
name|ArrayList
argument_list|<
name|StringWithOffset
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|alts
control|)
block|{
name|exp
operator|.
name|add
argument_list|(
operator|new
name|StringWithOffset
argument_list|(
name|prefix
operator|+
name|string
operator|+
name|suffix
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|exp
return|;
block|}
comment|/**    * Finds the index of the leftmost opening curly bracket containing a    * slash character ("/") in<code>filePattern</code>.    * @param filePattern    * @return the index of the leftmost opening curly bracket containing a    * slash character ("/"), or -1 if there is no such bracket    * @throws IOException     */
DECL|method|leftmostOuterCurlyContainingSlash (String filePattern, int offset)
specifier|private
specifier|static
name|int
name|leftmostOuterCurlyContainingSlash
parameter_list|(
name|String
name|filePattern
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|curlyOpen
init|=
literal|0
decl_stmt|;
name|int
name|leftmost
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|seenSlash
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|offset
init|;
name|i
operator|<
name|filePattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|filePattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|filePattern
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal file pattern: "
operator|+
literal|"An escaped character does not present for glob "
operator|+
name|filePattern
operator|+
literal|" at "
operator|+
name|i
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'{'
condition|)
block|{
if|if
condition|(
name|curlyOpen
operator|++
operator|==
literal|0
condition|)
block|{
name|leftmost
operator|=
name|i
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'}'
operator|&&
name|curlyOpen
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|--
name|curlyOpen
operator|==
literal|0
operator|&&
name|leftmost
operator|!=
operator|-
literal|1
operator|&&
name|seenSlash
condition|)
block|{
return|return
name|leftmost
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'/'
operator|&&
name|curlyOpen
operator|>
literal|0
condition|)
block|{
name|seenSlash
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

