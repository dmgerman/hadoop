begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|LineReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_comment
comment|/**  * This is an implementation of the Hadoop Archive   * Filesystem. This archive Filesystem has index files  * of the form _index* and has contents of the form  * part-*. The index files store the indexes of the   * real files. The index files are of the form _masterindex  * and _index. The master index is a level of indirection   * in to the index file to make the look ups faster. the index  * file is sorted with hash code of the paths that it contains   * and the master index contains pointers to the positions in   * index for ranges of hashcodes.  */
end_comment

begin_class
DECL|class|HarFileSystem
specifier|public
class|class
name|HarFileSystem
extends|extends
name|FilterFileSystem
block|{
DECL|field|VERSION
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
comment|// uri representation of this Har filesystem
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
comment|// the version of this har filesystem
DECL|field|version
specifier|private
name|int
name|version
decl_stmt|;
comment|// underlying uri
DECL|field|underLyingURI
specifier|private
name|URI
name|underLyingURI
decl_stmt|;
comment|// the top level path of the archive
comment|// in the underlying file system
DECL|field|archivePath
specifier|private
name|Path
name|archivePath
decl_stmt|;
comment|// the masterIndex of the archive
DECL|field|masterIndex
specifier|private
name|Path
name|masterIndex
decl_stmt|;
comment|// the index file
DECL|field|archiveIndex
specifier|private
name|Path
name|archiveIndex
decl_stmt|;
comment|// the har auth
DECL|field|harAuth
specifier|private
name|String
name|harAuth
decl_stmt|;
comment|/**    * public construction of harfilesystem    *    */
DECL|method|HarFileSystem ()
specifier|public
name|HarFileSystem
parameter_list|()
block|{   }
comment|/**    * Constructor to create a HarFileSystem with an    * underlying filesystem.    * @param fs    */
DECL|method|HarFileSystem (FileSystem fs)
specifier|public
name|HarFileSystem
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
block|{
name|super
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize a Har filesystem per har archive. The     * archive home directory is the top level directory    * in the filesystem that contains the HAR archive.    * Be careful with this method, you do not want to go     * on creating new Filesystem instances per call to     * path.getFileSystem().    * the uri of Har is     * har://underlyingfsscheme-host:port/archivepath.    * or     * har:///archivepath. This assumes the underlying filesystem    * to be used in case not specified.    */
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|//decode the name
name|underLyingURI
operator|=
name|decodeHarURI
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//  we got the right har Path- now check if this is
comment|//truly a har filesystem
name|Path
name|harPath
init|=
name|archivePath
argument_list|(
operator|new
name|Path
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|harPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid path for the Har Filesystem. "
operator|+
name|name
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fs
operator|==
literal|null
condition|)
block|{
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|underLyingURI
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|uri
operator|=
name|harPath
operator|.
name|toUri
argument_list|()
expr_stmt|;
name|this
operator|.
name|archivePath
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|harAuth
operator|=
name|getHarAuth
argument_list|(
name|this
operator|.
name|underLyingURI
argument_list|)
expr_stmt|;
comment|//check for the underlying fs containing
comment|// the index file
name|this
operator|.
name|masterIndex
operator|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"_masterindex"
argument_list|)
expr_stmt|;
name|this
operator|.
name|archiveIndex
operator|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
literal|"_index"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|masterIndex
argument_list|)
operator|||
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|archiveIndex
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid path for the Har Filesystem. "
operator|+
literal|"No index file in "
operator|+
name|harPath
argument_list|)
throw|;
block|}
try|try
block|{
name|this
operator|.
name|version
operator|=
name|getHarVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to "
operator|+
literal|"read the version of the Har file system: "
operator|+
name|this
operator|.
name|archivePath
argument_list|)
throw|;
block|}
if|if
condition|(
name|this
operator|.
name|version
operator|!=
name|HarFileSystem
operator|.
name|VERSION
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid version "
operator|+
name|this
operator|.
name|version
operator|+
literal|" expected "
operator|+
name|HarFileSystem
operator|.
name|VERSION
argument_list|)
throw|;
block|}
block|}
comment|// get the version of the filesystem from the masterindex file
comment|// the version is currently not useful since its the first version
comment|// of archives
DECL|method|getHarVersion ()
specifier|public
name|int
name|getHarVersion
parameter_list|()
throws|throws
name|IOException
block|{
name|FSDataInputStream
name|masterIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|masterIndex
argument_list|)
decl_stmt|;
name|LineReader
name|lmaster
init|=
operator|new
name|LineReader
argument_list|(
name|masterIn
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|lmaster
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
try|try
block|{
name|masterIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//disregard it.
comment|// its a read.
block|}
name|String
name|versionLine
init|=
name|line
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|arr
init|=
name|versionLine
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|int
name|version
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|arr
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
comment|/*    * find the parent path that is the     * archive path in the path. The last    * path segment that ends with .har is     * the path that will be returned.    */
DECL|method|archivePath (Path p)
specifier|private
name|Path
name|archivePath
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
name|Path
name|retPath
init|=
literal|null
decl_stmt|;
name|Path
name|tmp
init|=
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|depth
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|tmp
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".har"
argument_list|)
condition|)
block|{
name|retPath
operator|=
name|tmp
expr_stmt|;
break|break;
block|}
name|tmp
operator|=
name|tmp
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
name|retPath
return|;
block|}
comment|/**    * decode the raw URI to get the underlying URI    * @param rawURI raw Har URI    * @return filtered URI of the underlying fileSystem    */
DECL|method|decodeHarURI (URI rawURI, Configuration conf)
specifier|private
name|URI
name|decodeHarURI
parameter_list|(
name|URI
name|rawURI
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|tmpAuth
init|=
name|rawURI
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
comment|//we are using the default file
comment|//system in the config
comment|//so create a underlying uri and
comment|//return it
if|if
condition|(
name|tmpAuth
operator|==
literal|null
condition|)
block|{
comment|//create a path
return|return
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
return|;
block|}
name|String
name|host
init|=
name|rawURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
index|[]
name|str
init|=
name|host
operator|.
name|split
argument_list|(
literal|"-"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"URI: "
operator|+
name|rawURI
operator|+
literal|" is an invalid Har URI."
argument_list|)
throw|;
block|}
name|String
name|underLyingScheme
init|=
name|str
index|[
literal|0
index|]
decl_stmt|;
name|String
name|underLyingHost
init|=
operator|(
name|str
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|str
index|[
literal|1
index|]
else|:
literal|null
decl_stmt|;
name|int
name|underLyingPort
init|=
name|rawURI
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|String
name|auth
init|=
operator|(
name|underLyingHost
operator|==
literal|null
operator|&&
name|underLyingPort
operator|==
operator|-
literal|1
operator|)
condition|?
literal|null
else|:
operator|(
name|underLyingHost
operator|+
literal|":"
operator|+
name|underLyingPort
operator|)
decl_stmt|;
name|URI
name|tmp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rawURI
operator|.
name|getQuery
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// query component not allowed
throw|throw
operator|new
name|IOException
argument_list|(
literal|"query component in Path not supported  "
operator|+
name|rawURI
argument_list|)
throw|;
block|}
try|try
block|{
name|tmp
operator|=
operator|new
name|URI
argument_list|(
name|underLyingScheme
argument_list|,
name|auth
argument_list|,
name|rawURI
operator|.
name|getPath
argument_list|()
argument_list|,
name|rawURI
operator|.
name|getQuery
argument_list|()
argument_list|,
name|rawURI
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// do nothing should not happen
block|}
return|return
name|tmp
return|;
block|}
comment|/**    * return the top level archive.    */
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Create a har specific auth     * har-underlyingfs:port    * @param underLyingURI the uri of underlying    * filesystem    * @return har specific auth    */
DECL|method|getHarAuth (URI underLyingUri)
specifier|private
name|String
name|getHarAuth
parameter_list|(
name|URI
name|underLyingUri
parameter_list|)
block|{
name|String
name|auth
init|=
name|underLyingUri
operator|.
name|getScheme
argument_list|()
operator|+
literal|"-"
decl_stmt|;
if|if
condition|(
name|underLyingUri
operator|.
name|getHost
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|auth
operator|+=
name|underLyingUri
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
expr_stmt|;
if|if
condition|(
name|underLyingUri
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
name|auth
operator|+=
name|underLyingUri
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|auth
operator|+=
literal|":"
expr_stmt|;
block|}
return|return
name|auth
return|;
block|}
comment|/**    * Returns the uri of this filesystem.    * The uri is of the form     * har://underlyingfsschema-host:port/pathintheunderlyingfs    */
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|this
operator|.
name|uri
return|;
block|}
comment|/**    * this method returns the path     * inside the har filesystem.    * this is relative path inside     * the har filesystem.    * @param path the fully qualified path in the har filesystem.    * @return relative path in the filesystem.    */
DECL|method|getPathInHar (Path path)
specifier|private
name|Path
name|getPathInHar
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|Path
name|harPath
init|=
operator|new
name|Path
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|archivePath
operator|.
name|compareTo
argument_list|(
name|harPath
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
return|;
name|Path
name|tmp
init|=
operator|new
name|Path
argument_list|(
name|harPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|harPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|parent
operator|.
name|compareTo
argument_list|(
name|archivePath
argument_list|)
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|)
block|{
name|tmp
operator|=
literal|null
expr_stmt|;
break|break;
block|}
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
name|tmp
operator|=
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
comment|//the relative path of p. basically
comment|// getting rid of /. Parsing and doing
comment|// string manipulation is not good - so
comment|// just use the path api to do it.
DECL|method|makeRelative (String initial, Path p)
specifier|private
name|Path
name|makeRelative
parameter_list|(
name|String
name|initial
parameter_list|,
name|Path
name|p
parameter_list|)
block|{
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|compareTo
argument_list|(
name|p
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|new
name|Path
argument_list|(
name|initial
argument_list|)
return|;
name|Path
name|retPath
init|=
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|p
operator|.
name|getParent
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|depth
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|retPath
operator|=
operator|new
name|Path
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|retPath
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|initial
argument_list|,
name|retPath
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/* this makes a path qualified in the har filesystem    * (non-Javadoc)    * @see org.apache.hadoop.fs.FilterFileSystem#makeQualified(    * org.apache.hadoop.fs.Path)    */
annotation|@
name|Override
DECL|method|makeQualified (Path path)
specifier|public
name|Path
name|makeQualified
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
comment|// make sure that we just get the
comment|// path component
name|Path
name|fsPath
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|fsPath
operator|=
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|URI
name|tmpURI
init|=
name|fsPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|fsPath
operator|=
operator|new
name|Path
argument_list|(
name|tmpURI
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|//change this to Har uri
name|URI
name|tmp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmp
operator|=
operator|new
name|URI
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|harAuth
argument_list|,
name|fsPath
operator|.
name|toString
argument_list|()
argument_list|,
name|tmpURI
operator|.
name|getQuery
argument_list|()
argument_list|,
name|tmpURI
operator|.
name|getFragment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ue
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in URI "
argument_list|,
name|ue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmp
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|tmp
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * get block locations from the underlying fs    * @param file the input filestatus to get block locations    * @param start the start in the file    * @param len the length in the file    * @return block locations for this segment of file    * @throws IOException    */
annotation|@
name|Override
DECL|method|getFileBlockLocations (FileStatus file, long start, long len)
specifier|public
name|BlockLocation
index|[]
name|getFileBlockLocations
parameter_list|(
name|FileStatus
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|// need to look up the file in the underlying fs
comment|// look up the index
comment|// make sure this is a prt of this har filesystem
name|Path
name|p
init|=
name|makeQualified
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|harPath
init|=
name|getPathInHar
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|fileStatusInIndex
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|HarStatus
name|harStatus
init|=
operator|new
name|HarStatus
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|harStatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
return|return
operator|new
name|BlockLocation
index|[
literal|0
index|]
return|;
block|}
name|FileStatus
name|fsFile
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|harStatus
operator|.
name|getPartName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BlockLocation
index|[]
name|rawBlocks
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|fsFile
argument_list|,
name|harStatus
operator|.
name|getStartIndex
argument_list|()
operator|+
name|start
argument_list|,
name|len
argument_list|)
decl_stmt|;
return|return
name|fakeBlockLocations
argument_list|(
name|rawBlocks
argument_list|,
name|harStatus
operator|.
name|getStartIndex
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * fake the rawblocks since map reduce uses the block offsets to     * fo some computations regarding the blocks    * @param rawBlocks the raw blocks returned by the filesystem    * @return faked blocks with changed offsets.    */
DECL|method|fakeBlockLocations (BlockLocation[] rawBlocks, long startIndex)
specifier|private
name|BlockLocation
index|[]
name|fakeBlockLocations
parameter_list|(
name|BlockLocation
index|[]
name|rawBlocks
parameter_list|,
name|long
name|startIndex
parameter_list|)
block|{
for|for
control|(
name|BlockLocation
name|block
range|:
name|rawBlocks
control|)
block|{
name|long
name|rawOffset
init|=
name|block
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|block
operator|.
name|setOffset
argument_list|(
name|rawOffset
operator|-
name|startIndex
argument_list|)
expr_stmt|;
block|}
return|return
name|rawBlocks
return|;
block|}
comment|/**    * the hash of the path p inside iniside    * the filesystem    * @param p the path in the harfilesystem    * @return the hash code of the path.    */
DECL|method|getHarHash (Path p)
specifier|public
specifier|static
name|int
name|getHarHash
parameter_list|(
name|Path
name|p
parameter_list|)
block|{
return|return
operator|(
name|p
operator|.
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|&
literal|0x7fffffff
operator|)
return|;
block|}
DECL|class|Store
specifier|static
class|class
name|Store
block|{
DECL|method|Store ()
specifier|public
name|Store
parameter_list|()
block|{
name|begin
operator|=
name|end
operator|=
name|startHash
operator|=
name|endHash
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|Store (long begin, long end, int startHash, int endHash)
specifier|public
name|Store
parameter_list|(
name|long
name|begin
parameter_list|,
name|long
name|end
parameter_list|,
name|int
name|startHash
parameter_list|,
name|int
name|endHash
parameter_list|)
block|{
name|this
operator|.
name|begin
operator|=
name|begin
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
name|this
operator|.
name|startHash
operator|=
name|startHash
expr_stmt|;
name|this
operator|.
name|endHash
operator|=
name|endHash
expr_stmt|;
block|}
DECL|field|begin
specifier|public
name|long
name|begin
decl_stmt|;
DECL|field|end
specifier|public
name|long
name|end
decl_stmt|;
DECL|field|startHash
specifier|public
name|int
name|startHash
decl_stmt|;
DECL|field|endHash
specifier|public
name|int
name|endHash
decl_stmt|;
block|}
comment|// make sure that this harPath is relative to the har filesystem
comment|// this only works for relative paths. This returns the line matching
comment|// the file in the index. Returns a null if there is not matching
comment|// filename in the index file.
DECL|method|fileStatusInIndex (Path harPath)
specifier|private
name|String
name|fileStatusInIndex
parameter_list|(
name|Path
name|harPath
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read the index file
name|int
name|hashCode
init|=
name|getHarHash
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
comment|// get the master index to find the pos
comment|// in the index file
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|masterIndex
argument_list|)
decl_stmt|;
name|FileStatus
name|masterStat
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|masterIndex
argument_list|)
decl_stmt|;
name|LineReader
name|lin
init|=
operator|new
name|LineReader
argument_list|(
name|in
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|Text
name|line
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|long
name|read
init|=
name|lin
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
comment|//ignore the first line. this is the header of the index files
name|String
index|[]
name|readStr
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Store
argument_list|>
name|stores
init|=
operator|new
name|ArrayList
argument_list|<
name|Store
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|read
operator|<
name|masterStat
operator|.
name|getLen
argument_list|()
condition|)
block|{
name|int
name|b
init|=
name|lin
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|read
operator|+=
name|b
expr_stmt|;
name|readStr
operator|=
name|line
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|int
name|startHash
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|readStr
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|endHash
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|readStr
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|startHash
operator|<=
name|hashCode
operator|&&
name|hashCode
operator|<=
name|endHash
condition|)
block|{
name|stores
operator|.
name|add
argument_list|(
operator|new
name|Store
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|readStr
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|readStr
index|[
literal|3
index|]
argument_list|)
argument_list|,
name|startHash
argument_list|,
name|endHash
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|lin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
comment|// do nothing just a read.
block|}
name|FSDataInputStream
name|aIn
init|=
name|fs
operator|.
name|open
argument_list|(
name|archiveIndex
argument_list|)
decl_stmt|;
name|LineReader
name|aLin
init|=
operator|new
name|LineReader
argument_list|(
name|aIn
argument_list|,
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|retStr
init|=
literal|null
decl_stmt|;
comment|// now start reading the real index file
name|read
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Store
name|s
range|:
name|stores
control|)
block|{
name|aIn
operator|.
name|seek
argument_list|(
name|s
operator|.
name|begin
argument_list|)
expr_stmt|;
while|while
condition|(
name|read
operator|+
name|s
operator|.
name|begin
operator|<
name|s
operator|.
name|end
condition|)
block|{
name|int
name|tmp
init|=
name|aLin
operator|.
name|readLine
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|read
operator|+=
name|tmp
expr_stmt|;
name|String
name|lineFeed
init|=
name|line
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
index|[]
name|parsed
init|=
name|lineFeed
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|harPath
operator|.
name|compareTo
argument_list|(
operator|new
name|Path
argument_list|(
name|parsed
index|[
literal|0
index|]
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// bingo!
name|retStr
operator|=
name|lineFeed
expr_stmt|;
break|break;
block|}
name|line
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|retStr
operator|!=
literal|null
condition|)
break|break;
block|}
try|try
block|{
name|aIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
comment|//do nothing
block|}
return|return
name|retStr
return|;
block|}
comment|// a single line parser for hadoop archives status
comment|// stored in a single line in the index files
comment|// the format is of the form
comment|// filename "dir"/"file" partFileName startIndex length
comment|//<space seperated children>
DECL|class|HarStatus
specifier|private
specifier|static
class|class
name|HarStatus
block|{
DECL|field|isDir
name|boolean
name|isDir
decl_stmt|;
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|children
name|List
argument_list|<
name|String
argument_list|>
name|children
decl_stmt|;
DECL|field|partName
name|String
name|partName
decl_stmt|;
DECL|field|startIndex
name|long
name|startIndex
decl_stmt|;
DECL|field|length
name|long
name|length
decl_stmt|;
DECL|method|HarStatus (String harString)
specifier|public
name|HarStatus
parameter_list|(
name|String
name|harString
parameter_list|)
block|{
name|String
index|[]
name|splits
init|=
name|harString
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|this
operator|.
name|name
operator|=
name|splits
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|isDir
operator|=
literal|"dir"
operator|.
name|equals
argument_list|(
name|splits
index|[
literal|1
index|]
argument_list|)
condition|?
literal|true
else|:
literal|false
expr_stmt|;
comment|// this is equal to "none" if its a directory
name|this
operator|.
name|partName
operator|=
name|splits
index|[
literal|2
index|]
expr_stmt|;
name|this
operator|.
name|startIndex
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splits
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|splits
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDir
condition|)
block|{
name|children
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
operator|.
name|add
argument_list|(
name|splits
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|isDir ()
specifier|public
name|boolean
name|isDir
parameter_list|()
block|{
return|return
name|isDir
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getChildren ()
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
DECL|method|getFileName ()
specifier|public
name|String
name|getFileName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getPartName ()
specifier|public
name|String
name|getPartName
parameter_list|()
block|{
return|return
name|partName
return|;
block|}
DECL|method|getStartIndex ()
specifier|public
name|long
name|getStartIndex
parameter_list|()
block|{
return|return
name|startIndex
return|;
block|}
DECL|method|getLength ()
specifier|public
name|long
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
block|}
comment|/**    * return the filestatus of files in har archive.    * The permission returned are that of the archive    * index files. The permissions are not persisted     * while creating a hadoop archive.    * @param f the path in har filesystem    * @return filestatus.    * @throws IOException    */
annotation|@
name|Override
DECL|method|getFileStatus (Path f)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|archiveStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|archiveIndex
argument_list|)
decl_stmt|;
comment|// get the fs DataInputStream for the underlying file
comment|// look up the index.
name|Path
name|p
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Path
name|harPath
init|=
name|getPathInHar
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|harPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid file name: "
operator|+
name|f
operator|+
literal|" in "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|String
name|readStr
init|=
name|fileStatusInIndex
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|readStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File: "
operator|+
name|f
operator|+
literal|" does not exist in "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|HarStatus
name|hstatus
init|=
literal|null
decl_stmt|;
name|hstatus
operator|=
operator|new
name|HarStatus
argument_list|(
name|readStr
argument_list|)
expr_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
name|hstatus
operator|.
name|isDir
argument_list|()
condition|?
literal|0
else|:
name|hstatus
operator|.
name|getLength
argument_list|()
argument_list|,
name|hstatus
operator|.
name|isDir
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|archiveStatus
operator|.
name|getReplication
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|archiveStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|,
name|archiveStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|makeRelative
argument_list|(
name|this
operator|.
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|hstatus
operator|.
name|name
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Returns a har input stream which fakes end of     * file. It reads the index files to get the part     * file name and the size and start of the file.    */
annotation|@
name|Override
DECL|method|open (Path f, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the fs DataInputStream for the underlying file
comment|// look up the index.
name|Path
name|p
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Path
name|harPath
init|=
name|getPathInHar
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|harPath
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid file name: "
operator|+
name|f
operator|+
literal|" in "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|String
name|readStr
init|=
name|fileStatusInIndex
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|readStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|+
literal|": not found in "
operator|+
name|archivePath
argument_list|)
throw|;
block|}
name|HarStatus
name|hstatus
init|=
operator|new
name|HarStatus
argument_list|(
name|readStr
argument_list|)
decl_stmt|;
comment|// we got it.. woo hooo!!!
if|if
condition|(
name|hstatus
operator|.
name|isDir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|f
operator|+
literal|" : not a file in "
operator|+
name|archivePath
argument_list|)
throw|;
block|}
return|return
operator|new
name|HarFSDataInputStream
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|archivePath
argument_list|,
name|hstatus
operator|.
name|getPartName
argument_list|()
argument_list|)
argument_list|,
name|hstatus
operator|.
name|getStartIndex
argument_list|()
argument_list|,
name|hstatus
operator|.
name|getLength
argument_list|()
argument_list|,
name|bufferSize
argument_list|)
return|;
block|}
comment|/*    * create throws an exception in Har filesystem.    * The archive once created cannot be changed.    */
DECL|method|create (Path f, int bufferSize)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: Create not allowed"
argument_list|)
throw|;
block|}
DECL|method|create (Path f, FsPermission permission, EnumSet<CreateFlag> flag, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flag
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: create not allowed."
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
comment|//this might already be closed
comment|// ignore
block|}
block|}
block|}
comment|/**    * Not implemented.    */
annotation|@
name|Override
DECL|method|setReplication (Path src, short replication)
specifier|public
name|boolean
name|setReplication
parameter_list|(
name|Path
name|src
parameter_list|,
name|short
name|replication
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: setreplication not allowed"
argument_list|)
throw|;
block|}
comment|/**    * Not implemented.    */
annotation|@
name|Override
DECL|method|delete (Path f, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: delete not allowed"
argument_list|)
throw|;
block|}
comment|/**    * liststatus returns the children of a directory     * after looking up the index files.    */
annotation|@
name|Override
DECL|method|listStatus (Path f)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
comment|//need to see if the file is an index in file
comment|//get the filestatus of the archive directory
comment|// we will create fake filestatuses to return
comment|// to the client
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
name|archiveStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|archiveIndex
argument_list|)
decl_stmt|;
name|Path
name|tmpPath
init|=
name|makeQualified
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|Path
name|harPath
init|=
name|getPathInHar
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|String
name|readStr
init|=
name|fileStatusInIndex
argument_list|(
name|harPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|readStr
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"File "
operator|+
name|f
operator|+
literal|" not found in "
operator|+
name|archivePath
argument_list|)
throw|;
block|}
name|HarStatus
name|hstatus
init|=
operator|new
name|HarStatus
argument_list|(
name|readStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hstatus
operator|.
name|isDir
argument_list|()
condition|)
name|statuses
operator|.
name|add
argument_list|(
operator|new
name|FileStatus
argument_list|(
name|hstatus
operator|.
name|getLength
argument_list|()
argument_list|,
name|hstatus
operator|.
name|isDir
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getReplication
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getAccessTime
argument_list|()
argument_list|,
operator|new
name|FsPermission
argument_list|(
name|archiveStatus
operator|.
name|getPermission
argument_list|()
argument_list|)
argument_list|,
name|archiveStatus
operator|.
name|getOwner
argument_list|()
argument_list|,
name|archiveStatus
operator|.
name|getGroup
argument_list|()
argument_list|,
name|makeRelative
argument_list|(
name|this
operator|.
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
name|hstatus
operator|.
name|name
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
for|for
control|(
name|String
name|child
range|:
name|hstatus
operator|.
name|children
control|)
block|{
name|FileStatus
name|tmp
init|=
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|child
argument_list|)
argument_list|)
decl_stmt|;
name|statuses
operator|.
name|add
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
return|return
name|statuses
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|statuses
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * return the top level archive path.    */
DECL|method|getHomeDirectory ()
specifier|public
name|Path
name|getHomeDirectory
parameter_list|()
block|{
return|return
operator|new
name|Path
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setWorkingDirectory (Path newDir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|newDir
parameter_list|)
block|{
comment|//does nothing.
block|}
comment|/**    * not implemented.    */
DECL|method|mkdirs (Path f, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: mkdirs not allowed"
argument_list|)
throw|;
block|}
comment|/**    * not implemented.    */
DECL|method|copyFromLocalFile (boolean delSrc, Path src, Path dst)
specifier|public
name|void
name|copyFromLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: copyfromlocalfile not allowed"
argument_list|)
throw|;
block|}
comment|/**    * copies the file in the har filesystem to a local file.    */
DECL|method|copyToLocalFile (boolean delSrc, Path src, Path dst)
specifier|public
name|void
name|copyToLocalFile
parameter_list|(
name|boolean
name|delSrc
parameter_list|,
name|Path
name|src
parameter_list|,
name|Path
name|dst
parameter_list|)
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|copy
argument_list|(
name|this
argument_list|,
name|src
argument_list|,
name|getLocal
argument_list|(
name|getConf
argument_list|()
argument_list|)
argument_list|,
name|dst
argument_list|,
literal|false
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * not implemented.    */
DECL|method|startLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|Path
name|startLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: startLocalOutput not allowed"
argument_list|)
throw|;
block|}
comment|/**    * not implemented.    */
DECL|method|completeLocalOutput (Path fsOutputFile, Path tmpLocalFile)
specifier|public
name|void
name|completeLocalOutput
parameter_list|(
name|Path
name|fsOutputFile
parameter_list|,
name|Path
name|tmpLocalFile
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: completeLocalOutput not allowed"
argument_list|)
throw|;
block|}
comment|/**    * not implemented.    */
DECL|method|setOwner (Path p, String username, String groupname)
specifier|public
name|void
name|setOwner
parameter_list|(
name|Path
name|p
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|groupname
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: setowner not allowed"
argument_list|)
throw|;
block|}
comment|/**    * Not implemented.    */
DECL|method|setPermission (Path p, FsPermission permisssion)
specifier|public
name|void
name|setPermission
parameter_list|(
name|Path
name|p
parameter_list|,
name|FsPermission
name|permisssion
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Har: setPermission not allowed"
argument_list|)
throw|;
block|}
comment|/**    * Hadoop archives input stream. This input stream fakes EOF     * since archive files are part of bigger part files.    */
DECL|class|HarFSDataInputStream
specifier|private
specifier|static
class|class
name|HarFSDataInputStream
extends|extends
name|FSDataInputStream
block|{
comment|/**      * Create an input stream that fakes all the reads/positions/seeking.      */
DECL|class|HarFsInputStream
specifier|private
specifier|static
class|class
name|HarFsInputStream
extends|extends
name|FSInputStream
block|{
DECL|field|position
DECL|field|start
DECL|field|end
specifier|private
name|long
name|position
decl_stmt|,
name|start
decl_stmt|,
name|end
decl_stmt|;
comment|//The underlying data input stream that the
comment|// underlying filesystem will return.
DECL|field|underLyingStream
specifier|private
name|FSDataInputStream
name|underLyingStream
decl_stmt|;
comment|//one byte buffer
DECL|field|oneBytebuff
specifier|private
name|byte
index|[]
name|oneBytebuff
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
DECL|method|HarFsInputStream (FileSystem fs, Path path, long start, long length, int bufferSize)
name|HarFsInputStream
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|underLyingStream
operator|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
name|underLyingStream
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
comment|// the start of this file in the part file
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
comment|// the position pointer in the part file
name|this
operator|.
name|position
operator|=
name|start
expr_stmt|;
comment|// the end pointer in the part file
name|this
operator|.
name|end
operator|=
name|start
operator|+
name|length
expr_stmt|;
block|}
DECL|method|available ()
specifier|public
specifier|synchronized
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|remaining
init|=
name|end
operator|-
name|underLyingStream
operator|.
name|getPos
argument_list|()
decl_stmt|;
if|if
condition|(
name|remaining
operator|>
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
return|return
operator|(
name|int
operator|)
name|remaining
return|;
block|}
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|underLyingStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//not implemented
annotation|@
name|Override
DECL|method|mark (int readLimit)
specifier|public
name|void
name|mark
parameter_list|(
name|int
name|readLimit
parameter_list|)
block|{
comment|// do nothing
block|}
comment|/**        * reset is not implemented        */
DECL|method|reset ()
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"reset not implemented."
argument_list|)
throw|;
block|}
DECL|method|read ()
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|read
argument_list|(
name|oneBytebuff
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
operator|(
name|ret
operator|<=
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
name|oneBytebuff
index|[
literal|0
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
DECL|method|read (byte[] b)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|ret
init|=
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
operator|-
literal|1
condition|)
block|{
name|position
operator|+=
name|ret
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**        *         */
DECL|method|read (byte[] b, int offset, int len)
specifier|public
specifier|synchronized
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|newlen
init|=
name|len
decl_stmt|;
name|int
name|ret
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|position
operator|+
name|len
operator|>
name|end
condition|)
block|{
name|newlen
operator|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|position
argument_list|)
expr_stmt|;
block|}
comment|// end case
if|if
condition|(
name|newlen
operator|==
literal|0
condition|)
return|return
name|ret
return|;
name|ret
operator|=
name|underLyingStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|newlen
argument_list|)
expr_stmt|;
name|position
operator|+=
name|ret
expr_stmt|;
return|return
name|ret
return|;
block|}
DECL|method|skip (long n)
specifier|public
specifier|synchronized
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|tmpN
init|=
name|n
decl_stmt|;
if|if
condition|(
name|tmpN
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|position
operator|+
name|tmpN
operator|>
name|end
condition|)
block|{
name|tmpN
operator|=
name|end
operator|-
name|position
expr_stmt|;
block|}
name|underLyingStream
operator|.
name|seek
argument_list|(
name|tmpN
operator|+
name|position
argument_list|)
expr_stmt|;
name|position
operator|+=
name|tmpN
expr_stmt|;
return|return
name|tmpN
return|;
block|}
return|return
operator|(
name|tmpN
operator|<
literal|0
operator|)
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
DECL|method|getPos ()
specifier|public
specifier|synchronized
name|long
name|getPos
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|(
name|position
operator|-
name|start
operator|)
return|;
block|}
DECL|method|seek (long pos)
specifier|public
specifier|synchronized
name|void
name|seek
parameter_list|(
name|long
name|pos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pos
operator|<
literal|0
operator|||
operator|(
name|start
operator|+
name|pos
operator|>
name|end
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to seek: EOF"
argument_list|)
throw|;
block|}
name|position
operator|=
name|start
operator|+
name|pos
expr_stmt|;
name|underLyingStream
operator|.
name|seek
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
DECL|method|seekToNewSource (long targetPos)
specifier|public
name|boolean
name|seekToNewSource
parameter_list|(
name|long
name|targetPos
parameter_list|)
throws|throws
name|IOException
block|{
comment|//do not need to implement this
comment|// hdfs in itself does seektonewsource
comment|// while reading.
return|return
literal|false
return|;
block|}
comment|/**        * implementing position readable.         */
DECL|method|read (long pos, byte[] b, int offset, int length)
specifier|public
name|int
name|read
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nlength
init|=
name|length
decl_stmt|;
if|if
condition|(
name|start
operator|+
name|nlength
operator|+
name|pos
operator|>
name|end
condition|)
block|{
name|nlength
operator|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
operator|(
name|start
operator|+
name|pos
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|underLyingStream
operator|.
name|read
argument_list|(
name|pos
operator|+
name|start
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|nlength
argument_list|)
return|;
block|}
comment|/**        * position readable again.        */
DECL|method|readFully (long pos, byte[] b, int offset, int length)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|+
name|length
operator|+
name|pos
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not enough bytes to read."
argument_list|)
throw|;
block|}
name|underLyingStream
operator|.
name|readFully
argument_list|(
name|pos
operator|+
name|start
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|readFully (long pos, byte[] b)
specifier|public
name|void
name|readFully
parameter_list|(
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|readFully
argument_list|(
name|pos
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * constructors for har input stream.      * @param fs the underlying filesystem      * @param p The path in the underlying filesystem      * @param start the start position in the part file      * @param length the length of valid data in the part file      * @param bufsize the buffer size      * @throws IOException      */
DECL|method|HarFSDataInputStream (FileSystem fs, Path p, long start, long length, int bufsize)
specifier|public
name|HarFSDataInputStream
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|,
name|int
name|bufsize
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|HarFsInputStream
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|bufsize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * constructor for har input stream.      * @param fs the underlying filesystem      * @param p the path in the underlying file system      * @param start the start position in the part file      * @param length the length of valid data in the part file.      * @throws IOException      */
DECL|method|HarFSDataInputStream (FileSystem fs, Path p, long start, long length)
specifier|public
name|HarFSDataInputStream
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|p
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|HarFsInputStream
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

