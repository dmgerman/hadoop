begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|FS_HOME_DIR_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
operator|.
name|FS_HOME_DIR_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|FS_DEFAULT_NAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|IO_FILE_BUFFER_SIZE_KEY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**   * This class is thin layer to manage the FS related keys in  * a configuration object.  * It provides convenience static method to set and get the keys from a   * a configuration.  *  */
end_comment

begin_class
DECL|class|FsConfig
specifier|final
class|class
name|FsConfig
block|{
DECL|method|FsConfig ()
specifier|private
name|FsConfig
parameter_list|()
block|{}
comment|// Configuration keys  and default values in the config file
comment|// TBD note we should deprecate the keys constants elsewhere
comment|// The Keys
DECL|field|FS_REPLICATION_FACTOR_KEY
specifier|static
specifier|final
name|String
name|FS_REPLICATION_FACTOR_KEY
init|=
literal|"dfs.replication"
decl_stmt|;
DECL|field|FS_BLOCK_SIZE_KEY
specifier|static
specifier|final
name|String
name|FS_BLOCK_SIZE_KEY
init|=
literal|"dfs.block.size"
decl_stmt|;
comment|// The default values
comment|// Default values of SERVER_DEFAULT(-1) implies use the ones from
comment|// the target file system where files are created.
DECL|field|FS_DEFAULT_REPLICATION_FACTOR
specifier|static
specifier|final
name|short
name|FS_DEFAULT_REPLICATION_FACTOR
init|=
literal|3
decl_stmt|;
DECL|field|FS_DEFAULT_BLOCK_SIZE
specifier|static
specifier|final
name|long
name|FS_DEFAULT_BLOCK_SIZE
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|method|getDefaultFsURI (final Configuration conf)
specifier|public
specifier|static
name|String
name|getDefaultFsURI
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|FS_DEFAULT_NAME_DEFAULT
argument_list|)
return|;
block|}
DECL|method|getHomeDir (final Configuration conf)
specifier|public
specifier|static
name|String
name|getHomeDir
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|FS_HOME_DIR_KEY
argument_list|,
name|FS_HOME_DIR_DEFAULT
argument_list|)
return|;
block|}
DECL|method|getDefaultReplicationFactor (final Configuration conf)
specifier|public
specifier|static
name|short
name|getDefaultReplicationFactor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
name|conf
operator|.
name|getInt
argument_list|(
name|FS_REPLICATION_FACTOR_KEY
argument_list|,
name|FS_DEFAULT_REPLICATION_FACTOR
argument_list|)
return|;
block|}
DECL|method|getDefaultBlockSize (final Configuration conf)
specifier|public
specifier|static
name|long
name|getDefaultBlockSize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getLong
argument_list|(
name|FS_BLOCK_SIZE_KEY
argument_list|,
name|FS_DEFAULT_BLOCK_SIZE
argument_list|)
return|;
block|}
DECL|method|getDefaultIOBuffersize (final Configuration conf)
specifier|public
specifier|static
name|int
name|getDefaultIOBuffersize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|IO_FILE_BUFFER_SIZE_DEFAULT
argument_list|)
return|;
block|}
DECL|method|getImplClass (URI uri, Configuration conf)
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getImplClass
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No scheme"
argument_list|)
throw|;
block|}
return|return
name|conf
operator|.
name|getClass
argument_list|(
literal|"fs."
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|".impl"
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**    * The Setters: see the note on the javdoc for the class above.    */
DECL|method|setDefaultFS (final Configuration conf, String uri)
specifier|public
specifier|static
name|void
name|setDefaultFS
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
DECL|method|setHomeDir (final Configuration conf, String path)
specifier|public
specifier|static
name|void
name|setHomeDir
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|FS_HOME_DIR_KEY
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultReplicationFactor (final Configuration conf, short rf)
specifier|public
specifier|static
name|void
name|setDefaultReplicationFactor
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|short
name|rf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|FS_REPLICATION_FACTOR_KEY
argument_list|,
name|rf
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultBlockSize (final Configuration conf, long bs)
specifier|public
specifier|static
name|void
name|setDefaultBlockSize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|long
name|bs
parameter_list|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|FS_BLOCK_SIZE_KEY
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
DECL|method|setDefaultIOBuffersize (final Configuration conf, int bs)
specifier|public
specifier|static
name|void
name|setDefaultIOBuffersize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|int
name|bs
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|IO_FILE_BUFFER_SIZE_KEY
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

