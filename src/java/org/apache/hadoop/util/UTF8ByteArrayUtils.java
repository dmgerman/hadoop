begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_class
DECL|class|UTF8ByteArrayUtils
specifier|public
class|class
name|UTF8ByteArrayUtils
block|{
comment|/**    * Find the first occurrence of the given byte b in a UTF-8 encoded string    * @param utf a byte array containing a UTF-8 encoded string    * @param start starting offset    * @param end ending position    * @param b the byte to find    * @return position that first byte occures otherwise -1    */
DECL|method|findByte (byte [] utf, int start, int end, byte b)
specifier|public
specifier|static
name|int
name|findByte
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|utf
index|[
name|i
index|]
operator|==
name|b
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Find the first occurrence of the given bytes b in a UTF-8 encoded string    * @param utf a byte array containing a UTF-8 encoded string    * @param start starting offset    * @param end ending position    * @param b the bytes to find    * @return position that first byte occures otherwise -1    */
DECL|method|findBytes (byte [] utf, int start, int end, byte[] b)
specifier|public
specifier|static
name|int
name|findBytes
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
block|{
name|int
name|matchEnd
init|=
name|end
operator|-
name|b
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<=
name|matchEnd
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|matched
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|b
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|utf
index|[
name|i
operator|+
name|j
index|]
operator|!=
name|b
index|[
name|j
index|]
condition|)
block|{
name|matched
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|matched
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Find the nth occurrence of the given byte b in a UTF-8 encoded string    * @param utf a byte array containing a UTF-8 encoded string    * @param start starting offset    * @param length the length of byte array    * @param b the byte to find    * @param n the desired occurrence of the given byte    * @return position that nth occurrence of the given byte if exists; otherwise -1    */
DECL|method|findNthByte (byte [] utf, int start, int length, byte b, int n)
specifier|public
specifier|static
name|int
name|findNthByte
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|byte
name|b
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|nextStart
init|=
name|start
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|pos
operator|=
name|findByte
argument_list|(
name|utf
argument_list|,
name|nextStart
argument_list|,
name|length
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|<
literal|0
condition|)
block|{
return|return
name|pos
return|;
block|}
name|nextStart
operator|=
name|pos
operator|+
literal|1
expr_stmt|;
block|}
return|return
name|pos
return|;
block|}
comment|/**    * Find the nth occurrence of the given byte b in a UTF-8 encoded string    * @param utf a byte array containing a UTF-8 encoded string    * @param b the byte to find    * @param n the desired occurrence of the given byte    * @return position that nth occurrence of the given byte if exists; otherwise -1    */
DECL|method|findNthByte (byte [] utf, byte b, int n)
specifier|public
specifier|static
name|int
name|findNthByte
parameter_list|(
name|byte
index|[]
name|utf
parameter_list|,
name|byte
name|b
parameter_list|,
name|int
name|n
parameter_list|)
block|{
return|return
name|findNthByte
argument_list|(
name|utf
argument_list|,
literal|0
argument_list|,
name|utf
operator|.
name|length
argument_list|,
name|b
argument_list|,
name|n
argument_list|)
return|;
block|}
block|}
end_class

end_unit

