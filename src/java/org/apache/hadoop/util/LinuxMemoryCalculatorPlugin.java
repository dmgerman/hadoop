begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Plugin to calculate virtual and physical memories on Linux systems.  */
end_comment

begin_class
DECL|class|LinuxMemoryCalculatorPlugin
specifier|public
class|class
name|LinuxMemoryCalculatorPlugin
extends|extends
name|MemoryCalculatorPlugin
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LinuxMemoryCalculatorPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * proc's meminfo virtual file has keys-values in the format    * "key:[ \t]*value[ \t]kB".    */
DECL|field|PROCFS_MEMFILE
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS_MEMFILE
init|=
literal|"/proc/meminfo"
decl_stmt|;
DECL|field|PROCFS_MEMFILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCFS_MEMFILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([a-zA-Z]*):[ \t]*([0-9]*)[ \t]kB"
argument_list|)
decl_stmt|;
comment|// We just need the values for the keys MemTotal and SwapTotal
DECL|field|MEMTOTAL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|MEMTOTAL_STRING
init|=
literal|"MemTotal"
decl_stmt|;
DECL|field|SWAPTOTAL_STRING
specifier|private
specifier|static
specifier|final
name|String
name|SWAPTOTAL_STRING
init|=
literal|"SwapTotal"
decl_stmt|;
DECL|field|ramSize
specifier|private
name|long
name|ramSize
init|=
literal|0
decl_stmt|;
DECL|field|swapSize
specifier|private
name|long
name|swapSize
init|=
literal|0
decl_stmt|;
DECL|field|readMemInfoFile
name|boolean
name|readMemInfoFile
init|=
literal|false
decl_stmt|;
DECL|method|readProcMemInfoFile ()
specifier|private
name|void
name|readProcMemInfoFile
parameter_list|()
block|{
if|if
condition|(
name|readMemInfoFile
condition|)
block|{
return|return;
block|}
comment|// Read "/proc/memInfo" file
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|FileReader
name|fReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|FileReader
argument_list|(
name|PROCFS_MEMFILE
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
comment|// shouldn't happen....
return|return;
block|}
name|Matcher
name|mat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|mat
operator|=
name|PROCFS_MEMFILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
expr_stmt|;
if|if
condition|(
name|mat
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|MEMTOTAL_STRING
argument_list|)
condition|)
block|{
name|ramSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mat
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|SWAPTOTAL_STRING
argument_list|)
condition|)
block|{
name|swapSize
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|mat
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
name|readMemInfoFile
operator|=
literal|true
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getPhysicalMemorySize ()
specifier|public
name|long
name|getPhysicalMemorySize
parameter_list|()
block|{
name|readProcMemInfoFile
argument_list|()
expr_stmt|;
return|return
name|ramSize
operator|*
literal|1024
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
DECL|method|getVirtualMemorySize ()
specifier|public
name|long
name|getVirtualMemorySize
parameter_list|()
block|{
name|readProcMemInfoFile
argument_list|()
expr_stmt|;
return|return
operator|(
name|ramSize
operator|+
name|swapSize
operator|)
operator|*
literal|1024
return|;
block|}
comment|/**    * Test the {@link LinuxMemoryCalculatorPlugin}    *     * @param args    */
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|LinuxMemoryCalculatorPlugin
name|plugin
init|=
operator|new
name|LinuxMemoryCalculatorPlugin
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Physical memory Size(bytes) : "
operator|+
name|plugin
operator|.
name|getPhysicalMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total Virtual memory Size(bytes) : "
operator|+
name|plugin
operator|.
name|getVirtualMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

