begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/** Provide an cyclic {@link Iterator} for a {@link NavigableMap}.  * The {@link Iterator} navigates the entries of the map  * according to the map's ordering.  * If the {@link Iterator} hits the last entry of the map,  * it will then continue from the first entry.  */
end_comment

begin_class
DECL|class|CyclicIteration
specifier|public
class|class
name|CyclicIteration
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|navigablemap
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|navigablemap
decl_stmt|;
DECL|field|tailmap
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|tailmap
decl_stmt|;
comment|/** Construct an {@link Iterable} object,    * so that an {@link Iterator} can be created      * for iterating the given {@link NavigableMap}.    * The iteration begins from the starting key exclusively.    */
DECL|method|CyclicIteration (NavigableMap<K, V> navigablemap, K startingkey)
specifier|public
name|CyclicIteration
parameter_list|(
name|NavigableMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|navigablemap
parameter_list|,
name|K
name|startingkey
parameter_list|)
block|{
if|if
condition|(
name|navigablemap
operator|==
literal|null
operator|||
name|navigablemap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|navigablemap
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tailmap
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|navigablemap
operator|=
name|navigablemap
expr_stmt|;
name|this
operator|.
name|tailmap
operator|=
name|navigablemap
operator|.
name|tailMap
argument_list|(
name|startingkey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
DECL|method|iterator ()
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|CyclicIterator
argument_list|()
return|;
block|}
comment|/** An {@link Iterator} for {@link CyclicIteration}. */
DECL|class|CyclicIterator
specifier|private
class|class
name|CyclicIterator
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
DECL|field|hasnext
specifier|private
name|boolean
name|hasnext
decl_stmt|;
DECL|field|i
specifier|private
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|i
decl_stmt|;
comment|/** The first entry to begin. */
DECL|field|first
specifier|private
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|first
decl_stmt|;
comment|/** The next entry. */
DECL|field|next
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
decl_stmt|;
DECL|method|CyclicIterator ()
specifier|private
name|CyclicIterator
parameter_list|()
block|{
name|hasnext
operator|=
name|navigablemap
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|hasnext
condition|)
block|{
name|i
operator|=
name|tailmap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|first
operator|=
name|nextEntry
argument_list|()
expr_stmt|;
name|next
operator|=
name|first
expr_stmt|;
block|}
else|else
block|{
name|i
operator|=
literal|null
expr_stmt|;
name|first
operator|=
literal|null
expr_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|nextEntry ()
specifier|private
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|nextEntry
parameter_list|()
block|{
if|if
condition|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|=
name|navigablemap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|i
operator|.
name|next
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|hasNext ()
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|hasnext
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|next ()
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasnext
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|curr
init|=
name|next
decl_stmt|;
name|next
operator|=
name|nextEntry
argument_list|()
expr_stmt|;
name|hasnext
operator|=
operator|!
name|next
operator|.
name|equals
argument_list|(
name|first
argument_list|)
expr_stmt|;
return|return
name|curr
return|;
block|}
comment|/** Not supported */
DECL|method|remove ()
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

