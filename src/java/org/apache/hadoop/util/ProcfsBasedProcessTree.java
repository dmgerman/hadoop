begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A Proc file-system based ProcessTree. Works only on Linux.  */
end_comment

begin_class
DECL|class|ProcfsBasedProcessTree
specifier|public
class|class
name|ProcfsBasedProcessTree
extends|extends
name|ProcessTree
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcfsBasedProcessTree
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PROCFS
specifier|private
specifier|static
specifier|final
name|String
name|PROCFS
init|=
literal|"/proc/"
decl_stmt|;
DECL|field|PROCFS_STAT_FILE_FORMAT
specifier|private
specifier|static
specifier|final
name|Pattern
name|PROCFS_STAT_FILE_FORMAT
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^([0-9-]+)\\s([^\\s]+)\\s[^\\s]\\s([0-9-]+)\\s([0-9-]+)\\s([0-9-]+)\\s([0-9-]+\\s){16}([0-9]+)(\\s[0-9-]+){16}"
argument_list|)
decl_stmt|;
DECL|field|pid
specifier|private
name|Integer
name|pid
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|setsidUsed
specifier|private
name|boolean
name|setsidUsed
init|=
literal|false
decl_stmt|;
DECL|field|sleeptimeBeforeSigkill
specifier|private
name|long
name|sleeptimeBeforeSigkill
init|=
name|DEFAULT_SLEEPTIME_BEFORE_SIGKILL
decl_stmt|;
DECL|field|processTree
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|ProcessInfo
argument_list|>
name|processTree
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|ProcfsBasedProcessTree (String pid)
specifier|public
name|ProcfsBasedProcessTree
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|this
argument_list|(
name|pid
argument_list|,
literal|false
argument_list|,
name|DEFAULT_SLEEPTIME_BEFORE_SIGKILL
argument_list|)
expr_stmt|;
block|}
DECL|method|ProcfsBasedProcessTree (String pid, boolean setsidUsed, long sigkillInterval)
specifier|public
name|ProcfsBasedProcessTree
parameter_list|(
name|String
name|pid
parameter_list|,
name|boolean
name|setsidUsed
parameter_list|,
name|long
name|sigkillInterval
parameter_list|)
block|{
name|this
operator|.
name|pid
operator|=
name|getValidPID
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|this
operator|.
name|setsidUsed
operator|=
name|setsidUsed
expr_stmt|;
name|sleeptimeBeforeSigkill
operator|=
name|sigkillInterval
expr_stmt|;
block|}
comment|/**    * Sets SIGKILL interval    * @deprecated Use {@link ProcfsBasedProcessTree#ProcfsBasedProcessTree(    *                  String, boolean, long)} instead    * @param interval The time to wait before sending SIGKILL    *                 after sending SIGTERM    */
annotation|@
name|Deprecated
DECL|method|setSigKillInterval (long interval)
specifier|public
name|void
name|setSigKillInterval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|sleeptimeBeforeSigkill
operator|=
name|interval
expr_stmt|;
block|}
comment|/**    * Checks if the ProcfsBasedProcessTree is available on this system.    *     * @return true if ProcfsBasedProcessTree is available. False otherwise.    */
DECL|method|isAvailable ()
specifier|public
specifier|static
name|boolean
name|isAvailable
parameter_list|()
block|{
try|try
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|osName
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ProcfsBasedProcessTree currently is supported only on "
operator|+
literal|"Linux."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get Operating System name. "
operator|+
name|se
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Get the process-tree with latest state. If the root-process is not alive,    * an empty tree will be returned.    *     * @return the process-tree with latest state.    */
DECL|method|getProcessTree ()
specifier|public
name|ProcfsBasedProcessTree
name|getProcessTree
parameter_list|()
block|{
if|if
condition|(
name|pid
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Get the list of processes
name|List
argument_list|<
name|Integer
argument_list|>
name|processList
init|=
name|getProcessList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|ProcessInfo
argument_list|>
name|allProcessInfo
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
name|processTree
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProcessInfo
name|me
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Integer
name|proc
range|:
name|processList
control|)
block|{
comment|// Get information for each process
name|ProcessInfo
name|pInfo
init|=
operator|new
name|ProcessInfo
argument_list|(
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
name|constructProcessInfo
argument_list|(
name|pInfo
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|allProcessInfo
operator|.
name|put
argument_list|(
name|proc
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|equals
argument_list|(
name|this
operator|.
name|pid
argument_list|)
condition|)
block|{
name|me
operator|=
name|pInfo
expr_stmt|;
comment|// cache 'me'
name|processTree
operator|.
name|put
argument_list|(
name|proc
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|me
operator|==
literal|null
condition|)
block|{
return|return
name|this
return|;
block|}
comment|// Add each process to its parent.
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|ProcessInfo
argument_list|>
name|entry
range|:
name|allProcessInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|pID
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|pID
operator|!=
literal|1
condition|)
block|{
name|ProcessInfo
name|pInfo
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ProcessInfo
name|parentPInfo
init|=
name|allProcessInfo
operator|.
name|get
argument_list|(
name|pInfo
operator|.
name|getPpid
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentPInfo
operator|!=
literal|null
condition|)
block|{
name|parentPInfo
operator|.
name|addChild
argument_list|(
name|pInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now start constructing the process-tree
name|LinkedList
argument_list|<
name|ProcessInfo
argument_list|>
name|pInfoQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
name|pInfoQueue
operator|.
name|addAll
argument_list|(
name|me
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pInfoQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProcessInfo
name|pInfo
init|=
name|pInfoQueue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|processTree
operator|.
name|containsKey
argument_list|(
name|pInfo
operator|.
name|getPid
argument_list|()
argument_list|)
condition|)
block|{
name|processTree
operator|.
name|put
argument_list|(
name|pInfo
operator|.
name|getPid
argument_list|()
argument_list|,
name|pInfo
argument_list|)
expr_stmt|;
block|}
name|pInfoQueue
operator|.
name|addAll
argument_list|(
name|pInfo
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
comment|// Log.debug the ProcfsBasedProcessTree
name|LOG
operator|.
name|debug
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**    * Is the root-process alive?    *     * @return true if the root-process is alive, false otherwise.    */
DECL|method|isAlive ()
specifier|public
name|boolean
name|isAlive
parameter_list|()
block|{
if|if
condition|(
name|pid
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|isAlive
argument_list|(
name|pid
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Is any of the subprocesses in the process-tree alive?    *     * @return true if any of the processes in the process-tree is    *           alive, false otherwise.    */
DECL|method|isAnyProcessInTreeAlive ()
specifier|public
name|boolean
name|isAnyProcessInTreeAlive
parameter_list|()
block|{
for|for
control|(
name|Integer
name|pId
range|:
name|processTree
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|isAlive
argument_list|(
name|pId
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/** Verify that the given process id is same as its process group id.    * @param pidStr Process id of the to-be-verified-process    */
DECL|method|assertPidPgrpidForMatch (String pidStr)
specifier|private
specifier|static
name|boolean
name|assertPidPgrpidForMatch
parameter_list|(
name|String
name|pidStr
parameter_list|)
block|{
name|Integer
name|pId
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pidStr
argument_list|)
decl_stmt|;
comment|// Get information for this process
name|ProcessInfo
name|pInfo
init|=
operator|new
name|ProcessInfo
argument_list|(
name|pId
argument_list|)
decl_stmt|;
name|pInfo
operator|=
name|constructProcessInfo
argument_list|(
name|pInfo
argument_list|)
expr_stmt|;
comment|//make sure that pId and its pgrpId match
if|if
condition|(
operator|!
name|pInfo
operator|.
name|getPgrpId
argument_list|()
operator|.
name|equals
argument_list|(
name|pId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected: Process with PID "
operator|+
name|pId
operator|+
literal|" is not a process group leader."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|pId
operator|+
literal|" is a process group leader, as expected."
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/** Make sure that the given pid is a process group leader and then    * destroy the process group.    * @param pgrpId   Process group id of to-be-killed-processes    * @param interval The time to wait before sending SIGKILL    *                 after sending SIGTERM    * @param inBackground Process is to be killed in the back ground with    *                     a separate thread    */
DECL|method|assertAndDestroyProcessGroup (String pgrpId, long interval, boolean inBackground)
specifier|public
specifier|static
name|void
name|assertAndDestroyProcessGroup
parameter_list|(
name|String
name|pgrpId
parameter_list|,
name|long
name|interval
parameter_list|,
name|boolean
name|inBackground
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Make sure that the pid given is a process group leader
if|if
condition|(
operator|!
name|assertPidPgrpidForMatch
argument_list|(
name|pgrpId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Process with PID "
operator|+
name|pgrpId
operator|+
literal|" is not a process group leader."
argument_list|)
throw|;
block|}
name|destroyProcessGroup
argument_list|(
name|pgrpId
argument_list|,
name|interval
argument_list|,
name|inBackground
argument_list|)
expr_stmt|;
block|}
comment|/**    * Destroy the process-tree.    */
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|destroy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Destroy the process-tree.    * @param inBackground Process is to be killed in the back ground with    *                     a separate thread    */
DECL|method|destroy (boolean inBackground)
specifier|public
name|void
name|destroy
parameter_list|(
name|boolean
name|inBackground
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Killing ProcfsBasedProcessTree of "
operator|+
name|pid
argument_list|)
expr_stmt|;
if|if
condition|(
name|pid
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isAlive
argument_list|(
name|pid
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSetsidAvailable
operator|&&
name|setsidUsed
condition|)
block|{
comment|// In this case, we know that pid got created using setsid. So kill the
comment|// whole processGroup.
try|try
block|{
name|assertAndDestroyProcessGroup
argument_list|(
name|pid
operator|.
name|toString
argument_list|()
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|,
name|inBackground
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//TODO: Destroy all the processes in the subtree in this case also.
comment|// For the time being, killing only the root process.
name|destroyProcess
argument_list|(
name|pid
operator|.
name|toString
argument_list|()
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|,
name|inBackground
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Get the cumulative virtual memory used by all the processes in the    * process-tree.    *     * @return cumulative virtual memory used by the process-tree in bytes.    */
DECL|method|getCumulativeVmem ()
specifier|public
name|long
name|getCumulativeVmem
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ProcessInfo
name|p
range|:
name|processTree
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|total
operator|+=
name|p
operator|.
name|getVmem
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|total
return|;
block|}
DECL|method|getValidPID (String pid)
specifier|private
specifier|static
name|Integer
name|getValidPID
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|Integer
name|retPid
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|retPid
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pid
argument_list|)
expr_stmt|;
if|if
condition|(
name|retPid
operator|<=
literal|0
condition|)
block|{
name|retPid
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|retPid
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|retPid
return|;
block|}
comment|/**    * Get the list of all processes in the system.    */
DECL|method|getProcessList ()
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|getProcessList
parameter_list|()
block|{
name|String
index|[]
name|processDirs
init|=
operator|(
operator|new
name|File
argument_list|(
name|PROCFS
argument_list|)
operator|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|processList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dir
range|:
name|processDirs
control|)
block|{
try|try
block|{
name|int
name|pd
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|new
name|File
argument_list|(
name|PROCFS
operator|+
name|dir
argument_list|)
operator|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|processList
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|pd
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|n
parameter_list|)
block|{
comment|// skip this directory
block|}
catch|catch
parameter_list|(
name|SecurityException
name|s
parameter_list|)
block|{
comment|// skip this process
block|}
block|}
return|return
name|processList
return|;
block|}
comment|/**    *     * Construct the ProcessInfo using the process' PID and procfs and return the    * same. Returns null on failing to read from procfs,    */
DECL|method|constructProcessInfo (ProcessInfo pinfo)
specifier|private
specifier|static
name|ProcessInfo
name|constructProcessInfo
parameter_list|(
name|ProcessInfo
name|pinfo
parameter_list|)
block|{
name|ProcessInfo
name|ret
init|=
literal|null
decl_stmt|;
comment|// Read "/proc/<pid>/stat" file
name|BufferedReader
name|in
init|=
literal|null
decl_stmt|;
name|FileReader
name|fReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fReader
operator|=
operator|new
name|FileReader
argument_list|(
name|PROCFS
operator|+
name|pinfo
operator|.
name|getPid
argument_list|()
operator|+
literal|"/stat"
argument_list|)
expr_stmt|;
name|in
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fReader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|f
parameter_list|)
block|{
comment|// The process vanished in the interim!
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|pinfo
expr_stmt|;
try|try
block|{
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
comment|// only one line
name|Matcher
name|m
init|=
name|PROCFS_STAT_FILE_FORMAT
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|boolean
name|mat
init|=
name|m
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|mat
condition|)
block|{
comment|// Set ( name ) ( ppid ) ( pgrpId ) (session ) (vsize )
name|pinfo
operator|.
name|update
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error reading the stream "
operator|+
name|io
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
comment|// Close the streams
try|try
block|{
if|if
condition|(
name|fReader
operator|!=
literal|null
condition|)
block|{
name|fReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|in
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing the stream "
operator|+
name|fReader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Returns a string printing PIDs of process present in the    * ProcfsBasedProcessTree. Output format : [pid pid ..]    */
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|pTree
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"[ "
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|p
range|:
name|processTree
operator|.
name|keySet
argument_list|()
control|)
block|{
name|pTree
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|pTree
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|pTree
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pTree
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/**    *     * Class containing information of a process.    *     */
DECL|class|ProcessInfo
specifier|private
specifier|static
class|class
name|ProcessInfo
block|{
DECL|field|pid
specifier|private
name|Integer
name|pid
decl_stmt|;
comment|// process-id
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
comment|// command name
DECL|field|pgrpId
specifier|private
name|Integer
name|pgrpId
decl_stmt|;
comment|// process group-id
DECL|field|ppid
specifier|private
name|Integer
name|ppid
decl_stmt|;
comment|// parent process-id
DECL|field|sessionId
specifier|private
name|Integer
name|sessionId
decl_stmt|;
comment|// session-id
DECL|field|vmem
specifier|private
name|Long
name|vmem
decl_stmt|;
comment|// virtual memory usage
DECL|field|children
specifier|private
name|List
argument_list|<
name|ProcessInfo
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|ProcessInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// list of children
DECL|method|ProcessInfo (int pid)
specifier|public
name|ProcessInfo
parameter_list|(
name|int
name|pid
parameter_list|)
block|{
name|this
operator|.
name|pid
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
DECL|method|getPid ()
specifier|public
name|Integer
name|getPid
parameter_list|()
block|{
return|return
name|pid
return|;
block|}
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|getPgrpId ()
specifier|public
name|Integer
name|getPgrpId
parameter_list|()
block|{
return|return
name|pgrpId
return|;
block|}
DECL|method|getPpid ()
specifier|public
name|Integer
name|getPpid
parameter_list|()
block|{
return|return
name|ppid
return|;
block|}
DECL|method|getSessionId ()
specifier|public
name|Integer
name|getSessionId
parameter_list|()
block|{
return|return
name|sessionId
return|;
block|}
DECL|method|getVmem ()
specifier|public
name|Long
name|getVmem
parameter_list|()
block|{
return|return
name|vmem
return|;
block|}
DECL|method|isParent (ProcessInfo p)
specifier|public
name|boolean
name|isParent
parameter_list|(
name|ProcessInfo
name|p
parameter_list|)
block|{
if|if
condition|(
name|pid
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPpid
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|update (String name, Integer ppid, Integer pgrpId, Integer sessionId, Long vmem)
specifier|public
name|void
name|update
parameter_list|(
name|String
name|name
parameter_list|,
name|Integer
name|ppid
parameter_list|,
name|Integer
name|pgrpId
parameter_list|,
name|Integer
name|sessionId
parameter_list|,
name|Long
name|vmem
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|ppid
operator|=
name|ppid
expr_stmt|;
name|this
operator|.
name|pgrpId
operator|=
name|pgrpId
expr_stmt|;
name|this
operator|.
name|sessionId
operator|=
name|sessionId
expr_stmt|;
name|this
operator|.
name|vmem
operator|=
name|vmem
expr_stmt|;
block|}
DECL|method|addChild (ProcessInfo p)
specifier|public
name|boolean
name|addChild
parameter_list|(
name|ProcessInfo
name|p
parameter_list|)
block|{
return|return
name|children
operator|.
name|add
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|getChildren ()
specifier|public
name|List
argument_list|<
name|ProcessInfo
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|children
return|;
block|}
block|}
block|}
end_class

end_unit

