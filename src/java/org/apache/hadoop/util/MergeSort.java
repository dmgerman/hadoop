begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_comment
comment|/** An implementation of the core algorithm of MergeSort. */
end_comment

begin_class
DECL|class|MergeSort
specifier|public
class|class
name|MergeSort
block|{
comment|//Reusable IntWritables
DECL|field|I
name|IntWritable
name|I
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|J
name|IntWritable
name|J
init|=
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//the comparator that the algo should use
DECL|field|comparator
specifier|private
name|Comparator
argument_list|<
name|IntWritable
argument_list|>
name|comparator
decl_stmt|;
DECL|method|MergeSort (Comparator<IntWritable> comparator)
specifier|public
name|MergeSort
parameter_list|(
name|Comparator
argument_list|<
name|IntWritable
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
DECL|method|mergeSort (int src[], int dest[], int low, int high)
specifier|public
name|void
name|mergeSort
parameter_list|(
name|int
name|src
index|[]
parameter_list|,
name|int
name|dest
index|[]
parameter_list|,
name|int
name|low
parameter_list|,
name|int
name|high
parameter_list|)
block|{
name|int
name|length
init|=
name|high
operator|-
name|low
decl_stmt|;
comment|// Insertion sort on smallest arrays
if|if
condition|(
name|length
operator|<
literal|7
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|low
init|;
name|i
operator|<
name|high
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|>
name|low
condition|;
name|j
operator|--
control|)
block|{
name|I
operator|.
name|set
argument_list|(
name|dest
index|[
name|j
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|J
operator|.
name|set
argument_list|(
name|dest
index|[
name|j
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|I
argument_list|,
name|J
argument_list|)
operator|>
literal|0
condition|)
name|swap
argument_list|(
name|dest
argument_list|,
name|j
argument_list|,
name|j
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
comment|// Recursively sort halves of dest into src
name|int
name|mid
init|=
operator|(
name|low
operator|+
name|high
operator|)
operator|>>>
literal|1
decl_stmt|;
name|mergeSort
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|low
argument_list|,
name|mid
argument_list|)
expr_stmt|;
name|mergeSort
argument_list|(
name|dest
argument_list|,
name|src
argument_list|,
name|mid
argument_list|,
name|high
argument_list|)
expr_stmt|;
name|I
operator|.
name|set
argument_list|(
name|src
index|[
name|mid
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|J
operator|.
name|set
argument_list|(
name|src
index|[
name|mid
index|]
argument_list|)
expr_stmt|;
comment|// If list is already sorted, just copy from src to dest.  This is an
comment|// optimization that results in faster sorts for nearly ordered lists.
if|if
condition|(
name|comparator
operator|.
name|compare
argument_list|(
name|I
argument_list|,
name|J
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|low
argument_list|,
name|dest
argument_list|,
name|low
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Merge sorted halves (now in src) into dest
for|for
control|(
name|int
name|i
init|=
name|low
init|,
name|p
init|=
name|low
init|,
name|q
init|=
name|mid
init|;
name|i
operator|<
name|high
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|q
operator|<
name|high
operator|&&
name|p
operator|<
name|mid
condition|)
block|{
name|I
operator|.
name|set
argument_list|(
name|src
index|[
name|p
index|]
argument_list|)
expr_stmt|;
name|J
operator|.
name|set
argument_list|(
name|src
index|[
name|q
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|>=
name|high
operator|||
name|p
operator|<
name|mid
operator|&&
name|comparator
operator|.
name|compare
argument_list|(
name|I
argument_list|,
name|J
argument_list|)
operator|<=
literal|0
condition|)
name|dest
index|[
name|i
index|]
operator|=
name|src
index|[
name|p
operator|++
index|]
expr_stmt|;
else|else
name|dest
index|[
name|i
index|]
operator|=
name|src
index|[
name|q
operator|++
index|]
expr_stmt|;
block|}
block|}
DECL|method|swap (int x[], int a, int b)
specifier|private
name|void
name|swap
parameter_list|(
name|int
name|x
index|[]
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|int
name|t
init|=
name|x
index|[
name|a
index|]
decl_stmt|;
name|x
index|[
name|a
index|]
operator|=
name|x
index|[
name|b
index|]
expr_stmt|;
name|x
index|[
name|b
index|]
operator|=
name|t
expr_stmt|;
block|}
block|}
end_class

end_unit

