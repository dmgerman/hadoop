begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/** Utility to assist with generation of progress reports.  Applications build  * a hierarchy of {@link Progress} instances, each modelling a phase of  * execution.  The root is constructed with {@link #Progress()}.  Nodes for  * sub-phases are created by calling {@link #addPhase()}.  */
end_comment

begin_class
DECL|class|Progress
specifier|public
class|class
name|Progress
block|{
DECL|field|status
specifier|private
name|String
name|status
init|=
literal|""
decl_stmt|;
DECL|field|progress
specifier|private
name|float
name|progress
decl_stmt|;
DECL|field|currentPhase
specifier|private
name|int
name|currentPhase
decl_stmt|;
DECL|field|phases
specifier|private
name|ArrayList
argument_list|<
name|Progress
argument_list|>
name|phases
init|=
operator|new
name|ArrayList
argument_list|<
name|Progress
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|parent
specifier|private
name|Progress
name|parent
decl_stmt|;
DECL|field|progressPerPhase
specifier|private
name|float
name|progressPerPhase
decl_stmt|;
comment|/** Creates a new root node. */
DECL|method|Progress ()
specifier|public
name|Progress
parameter_list|()
block|{}
comment|/** Adds a named node to the tree. */
DECL|method|addPhase (String status)
specifier|public
name|Progress
name|addPhase
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|Progress
name|phase
init|=
name|addPhase
argument_list|()
decl_stmt|;
name|phase
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
return|return
name|phase
return|;
block|}
comment|/** Adds a node to the tree. */
DECL|method|addPhase ()
specifier|public
specifier|synchronized
name|Progress
name|addPhase
parameter_list|()
block|{
name|Progress
name|phase
init|=
operator|new
name|Progress
argument_list|()
decl_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|phase
argument_list|)
expr_stmt|;
name|phase
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|progressPerPhase
operator|=
literal|1.0f
operator|/
operator|(
name|float
operator|)
name|phases
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|phase
return|;
block|}
DECL|method|getParent ()
specifier|synchronized
name|Progress
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
DECL|method|setParent (Progress parent)
specifier|synchronized
name|void
name|setParent
parameter_list|(
name|Progress
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/** Called during execution to move to the next phase at this level in the    * tree. */
DECL|method|startNextPhase ()
specifier|public
specifier|synchronized
name|void
name|startNextPhase
parameter_list|()
block|{
name|currentPhase
operator|++
expr_stmt|;
block|}
comment|/** Returns the current sub-node executing. */
DECL|method|phase ()
specifier|public
specifier|synchronized
name|Progress
name|phase
parameter_list|()
block|{
return|return
name|phases
operator|.
name|get
argument_list|(
name|currentPhase
argument_list|)
return|;
block|}
comment|/** Completes this node, moving the parent node to its next child. */
DECL|method|complete ()
specifier|public
name|void
name|complete
parameter_list|()
block|{
comment|// we have to traverse up to our parent, so be careful about locking.
name|Progress
name|myParent
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|progress
operator|=
literal|1.0f
expr_stmt|;
name|myParent
operator|=
name|parent
expr_stmt|;
block|}
if|if
condition|(
name|myParent
operator|!=
literal|null
condition|)
block|{
comment|// this will synchronize on the parent, so we make sure we release
comment|// our lock before getting the parent's, since we're traversing
comment|// against the normal traversal direction used by get() or toString().
comment|// We don't need transactional semantics, so we're OK doing this.
name|myParent
operator|.
name|startNextPhase
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Called during execution on a leaf node to set its progress. */
DECL|method|set (float progress)
specifier|public
specifier|synchronized
name|void
name|set
parameter_list|(
name|float
name|progress
parameter_list|)
block|{
name|this
operator|.
name|progress
operator|=
name|progress
expr_stmt|;
block|}
comment|/** Returns the overall progress of the root. */
comment|// this method probably does not need to be synchronized as getINternal() is synchronized
comment|// and the node's parent never changes. Still, it doesn't hurt.
DECL|method|get ()
specifier|public
specifier|synchronized
name|float
name|get
parameter_list|()
block|{
name|Progress
name|node
init|=
name|this
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// find the root
name|node
operator|=
name|parent
expr_stmt|;
block|}
return|return
name|node
operator|.
name|getInternal
argument_list|()
return|;
block|}
comment|/** Computes progress in this node. */
DECL|method|getInternal ()
specifier|private
specifier|synchronized
name|float
name|getInternal
parameter_list|()
block|{
name|int
name|phaseCount
init|=
name|phases
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|phaseCount
operator|!=
literal|0
condition|)
block|{
name|float
name|subProgress
init|=
name|currentPhase
operator|<
name|phaseCount
condition|?
name|phase
argument_list|()
operator|.
name|getInternal
argument_list|()
else|:
literal|0.0f
decl_stmt|;
return|return
name|progressPerPhase
operator|*
operator|(
name|currentPhase
operator|+
name|subProgress
operator|)
return|;
block|}
else|else
block|{
return|return
name|progress
return|;
block|}
block|}
DECL|method|setStatus (String status)
specifier|public
specifier|synchronized
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|toString
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toString (StringBuffer buffer)
specifier|private
specifier|synchronized
name|void
name|toString
parameter_list|(
name|StringBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|phases
operator|.
name|size
argument_list|()
operator|!=
literal|0
operator|&&
name|currentPhase
operator|<
name|phases
operator|.
name|size
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
expr_stmt|;
name|phase
argument_list|()
operator|.
name|toString
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

