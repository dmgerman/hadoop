begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * An implementation of the core algorithm of QuickSort.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|QuickSort
specifier|public
specifier|final
class|class
name|QuickSort
implements|implements
name|IndexedSorter
block|{
DECL|field|alt
specifier|private
specifier|static
specifier|final
name|IndexedSorter
name|alt
init|=
operator|new
name|HeapSort
argument_list|()
decl_stmt|;
DECL|method|QuickSort ()
specifier|public
name|QuickSort
parameter_list|()
block|{ }
DECL|method|fix (IndexedSortable s, int p, int r)
specifier|private
specifier|static
name|void
name|fix
parameter_list|(
name|IndexedSortable
name|s
parameter_list|,
name|int
name|p
parameter_list|,
name|int
name|r
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|compare
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|swap
argument_list|(
name|p
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Deepest recursion before giving up and doing a heapsort.    * Returns 2 * ceil(log(n)).    */
DECL|method|getMaxDepth (int x)
specifier|protected
specifier|static
name|int
name|getMaxDepth
parameter_list|(
name|int
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|<=
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Undefined for "
operator|+
name|x
argument_list|)
throw|;
return|return
operator|(
literal|32
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|x
operator|-
literal|1
argument_list|)
operator|)
operator|<<
literal|2
return|;
block|}
comment|/**    * Sort the given range of items using quick sort.    * {@inheritDoc} If the recursion depth falls below {@link #getMaxDepth},    * then switch to {@link HeapSort}.    */
DECL|method|sort (IndexedSortable s, int p, int r)
specifier|public
name|void
name|sort
parameter_list|(
name|IndexedSortable
name|s
parameter_list|,
name|int
name|p
parameter_list|,
name|int
name|r
parameter_list|)
block|{
name|sort
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
DECL|method|sort (final IndexedSortable s, int p, int r, final Progressable rep)
specifier|public
name|void
name|sort
parameter_list|(
specifier|final
name|IndexedSortable
name|s
parameter_list|,
name|int
name|p
parameter_list|,
name|int
name|r
parameter_list|,
specifier|final
name|Progressable
name|rep
parameter_list|)
block|{
name|sortInternal
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|r
argument_list|,
name|rep
argument_list|,
name|getMaxDepth
argument_list|(
name|r
operator|-
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sortInternal (final IndexedSortable s, int p, int r, final Progressable rep, int depth)
specifier|private
specifier|static
name|void
name|sortInternal
parameter_list|(
specifier|final
name|IndexedSortable
name|s
parameter_list|,
name|int
name|p
parameter_list|,
name|int
name|r
parameter_list|,
specifier|final
name|Progressable
name|rep
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|rep
condition|)
block|{
name|rep
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|r
operator|-
name|p
operator|<
literal|13
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|p
init|;
name|i
operator|<
name|r
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|>
name|p
operator|&&
name|s
operator|.
name|compare
argument_list|(
name|j
operator|-
literal|1
argument_list|,
name|j
argument_list|)
operator|>
literal|0
condition|;
operator|--
name|j
control|)
block|{
name|s
operator|.
name|swap
argument_list|(
name|j
argument_list|,
name|j
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
if|if
condition|(
operator|--
name|depth
operator|<
literal|0
condition|)
block|{
comment|// give up
name|alt
operator|.
name|sort
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|r
argument_list|,
name|rep
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// select, move pivot into first position
name|fix
argument_list|(
name|s
argument_list|,
operator|(
name|p
operator|+
name|r
operator|)
operator|>>>
literal|1
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|fix
argument_list|(
name|s
argument_list|,
operator|(
name|p
operator|+
name|r
operator|)
operator|>>>
literal|1
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fix
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|r
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Divide
name|int
name|i
init|=
name|p
decl_stmt|;
name|int
name|j
init|=
name|r
decl_stmt|;
name|int
name|ll
init|=
name|p
decl_stmt|;
name|int
name|rr
init|=
name|r
decl_stmt|;
name|int
name|cr
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
while|while
condition|(
operator|++
name|i
operator|<
name|j
condition|)
block|{
if|if
condition|(
operator|(
name|cr
operator|=
name|s
operator|.
name|compare
argument_list|(
name|i
argument_list|,
name|p
argument_list|)
operator|)
operator|>
literal|0
condition|)
break|break;
if|if
condition|(
literal|0
operator|==
name|cr
operator|&&
operator|++
name|ll
operator|!=
name|i
condition|)
block|{
name|s
operator|.
name|swap
argument_list|(
name|ll
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|--
name|j
operator|>
name|i
condition|)
block|{
if|if
condition|(
operator|(
name|cr
operator|=
name|s
operator|.
name|compare
argument_list|(
name|p
argument_list|,
name|j
argument_list|)
operator|)
operator|>
literal|0
condition|)
break|break;
if|if
condition|(
literal|0
operator|==
name|cr
operator|&&
operator|--
name|rr
operator|!=
name|j
condition|)
block|{
name|s
operator|.
name|swap
argument_list|(
name|rr
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|<
name|j
condition|)
name|s
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
else|else
break|break;
block|}
name|j
operator|=
name|i
expr_stmt|;
comment|// swap pivot- and all eq values- into position
while|while
condition|(
name|ll
operator|>=
name|p
condition|)
block|{
name|s
operator|.
name|swap
argument_list|(
name|ll
operator|--
argument_list|,
operator|--
name|i
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rr
operator|<
name|r
condition|)
block|{
name|s
operator|.
name|swap
argument_list|(
name|rr
operator|++
argument_list|,
name|j
operator|++
argument_list|)
expr_stmt|;
block|}
comment|// Conquer
comment|// Recurse on smaller interval first to keep stack shallow
assert|assert
name|i
operator|!=
name|j
assert|;
if|if
condition|(
name|i
operator|-
name|p
operator|<
name|r
operator|-
name|j
condition|)
block|{
name|sortInternal
argument_list|(
name|s
argument_list|,
name|p
argument_list|,
name|i
argument_list|,
name|rep
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|p
operator|=
name|j
expr_stmt|;
block|}
else|else
block|{
name|sortInternal
argument_list|(
name|s
argument_list|,
name|j
argument_list|,
name|r
argument_list|,
name|rep
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|r
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

