begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ExitCodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Shell
operator|.
name|ShellCommandExecutor
import|;
end_import

begin_comment
comment|/**   * Process tree related operations  */
end_comment

begin_class
DECL|class|ProcessTree
specifier|public
class|class
name|ProcessTree
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProcessTree
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_SLEEPTIME_BEFORE_SIGKILL
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_SLEEPTIME_BEFORE_SIGKILL
init|=
literal|5000L
decl_stmt|;
DECL|field|isSetsidAvailable
specifier|public
specifier|static
specifier|final
name|boolean
name|isSetsidAvailable
init|=
name|isSetsidSupported
argument_list|()
decl_stmt|;
DECL|method|isSetsidSupported ()
specifier|private
specifier|static
name|boolean
name|isSetsidSupported
parameter_list|()
block|{
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
name|boolean
name|setsidSupported
init|=
literal|true
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"setsid"
block|,
literal|"bash"
block|,
literal|"-c"
block|,
literal|"echo $$"
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"setsid is not available on this machine. So not using it."
argument_list|)
expr_stmt|;
name|setsidSupported
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
comment|// handle the exit code
name|LOG
operator|.
name|info
argument_list|(
literal|"setsid exited with exit code "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|setsidSupported
return|;
block|}
block|}
comment|/**    * Destroy the process-tree.    * @param pid process id of the root process of the subtree of processes    *            to be killed    * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILL    *                               after sending SIGTERM    * @param isProcessGroup pid is a process group leader or not    * @param inBackground Process is to be killed in the back ground with    *                     a separate thread    */
DECL|method|destroy (String pid, long sleeptimeBeforeSigkill, boolean isProcessGroup, boolean inBackground)
specifier|public
specifier|static
name|void
name|destroy
parameter_list|(
name|String
name|pid
parameter_list|,
name|long
name|sleeptimeBeforeSigkill
parameter_list|,
name|boolean
name|isProcessGroup
parameter_list|,
name|boolean
name|inBackground
parameter_list|)
block|{
if|if
condition|(
name|isProcessGroup
condition|)
block|{
name|destroyProcessGroup
argument_list|(
name|pid
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|,
name|inBackground
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: Destroy all the processes in the subtree in this case also.
comment|// For the time being, killing only the root process.
name|destroyProcess
argument_list|(
name|pid
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|,
name|inBackground
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Destroy the process.    * @param pid Process id of to-be-killed-process    * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILL    *                               after sending SIGTERM    * @param inBackground Process is to be killed in the back ground with    *                     a separate thread    */
DECL|method|destroyProcess (String pid, long sleeptimeBeforeSigkill, boolean inBackground)
specifier|protected
specifier|static
name|void
name|destroyProcess
parameter_list|(
name|String
name|pid
parameter_list|,
name|long
name|sleeptimeBeforeSigkill
parameter_list|,
name|boolean
name|inBackground
parameter_list|)
block|{
name|terminateProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|sigKill
argument_list|(
name|pid
argument_list|,
literal|false
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|,
name|inBackground
argument_list|)
expr_stmt|;
block|}
comment|/** Destroy the process group.    * @param pgrpId Process group id of to-be-killed-processes    * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILL    *                               after sending SIGTERM    * @param inBackground Process group is to be killed in the back ground with    *                     a separate thread    */
DECL|method|destroyProcessGroup (String pgrpId, long sleeptimeBeforeSigkill, boolean inBackground)
specifier|protected
specifier|static
name|void
name|destroyProcessGroup
parameter_list|(
name|String
name|pgrpId
parameter_list|,
name|long
name|sleeptimeBeforeSigkill
parameter_list|,
name|boolean
name|inBackground
parameter_list|)
block|{
name|terminateProcessGroup
argument_list|(
name|pgrpId
argument_list|)
expr_stmt|;
name|sigKill
argument_list|(
name|pgrpId
argument_list|,
literal|true
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|,
name|inBackground
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sends terminate signal to the process, allowing it to gracefully exit.    *     * @param pid pid of the process to be sent SIGTERM    */
DECL|method|terminateProcess (String pid)
specifier|public
specifier|static
name|void
name|terminateProcess
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"kill"
block|,
name|pid
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error executing shell command "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing process "
operator|+
name|pid
operator|+
literal|" with SIGTERM. Exit code "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sends terminate signal to all the process belonging to the passed process    * group, allowing the group to gracefully exit.    *     * @param pgrpId process group id    */
DECL|method|terminateProcessGroup (String pgrpId)
specifier|public
specifier|static
name|void
name|terminateProcessGroup
parameter_list|(
name|String
name|pgrpId
parameter_list|)
block|{
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"kill"
block|,
literal|"--"
block|,
literal|"-"
operator|+
name|pgrpId
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error executing shell command "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing all processes in the process group "
operator|+
name|pgrpId
operator|+
literal|" with SIGTERM. Exit code "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Kills the process(OR process group) by sending the signal SIGKILL    * in the current thread    * @param pid Process id(OR process group id) of to-be-deleted-process    * @param isProcessGroup Is pid a process group id of to-be-deleted-processes    * @param sleepTimeBeforeSigKill wait time before sending SIGKILL after    *  sending SIGTERM    */
DECL|method|sigKillInCurrentThread (String pid, boolean isProcessGroup, long sleepTimeBeforeSigKill)
specifier|private
specifier|static
name|void
name|sigKillInCurrentThread
parameter_list|(
name|String
name|pid
parameter_list|,
name|boolean
name|isProcessGroup
parameter_list|,
name|long
name|sleepTimeBeforeSigKill
parameter_list|)
block|{
comment|// Kill the subprocesses of root process(even if the root process is not
comment|// alive) if process group is to be killed.
if|if
condition|(
name|isProcessGroup
operator|||
name|ProcessTree
operator|.
name|isAlive
argument_list|(
name|pid
argument_list|)
condition|)
block|{
try|try
block|{
comment|// Sleep for some time before sending SIGKILL
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTimeBeforeSigKill
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Thread sleep is interrupted."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isProcessGroup
condition|)
block|{
name|killProcessGroup
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|killProcess
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Kills the process(OR process group) by sending the signal SIGKILL    * @param pid Process id(OR process group id) of to-be-deleted-process    * @param isProcessGroup Is pid a process group id of to-be-deleted-processes    * @param sleeptimeBeforeSigkill The time to wait before sending SIGKILL    *                               after sending SIGTERM    * @param inBackground Process is to be killed in the back ground with    *                     a separate thread    */
DECL|method|sigKill (String pid, boolean isProcessGroup, long sleeptimeBeforeSigkill, boolean inBackground)
specifier|private
specifier|static
name|void
name|sigKill
parameter_list|(
name|String
name|pid
parameter_list|,
name|boolean
name|isProcessGroup
parameter_list|,
name|long
name|sleeptimeBeforeSigkill
parameter_list|,
name|boolean
name|inBackground
parameter_list|)
block|{
if|if
condition|(
name|inBackground
condition|)
block|{
comment|// use a separate thread for killing
name|SigKillThread
name|sigKillThread
init|=
operator|new
name|SigKillThread
argument_list|(
name|pid
argument_list|,
name|isProcessGroup
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|)
decl_stmt|;
name|sigKillThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sigKillThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sigKillInCurrentThread
argument_list|(
name|pid
argument_list|,
name|isProcessGroup
argument_list|,
name|sleeptimeBeforeSigkill
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sends kill signal to process, forcefully terminating the process.    *     * @param pid process id    */
DECL|method|killProcess (String pid)
specifier|public
specifier|static
name|void
name|killProcess
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
comment|//If process tree is not alive then return immediately.
if|if
condition|(
operator|!
name|ProcessTree
operator|.
name|isAlive
argument_list|(
name|pid
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|args
init|=
block|{
literal|"kill"
block|,
literal|"-9"
block|,
name|pid
block|}
decl_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error sending SIGKILL to process "
operator|+
name|pid
operator|+
literal|" ."
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing process "
operator|+
name|pid
operator|+
literal|" with SIGKILL. Exit code "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Sends kill signal to all process belonging to same process group,    * forcefully terminating the process group.    *     * @param pgrpId process group id    */
DECL|method|killProcessGroup (String pgrpId)
specifier|public
specifier|static
name|void
name|killProcessGroup
parameter_list|(
name|String
name|pgrpId
parameter_list|)
block|{
comment|//If process tree is not alive then return immediately.
if|if
condition|(
operator|!
name|ProcessTree
operator|.
name|isProcessGroupAlive
argument_list|(
name|pgrpId
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|args
init|=
block|{
literal|"kill"
block|,
literal|"-9"
block|,
literal|"-"
operator|+
name|pgrpId
block|}
decl_stmt|;
name|ShellCommandExecutor
name|shexec
init|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error sending SIGKILL to process group "
operator|+
name|pgrpId
operator|+
literal|" ."
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing process group"
operator|+
name|pgrpId
operator|+
literal|" with SIGKILL. Exit code "
operator|+
name|shexec
operator|.
name|getExitCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Is the process with PID pid still alive?    * This method assumes that isAlive is called on a pid that was alive not    * too long ago, and hence assumes no chance of pid-wrapping-around.    *     * @param pid pid of the process to check.    * @return true if process is alive.    */
DECL|method|isAlive (String pid)
specifier|public
specifier|static
name|boolean
name|isAlive
parameter_list|(
name|String
name|pid
parameter_list|)
block|{
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"kill"
block|,
literal|"-0"
block|,
name|pid
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|ee
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error executing shell command "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|shexec
operator|.
name|getExecString
argument_list|()
argument_list|)
operator|+
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
operator|(
name|shexec
operator|.
name|getExitCode
argument_list|()
operator|==
literal|0
condition|?
literal|true
else|:
literal|false
operator|)
return|;
block|}
comment|/**    * Is the process group with  still alive?    *     * This method assumes that isAlive is called on a pid that was alive not    * too long ago, and hence assumes no chance of pid-wrapping-around.    *     * @param pgrpId process group id    * @return true if any of process in group is alive.    */
DECL|method|isProcessGroupAlive (String pgrpId)
specifier|public
specifier|static
name|boolean
name|isProcessGroupAlive
parameter_list|(
name|String
name|pgrpId
parameter_list|)
block|{
name|ShellCommandExecutor
name|shexec
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"kill"
block|,
literal|"-0"
block|,
literal|"-"
operator|+
name|pgrpId
block|}
decl_stmt|;
name|shexec
operator|=
operator|new
name|ShellCommandExecutor
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|shexec
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitCodeException
name|ee
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error executing shell command "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|shexec
operator|.
name|getExecString
argument_list|()
argument_list|)
operator|+
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
operator|(
name|shexec
operator|.
name|getExitCode
argument_list|()
operator|==
literal|0
condition|?
literal|true
else|:
literal|false
operator|)
return|;
block|}
comment|/**    * Helper thread class that kills process-tree with SIGKILL in background    */
DECL|class|SigKillThread
specifier|static
class|class
name|SigKillThread
extends|extends
name|Thread
block|{
DECL|field|pid
specifier|private
name|String
name|pid
init|=
literal|null
decl_stmt|;
DECL|field|isProcessGroup
specifier|private
name|boolean
name|isProcessGroup
init|=
literal|false
decl_stmt|;
DECL|field|sleepTimeBeforeSigKill
specifier|private
name|long
name|sleepTimeBeforeSigKill
init|=
name|DEFAULT_SLEEPTIME_BEFORE_SIGKILL
decl_stmt|;
DECL|method|SigKillThread (String pid, boolean isProcessGroup, long interval)
specifier|private
name|SigKillThread
parameter_list|(
name|String
name|pid
parameter_list|,
name|boolean
name|isProcessGroup
parameter_list|,
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|pid
operator|=
name|pid
expr_stmt|;
name|this
operator|.
name|isProcessGroup
operator|=
name|isProcessGroup
expr_stmt|;
name|this
operator|.
name|setName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|pid
argument_list|)
expr_stmt|;
name|sleepTimeBeforeSigKill
operator|=
name|interval
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sigKillInCurrentThread
argument_list|(
name|pid
argument_list|,
name|isProcessGroup
argument_list|,
name|sleepTimeBeforeSigKill
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

