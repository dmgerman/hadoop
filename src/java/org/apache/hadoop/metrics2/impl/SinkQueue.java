begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_comment
comment|/**  * A half-blocking (nonblocking for producers, blocking for consumers) queue  * for metrics sinks.  *  * New elements are dropped when the queue is full to preserve "interesting"  * elements at the onset of queue filling events  */
end_comment

begin_class
DECL|class|SinkQueue
class|class
name|SinkQueue
parameter_list|<
name|T
parameter_list|>
block|{
DECL|interface|Consumer
interface|interface
name|Consumer
parameter_list|<
name|T
parameter_list|>
block|{
DECL|method|consume (T object)
name|void
name|consume
parameter_list|(
name|T
name|object
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
block|}
comment|// A fixed size circular buffer to minimize garbage
DECL|field|data
specifier|private
specifier|final
name|T
index|[]
name|data
decl_stmt|;
DECL|field|head
specifier|private
name|int
name|head
decl_stmt|;
comment|// head position
DECL|field|tail
specifier|private
name|int
name|tail
decl_stmt|;
comment|// tail position
DECL|field|size
specifier|private
name|int
name|size
decl_stmt|;
comment|// number of elements
DECL|field|currentConsumer
specifier|private
name|Thread
name|currentConsumer
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|SinkQueue (int capacity)
name|SinkQueue
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|capacity
argument_list|)
index|]
expr_stmt|;
name|head
operator|=
name|tail
operator|=
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|enqueue (T e)
specifier|synchronized
name|boolean
name|enqueue
parameter_list|(
name|T
name|e
parameter_list|)
block|{
if|if
condition|(
name|data
operator|.
name|length
operator|==
name|size
condition|)
block|{
return|return
literal|false
return|;
block|}
operator|++
name|size
expr_stmt|;
name|tail
operator|=
operator|(
name|tail
operator|+
literal|1
operator|)
operator|%
name|data
operator|.
name|length
expr_stmt|;
name|data
index|[
name|tail
index|]
operator|=
name|e
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Consume one element, will block if queue is empty    * Only one consumer at a time is allowed    * @param consumer  the consumer callback object    */
DECL|method|consume (Consumer<T> consumer)
name|void
name|consume
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|T
name|e
init|=
name|waitForData
argument_list|()
decl_stmt|;
try|try
block|{
name|consumer
operator|.
name|consume
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// can take forever
name|_dequeue
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|clearConsumerLock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Consume all the elements, will block if queue is empty    * @param consumer  the consumer callback object    * @throws InterruptedException    */
DECL|method|consumeAll (Consumer<T> consumer)
name|void
name|consumeAll
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|waitForData
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|size
argument_list|()
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
name|consumer
operator|.
name|consume
argument_list|(
name|front
argument_list|()
argument_list|)
expr_stmt|;
comment|// can take forever
name|_dequeue
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|clearConsumerLock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Dequeue one element from head of the queue, will block if queue is empty    * @return  the first element    * @throws InterruptedException    */
DECL|method|dequeue ()
specifier|synchronized
name|T
name|dequeue
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|checkConsumer
argument_list|()
expr_stmt|;
while|while
condition|(
literal|0
operator|==
name|size
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
return|return
name|_dequeue
argument_list|()
return|;
block|}
DECL|method|waitForData ()
specifier|private
specifier|synchronized
name|T
name|waitForData
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|checkConsumer
argument_list|()
expr_stmt|;
while|while
condition|(
literal|0
operator|==
name|size
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
name|setConsumerLock
argument_list|()
expr_stmt|;
return|return
name|front
argument_list|()
return|;
block|}
DECL|method|checkConsumer ()
specifier|private
specifier|synchronized
name|void
name|checkConsumer
parameter_list|()
block|{
if|if
condition|(
name|currentConsumer
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConcurrentModificationException
argument_list|(
literal|"The "
operator|+
name|currentConsumer
operator|.
name|getName
argument_list|()
operator|+
literal|" thread is consuming the queue."
argument_list|)
throw|;
block|}
block|}
DECL|method|setConsumerLock ()
specifier|private
specifier|synchronized
name|void
name|setConsumerLock
parameter_list|()
block|{
name|currentConsumer
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
block|}
DECL|method|clearConsumerLock ()
specifier|private
specifier|synchronized
name|void
name|clearConsumerLock
parameter_list|()
block|{
name|currentConsumer
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|_dequeue ()
specifier|private
specifier|synchronized
name|T
name|_dequeue
parameter_list|()
block|{
if|if
condition|(
literal|0
operator|==
name|size
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Size must> 0 here."
argument_list|)
throw|;
block|}
operator|--
name|size
expr_stmt|;
name|head
operator|=
operator|(
name|head
operator|+
literal|1
operator|)
operator|%
name|data
operator|.
name|length
expr_stmt|;
name|T
name|ret
init|=
name|data
index|[
name|head
index|]
decl_stmt|;
name|data
index|[
name|head
index|]
operator|=
literal|null
expr_stmt|;
comment|// hint to gc
return|return
name|ret
return|;
block|}
DECL|method|front ()
specifier|synchronized
name|T
name|front
parameter_list|()
block|{
return|return
name|data
index|[
operator|(
name|head
operator|+
literal|1
operator|)
operator|%
name|data
operator|.
name|length
index|]
return|;
block|}
DECL|method|back ()
specifier|synchronized
name|T
name|back
parameter_list|()
block|{
return|return
name|data
index|[
name|tail
index|]
return|;
block|}
DECL|method|clear ()
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|checkConsumer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|data
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
name|size
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|size ()
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
DECL|method|capacity ()
name|int
name|capacity
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
block|}
end_class

end_unit

