begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_comment
comment|/**  * This util class provides a method to register an MBean using  * our standard naming convention as described in the doc  *  for {link {@link #register(String, String, Object)}  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|MBeans
specifier|public
class|class
name|MBeans
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MBeans
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Register the MBean using our standard MBeanName format    * "hadoop:service=<serviceName>,name=<nameName>"    * Where the<serviceName> and<nameName> are the supplied parameters    *    * @param serviceName    * @param nameName    * @param theMbean - the MBean to register    * @return the named used to register the MBean    */
DECL|method|register (String serviceName, String nameName, Object theMbean)
specifier|static
specifier|public
name|ObjectName
name|register
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|nameName
parameter_list|,
name|Object
name|theMbean
parameter_list|)
block|{
specifier|final
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|name
init|=
name|getMBeanName
argument_list|(
name|serviceName
argument_list|,
name|nameName
argument_list|)
decl_stmt|;
try|try
block|{
name|mbs
operator|.
name|registerMBean
argument_list|(
name|theMbean
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Registered "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error registering "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|unregister (ObjectName mbeanName)
specifier|static
specifier|public
name|void
name|unregister
parameter_list|(
name|ObjectName
name|mbeanName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unregistering "
operator|+
name|mbeanName
argument_list|)
expr_stmt|;
specifier|final
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbeanName
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stacktrace: "
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|mbs
operator|.
name|unregisterMBean
argument_list|(
name|mbeanName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error unregistering "
operator|+
name|mbeanName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMBeanName (String serviceName, String nameName)
specifier|static
specifier|private
name|ObjectName
name|getMBeanName
parameter_list|(
name|String
name|serviceName
parameter_list|,
name|String
name|nameName
parameter_list|)
block|{
name|ObjectName
name|name
init|=
literal|null
decl_stmt|;
name|String
name|nameStr
init|=
literal|"Hadoop:service="
operator|+
name|serviceName
operator|+
literal|",name="
operator|+
name|nameName
decl_stmt|;
try|try
block|{
name|name
operator|=
name|DefaultMetricsSystem
operator|.
name|newMBeanName
argument_list|(
name|nameStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error creating MBean object name: "
operator|+
name|nameStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

