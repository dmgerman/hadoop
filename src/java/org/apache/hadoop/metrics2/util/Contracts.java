begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.util
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Additional helpers (besides guava Preconditions) for programming by contract  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|Contracts
specifier|public
class|class
name|Contracts
block|{
DECL|method|Contracts ()
specifier|private
name|Contracts
parameter_list|()
block|{}
comment|/**    * Check an argument for false conditions    * @param<T> type of the argument    * @param arg the argument to check    * @param expression  the boolean expression for the condition    * @param msg the error message if {@code expression} is false    * @return the argument for convenience    */
DECL|method|checkArg (T arg, boolean expression, Object msg)
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|checkArg
parameter_list|(
name|T
name|arg
parameter_list|,
name|boolean
name|expression
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|msg
argument_list|)
operator|+
literal|": "
operator|+
name|arg
argument_list|)
throw|;
block|}
return|return
name|arg
return|;
block|}
comment|/**    * Check an argument for false conditions    * @param arg the argument to check    * @param expression  the boolean expression for the condition    * @param msg the error message if {@code expression} is false    * @return the argument for convenience    */
DECL|method|checkArg (int arg, boolean expression, Object msg)
specifier|public
specifier|static
name|int
name|checkArg
parameter_list|(
name|int
name|arg
parameter_list|,
name|boolean
name|expression
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|msg
argument_list|)
operator|+
literal|": "
operator|+
name|arg
argument_list|)
throw|;
block|}
return|return
name|arg
return|;
block|}
comment|/**    * Check an argument for false conditions    * @param arg the argument to check    * @param expression  the boolean expression for the condition    * @param msg the error message if {@code expression} is false    * @return the argument for convenience    */
DECL|method|checkArg (long arg, boolean expression, Object msg)
specifier|public
specifier|static
name|long
name|checkArg
parameter_list|(
name|long
name|arg
parameter_list|,
name|boolean
name|expression
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|msg
argument_list|)
operator|+
literal|": "
operator|+
name|arg
argument_list|)
throw|;
block|}
return|return
name|arg
return|;
block|}
comment|/**    * Check an argument for false conditions    * @param arg the argument to check    * @param expression  the boolean expression for the condition    * @param msg the error message if {@code expression} is false    * @return the argument for convenience    */
DECL|method|checkArg (float arg, boolean expression, Object msg)
specifier|public
specifier|static
name|float
name|checkArg
parameter_list|(
name|float
name|arg
parameter_list|,
name|boolean
name|expression
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|msg
argument_list|)
operator|+
literal|": "
operator|+
name|arg
argument_list|)
throw|;
block|}
return|return
name|arg
return|;
block|}
comment|/**    * Check an argument for false conditions    * @param arg the argument to check    * @param expression  the boolean expression for the condition    * @param msg the error message if {@code expression} is false    * @return the argument for convenience    */
DECL|method|checkArg (double arg, boolean expression, Object msg)
specifier|public
specifier|static
name|double
name|checkArg
parameter_list|(
name|double
name|arg
parameter_list|,
name|boolean
name|expression
parameter_list|,
name|Object
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expression
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|msg
argument_list|)
operator|+
literal|": "
operator|+
name|arg
argument_list|)
throw|;
block|}
return|return
name|arg
return|;
block|}
block|}
end_class

end_unit

