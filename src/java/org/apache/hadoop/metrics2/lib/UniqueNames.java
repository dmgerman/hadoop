begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.metrics2.lib
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Generates predictable and user-friendly unique names  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|UniqueNames
specifier|public
class|class
name|UniqueNames
block|{
DECL|class|Count
specifier|static
class|class
name|Count
block|{
DECL|field|baseName
specifier|final
name|String
name|baseName
decl_stmt|;
DECL|field|value
name|int
name|value
decl_stmt|;
DECL|method|Count (String name, int value)
name|Count
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|baseName
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|field|joiner
specifier|static
specifier|final
name|Joiner
name|joiner
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|'-'
argument_list|)
decl_stmt|;
DECL|field|map
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Count
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|uniqueName (String name)
specifier|public
specifier|synchronized
name|String
name|uniqueName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Count
name|c
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|Count
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
if|if
condition|(
operator|!
name|c
operator|.
name|baseName
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|c
operator|=
operator|new
name|Count
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
expr_stmt|;
do|do
block|{
name|String
name|newName
init|=
name|joiner
operator|.
name|join
argument_list|(
name|name
argument_list|,
operator|++
name|c
operator|.
name|value
argument_list|)
decl_stmt|;
name|Count
name|c2
init|=
name|map
operator|.
name|get
argument_list|(
name|newName
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2
operator|==
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|newName
argument_list|,
name|c
argument_list|)
expr_stmt|;
return|return
name|newName
return|;
block|}
comment|// handle collisons, assume to be rare cases,
comment|// eg: people explicitly passed in name-\d+ names.
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
end_class

end_unit

