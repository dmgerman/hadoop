begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/** A {@link Writable} abstract class for storing user and groups information.  */
end_comment

begin_class
DECL|class|UserGroupInformation
specifier|public
specifier|abstract
class|class
name|UserGroupInformation
implements|implements
name|Writable
implements|,
name|Principal
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|LOGIN_UGI
specifier|private
specifier|static
name|UserGroupInformation
name|LOGIN_UGI
init|=
literal|null
decl_stmt|;
DECL|field|currentUser
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Subject
argument_list|>
name|currentUser
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Subject
argument_list|>
argument_list|()
decl_stmt|;
comment|/** @return the {@link UserGroupInformation} for the current thread */
DECL|method|getCurrentUGI ()
specifier|public
specifier|static
name|UserGroupInformation
name|getCurrentUGI
parameter_list|()
block|{
name|Subject
name|user
init|=
name|getCurrentUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|currentUser
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
name|Set
argument_list|<
name|UserGroupInformation
argument_list|>
name|ugiPrincipals
init|=
name|user
operator|.
name|getPrincipals
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ugiPrincipals
operator|!=
literal|null
operator|&&
name|ugiPrincipals
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ugi
operator|=
name|ugiPrincipals
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find _current user_ UGI in the Subject!"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot resolve current user from subject, "
operator|+
literal|"which had "
operator|+
name|ugiPrincipals
operator|.
name|size
argument_list|()
operator|+
literal|" UGI principals!"
argument_list|)
throw|;
block|}
return|return
name|ugi
return|;
block|}
comment|/**     * Set the {@link UserGroupInformation} for the current thread    * @deprecated Use {@link #setCurrentUser(UserGroupInformation)}     */
annotation|@
name|Deprecated
DECL|method|setCurrentUGI (UserGroupInformation ugi)
specifier|public
specifier|static
name|void
name|setCurrentUGI
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|setCurrentUser
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the current user<code>Subject</code>.    * @return the current user<code>Subject</code>    */
DECL|method|getCurrentUser ()
specifier|static
name|Subject
name|getCurrentUser
parameter_list|()
block|{
return|return
name|Subject
operator|.
name|getSubject
argument_list|(
name|AccessController
operator|.
name|getContext
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Set the {@link UserGroupInformation} for the current thread    * WARNING - This method should be used only in test cases and other exceptional    * cases!    * @param ugi {@link UserGroupInformation} for the current thread    */
DECL|method|setCurrentUser (UserGroupInformation ugi)
specifier|public
specifier|static
name|void
name|setCurrentUser
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
name|Subject
name|user
init|=
name|SecurityUtil
operator|.
name|getSubject
argument_list|(
name|ugi
argument_list|)
decl_stmt|;
name|currentUser
operator|.
name|set
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
comment|/** Get username    *     * @return the user's name    */
DECL|method|getUserName ()
specifier|public
specifier|abstract
name|String
name|getUserName
parameter_list|()
function_decl|;
comment|/** Get the name of the groups that the user belong to    *     * @return an array of group names    */
DECL|method|getGroupNames ()
specifier|public
specifier|abstract
name|String
index|[]
name|getGroupNames
parameter_list|()
function_decl|;
comment|/** Login and return a UserGroupInformation object. */
DECL|method|login (Configuration conf )
specifier|public
specifier|static
name|UserGroupInformation
name|login
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|LoginException
block|{
if|if
condition|(
name|LOGIN_UGI
operator|==
literal|null
condition|)
block|{
name|LOGIN_UGI
operator|=
name|UnixUserGroupInformation
operator|.
name|login
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|LOGIN_UGI
return|;
block|}
comment|/** Read a {@link UserGroupInformation} from conf */
DECL|method|readFrom (Configuration conf )
specifier|public
specifier|static
name|UserGroupInformation
name|readFrom
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|UnixUserGroupInformation
operator|.
name|readFromConf
argument_list|(
name|conf
argument_list|,
name|UnixUserGroupInformation
operator|.
name|UGI_PROPERTY_NAME
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

