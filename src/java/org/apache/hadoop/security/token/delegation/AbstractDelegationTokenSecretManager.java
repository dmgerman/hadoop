begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.token.delegation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
operator|.
name|Project
operator|.
name|HDFS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
operator|.
name|Project
operator|.
name|MAPREDUCE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
name|HDFS
block|,
name|MAPREDUCE
block|}
argument_list|)
specifier|public
specifier|abstract
DECL|class|AbstractDelegationTokenSecretManager
class|class
name|AbstractDelegationTokenSecretManager
parameter_list|<
name|TokenIdent
extends|extends
name|AbstractDelegationTokenIdentifier
parameter_list|>
extends|extends
name|SecretManager
argument_list|<
name|TokenIdent
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractDelegationTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**     * Cache of currently valid tokens, mapping from DelegationTokenIdentifier     * to DelegationTokenInformation. Protected by its own lock.    */
DECL|field|currentTokens
specifier|private
specifier|final
name|Map
argument_list|<
name|TokenIdent
argument_list|,
name|DelegationTokenInformation
argument_list|>
name|currentTokens
init|=
operator|new
name|HashMap
argument_list|<
name|TokenIdent
argument_list|,
name|DelegationTokenInformation
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Sequence number to create DelegationTokenIdentifier    */
DECL|field|delegationTokenSequenceNumber
specifier|private
name|int
name|delegationTokenSequenceNumber
init|=
literal|0
decl_stmt|;
DECL|field|allKeys
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|DelegationKey
argument_list|>
name|allKeys
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DelegationKey
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Access to currentId and currentKey is protected by this object lock.    */
DECL|field|currentId
specifier|private
name|int
name|currentId
init|=
literal|0
decl_stmt|;
DECL|field|currentKey
specifier|private
name|DelegationKey
name|currentKey
decl_stmt|;
DECL|field|keyUpdateInterval
specifier|private
name|long
name|keyUpdateInterval
decl_stmt|;
DECL|field|tokenMaxLifetime
specifier|private
name|long
name|tokenMaxLifetime
decl_stmt|;
DECL|field|tokenRemoverScanInterval
specifier|private
name|long
name|tokenRemoverScanInterval
decl_stmt|;
DECL|field|tokenRenewInterval
specifier|private
name|long
name|tokenRenewInterval
decl_stmt|;
DECL|field|tokenRemoverThread
specifier|private
name|Thread
name|tokenRemoverThread
decl_stmt|;
DECL|field|running
specifier|private
specifier|volatile
name|boolean
name|running
decl_stmt|;
DECL|method|AbstractDelegationTokenSecretManager (long delegationKeyUpdateInterval, long delegationTokenMaxLifetime, long delegationTokenRenewInterval, long delegationTokenRemoverScanInterval)
specifier|public
name|AbstractDelegationTokenSecretManager
parameter_list|(
name|long
name|delegationKeyUpdateInterval
parameter_list|,
name|long
name|delegationTokenMaxLifetime
parameter_list|,
name|long
name|delegationTokenRenewInterval
parameter_list|,
name|long
name|delegationTokenRemoverScanInterval
parameter_list|)
block|{
name|this
operator|.
name|keyUpdateInterval
operator|=
name|delegationKeyUpdateInterval
expr_stmt|;
name|this
operator|.
name|tokenMaxLifetime
operator|=
name|delegationTokenMaxLifetime
expr_stmt|;
name|this
operator|.
name|tokenRenewInterval
operator|=
name|delegationTokenRenewInterval
expr_stmt|;
name|this
operator|.
name|tokenRemoverScanInterval
operator|=
name|delegationTokenRemoverScanInterval
expr_stmt|;
block|}
comment|/** should be called before this object is used */
DECL|method|startThreads ()
specifier|public
specifier|synchronized
name|void
name|startThreads
parameter_list|()
throws|throws
name|IOException
block|{
name|updateCurrentKey
argument_list|()
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
name|tokenRemoverThread
operator|=
operator|new
name|Daemon
argument_list|(
operator|new
name|ExpiredTokenRemover
argument_list|()
argument_list|)
expr_stmt|;
name|tokenRemoverThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**     * Add a previously used master key to cache (when NN restarts),     * should be called before activate().    * */
DECL|method|addKey (DelegationKey key)
specifier|public
specifier|synchronized
name|void
name|addKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|running
condition|)
comment|// a safety check
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't add delegation key to a running SecretManager."
argument_list|)
throw|;
if|if
condition|(
name|key
operator|.
name|getKeyId
argument_list|()
operator|>
name|currentId
condition|)
block|{
name|currentId
operator|=
name|key
operator|.
name|getKeyId
argument_list|()
expr_stmt|;
block|}
name|allKeys
operator|.
name|put
argument_list|(
name|key
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|getAllKeys ()
specifier|public
specifier|synchronized
name|DelegationKey
index|[]
name|getAllKeys
parameter_list|()
block|{
return|return
name|allKeys
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|DelegationKey
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/** Update the current master key */
DECL|method|updateCurrentKey ()
specifier|private
specifier|synchronized
name|void
name|updateCurrentKey
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating the current master key for generating delegation tokens"
argument_list|)
expr_stmt|;
comment|/* Create a new currentKey with an estimated expiry date. */
name|currentId
operator|++
expr_stmt|;
name|currentKey
operator|=
operator|new
name|DelegationKey
argument_list|(
name|currentId
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|keyUpdateInterval
operator|+
name|tokenMaxLifetime
argument_list|,
name|generateSecret
argument_list|()
argument_list|)
expr_stmt|;
name|allKeys
operator|.
name|put
argument_list|(
name|currentKey
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
block|}
comment|/** Update the current master key for generating delegation tokens */
DECL|method|rollMasterKey ()
specifier|public
specifier|synchronized
name|void
name|rollMasterKey
parameter_list|()
throws|throws
name|IOException
block|{
name|removeExpiredKeys
argument_list|()
expr_stmt|;
comment|/* set final expiry date for retiring currentKey */
name|currentKey
operator|.
name|setExpiryDate
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|tokenMaxLifetime
argument_list|)
expr_stmt|;
comment|/*      * currentKey might have been removed by removeExpiredKeys(), if      * updateMasterKey() isn't called at expected interval. Add it back to      * allKeys just in case.      */
name|allKeys
operator|.
name|put
argument_list|(
name|currentKey
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
name|updateCurrentKey
argument_list|()
expr_stmt|;
block|}
DECL|method|removeExpiredKeys ()
specifier|private
specifier|synchronized
name|void
name|removeExpiredKeys
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DelegationKey
argument_list|>
argument_list|>
name|it
init|=
name|allKeys
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DelegationKey
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getExpiryDate
argument_list|()
operator|<
name|now
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|createPassword (TokenIdent identifier)
specifier|protected
name|byte
index|[]
name|createPassword
parameter_list|(
name|TokenIdent
name|identifier
parameter_list|)
block|{
name|int
name|sequenceNum
decl_stmt|;
name|int
name|id
decl_stmt|;
name|DelegationKey
name|key
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|id
operator|=
name|currentId
expr_stmt|;
name|key
operator|=
name|currentKey
expr_stmt|;
name|sequenceNum
operator|=
operator|++
name|delegationTokenSequenceNumber
expr_stmt|;
block|}
name|identifier
operator|.
name|setIssueDate
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setMaxDate
argument_list|(
name|now
operator|+
name|tokenMaxLifetime
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setMasterKeyId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|identifier
operator|.
name|setSequenceNumber
argument_list|(
name|sequenceNum
argument_list|)
expr_stmt|;
name|byte
index|[]
name|password
init|=
name|createPassword
argument_list|(
name|identifier
operator|.
name|getBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|currentTokens
init|)
block|{
name|currentTokens
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
operator|new
name|DelegationTokenInformation
argument_list|(
name|now
operator|+
name|tokenRenewInterval
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|password
return|;
block|}
annotation|@
name|Override
DECL|method|retrievePassword (TokenIdent identifier )
specifier|public
name|byte
index|[]
name|retrievePassword
parameter_list|(
name|TokenIdent
name|identifier
parameter_list|)
throws|throws
name|InvalidToken
block|{
name|DelegationTokenInformation
name|info
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|currentTokens
init|)
block|{
name|info
operator|=
name|currentTokens
operator|.
name|get
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"token is expired or doesn't exist"
argument_list|)
throw|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getRenewDate
argument_list|()
operator|<
name|now
condition|)
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"token is expired"
argument_list|)
throw|;
block|}
return|return
name|info
operator|.
name|getPassword
argument_list|()
return|;
block|}
comment|/**    * Renew a delegation token. Canceled tokens are not renewed. Return true if    * the token is successfully renewed; false otherwise.    */
DECL|method|renewToken (Token<TokenIdent> token, String renewer)
specifier|public
name|Boolean
name|renewToken
parameter_list|(
name|Token
argument_list|<
name|TokenIdent
argument_list|>
name|token
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|InvalidToken
throws|,
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|TokenIdent
name|id
init|=
name|createIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|currentTokens
init|)
block|{
if|if
condition|(
name|currentTokens
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Renewal request for unknown token"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|id
operator|.
name|getMaxDate
argument_list|()
operator|<
name|now
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Client "
operator|+
name|renewer
operator|+
literal|" tries to renew an expired token"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|id
operator|.
name|getRenewer
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|id
operator|.
name|getRenewer
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|renewer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Client "
operator|+
name|renewer
operator|+
literal|" tries to renew a token with "
operator|+
literal|"renewer specified as "
operator|+
name|id
operator|.
name|getRenewer
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DelegationKey
name|key
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|key
operator|=
name|allKeys
operator|.
name|get
argument_list|(
name|id
operator|.
name|getMasterKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to find master key for keyId="
operator|+
name|id
operator|.
name|getMasterKeyId
argument_list|()
operator|+
literal|" from cache. Failed to renew an unexpired token with sequenceNumber="
operator|+
name|id
operator|.
name|getSequenceNumber
argument_list|()
operator|+
literal|", issued by this key"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|byte
index|[]
name|password
init|=
name|createPassword
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|password
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Client "
operator|+
name|renewer
operator|+
literal|" is trying to renew a token with wrong password"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DelegationTokenInformation
name|info
init|=
operator|new
name|DelegationTokenInformation
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|id
operator|.
name|getMaxDate
argument_list|()
argument_list|,
name|now
operator|+
name|tokenRenewInterval
argument_list|)
argument_list|,
name|password
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|currentTokens
init|)
block|{
name|currentTokens
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Cancel a token by removing it from cache. Return true if     * token exists in cache; false otherwise.    */
DECL|method|cancelToken (Token<TokenIdent> token, String canceller)
specifier|public
name|Boolean
name|cancelToken
parameter_list|(
name|Token
argument_list|<
name|TokenIdent
argument_list|>
name|token
parameter_list|,
name|String
name|canceller
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|TokenIdent
name|id
init|=
name|createIdentifier
argument_list|()
decl_stmt|;
name|id
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|getRenewer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Renewer is null: Invalid Identifier"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|id
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"owner is null: Invalid Identifier"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|owner
init|=
name|id
operator|.
name|getUser
argument_list|()
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|String
name|renewer
init|=
name|id
operator|.
name|getRenewer
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|canceller
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
operator|&&
operator|!
name|canceller
operator|.
name|equals
argument_list|(
name|renewer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|canceller
operator|+
literal|" is not authorized to cancel the token"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DelegationTokenInformation
name|info
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|currentTokens
init|)
block|{
name|info
operator|=
name|currentTokens
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|info
operator|!=
literal|null
return|;
block|}
comment|/**    * Convert the byte[] to a secret key    * @param key the byte[] to create the secret key from    * @return the secret key    */
DECL|method|createSecretKey (byte[] key)
specifier|public
specifier|static
name|SecretKey
name|createSecretKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|SecretManager
operator|.
name|createSecretKey
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/** Utility class to encapsulate a token's renew date and password. */
DECL|class|DelegationTokenInformation
specifier|private
specifier|static
class|class
name|DelegationTokenInformation
block|{
DECL|field|renewDate
name|long
name|renewDate
decl_stmt|;
DECL|field|password
name|byte
index|[]
name|password
decl_stmt|;
DECL|method|DelegationTokenInformation (long renewDate, byte[] password)
name|DelegationTokenInformation
parameter_list|(
name|long
name|renewDate
parameter_list|,
name|byte
index|[]
name|password
parameter_list|)
block|{
name|this
operator|.
name|renewDate
operator|=
name|renewDate
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
comment|/** returns renew date */
DECL|method|getRenewDate ()
name|long
name|getRenewDate
parameter_list|()
block|{
return|return
name|renewDate
return|;
block|}
comment|/** returns password */
DECL|method|getPassword ()
name|byte
index|[]
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
block|}
comment|/** Remove expired delegation tokens from cache */
DECL|method|removeExpiredToken ()
specifier|private
name|void
name|removeExpiredToken
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|currentTokens
init|)
block|{
name|Iterator
argument_list|<
name|DelegationTokenInformation
argument_list|>
name|i
init|=
name|currentTokens
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|long
name|renewDate
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|getRenewDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|renewDate
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|stopThreads ()
specifier|public
specifier|synchronized
name|void
name|stopThreads
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping expired delegation token remover thread"
argument_list|)
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
name|tokenRemoverThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
DECL|class|ExpiredTokenRemover
specifier|private
class|class
name|ExpiredTokenRemover
extends|extends
name|Thread
block|{
DECL|field|lastMasterKeyUpdate
specifier|private
name|long
name|lastMasterKeyUpdate
decl_stmt|;
DECL|field|lastTokenCacheCleanup
specifier|private
name|long
name|lastTokenCacheCleanup
decl_stmt|;
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting expired delegation token remover thread, "
operator|+
literal|"tokenRemoverScanInterval="
operator|+
name|tokenRemoverScanInterval
operator|/
operator|(
literal|60
operator|*
literal|1000
operator|)
operator|+
literal|" min(s)"
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|running
condition|)
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastMasterKeyUpdate
operator|+
name|keyUpdateInterval
operator|<
name|now
condition|)
block|{
try|try
block|{
name|rollMasterKey
argument_list|()
expr_stmt|;
name|lastMasterKeyUpdate
operator|=
name|now
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Master key updating failed. "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastTokenCacheCleanup
operator|+
name|tokenRemoverScanInterval
operator|<
name|now
condition|)
block|{
name|removeExpiredToken
argument_list|()
expr_stmt|;
name|lastTokenCacheCleanup
operator|=
name|now
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// 5 seconds
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"InterruptedExcpetion recieved for ExpiredTokenRemover thread "
operator|+
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"ExpiredTokenRemover thread received unexpected exception. "
operator|+
name|t
argument_list|)
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

