begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/** Perform permission checking. */
end_comment

begin_class
DECL|class|PermissionChecker
specifier|public
class|class
name|PermissionChecker
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|user
specifier|public
specifier|final
name|String
name|user
decl_stmt|;
DECL|field|groups
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|isSuper
specifier|public
specifier|final
name|boolean
name|isSuper
decl_stmt|;
comment|/**    * Checks if the caller has the required permission.    * @param owner username of the owner    * @param supergroup supergroup that the owner belongs to    */
DECL|method|PermissionChecker (String owner, String supergroup )
specifier|public
name|PermissionChecker
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|supergroup
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUGI
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ugi="
operator|+
name|ugi
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ugi
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|ugi
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|groups
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|isSuper
operator|=
name|user
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
operator|||
name|groups
operator|.
name|contains
argument_list|(
name|supergroup
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"ugi = null"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Check if the callers group contains the required values.    * @param group group to check    */
DECL|method|containsGroup (String group)
specifier|public
name|boolean
name|containsGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
return|return
name|groups
operator|.
name|contains
argument_list|(
name|group
argument_list|)
return|;
block|}
comment|/**    * Verify if the caller has the required permission. This will result into     * an exception if the caller is not allowed to access the resource.    * @param owner owner of the system    * @param supergroup supergroup of the system    */
DECL|method|checkSuperuserPrivilege (UserGroupInformation owner, String supergroup)
specifier|public
specifier|static
name|void
name|checkSuperuserPrivilege
parameter_list|(
name|UserGroupInformation
name|owner
parameter_list|,
name|String
name|supergroup
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|PermissionChecker
name|checker
init|=
operator|new
name|PermissionChecker
argument_list|(
name|owner
operator|.
name|getUserName
argument_list|()
argument_list|,
name|supergroup
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checker
operator|.
name|isSuper
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Access denied for user "
operator|+
name|checker
operator|.
name|user
operator|+
literal|". Superuser privilege is required"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

