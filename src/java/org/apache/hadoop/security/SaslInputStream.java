begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_comment
comment|/**  * A SaslInputStream is composed of an InputStream and a SaslServer (or  * SaslClient) so that read() methods return data that are read in from the  * underlying InputStream but have been additionally processed by the SaslServer  * (or SaslClient) object. The SaslServer (or SaslClient) object must be fully  * initialized before being used by a SaslInputStream.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HDFS"
block|,
literal|"MapReduce"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|SaslInputStream
specifier|public
class|class
name|SaslInputStream
extends|extends
name|InputStream
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SaslInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|inStream
specifier|private
specifier|final
name|DataInputStream
name|inStream
decl_stmt|;
comment|/** Should we wrap the communication channel? */
DECL|field|useWrap
specifier|private
specifier|final
name|boolean
name|useWrap
decl_stmt|;
comment|/*    * data read from the underlying input stream before being processed by SASL    */
DECL|field|saslToken
specifier|private
name|byte
index|[]
name|saslToken
decl_stmt|;
DECL|field|saslClient
specifier|private
specifier|final
name|SaslClient
name|saslClient
decl_stmt|;
DECL|field|saslServer
specifier|private
specifier|final
name|SaslServer
name|saslServer
decl_stmt|;
DECL|field|lengthBuf
specifier|private
name|byte
index|[]
name|lengthBuf
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
comment|/*    * buffer holding data that have been processed by SASL, but have not been    * read out    */
DECL|field|obuffer
specifier|private
name|byte
index|[]
name|obuffer
decl_stmt|;
comment|// position of the next "new" byte
DECL|field|ostart
specifier|private
name|int
name|ostart
init|=
literal|0
decl_stmt|;
comment|// position of the last "new" byte
DECL|field|ofinish
specifier|private
name|int
name|ofinish
init|=
literal|0
decl_stmt|;
DECL|method|unsignedBytesToInt (byte[] buf)
specifier|private
specifier|static
name|int
name|unsignedBytesToInt
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
operator|!=
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot handle byte array other than 4 bytes"
argument_list|)
throw|;
block|}
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|<<=
literal|8
expr_stmt|;
name|result
operator||=
operator|(
operator|(
name|int
operator|)
name|buf
index|[
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Read more data and get them processed<br>    * Entry condition: ostart = ofinish<br>    * Exit condition: ostart<= ofinish<br>    *     * return (ofinish-ostart) (we have this many bytes for you), 0 (no data now,    * but could have more later), or -1 (absolutely no more data)    */
DECL|method|readMoreData ()
specifier|private
name|int
name|readMoreData
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|inStream
operator|.
name|readFully
argument_list|(
name|lengthBuf
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|unsignedBytesToInt
argument_list|(
name|lengthBuf
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Actual length is "
operator|+
name|length
argument_list|)
expr_stmt|;
name|saslToken
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|inStream
operator|.
name|readFully
argument_list|(
name|saslToken
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
return|return
operator|-
literal|1
return|;
block|}
try|try
block|{
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
comment|// using saslServer
name|obuffer
operator|=
name|saslServer
operator|.
name|unwrap
argument_list|(
name|saslToken
argument_list|,
literal|0
argument_list|,
name|saslToken
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// using saslClient
name|obuffer
operator|=
name|saslClient
operator|.
name|unwrap
argument_list|(
name|saslToken
argument_list|,
literal|0
argument_list|,
name|saslToken
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SaslException
name|se
parameter_list|)
block|{
try|try
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|ignored
parameter_list|)
block|{       }
throw|throw
name|se
throw|;
block|}
name|ostart
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|obuffer
operator|==
literal|null
condition|)
name|ofinish
operator|=
literal|0
expr_stmt|;
else|else
name|ofinish
operator|=
name|obuffer
operator|.
name|length
expr_stmt|;
return|return
name|ofinish
return|;
block|}
comment|/**    * Disposes of any system resources or security-sensitive information Sasl    * might be using.    *     * @exception SaslException    *              if a SASL error occurs.    */
DECL|method|disposeSasl ()
specifier|private
name|void
name|disposeSasl
parameter_list|()
throws|throws
name|SaslException
block|{
if|if
condition|(
name|saslClient
operator|!=
literal|null
condition|)
block|{
name|saslClient
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
name|saslServer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Constructs a SASLInputStream from an InputStream and a SaslServer<br>    * Note: if the specified InputStream or SaslServer is null, a    * NullPointerException may be thrown later when they are used.    *     * @param inStream    *          the InputStream to be processed    * @param saslServer    *          an initialized SaslServer object    */
DECL|method|SaslInputStream (InputStream inStream, SaslServer saslServer)
specifier|public
name|SaslInputStream
parameter_list|(
name|InputStream
name|inStream
parameter_list|,
name|SaslServer
name|saslServer
parameter_list|)
block|{
name|this
operator|.
name|inStream
operator|=
operator|new
name|DataInputStream
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|saslServer
operator|=
name|saslServer
expr_stmt|;
name|this
operator|.
name|saslClient
operator|=
literal|null
expr_stmt|;
name|String
name|qop
init|=
operator|(
name|String
operator|)
name|saslServer
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
name|this
operator|.
name|useWrap
operator|=
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a SASLInputStream from an InputStream and a SaslClient<br>    * Note: if the specified InputStream or SaslClient is null, a    * NullPointerException may be thrown later when they are used.    *     * @param inStream    *          the InputStream to be processed    * @param saslClient    *          an initialized SaslClient object    */
DECL|method|SaslInputStream (InputStream inStream, SaslClient saslClient)
specifier|public
name|SaslInputStream
parameter_list|(
name|InputStream
name|inStream
parameter_list|,
name|SaslClient
name|saslClient
parameter_list|)
block|{
name|this
operator|.
name|inStream
operator|=
operator|new
name|DataInputStream
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
name|this
operator|.
name|saslServer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|saslClient
operator|=
name|saslClient
expr_stmt|;
name|String
name|qop
init|=
operator|(
name|String
operator|)
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
name|this
operator|.
name|useWrap
operator|=
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reads the next byte of data from this input stream. The value byte is    * returned as an<code>int</code> in the range<code>0</code> to    *<code>255</code>. If no byte is available because the end of the stream has    * been reached, the value<code>-1</code> is returned. This method blocks    * until input data is available, the end of the stream is detected, or an    * exception is thrown.    *<p>    *     * @return the next byte of data, or<code>-1</code> if the end of the stream    *         is reached.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|read ()
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
return|return
name|inStream
operator|.
name|read
argument_list|()
return|;
block|}
if|if
condition|(
name|ostart
operator|>=
name|ofinish
condition|)
block|{
comment|// we loop for new data as we are blocking
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|==
literal|0
condition|)
name|i
operator|=
name|readMoreData
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
operator|(
name|int
operator|)
name|obuffer
index|[
name|ostart
operator|++
index|]
operator|&
literal|0xff
operator|)
return|;
block|}
comment|/**    * Reads up to<code>b.length</code> bytes of data from this input stream into    * an array of bytes.    *<p>    * The<code>read</code> method of<code>InputStream</code> calls the    *<code>read</code> method of three arguments with the arguments    *<code>b</code>,<code>0</code>, and<code>b.length</code>.    *     * @param b    *          the buffer into which the data is read.    * @return the total number of bytes read into the buffer, or<code>-1</code>    *         is there is no more data because the end of the stream has been    *         reached.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|read (byte[] b)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**    * Reads up to<code>len</code> bytes of data from this input stream into an    * array of bytes. This method blocks until some input is available. If the    * first argument is<code>null,</code> up to<code>len</code> bytes are read    * and discarded.    *     * @param b    *          the buffer into which the data is read.    * @param off    *          the start offset of the data.    * @param len    *          the maximum number of bytes read.    * @return the total number of bytes read into the buffer, or<code>-1</code>    *         if there is no more data because the end of the stream has been    *         reached.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|read (byte[] b, int off, int len)
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
return|return
name|inStream
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
if|if
condition|(
name|ostart
operator|>=
name|ofinish
condition|)
block|{
comment|// we loop for new data as we are blocking
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|==
literal|0
condition|)
name|i
operator|=
name|readMoreData
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|available
init|=
name|ofinish
operator|-
name|ostart
decl_stmt|;
if|if
condition|(
name|len
operator|<
name|available
condition|)
name|available
operator|=
name|len
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|obuffer
argument_list|,
name|ostart
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
name|ostart
operator|=
name|ostart
operator|+
name|available
expr_stmt|;
return|return
name|available
return|;
block|}
comment|/**    * Skips<code>n</code> bytes of input from the bytes that can be read from    * this input stream without blocking.    *     *<p>    * Fewer bytes than requested might be skipped. The actual number of bytes    * skipped is equal to<code>n</code> or the result of a call to    * {@link #available()<code>available</code>}, whichever is smaller. If    *<code>n</code> is less than zero, no bytes are skipped.    *     *<p>    * The actual number of bytes skipped is returned.    *     * @param n    *          the number of bytes to be skipped.    * @return the actual number of bytes skipped.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|skip (long n)
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
return|return
name|inStream
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
name|int
name|available
init|=
name|ofinish
operator|-
name|ostart
decl_stmt|;
if|if
condition|(
name|n
operator|>
name|available
condition|)
block|{
name|n
operator|=
name|available
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|ostart
operator|+=
name|n
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/**    * Returns the number of bytes that can be read from this input stream without    * blocking. The<code>available</code> method of<code>InputStream</code>    * returns<code>0</code>. This method<B>should</B> be overridden by    * subclasses.    *     * @return the number of bytes that can be read from this input stream without    *         blocking.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|available ()
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
return|return
name|inStream
operator|.
name|available
argument_list|()
return|;
block|}
return|return
operator|(
name|ofinish
operator|-
name|ostart
operator|)
return|;
block|}
comment|/**    * Closes this input stream and releases any system resources associated with    * the stream.    *<p>    * The<code>close</code> method of<code>SASLInputStream</code> calls the    *<code>close</code> method of its underlying input stream.    *     * @exception IOException    *              if an I/O error occurs.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
name|ostart
operator|=
literal|0
expr_stmt|;
name|ofinish
operator|=
literal|0
expr_stmt|;
name|inStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests if this input stream supports the<code>mark</code> and    *<code>reset</code> methods, which it does not.    *     * @return<code>false</code>, since this class does not support the    *<code>mark</code> and<code>reset</code> methods.    */
DECL|method|markSupported ()
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

