begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ConfiguredPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_class
DECL|class|SecurityUtil
specifier|public
class|class
name|SecurityUtil
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SecurityUtil
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
comment|// Set an empty default policy
name|setPolicy
argument_list|(
operator|new
name|ConfiguredPolicy
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|PolicyProvider
operator|.
name|DEFAULT_POLICY_PROVIDER
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|GROUPS
specifier|private
specifier|static
name|Groups
name|GROUPS
init|=
literal|null
decl_stmt|;
comment|/**    * Set the global security policy for Hadoop.    *     * @param policy {@link Policy} used for authorization.    */
DECL|method|setPolicy (Policy policy)
specifier|public
specifier|static
name|void
name|setPolicy
parameter_list|(
name|Policy
name|policy
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting Hadoop security policy"
argument_list|)
expr_stmt|;
block|}
name|Policy
operator|.
name|setPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the current global security policy for Hadoop.    * @return the current {@link Policy}    */
DECL|method|getPolicy ()
specifier|public
specifier|static
name|Policy
name|getPolicy
parameter_list|()
block|{
return|return
name|Policy
operator|.
name|getPolicy
argument_list|()
return|;
block|}
comment|/**    * Get the {@link Groups} being used to map user-to-groups.    * @return the<code>Groups</code> being used to map user-to-groups.    */
DECL|method|getUserToGroupsMappingService (Configuration conf)
specifier|public
specifier|static
name|Groups
name|getUserToGroupsMappingService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
name|GROUPS
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" Creating new Groups object"
argument_list|)
expr_stmt|;
name|GROUPS
operator|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|GROUPS
return|;
block|}
comment|/**    * Get the {@link Subject} for the user identified by<code>ugi</code>.    * @param ugi user    * @return the {@link Subject} for the user identified by<code>ugi</code>    */
DECL|method|getSubject (UserGroupInformation ugi)
specifier|public
specifier|static
name|Subject
name|getSubject
parameter_list|(
name|UserGroupInformation
name|ugi
parameter_list|)
block|{
if|if
condition|(
name|ugi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Number of principals = username + #groups + ugi
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
operator|.
name|length
operator|+
literal|1
operator|+
literal|1
argument_list|)
decl_stmt|;
name|User
name|userPrincipal
init|=
operator|new
name|User
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|userPrincipal
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|group
range|:
name|ugi
operator|.
name|getGroupNames
argument_list|()
control|)
block|{
name|Group
name|groupPrincipal
init|=
operator|new
name|Group
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|groupPrincipal
argument_list|)
expr_stmt|;
block|}
name|principals
operator|.
name|add
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|Subject
name|user
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|user
return|;
block|}
comment|/**    * Get the {@link Subject} for the user identified by<code>userName</code>.    * @param userName user name    * @return the {@link Subject} for the user identified by<code>userName</code>    * @throws IOException    */
DECL|method|getSubject (Configuration conf, String userName)
specifier|public
specifier|static
name|Subject
name|getSubject
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|userName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|User
name|userPrincipal
init|=
operator|new
name|User
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|userPrincipal
argument_list|)
expr_stmt|;
comment|// Get user's groups
name|List
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|getUserToGroupsMappingService
argument_list|(
name|conf
argument_list|)
operator|.
name|getGroups
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"Groups for '"
operator|+
name|userName
operator|+
literal|"':<"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|Group
name|groupPrincipal
init|=
operator|new
name|Group
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|groupPrincipal
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|group
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|sb
argument_list|)
expr_stmt|;
comment|// Create the ugi with the right groups
name|UserGroupInformation
name|ugi
init|=
operator|new
name|UnixUserGroupInformation
argument_list|(
name|userName
argument_list|,
name|groups
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|principals
operator|.
name|add
argument_list|(
name|ugi
argument_list|)
expr_stmt|;
name|Subject
name|user
init|=
operator|new
name|Subject
argument_list|(
literal|false
argument_list|,
name|principals
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|user
return|;
block|}
comment|/**    * Class representing a configured access control list.    */
DECL|class|AccessControlList
specifier|public
specifier|static
class|class
name|AccessControlList
block|{
comment|// Indicates an ACL string that represents access to all users
DECL|field|WILDCARD_ACL_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|WILDCARD_ACL_VALUE
init|=
literal|"*"
decl_stmt|;
comment|// Set of users who are granted access.
DECL|field|users
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|users
decl_stmt|;
comment|// Set of groups which are granted access
DECL|field|groups
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|groups
decl_stmt|;
comment|// Whether all users are granted access.
DECL|field|allAllowed
specifier|private
name|boolean
name|allAllowed
decl_stmt|;
comment|/**      * Construct a new ACL from a String representation of the same.      *       * The String is a a comma separated list of users and groups.      * The user list comes first and is separated by a space followed       * by the group list. For e.g. "user1,user2 group1,group2"      *       * @param aclString String representation of the ACL      */
DECL|method|AccessControlList (String aclString)
specifier|public
name|AccessControlList
parameter_list|(
name|String
name|aclString
parameter_list|)
block|{
name|users
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|groups
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|aclString
operator|.
name|contains
argument_list|(
name|WILDCARD_ACL_VALUE
argument_list|)
operator|&&
name|aclString
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|WILDCARD_ACL_VALUE
argument_list|)
condition|)
block|{
name|allAllowed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|userGroupStrings
init|=
name|aclString
operator|.
name|split
argument_list|(
literal|" "
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|userGroupStrings
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|String
index|[]
name|usersStr
init|=
name|userGroupStrings
index|[
literal|0
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|usersStr
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|addToSet
argument_list|(
name|users
argument_list|,
name|usersStr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|userGroupStrings
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
index|[]
name|groupsStr
init|=
name|userGroupStrings
index|[
literal|1
index|]
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupsStr
operator|.
name|length
operator|>=
literal|1
condition|)
block|{
name|addToSet
argument_list|(
name|groups
argument_list|,
name|groupsStr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|allAllowed ()
specifier|public
name|boolean
name|allAllowed
parameter_list|()
block|{
return|return
name|allAllowed
return|;
block|}
DECL|method|getUsers ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getUsers
parameter_list|()
block|{
return|return
name|users
return|;
block|}
DECL|method|getGroups ()
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
DECL|method|addToSet (Set<String> set, String[] strings)
specifier|private
specifier|static
specifier|final
name|void
name|addToSet
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|,
name|String
index|[]
name|strings
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|strings
control|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

