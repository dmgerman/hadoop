begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactories
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableFactory
import|;
end_import

begin_comment
comment|/**  * Object for passing access keys  */
end_comment

begin_class
DECL|class|ExportedAccessKeys
specifier|public
class|class
name|ExportedAccessKeys
implements|implements
name|Writable
block|{
DECL|field|DUMMY_KEYS
specifier|public
specifier|static
specifier|final
name|ExportedAccessKeys
name|DUMMY_KEYS
init|=
operator|new
name|ExportedAccessKeys
argument_list|()
decl_stmt|;
DECL|field|isAccessTokenEnabled
specifier|private
name|boolean
name|isAccessTokenEnabled
decl_stmt|;
DECL|field|keyUpdateInterval
specifier|private
name|long
name|keyUpdateInterval
decl_stmt|;
DECL|field|tokenLifetime
specifier|private
name|long
name|tokenLifetime
decl_stmt|;
DECL|field|currentKey
specifier|private
name|AccessKey
name|currentKey
decl_stmt|;
DECL|field|allKeys
specifier|private
name|AccessKey
index|[]
name|allKeys
decl_stmt|;
DECL|method|ExportedAccessKeys ()
specifier|public
name|ExportedAccessKeys
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|AccessKey
argument_list|()
argument_list|,
operator|new
name|AccessKey
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|ExportedAccessKeys (boolean isAccessTokenEnabled, long keyUpdateInterval, long tokenLifetime, AccessKey currentKey, AccessKey[] allKeys)
name|ExportedAccessKeys
parameter_list|(
name|boolean
name|isAccessTokenEnabled
parameter_list|,
name|long
name|keyUpdateInterval
parameter_list|,
name|long
name|tokenLifetime
parameter_list|,
name|AccessKey
name|currentKey
parameter_list|,
name|AccessKey
index|[]
name|allKeys
parameter_list|)
block|{
name|this
operator|.
name|isAccessTokenEnabled
operator|=
name|isAccessTokenEnabled
expr_stmt|;
name|this
operator|.
name|keyUpdateInterval
operator|=
name|keyUpdateInterval
expr_stmt|;
name|this
operator|.
name|tokenLifetime
operator|=
name|tokenLifetime
expr_stmt|;
name|this
operator|.
name|currentKey
operator|=
name|currentKey
expr_stmt|;
name|this
operator|.
name|allKeys
operator|=
name|allKeys
expr_stmt|;
block|}
DECL|method|isAccessTokenEnabled ()
specifier|public
name|boolean
name|isAccessTokenEnabled
parameter_list|()
block|{
return|return
name|isAccessTokenEnabled
return|;
block|}
DECL|method|getKeyUpdateInterval ()
specifier|public
name|long
name|getKeyUpdateInterval
parameter_list|()
block|{
return|return
name|keyUpdateInterval
return|;
block|}
DECL|method|getTokenLifetime ()
specifier|public
name|long
name|getTokenLifetime
parameter_list|()
block|{
return|return
name|tokenLifetime
return|;
block|}
DECL|method|getCurrentKey ()
specifier|public
name|AccessKey
name|getCurrentKey
parameter_list|()
block|{
return|return
name|currentKey
return|;
block|}
DECL|method|getAllKeys ()
specifier|public
name|AccessKey
index|[]
name|getAllKeys
parameter_list|()
block|{
return|return
name|allKeys
return|;
block|}
DECL|method|isEqual (Object a, Object b)
specifier|static
name|boolean
name|isEqual
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|ExportedAccessKeys
condition|)
block|{
name|ExportedAccessKeys
name|that
init|=
operator|(
name|ExportedAccessKeys
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|isAccessTokenEnabled
operator|==
name|that
operator|.
name|isAccessTokenEnabled
operator|&&
name|this
operator|.
name|keyUpdateInterval
operator|==
name|that
operator|.
name|keyUpdateInterval
operator|&&
name|this
operator|.
name|tokenLifetime
operator|==
name|that
operator|.
name|tokenLifetime
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|currentKey
argument_list|,
name|that
operator|.
name|currentKey
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|this
operator|.
name|allKeys
argument_list|,
name|that
operator|.
name|allKeys
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|currentKey
operator|==
literal|null
condition|?
literal|0
else|:
name|currentKey
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|// ///////////////////////////////////////////////
comment|// Writable
comment|// ///////////////////////////////////////////////
static|static
block|{
comment|// register a ctor
name|WritableFactories
operator|.
name|setFactory
argument_list|(
name|ExportedAccessKeys
operator|.
name|class
argument_list|,
operator|new
name|WritableFactory
argument_list|()
block|{
specifier|public
name|Writable
name|newInstance
parameter_list|()
block|{
return|return
operator|new
name|ExportedAccessKeys
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
name|isAccessTokenEnabled
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|keyUpdateInterval
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|tokenLifetime
argument_list|)
expr_stmt|;
name|currentKey
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|allKeys
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allKeys
index|[
name|i
index|]
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|isAccessTokenEnabled
operator|=
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|keyUpdateInterval
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|tokenLifetime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|currentKey
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|allKeys
operator|=
operator|new
name|AccessKey
index|[
name|in
operator|.
name|readInt
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|allKeys
index|[
name|i
index|]
operator|=
operator|new
name|AccessKey
argument_list|()
expr_stmt|;
name|allKeys
index|[
name|i
index|]
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

