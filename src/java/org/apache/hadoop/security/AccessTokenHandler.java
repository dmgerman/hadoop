begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|GeneralSecurityException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|KeyGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * AccessTokenHandler can be instantiated in 2 modes, master mode and slave  * mode. Master can generate new access keys and export access keys to slaves,  * while slaves can only import and use access keys received from master. Both  * master and slave can generate and verify access tokens. Typically, master  * mode is used by NN and slave mode is used by DN.  */
end_comment

begin_class
DECL|class|AccessTokenHandler
specifier|public
class|class
name|AccessTokenHandler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AccessTokenHandler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|STRING_ENABLE_ACCESS_TOKEN
specifier|public
specifier|static
specifier|final
name|String
name|STRING_ENABLE_ACCESS_TOKEN
init|=
literal|"dfs.access.token.enable"
decl_stmt|;
DECL|field|STRING_ACCESS_KEY_UPDATE_INTERVAL
specifier|public
specifier|static
specifier|final
name|String
name|STRING_ACCESS_KEY_UPDATE_INTERVAL
init|=
literal|"dfs.access.key.update.interval"
decl_stmt|;
DECL|field|STRING_ACCESS_TOKEN_LIFETIME
specifier|public
specifier|static
specifier|final
name|String
name|STRING_ACCESS_TOKEN_LIFETIME
init|=
literal|"dfs.access.token.lifetime"
decl_stmt|;
DECL|field|isMaster
specifier|private
specifier|final
name|boolean
name|isMaster
decl_stmt|;
comment|/*    * keyUpdateInterval is the interval that NN updates its access keys. It    * should be set long enough so that all live DN's and Balancer should have    * sync'ed their access keys with NN at least once during each interval.    */
DECL|field|keyUpdateInterval
specifier|private
specifier|final
name|long
name|keyUpdateInterval
decl_stmt|;
DECL|field|tokenLifetime
specifier|private
name|long
name|tokenLifetime
decl_stmt|;
DECL|field|serialNo
specifier|private
name|long
name|serialNo
init|=
operator|new
name|SecureRandom
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
DECL|field|keyGen
specifier|private
name|KeyGenerator
name|keyGen
decl_stmt|;
DECL|field|currentKey
specifier|private
name|AccessKey
name|currentKey
decl_stmt|;
DECL|field|nextKey
specifier|private
name|AccessKey
name|nextKey
decl_stmt|;
DECL|field|allKeys
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|AccessKey
argument_list|>
name|allKeys
decl_stmt|;
DECL|enum|AccessMode
specifier|public
specifier|static
enum|enum
name|AccessMode
block|{
DECL|enumConstant|READ
DECL|enumConstant|WRITE
DECL|enumConstant|COPY
DECL|enumConstant|REPLACE
name|READ
block|,
name|WRITE
block|,
name|COPY
block|,
name|REPLACE
block|}
empty_stmt|;
comment|/**    * Constructor    *     * @param isMaster    * @param keyUpdateInterval    * @param tokenLifetime    * @throws IOException    */
DECL|method|AccessTokenHandler (boolean isMaster, long keyUpdateInterval, long tokenLifetime)
specifier|public
name|AccessTokenHandler
parameter_list|(
name|boolean
name|isMaster
parameter_list|,
name|long
name|keyUpdateInterval
parameter_list|,
name|long
name|tokenLifetime
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|isMaster
operator|=
name|isMaster
expr_stmt|;
name|this
operator|.
name|keyUpdateInterval
operator|=
name|keyUpdateInterval
expr_stmt|;
name|this
operator|.
name|tokenLifetime
operator|=
name|tokenLifetime
expr_stmt|;
name|this
operator|.
name|allKeys
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|AccessKey
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|isMaster
condition|)
block|{
try|try
block|{
name|generateKeys
argument_list|()
expr_stmt|;
name|initMac
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Failed to create AccessTokenHandler"
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Initialize access keys */
DECL|method|generateKeys ()
specifier|private
specifier|synchronized
name|void
name|generateKeys
parameter_list|()
throws|throws
name|NoSuchAlgorithmException
block|{
name|keyGen
operator|=
name|KeyGenerator
operator|.
name|getInstance
argument_list|(
literal|"HmacSHA1"
argument_list|)
expr_stmt|;
comment|/*      * Need to set estimated expiry dates for currentKey and nextKey so that if      * NN crashes, DN can still expire those keys. NN will stop using the newly      * generated currentKey after the first keyUpdateInterval, however it may      * still be used by DN and Balancer to generate new tokens before they get a      * chance to sync their keys with NN. Since we require keyUpdInterval to be      * long enough so that all live DN's and Balancer will sync their keys with      * NN at least once during the period, the estimated expiry date for      * currentKey is set to now() + 2 * keyUpdateInterval + tokenLifetime.      * Similarly, the estimated expiry date for nextKey is one keyUpdateInterval      * more.      */
name|serialNo
operator|++
expr_stmt|;
name|currentKey
operator|=
operator|new
name|AccessKey
argument_list|(
name|serialNo
argument_list|,
operator|new
name|Text
argument_list|(
name|keyGen
operator|.
name|generateKey
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2
operator|*
name|keyUpdateInterval
operator|+
name|tokenLifetime
argument_list|)
expr_stmt|;
name|serialNo
operator|++
expr_stmt|;
name|nextKey
operator|=
operator|new
name|AccessKey
argument_list|(
name|serialNo
argument_list|,
operator|new
name|Text
argument_list|(
name|keyGen
operator|.
name|generateKey
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3
operator|*
name|keyUpdateInterval
operator|+
name|tokenLifetime
argument_list|)
expr_stmt|;
name|allKeys
operator|.
name|put
argument_list|(
name|currentKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
name|allKeys
operator|.
name|put
argument_list|(
name|nextKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|nextKey
argument_list|)
expr_stmt|;
block|}
comment|/** Initialize Mac function */
DECL|method|initMac (AccessKey key)
specifier|private
specifier|synchronized
name|void
name|initMac
parameter_list|(
name|AccessKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
literal|"HmacSHA1"
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
operator|new
name|SecretKeySpec
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"HmacSHA1"
argument_list|)
argument_list|)
expr_stmt|;
name|key
operator|.
name|setMac
argument_list|(
name|mac
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GeneralSecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Failed to initialize Mac for access key, keyID="
operator|+
name|key
operator|.
name|getKeyID
argument_list|()
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** Export access keys, only to be used in master mode */
DECL|method|exportKeys ()
specifier|public
specifier|synchronized
name|ExportedAccessKeys
name|exportKeys
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isMaster
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exporting access keys"
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExportedAccessKeys
argument_list|(
literal|true
argument_list|,
name|keyUpdateInterval
argument_list|,
name|tokenLifetime
argument_list|,
name|currentKey
argument_list|,
name|allKeys
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|AccessKey
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|removeExpiredKeys ()
specifier|private
specifier|synchronized
name|void
name|removeExpiredKeys
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|AccessKey
argument_list|>
argument_list|>
name|it
init|=
name|allKeys
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|AccessKey
argument_list|>
name|e
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getExpiryDate
argument_list|()
operator|<
name|now
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Set access keys, only to be used in slave mode    */
DECL|method|setKeys (ExportedAccessKeys exportedKeys)
specifier|public
specifier|synchronized
name|void
name|setKeys
parameter_list|(
name|ExportedAccessKeys
name|exportedKeys
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isMaster
operator|||
name|exportedKeys
operator|==
literal|null
condition|)
return|return;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting access keys"
argument_list|)
expr_stmt|;
name|removeExpiredKeys
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentKey
operator|=
name|exportedKeys
operator|.
name|getCurrentKey
argument_list|()
expr_stmt|;
name|initMac
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|AccessKey
index|[]
name|receivedKeys
init|=
name|exportedKeys
operator|.
name|getAllKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|receivedKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|receivedKeys
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
name|this
operator|.
name|allKeys
operator|.
name|put
argument_list|(
name|receivedKeys
index|[
name|i
index|]
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|receivedKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update access keys, only to be used in master mode    */
DECL|method|updateKeys ()
specifier|public
specifier|synchronized
name|void
name|updateKeys
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isMaster
condition|)
return|return;
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating access keys"
argument_list|)
expr_stmt|;
name|removeExpiredKeys
argument_list|()
expr_stmt|;
comment|// set final expiry date of retiring currentKey
name|allKeys
operator|.
name|put
argument_list|(
name|currentKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
operator|new
name|AccessKey
argument_list|(
name|currentKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|currentKey
operator|.
name|getKey
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|keyUpdateInterval
operator|+
name|tokenLifetime
argument_list|)
argument_list|)
expr_stmt|;
comment|// update the estimated expiry date of new currentKey
name|currentKey
operator|=
operator|new
name|AccessKey
argument_list|(
name|nextKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|nextKey
operator|.
name|getKey
argument_list|()
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2
operator|*
name|keyUpdateInterval
operator|+
name|tokenLifetime
argument_list|)
expr_stmt|;
name|initMac
argument_list|(
name|currentKey
argument_list|)
expr_stmt|;
name|allKeys
operator|.
name|put
argument_list|(
name|currentKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|currentKey
argument_list|)
expr_stmt|;
comment|// generate a new nextKey
name|serialNo
operator|++
expr_stmt|;
name|nextKey
operator|=
operator|new
name|AccessKey
argument_list|(
name|serialNo
argument_list|,
operator|new
name|Text
argument_list|(
name|keyGen
operator|.
name|generateKey
argument_list|()
operator|.
name|getEncoded
argument_list|()
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3
operator|*
name|keyUpdateInterval
operator|+
name|tokenLifetime
argument_list|)
expr_stmt|;
name|allKeys
operator|.
name|put
argument_list|(
name|nextKey
operator|.
name|getKeyID
argument_list|()
argument_list|,
name|nextKey
argument_list|)
expr_stmt|;
block|}
comment|/** Check if token is well formed */
DECL|method|verifyToken (long keyID, AccessToken token)
specifier|private
specifier|synchronized
name|boolean
name|verifyToken
parameter_list|(
name|long
name|keyID
parameter_list|,
name|AccessToken
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|AccessKey
name|key
init|=
name|allKeys
operator|.
name|get
argument_list|(
name|keyID
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Access key for keyID="
operator|+
name|keyID
operator|+
literal|" doesn't exist."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|key
operator|.
name|getMac
argument_list|()
operator|==
literal|null
condition|)
block|{
name|initMac
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|Text
name|tokenID
init|=
name|token
operator|.
name|getTokenID
argument_list|()
decl_stmt|;
name|Text
name|authenticator
init|=
operator|new
name|Text
argument_list|(
name|key
operator|.
name|getMac
argument_list|()
operator|.
name|doFinal
argument_list|(
name|tokenID
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|authenticator
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getTokenAuthenticator
argument_list|()
argument_list|)
return|;
block|}
comment|/** Generate an access token for current user */
DECL|method|generateToken (long blockID, EnumSet<AccessMode> modes)
specifier|public
name|AccessToken
name|generateToken
parameter_list|(
name|long
name|blockID
parameter_list|,
name|EnumSet
argument_list|<
name|AccessMode
argument_list|>
name|modes
parameter_list|)
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUGI
argument_list|()
decl_stmt|;
name|String
name|userID
init|=
operator|(
name|ugi
operator|==
literal|null
condition|?
literal|null
else|:
name|ugi
operator|.
name|getUserName
argument_list|()
operator|)
decl_stmt|;
return|return
name|generateToken
argument_list|(
name|userID
argument_list|,
name|blockID
argument_list|,
name|modes
argument_list|)
return|;
block|}
comment|/** Generate an access token for a specified user */
DECL|method|generateToken (String userID, long blockID, EnumSet<AccessMode> modes)
specifier|public
specifier|synchronized
name|AccessToken
name|generateToken
parameter_list|(
name|String
name|userID
parameter_list|,
name|long
name|blockID
parameter_list|,
name|EnumSet
argument_list|<
name|AccessMode
argument_list|>
name|modes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Generating access token for user="
operator|+
name|userID
operator|+
literal|", blockID="
operator|+
name|blockID
operator|+
literal|", access modes="
operator|+
name|modes
operator|+
literal|", keyID="
operator|+
name|currentKey
operator|.
name|getKeyID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modes
operator|==
literal|null
operator|||
name|modes
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"access modes can't be null or empty"
argument_list|)
throw|;
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|tokenLifetime
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|currentKey
operator|.
name|getKeyID
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|userID
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|blockID
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|modes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessMode
name|aMode
range|:
name|modes
control|)
block|{
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|aMode
argument_list|)
expr_stmt|;
block|}
name|Text
name|tokenID
init|=
operator|new
name|Text
argument_list|(
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|AccessToken
argument_list|(
name|tokenID
argument_list|,
operator|new
name|Text
argument_list|(
name|currentKey
operator|.
name|getMac
argument_list|()
operator|.
name|doFinal
argument_list|(
name|tokenID
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/** Check if access should be allowed. userID is not checked if null */
DECL|method|checkAccess (AccessToken token, String userID, long blockID, AccessMode mode)
specifier|public
name|boolean
name|checkAccess
parameter_list|(
name|AccessToken
name|token
parameter_list|,
name|String
name|userID
parameter_list|,
name|long
name|blockID
parameter_list|,
name|AccessMode
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|oExpiry
init|=
literal|0
decl_stmt|;
name|long
name|oKeyID
init|=
literal|0
decl_stmt|;
name|String
name|oUserID
init|=
literal|null
decl_stmt|;
name|long
name|oBlockID
init|=
literal|0
decl_stmt|;
name|EnumSet
argument_list|<
name|AccessMode
argument_list|>
name|oModes
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|AccessMode
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getTokenID
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|oExpiry
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|oKeyID
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|oUserID
operator|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|oBlockID
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|oModes
operator|.
name|add
argument_list|(
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|AccessMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Unable to parse access token for user="
operator|+
name|userID
operator|+
literal|", blockID="
operator|+
name|blockID
operator|+
literal|", access mode="
operator|+
name|mode
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Verifying access token for user="
operator|+
name|userID
operator|+
literal|", blockID="
operator|+
name|blockID
operator|+
literal|", access mode="
operator|+
name|mode
operator|+
literal|", keyID="
operator|+
name|oKeyID
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|userID
operator|==
literal|null
operator|||
name|userID
operator|.
name|equals
argument_list|(
name|oUserID
argument_list|)
operator|)
operator|&&
name|oBlockID
operator|==
name|blockID
operator|&&
operator|!
name|isExpired
argument_list|(
name|oExpiry
argument_list|)
operator|&&
name|oModes
operator|.
name|contains
argument_list|(
name|mode
argument_list|)
operator|&&
name|verifyToken
argument_list|(
name|oKeyID
argument_list|,
name|token
argument_list|)
return|;
block|}
DECL|method|isExpired (long expiryDate)
specifier|private
specifier|static
name|boolean
name|isExpired
parameter_list|(
name|long
name|expiryDate
parameter_list|)
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|expiryDate
return|;
block|}
comment|/** check if a token is expired. for unit test only.    *  return true when token is expired, false otherwise */
DECL|method|isTokenExpired (AccessToken token)
specifier|static
name|boolean
name|isTokenExpired
parameter_list|(
name|AccessToken
name|token
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|buf
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|token
operator|.
name|getTokenID
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|long
name|expiryDate
init|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|isExpired
argument_list|(
name|expiryDate
argument_list|)
return|;
block|}
comment|/** set token lifetime. for unit test only */
DECL|method|setTokenLifetime (long tokenLifetime)
specifier|synchronized
name|void
name|setTokenLifetime
parameter_list|(
name|long
name|tokenLifetime
parameter_list|)
block|{
name|this
operator|.
name|tokenLifetime
operator|=
name|tokenLifetime
expr_stmt|;
block|}
block|}
end_class

end_unit

