begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslServer
import|;
end_import

begin_comment
comment|/**  * A SaslOutputStream is composed of an OutputStream and a SaslServer (or  * SaslClient) so that write() methods first process the data before writing  * them out to the underlying OutputStream. The SaslServer (or SaslClient)  * object must be fully initialized before being used by a SaslOutputStream.  */
end_comment

begin_class
DECL|class|SaslOutputStream
specifier|public
class|class
name|SaslOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|outStream
specifier|private
specifier|final
name|OutputStream
name|outStream
decl_stmt|;
comment|// processed data ready to be written out
DECL|field|saslToken
specifier|private
name|byte
index|[]
name|saslToken
decl_stmt|;
DECL|field|saslClient
specifier|private
specifier|final
name|SaslClient
name|saslClient
decl_stmt|;
DECL|field|saslServer
specifier|private
specifier|final
name|SaslServer
name|saslServer
decl_stmt|;
comment|// buffer holding one byte of incoming data
DECL|field|ibuffer
specifier|private
specifier|final
name|byte
index|[]
name|ibuffer
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
DECL|field|useWrap
specifier|private
specifier|final
name|boolean
name|useWrap
decl_stmt|;
comment|/**    * Constructs a SASLOutputStream from an OutputStream and a SaslServer<br>    * Note: if the specified OutputStream or SaslServer is null, a    * NullPointerException may be thrown later when they are used.    *     * @param outStream    *          the OutputStream to be processed    * @param saslServer    *          an initialized SaslServer object    */
DECL|method|SaslOutputStream (OutputStream outStream, SaslServer saslServer)
specifier|public
name|SaslOutputStream
parameter_list|(
name|OutputStream
name|outStream
parameter_list|,
name|SaslServer
name|saslServer
parameter_list|)
block|{
name|this
operator|.
name|saslServer
operator|=
name|saslServer
expr_stmt|;
name|this
operator|.
name|saslClient
operator|=
literal|null
expr_stmt|;
name|String
name|qop
init|=
operator|(
name|String
operator|)
name|saslServer
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
name|this
operator|.
name|useWrap
operator|=
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
expr_stmt|;
if|if
condition|(
name|useWrap
condition|)
block|{
name|this
operator|.
name|outStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|outStream
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|outStream
operator|=
name|outStream
expr_stmt|;
block|}
block|}
comment|/**    * Constructs a SASLOutputStream from an OutputStream and a SaslClient<br>    * Note: if the specified OutputStream or SaslClient is null, a    * NullPointerException may be thrown later when they are used.    *     * @param outStream    *          the OutputStream to be processed    * @param saslClient    *          an initialized SaslClient object    */
DECL|method|SaslOutputStream (OutputStream outStream, SaslClient saslClient)
specifier|public
name|SaslOutputStream
parameter_list|(
name|OutputStream
name|outStream
parameter_list|,
name|SaslClient
name|saslClient
parameter_list|)
block|{
name|this
operator|.
name|saslServer
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|saslClient
operator|=
name|saslClient
expr_stmt|;
name|String
name|qop
init|=
operator|(
name|String
operator|)
name|saslClient
operator|.
name|getNegotiatedProperty
argument_list|(
name|Sasl
operator|.
name|QOP
argument_list|)
decl_stmt|;
name|this
operator|.
name|useWrap
operator|=
name|qop
operator|!=
literal|null
operator|&&
operator|!
literal|"auth"
operator|.
name|equalsIgnoreCase
argument_list|(
name|qop
argument_list|)
expr_stmt|;
if|if
condition|(
name|useWrap
condition|)
block|{
name|this
operator|.
name|outStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|outStream
argument_list|,
literal|64
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|outStream
operator|=
name|outStream
expr_stmt|;
block|}
block|}
comment|/**    * Disposes of any system resources or security-sensitive information Sasl    * might be using.    *     * @exception SaslException    *              if a SASL error occurs.    */
DECL|method|disposeSasl ()
specifier|private
name|void
name|disposeSasl
parameter_list|()
throws|throws
name|SaslException
block|{
if|if
condition|(
name|saslClient
operator|!=
literal|null
condition|)
block|{
name|saslClient
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
name|saslServer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Writes the specified byte to this output stream.    *     * @param b    *          the<code>byte</code>.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return;
block|}
name|ibuffer
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|write
argument_list|(
name|ibuffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes<code>b.length</code> bytes from the specified byte array to this    * output stream.    *<p>    * The<code>write</code> method of<code>SASLOutputStream</code> calls the    *<code>write</code> method of three arguments with the three arguments    *<code>b</code>,<code>0</code>, and<code>b.length</code>.    *     * @param b    *          the data.    * @exception NullPointerException    *              if<code>b</code> is null.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes<code>len</code> bytes from the specified byte array starting at    * offset<code>off</code> to this output stream.    *     * @param inBuf    *          the data.    * @param off    *          the start offset in the data.    * @param len    *          the number of bytes to write.    * @exception IOException    *              if an I/O error occurs.    */
DECL|method|write (byte[] inBuf, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|inBuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|useWrap
condition|)
block|{
name|outStream
operator|.
name|write
argument_list|(
name|inBuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
name|saslServer
operator|!=
literal|null
condition|)
block|{
comment|// using saslServer
name|saslToken
operator|=
name|saslServer
operator|.
name|wrap
argument_list|(
name|inBuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// using saslClient
name|saslToken
operator|=
name|saslClient
operator|.
name|wrap
argument_list|(
name|inBuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SaslException
name|se
parameter_list|)
block|{
try|try
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SaslException
name|ignored
parameter_list|)
block|{       }
throw|throw
name|se
throw|;
block|}
if|if
condition|(
name|saslToken
operator|!=
literal|null
condition|)
block|{
name|ByteArrayOutputStream
name|byteOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dout
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteOut
argument_list|)
decl_stmt|;
name|dout
operator|.
name|writeInt
argument_list|(
name|saslToken
operator|.
name|length
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|byteOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|outStream
operator|.
name|write
argument_list|(
name|saslToken
argument_list|,
literal|0
argument_list|,
name|saslToken
operator|.
name|length
argument_list|)
expr_stmt|;
name|saslToken
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Flushes this output stream    *     * @exception IOException    *              if an I/O error occurs.    */
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**    * Closes this output stream and releases any system resources associated with    * this stream.    *     * @exception IOException    *              if an I/O error occurs.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|disposeSasl
argument_list|()
expr_stmt|;
name|outStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

