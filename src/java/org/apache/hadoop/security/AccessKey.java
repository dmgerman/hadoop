begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Key used for generating and verifying access tokens  */
end_comment

begin_class
DECL|class|AccessKey
specifier|public
class|class
name|AccessKey
implements|implements
name|Writable
block|{
DECL|field|keyID
specifier|private
name|long
name|keyID
decl_stmt|;
DECL|field|key
specifier|private
name|Text
name|key
decl_stmt|;
DECL|field|expiryDate
specifier|private
name|long
name|expiryDate
decl_stmt|;
DECL|field|mac
specifier|private
name|Mac
name|mac
decl_stmt|;
DECL|method|AccessKey ()
specifier|public
name|AccessKey
parameter_list|()
block|{
name|this
argument_list|(
literal|0L
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|AccessKey (long keyID, Text key, long expiryDate)
specifier|public
name|AccessKey
parameter_list|(
name|long
name|keyID
parameter_list|,
name|Text
name|key
parameter_list|,
name|long
name|expiryDate
parameter_list|)
block|{
name|this
operator|.
name|keyID
operator|=
name|keyID
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|expiryDate
operator|=
name|expiryDate
expr_stmt|;
block|}
DECL|method|getKeyID ()
specifier|public
name|long
name|getKeyID
parameter_list|()
block|{
return|return
name|keyID
return|;
block|}
DECL|method|getKey ()
specifier|public
name|Text
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getExpiryDate ()
specifier|public
name|long
name|getExpiryDate
parameter_list|()
block|{
return|return
name|expiryDate
return|;
block|}
DECL|method|getMac ()
specifier|public
name|Mac
name|getMac
parameter_list|()
block|{
return|return
name|mac
return|;
block|}
DECL|method|setMac (Mac mac)
specifier|public
name|void
name|setMac
parameter_list|(
name|Mac
name|mac
parameter_list|)
block|{
name|this
operator|.
name|mac
operator|=
name|mac
expr_stmt|;
block|}
DECL|method|isEqual (Object a, Object b)
specifier|static
name|boolean
name|isEqual
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|AccessKey
condition|)
block|{
name|AccessKey
name|that
init|=
operator|(
name|AccessKey
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|keyID
operator|==
name|that
operator|.
name|keyID
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|key
argument_list|,
name|that
operator|.
name|key
argument_list|)
operator|&&
name|this
operator|.
name|expiryDate
operator|==
name|that
operator|.
name|expiryDate
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/** {@inheritDoc} */
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|key
operator|==
literal|null
condition|?
literal|0
else|:
name|key
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|// ///////////////////////////////////////////////
comment|// Writable
comment|// ///////////////////////////////////////////////
comment|/**    */
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|keyID
argument_list|)
expr_stmt|;
name|key
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|out
argument_list|,
name|expiryDate
argument_list|)
expr_stmt|;
block|}
comment|/**    */
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|keyID
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|expiryDate
operator|=
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

