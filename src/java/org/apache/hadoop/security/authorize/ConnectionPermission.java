begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authorize
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|VersionedProtocol
import|;
end_import

begin_comment
comment|/**  * {@link Permission} to initiate a connection to a given service.  */
end_comment

begin_class
DECL|class|ConnectionPermission
specifier|public
class|class
name|ConnectionPermission
extends|extends
name|Permission
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|protocol
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
decl_stmt|;
comment|/**    * {@link ConnectionPermission} for a given service.    * @param protocol service to be accessed    */
DECL|method|ConnectionPermission (Class<?> protocol)
specifier|public
name|ConnectionPermission
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|)
block|{
name|super
argument_list|(
name|protocol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|ConnectionPermission
condition|)
block|{
return|return
name|protocol
operator|==
operator|(
operator|(
name|ConnectionPermission
operator|)
name|obj
operator|)
operator|.
name|protocol
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|getActions ()
specifier|public
name|String
name|getActions
parameter_list|()
block|{
return|return
literal|"ALLOW"
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|protocol
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|implies (Permission permission)
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
if|if
condition|(
name|permission
operator|instanceof
name|ConnectionPermission
condition|)
block|{
name|ConnectionPermission
name|that
init|=
operator|(
name|ConnectionPermission
operator|)
name|permission
decl_stmt|;
if|if
condition|(
name|that
operator|.
name|protocol
operator|.
name|equals
argument_list|(
name|VersionedProtocol
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|this
operator|.
name|protocol
operator|.
name|equals
argument_list|(
name|that
operator|.
name|protocol
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ConnectionPermission("
operator|+
name|protocol
operator|.
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

