begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security.authorize
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PermissionCollection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|ProtectionDomain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
operator|.
name|AccessControlList
import|;
end_import

begin_comment
comment|/**  * A {@link Configuration} based security {@link Policy} for Hadoop.  *  * {@link ConfiguredPolicy} works in conjunction with a {@link PolicyProvider}  * for providing service-level authorization for Hadoop.  */
end_comment

begin_class
DECL|class|ConfiguredPolicy
specifier|public
class|class
name|ConfiguredPolicy
extends|extends
name|Policy
implements|implements
name|Configurable
block|{
DECL|field|HADOOP_POLICY_FILE
specifier|public
specifier|static
specifier|final
name|String
name|HADOOP_POLICY_FILE
init|=
literal|"hadoop-policy.xml"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConfiguredPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|policyProvider
specifier|private
name|PolicyProvider
name|policyProvider
decl_stmt|;
DECL|field|permissions
specifier|private
specifier|volatile
name|Map
argument_list|<
name|Principal
argument_list|,
name|Set
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|permissions
decl_stmt|;
DECL|field|allowedPermissions
specifier|private
specifier|volatile
name|Set
argument_list|<
name|Permission
argument_list|>
name|allowedPermissions
decl_stmt|;
DECL|method|ConfiguredPolicy (Configuration conf, PolicyProvider policyProvider)
specifier|public
name|ConfiguredPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PolicyProvider
name|policyProvider
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|policyProvider
operator|=
name|policyProvider
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|implies (ProtectionDomain domain, Permission permission)
specifier|public
name|boolean
name|implies
parameter_list|(
name|ProtectionDomain
name|domain
parameter_list|,
name|Permission
name|permission
parameter_list|)
block|{
comment|// Only make checks for domains having principals
if|if
condition|(
name|domain
operator|.
name|getPrincipals
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|super
operator|.
name|implies
argument_list|(
name|domain
argument_list|,
name|permission
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPermissions (ProtectionDomain domain)
specifier|public
name|PermissionCollection
name|getPermissions
parameter_list|(
name|ProtectionDomain
name|domain
parameter_list|)
block|{
name|PermissionCollection
name|permissionCollection
init|=
name|super
operator|.
name|getPermissions
argument_list|(
name|domain
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|domain
operator|.
name|getPrincipals
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Permission
argument_list|>
name|principalPermissions
init|=
name|permissions
operator|.
name|get
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalPermissions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Permission
name|permission
range|:
name|principalPermissions
control|)
block|{
name|permissionCollection
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Permission
name|permission
range|:
name|allowedPermissions
control|)
block|{
name|permissionCollection
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|permissionCollection
return|;
block|}
annotation|@
name|Override
DECL|method|refresh ()
specifier|public
name|void
name|refresh
parameter_list|()
block|{
comment|// Get the system property 'hadoop.policy.file'
name|String
name|policyFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"hadoop.policy.file"
argument_list|,
name|HADOOP_POLICY_FILE
argument_list|)
decl_stmt|;
comment|// Make a copy of the original config, and load the policy file
name|Configuration
name|policyConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|policyConf
operator|.
name|addResource
argument_list|(
name|policyFile
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Principal
argument_list|,
name|Set
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|newPermissions
init|=
operator|new
name|HashMap
argument_list|<
name|Principal
argument_list|,
name|Set
argument_list|<
name|Permission
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Permission
argument_list|>
name|newAllowPermissions
init|=
operator|new
name|HashSet
argument_list|<
name|Permission
argument_list|>
argument_list|()
decl_stmt|;
comment|// Parse the config file
name|Service
index|[]
name|services
init|=
name|policyProvider
operator|.
name|getServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
name|AccessControlList
name|acl
init|=
operator|new
name|AccessControlList
argument_list|(
name|policyConf
operator|.
name|get
argument_list|(
name|service
operator|.
name|getServiceKey
argument_list|()
argument_list|,
name|AccessControlList
operator|.
name|WILDCARD_ACL_VALUE
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|.
name|allAllowed
argument_list|()
condition|)
block|{
name|newAllowPermissions
operator|.
name|add
argument_list|(
name|service
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Policy - "
operator|+
name|service
operator|.
name|getPermission
argument_list|()
operator|+
literal|" * "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|user
range|:
name|acl
operator|.
name|getUsers
argument_list|()
control|)
block|{
name|addPermission
argument_list|(
name|newPermissions
argument_list|,
operator|new
name|User
argument_list|(
name|user
argument_list|)
argument_list|,
name|service
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|group
range|:
name|acl
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|addPermission
argument_list|(
name|newPermissions
argument_list|,
operator|new
name|Group
argument_list|(
name|group
argument_list|)
argument_list|,
name|service
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Flip to the newly parsed permissions
name|allowedPermissions
operator|=
name|newAllowPermissions
expr_stmt|;
name|permissions
operator|=
name|newPermissions
expr_stmt|;
block|}
DECL|method|addPermission (Map<Principal, Set<Permission>> permissions, Principal principal, Permission permission)
specifier|private
name|void
name|addPermission
parameter_list|(
name|Map
argument_list|<
name|Principal
argument_list|,
name|Set
argument_list|<
name|Permission
argument_list|>
argument_list|>
name|permissions
parameter_list|,
name|Principal
name|principal
parameter_list|,
name|Permission
name|permission
parameter_list|)
block|{
name|Set
argument_list|<
name|Permission
argument_list|>
name|principalPermissions
init|=
name|permissions
operator|.
name|get
argument_list|(
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalPermissions
operator|==
literal|null
condition|)
block|{
name|principalPermissions
operator|=
operator|new
name|HashSet
argument_list|<
name|Permission
argument_list|>
argument_list|()
expr_stmt|;
name|permissions
operator|.
name|put
argument_list|(
name|principal
argument_list|,
name|principalPermissions
argument_list|)
expr_stmt|;
block|}
name|principalPermissions
operator|.
name|add
argument_list|(
name|permission
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Policy - Adding  "
operator|+
name|permission
operator|+
literal|" to "
operator|+
name|principal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

