begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_comment
comment|/**  * Save the full and short name of the user as a principal. This allows us to  * have a single type that we always look for when picking up user names.  */
end_comment

begin_class
DECL|class|User
class|class
name|User
implements|implements
name|Principal
block|{
DECL|field|fullName
specifier|private
specifier|final
name|String
name|fullName
decl_stmt|;
DECL|field|shortName
specifier|private
specifier|final
name|String
name|shortName
decl_stmt|;
DECL|field|authMethod
specifier|private
name|AuthenticationMethod
name|authMethod
init|=
literal|null
decl_stmt|;
DECL|method|User (String name)
specifier|public
name|User
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|User (String name, AuthenticationMethod authMethod)
specifier|public
name|User
parameter_list|(
name|String
name|name
parameter_list|,
name|AuthenticationMethod
name|authMethod
parameter_list|)
block|{
name|fullName
operator|=
name|name
expr_stmt|;
name|int
name|atIdx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|atIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|shortName
operator|=
name|name
expr_stmt|;
block|}
else|else
block|{
name|int
name|slashIdx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slashIdx
operator|==
operator|-
literal|1
operator|||
name|atIdx
operator|<
name|slashIdx
condition|)
block|{
name|shortName
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|atIdx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shortName
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|slashIdx
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|authMethod
operator|=
name|authMethod
expr_stmt|;
block|}
comment|/**    * Get the full name of the user.    */
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
comment|/**    * Get the user name up to the first '/' or '@'    * @return the leading part of the user name    */
DECL|method|getShortName ()
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
name|shortName
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|fullName
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|User
operator|)
name|o
operator|)
operator|.
name|fullName
argument_list|)
operator|)
operator|&&
operator|(
name|authMethod
operator|==
operator|(
operator|(
name|User
operator|)
name|o
operator|)
operator|.
name|authMethod
operator|)
operator|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|fullName
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|fullName
return|;
block|}
DECL|method|setAuthenticationMethod (AuthenticationMethod authMethod)
specifier|public
name|void
name|setAuthenticationMethod
parameter_list|(
name|AuthenticationMethod
name|authMethod
parameter_list|)
block|{
name|this
operator|.
name|authMethod
operator|=
name|authMethod
expr_stmt|;
block|}
DECL|method|getAuthenticationMethod ()
specifier|public
name|AuthenticationMethod
name|getAuthenticationMethod
parameter_list|()
block|{
return|return
name|authMethod
return|;
block|}
block|}
end_class

end_unit

