begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.net
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Specialized SocketFactory to create sockets with a SOCKS proxy  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Evolving
DECL|class|SocksSocketFactory
specifier|public
class|class
name|SocksSocketFactory
extends|extends
name|SocketFactory
implements|implements
name|Configurable
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|proxy
specifier|private
name|Proxy
name|proxy
decl_stmt|;
comment|/**    * Default empty constructor (for use with the reflection API).    */
DECL|method|SocksSocketFactory ()
specifier|public
name|SocksSocketFactory
parameter_list|()
block|{
name|this
operator|.
name|proxy
operator|=
name|Proxy
operator|.
name|NO_PROXY
expr_stmt|;
block|}
comment|/**    * Constructor with a supplied Proxy    *     * @param proxy the proxy to use to create sockets    */
DECL|method|SocksSocketFactory (Proxy proxy)
specifier|public
name|SocksSocketFactory
parameter_list|(
name|Proxy
name|proxy
parameter_list|)
block|{
name|this
operator|.
name|proxy
operator|=
name|proxy
expr_stmt|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|createSocket ()
specifier|public
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Socket
argument_list|(
name|proxy
argument_list|)
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|createSocket (InetAddress addr, int port)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|socket
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|socket
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|addr
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|createSocket (InetAddress addr, int port, InetAddress localHostAddr, int localPort)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|InetAddress
name|addr
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localHostAddr
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|socket
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|socket
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|localHostAddr
argument_list|,
name|localPort
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|addr
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|createSocket (String host, int port)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|Socket
name|socket
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|socket
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|createSocket (String host, int port, InetAddress localHostAddr, int localPort)
specifier|public
name|Socket
name|createSocket
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|InetAddress
name|localHostAddr
parameter_list|,
name|int
name|localPort
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|Socket
name|socket
init|=
name|createSocket
argument_list|()
decl_stmt|;
name|socket
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|localHostAddr
argument_list|,
name|localPort
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|proxy
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/* @inheritDoc */
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|SocksSocketFactory
operator|)
condition|)
return|return
literal|false
return|;
specifier|final
name|SocksSocketFactory
name|other
init|=
operator|(
name|SocksSocketFactory
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|proxy
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|proxy
operator|.
name|equals
argument_list|(
name|other
operator|.
name|proxy
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|/* @inheritDoc */
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
comment|/* @inheritDoc */
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|proxyStr
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hadoop.socks.server"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|proxyStr
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|proxyStr
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
name|setProxy
argument_list|(
name|proxyStr
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the proxy of this socket factory as described in the string    * parameter    *     * @param proxyStr the proxy address using the format "host:port"    */
DECL|method|setProxy (String proxyStr)
specifier|private
name|void
name|setProxy
parameter_list|(
name|String
name|proxyStr
parameter_list|)
block|{
name|String
index|[]
name|strs
init|=
name|proxyStr
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|strs
operator|.
name|length
operator|!=
literal|2
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Bad SOCKS proxy parameter: "
operator|+
name|proxyStr
argument_list|)
throw|;
name|String
name|host
init|=
name|strs
index|[
literal|0
index|]
decl_stmt|;
name|int
name|port
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|this
operator|.
name|proxy
operator|=
operator|new
name|Proxy
argument_list|(
name|Proxy
operator|.
name|Type
operator|.
name|SOCKS
argument_list|,
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

