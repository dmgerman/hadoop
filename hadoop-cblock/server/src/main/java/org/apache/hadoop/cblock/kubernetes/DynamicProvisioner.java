begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.kubernetes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|kubernetes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|reflect
operator|.
name|TypeToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|squareup
operator|.
name|okhttp
operator|.
name|RequestBody
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|ApiClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|ApiException
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|apis
operator|.
name|CoreV1Api
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|models
operator|.
name|V1ISCSIVolumeSource
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|models
operator|.
name|V1ObjectMeta
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|models
operator|.
name|V1ObjectReference
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|models
operator|.
name|V1PersistentVolume
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|models
operator|.
name|V1PersistentVolumeClaim
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|models
operator|.
name|V1PersistentVolumeSpec
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|util
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|io
operator|.
name|kubernetes
operator|.
name|client
operator|.
name|util
operator|.
name|Watch
import|;
end_import

begin_import
import|import
name|okio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CblockUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|exception
operator|.
name|CBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|MountVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|storage
operator|.
name|StorageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ratis
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_ISCSI_ADVERTISED_IP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_ISCSI_ADVERTISED_PORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_ISCSI_ADVERTISED_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_JSCSI_SERVER_ADDRESS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_JSCSI_SERVER_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_KUBERNETES_CBLOCK_USER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_KUBERNETES_CBLOCK_USER_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_KUBERNETES_CONFIG_FILE_KEY
import|;
end_import

begin_comment
comment|/**  * Kubernetes Dynamic Persistent Volume provisioner.  *  * Listens on the kubernetes feed and creates the appropriate cblock AND  * kubernetes PersistentVolume according to the created PersistentVolumeClaims.  */
end_comment

begin_class
DECL|class|DynamicProvisioner
specifier|public
class|class
name|DynamicProvisioner
implements|implements
name|Runnable
block|{
DECL|field|LOGGER
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DynamicProvisioner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|STORAGE_CLASS
specifier|private
specifier|static
specifier|final
name|String
name|STORAGE_CLASS
init|=
literal|"cblock"
decl_stmt|;
DECL|field|PROVISIONER_ID
specifier|private
specifier|static
specifier|final
name|String
name|PROVISIONER_ID
init|=
literal|"hadoop.apache.org/cblock"
decl_stmt|;
DECL|field|KUBERNETES_PROVISIONER_KEY
specifier|private
specifier|static
specifier|final
name|String
name|KUBERNETES_PROVISIONER_KEY
init|=
literal|"volume.beta.kubernetes.io/storage-provisioner"
decl_stmt|;
DECL|field|KUBERNETES_BIND_COMPLETED_KEY
specifier|private
specifier|static
specifier|final
name|String
name|KUBERNETES_BIND_COMPLETED_KEY
init|=
literal|"pv.kubernetes.io/bind-completed"
decl_stmt|;
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
DECL|field|storageManager
specifier|private
specifier|final
name|StorageManager
name|storageManager
decl_stmt|;
DECL|field|kubernetesConfigFile
specifier|private
name|String
name|kubernetesConfigFile
decl_stmt|;
DECL|field|externalIp
specifier|private
name|String
name|externalIp
decl_stmt|;
DECL|field|externalPort
specifier|private
name|int
name|externalPort
decl_stmt|;
DECL|field|cblockUser
specifier|private
name|String
name|cblockUser
decl_stmt|;
DECL|field|api
specifier|private
name|CoreV1Api
name|api
decl_stmt|;
DECL|field|client
specifier|private
name|ApiClient
name|client
decl_stmt|;
DECL|field|watcherThread
specifier|private
name|Thread
name|watcherThread
decl_stmt|;
DECL|method|DynamicProvisioner (OzoneConfiguration ozoneConf, StorageManager storageManager)
specifier|public
name|DynamicProvisioner
parameter_list|(
name|OzoneConfiguration
name|ozoneConf
parameter_list|,
name|StorageManager
name|storageManager
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|storageManager
operator|=
name|storageManager
expr_stmt|;
name|kubernetesConfigFile
operator|=
name|ozoneConf
operator|.
name|getTrimmed
argument_list|(
name|DFS_CBLOCK_KUBERNETES_CONFIG_FILE_KEY
argument_list|)
expr_stmt|;
name|String
name|jscsiServerAddress
init|=
name|ozoneConf
operator|.
name|get
argument_list|(
name|DFS_CBLOCK_JSCSI_SERVER_ADDRESS_KEY
argument_list|,
name|DFS_CBLOCK_JSCSI_SERVER_ADDRESS_DEFAULT
argument_list|)
decl_stmt|;
name|externalIp
operator|=
name|ozoneConf
operator|.
name|getTrimmed
argument_list|(
name|DFS_CBLOCK_ISCSI_ADVERTISED_IP
argument_list|,
name|jscsiServerAddress
argument_list|)
expr_stmt|;
name|externalPort
operator|=
name|ozoneConf
operator|.
name|getInt
argument_list|(
name|DFS_CBLOCK_ISCSI_ADVERTISED_PORT
argument_list|,
name|DFS_CBLOCK_ISCSI_ADVERTISED_PORT_DEFAULT
argument_list|)
expr_stmt|;
name|cblockUser
operator|=
name|ozoneConf
operator|.
name|getTrimmed
argument_list|(
name|DFS_CBLOCK_KUBERNETES_CBLOCK_USER
argument_list|,
name|DFS_CBLOCK_KUBERNETES_CBLOCK_USER_DEFAULT
argument_list|)
expr_stmt|;
block|}
DECL|method|init ()
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|kubernetesConfigFile
operator|!=
literal|null
condition|)
block|{
name|client
operator|=
name|Config
operator|.
name|fromConfig
argument_list|(
name|kubernetesConfigFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
operator|=
name|Config
operator|.
name|fromCluster
argument_list|()
expr_stmt|;
block|}
name|client
operator|.
name|getHttpClient
argument_list|()
operator|.
name|setReadTimeout
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|setDefaultApiClient
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|api
operator|=
operator|new
name|CoreV1Api
argument_list|()
expr_stmt|;
name|watcherThread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|watcherThread
operator|.
name|setName
argument_list|(
literal|"DynamicProvisioner"
argument_list|)
expr_stmt|;
name|watcherThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Starting kubernetes dynamic provisioner."
argument_list|)
expr_stmt|;
while|while
condition|(
name|running
condition|)
block|{
name|String
name|resourceVersion
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Watch
argument_list|<
name|V1PersistentVolumeClaim
argument_list|>
name|watch
init|=
name|Watch
operator|.
name|createWatch
argument_list|(
name|client
argument_list|,
name|api
operator|.
name|listPersistentVolumeClaimForAllNamespacesCall
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|resourceVersion
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|TypeToken
argument_list|<
name|Watch
operator|.
name|Response
argument_list|<
name|V1PersistentVolumeClaim
argument_list|>
argument_list|>
argument_list|()
block|{             }
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
comment|//check the new pvc resources, and create cblock + pv if needed
for|for
control|(
name|Watch
operator|.
name|Response
argument_list|<
name|V1PersistentVolumeClaim
argument_list|>
name|item
range|:
name|watch
control|)
block|{
name|V1PersistentVolumeClaim
name|claim
init|=
name|item
operator|.
name|object
decl_stmt|;
if|if
condition|(
name|isPvMissingForPvc
argument_list|(
name|claim
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Provisioning volumes for PVC {}/{}"
argument_list|,
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|,
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RequestBody
name|request
init|=
name|api
operator|.
name|getApiClient
argument_list|()
operator|.
name|serialize
argument_list|(
name|claim
argument_list|,
literal|"application/json"
argument_list|)
decl_stmt|;
specifier|final
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|()
decl_stmt|;
name|request
operator|.
name|writeTo
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"New PVC is detected: "
operator|+
name|buffer
operator|.
name|readUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|volumeName
init|=
name|createVolumeName
argument_list|(
name|claim
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|CblockUtils
operator|.
name|parseSize
argument_list|(
name|claim
operator|.
name|getSpec
argument_list|()
operator|.
name|getResources
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|"storage"
argument_list|)
argument_list|)
decl_stmt|;
name|createCBlock
argument_list|(
name|volumeName
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|createPersistentVolumeFromPVC
argument_list|(
name|item
operator|.
name|object
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|ex
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SocketTimeoutException
condition|)
block|{
comment|//This is normal. We are connection to the kubernetes server and the
comment|//connection should be reopened time to time...
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Time exception occured"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error on provisioning persistent volumes."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
try|try
block|{
comment|//we can try again in the main loop
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Error on sleeping after an error."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|isPvMissingForPvc (V1PersistentVolumeClaim claim)
specifier|private
name|boolean
name|isPvMissingForPvc
parameter_list|(
name|V1PersistentVolumeClaim
name|claim
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|annotations
init|=
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getAnnotations
argument_list|()
decl_stmt|;
return|return
name|claim
operator|.
name|getStatus
argument_list|()
operator|.
name|getPhase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Pending"
argument_list|)
operator|&&
name|STORAGE_CLASS
operator|.
name|equals
argument_list|(
name|claim
operator|.
name|getSpec
argument_list|()
operator|.
name|getStorageClassName
argument_list|()
argument_list|)
operator|&&
name|PROVISIONER_ID
operator|.
name|equals
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
name|KUBERNETES_PROVISIONER_KEY
argument_list|)
argument_list|)
operator|&&
operator|!
literal|"yes"
operator|.
name|equals
argument_list|(
name|annotations
operator|.
name|get
argument_list|(
name|KUBERNETES_BIND_COMPLETED_KEY
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createVolumeName (V1PersistentVolumeClaim claim)
specifier|protected
name|String
name|createVolumeName
parameter_list|(
name|V1PersistentVolumeClaim
name|claim
parameter_list|)
block|{
return|return
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-"
operator|+
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getUid
argument_list|()
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|running
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|watcherThread
operator|.
name|join
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Kubernetes watcher thread can't stopped gracefully."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCBlock (String volumeName, long size)
specifier|private
name|void
name|createCBlock
parameter_list|(
name|String
name|volumeName
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|CBlockException
block|{
name|MountVolumeResponse
name|mountVolumeResponse
init|=
name|storageManager
operator|.
name|isVolumeValid
argument_list|(
name|cblockUser
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mountVolumeResponse
operator|.
name|getIsValid
argument_list|()
condition|)
block|{
name|storageManager
operator|.
name|createVolume
argument_list|(
name|cblockUser
argument_list|,
name|volumeName
argument_list|,
name|size
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createPersistentVolumeFromPVC (V1PersistentVolumeClaim claim, String volumeName)
specifier|private
name|void
name|createPersistentVolumeFromPVC
parameter_list|(
name|V1PersistentVolumeClaim
name|claim
parameter_list|,
name|String
name|volumeName
parameter_list|)
throws|throws
name|ApiException
throws|,
name|IOException
block|{
name|V1PersistentVolume
name|v1PersistentVolume
init|=
name|persitenceVolumeBuilder
argument_list|(
name|claim
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOGGER
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|RequestBody
name|request
init|=
name|api
operator|.
name|getApiClient
argument_list|()
operator|.
name|serialize
argument_list|(
name|v1PersistentVolume
argument_list|,
literal|"application/json"
argument_list|)
decl_stmt|;
specifier|final
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|()
decl_stmt|;
name|request
operator|.
name|writeTo
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Creating new PV: "
operator|+
name|buffer
operator|.
name|readUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|api
operator|.
name|createPersistentVolume
argument_list|(
name|v1PersistentVolume
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|persitenceVolumeBuilder ( V1PersistentVolumeClaim claim, String volumeName)
specifier|protected
name|V1PersistentVolume
name|persitenceVolumeBuilder
parameter_list|(
name|V1PersistentVolumeClaim
name|claim
parameter_list|,
name|String
name|volumeName
parameter_list|)
block|{
name|V1PersistentVolume
name|v1PersistentVolume
init|=
operator|new
name|V1PersistentVolume
argument_list|()
decl_stmt|;
name|v1PersistentVolume
operator|.
name|setKind
argument_list|(
literal|"PersistentVolume"
argument_list|)
expr_stmt|;
name|v1PersistentVolume
operator|.
name|setApiVersion
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|V1ObjectMeta
name|metadata
init|=
operator|new
name|V1ObjectMeta
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|setName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setNamespace
argument_list|(
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|setAnnotations
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|getAnnotations
argument_list|()
operator|.
name|put
argument_list|(
literal|"pv.kubernetes.io/provisioned-by"
argument_list|,
name|PROVISIONER_ID
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|getAnnotations
argument_list|()
operator|.
name|put
argument_list|(
literal|"volume.beta.kubernetes.io/storage-class"
argument_list|,
name|STORAGE_CLASS
argument_list|)
expr_stmt|;
name|v1PersistentVolume
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|V1PersistentVolumeSpec
name|spec
init|=
operator|new
name|V1PersistentVolumeSpec
argument_list|()
decl_stmt|;
name|spec
operator|.
name|setCapacity
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|spec
operator|.
name|getCapacity
argument_list|()
operator|.
name|put
argument_list|(
literal|"storage"
argument_list|,
name|claim
operator|.
name|getSpec
argument_list|()
operator|.
name|getResources
argument_list|()
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|"storage"
argument_list|)
argument_list|)
expr_stmt|;
name|spec
operator|.
name|setAccessModes
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|spec
operator|.
name|getAccessModes
argument_list|()
operator|.
name|add
argument_list|(
literal|"ReadWriteOnce"
argument_list|)
expr_stmt|;
name|V1ObjectReference
name|claimRef
init|=
operator|new
name|V1ObjectReference
argument_list|()
decl_stmt|;
name|claimRef
operator|.
name|setName
argument_list|(
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|claimRef
operator|.
name|setNamespace
argument_list|(
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|claimRef
operator|.
name|setKind
argument_list|(
name|claim
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|claimRef
operator|.
name|setApiVersion
argument_list|(
name|claim
operator|.
name|getApiVersion
argument_list|()
argument_list|)
expr_stmt|;
name|claimRef
operator|.
name|setUid
argument_list|(
name|claim
operator|.
name|getMetadata
argument_list|()
operator|.
name|getUid
argument_list|()
argument_list|)
expr_stmt|;
name|spec
operator|.
name|setClaimRef
argument_list|(
name|claimRef
argument_list|)
expr_stmt|;
name|spec
operator|.
name|persistentVolumeReclaimPolicy
argument_list|(
literal|"Delete"
argument_list|)
expr_stmt|;
name|V1ISCSIVolumeSource
name|iscsi
init|=
operator|new
name|V1ISCSIVolumeSource
argument_list|()
decl_stmt|;
name|iscsi
operator|.
name|setIqn
argument_list|(
name|cblockUser
operator|+
literal|":"
operator|+
name|volumeName
argument_list|)
expr_stmt|;
name|iscsi
operator|.
name|setLun
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iscsi
operator|.
name|setFsType
argument_list|(
literal|"ext4"
argument_list|)
expr_stmt|;
name|String
name|portal
init|=
name|externalIp
operator|+
literal|":"
operator|+
name|externalPort
decl_stmt|;
name|iscsi
operator|.
name|setTargetPortal
argument_list|(
name|portal
argument_list|)
expr_stmt|;
name|iscsi
operator|.
name|setPortals
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|iscsi
operator|.
name|getPortals
argument_list|()
operator|.
name|add
argument_list|(
name|portal
argument_list|)
expr_stmt|;
name|spec
operator|.
name|iscsi
argument_list|(
name|iscsi
argument_list|)
expr_stmt|;
name|v1PersistentVolume
operator|.
name|setSpec
argument_list|(
name|spec
argument_list|)
expr_stmt|;
return|return
name|v1PersistentVolume
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getApi ()
specifier|protected
name|CoreV1Api
name|getApi
parameter_list|()
block|{
return|return
name|api
return|;
block|}
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|watcherThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

