begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|CBlockClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|MountVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockClientServerProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockServiceProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * The server side implementation of cblock client to server protocol.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CBlockClientServerProtocolServerSideTranslatorPB
specifier|public
class|class
name|CBlockClientServerProtocolServerSideTranslatorPB
implements|implements
name|CBlockClientServerProtocolPB
block|{
DECL|field|impl
specifier|private
specifier|final
name|CBlockClientProtocol
name|impl
decl_stmt|;
DECL|method|CBlockClientServerProtocolServerSideTranslatorPB ( CBlockClientProtocol impl)
specifier|public
name|CBlockClientServerProtocolServerSideTranslatorPB
parameter_list|(
name|CBlockClientProtocol
name|impl
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|mountVolume ( RpcController controller, CBlockClientServerProtocolProtos.MountVolumeRequestProto request)
specifier|public
name|CBlockClientServerProtocolProtos
operator|.
name|MountVolumeResponseProto
name|mountVolume
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CBlockClientServerProtocolProtos
operator|.
name|MountVolumeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|String
name|userName
init|=
name|request
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|String
name|volumeName
init|=
name|request
operator|.
name|getVolumeName
argument_list|()
decl_stmt|;
name|CBlockClientServerProtocolProtos
operator|.
name|MountVolumeResponseProto
operator|.
name|Builder
name|resp
init|=
name|CBlockClientServerProtocolProtos
operator|.
name|MountVolumeResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|MountVolumeResponse
name|result
init|=
name|impl
operator|.
name|mountVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
name|boolean
name|isValid
init|=
name|result
operator|.
name|getIsValid
argument_list|()
decl_stmt|;
name|resp
operator|.
name|setIsValid
argument_list|(
name|isValid
argument_list|)
expr_stmt|;
if|if
condition|(
name|isValid
condition|)
block|{
name|resp
operator|.
name|setUserName
argument_list|(
name|result
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setVolumeName
argument_list|(
name|result
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setVolumeSize
argument_list|(
name|result
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setBlockSize
argument_list|(
name|result
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Pipeline
argument_list|>
name|containers
init|=
name|result
operator|.
name|getContainerList
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pipeline
argument_list|>
name|pipelineMap
init|=
name|result
operator|.
name|getPipelineMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CBlockClientServerProtocolProtos
operator|.
name|ContainerIDProto
operator|.
name|Builder
name|id
init|=
name|CBlockClientServerProtocolProtos
operator|.
name|ContainerIDProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|String
name|containerName
init|=
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerName
argument_list|()
decl_stmt|;
name|id
operator|.
name|setContainerID
argument_list|(
name|containerName
argument_list|)
expr_stmt|;
name|id
operator|.
name|setIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|pipelineMap
operator|.
name|containsKey
argument_list|(
name|containerName
argument_list|)
condition|)
block|{
name|id
operator|.
name|setPipeline
argument_list|(
name|pipelineMap
operator|.
name|get
argument_list|(
name|containerName
argument_list|)
operator|.
name|getProtobufMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|resp
operator|.
name|addAllContainerIDs
argument_list|(
name|id
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listVolumes ( RpcController controller, CBlockClientServerProtocolProtos.ListVolumesRequestProto request)
specifier|public
name|CBlockClientServerProtocolProtos
operator|.
name|ListVolumesResponseProto
name|listVolumes
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CBlockClientServerProtocolProtos
operator|.
name|ListVolumesRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
try|try
block|{
name|CBlockClientServerProtocolProtos
operator|.
name|ListVolumesResponseProto
operator|.
name|Builder
name|resp
init|=
name|CBlockClientServerProtocolProtos
operator|.
name|ListVolumesResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumeInfos
init|=
name|impl
operator|.
name|listVolumes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
argument_list|>
name|convertedInfos
init|=
name|volumeInfos
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|volumeInfo
lambda|->
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserName
argument_list|(
name|volumeInfo
operator|.
name|getUserName
argument_list|()
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|volumeInfo
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
name|volumeInfo
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
operator|.
name|setUsage
argument_list|(
name|volumeInfo
operator|.
name|getUsage
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|resp
operator|.
name|addAllVolumeEntry
argument_list|(
name|convertedInfos
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

