begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.jscsiHelper
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|digest
operator|.
name|DigestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|CacheModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|LogicalBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|impl
operator|.
name|CBlockLocalCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdds
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jscsi
operator|.
name|target
operator|.
name|storage
operator|.
name|IStorageModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_TRACE_IO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_TRACE_IO_DEFAULT
import|;
end_import

begin_comment
comment|/**  * The SCSI Target class for CBlockSCSIServer.  */
end_comment

begin_class
DECL|class|CBlockIStorageImpl
specifier|final
specifier|public
class|class
name|CBlockIStorageImpl
implements|implements
name|IStorageModule
block|{
DECL|field|LOGGER
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CBlockIStorageImpl
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TRACER
specifier|private
specifier|static
specifier|final
name|Logger
name|TRACER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"TraceIO"
argument_list|)
decl_stmt|;
DECL|field|cache
specifier|private
name|CacheModule
name|cache
decl_stmt|;
DECL|field|volumeSize
specifier|private
specifier|final
name|long
name|volumeSize
decl_stmt|;
DECL|field|blockSize
specifier|private
specifier|final
name|int
name|blockSize
decl_stmt|;
DECL|field|userName
specifier|private
specifier|final
name|String
name|userName
decl_stmt|;
DECL|field|volumeName
specifier|private
specifier|final
name|String
name|volumeName
decl_stmt|;
DECL|field|traceEnabled
specifier|private
specifier|final
name|boolean
name|traceEnabled
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|flusher
specifier|private
specifier|final
name|ContainerCacheFlusher
name|flusher
decl_stmt|;
DECL|field|fullContainerList
specifier|private
name|List
argument_list|<
name|Pipeline
argument_list|>
name|fullContainerList
decl_stmt|;
comment|/**    * private: constructs a SCSI Target.    *    * @param config - config    * @param userName - Username    * @param volumeName - Name of the volume    * @param volumeSize - Size of the volume    * @param blockSize - Size of the block    * @param fullContainerList - Ordered list of containers that make up this    * volume.    * @param flusher - flusher which is used to flush data from    *                  level db cache to containers    * @throws IOException - Throws IOException.    */
DECL|method|CBlockIStorageImpl (Configuration config, String userName, String volumeName, long volumeSize, int blockSize, List<Pipeline> fullContainerList, ContainerCacheFlusher flusher)
specifier|private
name|CBlockIStorageImpl
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|volumeName
parameter_list|,
name|long
name|volumeSize
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|List
argument_list|<
name|Pipeline
argument_list|>
name|fullContainerList
parameter_list|,
name|ContainerCacheFlusher
name|flusher
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
name|this
operator|.
name|volumeName
operator|=
name|volumeName
expr_stmt|;
name|this
operator|.
name|volumeSize
operator|=
name|volumeSize
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|fullContainerList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|fullContainerList
argument_list|)
expr_stmt|;
name|this
operator|.
name|flusher
operator|=
name|flusher
expr_stmt|;
name|this
operator|.
name|traceEnabled
operator|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|DFS_CBLOCK_TRACE_IO
argument_list|,
name|DFS_CBLOCK_TRACE_IO_DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|/**    * private: initialize the cache.    *    * @param xceiverClientManager - client manager that is used for creating new    * connections to containers.    * @param metrics  - target metrics to maintain metrics for target server    * @throws IOException - Throws IOException.    */
DECL|method|initCache (XceiverClientManager xceiverClientManager, CBlockTargetMetrics metrics)
specifier|private
name|void
name|initCache
parameter_list|(
name|XceiverClientManager
name|xceiverClientManager
parameter_list|,
name|CBlockTargetMetrics
name|metrics
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|cache
operator|=
name|CBlockLocalCache
operator|.
name|newBuilder
argument_list|()
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|this
operator|.
name|volumeName
argument_list|)
operator|.
name|setUserName
argument_list|(
name|this
operator|.
name|userName
argument_list|)
operator|.
name|setPipelines
argument_list|(
name|this
operator|.
name|fullContainerList
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
name|volumeSize
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|flusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|cache
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Gets a new builder for CBlockStorageImpl.    *    * @return builder    */
DECL|method|newBuilder ()
specifier|public
specifier|static
name|Builder
name|newBuilder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Get Cache.    *    * @return - Cache    */
DECL|method|getCache ()
specifier|public
name|CacheModule
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
comment|/**    * Returns block size of this volume.    *    * @return int size of block for this volume.    */
annotation|@
name|Override
DECL|method|getBlockSize ()
specifier|public
name|int
name|getBlockSize
parameter_list|()
block|{
return|return
name|blockSize
return|;
block|}
comment|/**    * Checks the index boundary of a block address.    *    * @param logicalBlockAddress the index of the first block of data to be read    * or written    * @param transferLengthInBlocks the total number of consecutive blocks about    * to be read or written    * @return 0 == Success, 1 indicates the LBA address is out of bounds and 2    * indicates that LBA + transfer size is out of bounds.    */
annotation|@
name|Override
DECL|method|checkBounds (long logicalBlockAddress, int transferLengthInBlocks)
specifier|public
name|int
name|checkBounds
parameter_list|(
name|long
name|logicalBlockAddress
parameter_list|,
name|int
name|transferLengthInBlocks
parameter_list|)
block|{
name|long
name|sizeInBlocks
init|=
name|volumeSize
operator|/
name|blockSize
decl_stmt|;
name|int
name|res
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|logicalBlockAddress
operator|<
literal|0
operator|||
name|logicalBlockAddress
operator|>=
name|sizeInBlocks
condition|)
block|{
name|res
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|transferLengthInBlocks
argument_list|<
literal|0
operator|||
name|logicalBlockAddress
operator|+
name|transferLengthInBlocks
argument_list|>
name|sizeInBlocks
condition|)
block|{
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
name|res
operator|=
literal|2
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
comment|/**    * Number of blocks that make up this volume.    *    * @return long - count of blocks.    */
annotation|@
name|Override
DECL|method|getSizeInBlocks ()
specifier|public
name|long
name|getSizeInBlocks
parameter_list|()
block|{
return|return
name|volumeSize
operator|/
name|blockSize
return|;
block|}
comment|/**    * Reads the number of bytes that can be read into the bytes buffer from the    * location indicated.    *    * @param bytes the array into which the data will be copied will be filled    * with data from storage    * @param storageIndex the position of the first byte to be copied    * @throws IOException    */
annotation|@
name|Override
DECL|method|read (byte[] bytes, long storageIndex)
specifier|public
name|void
name|read
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|long
name|storageIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|startingIdxInBlock
init|=
operator|(
name|int
operator|)
name|storageIndex
operator|%
name|blockSize
decl_stmt|;
name|int
name|idxInBytes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|TRACER
operator|.
name|info
argument_list|(
literal|"Task=ReadStart,length={},location={}"
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|storageIndex
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|idxInBytes
operator|<
name|bytes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|long
name|blockId
init|=
operator|(
name|storageIndex
operator|+
name|idxInBytes
operator|)
operator|/
name|blockSize
decl_stmt|;
name|byte
index|[]
name|dataBytes
decl_stmt|;
try|try
block|{
name|LogicalBlock
name|block
init|=
name|this
operator|.
name|cache
operator|.
name|get
argument_list|(
name|blockId
argument_list|)
decl_stmt|;
name|dataBytes
operator|=
name|block
operator|.
name|getData
argument_list|()
operator|.
name|array
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|TRACER
operator|.
name|info
argument_list|(
literal|"Task=ReadBlock,BlockID={},length={},SHA={}"
argument_list|,
name|blockId
argument_list|,
name|dataBytes
operator|.
name|length
argument_list|,
name|dataBytes
operator|.
name|length
operator|>
literal|0
condition|?
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|dataBytes
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// For an non-existing block cache.get will return a block with zero
comment|// bytes filled. So any error here is a real error.
name|LOGGER
operator|.
name|error
argument_list|(
literal|"getting errors when reading data:"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|int
name|length
init|=
name|blockSize
operator|-
name|startingIdxInBlock
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|bytes
operator|.
name|length
operator|-
name|idxInBytes
condition|)
block|{
name|length
operator|=
name|bytes
operator|.
name|length
operator|-
name|idxInBytes
expr_stmt|;
block|}
if|if
condition|(
name|dataBytes
operator|.
name|length
operator|>=
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|dataBytes
argument_list|,
name|startingIdxInBlock
argument_list|,
name|bytes
argument_list|,
name|idxInBytes
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|startingIdxInBlock
operator|=
literal|0
expr_stmt|;
name|idxInBytes
operator|+=
name|length
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|TRACER
operator|.
name|info
argument_list|(
literal|"Task=ReadEnd,length={},location={},SHA={}"
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|storageIndex
argument_list|,
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (byte[] bytes, long storageIndex)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|long
name|storageIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|startingIdxInBlock
init|=
operator|(
name|int
operator|)
name|storageIndex
operator|%
name|blockSize
decl_stmt|;
name|int
name|idxInBytes
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|TRACER
operator|.
name|info
argument_list|(
literal|"Task=WriteStart,length={},location={},SHA={}"
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|storageIndex
argument_list|,
name|bytes
operator|.
name|length
operator|>
literal|0
condition|?
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|bytes
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|dataByte
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|blockSize
argument_list|)
decl_stmt|;
while|while
condition|(
name|idxInBytes
operator|<
name|bytes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|long
name|blockId
init|=
operator|(
name|storageIndex
operator|+
name|idxInBytes
operator|)
operator|/
name|blockSize
decl_stmt|;
name|int
name|length
init|=
name|blockSize
operator|-
name|startingIdxInBlock
decl_stmt|;
if|if
condition|(
name|length
operator|>
name|bytes
operator|.
name|length
operator|-
name|idxInBytes
condition|)
block|{
name|length
operator|=
name|bytes
operator|.
name|length
operator|-
name|idxInBytes
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|idxInBytes
argument_list|,
name|dataByte
operator|.
name|array
argument_list|()
argument_list|,
name|startingIdxInBlock
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|cache
operator|.
name|put
argument_list|(
name|blockId
argument_list|,
name|dataByte
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|TRACER
operator|.
name|info
argument_list|(
literal|"Task=WriteBlock,BlockID={},length={},SHA={}"
argument_list|,
name|blockId
argument_list|,
name|dataByte
operator|.
name|array
argument_list|()
operator|.
name|length
argument_list|,
name|dataByte
operator|.
name|array
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|?
name|DigestUtils
operator|.
name|sha256Hex
argument_list|(
name|dataByte
operator|.
name|array
argument_list|()
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
name|dataByte
operator|.
name|clear
argument_list|()
expr_stmt|;
name|startingIdxInBlock
operator|=
literal|0
expr_stmt|;
name|idxInBytes
operator|+=
name|length
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|traceEnabled
condition|)
block|{
name|TRACER
operator|.
name|info
argument_list|(
literal|"Task=WriteEnd,length={},location={} "
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
name|storageIndex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can not close the storage {}"
argument_list|,
name|ise
argument_list|)
expr_stmt|;
throw|throw
name|ise
throw|;
block|}
block|}
comment|/**    * Builder class for CBlocklocalCache.    */
DECL|class|Builder
specifier|public
specifier|static
class|class
name|Builder
block|{
DECL|field|userName
specifier|private
name|String
name|userName
decl_stmt|;
DECL|field|volumeName
specifier|private
name|String
name|volumeName
decl_stmt|;
DECL|field|volumeSize
specifier|private
name|long
name|volumeSize
decl_stmt|;
DECL|field|blockSize
specifier|private
name|int
name|blockSize
decl_stmt|;
DECL|field|containerList
specifier|private
name|List
argument_list|<
name|Pipeline
argument_list|>
name|containerList
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|clientManager
specifier|private
name|XceiverClientManager
name|clientManager
decl_stmt|;
DECL|field|flusher
specifier|private
name|ContainerCacheFlusher
name|flusher
decl_stmt|;
DECL|field|metrics
specifier|private
name|CBlockTargetMetrics
name|metrics
decl_stmt|;
comment|/**      * Constructs a builder.      */
DECL|method|Builder ()
name|Builder
parameter_list|()
block|{      }
DECL|method|setFlusher (ContainerCacheFlusher cacheFlusher)
specifier|public
name|Builder
name|setFlusher
parameter_list|(
name|ContainerCacheFlusher
name|cacheFlusher
parameter_list|)
block|{
name|this
operator|.
name|flusher
operator|=
name|cacheFlusher
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * set config.      *      * @param config - config      * @return Builder      */
DECL|method|setConf (Configuration config)
specifier|public
name|Builder
name|setConf
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|config
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * set user name.      *      * @param cblockUserName - user name      * @return Builder      */
DECL|method|setUserName (String cblockUserName)
specifier|public
name|Builder
name|setUserName
parameter_list|(
name|String
name|cblockUserName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|cblockUserName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * set volume name.      *      * @param cblockVolumeName -- volume name      * @return Builder      */
DECL|method|setVolumeName (String cblockVolumeName)
specifier|public
name|Builder
name|setVolumeName
parameter_list|(
name|String
name|cblockVolumeName
parameter_list|)
block|{
name|this
operator|.
name|volumeName
operator|=
name|cblockVolumeName
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * set volume size.      *      * @param cblockVolumeSize -- set volume size.      * @return Builder      */
DECL|method|setVolumeSize (long cblockVolumeSize)
specifier|public
name|Builder
name|setVolumeSize
parameter_list|(
name|long
name|cblockVolumeSize
parameter_list|)
block|{
name|this
operator|.
name|volumeSize
operator|=
name|cblockVolumeSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * set block size.      *      * @param cblockBlockSize -- block size      * @return Builder      */
DECL|method|setBlockSize (int cblockBlockSize)
specifier|public
name|Builder
name|setBlockSize
parameter_list|(
name|int
name|cblockBlockSize
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|cblockBlockSize
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set contianer list.      *      * @param cblockContainerList - set the pipeline list      * @return Builder      */
DECL|method|setContainerList (List<Pipeline> cblockContainerList)
specifier|public
name|Builder
name|setContainerList
parameter_list|(
name|List
argument_list|<
name|Pipeline
argument_list|>
name|cblockContainerList
parameter_list|)
block|{
name|this
operator|.
name|containerList
operator|=
name|cblockContainerList
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set client manager.      *      * @param xceiverClientManager -- sets the client manager.      * @return Builder      */
DECL|method|setClientManager (XceiverClientManager xceiverClientManager)
specifier|public
name|Builder
name|setClientManager
parameter_list|(
name|XceiverClientManager
name|xceiverClientManager
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|xceiverClientManager
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Set Cblock Target Metrics.      *      * @param targetMetrics -- sets the cblock target metrics      * @return Builder      */
DECL|method|setCBlockTargetMetrics (CBlockTargetMetrics targetMetrics)
specifier|public
name|Builder
name|setCBlockTargetMetrics
parameter_list|(
name|CBlockTargetMetrics
name|targetMetrics
parameter_list|)
block|{
name|this
operator|.
name|metrics
operator|=
name|targetMetrics
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Builds the CBlockStorageImpl.      *      * @return builds the CBlock Scsi Target.      */
DECL|method|build ()
specifier|public
name|CBlockIStorageImpl
name|build
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|userName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User name cannot be null or empty"
operator|+
literal|"."
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|volumeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Volume name cannot be null or "
operator|+
literal|"empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|volumeSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Volume size cannot be negative or"
operator|+
literal|" zero."
argument_list|)
throw|;
block|}
if|if
condition|(
name|blockSize
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Block size cannot be negative or "
operator|+
literal|"zero."
argument_list|)
throw|;
block|}
if|if
condition|(
name|containerList
operator|==
literal|null
operator|||
name|containerList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Container list cannot be null or "
operator|+
literal|"empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|clientManager
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Client manager cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Configuration cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|flusher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Flusher Cannot be null."
argument_list|)
throw|;
block|}
name|CBlockIStorageImpl
name|impl
init|=
operator|new
name|CBlockIStorageImpl
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|userName
argument_list|,
name|this
operator|.
name|volumeName
argument_list|,
name|this
operator|.
name|volumeSize
argument_list|,
name|this
operator|.
name|blockSize
argument_list|,
name|this
operator|.
name|containerList
argument_list|,
name|this
operator|.
name|flusher
argument_list|)
decl_stmt|;
name|impl
operator|.
name|initCache
argument_list|(
name|this
operator|.
name|clientManager
argument_list|,
name|this
operator|.
name|metrics
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
block|}
end_class

end_unit

