begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.jscsiHelper.cache.impl
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
operator|.
name|cache
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_CACHE_BLOCK_BUFFER_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_CACHE_BLOCK_BUFFER_SIZE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_CACHE_KEEP_ALIVE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_CACHE_KEEP_ALIVE_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_CACHE_THREAD_PRIORITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_CACHE_THREAD_PRIORITY_DEFAULT
import|;
end_import

begin_comment
comment|/**  * This class manages the block ID buffer.  * Block ID Buffer keeps a list of blocks which are in leveldb cache  * This buffer is used later when the blocks are flushed to container  *  * Two blockIDBuffers are maintained so that write are not blocked when  * DirtyLog is being written. Once a blockIDBuffer is full, it will be  * enqueued for DirtyLog write while the other buffer accepts new write.  * Once the DirtyLog write is done, the buffer is returned back to the pool.  *  * There are three triggers for blockIDBuffer flush  * 1) BlockIDBuffer is full,  * 2) Time period defined for blockIDBuffer flush has elapsed.  * 3) Shutdown  */
end_comment

begin_class
DECL|class|BlockBufferManager
specifier|public
class|class
name|BlockBufferManager
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BlockBufferManager
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|FlushReason
specifier|private
enum|enum
name|FlushReason
block|{
DECL|enumConstant|BUFFER_FULL
name|BUFFER_FULL
block|,
DECL|enumConstant|SHUTDOWN
name|SHUTDOWN
block|,
DECL|enumConstant|TIMER
name|TIMER
block|}
empty_stmt|;
DECL|field|blockBufferSize
specifier|private
specifier|final
name|int
name|blockBufferSize
decl_stmt|;
DECL|field|parentCache
specifier|private
specifier|final
name|CBlockLocalCache
name|parentCache
decl_stmt|;
DECL|field|scheduledExecutor
specifier|private
specifier|final
name|ScheduledThreadPoolExecutor
name|scheduledExecutor
decl_stmt|;
DECL|field|threadPoolExecutor
specifier|private
specifier|final
name|ThreadPoolExecutor
name|threadPoolExecutor
decl_stmt|;
DECL|field|intervalSeconds
specifier|private
specifier|final
name|long
name|intervalSeconds
decl_stmt|;
DECL|field|acquireQueue
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|ByteBuffer
argument_list|>
name|acquireQueue
decl_stmt|;
DECL|field|workQueue
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|Runnable
argument_list|>
name|workQueue
decl_stmt|;
DECL|field|currentBuffer
specifier|private
name|ByteBuffer
name|currentBuffer
decl_stmt|;
DECL|method|BlockBufferManager (Configuration config, CBlockLocalCache parentCache)
name|BlockBufferManager
parameter_list|(
name|Configuration
name|config
parameter_list|,
name|CBlockLocalCache
name|parentCache
parameter_list|)
block|{
name|this
operator|.
name|parentCache
operator|=
name|parentCache
expr_stmt|;
name|this
operator|.
name|scheduledExecutor
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|intervalSeconds
operator|=
name|config
operator|.
name|getTimeDuration
argument_list|(
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL
argument_list|,
name|DFS_CBLOCK_BLOCK_BUFFER_FLUSH_INTERVAL_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|long
name|keepAlive
init|=
name|config
operator|.
name|getTimeDuration
argument_list|(
name|DFS_CBLOCK_CACHE_KEEP_ALIVE
argument_list|,
name|DFS_CBLOCK_CACHE_KEEP_ALIVE_DEFAULT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|this
operator|.
name|workQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|threadPri
init|=
name|config
operator|.
name|getInt
argument_list|(
name|DFS_CBLOCK_CACHE_THREAD_PRIORITY
argument_list|,
name|DFS_CBLOCK_CACHE_THREAD_PRIORITY_DEFAULT
argument_list|)
decl_stmt|;
name|ThreadFactory
name|workerThreadFactory
init|=
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"Cache Block Buffer Manager Thread #%d"
argument_list|)
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
operator|.
name|setPriority
argument_list|(
name|threadPri
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|/*      * starting a thread pool with core pool size of 1 and maximum of 2 threads      * as there are maximum of 2 buffers which can be flushed at the same time.      */
name|this
operator|.
name|threadPoolExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|keepAlive
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|workQueue
argument_list|,
name|workerThreadFactory
argument_list|,
operator|new
name|ThreadPoolExecutor
operator|.
name|AbortPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockBufferSize
operator|=
name|config
operator|.
name|getInt
argument_list|(
name|DFS_CBLOCK_CACHE_BLOCK_BUFFER_SIZE
argument_list|,
name|DFS_CBLOCK_CACHE_BLOCK_BUFFER_SIZE_DEFAULT
argument_list|)
operator|*
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
expr_stmt|;
name|this
operator|.
name|acquireQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|acquireQueue
operator|.
name|add
argument_list|(
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|blockBufferSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// get the first buffer to be used
name|this
operator|.
name|currentBuffer
operator|=
name|acquireQueue
operator|.
name|remove
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"BufferManager: Buffer Size:{} FlushIntervalSeconds:{}"
argument_list|,
name|blockBufferSize
argument_list|,
name|intervalSeconds
argument_list|)
expr_stmt|;
block|}
comment|// triggerBlockBufferFlush enqueues current ByteBuffer for flush and returns.
comment|// This enqueue is asynchronous and hence triggerBlockBufferFlush will
comment|// only block when there are no available buffers in acquireQueue
comment|// Once the DirtyLog write is done, buffer is returned back to
comment|// BlockBufferManager using releaseBuffer
DECL|method|triggerBlockBufferFlush (FlushReason reason)
specifier|private
specifier|synchronized
name|void
name|triggerBlockBufferFlush
parameter_list|(
name|FlushReason
name|reason
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Flush triggered because: "
operator|+
name|reason
operator|.
name|toString
argument_list|()
operator|+
literal|" Num entries in buffer: "
operator|+
name|currentBuffer
operator|.
name|position
argument_list|()
operator|/
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
operator|+
literal|" Acquire Queue Size: "
operator|+
name|acquireQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|incNumBlockBufferFlushTriggered
argument_list|()
expr_stmt|;
name|BlockBufferFlushTask
name|flushTask
init|=
operator|new
name|BlockBufferFlushTask
argument_list|(
name|currentBuffer
argument_list|,
name|parentCache
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|threadPoolExecutor
operator|.
name|submit
argument_list|(
name|flushTask
argument_list|)
expr_stmt|;
try|try
block|{
name|currentBuffer
operator|=
name|acquireQueue
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|currentBuffer
operator|=
literal|null
expr_stmt|;
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|incNumInterruptedBufferWaits
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"wait on take operation on acquire queue interrupted"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addToBlockBuffer (long blockId)
specifier|public
specifier|synchronized
name|void
name|addToBlockBuffer
parameter_list|(
name|long
name|blockId
parameter_list|)
block|{
name|parentCache
operator|.
name|getTargetMetrics
argument_list|()
operator|.
name|incNumBlockBufferUpdates
argument_list|()
expr_stmt|;
name|currentBuffer
operator|.
name|putLong
argument_list|(
name|blockId
argument_list|)
expr_stmt|;
comment|// if no space left, flush this buffer
if|if
condition|(
name|currentBuffer
operator|.
name|remaining
argument_list|()
operator|==
literal|0
condition|)
block|{
name|triggerBlockBufferFlush
argument_list|(
name|FlushReason
operator|.
name|BUFFER_FULL
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|releaseBuffer (ByteBuffer buffer)
specifier|public
name|void
name|releaseBuffer
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
if|if
condition|(
name|buffer
operator|.
name|position
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"requeuing a non empty buffer with:{}"
argument_list|,
literal|"elements enqueued in the acquire queue"
argument_list|,
name|buffer
operator|.
name|position
argument_list|()
operator|/
operator|(
name|Long
operator|.
name|SIZE
operator|/
name|Byte
operator|.
name|SIZE
operator|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// There should always be space in the queue to add an element
name|acquireQueue
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|// Start a scheduled task to flush blockIDBuffer
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
name|Runnable
name|scheduledTask
init|=
parameter_list|()
lambda|->
name|triggerBlockBufferFlush
argument_list|(
name|FlushReason
operator|.
name|TIMER
argument_list|)
decl_stmt|;
name|scheduledExecutor
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|scheduledTask
argument_list|,
name|intervalSeconds
argument_list|,
name|intervalSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|threadPoolExecutor
operator|.
name|prestartAllCoreThreads
argument_list|()
expr_stmt|;
block|}
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|triggerBlockBufferFlush
argument_list|(
name|FlushReason
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
name|scheduledExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadPoolExecutor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

