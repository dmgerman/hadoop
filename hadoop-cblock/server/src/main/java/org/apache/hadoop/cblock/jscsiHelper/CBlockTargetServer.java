begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.jscsiHelper
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|MountVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|util
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|conf
operator|.
name|OzoneConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|XceiverClientManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jscsi
operator|.
name|target
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jscsi
operator|.
name|target
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jscsi
operator|.
name|target
operator|.
name|TargetServer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * This class extends JSCSI target server, which is a ISCSI target that can be  * recognized by a remote machine with ISCSI installed.  */
end_comment

begin_class
DECL|class|CBlockTargetServer
specifier|public
specifier|final
class|class
name|CBlockTargetServer
extends|extends
name|TargetServer
block|{
DECL|field|conf
specifier|private
specifier|final
name|OzoneConfiguration
name|conf
decl_stmt|;
DECL|field|cBlockManagerHandler
specifier|private
specifier|final
name|CBlockManagerHandler
name|cBlockManagerHandler
decl_stmt|;
DECL|field|xceiverClientManager
specifier|private
specifier|final
name|XceiverClientManager
name|xceiverClientManager
decl_stmt|;
DECL|field|containerCacheFlusher
specifier|private
specifier|final
name|ContainerCacheFlusher
name|containerCacheFlusher
decl_stmt|;
DECL|field|metrics
specifier|private
specifier|final
name|CBlockTargetMetrics
name|metrics
decl_stmt|;
DECL|method|CBlockTargetServer (OzoneConfiguration ozoneConfig, Configuration jscsiConf, CBlockManagerHandler cBlockManagerHandler, CBlockTargetMetrics metrics)
specifier|public
name|CBlockTargetServer
parameter_list|(
name|OzoneConfiguration
name|ozoneConfig
parameter_list|,
name|Configuration
name|jscsiConf
parameter_list|,
name|CBlockManagerHandler
name|cBlockManagerHandler
parameter_list|,
name|CBlockTargetMetrics
name|metrics
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|jscsiConf
argument_list|)
expr_stmt|;
name|this
operator|.
name|cBlockManagerHandler
operator|=
name|cBlockManagerHandler
expr_stmt|;
name|this
operator|.
name|xceiverClientManager
operator|=
operator|new
name|XceiverClientManager
argument_list|(
name|ozoneConfig
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|ozoneConfig
expr_stmt|;
name|this
operator|.
name|containerCacheFlusher
operator|=
operator|new
name|ContainerCacheFlusher
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|xceiverClientManager
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|this
operator|.
name|metrics
operator|=
name|metrics
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Starting flusher thread."
argument_list|)
expr_stmt|;
name|Thread
name|flushListenerThread
init|=
operator|new
name|Thread
argument_list|(
name|containerCacheFlusher
argument_list|)
decl_stmt|;
name|flushListenerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|flushListenerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{   }
annotation|@
name|Override
DECL|method|isValidTargetName (String checkTargetName)
specifier|public
name|boolean
name|isValidTargetName
parameter_list|(
name|String
name|checkTargetName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|KeyUtil
operator|.
name|isValidVolumeKey
argument_list|(
name|checkTargetName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|userName
init|=
name|KeyUtil
operator|.
name|getUserNameFromVolumeKey
argument_list|(
name|checkTargetName
argument_list|)
decl_stmt|;
name|String
name|volumeName
init|=
name|KeyUtil
operator|.
name|getVolumeFromVolumeKey
argument_list|(
name|checkTargetName
argument_list|)
decl_stmt|;
if|if
condition|(
name|userName
operator|==
literal|null
operator|||
name|volumeName
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|MountVolumeResponse
name|result
init|=
name|cBlockManagerHandler
operator|.
name|mountVolume
argument_list|(
name|userName
argument_list|,
name|volumeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|getIsValid
argument_list|()
condition|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Not a valid volume:"
operator|+
name|checkTargetName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|String
name|volumeKey
init|=
name|KeyUtil
operator|.
name|getVolumeKey
argument_list|(
name|result
operator|.
name|getUserName
argument_list|()
argument_list|,
name|result
operator|.
name|getVolumeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targets
operator|.
name|containsKey
argument_list|(
name|volumeKey
argument_list|)
condition|)
block|{
name|LOGGER
operator|.
name|info
argument_list|(
literal|"Mounting Volume. username: {} volume:{}"
argument_list|,
name|userName
argument_list|,
name|volumeName
argument_list|)
expr_stmt|;
name|CBlockIStorageImpl
name|ozoneStore
init|=
name|CBlockIStorageImpl
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
operator|.
name|setVolumeSize
argument_list|(
name|result
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
operator|.
name|setBlockSize
argument_list|(
name|result
operator|.
name|getBlockSize
argument_list|()
argument_list|)
operator|.
name|setContainerList
argument_list|(
name|result
operator|.
name|getContainerList
argument_list|()
argument_list|)
operator|.
name|setClientManager
argument_list|(
name|xceiverClientManager
argument_list|)
operator|.
name|setConf
argument_list|(
name|this
operator|.
name|conf
argument_list|)
operator|.
name|setFlusher
argument_list|(
name|containerCacheFlusher
argument_list|)
operator|.
name|setCBlockTargetMetrics
argument_list|(
name|metrics
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Target
name|target
init|=
operator|new
name|Target
argument_list|(
name|volumeKey
argument_list|,
name|volumeKey
argument_list|,
name|ozoneStore
argument_list|)
decl_stmt|;
name|targets
operator|.
name|put
argument_list|(
name|volumeKey
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can not connect to server when validating target!"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|targets
operator|.
name|containsKey
argument_list|(
name|checkTargetName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getTargetNames ()
specifier|public
name|String
index|[]
name|getTargetNames
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|cBlockManagerHandler
operator|!=
literal|null
condition|)
block|{
return|return
name|cBlockManagerHandler
operator|.
name|listVolumes
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|volumeInfo
lambda|->
name|volumeInfo
operator|.
name|getUserName
argument_list|()
operator|+
literal|":"
operator|+
name|volumeInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
name|String
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Can't list existing volumes"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getTargets ()
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Target
argument_list|>
name|getTargets
parameter_list|()
block|{
return|return
name|targets
return|;
block|}
block|}
end_class

end_unit

