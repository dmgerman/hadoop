begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.protocolPB
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocolPB
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|CBlockServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockServiceProtocolProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICE_BLOCK_SIZE_DEFAULT
import|;
end_import

begin_comment
comment|/**  * Server side implementation of the protobuf service.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|CBlockServiceProtocolServerSideTranslatorPB
specifier|public
class|class
name|CBlockServiceProtocolServerSideTranslatorPB
implements|implements
name|CBlockServiceProtocolPB
block|{
DECL|field|impl
specifier|private
specifier|final
name|CBlockServiceProtocol
name|impl
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CBlockServiceProtocolServerSideTranslatorPB
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|createVolume ( RpcController controller, CBlockServiceProtocolProtos.CreateVolumeRequestProto request)
specifier|public
name|CBlockServiceProtocolProtos
operator|.
name|CreateVolumeResponseProto
name|createVolume
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CBlockServiceProtocolProtos
operator|.
name|CreateVolumeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"createVolume called! volume size: "
operator|+
name|request
operator|.
name|getVolumeSize
argument_list|()
operator|+
literal|" block size: "
operator|+
name|request
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|request
operator|.
name|hasBlockSize
argument_list|()
condition|)
block|{
name|impl
operator|.
name|createVolume
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|,
name|request
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|request
operator|.
name|getVolumeSize
argument_list|()
argument_list|,
name|request
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|impl
operator|.
name|createVolume
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|,
name|request
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|request
operator|.
name|getVolumeSize
argument_list|()
argument_list|,
name|DFS_CBLOCK_SERVICE_BLOCK_SIZE_DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|CBlockServiceProtocolProtos
operator|.
name|CreateVolumeResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|deleteVolume ( RpcController controller, CBlockServiceProtocolProtos.DeleteVolumeRequestProto request)
specifier|public
name|CBlockServiceProtocolProtos
operator|.
name|DeleteVolumeResponseProto
name|deleteVolume
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CBlockServiceProtocolProtos
operator|.
name|DeleteVolumeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"deleteVolume called! volume name: "
operator|+
name|request
operator|.
name|getVolumeName
argument_list|()
operator|+
literal|" force:"
operator|+
name|request
operator|.
name|getForce
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|request
operator|.
name|hasForce
argument_list|()
condition|)
block|{
name|impl
operator|.
name|deleteVolume
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|,
name|request
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|request
operator|.
name|getForce
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|impl
operator|.
name|deleteVolume
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|,
name|request
operator|.
name|getVolumeName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|CBlockServiceProtocolProtos
operator|.
name|DeleteVolumeResponseProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|infoVolume ( RpcController controller, CBlockServiceProtocolProtos.InfoVolumeRequestProto request )
specifier|public
name|CBlockServiceProtocolProtos
operator|.
name|InfoVolumeResponseProto
name|infoVolume
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CBlockServiceProtocolProtos
operator|.
name|InfoVolumeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"infoVolume called! volume name: "
operator|+
name|request
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CBlockServiceProtocolProtos
operator|.
name|InfoVolumeResponseProto
operator|.
name|Builder
name|resp
init|=
name|CBlockServiceProtocolProtos
operator|.
name|InfoVolumeResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
operator|.
name|Builder
name|volumeInfoProto
init|=
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|VolumeInfo
name|volumeInfo
decl_stmt|;
try|try
block|{
name|volumeInfo
operator|=
name|impl
operator|.
name|infoVolume
argument_list|(
name|request
operator|.
name|getUserName
argument_list|()
argument_list|,
name|request
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|volumeInfoProto
operator|.
name|setVolumeSize
argument_list|(
name|volumeInfo
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
expr_stmt|;
name|volumeInfoProto
operator|.
name|setBlockSize
argument_list|(
name|volumeInfo
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|volumeInfoProto
operator|.
name|setUsage
argument_list|(
name|volumeInfo
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|volumeInfoProto
operator|.
name|setUserName
argument_list|(
name|volumeInfo
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|volumeInfoProto
operator|.
name|setVolumeName
argument_list|(
name|volumeInfo
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setVolumeInfo
argument_list|(
name|volumeInfoProto
argument_list|)
expr_stmt|;
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|listVolume ( RpcController controller, CBlockServiceProtocolProtos.ListVolumeRequestProto request )
specifier|public
name|CBlockServiceProtocolProtos
operator|.
name|ListVolumeResponseProto
name|listVolume
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CBlockServiceProtocolProtos
operator|.
name|ListVolumeRequestProto
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|CBlockServiceProtocolProtos
operator|.
name|ListVolumeResponseProto
operator|.
name|Builder
name|resp
init|=
name|CBlockServiceProtocolProtos
operator|.
name|ListVolumeResponseProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|String
name|userName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasUserName
argument_list|()
condition|)
block|{
name|userName
operator|=
name|request
operator|.
name|getUserName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"list volume received for :"
operator|+
name|userName
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|volumes
decl_stmt|;
try|try
block|{
name|volumes
operator|=
name|impl
operator|.
name|listVolume
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
for|for
control|(
name|VolumeInfo
name|volume
range|:
name|volumes
control|)
block|{
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
operator|.
name|Builder
name|volumeEntryProto
init|=
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|volumeEntryProto
operator|.
name|setUserName
argument_list|(
name|volume
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|volumeEntryProto
operator|.
name|setVolumeName
argument_list|(
name|volume
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|volumeEntryProto
operator|.
name|setVolumeSize
argument_list|(
name|volume
operator|.
name|getVolumeSize
argument_list|()
argument_list|)
expr_stmt|;
name|volumeEntryProto
operator|.
name|setBlockSize
argument_list|(
name|volume
operator|.
name|getBlockSize
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|addVolumeEntry
argument_list|(
name|volumeEntryProto
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|resp
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|CBlockServiceProtocolServerSideTranslatorPB ( CBlockServiceProtocol impl)
specifier|public
name|CBlockServiceProtocolServerSideTranslatorPB
parameter_list|(
name|CBlockServiceProtocol
name|impl
parameter_list|)
block|{
name|this
operator|.
name|impl
operator|=
name|impl
expr_stmt|;
block|}
block|}
end_class

end_unit

