begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_JSCSI_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICERPC_HOSTNAME_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|CBlockConfigKeys
operator|.
name|DFS_CBLOCK_SERVICERPC_PORT_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|HdslUtils
operator|.
name|getHostNameFromConfigKeys
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdsl
operator|.
name|HdslUtils
operator|.
name|getPortNumberFromConfigKeys
import|;
end_import

begin_comment
comment|/**  * Generic stateless utility functions for CBlock components.  */
end_comment

begin_class
DECL|class|CblockUtils
specifier|public
class|class
name|CblockUtils
block|{
DECL|method|CblockUtils ()
specifier|private
name|CblockUtils
parameter_list|()
block|{   }
comment|/**    * Retrieve the socket address that is used by CBlock Service.    *    * @param conf    * @return Target InetSocketAddress for the CBlock Service endpoint.    */
DECL|method|getCblockServiceRpcAddr (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getCblockServiceRpcAddr
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_SERVICERPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_SERVICERPC_HOSTNAME_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_SERVICERPC_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Retrieve the socket address that is used by CBlock Server.    *    * @param conf    * @return Target InetSocketAddress for the CBlock Server endpoint.    */
DECL|method|getCblockServerRpcAddr (Configuration conf)
specifier|public
specifier|static
name|InetSocketAddress
name|getCblockServerRpcAddr
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|host
init|=
name|getHostNameFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
comment|// If no port number is specified then we'll just try the defaultBindPort.
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|port
init|=
name|getPortNumberFromConfigKeys
argument_list|(
name|conf
argument_list|,
name|DFS_CBLOCK_JSCSIRPC_ADDRESS_KEY
argument_list|)
decl_stmt|;
return|return
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|host
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_SERVICERPC_HOSTNAME_DEFAULT
argument_list|)
operator|+
literal|":"
operator|+
name|port
operator|.
name|or
argument_list|(
name|DFS_CBLOCK_JSCSI_PORT_DEFAULT
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Parse size with size prefix string and return in bytes.    *    */
DECL|method|parseSize (String volumeSizeArgs)
specifier|public
specifier|static
name|long
name|parseSize
parameter_list|(
name|String
name|volumeSizeArgs
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|multiplier
init|=
literal|1
decl_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9]+)([a-zA-Z]+)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|volumeSizeArgs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid volume size args "
operator|+
name|volumeSizeArgs
argument_list|)
throw|;
block|}
name|int
name|size
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"MB"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Mi"
argument_list|)
condition|)
block|{
name|multiplier
operator|=
literal|1024L
operator|*
literal|1024
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"GB"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Gi"
argument_list|)
condition|)
block|{
name|multiplier
operator|=
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"TB"
argument_list|)
operator|||
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Ti"
argument_list|)
condition|)
block|{
name|multiplier
operator|=
literal|1024L
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid volume size args "
operator|+
name|volumeSizeArgs
argument_list|)
throw|;
block|}
return|return
name|size
operator|*
name|multiplier
return|;
block|}
DECL|method|activateConfigs ()
specifier|public
specifier|static
name|void
name|activateConfigs
parameter_list|()
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"hdfs-default.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"hdfs-site.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"ozone-default.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"ozone-site.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"cblock-default.xml"
argument_list|)
expr_stmt|;
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
literal|"cblock-site.xml"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

