begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.cblock.jscsiHelper
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|jscsiHelper
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Longs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|exception
operator|.
name|CBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|meta
operator|.
name|VolumeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|CBlockClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|proto
operator|.
name|MountVolumeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockClientServerProtocolProtos
operator|.
name|ContainerIDProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockClientServerProtocolProtos
operator|.
name|ListVolumesRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockClientServerProtocolProtos
operator|.
name|ListVolumesResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockClientServerProtocolProtos
operator|.
name|MountVolumeRequestProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockClientServerProtocolProtos
operator|.
name|MountVolumeResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocol
operator|.
name|proto
operator|.
name|CBlockServiceProtocolProtos
operator|.
name|VolumeInfoProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|cblock
operator|.
name|protocolPB
operator|.
name|CBlockClientServerProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtocolTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|scm
operator|.
name|container
operator|.
name|common
operator|.
name|helpers
operator|.
name|Pipeline
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * The client side of CBlockClientProtocol.  *  * CBlockClientProtocol is the protocol used between cblock client side  * and cblock manager (cblock client side is just the node where jscsi daemon  * process runs. a machines talks to jscsi daemon for mounting a volume).  *  * Right now, the only communication carried by this protocol is for client side  * to request mounting a volume.  */
end_comment

begin_class
DECL|class|CBlockClientProtocolClientSideTranslatorPB
specifier|public
class|class
name|CBlockClientProtocolClientSideTranslatorPB
implements|implements
name|CBlockClientProtocol
implements|,
name|ProtocolTranslator
implements|,
name|Closeable
block|{
DECL|field|rpcProxy
specifier|private
specifier|final
name|CBlockClientServerProtocolPB
name|rpcProxy
decl_stmt|;
DECL|method|CBlockClientProtocolClientSideTranslatorPB ( CBlockClientServerProtocolPB rpcProxy)
specifier|public
name|CBlockClientProtocolClientSideTranslatorPB
parameter_list|(
name|CBlockClientServerProtocolPB
name|rpcProxy
parameter_list|)
block|{
name|this
operator|.
name|rpcProxy
operator|=
name|rpcProxy
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|rpcProxy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getUnderlyingProxyObject ()
specifier|public
name|Object
name|getUnderlyingProxyObject
parameter_list|()
block|{
return|return
name|rpcProxy
return|;
block|}
annotation|@
name|Override
DECL|method|mountVolume ( String userName, String volumeName)
specifier|public
name|MountVolumeResponse
name|mountVolume
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|volumeName
parameter_list|)
throws|throws
name|IOException
block|{
name|MountVolumeRequestProto
operator|.
name|Builder
name|request
init|=
name|MountVolumeRequestProto
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|request
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|request
operator|.
name|setVolumeName
argument_list|(
name|volumeName
argument_list|)
expr_stmt|;
try|try
block|{
name|MountVolumeResponseProto
name|resp
init|=
name|rpcProxy
operator|.
name|mountVolume
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resp
operator|.
name|getIsValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CBlockException
argument_list|(
literal|"Not a valid volume:"
operator|+
name|userName
operator|+
literal|":"
operator|+
name|volumeName
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Pipeline
argument_list|>
name|containerIDs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pipeline
argument_list|>
name|containerPipelines
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getAllContainerIDsList
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|CBlockException
argument_list|(
literal|"Mount volume request returned no container"
argument_list|)
throw|;
block|}
for|for
control|(
name|ContainerIDProto
name|containerID
range|:
name|resp
operator|.
name|getAllContainerIDsList
argument_list|()
control|)
block|{
if|if
condition|(
name|containerID
operator|.
name|hasPipeline
argument_list|()
condition|)
block|{
comment|// it should always have a pipeline only except for tests.
name|Pipeline
name|p
init|=
name|Pipeline
operator|.
name|getFromProtoBuf
argument_list|(
name|containerID
operator|.
name|getPipeline
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setData
argument_list|(
name|Longs
operator|.
name|toByteArray
argument_list|(
name|containerID
operator|.
name|getIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|containerIDs
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|containerPipelines
operator|.
name|put
argument_list|(
name|containerID
operator|.
name|getContainerID
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CBlockException
argument_list|(
literal|"ContainerID does not have pipeline!"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|MountVolumeResponse
argument_list|(
name|resp
operator|.
name|getIsValid
argument_list|()
argument_list|,
name|resp
operator|.
name|getUserName
argument_list|()
argument_list|,
name|resp
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|resp
operator|.
name|getVolumeSize
argument_list|()
argument_list|,
name|resp
operator|.
name|getBlockSize
argument_list|()
argument_list|,
name|containerIDs
argument_list|,
name|containerPipelines
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|listVolumes ()
specifier|public
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|listVolumes
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|List
argument_list|<
name|VolumeInfo
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ListVolumesResponseProto
name|listVolumesResponseProto
init|=
name|this
operator|.
name|rpcProxy
operator|.
name|listVolumes
argument_list|(
literal|null
argument_list|,
name|ListVolumesRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|VolumeInfoProto
name|volumeInfoProto
range|:
name|listVolumesResponseProto
operator|.
name|getVolumeEntryList
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|VolumeInfo
argument_list|(
name|volumeInfoProto
operator|.
name|getUserName
argument_list|()
argument_list|,
name|volumeInfoProto
operator|.
name|getVolumeName
argument_list|()
argument_list|,
name|volumeInfoProto
operator|.
name|getVolumeSize
argument_list|()
argument_list|,
name|volumeInfoProto
operator|.
name|getBlockSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
name|ProtobufHelper
operator|.
name|getRemoteException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

