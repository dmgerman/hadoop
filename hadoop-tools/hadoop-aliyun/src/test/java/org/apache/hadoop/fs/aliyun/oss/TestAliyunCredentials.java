begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|InvalidCredentialsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|contract
operator|.
name|AliyunOSSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContract
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|AbstractFSContractTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|ACCESS_KEY_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|ACCESS_KEY_SECRET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|SECURITY_TOKEN
import|;
end_import

begin_comment
comment|/**  * Tests use of temporary credentials (for example, Aliyun STS& Aliyun OSS).  * This test extends a class that "does things to the root directory", and  * should only be used against transient filesystems where you don't care about  * the data.  */
end_comment

begin_class
DECL|class|TestAliyunCredentials
specifier|public
class|class
name|TestAliyunCredentials
extends|extends
name|AbstractFSContractTestBase
block|{
annotation|@
name|Override
DECL|method|createContract (Configuration conf)
specifier|protected
name|AbstractFSContract
name|createContract
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|AliyunOSSContract
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testCredentialMissingAccessKeyId ()
specifier|public
name|void
name|testCredentialMissingAccessKeyId
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_KEY_ID
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_KEY_SECRET
argument_list|,
literal|"accessKeySecret"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SECURITY_TOKEN
argument_list|,
literal|"token"
argument_list|)
expr_stmt|;
name|validateCredential
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCredentialMissingAccessKeySecret ()
specifier|public
name|void
name|testCredentialMissingAccessKeySecret
parameter_list|()
throws|throws
name|Throwable
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_KEY_ID
argument_list|,
literal|"accessKeyId"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|ACCESS_KEY_SECRET
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SECURITY_TOKEN
argument_list|,
literal|"token"
argument_list|)
expr_stmt|;
name|validateCredential
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|validateCredential (URI uri, Configuration conf)
specifier|private
name|void
name|validateCredential
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|CredentialsProvider
name|provider
init|=
name|AliyunOSSUtils
operator|.
name|getCredentialsProvider
argument_list|(
name|uri
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
name|provider
operator|.
name|getCredentials
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Expected a CredentialInitializationException, got "
operator|+
name|credentials
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidCredentialsException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|InvocationTargetException
condition|)
block|{
name|boolean
name|isInstance
init|=
operator|(
operator|(
name|InvocationTargetException
operator|)
name|cause
operator|)
operator|.
name|getTargetException
argument_list|()
operator|instanceof
name|InvalidCredentialsException
decl_stmt|;
if|if
condition|(
operator|!
name|isInstance
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected exception."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|validateCredential (Configuration conf)
specifier|private
name|void
name|validateCredential
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|validateCredential
argument_list|(
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

