begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|contract
operator|.
name|ContractTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|Timeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests basic functionality for AliyunOSSInputStream, including seeking and  * reading files.  */
end_comment

begin_class
DECL|class|TestAliyunOSSInputStream
specifier|public
class|class
name|TestAliyunOSSInputStream
block|{
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAliyunOSSInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|testRootPath
specifier|private
specifier|static
name|String
name|testRootPath
init|=
name|AliyunOSSTestUtils
operator|.
name|generateUniqueTestPath
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|testTimeout
specifier|public
name|Timeout
name|testTimeout
init|=
operator|new
name|Timeout
argument_list|(
literal|30
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|fs
operator|=
name|AliyunOSSTestUtils
operator|.
name|createTestFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootPath
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setPath (String path)
specifier|private
name|Path
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Path
argument_list|(
name|testRootPath
operator|+
name|path
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Path
argument_list|(
name|testRootPath
operator|+
literal|"/"
operator|+
name|path
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSeekFile ()
specifier|public
name|void
name|testSeekFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|smallSeekFile
init|=
name|setPath
argument_list|(
literal|"/test/smallSeekFile.txt"
argument_list|)
decl_stmt|;
name|long
name|size
init|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|ContractTestUtils
operator|.
name|generateTestFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|smallSeekFile
argument_list|,
name|size
argument_list|,
literal|256
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"5MB file created: smallSeekFile.txt"
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|instream
init|=
name|this
operator|.
name|fs
operator|.
name|open
argument_list|(
name|smallSeekFile
argument_list|)
decl_stmt|;
name|int
name|seekTimes
init|=
literal|5
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"multiple fold position seeking test...:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seekTimes
condition|;
name|i
operator|++
control|)
block|{
name|long
name|pos
init|=
name|size
operator|/
operator|(
name|seekTimes
operator|-
name|i
operator|)
operator|-
literal|1
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"begin seeking for pos: "
operator|+
name|pos
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected position at:"
operator|+
name|pos
operator|+
literal|", but got:"
operator|+
name|instream
operator|.
name|getPos
argument_list|()
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
operator|==
name|pos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"completed seeking at pos: "
operator|+
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"random position seeking test...:"
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seekTimes
condition|;
name|i
operator|++
control|)
block|{
name|long
name|pos
init|=
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
operator|%
name|size
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"begin seeking for pos: "
operator|+
name|pos
argument_list|)
expr_stmt|;
name|instream
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected position at:"
operator|+
name|pos
operator|+
literal|", but got:"
operator|+
name|instream
operator|.
name|getPos
argument_list|()
argument_list|,
name|instream
operator|.
name|getPos
argument_list|()
operator|==
name|pos
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"completed seeking at pos: "
operator|+
name|instream
operator|.
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReadFile ()
specifier|public
name|void
name|testReadFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|bufLen
init|=
literal|256
decl_stmt|;
specifier|final
name|int
name|sizeFlag
init|=
literal|5
decl_stmt|;
name|String
name|filename
init|=
literal|"readTestFile_"
operator|+
name|sizeFlag
operator|+
literal|".txt"
decl_stmt|;
name|Path
name|readTestFile
init|=
name|setPath
argument_list|(
literal|"/test/"
operator|+
name|filename
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|sizeFlag
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
name|ContractTestUtils
operator|.
name|generateTestFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|readTestFile
argument_list|,
name|size
argument_list|,
literal|256
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|sizeFlag
operator|+
literal|"MB file created: /test/"
operator|+
name|filename
argument_list|)
expr_stmt|;
name|FSDataInputStream
name|instream
init|=
name|this
operator|.
name|fs
operator|.
name|open
argument_list|(
name|readTestFile
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|bufLen
index|]
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesRead
operator|<
name|size
condition|)
block|{
name|int
name|bytes
decl_stmt|;
if|if
condition|(
name|size
operator|-
name|bytesRead
operator|<
name|bufLen
condition|)
block|{
name|int
name|remaining
init|=
call|(
name|int
call|)
argument_list|(
name|size
operator|-
name|bytesRead
argument_list|)
decl_stmt|;
name|bytes
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
name|instream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|bufLen
argument_list|)
expr_stmt|;
block|}
name|bytesRead
operator|+=
name|bytes
expr_stmt|;
if|if
condition|(
name|bytesRead
operator|%
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|==
literal|0
condition|)
block|{
name|int
name|available
init|=
name|instream
operator|.
name|available
argument_list|()
decl_stmt|;
name|int
name|remaining
init|=
call|(
name|int
call|)
argument_list|(
name|size
operator|-
name|bytesRead
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected remaining:"
operator|+
name|remaining
operator|+
literal|", but got:"
operator|+
name|available
argument_list|,
name|remaining
operator|==
name|available
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bytes read: "
operator|+
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|bytesRead
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
operator|+
literal|" MB"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|instream
operator|.
name|available
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|instream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDirectoryModifiedTime ()
specifier|public
name|void
name|testDirectoryModifiedTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|emptyDirPath
init|=
name|setPath
argument_list|(
literal|"/test/emptyDirectory"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|emptyDirPath
argument_list|)
expr_stmt|;
name|FileStatus
name|dirFileStatus
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|emptyDirPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected the empty dir is new"
argument_list|,
name|dirFileStatus
operator|.
name|getModificationTime
argument_list|()
operator|>
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

