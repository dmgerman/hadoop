begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|InvalidCredentialsException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|STSAssumeRoleSessionCredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyuncs
operator|.
name|exceptions
operator|.
name|ClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyuncs
operator|.
name|profile
operator|.
name|DefaultProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|ACCESS_KEY_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|ACCESS_KEY_SECRET
import|;
end_import

begin_comment
comment|/**  * Support assumed role credentials for authenticating with Aliyun.  * roleArn is configured in core-site.xml  */
end_comment

begin_class
DECL|class|AssumedRoleCredentialProvider
specifier|public
class|class
name|AssumedRoleCredentialProvider
implements|implements
name|CredentialsProvider
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AssumedRoleCredentialProvider
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"org.apache.hadoop.fs.aliyun.oss.AssumedRoleCredentialProvider"
decl_stmt|;
DECL|field|credentials
specifier|private
name|Credentials
name|credentials
decl_stmt|;
DECL|field|roleArn
specifier|private
name|String
name|roleArn
decl_stmt|;
DECL|field|duration
specifier|private
name|long
name|duration
decl_stmt|;
DECL|field|stsEndpoint
specifier|private
name|String
name|stsEndpoint
decl_stmt|;
DECL|field|sessionName
specifier|private
name|String
name|sessionName
decl_stmt|;
DECL|field|expiredFactor
specifier|private
name|double
name|expiredFactor
decl_stmt|;
DECL|field|stsCredentialsProvider
specifier|private
name|STSAssumeRoleSessionCredentialsProvider
name|stsCredentialsProvider
decl_stmt|;
DECL|method|AssumedRoleCredentialProvider (URI uri, Configuration conf)
specifier|public
name|AssumedRoleCredentialProvider
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|roleArn
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|Constants
operator|.
name|ROLE_ARN
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|roleArn
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
literal|"fs.oss.assumed.role.arn is empty"
argument_list|)
throw|;
block|}
name|duration
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|Constants
operator|.
name|ASSUMED_ROLE_DURATION
argument_list|,
name|Constants
operator|.
name|ASSUMED_ROLE_DURATION_DEFAULT
argument_list|)
expr_stmt|;
name|expiredFactor
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
name|Constants
operator|.
name|ASSUMED_ROLE_STS_EXPIRED_FACTOR
argument_list|,
name|Constants
operator|.
name|ASSUMED_ROLE_STS_EXPIRED_FACTOR_DEFAULT
argument_list|)
expr_stmt|;
name|stsEndpoint
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|Constants
operator|.
name|ASSUMED_ROLE_STS_ENDPOINT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|stsEndpoint
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
literal|"fs.oss.assumed.role.sts.endpoint is empty"
argument_list|)
throw|;
block|}
name|sessionName
operator|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|Constants
operator|.
name|ASSUMED_ROLE_SESSION_NAME
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|accessKeyId
decl_stmt|;
name|String
name|accessKeySecret
decl_stmt|;
try|try
block|{
name|accessKeyId
operator|=
name|AliyunOSSUtils
operator|.
name|getValueWithKey
argument_list|(
name|conf
argument_list|,
name|ACCESS_KEY_ID
argument_list|)
expr_stmt|;
name|accessKeySecret
operator|=
name|AliyunOSSUtils
operator|.
name|getValueWithKey
argument_list|(
name|conf
argument_list|,
name|ACCESS_KEY_SECRET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|DefaultProfile
operator|.
name|addEndpoint
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|"Sts"
argument_list|,
name|stsEndpoint
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClientException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|stsCredentialsProvider
operator|=
operator|new
name|STSAssumeRoleSessionCredentialsProvider
argument_list|(
operator|new
name|com
operator|.
name|aliyuncs
operator|.
name|auth
operator|.
name|BasicCredentials
argument_list|(
name|accessKeyId
argument_list|,
name|accessKeySecret
argument_list|)
argument_list|,
name|roleArn
argument_list|,
name|DefaultProfile
operator|.
name|getProfile
argument_list|(
literal|""
argument_list|,
name|accessKeyId
argument_list|,
name|accessKeySecret
argument_list|)
argument_list|)
operator|.
name|withExpiredDuration
argument_list|(
name|duration
argument_list|)
operator|.
name|withExpiredFactor
argument_list|(
name|expiredFactor
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|sessionName
argument_list|)
condition|)
block|{
name|stsCredentialsProvider
operator|.
name|withRoleSessionName
argument_list|(
name|sessionName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setCredentials (Credentials creds)
specifier|public
name|void
name|setCredentials
parameter_list|(
name|Credentials
name|creds
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
literal|"Should not set credentials from external call"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|Credentials
name|getCredentials
parameter_list|()
block|{
name|credentials
operator|=
name|stsCredentialsProvider
operator|.
name|getCredentials
argument_list|()
expr_stmt|;
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
literal|"Invalid credentials"
argument_list|)
throw|;
block|}
return|return
name|credentials
return|;
block|}
block|}
end_class

end_unit

