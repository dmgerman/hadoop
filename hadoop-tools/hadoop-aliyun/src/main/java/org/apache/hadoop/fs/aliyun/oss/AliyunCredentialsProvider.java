begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|DefaultCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|InvalidCredentialsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Support session credentials for authenticating with Aliyun.  */
end_comment

begin_class
DECL|class|AliyunCredentialsProvider
specifier|public
class|class
name|AliyunCredentialsProvider
implements|implements
name|CredentialsProvider
block|{
DECL|field|credentials
specifier|private
name|Credentials
name|credentials
init|=
literal|null
decl_stmt|;
DECL|method|AliyunCredentialsProvider (Configuration conf)
specifier|public
name|AliyunCredentialsProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|accessKeyId
decl_stmt|;
name|String
name|accessKeySecret
decl_stmt|;
name|String
name|securityToken
decl_stmt|;
try|try
block|{
name|accessKeyId
operator|=
name|AliyunOSSUtils
operator|.
name|getValueWithKey
argument_list|(
name|conf
argument_list|,
name|ACCESS_KEY_ID
argument_list|)
expr_stmt|;
name|accessKeySecret
operator|=
name|AliyunOSSUtils
operator|.
name|getValueWithKey
argument_list|(
name|conf
argument_list|,
name|ACCESS_KEY_SECRET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|securityToken
operator|=
name|AliyunOSSUtils
operator|.
name|getValueWithKey
argument_list|(
name|conf
argument_list|,
name|SECURITY_TOKEN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|securityToken
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|accessKeyId
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|accessKeySecret
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
literal|"AccessKeyId and AccessKeySecret should not be null or empty."
argument_list|)
throw|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|securityToken
argument_list|)
condition|)
block|{
name|credentials
operator|=
operator|new
name|DefaultCredentials
argument_list|(
name|accessKeyId
argument_list|,
name|accessKeySecret
argument_list|,
name|securityToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credentials
operator|=
operator|new
name|DefaultCredentials
argument_list|(
name|accessKeyId
argument_list|,
name|accessKeySecret
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setCredentials (Credentials creds)
specifier|public
name|void
name|setCredentials
parameter_list|(
name|Credentials
name|creds
parameter_list|)
block|{
if|if
condition|(
name|creds
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
literal|"Credentials should not be null."
argument_list|)
throw|;
block|}
name|credentials
operator|=
name|creds
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCredentials ()
specifier|public
name|Credentials
name|getCredentials
parameter_list|()
block|{
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidCredentialsException
argument_list|(
literal|"Invalid credentials"
argument_list|)
throw|;
block|}
return|return
name|credentials
return|;
block|}
block|}
end_class

end_unit

