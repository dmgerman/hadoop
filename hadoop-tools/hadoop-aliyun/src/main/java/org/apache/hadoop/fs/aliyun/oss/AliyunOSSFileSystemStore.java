begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|ClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|OSSClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|OSSException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|comm
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|AbortMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CannedAccessControlList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CompleteMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CompleteMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CopyObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|DeleteObjectsResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|GetObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|InitiateMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|InitiateMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ListObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|OSSObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|PutObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|UploadPartCopyRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|UploadPartCopyResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|UploadPartRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|UploadPartResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Core implementation of Aliyun OSS Filesystem for Hadoop.  * Provides the bridging logic between Hadoop's abstract filesystem and  * Aliyun OSS.  */
end_comment

begin_class
DECL|class|AliyunOSSFileSystemStore
specifier|public
class|class
name|AliyunOSSFileSystemStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AliyunOSSFileSystemStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|statistics
specifier|private
name|FileSystem
operator|.
name|Statistics
name|statistics
decl_stmt|;
DECL|field|ossClient
specifier|private
name|OSSClient
name|ossClient
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|uploadPartSize
specifier|private
name|long
name|uploadPartSize
decl_stmt|;
DECL|field|multipartThreshold
specifier|private
name|long
name|multipartThreshold
decl_stmt|;
DECL|field|partSize
specifier|private
name|long
name|partSize
decl_stmt|;
DECL|field|maxKeys
specifier|private
name|int
name|maxKeys
decl_stmt|;
DECL|field|serverSideEncryptionAlgorithm
specifier|private
name|String
name|serverSideEncryptionAlgorithm
decl_stmt|;
DECL|method|initialize (URI uri, Configuration conf, FileSystem.Statistics stat)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
operator|.
name|Statistics
name|stat
parameter_list|)
throws|throws
name|IOException
block|{
name|statistics
operator|=
name|stat
expr_stmt|;
name|ClientConfiguration
name|clientConf
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
name|clientConf
operator|.
name|setMaxConnections
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MAXIMUM_CONNECTIONS_KEY
argument_list|,
name|MAXIMUM_CONNECTIONS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|secureConnections
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SECURE_CONNECTIONS_KEY
argument_list|,
name|SECURE_CONNECTIONS_DEFAULT
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setProtocol
argument_list|(
name|secureConnections
condition|?
name|Protocol
operator|.
name|HTTPS
else|:
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setMaxErrorRetry
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_ERROR_RETRIES_KEY
argument_list|,
name|MAX_ERROR_RETRIES_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setConnectionTimeout
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|ESTABLISH_TIMEOUT_KEY
argument_list|,
name|ESTABLISH_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setSocketTimeout
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|SOCKET_TIMEOUT_KEY
argument_list|,
name|SOCKET_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setUserAgent
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|USER_AGENT_PREFIX
argument_list|,
name|USER_AGENT_PREFIX_DEFAULT
argument_list|)
operator|+
literal|", Hadoop/"
operator|+
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|proxyHost
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_HOST_KEY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|proxyPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|PROXY_PORT_KEY
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|proxyHost
argument_list|)
condition|)
block|{
name|clientConf
operator|.
name|setProxyHost
argument_list|(
name|proxyHost
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyPort
operator|>=
literal|0
condition|)
block|{
name|clientConf
operator|.
name|setProxyPort
argument_list|(
name|proxyPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|secureConnections
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Proxy host set without port. Using HTTPS default 443"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyPort
argument_list|(
literal|443
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Proxy host set without port. Using HTTP default 80"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyPort
argument_list|(
literal|80
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|proxyUsername
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_USERNAME_KEY
argument_list|)
decl_stmt|;
name|String
name|proxyPassword
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_PASSWORD_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|proxyUsername
operator|==
literal|null
operator|)
operator|!=
operator|(
name|proxyPassword
operator|==
literal|null
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Proxy error: "
operator|+
name|PROXY_USERNAME_KEY
operator|+
literal|" or "
operator|+
name|PROXY_PASSWORD_KEY
operator|+
literal|" set without the other."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|clientConf
operator|.
name|setProxyUsername
argument_list|(
name|proxyUsername
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyPassword
argument_list|(
name|proxyPassword
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyDomain
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_DOMAIN_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyWorkstation
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_WORKSTATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proxyPort
operator|>=
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Proxy error: "
operator|+
name|PROXY_PORT_KEY
operator|+
literal|" set without "
operator|+
name|PROXY_HOST_KEY
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|String
name|endPoint
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ENDPOINT_KEY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|endPoint
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Aliyun OSS endpoint should not be "
operator|+
literal|"null or empty. Please set proper endpoint with 'fs.oss.endpoint'."
argument_list|)
throw|;
block|}
name|CredentialsProvider
name|provider
init|=
name|AliyunOSSUtils
operator|.
name|getCredentialsProvider
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ossClient
operator|=
operator|new
name|OSSClient
argument_list|(
name|endPoint
argument_list|,
name|provider
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
name|uploadPartSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MULTIPART_UPLOAD_SIZE_KEY
argument_list|,
name|MULTIPART_UPLOAD_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|multipartThreshold
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MIN_MULTIPART_UPLOAD_THRESHOLD_KEY
argument_list|,
name|MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
name|partSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MULTIPART_UPLOAD_SIZE_KEY
argument_list|,
name|MULTIPART_UPLOAD_SIZE_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|partSize
operator|<
name|MIN_MULTIPART_UPLOAD_PART_SIZE
condition|)
block|{
name|partSize
operator|=
name|MIN_MULTIPART_UPLOAD_PART_SIZE
expr_stmt|;
block|}
name|serverSideEncryptionAlgorithm
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|uploadPartSize
operator|<
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MULTIPART_UPLOAD_SIZE_KEY
operator|+
literal|" must be at least 5 MB"
argument_list|)
expr_stmt|;
name|uploadPartSize
operator|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
if|if
condition|(
name|multipartThreshold
operator|<
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MIN_MULTIPART_UPLOAD_THRESHOLD_KEY
operator|+
literal|" must be at least 5 MB"
argument_list|)
expr_stmt|;
name|multipartThreshold
operator|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
if|if
condition|(
name|multipartThreshold
operator|>
literal|1024
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MIN_MULTIPART_UPLOAD_THRESHOLD_KEY
operator|+
literal|" must be less than 1 GB"
argument_list|)
expr_stmt|;
name|multipartThreshold
operator|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
name|String
name|cannedACLName
init|=
name|conf
operator|.
name|get
argument_list|(
name|CANNED_ACL_KEY
argument_list|,
name|CANNED_ACL_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|cannedACLName
argument_list|)
condition|)
block|{
name|CannedAccessControlList
name|cannedACL
init|=
name|CannedAccessControlList
operator|.
name|valueOf
argument_list|(
name|cannedACLName
argument_list|)
decl_stmt|;
name|ossClient
operator|.
name|setBucketAcl
argument_list|(
name|bucketName
argument_list|,
name|cannedACL
argument_list|)
expr_stmt|;
block|}
name|maxKeys
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_PAGING_KEYS_KEY
argument_list|,
name|MAX_PAGING_KEYS_DEFAULT
argument_list|)
expr_stmt|;
name|bucketName
operator|=
name|uri
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
comment|/**    * Delete an object, and update write operation statistics.    *    * @param key key to blob to delete.    */
DECL|method|deleteObject (String key)
specifier|public
name|void
name|deleteObject
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|ossClient
operator|.
name|deleteObject
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a list of keys, and update write operation statistics.    *    * @param keysToDelete collection of keys to delete.    * @throws IOException if failed to delete objects.    */
DECL|method|deleteObjects (List<String> keysToDelete)
specifier|public
name|void
name|deleteObjects
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|keysToDelete
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|CollectionUtils
operator|.
name|isEmpty
argument_list|(
name|keysToDelete
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Keys to delete is empty."
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|retry
init|=
literal|10
decl_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|deleteFailed
init|=
name|keysToDelete
decl_stmt|;
while|while
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|deleteFailed
argument_list|)
condition|)
block|{
name|DeleteObjectsRequest
name|deleteRequest
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|deleteRequest
operator|.
name|setKeys
argument_list|(
name|deleteFailed
argument_list|)
expr_stmt|;
comment|// There are two modes to do batch delete:
comment|// 1. detail mode: DeleteObjectsResult.getDeletedObjects returns objects
comment|// which were deleted successfully.
comment|// 2. simple mode: DeleteObjectsResult.getDeletedObjects returns objects
comment|// which were deleted unsuccessfully.
comment|// Here, we choose the simple mode to do batch delete.
name|deleteRequest
operator|.
name|setQuiet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DeleteObjectsResult
name|result
init|=
name|ossClient
operator|.
name|deleteObjects
argument_list|(
name|deleteRequest
argument_list|)
decl_stmt|;
name|deleteFailed
operator|=
name|result
operator|.
name|getDeletedObjects
argument_list|()
expr_stmt|;
name|tries
operator|++
expr_stmt|;
if|if
condition|(
name|tries
operator|==
name|retry
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|tries
operator|==
name|retry
operator|&&
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|deleteFailed
argument_list|)
condition|)
block|{
comment|// Most of time, it is impossible to try 10 times, expect the
comment|// Aliyun OSS service problems.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete Aliyun OSS objects for "
operator|+
name|tries
operator|+
literal|" times."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Delete a directory from Aliyun OSS.    *    * @param key directory key to delete.    * @throws IOException if failed to delete directory.    */
DECL|method|deleteDirs (String key)
specifier|public
name|void
name|deleteDirs
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|key
operator|=
name|AliyunOSSUtils
operator|.
name|maybeAddTrailingSlash
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|ListObjectsRequest
name|listRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|listRequest
operator|.
name|setPrefix
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setDelimiter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ObjectListing
name|objects
init|=
name|ossClient
operator|.
name|listObjects
argument_list|(
name|listRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keysToDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OSSObjectSummary
name|objectSummary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|keysToDelete
operator|.
name|add
argument_list|(
name|objectSummary
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteObjects
argument_list|(
name|keysToDelete
argument_list|)
expr_stmt|;
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|listRequest
operator|.
name|setMarker
argument_list|(
name|objects
operator|.
name|getNextMarker
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Return metadata of a given object key.    *    * @param key object key.    * @return return null if key does not exist.    */
DECL|method|getObjectMetadata (String key)
specifier|public
name|ObjectMetadata
name|getObjectMetadata
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|ossClient
operator|.
name|getObjectMetadata
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OSSException
name|osse
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Upload an empty file as an OSS object, using single upload.    *    * @param key object key.    * @throws IOException if failed to upload object.    */
DECL|method|storeEmptyFile (String key)
specifier|public
name|void
name|storeEmptyFile
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectMetadata
name|dirMeta
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|dirMeta
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|ossClient
operator|.
name|putObject
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|in
argument_list|,
name|dirMeta
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Copy an object from source key to destination key.    *    * @param srcKey source key.    * @param dstKey destination key.    * @return true if file is successfully copied.    */
DECL|method|copyFile (String srcKey, String dstKey)
specifier|public
name|boolean
name|copyFile
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
block|{
name|ObjectMetadata
name|objectMeta
init|=
name|ossClient
operator|.
name|getObjectMetadata
argument_list|(
name|bucketName
argument_list|,
name|srcKey
argument_list|)
decl_stmt|;
name|long
name|contentLength
init|=
name|objectMeta
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|<=
name|multipartThreshold
condition|)
block|{
return|return
name|singleCopy
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|multipartCopy
argument_list|(
name|srcKey
argument_list|,
name|contentLength
argument_list|,
name|dstKey
argument_list|)
return|;
block|}
block|}
comment|/**    * Use single copy to copy an OSS object.    * (The caller should make sure srcPath is a file and dstPath is valid)    *    * @param srcKey source key.    * @param dstKey destination key.    * @return true if object is successfully copied.    */
DECL|method|singleCopy (String srcKey, String dstKey)
specifier|private
name|boolean
name|singleCopy
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
block|{
name|CopyObjectResult
name|copyResult
init|=
name|ossClient
operator|.
name|copyObject
argument_list|(
name|bucketName
argument_list|,
name|srcKey
argument_list|,
name|bucketName
argument_list|,
name|dstKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|copyResult
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Use multipart copy to copy an OSS object.    * (The caller should make sure srcPath is a file and dstPath is valid)    *    * @param srcKey source key.    * @param contentLength data size of the object to copy.    * @param dstKey destination key.    * @return true if success, or false if upload is aborted.    */
DECL|method|multipartCopy (String srcKey, long contentLength, String dstKey)
specifier|private
name|boolean
name|multipartCopy
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|long
name|contentLength
parameter_list|,
name|String
name|dstKey
parameter_list|)
block|{
name|long
name|realPartSize
init|=
name|AliyunOSSUtils
operator|.
name|calculatePartSize
argument_list|(
name|contentLength
argument_list|,
name|uploadPartSize
argument_list|)
decl_stmt|;
name|int
name|partNum
init|=
call|(
name|int
call|)
argument_list|(
name|contentLength
operator|/
name|realPartSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentLength
operator|%
name|realPartSize
operator|!=
literal|0
condition|)
block|{
name|partNum
operator|++
expr_stmt|;
block|}
name|InitiateMultipartUploadRequest
name|initiateMultipartUploadRequest
init|=
operator|new
name|InitiateMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|dstKey
argument_list|)
decl_stmt|;
name|ObjectMetadata
name|meta
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
condition|)
block|{
name|meta
operator|.
name|setServerSideEncryption
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|initiateMultipartUploadRequest
operator|.
name|setObjectMetadata
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|InitiateMultipartUploadResult
name|initiateMultipartUploadResult
init|=
name|ossClient
operator|.
name|initiateMultipartUpload
argument_list|(
name|initiateMultipartUploadRequest
argument_list|)
decl_stmt|;
name|String
name|uploadId
init|=
name|initiateMultipartUploadResult
operator|.
name|getUploadId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PartETag
argument_list|>
name|partETags
init|=
operator|new
name|ArrayList
argument_list|<
name|PartETag
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNum
condition|;
name|i
operator|++
control|)
block|{
name|long
name|skipBytes
init|=
name|realPartSize
operator|*
name|i
decl_stmt|;
name|long
name|size
init|=
operator|(
name|realPartSize
operator|<
name|contentLength
operator|-
name|skipBytes
operator|)
condition|?
name|realPartSize
else|:
name|contentLength
operator|-
name|skipBytes
decl_stmt|;
name|UploadPartCopyRequest
name|partCopyRequest
init|=
operator|new
name|UploadPartCopyRequest
argument_list|()
decl_stmt|;
name|partCopyRequest
operator|.
name|setSourceBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setSourceKey
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setKey
argument_list|(
name|dstKey
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setUploadId
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setPartSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setBeginIndex
argument_list|(
name|skipBytes
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setPartNumber
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|UploadPartCopyResult
name|partCopyResult
init|=
name|ossClient
operator|.
name|uploadPartCopy
argument_list|(
name|partCopyRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|partETags
operator|.
name|add
argument_list|(
name|partCopyResult
operator|.
name|getPartETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|dstKey
argument_list|,
name|uploadId
argument_list|,
name|partETags
argument_list|)
decl_stmt|;
name|CompleteMultipartUploadResult
name|completeMultipartUploadResult
init|=
name|ossClient
operator|.
name|completeMultipartUpload
argument_list|(
name|completeMultipartUploadRequest
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|completeMultipartUploadResult
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|OSSException
decl||
name|ClientException
name|e
parameter_list|)
block|{
name|AbortMultipartUploadRequest
name|abortMultipartUploadRequest
init|=
operator|new
name|AbortMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|dstKey
argument_list|,
name|uploadId
argument_list|)
decl_stmt|;
name|ossClient
operator|.
name|abortMultipartUpload
argument_list|(
name|abortMultipartUploadRequest
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Upload a file as an OSS object, using single upload.    *    * @param key object key.    * @param file local file to upload.    * @throws IOException if failed to upload object.    */
DECL|method|uploadObject (String key, File file)
specifier|public
name|void
name|uploadObject
parameter_list|(
name|String
name|key
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|object
init|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|object
argument_list|)
decl_stmt|;
name|ObjectMetadata
name|meta
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|meta
operator|.
name|setContentLength
argument_list|(
name|object
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
condition|)
block|{
name|meta
operator|.
name|setServerSideEncryption
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|PutObjectResult
name|result
init|=
name|ossClient
operator|.
name|putObject
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|fis
argument_list|,
name|meta
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|result
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Upload a file as an OSS object, using multipart upload.    *    * @param key object key.    * @param file local file to upload.    * @throws IOException if failed to upload object.    */
DECL|method|multipartUploadObject (String key, File file)
specifier|public
name|void
name|multipartUploadObject
parameter_list|(
name|String
name|key
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|object
init|=
name|file
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|long
name|dataLen
init|=
name|object
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|realPartSize
init|=
name|AliyunOSSUtils
operator|.
name|calculatePartSize
argument_list|(
name|dataLen
argument_list|,
name|partSize
argument_list|)
decl_stmt|;
name|int
name|partNum
init|=
call|(
name|int
call|)
argument_list|(
name|dataLen
operator|/
name|realPartSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataLen
operator|%
name|realPartSize
operator|!=
literal|0
condition|)
block|{
name|partNum
operator|+=
literal|1
expr_stmt|;
block|}
name|InitiateMultipartUploadRequest
name|initiateMultipartUploadRequest
init|=
operator|new
name|InitiateMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|ObjectMetadata
name|meta
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
condition|)
block|{
name|meta
operator|.
name|setServerSideEncryption
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|initiateMultipartUploadRequest
operator|.
name|setObjectMetadata
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|InitiateMultipartUploadResult
name|initiateMultipartUploadResult
init|=
name|ossClient
operator|.
name|initiateMultipartUpload
argument_list|(
name|initiateMultipartUploadRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PartETag
argument_list|>
name|partETags
init|=
operator|new
name|ArrayList
argument_list|<
name|PartETag
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|uploadId
init|=
name|initiateMultipartUploadResult
operator|.
name|getUploadId
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNum
condition|;
name|i
operator|++
control|)
block|{
comment|// TODO: Optimize this, avoid opening the object multiple times
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|object
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|skipBytes
init|=
name|realPartSize
operator|*
name|i
decl_stmt|;
name|AliyunOSSUtils
operator|.
name|skipFully
argument_list|(
name|fis
argument_list|,
name|skipBytes
argument_list|)
expr_stmt|;
name|long
name|size
init|=
operator|(
name|realPartSize
operator|<
name|dataLen
operator|-
name|skipBytes
operator|)
condition|?
name|realPartSize
else|:
name|dataLen
operator|-
name|skipBytes
decl_stmt|;
name|UploadPartRequest
name|uploadPartRequest
init|=
operator|new
name|UploadPartRequest
argument_list|()
decl_stmt|;
name|uploadPartRequest
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setUploadId
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setInputStream
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setPartSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|uploadPartRequest
operator|.
name|setPartNumber
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|UploadPartResult
name|uploadPartResult
init|=
name|ossClient
operator|.
name|uploadPart
argument_list|(
name|uploadPartRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|partETags
operator|.
name|add
argument_list|(
name|uploadPartResult
operator|.
name|getPartETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|,
name|partETags
argument_list|)
decl_stmt|;
name|CompleteMultipartUploadResult
name|completeMultipartUploadResult
init|=
name|ossClient
operator|.
name|completeMultipartUpload
argument_list|(
name|completeMultipartUploadRequest
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|completeMultipartUploadResult
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OSSException
decl||
name|ClientException
name|e
parameter_list|)
block|{
name|AbortMultipartUploadRequest
name|abortMultipartUploadRequest
init|=
operator|new
name|AbortMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|)
decl_stmt|;
name|ossClient
operator|.
name|abortMultipartUpload
argument_list|(
name|abortMultipartUploadRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * list objects.    *    * @param prefix prefix.    * @param maxListingLength max no. of entries    * @param marker last key in any previous search.    * @param recursive whether to list directory recursively.    * @return a list of matches.    */
DECL|method|listObjects (String prefix, int maxListingLength, String marker, boolean recursive)
specifier|public
name|ObjectListing
name|listObjects
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|maxListingLength
parameter_list|,
name|String
name|marker
parameter_list|,
name|boolean
name|recursive
parameter_list|)
block|{
name|String
name|delimiter
init|=
name|recursive
condition|?
literal|null
else|:
literal|"/"
decl_stmt|;
name|prefix
operator|=
name|AliyunOSSUtils
operator|.
name|maybeAddTrailingSlash
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|ListObjectsRequest
name|listRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|listRequest
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setMaxKeys
argument_list|(
name|maxListingLength
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setMarker
argument_list|(
name|marker
argument_list|)
expr_stmt|;
name|ObjectListing
name|listing
init|=
name|ossClient
operator|.
name|listObjects
argument_list|(
name|listRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|listing
return|;
block|}
comment|/**    * Retrieve a part of an object.    *    * @param key the object name that is being retrieved from the Aliyun OSS.    * @param byteStart start position.    * @param byteEnd end position.    * @return This method returns null if the key is not found.    */
DECL|method|retrieve (String key, long byteStart, long byteEnd)
specifier|public
name|InputStream
name|retrieve
parameter_list|(
name|String
name|key
parameter_list|,
name|long
name|byteStart
parameter_list|,
name|long
name|byteEnd
parameter_list|)
block|{
try|try
block|{
name|GetObjectRequest
name|request
init|=
operator|new
name|GetObjectRequest
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRange
argument_list|(
name|byteStart
argument_list|,
name|byteEnd
argument_list|)
expr_stmt|;
return|return
name|ossClient
operator|.
name|getObject
argument_list|(
name|request
argument_list|)
operator|.
name|getObjectContent
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|OSSException
decl||
name|ClientException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Close OSS client properly.    */
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|ossClient
operator|!=
literal|null
condition|)
block|{
name|ossClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|ossClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Clean up all objects matching the prefix.    *    * @param prefix Aliyun OSS object prefix.    * @throws IOException if failed to clean up objects.    */
DECL|method|purge (String prefix)
specifier|public
name|void
name|purge
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
decl_stmt|;
try|try
block|{
name|ObjectListing
name|objects
init|=
name|listObjects
argument_list|(
name|prefix
argument_list|,
name|maxKeys
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|OSSObjectSummary
name|object
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|key
operator|=
name|object
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|ossClient
operator|.
name|deleteObject
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|dir
range|:
name|objects
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|deleteDirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OSSException
decl||
name|ClientException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to purge "
operator|+
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|singleStatusRemoteIterator ( final FileStatus fileStatus, final BlockLocation[] locations)
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|singleStatusRemoteIterator
parameter_list|(
specifier|final
name|FileStatus
name|fileStatus
parameter_list|,
specifier|final
name|BlockLocation
index|[]
name|locations
parameter_list|)
block|{
return|return
operator|new
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|hasNext
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|fileStatus
operator|!=
literal|null
operator|&&
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
name|LocatedFileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|LocatedFileStatus
name|s
init|=
operator|new
name|LocatedFileStatus
argument_list|(
name|fileStatus
argument_list|,
name|fileStatus
operator|.
name|isFile
argument_list|()
condition|?
name|locations
else|:
literal|null
argument_list|)
decl_stmt|;
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return
name|s
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
block|}
return|;
block|}
DECL|method|createLocatedFileStatusIterator ( final String prefix, final int maxListingLength, FileSystem fs, PathFilter filter, FileStatusAcceptor acceptor, String delimiter)
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|createLocatedFileStatusIterator
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|int
name|maxListingLength
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|PathFilter
name|filter
parameter_list|,
name|FileStatusAcceptor
name|acceptor
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
return|return
operator|new
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
argument_list|()
block|{
specifier|private
name|String
name|nextMarker
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|firstListing
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|meetEnd
init|=
literal|false
decl_stmt|;
specifier|private
name|ListIterator
argument_list|<
name|FileStatus
argument_list|>
name|batchIterator
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|firstListing
condition|)
block|{
name|requestNextBatch
argument_list|()
expr_stmt|;
name|firstListing
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|batchIterator
operator|.
name|hasNext
argument_list|()
operator|||
name|requestNextBatch
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|LocatedFileStatus
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasNext
argument_list|()
condition|)
block|{
name|FileStatus
name|status
init|=
name|batchIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|LocatedFileStatus
argument_list|(
name|status
argument_list|,
name|status
operator|.
name|isFile
argument_list|()
condition|?
name|locations
else|:
literal|null
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|boolean
name|requestNextBatch
parameter_list|()
block|{
if|if
condition|(
name|meetEnd
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ListObjectsRequest
name|listRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|listRequest
operator|.
name|setPrefix
argument_list|(
name|AliyunOSSUtils
operator|.
name|maybeAddTrailingSlash
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setMaxKeys
argument_list|(
name|maxListingLength
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setMarker
argument_list|(
name|nextMarker
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setDelimiter
argument_list|(
name|delimiter
argument_list|)
expr_stmt|;
name|ObjectListing
name|listing
init|=
name|ossClient
operator|.
name|listObjects
argument_list|(
name|listRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|stats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|listing
operator|.
name|getObjectSummaries
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|OSSObjectSummary
name|summary
range|:
name|listing
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|summary
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|path
argument_list|)
operator|&&
name|acceptor
operator|.
name|accept
argument_list|(
name|path
argument_list|,
name|summary
argument_list|)
condition|)
block|{
name|FileStatus
name|status
init|=
operator|new
name|FileStatus
argument_list|(
name|summary
operator|.
name|getSize
argument_list|()
argument_list|,
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|1
argument_list|,
name|fs
operator|.
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
argument_list|,
name|summary
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|commonPrefix
range|:
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|Path
name|path
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|commonPrefix
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|path
argument_list|)
operator|&&
name|acceptor
operator|.
name|accept
argument_list|(
name|path
argument_list|,
name|commonPrefix
argument_list|)
condition|)
block|{
name|FileStatus
name|status
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|stats
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
name|batchIterator
operator|=
name|stats
operator|.
name|listIterator
argument_list|()
expr_stmt|;
if|if
condition|(
name|listing
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|nextMarker
operator|=
name|listing
operator|.
name|getNextMarker
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meetEnd
operator|=
literal|true
expr_stmt|;
block|}
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|batchIterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

