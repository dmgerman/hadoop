begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility methods for Aliyun OSS code.  */
end_comment

begin_class
DECL|class|AliyunOSSUtils
specifier|final
specifier|public
class|class
name|AliyunOSSUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AliyunOSSUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|AliyunOSSUtils ()
specifier|private
name|AliyunOSSUtils
parameter_list|()
block|{   }
comment|/**    * Used to get password from configuration.    *    * @param conf configuration that contains password information    * @param key the key of the password    * @return the value for the key    * @throws IOException if failed to get password from configuration    */
DECL|method|getValueWithKey (Configuration conf, String key)
specifier|public
specifier|static
name|String
name|getValueWithKey
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|char
index|[]
name|pass
init|=
name|conf
operator|.
name|getPassword
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pass
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
operator|new
name|String
argument_list|(
name|pass
argument_list|)
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot find password option "
operator|+
name|key
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Skip the requested number of bytes or fail if there are no enough bytes    * left. This allows for the possibility that {@link InputStream#skip(long)}    * may not skip as many bytes as requested (most likely because of reaching    * EOF).    *    * @param is the input stream to skip.    * @param n the number of bytes to skip.    * @throws IOException thrown when skipped less number of bytes.    */
DECL|method|skipFully (InputStream is, long n)
specifier|public
specifier|static
name|void
name|skipFully
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
name|long
name|cur
init|=
literal|0
decl_stmt|;
do|do
block|{
name|cur
operator|=
name|is
operator|.
name|skip
argument_list|(
name|n
operator|-
name|total
argument_list|)
expr_stmt|;
name|total
operator|+=
name|cur
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|total
operator|<
name|n
operator|)
operator|&&
operator|(
name|cur
operator|>
literal|0
operator|)
condition|)
do|;
if|if
condition|(
name|total
operator|<
name|n
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to skip "
operator|+
name|n
operator|+
literal|" bytes, possibly due "
operator|+
literal|"to EOF."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Calculate a proper size of multipart piece. If<code>minPartSize</code>    * is too small, the number of multipart pieces may exceed the limit of    * {@link Constants#MULTIPART_UPLOAD_PART_NUM_LIMIT}.    *    * @param contentLength the size of file.    * @param minPartSize the minimum size of multipart piece.    * @return a revisional size of multipart piece.    */
DECL|method|calculatePartSize (long contentLength, long minPartSize)
specifier|public
specifier|static
name|long
name|calculatePartSize
parameter_list|(
name|long
name|contentLength
parameter_list|,
name|long
name|minPartSize
parameter_list|)
block|{
name|long
name|tmpPartSize
init|=
name|contentLength
operator|/
name|MULTIPART_UPLOAD_PART_NUM_LIMIT
operator|+
literal|1
decl_stmt|;
return|return
name|Math
operator|.
name|max
argument_list|(
name|minPartSize
argument_list|,
name|tmpPartSize
argument_list|)
return|;
block|}
comment|/**    * Create credential provider specified by configuration, or create default    * credential provider if not specified.    *    * @param conf configuration    * @return a credential provider    * @throws IOException on any problem. Class construction issues may be    * nested inside the IOE.    */
DECL|method|getCredentialsProvider (Configuration conf)
specifier|public
specifier|static
name|CredentialsProvider
name|getCredentialsProvider
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|CredentialsProvider
name|credentials
decl_stmt|;
name|String
name|className
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|Configuration
name|newConf
init|=
name|ProviderUtils
operator|.
name|excludeIncompatibleCredentialProviders
argument_list|(
name|conf
argument_list|,
name|AliyunOSSFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|credentials
operator|=
operator|new
name|AliyunCredentialsProvider
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Credential provider class is:"
operator|+
name|className
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|credClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
try|try
block|{
name|credentials
operator|=
operator|(
name|CredentialsProvider
operator|)
name|credClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
name|credentials
operator|=
operator|(
name|CredentialsProvider
operator|)
name|credClass
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|className
operator|+
literal|" not found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s constructor exception.  A "
operator|+
literal|"class specified in %s must provide an accessible constructor "
operator|+
literal|"accepting URI and Configuration, or an accessible default "
operator|+
literal|"constructor."
argument_list|,
name|className
argument_list|,
name|ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|className
operator|+
literal|" instantiation exception."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|credentials
return|;
block|}
comment|/**    * Turns a path (relative or otherwise) into an OSS key, adding a trailing    * "/" if the path is not the root<i>and</i> does not already have a "/"    * at the end.    *    * @param key OSS key or ""    * @return the with a trailing "/", or, if it is the root key, "".    */
DECL|method|maybeAddTrailingSlash (String key)
specifier|public
specifier|static
name|String
name|maybeAddTrailingSlash
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|key
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|key
operator|+
literal|'/'
return|;
block|}
else|else
block|{
return|return
name|key
return|;
block|}
block|}
comment|/**    * Check if OSS object represents a directory.    *    * @param name object key    * @param size object content length    * @return true if object represents a directory    */
DECL|method|objectRepresentsDirectory (final String name, final long size)
specifier|public
specifier|static
name|boolean
name|objectRepresentsDirectory
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|long
name|size
parameter_list|)
block|{
return|return
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|name
argument_list|)
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|size
operator|==
literal|0L
return|;
block|}
block|}
end_class

end_unit

