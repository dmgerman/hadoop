begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_comment
comment|/**  * Asynchronous multi-part based uploading mechanism to support huge file  * which is larger than 5GB. Data will be buffered on local disk, then uploaded  * to OSS in {@link #close()} method.  */
end_comment

begin_class
DECL|class|AliyunOSSBlockOutputStream
specifier|public
class|class
name|AliyunOSSBlockOutputStream
extends|extends
name|OutputStream
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AliyunOSSBlockOutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|store
specifier|private
name|AliyunOSSFileSystemStore
name|store
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
decl_stmt|;
DECL|field|key
specifier|private
name|String
name|key
decl_stmt|;
DECL|field|blockFile
specifier|private
name|File
name|blockFile
decl_stmt|;
DECL|field|blockFiles
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|File
argument_list|>
name|blockFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|blockSize
specifier|private
name|long
name|blockSize
decl_stmt|;
DECL|field|blockId
specifier|private
name|int
name|blockId
init|=
literal|0
decl_stmt|;
DECL|field|blockWritten
specifier|private
name|long
name|blockWritten
init|=
literal|0L
decl_stmt|;
DECL|field|uploadId
specifier|private
name|String
name|uploadId
init|=
literal|null
decl_stmt|;
DECL|field|partETagsFutures
specifier|private
specifier|final
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|PartETag
argument_list|>
argument_list|>
name|partETagsFutures
decl_stmt|;
DECL|field|executorService
specifier|private
specifier|final
name|ListeningExecutorService
name|executorService
decl_stmt|;
DECL|field|blockStream
specifier|private
name|OutputStream
name|blockStream
decl_stmt|;
DECL|field|singleByte
specifier|private
specifier|final
name|byte
index|[]
name|singleByte
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
DECL|method|AliyunOSSBlockOutputStream (Configuration conf, AliyunOSSFileSystemStore store, String key, Long blockSize, ExecutorService executorService)
specifier|public
name|AliyunOSSBlockOutputStream
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|AliyunOSSFileSystemStore
name|store
parameter_list|,
name|String
name|key
parameter_list|,
name|Long
name|blockSize
parameter_list|,
name|ExecutorService
name|executorService
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
name|this
operator|.
name|blockFile
operator|=
name|newBlockFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|blockStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|blockFile
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|partETagsFutures
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
block|}
DECL|method|newBlockFile ()
specifier|private
name|File
name|newBlockFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|AliyunOSSUtils
operator|.
name|createTmpFileForWrite
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"oss-block-%04d-"
argument_list|,
name|blockId
argument_list|)
argument_list|,
name|blockSize
argument_list|,
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|blockStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
name|blockStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|blockStream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|blockFiles
operator|.
name|values
argument_list|()
operator|.
name|contains
argument_list|(
name|blockFile
argument_list|)
condition|)
block|{
name|blockId
operator|++
expr_stmt|;
name|blockFiles
operator|.
name|put
argument_list|(
name|blockId
argument_list|,
name|blockFile
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|blockFiles
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// just upload it directly
name|store
operator|.
name|uploadObject
argument_list|(
name|key
argument_list|,
name|blockFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|blockWritten
operator|>
literal|0
condition|)
block|{
name|ListenableFuture
argument_list|<
name|PartETag
argument_list|>
name|partETagFuture
init|=
name|executorService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|PartETag
name|partETag
init|=
name|store
operator|.
name|uploadPart
argument_list|(
name|blockFile
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|,
name|blockId
argument_list|)
decl_stmt|;
return|return
name|partETag
return|;
block|}
argument_list|)
decl_stmt|;
name|partETagsFutures
operator|.
name|add
argument_list|(
name|partETagFuture
argument_list|)
expr_stmt|;
block|}
comment|// wait for the partial uploads to finish
specifier|final
name|List
argument_list|<
name|PartETag
argument_list|>
name|partETags
init|=
name|waitForAllPartUploads
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|partETags
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to multipart upload to oss, abort it."
argument_list|)
throw|;
block|}
name|store
operator|.
name|completeMultipartUpload
argument_list|(
name|key
argument_list|,
name|uploadId
argument_list|,
name|partETags
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|removePartFiles
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|singleByte
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|write
argument_list|(
name|singleByte
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Stream closed."
argument_list|)
throw|;
block|}
name|blockStream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|blockWritten
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|blockWritten
operator|>=
name|blockSize
condition|)
block|{
name|uploadCurrentPart
argument_list|()
expr_stmt|;
name|blockWritten
operator|=
literal|0L
expr_stmt|;
block|}
block|}
DECL|method|removePartFiles ()
specifier|private
name|void
name|removePartFiles
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|ListenableFuture
argument_list|<
name|PartETag
argument_list|>
name|partETagFuture
range|:
name|partETagsFutures
control|)
block|{
if|if
condition|(
operator|!
name|partETagFuture
operator|.
name|isDone
argument_list|()
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|File
name|blockFile
init|=
name|blockFiles
operator|.
name|get
argument_list|(
name|partETagFuture
operator|.
name|get
argument_list|()
operator|.
name|getPartNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockFile
operator|!=
literal|null
operator|&&
name|blockFile
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|blockFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to delete temporary file {}"
argument_list|,
name|blockFile
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|uploadCurrentPart ()
specifier|private
name|void
name|uploadCurrentPart
parameter_list|()
throws|throws
name|IOException
block|{
name|blockStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|blockStream
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|blockId
operator|==
literal|0
condition|)
block|{
name|uploadId
operator|=
name|store
operator|.
name|getUploadId
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|blockId
operator|++
expr_stmt|;
name|blockFiles
operator|.
name|put
argument_list|(
name|blockId
argument_list|,
name|blockFile
argument_list|)
expr_stmt|;
name|File
name|currentFile
init|=
name|blockFile
decl_stmt|;
name|int
name|currentBlockId
init|=
name|blockId
decl_stmt|;
name|ListenableFuture
argument_list|<
name|PartETag
argument_list|>
name|partETagFuture
init|=
name|executorService
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
name|PartETag
name|partETag
init|=
name|store
operator|.
name|uploadPart
argument_list|(
name|currentFile
argument_list|,
name|key
argument_list|,
name|uploadId
argument_list|,
name|currentBlockId
argument_list|)
decl_stmt|;
return|return
name|partETag
return|;
block|}
argument_list|)
decl_stmt|;
name|partETagsFutures
operator|.
name|add
argument_list|(
name|partETagFuture
argument_list|)
expr_stmt|;
name|removePartFiles
argument_list|()
expr_stmt|;
name|blockFile
operator|=
name|newBlockFile
argument_list|()
expr_stmt|;
name|blockStream
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|blockFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Block awaiting all outstanding uploads to complete.    * @return list of results    * @throws IOException IO Problems    */
DECL|method|waitForAllPartUploads ()
specifier|private
name|List
argument_list|<
name|PartETag
argument_list|>
name|waitForAllPartUploads
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for {} uploads to complete"
argument_list|,
name|partETagsFutures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|Futures
operator|.
name|allAsList
argument_list|(
name|partETagsFutures
argument_list|)
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted partUpload"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|ee
parameter_list|)
block|{
comment|//there is no way of recovering so abort
comment|//cancel all partUploads
name|LOG
operator|.
name|debug
argument_list|(
literal|"While waiting for upload completion"
argument_list|,
name|ee
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cancelling futures"
argument_list|)
expr_stmt|;
for|for
control|(
name|ListenableFuture
argument_list|<
name|PartETag
argument_list|>
name|future
range|:
name|partETagsFutures
control|)
block|{
name|future
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//abort multipartupload
name|store
operator|.
name|abortMultipartUpload
argument_list|(
name|key
argument_list|,
name|uploadId
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Multi-part upload with id '"
operator|+
name|uploadId
operator|+
literal|"' to "
operator|+
name|key
argument_list|,
name|ee
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

