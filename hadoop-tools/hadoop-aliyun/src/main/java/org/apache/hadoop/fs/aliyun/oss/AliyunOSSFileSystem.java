begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|CollectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CreateFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocatedFileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|RemoteIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|BlockingThreadPoolExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|OSSObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|SemaphoredDelegatingExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|AliyunOSSUtils
operator|.
name|intOption
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|AliyunOSSUtils
operator|.
name|longOption
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|AliyunOSSUtils
operator|.
name|objectRepresentsDirectory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link FileSystem} for<a href="https://oss.aliyun.com">  * Aliyun OSS</a>, used to access OSS blob system in a filesystem style.  */
end_comment

begin_class
DECL|class|AliyunOSSFileSystem
specifier|public
class|class
name|AliyunOSSFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AliyunOSSFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|bucket
specifier|private
name|String
name|bucket
decl_stmt|;
DECL|field|username
specifier|private
name|String
name|username
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|blockOutputActiveBlocks
specifier|private
name|int
name|blockOutputActiveBlocks
decl_stmt|;
DECL|field|store
specifier|private
name|AliyunOSSFileSystemStore
name|store
decl_stmt|;
DECL|field|maxKeys
specifier|private
name|int
name|maxKeys
decl_stmt|;
DECL|field|maxReadAheadPartNumber
specifier|private
name|int
name|maxReadAheadPartNumber
decl_stmt|;
DECL|field|maxConcurrentCopyTasksPerDir
specifier|private
name|int
name|maxConcurrentCopyTasksPerDir
decl_stmt|;
DECL|field|boundedThreadPool
specifier|private
name|ListeningExecutorService
name|boundedThreadPool
decl_stmt|;
DECL|field|boundedCopyThreadPool
specifier|private
name|ListeningExecutorService
name|boundedCopyThreadPool
decl_stmt|;
DECL|field|DEFAULT_FILTER
specifier|private
specifier|static
specifier|final
name|PathFilter
name|DEFAULT_FILTER
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Override
DECL|method|append (Path path, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Append is not supported!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|boundedThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|boundedCopyThreadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|create (Path path, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|FileStatus
name|status
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// get the status or throw a FNFE
name|status
operator|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// if the thread reaches here, there is something at the path
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// path references a directory
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|path
operator|+
literal|" is a directory"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|overwrite
condition|)
block|{
comment|// path references a file and overwrite is disabled
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|path
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Overwriting file {}"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// this means the file is not found
block|}
name|long
name|uploadPartSize
init|=
name|AliyunOSSUtils
operator|.
name|getMultipartSizeProperty
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|MULTIPART_UPLOAD_PART_SIZE_KEY
argument_list|,
name|MULTIPART_UPLOAD_PART_SIZE_DEFAULT
argument_list|)
decl_stmt|;
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|AliyunOSSBlockOutputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|store
argument_list|,
name|key
argument_list|,
name|uploadPartSize
argument_list|,
operator|new
name|SemaphoredDelegatingExecutor
argument_list|(
name|boundedThreadPool
argument_list|,
name|blockOutputActiveBlocks
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|,
name|statistics
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    * @throws FileNotFoundException if the parent directory is not present -or    * is not a directory.    */
annotation|@
name|Override
DECL|method|createNonRecursive (Path path, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|EnumSet
argument_list|<
name|CreateFlag
argument_list|>
name|flags
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
comment|// expect this to raise an exception if there is no parent
if|if
condition|(
operator|!
name|getFileStatus
argument_list|(
name|parent
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Not a directory: "
operator|+
name|parent
argument_list|)
throw|;
block|}
block|}
return|return
name|create
argument_list|(
name|path
argument_list|,
name|permission
argument_list|,
name|flags
operator|.
name|contains
argument_list|(
name|CreateFlag
operator|.
name|OVERWRITE
argument_list|)
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path path, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|innerDelete
argument_list|(
name|getFileStatus
argument_list|(
name|path
argument_list|)
argument_list|,
name|recursive
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't delete {} - does not exist"
argument_list|,
name|path
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Delete an object. See {@link #delete(Path, boolean)}.    *    * @param status fileStatus object    * @param recursive if path is a directory and set to    * true, the directory is deleted else throws an exception. In    * case of a file the recursive can be set to either true or false.    * @return  true if delete is successful else false.    * @throws IOException due to inability to delete a directory or file.    */
DECL|method|innerDelete (FileStatus status, boolean recursive)
specifier|private
name|boolean
name|innerDelete
parameter_list|(
name|FileStatus
name|status
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|f
init|=
name|status
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|statuses
decl_stmt|;
comment|// indicating root directory "/".
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|statuses
operator|=
name|listStatus
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isEmptyDir
init|=
name|statuses
operator|.
name|length
operator|<=
literal|0
decl_stmt|;
return|return
name|rejectRootDirectoryDelete
argument_list|(
name|isEmptyDir
argument_list|,
name|recursive
argument_list|)
return|;
block|}
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|recursive
condition|)
block|{
comment|// Check whether it is an empty directory or not
name|statuses
operator|=
name|listStatus
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory "
operator|+
name|f
operator|+
literal|": It is not empty!"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Delete empty directory without '-r'
name|key
operator|=
name|AliyunOSSUtils
operator|.
name|maybeAddTrailingSlash
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|store
operator|.
name|deleteObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|store
operator|.
name|deleteDirs
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|store
operator|.
name|deleteObject
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|createFakeDirectoryIfNecessary
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Implements the specific logic to reject root directory deletion.    * The caller must return the result of this call, rather than    * attempt to continue with the delete operation: deleting root    * directories is never allowed. This method simply implements    * the policy of when to return an exit code versus raise an exception.    * @param isEmptyDir empty directory or not    * @param recursive recursive flag from command    * @return a return code for the operation    * @throws PathIOException if the operation was explicitly rejected.    */
DECL|method|rejectRootDirectoryDelete (boolean isEmptyDir, boolean recursive)
specifier|private
name|boolean
name|rejectRootDirectoryDelete
parameter_list|(
name|boolean
name|isEmptyDir
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"oss delete the {} root directory of {}"
argument_list|,
name|bucket
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
if|if
condition|(
name|isEmptyDir
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|recursive
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// reject
throw|throw
operator|new
name|PathIOException
argument_list|(
name|bucket
argument_list|,
literal|"Cannot delete root path"
argument_list|)
throw|;
block|}
block|}
DECL|method|createFakeDirectoryIfNecessary (Path f)
specifier|private
name|void
name|createFakeDirectoryIfNecessary
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|key
argument_list|)
operator|&&
operator|!
name|exists
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating new fake directory at {}"
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|pathToKey
argument_list|(
name|f
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path path)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qualifiedPath
init|=
name|path
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
comment|// Root always exists
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|OSSFileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qualifiedPath
argument_list|,
name|username
argument_list|)
return|;
block|}
name|ObjectMetadata
name|meta
init|=
name|store
operator|.
name|getObjectMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// If key not found and key does not end with "/"
if|if
condition|(
name|meta
operator|==
literal|null
operator|&&
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// In case of 'dir + "/"'
name|key
operator|+=
literal|"/"
expr_stmt|;
name|meta
operator|=
name|store
operator|.
name|getObjectMetadata
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
name|ObjectListing
name|listing
init|=
name|store
operator|.
name|listObjects
argument_list|(
name|key
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|listing
operator|.
name|getObjectSummaries
argument_list|()
argument_list|)
operator|||
name|CollectionUtils
operator|.
name|isNotEmpty
argument_list|(
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|OSSFileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qualifiedPath
argument_list|,
name|username
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|path
operator|+
literal|": No such file or directory!"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|objectRepresentsDirectory
argument_list|(
name|key
argument_list|,
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|OSSFileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|qualifiedPath
argument_list|,
name|username
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|OSSFileStatus
argument_list|(
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|qualifiedPath
argument_list|,
name|username
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"oss"
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultPort ()
specifier|public
name|int
name|getDefaultPort
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|OSS_DEFAULT_PORT
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|FS_OSS_BLOCK_SIZE_KEY
argument_list|,
name|FS_OSS_BLOCK_SIZE_DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
comment|// Does not support Token
return|return
literal|null
return|;
block|}
comment|/**    * Initialize new FileSystem.    *    * @param name the uri of the file system, including host, port, etc.    * @param conf configuration of the file system    * @throws IOException IO problems    */
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|name
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|uri
operator|=
name|java
operator|.
name|net
operator|.
name|URI
operator|.
name|create
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|name
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
comment|// Username is the current user at the time the FS was instantiated.
name|username
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|username
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|long
name|keepAliveTime
init|=
name|longOption
argument_list|(
name|conf
argument_list|,
name|KEEPALIVE_TIME_KEY
argument_list|,
name|KEEPALIVE_TIME_DEFAULT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|blockOutputActiveBlocks
operator|=
name|intOption
argument_list|(
name|conf
argument_list|,
name|UPLOAD_ACTIVE_BLOCKS_KEY
argument_list|,
name|UPLOAD_ACTIVE_BLOCKS_DEFAULT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|AliyunOSSFileSystemStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|,
name|username
argument_list|,
name|statistics
argument_list|)
expr_stmt|;
name|maxKeys
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_PAGING_KEYS_KEY
argument_list|,
name|MAX_PAGING_KEYS_DEFAULT
argument_list|)
expr_stmt|;
name|int
name|threadNum
init|=
name|AliyunOSSUtils
operator|.
name|intPositiveOption
argument_list|(
name|conf
argument_list|,
name|Constants
operator|.
name|MULTIPART_DOWNLOAD_THREAD_NUMBER_KEY
argument_list|,
name|Constants
operator|.
name|MULTIPART_DOWNLOAD_THREAD_NUMBER_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|totalTasks
init|=
name|AliyunOSSUtils
operator|.
name|intPositiveOption
argument_list|(
name|conf
argument_list|,
name|Constants
operator|.
name|MAX_TOTAL_TASKS_KEY
argument_list|,
name|Constants
operator|.
name|MAX_TOTAL_TASKS_DEFAULT
argument_list|)
decl_stmt|;
name|maxReadAheadPartNumber
operator|=
name|AliyunOSSUtils
operator|.
name|intPositiveOption
argument_list|(
name|conf
argument_list|,
name|Constants
operator|.
name|MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_KEY
argument_list|,
name|Constants
operator|.
name|MULTIPART_DOWNLOAD_AHEAD_PART_MAX_NUM_DEFAULT
argument_list|)
expr_stmt|;
name|this
operator|.
name|boundedThreadPool
operator|=
name|BlockingThreadPoolExecutorService
operator|.
name|newInstance
argument_list|(
name|threadNum
argument_list|,
name|totalTasks
argument_list|,
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
literal|"oss-transfer-shared"
argument_list|)
expr_stmt|;
name|maxConcurrentCopyTasksPerDir
operator|=
name|AliyunOSSUtils
operator|.
name|intPositiveOption
argument_list|(
name|conf
argument_list|,
name|Constants
operator|.
name|MAX_CONCURRENT_COPY_TASKS_PER_DIR_KEY
argument_list|,
name|Constants
operator|.
name|MAX_CONCURRENT_COPY_TASKS_PER_DIR_DEFAULT
argument_list|)
expr_stmt|;
name|int
name|maxCopyThreads
init|=
name|AliyunOSSUtils
operator|.
name|intPositiveOption
argument_list|(
name|conf
argument_list|,
name|Constants
operator|.
name|MAX_COPY_THREADS_NUM_KEY
argument_list|,
name|Constants
operator|.
name|MAX_COPY_THREADS_DEFAULT
argument_list|)
decl_stmt|;
name|int
name|maxCopyTasks
init|=
name|AliyunOSSUtils
operator|.
name|intPositiveOption
argument_list|(
name|conf
argument_list|,
name|Constants
operator|.
name|MAX_COPY_TASKS_KEY
argument_list|,
name|Constants
operator|.
name|MAX_COPY_TASKS_DEFAULT
argument_list|)
decl_stmt|;
name|this
operator|.
name|boundedCopyThreadPool
operator|=
name|BlockingThreadPoolExecutorService
operator|.
name|newInstance
argument_list|(
name|maxCopyThreads
argument_list|,
name|maxCopyTasks
argument_list|,
literal|60L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
literal|"oss-copy-unbounded"
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Turn a path (relative or otherwise) into an OSS key.    *    * @param path the path of the file.    * @return the key of the object that represents the file.    */
DECL|method|pathToKey (Path path)
specifier|private
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|keyToPath (String key)
specifier|private
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path path)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"List status for path: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"listStatus: doing listObjects for directory "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
name|ObjectListing
name|objects
init|=
name|store
operator|.
name|listObjects
argument_list|(
name|key
argument_list|,
name|maxKeys
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|OSSObjectSummary
name|objectSummary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|String
name|objKey
init|=
name|objectSummary
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|objKey
operator|.
name|equals
argument_list|(
name|key
operator|+
literal|"/"
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring: "
operator|+
name|objKey
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
name|Path
name|keyPath
init|=
name|keyToPath
argument_list|(
name|objectSummary
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: fi: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|OSSFileStatus
argument_list|(
name|objectSummary
operator|.
name|getSize
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|keyPath
argument_list|)
argument_list|,
name|objectSummary
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|keyPath
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|prefix
range|:
name|objects
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|key
operator|+
literal|"/"
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring: "
operator|+
name|prefix
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
name|Path
name|keyPath
init|=
name|keyToPath
argument_list|(
name|prefix
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: rd: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|getFileStatus
argument_list|(
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"listStatus: list truncated - getting next batch"
argument_list|)
expr_stmt|;
block|}
name|String
name|nextMarker
init|=
name|objects
operator|.
name|getNextMarker
argument_list|()
decl_stmt|;
name|objects
operator|=
name|store
operator|.
name|listObjects
argument_list|(
name|key
argument_list|,
name|maxKeys
argument_list|,
name|nextMarker
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: rd (not a dir): "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listFiles ( final Path f, final boolean recursive)
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listFiles
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qualifiedPath
init|=
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
name|PathFilter
name|filter
init|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|status
operator|.
name|isFile
argument_list|()
operator|||
operator|!
name|path
operator|.
name|equals
argument_list|(
name|f
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|FileStatusAcceptor
name|acceptor
init|=
operator|new
name|FileStatusAcceptor
operator|.
name|AcceptFilesOnly
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
return|return
name|innerList
argument_list|(
name|f
argument_list|,
name|status
argument_list|,
name|filter
argument_list|,
name|acceptor
argument_list|,
name|recursive
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listLocatedStatus (Path f)
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listLocatedStatus
argument_list|(
name|f
argument_list|,
name|DEFAULT_FILTER
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listLocatedStatus (final Path f, final PathFilter filter)
specifier|public
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|listLocatedStatus
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qualifiedPath
init|=
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
specifier|final
name|FileStatus
name|status
init|=
name|getFileStatus
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
name|FileStatusAcceptor
name|acceptor
init|=
operator|new
name|FileStatusAcceptor
operator|.
name|AcceptAllButSelf
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
return|return
name|innerList
argument_list|(
name|f
argument_list|,
name|status
argument_list|,
name|filter
argument_list|,
name|acceptor
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|innerList (final Path f, final FileStatus status, final PathFilter filter, final FileStatusAcceptor acceptor, final boolean recursive)
specifier|private
name|RemoteIterator
argument_list|<
name|LocatedFileStatus
argument_list|>
name|innerList
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|FileStatus
name|status
parameter_list|,
specifier|final
name|PathFilter
name|filter
parameter_list|,
specifier|final
name|FileStatusAcceptor
name|acceptor
parameter_list|,
specifier|final
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qualifiedPath
init|=
name|f
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} is a File"
argument_list|,
name|qualifiedPath
argument_list|)
expr_stmt|;
specifier|final
name|BlockLocation
index|[]
name|locations
init|=
name|getFileBlockLocations
argument_list|(
name|status
argument_list|,
literal|0
argument_list|,
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|store
operator|.
name|singleStatusRemoteIterator
argument_list|(
name|filter
operator|.
name|accept
argument_list|(
name|f
argument_list|)
condition|?
name|status
else|:
literal|null
argument_list|,
name|locations
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|store
operator|.
name|createLocatedFileStatusIterator
argument_list|(
name|key
argument_list|,
name|maxKeys
argument_list|,
name|this
argument_list|,
name|filter
argument_list|,
name|acceptor
argument_list|,
name|recursive
condition|?
literal|null
else|:
literal|"/"
argument_list|)
return|;
block|}
block|}
comment|/**    * Used to create an empty file that represents an empty directory.    *    * @param key directory path    * @return true if directory is successfully created    * @throws IOException    */
DECL|method|mkdir (final String key)
specifier|private
name|boolean
name|mkdir
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|key
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotEmpty
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dirName
operator|+=
literal|"/"
expr_stmt|;
block|}
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path path, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Path is a file: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|validatePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|mkdir
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
comment|/**    * Check whether the path is a valid path.    *    * @param path the path to be checked.    * @throws IOException    */
DECL|method|validatePath (Path path)
specifier|private
name|void
name|validatePath
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|fPart
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|fPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If path exists and a directory, exit
break|break;
block|}
else|else
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path '%s', it is a file."
argument_list|,
name|fPart
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{       }
name|fPart
operator|=
name|fPart
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|fPart
operator|!=
literal|null
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|open (Path path, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't open "
operator|+
name|path
operator|+
literal|" because it is a directory"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|AliyunOSSInputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
operator|new
name|SemaphoredDelegatingExecutor
argument_list|(
name|boundedThreadPool
argument_list|,
name|maxReadAheadPartNumber
argument_list|,
literal|true
argument_list|)
argument_list|,
name|maxReadAheadPartNumber
argument_list|,
name|store
argument_list|,
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|statistics
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path srcPath, Path dstPath)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcPath
operator|.
name|isRoot
argument_list|()
condition|)
block|{
comment|// Cannot rename root of file system
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot rename the root of a filesystem"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|Path
name|parent
init|=
name|dstPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|srcPath
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStatus
name|srcStatus
init|=
name|getFileStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|FileStatus
name|dstStatus
decl_stmt|;
try|try
block|{
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|dstStatus
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dstStatus
operator|==
literal|null
condition|)
block|{
comment|// If dst doesn't exist, check whether dst dir exists or not
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dstPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, %s is a file"
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|,
name|dstPath
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|srcStatus
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|dstStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|!
name|srcStatus
operator|.
name|isDirectory
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If dst is a directory
name|dstPath
operator|=
operator|new
name|Path
argument_list|(
name|dstPath
argument_list|,
name|srcPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
decl_stmt|;
try|try
block|{
name|statuses
operator|=
name|listStatus
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|statuses
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|statuses
operator|!=
literal|null
operator|&&
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// If dst exists and not a directory / not empty
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists or not empty!"
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// If dst is not a directory
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists!"
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|srcStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|copyDirectory
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFile
argument_list|(
name|srcPath
argument_list|,
name|srcStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
return|return
name|srcPath
operator|.
name|equals
argument_list|(
name|dstPath
argument_list|)
operator|||
name|delete
argument_list|(
name|srcPath
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Copy file from source path to destination path.    * (the caller should make sure srcPath is a file and dstPath is valid)    *    * @param srcPath source path.    * @param srcLen source path length if it is a file.    * @param dstPath destination path.    * @return true if file is successfully copied.    */
DECL|method|copyFile (Path srcPath, long srcLen, Path dstPath)
specifier|private
name|boolean
name|copyFile
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|long
name|srcLen
parameter_list|,
name|Path
name|dstPath
parameter_list|)
block|{
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
return|return
name|store
operator|.
name|copyFile
argument_list|(
name|srcKey
argument_list|,
name|srcLen
argument_list|,
name|dstKey
argument_list|)
return|;
block|}
comment|/**    * Copy a directory from source path to destination path.    * (the caller should make sure srcPath is a directory, and dstPath is valid)    *    * @param srcPath source path.    * @param dstPath destination path.    * @return true if directory is successfully copied.    */
DECL|method|copyDirectory (Path srcPath, Path dstPath)
specifier|private
name|boolean
name|copyDirectory
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|srcKey
init|=
name|AliyunOSSUtils
operator|.
name|maybeAddTrailingSlash
argument_list|(
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|AliyunOSSUtils
operator|.
name|maybeAddTrailingSlash
argument_list|(
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dstKey
operator|.
name|startsWith
argument_list|(
name|srcKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot rename a directory to a subdirectory of self"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|store
operator|.
name|storeEmptyFile
argument_list|(
name|dstKey
argument_list|)
expr_stmt|;
name|AliyunOSSCopyFileContext
name|copyFileContext
init|=
operator|new
name|AliyunOSSCopyFileContext
argument_list|()
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|MoreExecutors
operator|.
name|listeningDecorator
argument_list|(
operator|new
name|SemaphoredDelegatingExecutor
argument_list|(
name|boundedCopyThreadPool
argument_list|,
name|maxConcurrentCopyTasksPerDir
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectListing
name|objects
init|=
name|store
operator|.
name|listObjects
argument_list|(
name|srcKey
argument_list|,
name|maxKeys
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Copy files from src folder to dst
name|int
name|copiesToFinish
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|OSSObjectSummary
name|objectSummary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|String
name|newKey
init|=
name|dstKey
operator|.
name|concat
argument_list|(
name|objectSummary
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//copy operation just copies metadata, oss will support shallow copy
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|AliyunOSSCopyFileTask
argument_list|(
name|store
argument_list|,
name|objectSummary
operator|.
name|getKey
argument_list|()
argument_list|,
name|objectSummary
operator|.
name|getSize
argument_list|()
argument_list|,
name|newKey
argument_list|,
name|copyFileContext
argument_list|)
argument_list|)
expr_stmt|;
name|copiesToFinish
operator|++
expr_stmt|;
comment|// No need to call lock() here.
comment|// It's ok to copy one more file if the rename operation failed
comment|// Reduce the call of lock() can also improve our performance
if|if
condition|(
name|copyFileContext
operator|.
name|isCopyFailure
argument_list|()
condition|)
block|{
comment|//some error occurs, break
break|break;
block|}
block|}
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|String
name|nextMarker
init|=
name|objects
operator|.
name|getNextMarker
argument_list|()
decl_stmt|;
name|objects
operator|=
name|store
operator|.
name|listObjects
argument_list|(
name|srcKey
argument_list|,
name|maxKeys
argument_list|,
name|nextMarker
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
comment|//wait operations in progress to finish
name|copyFileContext
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|copyFileContext
operator|.
name|awaitAllFinish
argument_list|(
name|copiesToFinish
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"interrupted when wait copies to finish"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|copyFileContext
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
operator|!
name|copyFileContext
operator|.
name|isCopyFailure
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
name|this
operator|.
name|workingDir
operator|=
name|dir
expr_stmt|;
block|}
DECL|method|getStore ()
specifier|public
name|AliyunOSSFileSystemStore
name|getStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
block|}
end_class

end_unit

