begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|Constants
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|DefaultCredentialProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|auth
operator|.
name|DefaultCredentials
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|AliyunOSSUtils
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|ProviderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|ClientConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|OSSClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|OSSException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|common
operator|.
name|comm
operator|.
name|Protocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|AbortMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CannedAccessControlList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CompleteMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CompleteMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|CopyObjectResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|InitiateMultipartUploadRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|InitiateMultipartUploadResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ListObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|OSSObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|PartETag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|UploadPartCopyRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|aliyun
operator|.
name|oss
operator|.
name|model
operator|.
name|UploadPartCopyResult
import|;
end_import

begin_comment
comment|/**  * Implementation of {@link FileSystem} for<a href="https://oss.aliyun.com">  * Aliyun OSS</a>, used to access OSS blob system in a filesystem style.  */
end_comment

begin_class
DECL|class|AliyunOSSFileSystem
specifier|public
class|class
name|AliyunOSSFileSystem
extends|extends
name|FileSystem
block|{
DECL|field|uri
specifier|private
name|URI
name|uri
decl_stmt|;
DECL|field|workingDir
specifier|private
name|Path
name|workingDir
decl_stmt|;
DECL|field|ossClient
specifier|private
name|OSSClient
name|ossClient
decl_stmt|;
DECL|field|bucketName
specifier|private
name|String
name|bucketName
decl_stmt|;
DECL|field|uploadPartSize
specifier|private
name|long
name|uploadPartSize
decl_stmt|;
DECL|field|multipartThreshold
specifier|private
name|long
name|multipartThreshold
decl_stmt|;
DECL|field|maxKeys
specifier|private
name|int
name|maxKeys
decl_stmt|;
DECL|field|serverSideEncryptionAlgorithm
specifier|private
name|String
name|serverSideEncryptionAlgorithm
decl_stmt|;
annotation|@
name|Override
DECL|method|append (Path path, int bufferSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|append
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Append is not supported!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|ossClient
operator|!=
literal|null
condition|)
block|{
name|ossClient
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|create (Path path, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress)
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|overwrite
operator|&&
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|path
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataOutputStream
argument_list|(
operator|new
name|AliyunOSSOutputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ossClient
argument_list|,
name|bucketName
argument_list|,
name|key
argument_list|,
name|progress
argument_list|,
name|statistics
argument_list|,
name|serverSideEncryptionAlgorithm
argument_list|)
argument_list|,
call|(
name|Statistics
call|)
argument_list|(
literal|null
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|delete (Path path, boolean recursive)
specifier|public
name|boolean
name|delete
parameter_list|(
name|Path
name|path
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
name|status
decl_stmt|;
try|try
block|{
name|status
operator|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Couldn't delete "
operator|+
name|path
operator|+
literal|": Does not exist!"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|key
operator|+=
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|recursive
condition|)
block|{
name|FileStatus
index|[]
name|statuses
init|=
name|listStatus
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check whether it is an empty directory or not
if|if
condition|(
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot remove directory"
operator|+
name|path
operator|+
literal|": It is not empty!"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// Delete empty directory without '-r'
name|ossClient
operator|.
name|deleteObject
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ListObjectsRequest
name|listRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|listRequest
operator|.
name|setPrefix
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ObjectListing
name|objects
init|=
name|ossClient
operator|.
name|listObjects
argument_list|(
name|listRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|keysToDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|OSSObjectSummary
name|objectSummary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|keysToDelete
operator|.
name|add
argument_list|(
name|objectSummary
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DeleteObjectsRequest
name|deleteRequest
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|deleteRequest
operator|.
name|setKeys
argument_list|(
name|keysToDelete
argument_list|)
expr_stmt|;
name|ossClient
operator|.
name|deleteObjects
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|listRequest
operator|.
name|setMarker
argument_list|(
name|objects
operator|.
name|getNextMarker
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|ossClient
operator|.
name|deleteObject
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//TODO: optimize logic here
try|try
block|{
name|Path
name|pPath
init|=
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|FileStatus
name|pStatus
init|=
name|getFileStatus
argument_list|(
name|pPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Path "
operator|+
name|pPath
operator|+
literal|" is assumed to be a directory!"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// Make sure the parent directory exists
return|return
name|mkdir
argument_list|(
name|bucketName
argument_list|,
name|pathToKey
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getFileStatus (Path path)
specifier|public
name|FileStatus
name|getFileStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|qualifiedPath
init|=
name|path
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|qualifiedPath
argument_list|)
decl_stmt|;
comment|// Root always exists
if|if
condition|(
name|key
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qualifiedPath
argument_list|)
return|;
block|}
name|ObjectMetadata
name|meta
init|=
name|getObjectMetadata
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// If key not found and key does not end with "/"
if|if
condition|(
name|meta
operator|==
literal|null
operator|&&
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// Case: dir + "/"
name|key
operator|+=
literal|"/"
expr_stmt|;
name|meta
operator|=
name|getObjectMetadata
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meta
operator|==
literal|null
condition|)
block|{
comment|// Case: dir + "/" + file
name|ListObjectsRequest
name|listRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|listRequest
operator|.
name|setPrefix
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setDelimiter
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|listRequest
operator|.
name|setMaxKeys
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ObjectListing
name|listing
init|=
name|ossClient
operator|.
name|listObjects
argument_list|(
name|listRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|listing
operator|.
name|getObjectSummaries
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|listing
operator|.
name|getCommonPrefixes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qualifiedPath
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|path
operator|+
literal|": No such file or directory!"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|objectRepresentsDirectory
argument_list|(
name|key
argument_list|,
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qualifiedPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|FileStatus
argument_list|(
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|path
argument_list|)
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|qualifiedPath
argument_list|)
return|;
block|}
block|}
comment|/**    * Return object metadata given object key.    *    * @param key object key    * @return return null if key does not exist    */
DECL|method|getObjectMetadata (String key)
specifier|private
name|ObjectMetadata
name|getObjectMetadata
parameter_list|(
name|String
name|key
parameter_list|)
block|{
try|try
block|{
return|return
name|ossClient
operator|.
name|getObjectMetadata
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OSSException
name|osse
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getScheme ()
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
literal|"oss"
return|;
block|}
annotation|@
name|Override
DECL|method|getUri ()
specifier|public
name|URI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
annotation|@
name|Override
DECL|method|getWorkingDirectory ()
specifier|public
name|Path
name|getWorkingDirectory
parameter_list|()
block|{
return|return
name|workingDir
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getDefaultBlockSize ()
specifier|public
name|long
name|getDefaultBlockSize
parameter_list|()
block|{
return|return
name|getConf
argument_list|()
operator|.
name|getLong
argument_list|(
name|FS_OSS_BLOCK_SIZE_KEY
argument_list|,
name|FS_OSS_BLOCK_SIZE_DEFAULT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getCanonicalServiceName ()
specifier|public
name|String
name|getCanonicalServiceName
parameter_list|()
block|{
comment|// Does not support Token
return|return
literal|null
return|;
block|}
comment|/**    * Initialize new FileSystem.    *    * @param name the uri of the file system, including host, port, etc.    *    * @param conf configuration of the file system    * @throws IOException IO problems    */
DECL|method|initialize (URI name, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|uri
operator|=
name|java
operator|.
name|net
operator|.
name|URI
operator|.
name|create
argument_list|(
name|name
operator|.
name|getScheme
argument_list|()
operator|+
literal|"://"
operator|+
name|name
operator|.
name|getAuthority
argument_list|()
argument_list|)
expr_stmt|;
name|workingDir
operator|=
operator|new
name|Path
argument_list|(
literal|"/user"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|bucketName
operator|=
name|name
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|ClientConfiguration
name|clientConf
init|=
operator|new
name|ClientConfiguration
argument_list|()
decl_stmt|;
name|clientConf
operator|.
name|setMaxConnections
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MAXIMUM_CONNECTIONS_KEY
argument_list|,
name|MAXIMUM_CONNECTIONS_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|secureConnections
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|SECURE_CONNECTIONS_KEY
argument_list|,
name|SECURE_CONNECTIONS_DEFAULT
argument_list|)
decl_stmt|;
name|clientConf
operator|.
name|setProtocol
argument_list|(
name|secureConnections
condition|?
name|Protocol
operator|.
name|HTTPS
else|:
name|Protocol
operator|.
name|HTTP
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setMaxErrorRetry
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_ERROR_RETRIES_KEY
argument_list|,
name|MAX_ERROR_RETRIES_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setConnectionTimeout
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|ESTABLISH_TIMEOUT_KEY
argument_list|,
name|ESTABLISH_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setSocketTimeout
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|SOCKET_TIMEOUT_KEY
argument_list|,
name|SOCKET_TIMEOUT_DEFAULT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|proxyHost
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_HOST_KEY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|int
name|proxyPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|PROXY_PORT_KEY
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proxyHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clientConf
operator|.
name|setProxyHost
argument_list|(
name|proxyHost
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyPort
operator|>=
literal|0
condition|)
block|{
name|clientConf
operator|.
name|setProxyPort
argument_list|(
name|proxyPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|secureConnections
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Proxy host set without port. Using HTTPS default 443"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyPort
argument_list|(
literal|443
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Proxy host set without port. Using HTTP default 80"
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyPort
argument_list|(
literal|80
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|proxyUsername
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_USERNAME_KEY
argument_list|)
decl_stmt|;
name|String
name|proxyPassword
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_PASSWORD_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|proxyUsername
operator|==
literal|null
operator|)
operator|!=
operator|(
name|proxyPassword
operator|==
literal|null
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Proxy error: "
operator|+
name|PROXY_USERNAME_KEY
operator|+
literal|" or "
operator|+
name|PROXY_PASSWORD_KEY
operator|+
literal|" set without the other."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|clientConf
operator|.
name|setProxyUsername
argument_list|(
name|proxyUsername
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyPassword
argument_list|(
name|proxyPassword
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyDomain
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_DOMAIN_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|clientConf
operator|.
name|setProxyWorkstation
argument_list|(
name|conf
operator|.
name|getTrimmed
argument_list|(
name|PROXY_WORKSTATION_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proxyPort
operator|>=
literal|0
condition|)
block|{
name|String
name|msg
init|=
literal|"Proxy error: "
operator|+
name|PROXY_PORT_KEY
operator|+
literal|" set without "
operator|+
name|PROXY_HOST_KEY
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|String
name|endPoint
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ENDPOINT_KEY
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|ossClient
operator|=
operator|new
name|OSSClient
argument_list|(
name|endPoint
argument_list|,
name|getCredentialsProvider
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
argument_list|,
name|clientConf
argument_list|)
expr_stmt|;
name|maxKeys
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|MAX_PAGING_KEYS_KEY
argument_list|,
name|MAX_PAGING_KEYS_DEFAULT
argument_list|)
expr_stmt|;
name|uploadPartSize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MULTIPART_UPLOAD_SIZE_KEY
argument_list|,
name|MULTIPART_UPLOAD_SIZE_DEFAULT
argument_list|)
expr_stmt|;
name|multipartThreshold
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|MIN_MULTIPART_UPLOAD_THRESHOLD_KEY
argument_list|,
name|MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|uploadPartSize
operator|<
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MULTIPART_UPLOAD_SIZE_KEY
operator|+
literal|" must be at least 5 MB"
argument_list|)
expr_stmt|;
name|uploadPartSize
operator|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
if|if
condition|(
name|multipartThreshold
operator|<
literal|5
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MIN_MULTIPART_UPLOAD_THRESHOLD_KEY
operator|+
literal|" must be at least 5 MB"
argument_list|)
expr_stmt|;
name|multipartThreshold
operator|=
literal|5
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
if|if
condition|(
name|multipartThreshold
operator|>
literal|1024
operator|*
literal|1024
operator|*
literal|1024
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|MIN_MULTIPART_UPLOAD_THRESHOLD_KEY
operator|+
literal|" must be less than 1 GB"
argument_list|)
expr_stmt|;
name|multipartThreshold
operator|=
literal|1024
operator|*
literal|1024
operator|*
literal|1024
expr_stmt|;
block|}
name|String
name|cannedACLName
init|=
name|conf
operator|.
name|get
argument_list|(
name|CANNED_ACL_KEY
argument_list|,
name|CANNED_ACL_DEFAULT
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cannedACLName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CannedAccessControlList
name|cannedACL
init|=
name|CannedAccessControlList
operator|.
name|valueOf
argument_list|(
name|cannedACLName
argument_list|)
decl_stmt|;
name|ossClient
operator|.
name|setBucketAcl
argument_list|(
name|bucketName
argument_list|,
name|cannedACL
argument_list|)
expr_stmt|;
block|}
name|serverSideEncryptionAlgorithm
operator|=
name|conf
operator|.
name|get
argument_list|(
name|SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create the default credential provider, or load in one explicitly    * identified in the configuration.    * @param name the uri of the file system    * @param conf configuration    * @return a credential provider    * @throws IOException on any problem. Class construction issues may be    * nested inside the IOE.    */
DECL|method|getCredentialsProvider (URI name, Configuration conf)
specifier|private
name|CredentialsProvider
name|getCredentialsProvider
parameter_list|(
name|URI
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|CredentialsProvider
name|credentials
decl_stmt|;
name|String
name|className
init|=
name|conf
operator|.
name|getTrimmed
argument_list|(
name|ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|Configuration
name|newConf
init|=
name|ProviderUtils
operator|.
name|excludeIncompatibleCredentialProviders
argument_list|(
name|conf
argument_list|,
name|AliyunOSSFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|accessKey
init|=
name|AliyunOSSUtils
operator|.
name|getPassword
argument_list|(
name|newConf
argument_list|,
name|ACCESS_KEY
argument_list|,
name|UserInfo
operator|.
name|EMPTY
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|secretKey
init|=
name|AliyunOSSUtils
operator|.
name|getPassword
argument_list|(
name|newConf
argument_list|,
name|SECRET_KEY
argument_list|,
name|UserInfo
operator|.
name|EMPTY
operator|.
name|getPassword
argument_list|()
argument_list|)
decl_stmt|;
name|credentials
operator|=
operator|new
name|DefaultCredentialProvider
argument_list|(
operator|new
name|DefaultCredentials
argument_list|(
name|accessKey
argument_list|,
name|secretKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Credential provider class is:"
operator|+
name|className
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|credClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
try|try
block|{
name|credentials
operator|=
operator|(
name|CredentialsProvider
operator|)
name|credClass
operator|.
name|getDeclaredConstructor
argument_list|(
name|URI
operator|.
name|class
argument_list|,
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|this
operator|.
name|uri
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
name|credentials
operator|=
operator|(
name|CredentialsProvider
operator|)
name|credClass
operator|.
name|getDeclaredConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|className
operator|+
literal|" not found."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s constructor exception.  A "
operator|+
literal|"class specified in %s must provide an accessible constructor "
operator|+
literal|"accepting URI and Configuration, or an accessible default "
operator|+
literal|"constructor."
argument_list|,
name|className
argument_list|,
name|ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ReflectiveOperationException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|className
operator|+
literal|" instantiation exception."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|credentials
return|;
block|}
comment|/**    * Check if OSS object represents a directory.    *    * @param name object key    * @param size object content length    * @return true if object represents a directory    */
DECL|method|objectRepresentsDirectory (final String name, final long size)
specifier|private
name|boolean
name|objectRepresentsDirectory
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|long
name|size
parameter_list|)
block|{
return|return
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|&&
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|&&
name|size
operator|==
literal|0L
return|;
block|}
comment|/**    * Turns a path (relative or otherwise) into an OSS key.    *    * @param path the path of the file    * @return the key of the object that represent the file    */
DECL|method|pathToKey (Path path)
specifier|private
name|String
name|pathToKey
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
operator|new
name|Path
argument_list|(
name|workingDir
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
operator|&&
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
DECL|method|keyToPath (String key)
specifier|private
name|Path
name|keyToPath
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|new
name|Path
argument_list|(
literal|"/"
operator|+
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|listStatus (Path path)
specifier|public
name|FileStatus
index|[]
name|listStatus
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"List status for path: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|key
operator|=
name|key
operator|+
literal|"/"
expr_stmt|;
block|}
name|ListObjectsRequest
name|listObjectsRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|listObjectsRequest
operator|.
name|setPrefix
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|listObjectsRequest
operator|.
name|setDelimiter
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|listObjectsRequest
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"listStatus: doing listObjects for directory "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|ObjectListing
name|objects
init|=
name|ossClient
operator|.
name|listObjects
argument_list|(
name|listObjectsRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|OSSObjectSummary
name|objectSummary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|Path
name|keyPath
init|=
name|keyToPath
argument_list|(
name|objectSummary
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPath
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: fi: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|FileStatus
argument_list|(
name|objectSummary
operator|.
name|getSize
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|getDefaultBlockSize
argument_list|(
name|keyPath
argument_list|)
argument_list|,
name|objectSummary
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|prefix
range|:
name|objects
operator|.
name|getCommonPrefixes
argument_list|()
control|)
block|{
name|Path
name|keyPath
init|=
name|keyToPath
argument_list|(
name|prefix
argument_list|)
operator|.
name|makeQualified
argument_list|(
name|uri
argument_list|,
name|workingDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyPath
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: rd: "
operator|+
name|keyPath
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|keyPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"listStatus: list truncated - getting next batch"
argument_list|)
expr_stmt|;
block|}
name|listObjectsRequest
operator|.
name|setMarker
argument_list|(
name|objects
operator|.
name|getNextMarker
argument_list|()
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding: rd (not a dir): "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|fileStatus
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Used to create an empty file that represents an empty directory.    *    * @param bucketName the bucket this directory belongs to    * @param objectName directory path    * @return true if directory successfully created    * @throws IOException    */
DECL|method|mkdir (final String bucket, final String objectName)
specifier|private
name|boolean
name|mkdir
parameter_list|(
specifier|final
name|String
name|bucket
parameter_list|,
specifier|final
name|String
name|objectName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|objectName
decl_stmt|;
name|ObjectMetadata
name|dirMeta
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|ByteArrayInputStream
name|in
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|dirMeta
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|objectName
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dirName
operator|+=
literal|"/"
expr_stmt|;
block|}
try|try
block|{
name|ossClient
operator|.
name|putObject
argument_list|(
name|bucket
argument_list|,
name|dirName
argument_list|,
name|in
argument_list|,
name|dirMeta
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|mkdirs (Path path, FsPermission permission)
specifier|public
name|boolean
name|mkdirs
parameter_list|(
name|Path
name|path
parameter_list|,
name|FsPermission
name|permission
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
literal|"Path is a file: "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|validatePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|pathToKey
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|mkdir
argument_list|(
name|bucketName
argument_list|,
name|key
argument_list|)
return|;
block|}
block|}
comment|/**    * Check whether the path is a valid path.    *    * @param path the path to be checked    * @throws IOException    */
DECL|method|validatePath (Path path)
specifier|private
name|void
name|validatePath
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|fPart
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
do|do
block|{
try|try
block|{
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|fPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If path exists and a directory, exit
break|break;
block|}
else|else
block|{
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Can't make directory for path '%s', it is a file."
argument_list|,
name|fPart
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{       }
name|fPart
operator|=
name|fPart
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|fPart
operator|!=
literal|null
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|open (Path path, int bufferSize)
specifier|public
name|FSDataInputStream
name|open
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FileStatus
name|fileStatus
init|=
name|getFileStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"Can't open "
operator|+
name|path
operator|+
literal|" because it is a directory"
argument_list|)
throw|;
block|}
return|return
operator|new
name|FSDataInputStream
argument_list|(
operator|new
name|AliyunOSSInputStream
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|ossClient
argument_list|,
name|bucketName
argument_list|,
name|pathToKey
argument_list|(
name|path
argument_list|)
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
argument_list|,
name|statistics
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rename (Path srcPath, Path dstPath)
specifier|public
name|boolean
name|rename
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|srcPath
operator|.
name|isRoot
argument_list|()
condition|)
block|{
comment|// Cannot rename root of file system
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot rename the root of a filesystem"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|Path
name|parent
init|=
name|dstPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|srcPath
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|FileStatus
name|srcStatus
init|=
name|getFileStatus
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|FileStatus
name|dstStatus
decl_stmt|;
try|try
block|{
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|dstStatus
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|dstStatus
operator|==
literal|null
condition|)
block|{
comment|// If dst doesn't exist, check whether dst dir exists or not
name|dstStatus
operator|=
name|getFileStatus
argument_list|(
name|dstPath
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, %s is a file"
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|,
name|dstPath
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|srcStatus
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
name|dstStatus
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|!
name|srcStatus
operator|.
name|isDirectory
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|dstStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// If dst is a directory
name|dstPath
operator|=
operator|new
name|Path
argument_list|(
name|dstPath
argument_list|,
name|srcPath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
decl_stmt|;
try|try
block|{
name|statuses
operator|=
name|listStatus
argument_list|(
name|dstPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnde
parameter_list|)
block|{
name|statuses
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|statuses
operator|!=
literal|null
operator|&&
name|statuses
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// If dst exists and not a directory / not empty
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists or not empty!"
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// If dst is not a directory
throw|throw
operator|new
name|FileAlreadyExistsException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to rename %s to %s, file already exists!"
argument_list|,
name|srcPath
argument_list|,
name|dstPath
argument_list|)
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|srcStatus
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|copyDirectory
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copyFile
argument_list|(
name|srcPath
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcPath
operator|.
name|equals
argument_list|(
name|dstPath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|delete
argument_list|(
name|srcPath
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
comment|/**    * Copy file from source path to destination path.    * (the caller should make sure srcPath is a file and dstPath is valid.)    *    * @param srcPath source path    * @param dstPath destination path    * @return true if successfully copied    */
DECL|method|copyFile (Path srcPath, Path dstPath)
specifier|private
name|boolean
name|copyFile
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
block|{
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
return|return
name|copyFile
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
return|;
block|}
comment|/**    * Copy an object from source key to destination key.    *    * @param srcKey source key    * @param dstKey destination key    * @return true if successfully copied    */
DECL|method|copyFile (String srcKey, String dstKey)
specifier|private
name|boolean
name|copyFile
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
block|{
name|ObjectMetadata
name|objectMeta
init|=
name|ossClient
operator|.
name|getObjectMetadata
argument_list|(
name|bucketName
argument_list|,
name|srcKey
argument_list|)
decl_stmt|;
name|long
name|dataLen
init|=
name|objectMeta
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataLen
operator|<=
name|multipartThreshold
condition|)
block|{
return|return
name|singleCopy
argument_list|(
name|srcKey
argument_list|,
name|dstKey
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|multipartCopy
argument_list|(
name|srcKey
argument_list|,
name|dataLen
argument_list|,
name|dstKey
argument_list|)
return|;
block|}
block|}
comment|/**    * Use single copy to copy an oss object.    *    * @param srcKey source key    * @param dstKey destination key    * @return true if successfully copied    * (the caller should make sure srcPath is a file and dstPath is valid)    */
DECL|method|singleCopy (String srcKey, String dstKey)
specifier|private
name|boolean
name|singleCopy
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|String
name|dstKey
parameter_list|)
block|{
name|CopyObjectResult
name|copyResult
init|=
name|ossClient
operator|.
name|copyObject
argument_list|(
name|bucketName
argument_list|,
name|srcKey
argument_list|,
name|bucketName
argument_list|,
name|dstKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|copyResult
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Use multipart copy to copy an oss object.    * (the caller should make sure srcPath is a file and dstPath is valid)    *    * @param srcKey source key    * @param dataLen data size of the object to copy    * @param dstKey destination key    * @return true if successfully copied, or false if upload is aborted    */
DECL|method|multipartCopy (String srcKey, long dataLen, String dstKey)
specifier|private
name|boolean
name|multipartCopy
parameter_list|(
name|String
name|srcKey
parameter_list|,
name|long
name|dataLen
parameter_list|,
name|String
name|dstKey
parameter_list|)
block|{
name|int
name|partNum
init|=
call|(
name|int
call|)
argument_list|(
name|dataLen
operator|/
name|uploadPartSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataLen
operator|%
name|uploadPartSize
operator|!=
literal|0
condition|)
block|{
name|partNum
operator|++
expr_stmt|;
block|}
name|InitiateMultipartUploadRequest
name|initiateMultipartUploadRequest
init|=
operator|new
name|InitiateMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|dstKey
argument_list|)
decl_stmt|;
name|ObjectMetadata
name|meta
init|=
operator|new
name|ObjectMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|serverSideEncryptionAlgorithm
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|meta
operator|.
name|setServerSideEncryption
argument_list|(
name|serverSideEncryptionAlgorithm
argument_list|)
expr_stmt|;
block|}
name|initiateMultipartUploadRequest
operator|.
name|setObjectMetadata
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|InitiateMultipartUploadResult
name|initiateMultipartUploadResult
init|=
name|ossClient
operator|.
name|initiateMultipartUpload
argument_list|(
name|initiateMultipartUploadRequest
argument_list|)
decl_stmt|;
name|String
name|uploadId
init|=
name|initiateMultipartUploadResult
operator|.
name|getUploadId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PartETag
argument_list|>
name|partETags
init|=
operator|new
name|ArrayList
argument_list|<
name|PartETag
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partNum
condition|;
name|i
operator|++
control|)
block|{
name|long
name|skipBytes
init|=
name|uploadPartSize
operator|*
name|i
decl_stmt|;
name|long
name|size
init|=
operator|(
name|uploadPartSize
operator|<
name|dataLen
operator|-
name|skipBytes
operator|)
condition|?
name|uploadPartSize
else|:
name|dataLen
operator|-
name|skipBytes
decl_stmt|;
name|UploadPartCopyRequest
name|partCopyRequest
init|=
operator|new
name|UploadPartCopyRequest
argument_list|()
decl_stmt|;
name|partCopyRequest
operator|.
name|setSourceBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setSourceKey
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setBucketName
argument_list|(
name|bucketName
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setKey
argument_list|(
name|dstKey
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setUploadId
argument_list|(
name|uploadId
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setPartSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setBeginIndex
argument_list|(
name|skipBytes
argument_list|)
expr_stmt|;
name|partCopyRequest
operator|.
name|setPartNumber
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|UploadPartCopyResult
name|partCopyResult
init|=
name|ossClient
operator|.
name|uploadPartCopy
argument_list|(
name|partCopyRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementWriteOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|partETags
operator|.
name|add
argument_list|(
name|partCopyResult
operator|.
name|getPartETag
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompleteMultipartUploadRequest
name|completeMultipartUploadRequest
init|=
operator|new
name|CompleteMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|dstKey
argument_list|,
name|uploadId
argument_list|,
name|partETags
argument_list|)
decl_stmt|;
name|CompleteMultipartUploadResult
name|completeMultipartUploadResult
init|=
name|ossClient
operator|.
name|completeMultipartUpload
argument_list|(
name|completeMultipartUploadRequest
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|completeMultipartUploadResult
operator|.
name|getETag
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|AbortMultipartUploadRequest
name|abortMultipartUploadRequest
init|=
operator|new
name|AbortMultipartUploadRequest
argument_list|(
name|bucketName
argument_list|,
name|dstKey
argument_list|,
name|uploadId
argument_list|)
decl_stmt|;
name|ossClient
operator|.
name|abortMultipartUpload
argument_list|(
name|abortMultipartUploadRequest
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Copy a directory from source path to destination path.    * (the caller should make sure srcPath is a directory, and dstPath is valid)    *    * @param srcPath source path    * @param dstPath destination path    * @return true if successfully copied    */
DECL|method|copyDirectory (Path srcPath, Path dstPath)
specifier|private
name|boolean
name|copyDirectory
parameter_list|(
name|Path
name|srcPath
parameter_list|,
name|Path
name|dstPath
parameter_list|)
block|{
name|String
name|srcKey
init|=
name|pathToKey
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|String
name|dstKey
init|=
name|pathToKey
argument_list|(
name|dstPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|srcKey
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|srcKey
operator|=
name|srcKey
operator|+
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dstKey
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|dstKey
operator|=
name|dstKey
operator|+
literal|"/"
expr_stmt|;
block|}
if|if
condition|(
name|dstKey
operator|.
name|startsWith
argument_list|(
name|srcKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot rename a directory to a subdirectory of self"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
name|ListObjectsRequest
name|listObjectsRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|(
name|bucketName
argument_list|)
decl_stmt|;
name|listObjectsRequest
operator|.
name|setPrefix
argument_list|(
name|srcKey
argument_list|)
expr_stmt|;
name|listObjectsRequest
operator|.
name|setMaxKeys
argument_list|(
name|maxKeys
argument_list|)
expr_stmt|;
name|ObjectListing
name|objects
init|=
name|ossClient
operator|.
name|listObjects
argument_list|(
name|listObjectsRequest
argument_list|)
decl_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Copy files from src folder to dst
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|OSSObjectSummary
name|objectSummary
range|:
name|objects
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|String
name|newKey
init|=
name|dstKey
operator|.
name|concat
argument_list|(
name|objectSummary
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
name|srcKey
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|copyFile
argument_list|(
name|objectSummary
operator|.
name|getKey
argument_list|()
argument_list|,
name|newKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|objects
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
name|listObjectsRequest
operator|.
name|setMarker
argument_list|(
name|objects
operator|.
name|getNextMarker
argument_list|()
argument_list|)
expr_stmt|;
name|statistics
operator|.
name|incrementReadOps
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|setWorkingDirectory (Path dir)
specifier|public
name|void
name|setWorkingDirectory
parameter_list|(
name|Path
name|dir
parameter_list|)
block|{
name|this
operator|.
name|workingDir
operator|=
name|dir
expr_stmt|;
block|}
block|}
end_class

end_unit

