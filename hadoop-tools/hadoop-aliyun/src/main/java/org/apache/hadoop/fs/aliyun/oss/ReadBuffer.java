begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.fs.aliyun.oss
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|aliyun
operator|.
name|oss
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * This class is used by {@link AliyunOSSInputStream}  * and {@link AliyunOSSFileReaderTask} to buffer data that read from oss.  */
end_comment

begin_class
DECL|class|ReadBuffer
specifier|public
class|class
name|ReadBuffer
block|{
DECL|enum|STATUS
enum|enum
name|STATUS
block|{
DECL|enumConstant|INIT
DECL|enumConstant|SUCCESS
DECL|enumConstant|ERROR
name|INIT
block|,
name|SUCCESS
block|,
name|ERROR
block|}
DECL|field|lock
specifier|private
specifier|final
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|field|readyCondition
specifier|private
name|Condition
name|readyCondition
init|=
name|lock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
DECL|field|buffer
specifier|private
name|byte
index|[]
name|buffer
decl_stmt|;
DECL|field|status
specifier|private
name|STATUS
name|status
decl_stmt|;
DECL|field|byteStart
specifier|private
name|long
name|byteStart
decl_stmt|;
DECL|field|byteEnd
specifier|private
name|long
name|byteEnd
decl_stmt|;
DECL|method|ReadBuffer (long byteStart, long byteEnd)
specifier|public
name|ReadBuffer
parameter_list|(
name|long
name|byteStart
parameter_list|,
name|long
name|byteEnd
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
operator|new
name|byte
index|[
call|(
name|int
call|)
argument_list|(
name|byteEnd
operator|-
name|byteStart
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|STATUS
operator|.
name|INIT
expr_stmt|;
name|this
operator|.
name|byteStart
operator|=
name|byteStart
expr_stmt|;
name|this
operator|.
name|byteEnd
operator|=
name|byteEnd
expr_stmt|;
block|}
DECL|method|lock ()
specifier|public
name|void
name|lock
parameter_list|()
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
DECL|method|unlock ()
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
DECL|method|await (STATUS waitStatus)
specifier|public
name|void
name|await
parameter_list|(
name|STATUS
name|waitStatus
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|this
operator|.
name|status
operator|==
name|waitStatus
condition|)
block|{
name|readyCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|signalAll ()
specifier|public
name|void
name|signalAll
parameter_list|()
block|{
name|readyCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
DECL|method|getBuffer ()
specifier|public
name|byte
index|[]
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
DECL|method|getStatus ()
specifier|public
name|STATUS
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
DECL|method|setStatus (STATUS status)
specifier|public
name|void
name|setStatus
parameter_list|(
name|STATUS
name|status
parameter_list|)
block|{
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
block|}
DECL|method|getByteStart ()
specifier|public
name|long
name|getByteStart
parameter_list|()
block|{
return|return
name|byteStart
return|;
block|}
DECL|method|getByteEnd ()
specifier|public
name|long
name|getByteEnd
parameter_list|()
block|{
return|return
name|byteEnd
return|;
block|}
block|}
end_class

end_unit

