begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_comment
comment|/**  * Maps a relative pathname to an absolute pathname using the PATH environment.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|PathFinder
specifier|public
class|class
name|PathFinder
block|{
DECL|field|pathenv
name|String
name|pathenv
decl_stmt|;
comment|// a string of pathnames
DECL|field|pathSep
name|String
name|pathSep
decl_stmt|;
comment|// the path separator
DECL|field|fileSep
name|String
name|fileSep
decl_stmt|;
comment|// the file separator in a directory
comment|/**    * Construct a PathFinder object using the path from java.class.path    */
DECL|method|PathFinder ()
specifier|public
name|PathFinder
parameter_list|()
block|{
name|pathenv
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
expr_stmt|;
name|pathSep
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
expr_stmt|;
name|fileSep
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Construct a PathFinder object using the path from the specified system    * environment variable.    */
DECL|method|PathFinder (String envpath)
specifier|public
name|PathFinder
parameter_list|(
name|String
name|envpath
parameter_list|)
block|{
name|pathenv
operator|=
name|System
operator|.
name|getenv
argument_list|(
name|envpath
argument_list|)
expr_stmt|;
name|pathSep
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"path.separator"
argument_list|)
expr_stmt|;
name|fileSep
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Appends the specified component to the path list    */
DECL|method|prependPathComponent (String str)
specifier|public
name|void
name|prependPathComponent
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|pathenv
operator|=
name|str
operator|+
name|pathSep
operator|+
name|pathenv
expr_stmt|;
block|}
comment|/**    * Returns the full path name of this file if it is listed in the path    */
DECL|method|getAbsolutePath (String filename)
specifier|public
name|File
name|getAbsolutePath
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
if|if
condition|(
name|pathenv
operator|==
literal|null
operator|||
name|pathSep
operator|==
literal|null
operator|||
name|fileSep
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|val
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|classvalue
init|=
name|pathenv
operator|+
name|pathSep
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|val
operator|=
name|classvalue
operator|.
name|indexOf
argument_list|(
name|pathSep
argument_list|)
operator|)
operator|>=
literal|0
operator|)
operator|&&
name|classvalue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Extract each entry from the pathenv
name|String
name|entry
init|=
name|classvalue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
comment|// this entry in the pathenv is a directory.
comment|// see if the required file is in this directory
name|f
operator|=
operator|new
name|File
argument_list|(
name|entry
operator|+
name|fileSep
operator|+
name|filename
argument_list|)
expr_stmt|;
block|}
comment|// see if the filename matches and we can read it
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
operator|&&
name|FileUtil
operator|.
name|canRead
argument_list|(
name|f
argument_list|)
condition|)
block|{
return|return
name|f
return|;
block|}
name|classvalue
operator|=
name|classvalue
operator|.
name|substring
argument_list|(
name|val
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|main (String args[])
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: java PathFinder<filename>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|PathFinder
name|finder
init|=
operator|new
name|PathFinder
argument_list|(
literal|"PATH"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
name|finder
operator|.
name|getAbsolutePath
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Full path name = "
operator|+
name|file
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

