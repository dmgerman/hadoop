begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_comment
comment|/**   * Utilities used in streaming  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
DECL|class|StreamUtil
specifier|public
class|class
name|StreamUtil
block|{
comment|/** It may seem strange to silently switch behaviour when a String    * is not a classname; the reason is simplified Usage:<pre>    * -mapper [classname | program ]    * instead of the explicit Usage:    * [-mapper program | -javamapper classname], -mapper and -javamapper are mutually exclusive.    * (repeat for -reducer, -combiner)</pre>    */
DECL|method|goodClassOrNull (Configuration conf, String className, String defaultPackage)
specifier|public
specifier|static
name|Class
name|goodClassOrNull
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|defaultPackage
parameter_list|)
block|{
name|Class
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnf
parameter_list|)
block|{     }
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|className
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|defaultPackage
operator|!=
literal|null
condition|)
block|{
name|className
operator|=
name|defaultPackage
operator|+
literal|"."
operator|+
name|className
expr_stmt|;
try|try
block|{
name|clazz
operator|=
name|conf
operator|.
name|getClassByName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnf
parameter_list|)
block|{         }
block|}
block|}
return|return
name|clazz
return|;
block|}
DECL|method|findInClasspath (String className)
specifier|public
specifier|static
name|String
name|findInClasspath
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
name|findInClasspath
argument_list|(
name|className
argument_list|,
name|StreamUtil
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
return|;
block|}
comment|/** @return a jar file path or a base directory or null if not found.    */
DECL|method|findInClasspath (String className, ClassLoader loader)
specifier|public
specifier|static
name|String
name|findInClasspath
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|loader
parameter_list|)
block|{
name|String
name|relPath
init|=
name|className
decl_stmt|;
name|relPath
operator|=
name|relPath
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|relPath
operator|+=
literal|".class"
expr_stmt|;
name|java
operator|.
name|net
operator|.
name|URL
name|classUrl
init|=
name|loader
operator|.
name|getResource
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
name|String
name|codePath
decl_stmt|;
if|if
condition|(
name|classUrl
operator|!=
literal|null
condition|)
block|{
name|boolean
name|inJar
init|=
name|classUrl
operator|.
name|getProtocol
argument_list|()
operator|.
name|equals
argument_list|(
literal|"jar"
argument_list|)
decl_stmt|;
name|codePath
operator|=
name|classUrl
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|codePath
operator|.
name|startsWith
argument_list|(
literal|"jar:"
argument_list|)
condition|)
block|{
name|codePath
operator|=
name|codePath
operator|.
name|substring
argument_list|(
literal|"jar:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|codePath
operator|.
name|startsWith
argument_list|(
literal|"file:"
argument_list|)
condition|)
block|{
comment|// can have both
name|codePath
operator|=
name|codePath
operator|.
name|substring
argument_list|(
literal|"file:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inJar
condition|)
block|{
comment|// A jar spec: remove class suffix in /path/my.jar!/package/Class
name|int
name|bang
init|=
name|codePath
operator|.
name|lastIndexOf
argument_list|(
literal|'!'
argument_list|)
decl_stmt|;
name|codePath
operator|=
name|codePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|bang
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// A class spec: remove the /my/package/Class.class portion
name|int
name|pos
init|=
name|codePath
operator|.
name|lastIndexOf
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid codePath: className="
operator|+
name|className
operator|+
literal|" codePath="
operator|+
name|codePath
argument_list|)
throw|;
block|}
name|codePath
operator|=
name|codePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|codePath
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|codePath
return|;
block|}
DECL|method|qualifyHost (String url)
specifier|static
name|String
name|qualifyHost
parameter_list|(
name|String
name|url
parameter_list|)
block|{
try|try
block|{
return|return
name|qualifyHost
argument_list|(
operator|new
name|URL
argument_list|(
name|url
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
return|return
name|url
return|;
block|}
block|}
DECL|method|qualifyHost (URL url)
specifier|static
name|URL
name|qualifyHost
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
try|try
block|{
name|InetAddress
name|a
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|qualHost
init|=
name|a
operator|.
name|getCanonicalHostName
argument_list|()
decl_stmt|;
name|URL
name|q
init|=
operator|new
name|URL
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|,
name|qualHost
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|,
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|q
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
return|return
name|url
return|;
block|}
block|}
DECL|field|regexpSpecials
specifier|static
specifier|final
name|String
name|regexpSpecials
init|=
literal|"[]()?*+|.!^-\\~@"
decl_stmt|;
DECL|method|regexpEscape (String plain)
specifier|public
specifier|static
name|String
name|regexpEscape
parameter_list|(
name|String
name|plain
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
index|[]
name|ch
init|=
name|plain
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|csup
init|=
name|ch
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|csup
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|regexpSpecials
operator|.
name|indexOf
argument_list|(
name|ch
index|[
name|c
index|]
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|ch
index|[
name|c
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|slurp (File f)
specifier|static
name|String
name|slurp
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|f
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|contents
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|contents
return|;
block|}
DECL|method|slurpHadoop (Path p, FileSystem fs)
specifier|static
name|String
name|slurpHadoop
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
name|in
operator|.
name|getPos
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|contents
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|contents
return|;
block|}
DECL|field|env
specifier|static
specifier|private
name|Environment
name|env
decl_stmt|;
DECL|field|host
specifier|private
specifier|static
name|String
name|host
decl_stmt|;
DECL|method|getHost ()
specifier|public
specifier|static
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
static|static
block|{
try|try
block|{
name|env
operator|=
operator|new
name|Environment
argument_list|()
expr_stmt|;
name|host
operator|=
name|env
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|io
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|env ()
specifier|static
name|Environment
name|env
parameter_list|()
block|{
if|if
condition|(
name|env
operator|!=
literal|null
condition|)
block|{
return|return
name|env
return|;
block|}
try|try
block|{
name|env
operator|=
operator|new
name|Environment
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|io
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|env
return|;
block|}
DECL|method|isLocalJobTracker (JobConf job)
specifier|public
specifier|static
name|boolean
name|isLocalJobTracker
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|String
name|framework
init|=
name|job
operator|.
name|get
argument_list|(
name|MRConfig
operator|.
name|FRAMEWORK_NAME
argument_list|,
name|MRConfig
operator|.
name|LOCAL_FRAMEWORK_NAME
argument_list|)
decl_stmt|;
return|return
name|framework
operator|.
name|equals
argument_list|(
name|MRConfig
operator|.
name|LOCAL_FRAMEWORK_NAME
argument_list|)
return|;
block|}
block|}
end_class

end_unit

