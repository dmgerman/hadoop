begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/** The main entry point. Usually invoked with the script   *  bin/hadoop jar hadoop-streaming.jar args.  */
end_comment

begin_class
DECL|class|HadoopStreaming
specifier|public
class|class
name|HadoopStreaming
block|{
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No Arguments Given!"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|returnStatus
init|=
literal|0
decl_stmt|;
name|String
name|cmd
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
index|[]
name|remainingArgs
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|args
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"dumptb"
argument_list|)
condition|)
block|{
name|DumpTypedBytes
name|dumptb
init|=
operator|new
name|DumpTypedBytes
argument_list|()
decl_stmt|;
name|returnStatus
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dumptb
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"loadtb"
argument_list|)
condition|)
block|{
name|LoadTypedBytes
name|loadtb
init|=
operator|new
name|LoadTypedBytes
argument_list|()
decl_stmt|;
name|returnStatus
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|loadtb
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"streamjob"
argument_list|)
condition|)
block|{
name|StreamJob
name|job
init|=
operator|new
name|StreamJob
argument_list|()
decl_stmt|;
name|returnStatus
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|job
argument_list|,
name|remainingArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// for backward compatibility
name|StreamJob
name|job
init|=
operator|new
name|StreamJob
argument_list|()
decl_stmt|;
name|returnStatus
operator|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|job
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|returnStatus
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Streaming Command Failed!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|returnStatus
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|printUsage ()
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: $HADOOP_HOME/bin/hadoop jar hadoop-streaming.jar"
operator|+
literal|" [options]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  dumptb<glob-pattern> Dumps all files that match the"
operator|+
literal|" given pattern to "
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                        standard output as typed "
operator|+
literal|"bytes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  loadtb<path> Reads typed bytes from standard input"
operator|+
literal|" and stores them in"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                a sequence file in the specified path"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  [streamjob]<args> Runs streaming job with given"
operator|+
literal|" arguments"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

