begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|BasicParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|filecache
operator|.
name|DistributedCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|InvalidJobConfException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|KeyValueTextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RunningJob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileAsTextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|LazyOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorCombiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|aggregate
operator|.
name|ValueAggregatorReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|IdentifierResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|InputWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|OutputReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|GenericOptionsParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|RunJar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|RunJar
operator|.
name|MATCH_ANY
import|;
end_import

begin_comment
comment|/** All the client-side work happens here.  * (Jar packaging, MapRed job submission and monitoring)  */
end_comment

begin_class
DECL|class|StreamJob
specifier|public
class|class
name|StreamJob
implements|implements
name|Tool
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StreamJob
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|REDUCE_NONE
specifier|final
specifier|static
name|String
name|REDUCE_NONE
init|=
literal|"NONE"
decl_stmt|;
comment|/** -----------Streaming CLI Implementation  **/
DECL|field|parser
specifier|private
name|CommandLineParser
name|parser
init|=
operator|new
name|BasicParser
argument_list|()
decl_stmt|;
DECL|field|allOptions
specifier|private
name|Options
name|allOptions
decl_stmt|;
comment|/**@deprecated use StreamJob() with ToolRunner or set the    * Configuration using {@link #setConf(Configuration)} and    * run with {@link #run(String[])}.    */
annotation|@
name|Deprecated
DECL|method|StreamJob (String[] argv, boolean mayExit)
specifier|public
name|StreamJob
parameter_list|(
name|String
index|[]
name|argv
parameter_list|,
name|boolean
name|mayExit
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|argv_
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|argv
argument_list|,
name|argv
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|config_
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
DECL|method|StreamJob ()
specifier|public
name|StreamJob
parameter_list|()
block|{
name|setupOptions
argument_list|()
expr_stmt|;
name|this
operator|.
name|config_
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|config_
return|;
block|}
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|config_
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|this
operator|.
name|argv_
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|args
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|preProcessArgs
argument_list|()
expr_stmt|;
name|parseArgv
argument_list|()
expr_stmt|;
if|if
condition|(
name|printUsage
condition|)
block|{
name|printUsage
argument_list|(
name|detailedUsage_
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|postProcessArgs
argument_list|()
expr_stmt|;
name|setJobConf
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
comment|//ignore, since log will already be printed
comment|// print the log in debug mode.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error in streaming job"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
name|submitAndMonitorJob
argument_list|()
return|;
block|}
comment|/**    * This method creates a streaming job from the given argument list.    * The created object can be used and/or submitted to a jobtracker for    * execution by a job agent such as JobControl    * @param argv the list args for creating a streaming job    * @return the created JobConf object    * @throws IOException    */
DECL|method|createJob (String[] argv)
specifier|static
specifier|public
name|JobConf
name|createJob
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamJob
name|job
init|=
operator|new
name|StreamJob
argument_list|()
decl_stmt|;
name|job
operator|.
name|argv_
operator|=
name|argv
expr_stmt|;
name|job
operator|.
name|init
argument_list|()
expr_stmt|;
name|job
operator|.
name|preProcessArgs
argument_list|()
expr_stmt|;
name|job
operator|.
name|parseArgv
argument_list|()
expr_stmt|;
name|job
operator|.
name|postProcessArgs
argument_list|()
expr_stmt|;
name|job
operator|.
name|setJobConf
argument_list|()
expr_stmt|;
return|return
name|job
operator|.
name|jobConf_
return|;
block|}
comment|/**    * This is the method that actually    * initializes the job conf and submits the job    * to the jobtracker    * @throws IOException    * @deprecated use {@link #run(String[])} instead.    */
annotation|@
name|Deprecated
DECL|method|go ()
specifier|public
name|int
name|go
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|run
argument_list|(
name|argv_
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|init ()
specifier|protected
name|void
name|init
parameter_list|()
block|{
try|try
block|{
name|env_
operator|=
operator|new
name|Environment
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|io
argument_list|)
throw|;
block|}
block|}
DECL|method|preProcessArgs ()
name|void
name|preProcessArgs
parameter_list|()
block|{
name|verbose_
operator|=
literal|false
expr_stmt|;
comment|// Unset HADOOP_ROOT_LOGGER in case streaming job
comment|// invokes additional hadoop commands.
name|addTaskEnvironment_
operator|=
literal|"HADOOP_ROOT_LOGGER="
expr_stmt|;
block|}
DECL|method|postProcessArgs ()
name|void
name|postProcessArgs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|inputSpecs_
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Required argument: -input<name>"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|output_
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Required argument: -output "
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
literal|"addTaskEnvironment="
operator|+
name|addTaskEnvironment_
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|packageFile
range|:
name|packageFiles_
control|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|packageFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|shippedCanonFiles_
operator|.
name|add
argument_list|(
name|f
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
argument_list|(
literal|"shippedCanonFiles_="
operator|+
name|shippedCanonFiles_
argument_list|)
expr_stmt|;
comment|// careful with class names..
name|mapCmd_
operator|=
name|unqualifyIfLocalPath
argument_list|(
name|mapCmd_
argument_list|)
expr_stmt|;
name|comCmd_
operator|=
name|unqualifyIfLocalPath
argument_list|(
name|comCmd_
argument_list|)
expr_stmt|;
name|redCmd_
operator|=
name|unqualifyIfLocalPath
argument_list|(
name|redCmd_
argument_list|)
expr_stmt|;
block|}
DECL|method|unqualifyIfLocalPath (String cmd)
name|String
name|unqualifyIfLocalPath
parameter_list|(
name|String
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
comment|//
block|}
else|else
block|{
name|String
name|prog
init|=
name|cmd
decl_stmt|;
name|String
name|args
init|=
literal|""
decl_stmt|;
name|int
name|s
init|=
name|cmd
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
operator|-
literal|1
condition|)
block|{
name|prog
operator|=
name|cmd
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|args
operator|=
name|cmd
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|progCanon
decl_stmt|;
try|try
block|{
name|progCanon
operator|=
operator|new
name|File
argument_list|(
name|prog
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|progCanon
operator|=
name|prog
expr_stmt|;
block|}
name|boolean
name|shipped
init|=
name|shippedCanonFiles_
operator|.
name|contains
argument_list|(
name|progCanon
argument_list|)
decl_stmt|;
name|msg
argument_list|(
literal|"shipped: "
operator|+
name|shipped
operator|+
literal|" "
operator|+
name|progCanon
argument_list|)
expr_stmt|;
if|if
condition|(
name|shipped
condition|)
block|{
comment|// Change path to simple filename.
comment|// That way when PipeMapRed calls Runtime.exec(),
comment|// it will look for the excutable in Task's working dir.
comment|// And this is where TaskRunner unjars our job jar.
name|prog
operator|=
operator|new
name|File
argument_list|(
name|prog
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|cmd
operator|=
name|prog
operator|+
literal|" "
operator|+
name|args
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
name|prog
expr_stmt|;
block|}
block|}
block|}
name|msg
argument_list|(
literal|"cmd="
operator|+
name|cmd
argument_list|)
expr_stmt|;
return|return
name|cmd
return|;
block|}
DECL|method|parseArgv ()
name|void
name|parseArgv
parameter_list|()
block|{
name|CommandLine
name|cmdLine
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmdLine
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|allOptions
argument_list|,
name|argv_
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|oe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|oe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|exitUsage
argument_list|(
name|argv_
operator|.
name|length
operator|>
literal|0
operator|&&
literal|"-info"
operator|.
name|equals
argument_list|(
name|argv_
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmdLine
operator|!=
literal|null
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|cmdLine
operator|.
name|getArgList
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Found "
operator|+
name|args
operator|.
name|size
argument_list|()
operator|+
literal|" unexpected arguments on the "
operator|+
literal|"command line "
operator|+
name|args
argument_list|)
expr_stmt|;
block|}
name|detailedUsage_
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|"info"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
operator|||
name|detailedUsage_
condition|)
block|{
name|printUsage
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|verbose_
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|"verbose"
argument_list|)
expr_stmt|;
name|background_
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|"background"
argument_list|)
expr_stmt|;
name|debug_
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|"debug"
argument_list|)
condition|?
name|debug_
operator|+
literal|1
else|:
name|debug_
expr_stmt|;
name|String
index|[]
name|values
init|=
name|cmdLine
operator|.
name|getOptionValues
argument_list|(
literal|"input"
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|input
range|:
name|values
control|)
block|{
name|inputSpecs_
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
block|}
name|output_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"output"
argument_list|)
expr_stmt|;
name|mapCmd_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"mapper"
argument_list|)
expr_stmt|;
name|comCmd_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"combiner"
argument_list|)
expr_stmt|;
name|redCmd_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"reducer"
argument_list|)
expr_stmt|;
name|lazyOutput_
operator|=
name|cmdLine
operator|.
name|hasOption
argument_list|(
literal|"lazyOutput"
argument_list|)
expr_stmt|;
name|values
operator|=
name|cmdLine
operator|.
name|getOptionValues
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"-file option is deprecated, please use generic option"
operator|+
literal|" -files instead."
argument_list|)
expr_stmt|;
name|StringBuffer
name|fileList
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|values
control|)
block|{
name|packageFiles_
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|FileSystem
name|localFs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|config_
argument_list|)
decl_stmt|;
name|Path
name|qualifiedPath
init|=
name|path
operator|.
name|makeQualified
argument_list|(
name|localFs
operator|.
name|getUri
argument_list|()
argument_list|,
name|localFs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|validate
argument_list|(
name|qualifiedPath
argument_list|)
expr_stmt|;
name|String
name|finalPath
init|=
name|qualifiedPath
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileList
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|fileList
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|fileList
operator|.
name|append
argument_list|(
name|finalPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|String
name|tmpFiles
init|=
name|config_
operator|.
name|get
argument_list|(
literal|"tmpfiles"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tmpFiles
operator|=
name|fileList
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tmpFiles
operator|=
name|tmpFiles
operator|+
literal|","
operator|+
name|fileList
expr_stmt|;
block|}
name|config_
operator|.
name|set
argument_list|(
literal|"tmpfiles"
argument_list|,
name|tmpFiles
argument_list|)
expr_stmt|;
block|}
name|String
name|fsName
init|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"dfs"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|fsName
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"-dfs option is deprecated, please use -fs instead."
argument_list|)
expr_stmt|;
name|config_
operator|.
name|set
argument_list|(
literal|"fs.default.name"
argument_list|,
name|fsName
argument_list|)
expr_stmt|;
block|}
name|additionalConfSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"additionalconfspec"
argument_list|)
expr_stmt|;
name|inputFormatSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"inputformat"
argument_list|)
expr_stmt|;
name|outputFormatSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"outputformat"
argument_list|)
expr_stmt|;
name|numReduceTasksSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"numReduceTasks"
argument_list|)
expr_stmt|;
name|partitionerSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"partitioner"
argument_list|)
expr_stmt|;
name|inReaderSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"inputreader"
argument_list|)
expr_stmt|;
name|mapDebugSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"mapdebug"
argument_list|)
expr_stmt|;
name|reduceDebugSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"reducedebug"
argument_list|)
expr_stmt|;
name|ioSpec_
operator|=
name|cmdLine
operator|.
name|getOptionValue
argument_list|(
literal|"io"
argument_list|)
expr_stmt|;
name|String
index|[]
name|car
init|=
name|cmdLine
operator|.
name|getOptionValues
argument_list|(
literal|"cacheArchive"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|car
operator|&&
name|car
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"-cacheArchive option is deprecated, please use -archives instead."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|car
control|)
block|{
name|cacheArchives
operator|=
operator|(
name|cacheArchives
operator|==
literal|null
operator|)
condition|?
name|s
else|:
name|cacheArchives
operator|+
literal|","
operator|+
name|s
expr_stmt|;
block|}
block|}
name|String
index|[]
name|caf
init|=
name|cmdLine
operator|.
name|getOptionValues
argument_list|(
literal|"cacheFile"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|caf
operator|&&
name|caf
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"-cacheFile option is deprecated, please use -files instead."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|caf
control|)
block|{
name|cacheFiles
operator|=
operator|(
name|cacheFiles
operator|==
literal|null
operator|)
condition|?
name|s
else|:
name|cacheFiles
operator|+
literal|","
operator|+
name|s
expr_stmt|;
block|}
block|}
name|String
index|[]
name|jobconf
init|=
name|cmdLine
operator|.
name|getOptionValues
argument_list|(
literal|"jobconf"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|jobconf
operator|&&
name|jobconf
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"-jobconf option is deprecated, please use -D instead."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|jobconf
control|)
block|{
name|String
index|[]
name|parts
init|=
name|s
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|config_
operator|.
name|set
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|cmd
init|=
name|cmdLine
operator|.
name|getOptionValues
argument_list|(
literal|"cmdenv"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|cmd
operator|&&
name|cmd
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|cmd
control|)
block|{
if|if
condition|(
name|addTaskEnvironment_
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addTaskEnvironment_
operator|+=
literal|" "
expr_stmt|;
block|}
name|addTaskEnvironment_
operator|+=
name|s
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|exitUsage
argument_list|(
name|argv_
operator|.
name|length
operator|>
literal|0
operator|&&
literal|"-info"
operator|.
name|equals
argument_list|(
name|argv_
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|msg (String msg)
specifier|protected
name|void
name|msg
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|verbose_
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"STREAM: "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createOption (String name, String desc, String argName, int max, boolean required)
specifier|private
name|Option
name|createOption
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|argName
parameter_list|,
name|int
name|max
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
return|return
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
name|argName
argument_list|)
operator|.
name|hasArgs
argument_list|(
name|max
argument_list|)
operator|.
name|withDescription
argument_list|(
name|desc
argument_list|)
operator|.
name|isRequired
argument_list|(
name|required
argument_list|)
operator|.
name|create
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|createBoolOption (String name, String desc)
specifier|private
name|Option
name|createBoolOption
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|desc
parameter_list|)
block|{
return|return
name|OptionBuilder
operator|.
name|withDescription
argument_list|(
name|desc
argument_list|)
operator|.
name|create
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|validate (final Path path)
specifier|private
name|void
name|validate
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|path
operator|.
name|getFileSystem
argument_list|(
name|config_
argument_list|)
operator|.
name|access
argument_list|(
name|path
argument_list|,
name|FsAction
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"File: "
operator|+
name|path
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"File: "
operator|+
name|path
operator|+
literal|" is not readable."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupOptions ()
specifier|private
name|void
name|setupOptions
parameter_list|()
block|{
comment|// input and output are not required for -info and -help options,
comment|// though they are required for streaming job to be run.
name|Option
name|input
init|=
name|createOption
argument_list|(
literal|"input"
argument_list|,
literal|"DFS input file(s) for the Map step"
argument_list|,
literal|"path"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|output
init|=
name|createOption
argument_list|(
literal|"output"
argument_list|,
literal|"DFS output directory for the Reduce step"
argument_list|,
literal|"path"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|mapper
init|=
name|createOption
argument_list|(
literal|"mapper"
argument_list|,
literal|"The streaming command to run"
argument_list|,
literal|"cmd"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|combiner
init|=
name|createOption
argument_list|(
literal|"combiner"
argument_list|,
literal|"The streaming command to run"
argument_list|,
literal|"cmd"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// reducer could be NONE
name|Option
name|reducer
init|=
name|createOption
argument_list|(
literal|"reducer"
argument_list|,
literal|"The streaming command to run"
argument_list|,
literal|"cmd"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|file
init|=
name|createOption
argument_list|(
literal|"file"
argument_list|,
literal|"File to be shipped in the Job jar file"
argument_list|,
literal|"file"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|dfs
init|=
name|createOption
argument_list|(
literal|"dfs"
argument_list|,
literal|"Optional. Override DFS configuration"
argument_list|,
literal|"<h:p>|local"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|additionalconfspec
init|=
name|createOption
argument_list|(
literal|"additionalconfspec"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|inputformat
init|=
name|createOption
argument_list|(
literal|"inputformat"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|outputformat
init|=
name|createOption
argument_list|(
literal|"outputformat"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|partitioner
init|=
name|createOption
argument_list|(
literal|"partitioner"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|numReduceTasks
init|=
name|createOption
argument_list|(
literal|"numReduceTasks"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|inputreader
init|=
name|createOption
argument_list|(
literal|"inputreader"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|mapDebug
init|=
name|createOption
argument_list|(
literal|"mapdebug"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|reduceDebug
init|=
name|createOption
argument_list|(
literal|"reducedebug"
argument_list|,
literal|"Optional"
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|jobconf
init|=
name|createOption
argument_list|(
literal|"jobconf"
argument_list|,
literal|"(n=v) Optional. Add or override a JobConf property."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|cmdenv
init|=
name|createOption
argument_list|(
literal|"cmdenv"
argument_list|,
literal|"(n=v) Pass env.var to streaming commands."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|cacheFile
init|=
name|createOption
argument_list|(
literal|"cacheFile"
argument_list|,
literal|"File name URI"
argument_list|,
literal|"fileNameURI"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|cacheArchive
init|=
name|createOption
argument_list|(
literal|"cacheArchive"
argument_list|,
literal|"File name URI"
argument_list|,
literal|"fileNameURI"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Option
name|io
init|=
name|createOption
argument_list|(
literal|"io"
argument_list|,
literal|"Optional."
argument_list|,
literal|"spec"
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// boolean properties
name|Option
name|background
init|=
name|createBoolOption
argument_list|(
literal|"background"
argument_list|,
literal|"Submit the job and don't wait till it completes."
argument_list|)
decl_stmt|;
name|Option
name|verbose
init|=
name|createBoolOption
argument_list|(
literal|"verbose"
argument_list|,
literal|"print verbose output"
argument_list|)
decl_stmt|;
name|Option
name|info
init|=
name|createBoolOption
argument_list|(
literal|"info"
argument_list|,
literal|"print verbose output"
argument_list|)
decl_stmt|;
name|Option
name|help
init|=
name|createBoolOption
argument_list|(
literal|"help"
argument_list|,
literal|"print this help message"
argument_list|)
decl_stmt|;
name|Option
name|debug
init|=
name|createBoolOption
argument_list|(
literal|"debug"
argument_list|,
literal|"print debug output"
argument_list|)
decl_stmt|;
name|Option
name|lazyOutput
init|=
name|createBoolOption
argument_list|(
literal|"lazyOutput"
argument_list|,
literal|"create outputs lazily"
argument_list|)
decl_stmt|;
name|allOptions
operator|=
operator|new
name|Options
argument_list|()
operator|.
name|addOption
argument_list|(
name|input
argument_list|)
operator|.
name|addOption
argument_list|(
name|output
argument_list|)
operator|.
name|addOption
argument_list|(
name|mapper
argument_list|)
operator|.
name|addOption
argument_list|(
name|combiner
argument_list|)
operator|.
name|addOption
argument_list|(
name|reducer
argument_list|)
operator|.
name|addOption
argument_list|(
name|file
argument_list|)
operator|.
name|addOption
argument_list|(
name|dfs
argument_list|)
operator|.
name|addOption
argument_list|(
name|additionalconfspec
argument_list|)
operator|.
name|addOption
argument_list|(
name|inputformat
argument_list|)
operator|.
name|addOption
argument_list|(
name|outputformat
argument_list|)
operator|.
name|addOption
argument_list|(
name|partitioner
argument_list|)
operator|.
name|addOption
argument_list|(
name|numReduceTasks
argument_list|)
operator|.
name|addOption
argument_list|(
name|inputreader
argument_list|)
operator|.
name|addOption
argument_list|(
name|mapDebug
argument_list|)
operator|.
name|addOption
argument_list|(
name|reduceDebug
argument_list|)
operator|.
name|addOption
argument_list|(
name|jobconf
argument_list|)
operator|.
name|addOption
argument_list|(
name|cmdenv
argument_list|)
operator|.
name|addOption
argument_list|(
name|cacheFile
argument_list|)
operator|.
name|addOption
argument_list|(
name|cacheArchive
argument_list|)
operator|.
name|addOption
argument_list|(
name|io
argument_list|)
operator|.
name|addOption
argument_list|(
name|background
argument_list|)
operator|.
name|addOption
argument_list|(
name|verbose
argument_list|)
operator|.
name|addOption
argument_list|(
name|info
argument_list|)
operator|.
name|addOption
argument_list|(
name|debug
argument_list|)
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
operator|.
name|addOption
argument_list|(
name|lazyOutput
argument_list|)
expr_stmt|;
block|}
DECL|method|exitUsage (boolean detailed)
specifier|public
name|void
name|exitUsage
parameter_list|(
name|boolean
name|detailed
parameter_list|)
block|{
name|printUsage
argument_list|(
name|detailed
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|printUsage (boolean detailed)
specifier|private
name|void
name|printUsage
parameter_list|(
name|boolean
name|detailed
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: $HADOOP_HOME/bin/hadoop jar hadoop-streaming.jar"
operator|+
literal|" [options]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -input<path> DFS input file(s) for the Map"
operator|+
literal|" step."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -output<path> DFS output directory for the"
operator|+
literal|" Reduce step."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -mapper<cmd|JavaClassName> Optional. Command"
operator|+
literal|" to be run as mapper."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -combiner<cmd|JavaClassName> Optional. Command"
operator|+
literal|" to be run as combiner."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -reducer<cmd|JavaClassName> Optional. Command"
operator|+
literal|" to be run as reducer."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -file<file> Optional. File/dir to be "
operator|+
literal|"shipped in the Job jar file.\n"
operator|+
literal|"                  Deprecated. Use generic option \"-files\" instead."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -inputformat<TextInputFormat(default)"
operator|+
literal|"|SequenceFileAsTextInputFormat|JavaClassName>\n"
operator|+
literal|"                  Optional. The input format class."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -outputformat<TextOutputFormat(default)"
operator|+
literal|"|JavaClassName>\n"
operator|+
literal|"                  Optional. The output format class."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -partitioner<JavaClassName>  Optional. The"
operator|+
literal|" partitioner class."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -numReduceTasks<num> Optional. Number of reduce "
operator|+
literal|"tasks."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -inputreader<spec> Optional. Input recordreader"
operator|+
literal|" spec."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -cmdenv<n>=<v> Optional. Pass env.var to"
operator|+
literal|" streaming commands."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -mapdebug<cmd> Optional. "
operator|+
literal|"To run this script when a map task fails."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -reducedebug<cmd> Optional."
operator|+
literal|" To run this script when a reduce task fails."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -io<identifier> Optional. Format to use"
operator|+
literal|" for input to and output"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"                  from mapper/reducer commands"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -lazyOutput     Optional. Lazily create Output."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -background     Optional. Submit the job and don't wait till it completes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -verbose        Optional. Print verbose output."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -info           Optional. Print detailed usage."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -help           Optional. Print help message."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|GenericOptionsParser
operator|.
name|printGenericCommandUsage
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|detailed
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"For more details about these options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Use "
operator|+
literal|"$HADOOP_HOME/bin/hadoop jar hadoop-streaming.jar -info"
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage tips:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"In -input: globbing on<path> is supported and can "
operator|+
literal|"have multiple -input"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Default Map input format: a line is a record in UTF-8 "
operator|+
literal|"the key part ends at first"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  TAB, the rest of the line is the value"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To pass a Custom input format:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -inputformat package.MyInputFormat"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Similarly, to pass a custom output format:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -outputformat package.MyOutputFormat"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The files with extensions .class and .jar/.zip,"
operator|+
literal|" specified for the -file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  argument[s], end up in \"classes\" and \"lib\" "
operator|+
literal|"directories respectively inside"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  the working directory when the mapper and reducer are"
operator|+
literal|" run. All other files"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  specified for the -file argument[s]"
operator|+
literal|" end up in the working directory when the"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  mapper and reducer are run. The location of this "
operator|+
literal|"working directory is"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  unspecified."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To set the number of reduce tasks (num. of output "
operator|+
literal|"files) as, say 10:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Use -numReduceTasks 10"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To skip the sort/combine/shuffle/sort/reduce step:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Use -numReduceTasks 0"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Map output then becomes a 'side-effect "
operator|+
literal|"output' rather than a reduce input."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  This speeds up processing. This also feels "
operator|+
literal|"more like \"in-place\" processing"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  because the input filename and the map "
operator|+
literal|"input order are preserved."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  This is equivalent to -reducer NONE"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To speed up the last maps:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D "
operator|+
name|MRJobConfig
operator|.
name|MAP_SPECULATIVE
operator|+
literal|"=true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To speed up the last reduces:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D "
operator|+
name|MRJobConfig
operator|.
name|REDUCE_SPECULATIVE
operator|+
literal|"=true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To name the job (appears in the JobTracker Web UI):"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D "
operator|+
name|MRJobConfig
operator|.
name|JOB_NAME
operator|+
literal|"='My Job'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To change the local temp directory:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D dfs.data.dir=/tmp/dfs"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D stream.tmpdir=/tmp/streaming"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Additional local temp directories with -jt local:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D "
operator|+
name|MRConfig
operator|.
name|LOCAL_DIR
operator|+
literal|"=/tmp/local"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D "
operator|+
name|JTConfig
operator|.
name|JT_SYSTEM_DIR
operator|+
literal|"=/tmp/system"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D "
operator|+
name|MRConfig
operator|.
name|TEMP_DIR
operator|+
literal|"=/tmp/temp"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To treat tasks with non-zero exit status as SUCCEDED:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  -D stream.non.zero.exit.is.failure=false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Use a custom hadoop streaming build along with standard"
operator|+
literal|" hadoop install:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  $HADOOP_HOME/bin/hadoop jar "
operator|+
literal|"/path/my-hadoop-streaming.jar [...]\\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    [...] -D stream.shipped.hadoopstreaming="
operator|+
literal|"/path/my-hadoop-streaming.jar"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"For more details about jobconf parameters see:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  http://wiki.apache.org/hadoop/JobConfFile"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Truncate the values of the job configuration copied"
operator|+
literal|"to the environment at the given length:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   -D stream.jobconf.truncate.limit=-1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"To set an environment variable in a streaming "
operator|+
literal|"command:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   -cmdenv EXAMPLE_DIR=/home/example/dictionaries/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Shortcut:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"   setenv HSTREAMING \"$HADOOP_HOME/bin/hadoop jar "
operator|+
literal|"hadoop-streaming.jar\""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Example: $HSTREAMING -mapper "
operator|+
literal|"\"/usr/local/bin/perl5 filter.pl\""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"           -file /local/filter.pl -input "
operator|+
literal|"\"/logs/0604*/*\" [...]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Ships a script, invokes the non-shipped perl "
operator|+
literal|"interpreter. Shipped files go to"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  the working directory so filter.pl is found by perl. "
operator|+
literal|"Input files are all the"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  daily logs for days in month 2006-04"
argument_list|)
expr_stmt|;
block|}
DECL|method|fail (String message)
specifier|public
name|void
name|fail
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Try -help for more information"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|message
argument_list|)
throw|;
block|}
comment|// --------------------------------------------
DECL|method|getHadoopClientHome ()
specifier|protected
name|String
name|getHadoopClientHome
parameter_list|()
block|{
name|String
name|h
init|=
name|env_
operator|.
name|getProperty
argument_list|(
literal|"HADOOP_HOME"
argument_list|)
decl_stmt|;
comment|// standard Hadoop
if|if
condition|(
name|h
operator|==
literal|null
condition|)
block|{
comment|//fail("Missing required environment variable: HADOOP_HOME");
name|h
operator|=
literal|"UNDEF"
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
DECL|method|isLocalHadoop ()
specifier|protected
name|boolean
name|isLocalHadoop
parameter_list|()
block|{
return|return
name|StreamUtil
operator|.
name|isLocalJobTracker
argument_list|(
name|jobConf_
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
DECL|method|getClusterNick ()
specifier|protected
name|String
name|getClusterNick
parameter_list|()
block|{
return|return
literal|"default"
return|;
block|}
comment|/** @return path to the created Jar file or null if no files are necessary.    */
DECL|method|packageJobJar ()
specifier|protected
name|String
name|packageJobJar
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|unjarFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Runtime code: ship same version of code as self (job submitter code)
comment|// usually found in: build/contrib or build/hadoop-<version>-dev-streaming.jar
comment|// First try an explicit spec: it's too hard to find our own location in this case:
comment|// $HADOOP_HOME/bin/hadoop jar /not/first/on/classpath/custom-hadoop-streaming.jar
comment|// where findInClasspath() would find the version of hadoop-streaming.jar in $HADOOP_HOME
name|String
name|runtimeClasses
init|=
name|config_
operator|.
name|get
argument_list|(
literal|"stream.shipped.hadoopstreaming"
argument_list|)
decl_stmt|;
comment|// jar or class dir
if|if
condition|(
name|runtimeClasses
operator|==
literal|null
condition|)
block|{
name|runtimeClasses
operator|=
name|StreamUtil
operator|.
name|findInClasspath
argument_list|(
name|StreamJob
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|runtimeClasses
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"runtime classes not found: "
operator|+
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|msg
argument_list|(
literal|"Found runtime classes in: "
operator|+
name|runtimeClasses
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLocalHadoop
argument_list|()
condition|)
block|{
comment|// don't package class files (they might get unpackaged in "." and then
comment|//  hide the intended CLASSPATH entry)
comment|// we still package everything else (so that scripts and executable are found in
comment|//  Task workdir like distributed Hadoop)
block|}
else|else
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|runtimeClasses
argument_list|)
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|packageFiles_
operator|.
name|add
argument_list|(
name|runtimeClasses
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unjarFiles
operator|.
name|add
argument_list|(
name|runtimeClasses
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|packageFiles_
operator|.
name|size
argument_list|()
operator|+
name|unjarFiles
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|tmp
init|=
name|jobConf_
operator|.
name|get
argument_list|(
literal|"stream.tmpdir"
argument_list|)
decl_stmt|;
comment|//, "/tmp/${mapreduce.job.user.name}/"
name|File
name|tmpDir
init|=
operator|(
name|tmp
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
operator|new
name|File
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
comment|// tmpDir=null means OS default tmp dir
name|File
name|jobJar
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"streamjob"
argument_list|,
literal|".jar"
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"packageJobJar: "
operator|+
name|packageFiles_
operator|+
literal|" "
operator|+
name|unjarFiles
operator|+
literal|" "
operator|+
name|jobJar
operator|+
literal|" tmpDir="
operator|+
name|tmpDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug_
operator|==
literal|0
condition|)
block|{
name|jobJar
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
name|JarBuilder
name|builder
init|=
operator|new
name|JarBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|verbose_
condition|)
block|{
name|builder
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|jobJarName
init|=
name|jobJar
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|builder
operator|.
name|merge
argument_list|(
name|packageFiles_
argument_list|,
name|unjarFiles
argument_list|,
name|jobJarName
argument_list|)
expr_stmt|;
return|return
name|jobJarName
return|;
block|}
comment|/**    * get the uris of all the files/caches    */
DECL|method|getURIs (String lcacheArchives, String lcacheFiles)
specifier|protected
name|void
name|getURIs
parameter_list|(
name|String
name|lcacheArchives
parameter_list|,
name|String
name|lcacheFiles
parameter_list|)
block|{
name|String
name|archives
index|[]
init|=
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|lcacheArchives
argument_list|)
decl_stmt|;
name|String
name|files
index|[]
init|=
name|StringUtils
operator|.
name|getStrings
argument_list|(
name|lcacheFiles
argument_list|)
decl_stmt|;
name|fileURIs
operator|=
name|StringUtils
operator|.
name|stringToURI
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|archiveURIs
operator|=
name|StringUtils
operator|.
name|stringToURI
argument_list|(
name|archives
argument_list|)
expr_stmt|;
block|}
DECL|method|setJobConf ()
specifier|protected
name|void
name|setJobConf
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|additionalConfSpec_
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"-additionalconfspec option is deprecated, please use -conf instead."
argument_list|)
expr_stmt|;
name|config_
operator|.
name|addResource
argument_list|(
operator|new
name|Path
argument_list|(
name|additionalConfSpec_
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// general MapRed job properties
name|jobConf_
operator|=
operator|new
name|JobConf
argument_list|(
name|config_
argument_list|,
name|StreamJob
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// All streaming jobs get the task timeout value
comment|// from the configuration settings.
comment|// The correct FS must be set before this is called!
comment|// (to resolve local vs. dfs drive letter differences)
comment|// (mapreduce.job.working.dir will be lazily initialized ONCE and depends on FS)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputSpecs_
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileInputFormat
operator|.
name|addInputPaths
argument_list|(
name|jobConf_
argument_list|,
operator|(
name|String
operator|)
name|inputSpecs_
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|defaultPackage
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Class
name|c
decl_stmt|;
name|Class
name|fmt
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inReaderSpec_
operator|==
literal|null
operator|&&
name|inputFormatSpec_
operator|==
literal|null
condition|)
block|{
name|fmt
operator|=
name|TextInputFormat
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputFormatSpec_
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|fmt
operator|=
name|TextInputFormat
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|KeyValueTextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|KeyValueTextInputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|KeyValueTextInputFormat
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|inReaderSpec_
operator|==
literal|null
condition|)
block|{
name|fmt
operator|=
name|KeyValueTextInputFormat
operator|.
name|class
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SequenceFileInputFormat
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|inReaderSpec_
operator|==
literal|null
condition|)
block|{
name|fmt
operator|=
name|SequenceFileInputFormat
operator|.
name|class
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|SequenceFileAsTextInputFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|SequenceFileAsTextInputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|||
name|inputFormatSpec_
operator|.
name|equals
argument_list|(
name|SequenceFileAsTextInputFormat
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
condition|)
block|{
name|fmt
operator|=
name|SequenceFileAsTextInputFormat
operator|.
name|class
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|jobConf_
argument_list|,
name|inputFormatSpec_
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|fmt
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"-inputformat : class not found : "
operator|+
name|inputFormatSpec_
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|fmt
operator|==
literal|null
condition|)
block|{
name|fmt
operator|=
name|StreamInputFormat
operator|.
name|class
expr_stmt|;
block|}
name|jobConf_
operator|.
name|setInputFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioSpec_
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.map.input"
argument_list|,
name|ioSpec_
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.map.output"
argument_list|,
name|ioSpec_
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.reduce.input"
argument_list|,
name|ioSpec_
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.reduce.output"
argument_list|,
name|ioSpec_
argument_list|)
expr_stmt|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|IdentifierResolver
argument_list|>
name|idResolverClass
init|=
name|jobConf_
operator|.
name|getClass
argument_list|(
literal|"stream.io.identifier.resolver.class"
argument_list|,
name|IdentifierResolver
operator|.
name|class
argument_list|,
name|IdentifierResolver
operator|.
name|class
argument_list|)
decl_stmt|;
name|IdentifierResolver
name|idResolver
init|=
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|idResolverClass
argument_list|,
name|jobConf_
argument_list|)
decl_stmt|;
name|idResolver
operator|.
name|resolve
argument_list|(
name|jobConf_
operator|.
name|get
argument_list|(
literal|"stream.map.input"
argument_list|,
name|IdentifierResolver
operator|.
name|TEXT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setClass
argument_list|(
literal|"stream.map.input.writer.class"
argument_list|,
name|idResolver
operator|.
name|getInputWriterClass
argument_list|()
argument_list|,
name|InputWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|idResolver
operator|.
name|resolve
argument_list|(
name|jobConf_
operator|.
name|get
argument_list|(
literal|"stream.reduce.input"
argument_list|,
name|IdentifierResolver
operator|.
name|TEXT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setClass
argument_list|(
literal|"stream.reduce.input.writer.class"
argument_list|,
name|idResolver
operator|.
name|getInputWriterClass
argument_list|()
argument_list|,
name|InputWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.addenvironment"
argument_list|,
name|addTaskEnvironment_
argument_list|)
expr_stmt|;
name|boolean
name|isMapperACommand
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mapCmd_
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|jobConf_
argument_list|,
name|mapCmd_
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|setMapperClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isMapperACommand
operator|=
literal|true
expr_stmt|;
name|jobConf_
operator|.
name|setMapperClass
argument_list|(
name|PipeMapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setMapRunnerClass
argument_list|(
name|PipeMapRunner
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.map.streamprocessor"
argument_list|,
name|URLEncoder
operator|.
name|encode
argument_list|(
name|mapCmd_
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|comCmd_
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|jobConf_
argument_list|,
name|comCmd_
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|setCombinerClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jobConf_
operator|.
name|setCombinerClass
argument_list|(
name|PipeCombiner
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.combine.streamprocessor"
argument_list|,
name|URLEncoder
operator|.
name|encode
argument_list|(
name|comCmd_
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numReduceTasksSpec_
operator|!=
literal|null
condition|)
block|{
name|int
name|numReduceTasks
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numReduceTasksSpec_
argument_list|)
decl_stmt|;
name|jobConf_
operator|.
name|setNumReduceTasks
argument_list|(
name|numReduceTasks
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isReducerACommand
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|redCmd_
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|redCmd_
operator|.
name|equals
argument_list|(
name|REDUCE_NONE
argument_list|)
condition|)
block|{
name|jobConf_
operator|.
name|setNumReduceTasks
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jobConf_
operator|.
name|getNumReduceTasks
argument_list|()
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|redCmd_
operator|.
name|compareToIgnoreCase
argument_list|(
literal|"aggregate"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|jobConf_
operator|.
name|setReducerClass
argument_list|(
name|ValueAggregatorReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setCombinerClass
argument_list|(
name|ValueAggregatorCombiner
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|jobConf_
argument_list|,
name|redCmd_
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|setReducerClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isReducerACommand
operator|=
literal|true
expr_stmt|;
name|jobConf_
operator|.
name|setReducerClass
argument_list|(
name|PipeReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.reduce.streamprocessor"
argument_list|,
name|URLEncoder
operator|.
name|encode
argument_list|(
name|redCmd_
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|idResolver
operator|.
name|resolve
argument_list|(
name|jobConf_
operator|.
name|get
argument_list|(
literal|"stream.map.output"
argument_list|,
name|IdentifierResolver
operator|.
name|TEXT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setClass
argument_list|(
literal|"stream.map.output.reader.class"
argument_list|,
name|idResolver
operator|.
name|getOutputReaderClass
argument_list|()
argument_list|,
name|OutputReader
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|isMapperACommand
operator|||
name|jobConf_
operator|.
name|get
argument_list|(
literal|"stream.map.output"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// if mapper is a command, then map output key/value classes come from the
comment|// idResolver
name|jobConf_
operator|.
name|setMapOutputKeyClass
argument_list|(
name|idResolver
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setMapOutputValueClass
argument_list|(
name|idResolver
operator|.
name|getOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|jobConf_
operator|.
name|getNumReduceTasks
argument_list|()
operator|==
literal|0
condition|)
block|{
name|jobConf_
operator|.
name|setOutputKeyClass
argument_list|(
name|idResolver
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setOutputValueClass
argument_list|(
name|idResolver
operator|.
name|getOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|idResolver
operator|.
name|resolve
argument_list|(
name|jobConf_
operator|.
name|get
argument_list|(
literal|"stream.reduce.output"
argument_list|,
name|IdentifierResolver
operator|.
name|TEXT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setClass
argument_list|(
literal|"stream.reduce.output.reader.class"
argument_list|,
name|idResolver
operator|.
name|getOutputReaderClass
argument_list|()
argument_list|,
name|OutputReader
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReducerACommand
operator|||
name|jobConf_
operator|.
name|get
argument_list|(
literal|"stream.reduce.output"
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// if reducer is a command, then output key/value classes come from the
comment|// idResolver
name|jobConf_
operator|.
name|setOutputKeyClass
argument_list|(
name|idResolver
operator|.
name|getOutputKeyClass
argument_list|()
argument_list|)
expr_stmt|;
name|jobConf_
operator|.
name|setOutputValueClass
argument_list|(
name|idResolver
operator|.
name|getOutputValueClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inReaderSpec_
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|args
init|=
name|inReaderSpec_
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|String
name|readerClass
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
comment|// this argument can only be a Java class
name|c
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|jobConf_
argument_list|,
name|readerClass
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|set
argument_list|(
literal|"stream.recordreader.class"
argument_list|,
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"-inputreader: class not found: "
operator|+
name|readerClass
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|nv
init|=
name|args
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|String
name|k
init|=
literal|"stream.recordreader."
operator|+
name|nv
index|[
literal|0
index|]
decl_stmt|;
name|String
name|v
init|=
operator|(
name|nv
operator|.
name|length
operator|>
literal|1
operator|)
condition|?
name|nv
index|[
literal|1
index|]
else|:
literal|""
decl_stmt|;
name|jobConf_
operator|.
name|set
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|jobConf_
argument_list|,
operator|new
name|Path
argument_list|(
name|output_
argument_list|)
argument_list|)
expr_stmt|;
name|fmt
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|outputFormatSpec_
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|jobConf_
argument_list|,
name|outputFormatSpec_
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|fmt
operator|=
name|c
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"-outputformat : class not found : "
operator|+
name|outputFormatSpec_
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fmt
operator|==
literal|null
condition|)
block|{
name|fmt
operator|=
name|TextOutputFormat
operator|.
name|class
expr_stmt|;
block|}
if|if
condition|(
name|lazyOutput_
condition|)
block|{
name|LazyOutputFormat
operator|.
name|setOutputFormatClass
argument_list|(
name|jobConf_
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jobConf_
operator|.
name|setOutputFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partitionerSpec_
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|jobConf_
argument_list|,
name|partitionerSpec_
argument_list|,
name|defaultPackage
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|setPartitionerClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"-partitioner : class not found : "
operator|+
name|partitionerSpec_
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mapDebugSpec_
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|setMapDebugScript
argument_list|(
name|mapDebugSpec_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reduceDebugSpec_
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|setReduceDebugScript
argument_list|(
name|reduceDebugSpec_
argument_list|)
expr_stmt|;
block|}
comment|// last, allow user to override anything
comment|// (although typically used with properties we didn't touch)
name|jar_
operator|=
name|packageJobJar
argument_list|()
expr_stmt|;
if|if
condition|(
name|jar_
operator|!=
literal|null
condition|)
block|{
name|jobConf_
operator|.
name|setJar
argument_list|(
name|jar_
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|cacheArchives
operator|!=
literal|null
operator|)
operator|||
operator|(
name|cacheFiles
operator|!=
literal|null
operator|)
condition|)
block|{
name|getURIs
argument_list|(
name|cacheArchives
argument_list|,
name|cacheFiles
argument_list|)
expr_stmt|;
name|boolean
name|b
init|=
name|DistributedCache
operator|.
name|checkURIs
argument_list|(
name|fileURIs
argument_list|,
name|archiveURIs
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|b
condition|)
name|fail
argument_list|(
name|LINK_URI
argument_list|)
expr_stmt|;
block|}
comment|// set the jobconf for the caching parameters
if|if
condition|(
name|cacheArchives
operator|!=
literal|null
condition|)
name|DistributedCache
operator|.
name|setCacheArchives
argument_list|(
name|archiveURIs
argument_list|,
name|jobConf_
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheFiles
operator|!=
literal|null
condition|)
name|DistributedCache
operator|.
name|setCacheFiles
argument_list|(
name|fileURIs
argument_list|,
name|jobConf_
argument_list|)
expr_stmt|;
if|if
condition|(
name|verbose_
condition|)
block|{
name|listJobConfProperties
argument_list|()
expr_stmt|;
block|}
name|msg
argument_list|(
literal|"submitting to jobconf: "
operator|+
name|getJobTrackerHostPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prints out the jobconf properties on stdout    * when verbose is specified.    */
DECL|method|listJobConfProperties ()
specifier|protected
name|void
name|listJobConfProperties
parameter_list|()
block|{
name|msg
argument_list|(
literal|"==== JobConf properties:"
argument_list|)
expr_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sorted
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|en
range|:
name|jobConf_
control|)
block|{
name|sorted
operator|.
name|put
argument_list|(
name|en
operator|.
name|getKey
argument_list|()
argument_list|,
name|en
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|en
range|:
name|sorted
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|msg
argument_list|(
name|en
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|en
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
argument_list|(
literal|"===="
argument_list|)
expr_stmt|;
block|}
DECL|method|getJobTrackerHostPort ()
specifier|protected
name|String
name|getJobTrackerHostPort
parameter_list|()
block|{
return|return
name|jobConf_
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|)
return|;
block|}
comment|// Based on JobClient
DECL|method|submitAndMonitorJob ()
specifier|public
name|int
name|submitAndMonitorJob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|jar_
operator|!=
literal|null
operator|&&
name|isLocalHadoop
argument_list|()
condition|)
block|{
comment|// getAbs became required when shell and subvm have different working dirs...
name|File
name|wd
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|RunJar
operator|.
name|unJar
argument_list|(
operator|new
name|File
argument_list|(
name|jar_
argument_list|)
argument_list|,
name|wd
argument_list|,
name|MATCH_ANY
argument_list|)
expr_stmt|;
block|}
comment|// if jobConf_ changes must recreate a JobClient
name|jc_
operator|=
operator|new
name|JobClient
argument_list|(
name|jobConf_
argument_list|)
expr_stmt|;
name|running_
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|running_
operator|=
name|jc_
operator|.
name|submitJob
argument_list|(
name|jobConf_
argument_list|)
expr_stmt|;
name|jobId_
operator|=
name|running_
operator|.
name|getID
argument_list|()
expr_stmt|;
if|if
condition|(
name|background_
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Job is running in background."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|jc_
operator|.
name|monitorAndPrintJob
argument_list|(
name|jobConf_
argument_list|,
name|running_
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Job not successful!"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Output directory: "
operator|+
name|output_
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error launching job , bad input path : "
operator|+
name|fe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
catch|catch
parameter_list|(
name|InvalidJobConfException
name|je
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error launching job , Invalid job conf : "
operator|+
name|je
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
catch|catch
parameter_list|(
name|FileAlreadyExistsException
name|fae
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error launching job , Output path already exists : "
operator|+
name|fae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|4
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error Launching job : "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|5
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error monitoring job : "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|6
return|;
block|}
finally|finally
block|{
name|jc_
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|field|argv_
specifier|protected
name|String
index|[]
name|argv_
decl_stmt|;
DECL|field|background_
specifier|protected
name|boolean
name|background_
decl_stmt|;
DECL|field|verbose_
specifier|protected
name|boolean
name|verbose_
decl_stmt|;
DECL|field|detailedUsage_
specifier|protected
name|boolean
name|detailedUsage_
decl_stmt|;
DECL|field|printUsage
specifier|protected
name|boolean
name|printUsage
init|=
literal|false
decl_stmt|;
DECL|field|debug_
specifier|protected
name|int
name|debug_
decl_stmt|;
DECL|field|env_
specifier|protected
name|Environment
name|env_
decl_stmt|;
DECL|field|jar_
specifier|protected
name|String
name|jar_
decl_stmt|;
DECL|field|localHadoop_
specifier|protected
name|boolean
name|localHadoop_
decl_stmt|;
DECL|field|config_
specifier|protected
name|Configuration
name|config_
decl_stmt|;
DECL|field|jobConf_
specifier|protected
name|JobConf
name|jobConf_
decl_stmt|;
DECL|field|jc_
specifier|protected
name|JobClient
name|jc_
decl_stmt|;
comment|// command-line arguments
DECL|field|inputSpecs_
specifier|protected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|inputSpecs_
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|seenPrimary_
specifier|protected
name|TreeSet
argument_list|<
name|String
argument_list|>
name|seenPrimary_
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|hasSimpleInputSpecs_
specifier|protected
name|boolean
name|hasSimpleInputSpecs_
decl_stmt|;
DECL|field|packageFiles_
specifier|protected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|packageFiles_
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|shippedCanonFiles_
specifier|protected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|shippedCanonFiles_
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|//protected TreeMap<String, String> userJobConfProps_ = new TreeMap<String, String>();
DECL|field|output_
specifier|protected
name|String
name|output_
decl_stmt|;
DECL|field|mapCmd_
specifier|protected
name|String
name|mapCmd_
decl_stmt|;
DECL|field|comCmd_
specifier|protected
name|String
name|comCmd_
decl_stmt|;
DECL|field|redCmd_
specifier|protected
name|String
name|redCmd_
decl_stmt|;
DECL|field|cacheFiles
specifier|protected
name|String
name|cacheFiles
decl_stmt|;
DECL|field|cacheArchives
specifier|protected
name|String
name|cacheArchives
decl_stmt|;
DECL|field|fileURIs
specifier|protected
name|URI
index|[]
name|fileURIs
decl_stmt|;
DECL|field|archiveURIs
specifier|protected
name|URI
index|[]
name|archiveURIs
decl_stmt|;
DECL|field|inReaderSpec_
specifier|protected
name|String
name|inReaderSpec_
decl_stmt|;
DECL|field|inputFormatSpec_
specifier|protected
name|String
name|inputFormatSpec_
decl_stmt|;
DECL|field|outputFormatSpec_
specifier|protected
name|String
name|outputFormatSpec_
decl_stmt|;
DECL|field|partitionerSpec_
specifier|protected
name|String
name|partitionerSpec_
decl_stmt|;
DECL|field|numReduceTasksSpec_
specifier|protected
name|String
name|numReduceTasksSpec_
decl_stmt|;
DECL|field|additionalConfSpec_
specifier|protected
name|String
name|additionalConfSpec_
decl_stmt|;
DECL|field|mapDebugSpec_
specifier|protected
name|String
name|mapDebugSpec_
decl_stmt|;
DECL|field|reduceDebugSpec_
specifier|protected
name|String
name|reduceDebugSpec_
decl_stmt|;
DECL|field|ioSpec_
specifier|protected
name|String
name|ioSpec_
decl_stmt|;
DECL|field|lazyOutput_
specifier|protected
name|boolean
name|lazyOutput_
decl_stmt|;
comment|// Use to communicate config to the external processes (ex env.var.HADOOP_USER)
comment|// encoding "a=b c=d"
DECL|field|addTaskEnvironment_
specifier|protected
name|String
name|addTaskEnvironment_
decl_stmt|;
DECL|field|outputSingleNode_
specifier|protected
name|boolean
name|outputSingleNode_
decl_stmt|;
DECL|field|minRecWrittenToEnableSkip_
specifier|protected
name|long
name|minRecWrittenToEnableSkip_
decl_stmt|;
DECL|field|running_
specifier|protected
name|RunningJob
name|running_
decl_stmt|;
DECL|field|jobId_
specifier|protected
name|JobID
name|jobId_
decl_stmt|;
DECL|field|LINK_URI
specifier|protected
specifier|static
specifier|final
name|String
name|LINK_URI
init|=
literal|"You need to specify the uris as scheme://path#linkname,"
operator|+
literal|"Please specify a different link name for all of your caching URIs"
decl_stmt|;
block|}
end_class

end_unit

