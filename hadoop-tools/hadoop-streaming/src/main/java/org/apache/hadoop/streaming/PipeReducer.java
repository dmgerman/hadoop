begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SkipBadRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|InputWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|OutputReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/** A generic Reducer bridge.  *  It delegates operations to an external program via stdin and stdout.  */
end_comment

begin_class
DECL|class|PipeReducer
specifier|public
class|class
name|PipeReducer
extends|extends
name|PipeMapRed
implements|implements
name|Reducer
block|{
DECL|field|reduceOutFieldSeparator
specifier|private
name|byte
index|[]
name|reduceOutFieldSeparator
decl_stmt|;
DECL|field|reduceInputFieldSeparator
specifier|private
name|byte
index|[]
name|reduceInputFieldSeparator
decl_stmt|;
DECL|field|numOfReduceOutputKeyFields
specifier|private
name|int
name|numOfReduceOutputKeyFields
init|=
literal|1
decl_stmt|;
DECL|field|skipping
specifier|private
name|boolean
name|skipping
init|=
literal|false
decl_stmt|;
DECL|method|getPipeCommand (JobConf job)
name|String
name|getPipeCommand
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|String
name|str
init|=
name|job
operator|.
name|get
argument_list|(
literal|"stream.reduce.streamprocessor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
name|str
return|;
block|}
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|str
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"stream.reduce.streamprocessor in jobconf not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|getDoPipe ()
name|boolean
name|getDoPipe
parameter_list|()
block|{
name|String
name|argv
init|=
name|getPipeCommand
argument_list|(
name|job_
argument_list|)
decl_stmt|;
comment|// Currently: null is identity reduce. REDUCE_NONE is no-map-outputs.
return|return
operator|(
name|argv
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|StreamJob
operator|.
name|REDUCE_NONE
operator|.
name|equals
argument_list|(
name|argv
argument_list|)
return|;
block|}
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|//disable the auto increment of the counter. For streaming, no of
comment|//processed records could be different(equal or less) than the no of
comment|//records input.
name|SkipBadRecords
operator|.
name|setAutoIncrReducerProcCount
argument_list|(
name|job
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|skipping
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SKIP_RECORDS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|reduceOutFieldSeparator
operator|=
name|job_
operator|.
name|get
argument_list|(
literal|"stream.reduce.output.field.separator"
argument_list|,
literal|"\t"
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|reduceInputFieldSeparator
operator|=
name|job_
operator|.
name|get
argument_list|(
literal|"stream.reduce.input.field.separator"
argument_list|,
literal|"\t"
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|this
operator|.
name|numOfReduceOutputKeyFields
operator|=
name|job_
operator|.
name|getInt
argument_list|(
literal|"stream.num.reduce.output.key.fields"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The current system does not support UTF-8 encoding!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|reduce (Object key, Iterator values, OutputCollector output, Reporter reporter)
specifier|public
name|void
name|reduce
parameter_list|(
name|Object
name|key
parameter_list|,
name|Iterator
name|values
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
comment|// init
if|if
condition|(
name|doPipe_
operator|&&
name|outThread_
operator|==
literal|null
condition|)
block|{
name|startOutputThreads
argument_list|(
name|output
argument_list|,
name|reporter
argument_list|)
expr_stmt|;
block|}
try|try
block|{
while|while
condition|(
name|values
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Writable
name|val
init|=
operator|(
name|Writable
operator|)
name|values
operator|.
name|next
argument_list|()
decl_stmt|;
name|numRecRead_
operator|++
expr_stmt|;
name|maybeLogRecord
argument_list|()
expr_stmt|;
if|if
condition|(
name|doPipe_
condition|)
block|{
if|if
condition|(
name|outerrThreadsThrowable
operator|!=
literal|null
condition|)
block|{
name|mapRedFinished
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MROutput/MRErrThread failed:"
argument_list|,
name|outerrThreadsThrowable
argument_list|)
throw|;
block|}
name|inWriter_
operator|.
name|writeKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|inWriter_
operator|.
name|writeValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// "identity reduce"
name|output
operator|.
name|collect
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doPipe_
operator|&&
name|skipping
condition|)
block|{
comment|//flush the streams on every record input if running in skip mode
comment|//so that we don't buffer other records surrounding a bad record.
name|clientOut_
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
comment|// a common reason to get here is failure of the subprocess.
comment|// Document that fact, if possible.
name|String
name|extraInfo
init|=
literal|""
decl_stmt|;
try|try
block|{
name|int
name|exitVal
init|=
name|sim
operator|.
name|exitValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|exitVal
operator|==
literal|0
condition|)
block|{
name|extraInfo
operator|=
literal|"subprocess exited successfully\n"
expr_stmt|;
block|}
else|else
block|{
name|extraInfo
operator|=
literal|"subprocess exited with error code "
operator|+
name|exitVal
operator|+
literal|"\n"
expr_stmt|;
block|}
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalThreadStateException
name|e
parameter_list|)
block|{
comment|// hmm, but child is still running.  go figure.
name|extraInfo
operator|=
literal|"subprocess still running\n"
expr_stmt|;
block|}
empty_stmt|;
name|mapRedFinished
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|extraInfo
operator|+
name|getContext
argument_list|()
operator|+
name|io
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|mapRedFinished
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInputSeparator ()
specifier|public
name|byte
index|[]
name|getInputSeparator
parameter_list|()
block|{
return|return
name|reduceInputFieldSeparator
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldSeparator ()
specifier|public
name|byte
index|[]
name|getFieldSeparator
parameter_list|()
block|{
return|return
name|reduceOutFieldSeparator
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOfKeyFields ()
specifier|public
name|int
name|getNumOfKeyFields
parameter_list|()
block|{
return|return
name|numOfReduceOutputKeyFields
return|;
block|}
annotation|@
name|Override
DECL|method|createInputWriter ()
name|InputWriter
name|createInputWriter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|createInputWriter
argument_list|(
name|reduceInputWriterClass_
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createOutputReader ()
name|OutputReader
name|createOutputReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|createOutputReader
argument_list|(
name|reduceOutputReaderClass_
argument_list|)
return|;
block|}
block|}
end_class

end_unit

