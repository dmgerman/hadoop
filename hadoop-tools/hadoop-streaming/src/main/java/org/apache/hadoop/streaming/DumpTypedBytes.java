begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|FileSplit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|RecordReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|typedbytes
operator|.
name|TypedBytesOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|typedbytes
operator|.
name|TypedBytesWritableOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_comment
comment|/**  * Utility program that fetches all files that match a given pattern and dumps  * their content to stdout as typed bytes. This works for all files that can be  * handled by {@link org.apache.hadoop.streaming.AutoInputFormat}.  */
end_comment

begin_class
DECL|class|DumpTypedBytes
specifier|public
class|class
name|DumpTypedBytes
implements|implements
name|Tool
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|DumpTypedBytes (Configuration conf)
specifier|public
name|DumpTypedBytes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
DECL|method|DumpTypedBytes ()
specifier|public
name|DumpTypedBytes
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
comment|/**    * The main driver for<code>DumpTypedBytes</code>.    */
DECL|method|run (String[] args)
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Too few arguments!"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
name|Path
name|pattern
init|=
operator|new
name|Path
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|pattern
operator|.
name|getFileSystem
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|setVerifyChecksum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fs
operator|.
name|globStatus
argument_list|(
name|pattern
argument_list|)
argument_list|,
name|pattern
argument_list|)
control|)
block|{
name|List
argument_list|<
name|FileStatus
argument_list|>
name|inputFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|FileStatus
argument_list|>
argument_list|()
decl_stmt|;
name|FileStatus
name|status
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|inputFiles
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inputFiles
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
return|return
name|dumpTypedBytes
argument_list|(
name|inputFiles
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|printUsage ()
specifier|private
name|void
name|printUsage
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: mapred streaming dumptb<glob-pattern>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  Dumps all files that match the given pattern to "
operator|+
literal|"standard output as typed bytes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  The files can be text or sequence files"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Dump given list of files to standard output as typed bytes.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|dumpTypedBytes (List<FileStatus> files)
specifier|private
name|int
name|dumpTypedBytes
parameter_list|(
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
name|JobConf
name|job
init|=
operator|new
name|JobConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|DataOutputStream
name|dout
init|=
operator|new
name|DataOutputStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
decl_stmt|;
name|AutoInputFormat
name|autoInputFormat
init|=
operator|new
name|AutoInputFormat
argument_list|()
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|files
control|)
block|{
name|FileSplit
name|split
init|=
operator|new
name|FileSplit
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|fileStatus
operator|.
name|getLen
argument_list|()
operator|*
name|fileStatus
operator|.
name|getBlockSize
argument_list|()
argument_list|,
operator|(
name|String
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|RecordReader
name|recReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|recReader
operator|=
name|autoInputFormat
operator|.
name|getRecordReader
argument_list|(
name|split
argument_list|,
name|job
argument_list|,
name|Reporter
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|Object
name|key
init|=
name|recReader
operator|.
name|createKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|recReader
operator|.
name|createValue
argument_list|()
decl_stmt|;
while|while
condition|(
name|recReader
operator|.
name|next
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|instanceof
name|Writable
condition|)
block|{
name|TypedBytesWritableOutput
operator|.
name|get
argument_list|(
name|dout
argument_list|)
operator|.
name|write
argument_list|(
operator|(
name|Writable
operator|)
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TypedBytesOutput
operator|.
name|get
argument_list|(
name|dout
argument_list|)
operator|.
name|write
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Writable
condition|)
block|{
name|TypedBytesWritableOutput
operator|.
name|get
argument_list|(
name|dout
argument_list|)
operator|.
name|write
argument_list|(
operator|(
name|Writable
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TypedBytesOutput
operator|.
name|get
argument_list|(
name|dout
argument_list|)
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|recReader
operator|!=
literal|null
condition|)
block|{
name|recReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|dout
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|DumpTypedBytes
name|dumptb
init|=
operator|new
name|DumpTypedBytes
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|dumptb
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

