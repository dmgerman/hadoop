begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.typedbytes
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|typedbytes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|RecordInput
import|;
end_import

begin_comment
comment|/**  * Serializer for records that writes typed bytes.  */
end_comment

begin_class
DECL|class|TypedBytesRecordInput
specifier|public
class|class
name|TypedBytesRecordInput
implements|implements
name|RecordInput
block|{
DECL|field|in
specifier|private
name|TypedBytesInput
name|in
decl_stmt|;
DECL|method|TypedBytesRecordInput ()
specifier|private
name|TypedBytesRecordInput
parameter_list|()
block|{}
DECL|method|setTypedBytesInput (TypedBytesInput in)
specifier|private
name|void
name|setTypedBytesInput
parameter_list|(
name|TypedBytesInput
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
DECL|field|TB_IN
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|TypedBytesRecordInput
argument_list|>
name|TB_IN
init|=
operator|new
name|ThreadLocal
argument_list|<
name|TypedBytesRecordInput
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TypedBytesRecordInput
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|TypedBytesRecordInput
argument_list|()
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Get a thread-local typed bytes record input for the supplied    * {@link TypedBytesInput}.    *     * @param in typed bytes input object    * @return typed bytes record input corresponding to the supplied    *         {@link TypedBytesInput}.    */
DECL|method|get (TypedBytesInput in)
specifier|public
specifier|static
name|TypedBytesRecordInput
name|get
parameter_list|(
name|TypedBytesInput
name|in
parameter_list|)
block|{
name|TypedBytesRecordInput
name|bin
init|=
name|TB_IN
operator|.
name|get
argument_list|()
decl_stmt|;
name|bin
operator|.
name|setTypedBytesInput
argument_list|(
name|in
argument_list|)
expr_stmt|;
return|return
name|bin
return|;
block|}
comment|/**    * Get a thread-local typed bytes record input for the supplied    * {@link DataInput}.    *     * @param in data input object    * @return typed bytes record input corresponding to the supplied    *         {@link DataInput}.    */
DECL|method|get (DataInput in)
specifier|public
specifier|static
name|TypedBytesRecordInput
name|get
parameter_list|(
name|DataInput
name|in
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|TypedBytesInput
operator|.
name|get
argument_list|(
name|in
argument_list|)
argument_list|)
return|;
block|}
comment|/** Creates a new instance of TypedBytesRecordInput. */
DECL|method|TypedBytesRecordInput (TypedBytesInput in)
specifier|public
name|TypedBytesRecordInput
parameter_list|(
name|TypedBytesInput
name|in
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
comment|/** Creates a new instance of TypedBytesRecordInput. */
DECL|method|TypedBytesRecordInput (DataInput in)
specifier|public
name|TypedBytesRecordInput
parameter_list|(
name|DataInput
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|TypedBytesInput
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|readBool (String tag)
specifier|public
name|boolean
name|readBool
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|readBool
argument_list|()
return|;
block|}
DECL|method|readBuffer (String tag)
specifier|public
name|Buffer
name|readBuffer
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
operator|new
name|Buffer
argument_list|(
name|in
operator|.
name|readBytes
argument_list|()
argument_list|)
return|;
block|}
DECL|method|readByte (String tag)
specifier|public
name|byte
name|readByte
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|readByte
argument_list|()
return|;
block|}
DECL|method|readDouble (String tag)
specifier|public
name|double
name|readDouble
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|readDouble
argument_list|()
return|;
block|}
DECL|method|readFloat (String tag)
specifier|public
name|float
name|readFloat
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|readFloat
argument_list|()
return|;
block|}
DECL|method|readInt (String tag)
specifier|public
name|int
name|readInt
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|readInt
argument_list|()
return|;
block|}
DECL|method|readLong (String tag)
specifier|public
name|long
name|readLong
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|readLong
argument_list|()
return|;
block|}
DECL|method|readString (String tag)
specifier|public
name|String
name|readString
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
name|in
operator|.
name|readString
argument_list|()
return|;
block|}
DECL|method|startRecord (String tag)
specifier|public
name|void
name|startRecord
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
block|}
DECL|method|startVector (String tag)
specifier|public
name|Index
name|startVector
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
operator|new
name|TypedBytesIndex
argument_list|(
name|in
operator|.
name|readVectorHeader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|startMap (String tag)
specifier|public
name|Index
name|startMap
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|skipType
argument_list|()
expr_stmt|;
return|return
operator|new
name|TypedBytesIndex
argument_list|(
name|in
operator|.
name|readMapHeader
argument_list|()
argument_list|)
return|;
block|}
DECL|method|endRecord (String tag)
specifier|public
name|void
name|endRecord
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{}
DECL|method|endVector (String tag)
specifier|public
name|void
name|endVector
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{}
DECL|method|endMap (String tag)
specifier|public
name|void
name|endMap
parameter_list|(
name|String
name|tag
parameter_list|)
throws|throws
name|IOException
block|{}
DECL|class|TypedBytesIndex
specifier|private
specifier|static
specifier|final
class|class
name|TypedBytesIndex
implements|implements
name|Index
block|{
DECL|field|nelems
specifier|private
name|int
name|nelems
decl_stmt|;
DECL|method|TypedBytesIndex (int nelems)
specifier|private
name|TypedBytesIndex
parameter_list|(
name|int
name|nelems
parameter_list|)
block|{
name|this
operator|.
name|nelems
operator|=
name|nelems
expr_stmt|;
block|}
DECL|method|done ()
specifier|public
name|boolean
name|done
parameter_list|()
block|{
return|return
operator|(
name|nelems
operator|<=
literal|0
operator|)
return|;
block|}
DECL|method|incr ()
specifier|public
name|void
name|incr
parameter_list|()
block|{
name|nelems
operator|--
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

