begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|Reporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|OutputCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|SkipBadRecords
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TextInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|InputWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|OutputReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
operator|.
name|TextInputWriter
import|;
end_import

begin_comment
comment|/** A generic Mapper bridge.  *  It delegates operations to an external program via stdin and stdout.  */
end_comment

begin_class
DECL|class|PipeMapper
specifier|public
class|class
name|PipeMapper
extends|extends
name|PipeMapRed
implements|implements
name|Mapper
block|{
DECL|field|ignoreKey
specifier|private
name|boolean
name|ignoreKey
init|=
literal|false
decl_stmt|;
DECL|field|skipping
specifier|private
name|boolean
name|skipping
init|=
literal|false
decl_stmt|;
DECL|field|mapOutputFieldSeparator
specifier|private
name|byte
index|[]
name|mapOutputFieldSeparator
decl_stmt|;
DECL|field|mapInputFieldSeparator
specifier|private
name|byte
index|[]
name|mapInputFieldSeparator
decl_stmt|;
DECL|field|numOfMapOutputKeyFields
specifier|private
name|int
name|numOfMapOutputKeyFields
init|=
literal|1
decl_stmt|;
DECL|method|getPipeCommand (JobConf job)
name|String
name|getPipeCommand
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|String
name|str
init|=
name|job
operator|.
name|get
argument_list|(
literal|"stream.map.streamprocessor"
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
name|str
return|;
block|}
try|try
block|{
return|return
name|URLDecoder
operator|.
name|decode
argument_list|(
name|str
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"stream.map.streamprocessor in jobconf not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|method|getDoPipe ()
name|boolean
name|getDoPipe
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|configure (JobConf job)
specifier|public
name|void
name|configure
parameter_list|(
name|JobConf
name|job
parameter_list|)
block|{
name|super
operator|.
name|configure
argument_list|(
name|job
argument_list|)
expr_stmt|;
comment|//disable the auto increment of the counter. For streaming, no of
comment|//processed records could be different(equal or less) than the no of
comment|//records input.
name|SkipBadRecords
operator|.
name|setAutoIncrMapperProcCount
argument_list|(
name|job
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|skipping
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
name|MRJobConfig
operator|.
name|SKIP_RECORDS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapInputWriterClass_
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|equals
argument_list|(
name|TextInputWriter
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|inputFormatClassName
init|=
name|job
operator|.
name|getClass
argument_list|(
literal|"mapred.input.format.class"
argument_list|,
name|TextInputFormat
operator|.
name|class
argument_list|)
operator|.
name|getCanonicalName
argument_list|()
decl_stmt|;
name|ignoreKey
operator|=
name|job
operator|.
name|getBoolean
argument_list|(
literal|"stream.map.input.ignoreKey"
argument_list|,
name|inputFormatClassName
operator|.
name|equals
argument_list|(
name|TextInputFormat
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|mapOutputFieldSeparator
operator|=
name|job
operator|.
name|get
argument_list|(
literal|"stream.map.output.field.separator"
argument_list|,
literal|"\t"
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|mapInputFieldSeparator
operator|=
name|job
operator|.
name|get
argument_list|(
literal|"stream.map.input.field.separator"
argument_list|,
literal|"\t"
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|numOfMapOutputKeyFields
operator|=
name|job
operator|.
name|getInt
argument_list|(
literal|"stream.num.map.output.key.fields"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The current system does not support UTF-8 encoding!"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|// Do NOT declare default constructor
comment|// (MapRed creates it reflectively)
DECL|method|map (Object key, Object value, OutputCollector output, Reporter reporter)
specifier|public
name|void
name|map
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|OutputCollector
name|output
parameter_list|,
name|Reporter
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|outerrThreadsThrowable
operator|!=
literal|null
condition|)
block|{
name|mapRedFinished
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"MROutput/MRErrThread failed:"
argument_list|,
name|outerrThreadsThrowable
argument_list|)
throw|;
block|}
try|try
block|{
comment|// 1/4 Hadoop in
name|numRecRead_
operator|++
expr_stmt|;
name|maybeLogRecord
argument_list|()
expr_stmt|;
comment|// 2/4 Hadoop to Tool
if|if
condition|(
name|numExceptions_
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|ignoreKey
condition|)
block|{
name|inWriter_
operator|.
name|writeKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|inWriter_
operator|.
name|writeValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipping
condition|)
block|{
comment|//flush the streams on every record input if running in skip mode
comment|//so that we don't buffer other records surrounding a bad record.
name|clientOut_
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|numRecSkipped_
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|numExceptions_
operator|++
expr_stmt|;
if|if
condition|(
name|numExceptions_
operator|>
literal|1
operator|||
name|numRecWritten_
operator|<
name|minRecWrittenToEnableSkip_
condition|)
block|{
comment|// terminate with failure
name|LOG
operator|.
name|info
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|io
argument_list|)
expr_stmt|;
name|mapRedFinished
argument_list|()
expr_stmt|;
throw|throw
name|io
throw|;
block|}
else|else
block|{
comment|// terminate with success:
comment|// swallow input records although the stream processor failed/closed
block|}
block|}
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|mapRedFinished
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInputSeparator ()
specifier|public
name|byte
index|[]
name|getInputSeparator
parameter_list|()
block|{
return|return
name|mapInputFieldSeparator
return|;
block|}
annotation|@
name|Override
DECL|method|getFieldSeparator ()
specifier|public
name|byte
index|[]
name|getFieldSeparator
parameter_list|()
block|{
return|return
name|mapOutputFieldSeparator
return|;
block|}
annotation|@
name|Override
DECL|method|getNumOfKeyFields ()
specifier|public
name|int
name|getNumOfKeyFields
parameter_list|()
block|{
return|return
name|numOfMapOutputKeyFields
return|;
block|}
annotation|@
name|Override
DECL|method|createInputWriter ()
name|InputWriter
name|createInputWriter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|createInputWriter
argument_list|(
name|mapInputWriterClass_
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createOutputReader ()
name|OutputReader
name|createOutputReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|super
operator|.
name|createOutputReader
argument_list|(
name|mapOutputReaderClass_
argument_list|)
return|;
block|}
block|}
end_class

end_unit

