begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.record
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * Various utility functions for Hadoop record I/O runtime.  *   * @deprecated Replaced by<a href="http://avro.apache.org/">Avro</a>.  */
end_comment

begin_class
annotation|@
name|Deprecated
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
DECL|class|Utils
specifier|public
class|class
name|Utils
block|{
comment|/** Cannot create a new instance of Utils */
DECL|method|Utils ()
specifier|private
name|Utils
parameter_list|()
block|{   }
DECL|field|hexchars
specifier|public
specifier|static
specifier|final
name|char
index|[]
name|hexchars
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|}
decl_stmt|;
comment|/**    *    * @param s    * @return    */
DECL|method|toXMLString (String s)
specifier|static
name|String
name|toXMLString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'<'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'&'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"&amp;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
literal|'%'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"%0025"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|<
literal|0x20
operator|||
operator|(
name|ch
operator|>
literal|0xD7FF
operator|&&
name|ch
operator|<
literal|0xE000
operator|)
operator|||
operator|(
name|ch
operator|>
literal|0xFFFD
operator|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"%"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|hexchars
index|[
operator|(
name|ch
operator|&
literal|0xF000
operator|)
operator|>>
literal|12
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|hexchars
index|[
operator|(
name|ch
operator|&
literal|0x0F00
operator|)
operator|>>
literal|8
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|hexchars
index|[
operator|(
name|ch
operator|&
literal|0x00F0
operator|)
operator|>>
literal|4
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|hexchars
index|[
operator|(
name|ch
operator|&
literal|0x000F
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|h2c (char ch)
specifier|static
specifier|private
name|int
name|h2c
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|>=
literal|'0'
operator|&&
name|ch
operator|<=
literal|'9'
condition|)
block|{
return|return
name|ch
operator|-
literal|'0'
return|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|>=
literal|'A'
operator|&&
name|ch
operator|<=
literal|'F'
condition|)
block|{
return|return
name|ch
operator|-
literal|'A'
operator|+
literal|10
return|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|>=
literal|'a'
operator|&&
name|ch
operator|<=
literal|'f'
condition|)
block|{
return|return
name|ch
operator|-
literal|'a'
operator|+
literal|10
return|;
block|}
return|return
literal|0
return|;
block|}
comment|/**    *    * @param s    * @return    */
DECL|method|fromXMLString (String s)
specifier|static
name|String
name|fromXMLString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
name|char
name|ch
init|=
name|s
operator|.
name|charAt
argument_list|(
name|idx
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'%'
condition|)
block|{
name|int
name|ch1
init|=
name|h2c
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|)
operator|<<
literal|12
decl_stmt|;
name|int
name|ch2
init|=
name|h2c
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|)
operator|<<
literal|8
decl_stmt|;
name|int
name|ch3
init|=
name|h2c
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|)
operator|<<
literal|4
decl_stmt|;
name|int
name|ch4
init|=
name|h2c
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|char
name|res
init|=
call|(
name|char
call|)
argument_list|(
name|ch1
operator||
name|ch2
operator||
name|ch3
operator||
name|ch4
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    *    * @param s    * @return    */
DECL|method|toCSVString (String s)
specifier|static
name|String
name|toCSVString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\0'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"%00"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\n'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"%0A"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\r'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"%0D"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|','
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"%2C"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"%7D"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|sb
operator|.
name|append
argument_list|(
literal|"%25"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    *    * @param s    * @throws java.io.IOException    * @return    */
DECL|method|fromCSVString (String s)
specifier|static
name|String
name|fromCSVString
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'\''
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing string."
argument_list|)
throw|;
block|}
name|int
name|len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|char
name|ch1
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|char
name|ch2
init|=
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
name|i
operator|+=
literal|2
expr_stmt|;
if|if
condition|(
name|ch1
operator|==
literal|'0'
operator|&&
name|ch2
operator|==
literal|'0'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\0'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch1
operator|==
literal|'0'
operator|&&
name|ch2
operator|==
literal|'A'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch1
operator|==
literal|'0'
operator|&&
name|ch2
operator|==
literal|'D'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch1
operator|==
literal|'2'
operator|&&
name|ch2
operator|==
literal|'C'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch1
operator|==
literal|'7'
operator|&&
name|ch2
operator|==
literal|'D'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch1
operator|==
literal|'2'
operator|&&
name|ch2
operator|==
literal|'5'
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing string."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    *    * @param s    * @return    */
DECL|method|toXMLBuffer (Buffer s)
specifier|static
name|String
name|toXMLBuffer
parameter_list|(
name|Buffer
name|s
parameter_list|)
block|{
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    *    * @param s    * @throws java.io.IOException    * @return    */
DECL|method|fromXMLBuffer (String s)
specifier|static
name|Buffer
name|fromXMLBuffer
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|Buffer
argument_list|()
return|;
block|}
name|int
name|blen
init|=
name|s
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|barr
init|=
operator|new
name|byte
index|[
name|blen
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|blen
condition|;
name|idx
operator|++
control|)
block|{
name|char
name|c1
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|idx
argument_list|)
decl_stmt|;
name|char
name|c2
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|barr
index|[
name|idx
index|]
operator|=
operator|(
name|byte
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
literal|""
operator|+
name|c1
operator|+
name|c2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Buffer
argument_list|(
name|barr
argument_list|)
return|;
block|}
comment|/**    *    * @param buf    * @return    */
DECL|method|toCSVBuffer (Buffer buf)
specifier|static
name|String
name|toCSVBuffer
parameter_list|(
name|Buffer
name|buf
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Converts a CSV-serialized representation of buffer to a new    * Buffer    * @param s CSV-serialized representation of buffer    * @throws java.io.IOException    * @return Deserialized Buffer    */
DECL|method|fromCSVBuffer (String s)
specifier|static
name|Buffer
name|fromCSVBuffer
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|!=
literal|'#'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error deserializing buffer."
argument_list|)
throw|;
block|}
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|Buffer
argument_list|()
return|;
block|}
name|int
name|blen
init|=
operator|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|barr
init|=
operator|new
name|byte
index|[
name|blen
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|blen
condition|;
name|idx
operator|++
control|)
block|{
name|char
name|c1
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|char
name|c2
init|=
name|s
operator|.
name|charAt
argument_list|(
literal|2
operator|*
name|idx
operator|+
literal|2
argument_list|)
decl_stmt|;
name|barr
index|[
name|idx
index|]
operator|=
operator|(
name|byte
operator|)
name|Integer
operator|.
name|parseInt
argument_list|(
literal|""
operator|+
name|c1
operator|+
name|c2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Buffer
argument_list|(
name|barr
argument_list|)
return|;
block|}
DECL|method|utf8LenForCodePoint (final int cpt)
specifier|private
specifier|static
name|int
name|utf8LenForCodePoint
parameter_list|(
specifier|final
name|int
name|cpt
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cpt
operator|>=
literal|0
operator|&&
name|cpt
operator|<=
literal|0x7F
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|cpt
operator|>=
literal|0x80
operator|&&
name|cpt
operator|<=
literal|0x07FF
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
operator|(
name|cpt
operator|>=
literal|0x0800
operator|&&
name|cpt
operator|<
literal|0xD800
operator|)
operator|||
operator|(
name|cpt
operator|>
literal|0xDFFF
operator|&&
name|cpt
operator|<=
literal|0xFFFD
operator|)
condition|)
block|{
return|return
literal|3
return|;
block|}
if|if
condition|(
name|cpt
operator|>=
literal|0x10000
operator|&&
name|cpt
operator|<=
literal|0x10FFFF
condition|)
block|{
return|return
literal|4
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Unicode Codepoint "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|cpt
argument_list|)
operator|+
literal|" in string."
argument_list|)
throw|;
block|}
DECL|field|B10
specifier|private
specifier|static
specifier|final
name|int
name|B10
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"10000000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|B110
specifier|private
specifier|static
specifier|final
name|int
name|B110
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"11000000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|B1110
specifier|private
specifier|static
specifier|final
name|int
name|B1110
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"11100000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|B11110
specifier|private
specifier|static
specifier|final
name|int
name|B11110
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"11110000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|B11
specifier|private
specifier|static
specifier|final
name|int
name|B11
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"11000000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|B111
specifier|private
specifier|static
specifier|final
name|int
name|B111
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"11100000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|B1111
specifier|private
specifier|static
specifier|final
name|int
name|B1111
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"11110000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|B11111
specifier|private
specifier|static
specifier|final
name|int
name|B11111
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
literal|"11111000"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|method|writeUtf8 (int cpt, final byte[] bytes, final int offset)
specifier|private
specifier|static
name|int
name|writeUtf8
parameter_list|(
name|int
name|cpt
parameter_list|,
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cpt
operator|>=
literal|0
operator|&&
name|cpt
operator|<=
literal|0x7F
condition|)
block|{
name|bytes
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|cpt
expr_stmt|;
return|return
literal|1
return|;
block|}
if|if
condition|(
name|cpt
operator|>=
literal|0x80
operator|&&
name|cpt
operator|<=
literal|0x07FF
condition|)
block|{
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B10
operator||
operator|(
name|cpt
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|cpt
operator|>>
literal|6
expr_stmt|;
name|bytes
index|[
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B110
operator||
operator|(
name|cpt
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
if|if
condition|(
operator|(
name|cpt
operator|>=
literal|0x0800
operator|&&
name|cpt
operator|<
literal|0xD800
operator|)
operator|||
operator|(
name|cpt
operator|>
literal|0xDFFF
operator|&&
name|cpt
operator|<=
literal|0xFFFD
operator|)
condition|)
block|{
name|bytes
index|[
name|offset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B10
operator||
operator|(
name|cpt
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|cpt
operator|>>
literal|6
expr_stmt|;
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B10
operator||
operator|(
name|cpt
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|cpt
operator|>>
literal|6
expr_stmt|;
name|bytes
index|[
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B1110
operator||
operator|(
name|cpt
operator|&
literal|0x0F
operator|)
argument_list|)
expr_stmt|;
return|return
literal|3
return|;
block|}
if|if
condition|(
name|cpt
operator|>=
literal|0x10000
operator|&&
name|cpt
operator|<=
literal|0x10FFFF
condition|)
block|{
name|bytes
index|[
name|offset
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B10
operator||
operator|(
name|cpt
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|cpt
operator|>>
literal|6
expr_stmt|;
name|bytes
index|[
name|offset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B10
operator||
operator|(
name|cpt
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|cpt
operator|>>
literal|6
expr_stmt|;
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B10
operator||
operator|(
name|cpt
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|cpt
operator|>>
literal|6
expr_stmt|;
name|bytes
index|[
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|B11110
operator||
operator|(
name|cpt
operator|&
literal|0x07
operator|)
argument_list|)
expr_stmt|;
return|return
literal|4
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Unicode Codepoint "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|cpt
argument_list|)
operator|+
literal|" in string."
argument_list|)
throw|;
block|}
DECL|method|toBinaryString (final DataOutput out, final String str)
specifier|static
name|void
name|toBinaryString
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|,
specifier|final
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|strlen
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|strlen
operator|*
literal|4
index|]
decl_stmt|;
comment|// Codepoints expand to 4 bytes max
name|int
name|utf8Len
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|strlen
condition|)
block|{
specifier|final
name|int
name|cpt
init|=
name|str
operator|.
name|codePointAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|idx
operator|+=
name|Character
operator|.
name|isSupplementaryCodePoint
argument_list|(
name|cpt
argument_list|)
condition|?
literal|2
else|:
literal|1
expr_stmt|;
name|utf8Len
operator|+=
name|writeUtf8
argument_list|(
name|cpt
argument_list|,
name|bytes
argument_list|,
name|utf8Len
argument_list|)
expr_stmt|;
block|}
name|writeVInt
argument_list|(
name|out
argument_list|,
name|utf8Len
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|utf8Len
argument_list|)
expr_stmt|;
block|}
DECL|method|isValidCodePoint (int cpt)
specifier|static
name|boolean
name|isValidCodePoint
parameter_list|(
name|int
name|cpt
parameter_list|)
block|{
return|return
operator|!
operator|(
operator|(
name|cpt
operator|>
literal|0x10FFFF
operator|)
operator|||
operator|(
name|cpt
operator|>=
literal|0xD800
operator|&&
name|cpt
operator|<=
literal|0xDFFF
operator|)
operator|||
operator|(
name|cpt
operator|>=
literal|0xFFFE
operator|&&
name|cpt
operator|<=
literal|0xFFFF
operator|)
operator|)
return|;
block|}
DECL|method|utf8ToCodePoint (int b1, int b2, int b3, int b4)
specifier|private
specifier|static
name|int
name|utf8ToCodePoint
parameter_list|(
name|int
name|b1
parameter_list|,
name|int
name|b2
parameter_list|,
name|int
name|b3
parameter_list|,
name|int
name|b4
parameter_list|)
block|{
name|int
name|cpt
init|=
literal|0
decl_stmt|;
name|cpt
operator|=
operator|(
operator|(
operator|(
name|b1
operator|&
operator|~
name|B11111
operator|)
operator|<<
literal|18
operator|)
operator||
operator|(
operator|(
name|b2
operator|&
operator|~
name|B11
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|b3
operator|&
operator|~
name|B11
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|b4
operator|&
operator|~
name|B11
operator|)
operator|)
expr_stmt|;
return|return
name|cpt
return|;
block|}
DECL|method|utf8ToCodePoint (int b1, int b2, int b3)
specifier|private
specifier|static
name|int
name|utf8ToCodePoint
parameter_list|(
name|int
name|b1
parameter_list|,
name|int
name|b2
parameter_list|,
name|int
name|b3
parameter_list|)
block|{
name|int
name|cpt
init|=
literal|0
decl_stmt|;
name|cpt
operator|=
operator|(
operator|(
operator|(
name|b1
operator|&
operator|~
name|B1111
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|b2
operator|&
operator|~
name|B11
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|b3
operator|&
operator|~
name|B11
operator|)
operator|)
expr_stmt|;
return|return
name|cpt
return|;
block|}
DECL|method|utf8ToCodePoint (int b1, int b2)
specifier|private
specifier|static
name|int
name|utf8ToCodePoint
parameter_list|(
name|int
name|b1
parameter_list|,
name|int
name|b2
parameter_list|)
block|{
name|int
name|cpt
init|=
literal|0
decl_stmt|;
name|cpt
operator|=
operator|(
operator|(
operator|(
name|b1
operator|&
operator|~
name|B111
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|b2
operator|&
operator|~
name|B11
operator|)
operator|)
expr_stmt|;
return|return
name|cpt
return|;
block|}
DECL|method|checkB10 (int b)
specifier|private
specifier|static
name|void
name|checkB10
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|b
operator|&
name|B11
operator|)
operator|!=
name|B10
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid UTF-8 representation."
argument_list|)
throw|;
block|}
block|}
DECL|method|fromBinaryString (final DataInput din)
specifier|static
name|String
name|fromBinaryString
parameter_list|(
specifier|final
name|DataInput
name|din
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|utf8Len
init|=
name|readVInt
argument_list|(
name|din
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|utf8Len
index|]
decl_stmt|;
name|din
operator|.
name|readFully
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|int
name|len
init|=
literal|0
decl_stmt|;
comment|// For the most commmon case, i.e. ascii, numChars = utf8Len
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|utf8Len
argument_list|)
decl_stmt|;
while|while
condition|(
name|len
operator|<
name|utf8Len
condition|)
block|{
name|int
name|cpt
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|b1
init|=
name|bytes
index|[
name|len
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
name|b1
operator|<=
literal|0x7F
condition|)
block|{
name|cpt
operator|=
name|b1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|b1
operator|&
name|B11111
operator|)
operator|==
name|B11110
condition|)
block|{
name|int
name|b2
init|=
name|bytes
index|[
name|len
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|checkB10
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|int
name|b3
init|=
name|bytes
index|[
name|len
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|checkB10
argument_list|(
name|b3
argument_list|)
expr_stmt|;
name|int
name|b4
init|=
name|bytes
index|[
name|len
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|checkB10
argument_list|(
name|b4
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|utf8ToCodePoint
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
name|b3
argument_list|,
name|b4
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|b1
operator|&
name|B1111
operator|)
operator|==
name|B1110
condition|)
block|{
name|int
name|b2
init|=
name|bytes
index|[
name|len
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|checkB10
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|int
name|b3
init|=
name|bytes
index|[
name|len
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|checkB10
argument_list|(
name|b3
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|utf8ToCodePoint
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
name|b3
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|b1
operator|&
name|B111
operator|)
operator|==
name|B110
condition|)
block|{
name|int
name|b2
init|=
name|bytes
index|[
name|len
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
name|checkB10
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|cpt
operator|=
name|utf8ToCodePoint
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid UTF-8 byte "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|b1
argument_list|)
operator|+
literal|" at offset "
operator|+
operator|(
name|len
operator|-
literal|1
operator|)
operator|+
literal|" in length of "
operator|+
name|utf8Len
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isValidCodePoint
argument_list|(
name|cpt
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Illegal Unicode Codepoint "
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|cpt
argument_list|)
operator|+
literal|" in stream."
argument_list|)
throw|;
block|}
name|sb
operator|.
name|appendCodePoint
argument_list|(
name|cpt
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** Parse a float from a byte array. */
DECL|method|readFloat (byte[] bytes, int start)
specifier|public
specifier|static
name|float
name|readFloat
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
name|WritableComparator
operator|.
name|readFloat
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|)
return|;
block|}
comment|/** Parse a double from a byte array. */
DECL|method|readDouble (byte[] bytes, int start)
specifier|public
specifier|static
name|double
name|readDouble
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
name|WritableComparator
operator|.
name|readDouble
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|)
return|;
block|}
comment|/**    * Reads a zero-compressed encoded long from a byte array and returns it.    * @param bytes byte array with decode long    * @param start starting index    * @throws java.io.IOException    * @return deserialized long    */
DECL|method|readVLong (byte[] bytes, int start)
specifier|public
specifier|static
name|long
name|readVLong
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|WritableComparator
operator|.
name|readVLong
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|)
return|;
block|}
comment|/**    * Reads a zero-compressed encoded integer from a byte array and returns it.    * @param bytes byte array with the encoded integer    * @param start start index    * @throws java.io.IOException    * @return deserialized integer    */
DECL|method|readVInt (byte[] bytes, int start)
specifier|public
specifier|static
name|int
name|readVInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|WritableComparator
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|)
return|;
block|}
comment|/**    * Reads a zero-compressed encoded long from a stream and return it.    * @param in input stream    * @throws java.io.IOException    * @return deserialized long    */
DECL|method|readVLong (DataInput in)
specifier|public
specifier|static
name|long
name|readVLong
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|WritableUtils
operator|.
name|readVLong
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**    * Reads a zero-compressed encoded integer from a stream and returns it.    * @param in input stream    * @throws java.io.IOException    * @return deserialized integer    */
DECL|method|readVInt (DataInput in)
specifier|public
specifier|static
name|int
name|readVInt
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**    * Get the encoded length if an integer is stored in a variable-length format    * @return the encoded length    */
DECL|method|getVIntSize (long i)
specifier|public
specifier|static
name|int
name|getVIntSize
parameter_list|(
name|long
name|i
parameter_list|)
block|{
return|return
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|i
argument_list|)
return|;
block|}
comment|/**    * Serializes a long to a binary stream with zero-compressed encoding.    * For {@literal -112<= i<= 127}, only one byte is used with the actual    * value. For other values of i, the first byte value indicates whether the    * long is positive or negative, and the number of bytes that follow.    * If the first byte value v is between -113 and -120, the following long    * is positive, with number of bytes that follow are -(v+112).    * If the first byte value v is between -121 and -128, the following long    * is negative, with number of bytes that follow are -(v+120). Bytes are    * stored in the high-non-zero-byte-first order.    *    * @param stream Binary output stream    * @param i Long to be serialized    * @throws java.io.IOException    */
DECL|method|writeVLong (DataOutput stream, long i)
specifier|public
specifier|static
name|void
name|writeVLong
parameter_list|(
name|DataOutput
name|stream
parameter_list|,
name|long
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVLong
argument_list|(
name|stream
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**    * Serializes an int to a binary stream with zero-compressed encoding.    *    * @param stream Binary output stream    * @param i int to be serialized    * @throws java.io.IOException    */
DECL|method|writeVInt (DataOutput stream, int i)
specifier|public
specifier|static
name|void
name|writeVInt
parameter_list|(
name|DataOutput
name|stream
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|stream
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|/** Lexicographic order of binary data. */
DECL|method|compareBytes (byte[] b1, int s1, int l1, byte[] b2, int s2, int l2)
specifier|public
specifier|static
name|int
name|compareBytes
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|s1
parameter_list|,
name|int
name|l1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|s2
parameter_list|,
name|int
name|l2
parameter_list|)
block|{
return|return
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|b1
argument_list|,
name|s1
argument_list|,
name|l1
argument_list|,
name|b2
argument_list|,
name|s2
argument_list|,
name|l2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

