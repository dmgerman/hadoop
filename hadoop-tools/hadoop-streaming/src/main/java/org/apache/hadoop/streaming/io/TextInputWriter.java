begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|PipeMapRed
import|;
end_import

begin_comment
comment|/**  * InputWriter that writes the client's input as text.  */
end_comment

begin_class
DECL|class|TextInputWriter
specifier|public
class|class
name|TextInputWriter
extends|extends
name|InputWriter
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
block|{
DECL|field|clientOut
specifier|protected
name|DataOutput
name|clientOut
decl_stmt|;
DECL|field|inputSeparator
specifier|private
name|byte
index|[]
name|inputSeparator
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (PipeMapRed pipeMapRed)
specifier|public
name|void
name|initialize
parameter_list|(
name|PipeMapRed
name|pipeMapRed
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|initialize
argument_list|(
name|pipeMapRed
argument_list|)
expr_stmt|;
name|clientOut
operator|=
name|pipeMapRed
operator|.
name|getClientOutput
argument_list|()
expr_stmt|;
name|inputSeparator
operator|=
name|pipeMapRed
operator|.
name|getInputSeparator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeKey (Object key)
specifier|public
name|void
name|writeKey
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|writeUTF8
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|clientOut
operator|.
name|write
argument_list|(
name|inputSeparator
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeValue (Object value)
specifier|public
name|void
name|writeValue
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|writeUTF8
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|clientOut
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
comment|// Write an object to the output stream using UTF-8 encoding
DECL|method|writeUTF8 (Object object)
specifier|protected
name|void
name|writeUTF8
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bval
decl_stmt|;
name|int
name|valSize
decl_stmt|;
if|if
condition|(
name|object
operator|instanceof
name|BytesWritable
condition|)
block|{
name|BytesWritable
name|val
init|=
operator|(
name|BytesWritable
operator|)
name|object
decl_stmt|;
name|bval
operator|=
name|val
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|valSize
operator|=
name|val
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|val
init|=
operator|(
name|Text
operator|)
name|object
decl_stmt|;
name|bval
operator|=
name|val
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|valSize
operator|=
name|val
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|sval
init|=
name|object
operator|.
name|toString
argument_list|()
decl_stmt|;
name|bval
operator|=
name|sval
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|valSize
operator|=
name|bval
operator|.
name|length
expr_stmt|;
block|}
name|clientOut
operator|.
name|write
argument_list|(
name|bval
argument_list|,
literal|0
argument_list|,
name|valSize
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

