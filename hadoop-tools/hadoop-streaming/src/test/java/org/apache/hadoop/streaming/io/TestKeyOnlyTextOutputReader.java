begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming.io
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|PipeMapRed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|PipeMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestKeyOnlyTextOutputReader
specifier|public
class|class
name|TestKeyOnlyTextOutputReader
block|{
annotation|@
name|Test
DECL|method|testKeyOnlyTextOutputReader ()
specifier|public
name|void
name|testKeyOnlyTextOutputReader
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|text
init|=
literal|"key,value\nkey2,value2\nnocomma\n"
decl_stmt|;
name|PipeMapRed
name|pipeMapRed
init|=
operator|new
name|MyPipeMapRed
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|KeyOnlyTextOutputReader
name|outputReader
init|=
operator|new
name|KeyOnlyTextOutputReader
argument_list|()
decl_stmt|;
name|outputReader
operator|.
name|initialize
argument_list|(
name|pipeMapRed
argument_list|)
expr_stmt|;
name|outputReader
operator|.
name|readKeyValue
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key,value"
argument_list|)
argument_list|,
name|outputReader
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
name|outputReader
operator|.
name|readKeyValue
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"key2,value2"
argument_list|)
argument_list|,
name|outputReader
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
name|outputReader
operator|.
name|readKeyValue
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"nocomma"
argument_list|)
argument_list|,
name|outputReader
operator|.
name|getCurrentKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|outputReader
operator|.
name|readKeyValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|MyPipeMapRed
specifier|private
class|class
name|MyPipeMapRed
extends|extends
name|PipeMapper
block|{
DECL|field|clientIn
specifier|private
name|DataInput
name|clientIn
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|method|MyPipeMapRed (String text)
specifier|public
name|MyPipeMapRed
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|clientIn
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getClientInput ()
specifier|public
name|DataInput
name|getClientInput
parameter_list|()
block|{
return|return
name|clientIn
return|;
block|}
annotation|@
name|Override
DECL|method|getConfiguration ()
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
block|}
end_class

end_unit

