begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|JarFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_comment
comment|/**  * Test Hadoop StreamUtil successfully returns a class loaded by the job conf  * but has no package name.  */
end_comment

begin_class
DECL|class|TestClassWithNoPackage
specifier|public
class|class
name|TestClassWithNoPackage
block|{
annotation|@
name|Test
DECL|method|testGoodClassOrNull ()
specifier|public
name|void
name|testGoodClassOrNull
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|NAME
init|=
literal|"ClassWithNoPackage"
decl_stmt|;
name|ClassLoader
name|cl
init|=
name|TestClassWithNoPackage
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
name|String
name|JAR
init|=
name|JarFinder
operator|.
name|getJar
argument_list|(
name|cl
operator|.
name|loadClass
argument_list|(
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add testjob jar file to classpath.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClassLoader
argument_list|(
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
operator|new
name|URL
argument_list|(
literal|"file"
argument_list|,
literal|null
argument_list|,
name|JAR
argument_list|)
block|}
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get class with no package name.
name|String
name|defaultPackage
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Class
name|c
init|=
name|StreamUtil
operator|.
name|goodClassOrNull
argument_list|(
name|conf
argument_list|,
name|NAME
argument_list|,
name|defaultPackage
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Class "
operator|+
name|NAME
operator|+
literal|" not found!"
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[]args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestClassWithNoPackage
argument_list|()
operator|.
name|testGoodClassOrNull
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

