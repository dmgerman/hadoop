begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * This class tests StreamXmlRecordReader  * The test creates an XML file, uses StreamXmlRecordReader and compares  * the expected output against the generated output  */
end_comment

begin_class
DECL|class|TestStreamXmlRecordReader
specifier|public
class|class
name|TestStreamXmlRecordReader
extends|extends
name|TestStreaming
block|{
DECL|method|TestStreamXmlRecordReader ()
specifier|public
name|TestStreamXmlRecordReader
parameter_list|()
throws|throws
name|IOException
block|{
name|INPUT_FILE
operator|=
operator|new
name|File
argument_list|(
literal|"target/input.xml"
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"<xmltag>\t\nroses.are.red\t\nviolets.are.blue\t\n"
operator|+
literal|"bunnies.are.pink\t\n</xmltag>\t\n"
expr_stmt|;
name|map
operator|=
name|CAT
expr_stmt|;
name|reduce
operator|=
literal|"NONE"
expr_stmt|;
name|outputExpect
operator|=
name|input
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createInput ()
specifier|protected
name|void
name|createInput
parameter_list|()
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|INPUT_FILE
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dummyXmlStartTag
init|=
literal|"<PATTERN>\n"
decl_stmt|;
name|String
name|dummyXmlEndTag
init|=
literal|"</PATTERN>\n"
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|dummyXmlStartTag
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|dummyXmlEndTag
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|genArgs ()
specifier|protected
name|String
index|[]
name|genArgs
parameter_list|()
block|{
name|args
operator|.
name|add
argument_list|(
literal|"-inputreader"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"StreamXmlRecordReader,begin=<xmltag>,end=</xmltag>"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"mapreduce.job.maps=1"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|genArgs
argument_list|()
return|;
block|}
block|}
end_class

end_unit

