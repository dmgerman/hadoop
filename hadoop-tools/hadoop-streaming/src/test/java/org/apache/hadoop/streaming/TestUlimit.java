begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|MiniMRCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MapReduceTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This tests the setting of memory limit for streaming processes.  * This will launch a streaming app which will allocate 10MB memory.  * First, program is launched with sufficient memory. And test expects  * it to succeed. Then program is launched with insufficient memory and   * is expected to be a failure.    */
end_comment

begin_class
DECL|class|TestUlimit
specifier|public
class|class
name|TestUlimit
block|{
DECL|field|input
name|String
name|input
init|=
literal|"the dummy input"
decl_stmt|;
DECL|field|inputPath
name|Path
name|inputPath
init|=
operator|new
name|Path
argument_list|(
literal|"target/testing/in"
argument_list|)
decl_stmt|;
DECL|field|outputPath
name|Path
name|outputPath
init|=
operator|new
name|Path
argument_list|(
literal|"target/testing/out"
argument_list|)
decl_stmt|;
DECL|field|map
name|String
name|map
init|=
literal|null
decl_stmt|;
DECL|field|dfs
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|mr
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
DECL|field|SET_MEMORY_LIMIT
specifier|private
specifier|static
name|String
name|SET_MEMORY_LIMIT
init|=
literal|"786432"
decl_stmt|;
comment|// 768MB
DECL|method|genArgs (String memLimit)
name|String
index|[]
name|genArgs
parameter_list|(
name|String
name|memLimit
parameter_list|)
block|{
name|String
name|strJobtracker
init|=
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
operator|+
literal|"=localhost:"
operator|+
name|mr
operator|.
name|createJobConf
argument_list|()
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|)
decl_stmt|;
name|String
name|strNamenode
init|=
literal|"fs.default.name="
operator|+
name|mr
operator|.
name|createJobConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"fs.default.name"
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
literal|"-input"
block|,
name|inputPath
operator|.
name|toString
argument_list|()
block|,
literal|"-output"
block|,
name|outputPath
operator|.
name|toString
argument_list|()
block|,
literal|"-mapper"
block|,
name|map
block|,
literal|"-reducer"
block|,
literal|"org.apache.hadoop.mapred.lib.IdentityReducer"
block|,
literal|"-numReduceTasks"
block|,
literal|"0"
block|,
literal|"-jobconf"
block|,
name|MRJobConfig
operator|.
name|NUM_MAPS
operator|+
literal|"=1"
block|,
literal|"-jobconf"
block|,
name|JobConf
operator|.
name|MAPRED_MAP_TASK_ULIMIT
operator|+
literal|"="
operator|+
name|memLimit
block|,
literal|"-jobconf"
block|,
name|strNamenode
block|,
literal|"-jobconf"
block|,
name|strJobtracker
block|,
literal|"-jobconf"
block|,
literal|"stream.tmpdir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
block|,
literal|"-jobconf"
block|,
literal|"mapred.jar="
operator|+
name|TestStreaming
operator|.
name|STREAMING_JAR
block|,
literal|"-jobconf"
block|,
literal|"mapreduce.framework.name=yarn"
block|}
return|;
block|}
comment|/**    * This tests the setting of memory limit for streaming processes.    * This will launch a streaming app which will allocate 10MB memory.    * First, program is launched with sufficient memory. And test expects    * it to succeed. Then program is launched with insufficient memory and     * is expected to be a failure.      */
annotation|@
name|Test
DECL|method|testCommandLine ()
specifier|public
name|void
name|testCommandLine
parameter_list|()
block|{
if|if
condition|(
name|UtilTest
operator|.
name|isCygwin
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
specifier|final
name|int
name|numSlaves
init|=
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
name|numSlaves
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
name|numSlaves
argument_list|,
name|fs
operator|.
name|getUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeInputFile
argument_list|(
name|fs
argument_list|,
name|inputPath
argument_list|)
expr_stmt|;
name|map
operator|=
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|UlimitApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|runProgram
argument_list|(
name|SET_MEMORY_LIMIT
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outputPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"output not cleaned up"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|outputPath
argument_list|)
argument_list|)
expr_stmt|;
name|mr
operator|.
name|waitUntilIdle
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|mr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dfs
operator|!=
literal|null
condition|)
block|{
name|dfs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeInputFile (FileSystem fs, Path dir)
specifier|private
name|void
name|writeInputFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"part0"
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Runs the streaming program. and asserts the result of the program.    * @param memLimit memory limit to set for mapred child.    * @param result Expected result    * @throws IOException    */
DECL|method|runProgram (String memLimit)
specifier|private
name|void
name|runProgram
parameter_list|(
name|String
name|memLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|mayExit
init|=
literal|false
decl_stmt|;
name|StreamJob
name|job
init|=
operator|new
name|StreamJob
argument_list|(
name|genArgs
argument_list|(
name|memLimit
argument_list|)
argument_list|,
name|mayExit
argument_list|)
decl_stmt|;
name|job
operator|.
name|go
argument_list|()
expr_stmt|;
name|String
name|output
init|=
name|MapReduceTestUtil
operator|.
name|readOutput
argument_list|(
name|outputPath
argument_list|,
name|mr
operator|.
name|createJobConf
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"output is wrong"
argument_list|,
name|SET_MEMORY_LIMIT
argument_list|,
name|output
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[]args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestUlimit
argument_list|()
operator|.
name|testCommandLine
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

