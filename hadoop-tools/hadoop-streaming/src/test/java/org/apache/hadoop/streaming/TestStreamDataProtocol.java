begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|lib
operator|.
name|KeyFieldBasedPartitioner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class tests hadoopStreaming in MapReduce local mode.  */
end_comment

begin_class
DECL|class|TestStreamDataProtocol
specifier|public
class|class
name|TestStreamDataProtocol
block|{
comment|// "map" command: grep -E (red|green|blue)
comment|// reduce command: uniq
DECL|field|INPUT_FILE
specifier|protected
name|File
name|INPUT_FILE
init|=
operator|new
name|File
argument_list|(
literal|"input_for_data_protocol_test.txt"
argument_list|)
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|protected
name|File
name|OUTPUT_DIR
init|=
operator|new
name|File
argument_list|(
literal|"out_for_data_protocol_test"
argument_list|)
decl_stmt|;
DECL|field|input
specifier|protected
name|String
name|input
init|=
literal|"roses.smell.good\nroses.look.good\nroses.need.care\nroses.attract.bees\nroses.are.red\nroses.are.not.blue\nbunnies.are.pink\nbunnies.run.fast\nbunnies.have.short.tail\nbunnies.have.long.ears\n"
decl_stmt|;
comment|// map behaves like "/usr/bin/cat";
DECL|field|map
specifier|protected
name|String
name|map
init|=
name|UtilTest
operator|.
name|makeJavaCommand
argument_list|(
name|TrApp
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"."
block|,
literal|"."
block|}
argument_list|)
decl_stmt|;
comment|// reduce counts the number of values for each key
DECL|field|reduce
specifier|protected
name|String
name|reduce
init|=
literal|"org.apache.hadoop.streaming.ValueCountReduce"
decl_stmt|;
DECL|field|outputExpect
specifier|protected
name|String
name|outputExpect
init|=
literal|"bunnies.are\t1\nbunnies.have\t2\nbunnies.run\t1\nroses.are\t2\nroses.attract\t1\nroses.look\t1\nroses.need\t1\nroses.smell\t1\n"
decl_stmt|;
DECL|field|job
specifier|private
name|StreamJob
name|job
decl_stmt|;
DECL|method|TestStreamDataProtocol ()
specifier|public
name|TestStreamDataProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|UtilTest
name|utilTest
init|=
operator|new
name|UtilTest
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|utilTest
operator|.
name|checkUserDir
argument_list|()
expr_stmt|;
name|utilTest
operator|.
name|redirectIfAntJunit
argument_list|()
expr_stmt|;
block|}
DECL|method|createInput ()
specifier|protected
name|void
name|createInput
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputStream
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|INPUT_FILE
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|genArgs ()
specifier|protected
name|String
index|[]
name|genArgs
parameter_list|()
block|{
return|return
operator|new
name|String
index|[]
block|{
literal|"-input"
block|,
name|INPUT_FILE
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-output"
block|,
name|OUTPUT_DIR
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"-mapper"
block|,
name|map
block|,
literal|"-reducer"
block|,
name|reduce
block|,
literal|"-partitioner"
block|,
name|KeyFieldBasedPartitioner
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
block|,
literal|"-jobconf"
block|,
literal|"stream.map.output.field.separator=."
block|,
literal|"-jobconf"
block|,
literal|"stream.num.map.output.key.fields=2"
block|,
literal|"-jobconf"
block|,
literal|"mapreduce.map.output.key.field.separator=."
block|,
literal|"-jobconf"
block|,
literal|"num.key.fields.for.partition=1"
block|,
literal|"-jobconf"
block|,
literal|"mapreduce.job.reduces=2"
block|,
literal|"-jobconf"
block|,
literal|"mapreduce.task.files.preserve.failedtasks=true"
block|,
literal|"-jobconf"
block|,
literal|"stream.tmpdir="
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
block|}
return|;
block|}
annotation|@
name|Test
DECL|method|testCommandLine ()
specifier|public
name|void
name|testCommandLine
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|OUTPUT_DIR
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
try|try
block|{
name|createInput
argument_list|()
expr_stmt|;
name|boolean
name|mayExit
init|=
literal|false
decl_stmt|;
comment|// During tests, the default Configuration will use a local mapred
comment|// So don't specify -config or -cluster
name|job
operator|=
operator|new
name|StreamJob
argument_list|(
name|genArgs
argument_list|()
argument_list|,
name|mayExit
argument_list|)
expr_stmt|;
name|job
operator|.
name|go
argument_list|()
expr_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
argument_list|,
literal|"part-00000"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
name|String
name|output
init|=
name|StreamUtil
operator|.
name|slurp
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
name|outFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"outEx1="
operator|+
name|outputExpect
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  out1="
operator|+
name|output
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  equals="
operator|+
name|outputExpect
operator|.
name|compareTo
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outputExpect
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|INPUT_FILE
operator|.
name|delete
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|OUTPUT_DIR
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main (String[]args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|TestStreamDataProtocol
argument_list|()
operator|.
name|testCommandLine
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

