begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming.mapreduce
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|FileInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|FileOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests StreamXmlRecordReader The test creates an XML file, uses  * StreamXmlRecordReader and compares the expected output against the generated  * output  */
end_comment

begin_class
DECL|class|TestStreamXmlRecordReader
specifier|public
class|class
name|TestStreamXmlRecordReader
block|{
DECL|field|INPUT_FILE
specifier|private
name|File
name|INPUT_FILE
decl_stmt|;
DECL|field|input
specifier|private
name|String
name|input
decl_stmt|;
DECL|field|outputExpect
specifier|private
name|String
name|outputExpect
decl_stmt|;
DECL|field|OUTPUT_DIR
name|Path
name|OUTPUT_DIR
decl_stmt|;
DECL|field|fs
name|FileSystem
name|fs
decl_stmt|;
DECL|method|TestStreamXmlRecordReader ()
specifier|public
name|TestStreamXmlRecordReader
parameter_list|()
throws|throws
name|IOException
block|{
name|INPUT_FILE
operator|=
operator|new
name|File
argument_list|(
literal|"target/input.xml"
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"<xmltag>\t\nroses.are.red\t\nviolets.are.blue\t\n"
operator|+
literal|"bunnies.are.pink\t\n</xmltag>\t\n"
expr_stmt|;
name|outputExpect
operator|=
name|input
expr_stmt|;
block|}
DECL|method|assertOutput (String expectedOutput, String output)
specifier|protected
name|void
name|assertOutput
parameter_list|(
name|String
name|expectedOutput
parameter_list|,
name|String
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|words
init|=
name|expectedOutput
operator|.
name|split
argument_list|(
literal|"\t\n"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedWords
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|words
argument_list|)
argument_list|)
decl_stmt|;
name|words
operator|=
name|output
operator|.
name|split
argument_list|(
literal|"\t\n"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|returnedWords
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|words
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|returnedWords
operator|.
name|containsAll
argument_list|(
name|expectedWords
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOutput ()
specifier|protected
name|void
name|checkOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|OUTPUT_DIR
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|outPath
init|=
operator|new
name|Path
argument_list|(
name|outFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
literal|"part-r-00000"
argument_list|)
decl_stmt|;
name|String
name|output
init|=
name|slurpHadoop
argument_list|(
name|outPath
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|outPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|outputExpect
operator|=
literal|"<PATTERN>\n"
operator|+
name|outputExpect
operator|+
literal|"</PATTERN>"
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"outEx1="
operator|+
name|outputExpect
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  out1="
operator|+
name|output
argument_list|)
expr_stmt|;
name|assertOutput
argument_list|(
name|outputExpect
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
DECL|method|slurpHadoop (Path p, FileSystem fs)
specifier|private
name|String
name|slurpHadoop
parameter_list|(
name|Path
name|p
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|fs
operator|.
name|getFileStatus
argument_list|(
name|p
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|contents
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|.
name|readFully
argument_list|(
name|in
operator|.
name|getPos
argument_list|()
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|contents
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|contents
return|;
block|}
annotation|@
name|Before
DECL|method|createInput ()
specifier|public
name|void
name|createInput
parameter_list|()
throws|throws
name|IOException
block|{
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|INPUT_FILE
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|dummyXmlStartTag
init|=
literal|"<PATTERN>\n"
decl_stmt|;
name|String
name|dummyXmlEndTag
init|=
literal|"</PATTERN>\n"
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|dummyXmlStartTag
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|dummyXmlEndTag
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStreamXmlRecordReader ()
specifier|public
name|void
name|testStreamXmlRecordReader
parameter_list|()
throws|throws
name|Exception
block|{
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|job
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|TestStreamXmlRecordReader
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|Mapper
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"stream.recordreader.class"
argument_list|,
literal|"org.apache.hadoop.streaming.mapreduce.StreamXmlRecordReader"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"stream.recordreader.begin"
argument_list|,
literal|"<PATTERN>"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"stream.recordreader.end"
argument_list|,
literal|"</PATTERN>"
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|StreamInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|Text
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileInputFormat
operator|.
name|addInputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
literal|"target/input.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|OUTPUT_DIR
operator|=
operator|new
name|Path
argument_list|(
literal|"target/output"
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|OUTPUT_DIR
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|OUTPUT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|FileOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
name|OUTPUT_DIR
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|checkOutput
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
name|OUTPUT_DIR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

