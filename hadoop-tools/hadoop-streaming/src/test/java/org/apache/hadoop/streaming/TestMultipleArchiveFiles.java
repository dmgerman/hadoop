begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.streaming
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|streaming
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * This class tests cacheArchive option of streaming  * The test case creates 2 archive files, ships it with hadoop  * streaming and compares the output with expected output  */
end_comment

begin_class
DECL|class|TestMultipleArchiveFiles
specifier|public
class|class
name|TestMultipleArchiveFiles
extends|extends
name|TestStreaming
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMultipleArchiveFiles
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|job
specifier|private
name|StreamJob
name|job
decl_stmt|;
DECL|field|INPUT_DIR
specifier|private
name|String
name|INPUT_DIR
init|=
literal|"multiple-archive-files/"
decl_stmt|;
DECL|field|INPUT_FILE
specifier|private
name|String
name|INPUT_FILE
init|=
name|INPUT_DIR
operator|+
literal|"input.txt"
decl_stmt|;
DECL|field|CACHE_ARCHIVE_1
specifier|private
name|String
name|CACHE_ARCHIVE_1
init|=
name|INPUT_DIR
operator|+
literal|"cacheArchive1.zip"
decl_stmt|;
DECL|field|CACHE_FILE_1
specifier|private
name|File
name|CACHE_FILE_1
init|=
literal|null
decl_stmt|;
DECL|field|CACHE_ARCHIVE_2
specifier|private
name|String
name|CACHE_ARCHIVE_2
init|=
name|INPUT_DIR
operator|+
literal|"cacheArchive2.zip"
decl_stmt|;
DECL|field|CACHE_FILE_2
specifier|private
name|File
name|CACHE_FILE_2
init|=
literal|null
decl_stmt|;
DECL|field|expectedOutput
specifier|private
name|String
name|expectedOutput
init|=
literal|null
decl_stmt|;
DECL|field|OUTPUT_DIR
specifier|private
name|String
name|OUTPUT_DIR
init|=
literal|"out"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|dfs
specifier|private
name|MiniDFSCluster
name|dfs
init|=
literal|null
decl_stmt|;
DECL|field|mr
specifier|private
name|MiniMRCluster
name|mr
init|=
literal|null
decl_stmt|;
DECL|field|fileSys
specifier|private
name|FileSystem
name|fileSys
init|=
literal|null
decl_stmt|;
DECL|field|strJobTracker
specifier|private
name|String
name|strJobTracker
init|=
literal|null
decl_stmt|;
DECL|field|strNamenode
specifier|private
name|String
name|strNamenode
init|=
literal|null
decl_stmt|;
DECL|field|namenode
specifier|private
name|String
name|namenode
init|=
literal|null
decl_stmt|;
DECL|method|TestMultipleArchiveFiles ()
specifier|public
name|TestMultipleArchiveFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|CACHE_FILE_1
operator|=
operator|new
name|File
argument_list|(
literal|"cacheArchive1"
argument_list|)
expr_stmt|;
name|CACHE_FILE_2
operator|=
operator|new
name|File
argument_list|(
literal|"cacheArchive2"
argument_list|)
expr_stmt|;
name|input
operator|=
literal|"HADOOP"
expr_stmt|;
name|expectedOutput
operator|=
literal|"HADOOP\t\nHADOOP\t\n"
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|dfs
operator|=
operator|new
name|MiniDFSCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fileSys
operator|=
name|dfs
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|namenode
operator|=
name|fileSys
operator|.
name|getUri
argument_list|()
operator|.
name|getAuthority
argument_list|()
expr_stmt|;
name|mr
operator|=
operator|new
name|MiniMRCluster
argument_list|(
literal|1
argument_list|,
name|namenode
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|strJobTracker
operator|=
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
operator|+
literal|"=localhost:"
operator|+
name|mr
operator|.
name|createJobConf
argument_list|()
operator|.
name|get
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|)
expr_stmt|;
name|strNamenode
operator|=
literal|"fs.default.name="
operator|+
name|mr
operator|.
name|createJobConf
argument_list|()
operator|.
name|get
argument_list|(
literal|"fs.default.name"
argument_list|)
expr_stmt|;
name|map
operator|=
literal|"xargs cat"
expr_stmt|;
name|reduce
operator|=
literal|"cat"
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setInputOutput ()
specifier|protected
name|void
name|setInputOutput
parameter_list|()
block|{
name|inputFile
operator|=
name|INPUT_FILE
expr_stmt|;
name|outDir
operator|=
name|OUTPUT_DIR
expr_stmt|;
block|}
DECL|method|createInput ()
specifier|protected
name|void
name|createInput
parameter_list|()
throws|throws
name|IOException
block|{
name|fileSys
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|INPUT_DIR
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DataOutputStream
name|dos
init|=
name|fileSys
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|INPUT_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|inputFileString
init|=
literal|"symlink1/cacheArchive1\nsymlink2/cacheArchive2"
decl_stmt|;
name|dos
operator|.
name|write
argument_list|(
name|inputFileString
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataOutputStream
name|out
init|=
name|fileSys
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|CACHE_ARCHIVE_1
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|zos
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|ZipEntry
name|ze
init|=
operator|new
name|ZipEntry
argument_list|(
name|CACHE_FILE_1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|zos
operator|.
name|write
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
name|out
operator|=
name|fileSys
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|CACHE_ARCHIVE_2
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|zos
operator|=
operator|new
name|ZipOutputStream
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ze
operator|=
operator|new
name|ZipEntry
argument_list|(
name|CACHE_FILE_2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|zos
operator|.
name|putNextEntry
argument_list|(
name|ze
argument_list|)
expr_stmt|;
name|zos
operator|.
name|write
argument_list|(
name|input
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|zos
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
name|zos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|genArgs ()
specifier|protected
name|String
index|[]
name|genArgs
parameter_list|()
block|{
name|String
name|workDir
init|=
name|fileSys
operator|.
name|getWorkingDirectory
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
decl_stmt|;
name|String
name|cache1
init|=
name|workDir
operator|+
name|CACHE_ARCHIVE_1
operator|+
literal|"#symlink1"
decl_stmt|;
name|String
name|cache2
init|=
name|workDir
operator|+
name|CACHE_ARCHIVE_2
operator|+
literal|"#symlink2"
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"mapreduce.job.reduces=1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-cacheArchive"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|cache1
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-cacheArchive"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|cache2
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|strNamenode
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|strJobTracker
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"mapred.jar="
operator|+
name|STREAMING_JAR
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"-jobconf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"mapreduce.framework.name=yarn"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|genArgs
argument_list|()
return|;
block|}
DECL|method|checkOutput ()
specifier|protected
name|void
name|checkOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|Path
index|[]
name|fileList
init|=
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|fileSys
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|OUTPUT_DIR
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding output from file: "
operator|+
name|fileList
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
name|StreamUtil
operator|.
name|slurpHadoop
argument_list|(
name|fileList
index|[
name|i
index|]
argument_list|,
name|fileSys
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertOutput
argument_list|(
name|expectedOutput
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

