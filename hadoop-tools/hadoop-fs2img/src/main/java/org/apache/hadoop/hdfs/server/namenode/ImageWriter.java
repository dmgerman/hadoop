begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|DigestOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|CodedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|BlockAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageFormatProtobuf
operator|.
name|SectionName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|CacheManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FileSummary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|FilesUnderConstructionSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeDirectorySection
operator|.
name|DirEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
operator|.
name|INode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|INodeSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|NameSystemSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SecretManagerSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|SnapshotDiffSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FsImageProto
operator|.
name|StringTableSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|NamespaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressionCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|compress
operator|.
name|CompressorStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSImageUtil
operator|.
name|MAGIC_HEADER
import|;
end_import

begin_comment
comment|/**  * Utility crawling an existing hierarchical FileSystem and emitting  * a valid FSImage/NN storage.  */
end_comment

begin_comment
comment|// TODO: generalize to types beyond FileRegion
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|ImageWriter
specifier|public
class|class
name|ImageWriter
implements|implements
name|Closeable
block|{
DECL|field|ONDISK_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|ONDISK_VERSION
init|=
literal|1
decl_stmt|;
DECL|field|LAYOUT_VERSION
specifier|private
specifier|static
specifier|final
name|int
name|LAYOUT_VERSION
init|=
name|NameNodeLayoutVersion
operator|.
name|CURRENT_LAYOUT_VERSION
decl_stmt|;
DECL|field|outdir
specifier|private
specifier|final
name|Path
name|outdir
decl_stmt|;
DECL|field|outfs
specifier|private
specifier|final
name|FileSystem
name|outfs
decl_stmt|;
DECL|field|dirsTmp
specifier|private
specifier|final
name|File
name|dirsTmp
decl_stmt|;
DECL|field|dirs
specifier|private
specifier|final
name|OutputStream
name|dirs
decl_stmt|;
DECL|field|inodesTmp
specifier|private
specifier|final
name|File
name|inodesTmp
decl_stmt|;
DECL|field|inodes
specifier|private
specifier|final
name|OutputStream
name|inodes
decl_stmt|;
DECL|field|digest
specifier|private
specifier|final
name|MessageDigest
name|digest
decl_stmt|;
DECL|field|compress
specifier|private
specifier|final
name|FSImageCompression
name|compress
decl_stmt|;
DECL|field|startBlock
specifier|private
specifier|final
name|long
name|startBlock
decl_stmt|;
DECL|field|startInode
specifier|private
specifier|final
name|long
name|startInode
decl_stmt|;
DECL|field|ugis
specifier|private
specifier|final
name|UGIResolver
name|ugis
decl_stmt|;
DECL|field|blocks
specifier|private
specifier|final
name|BlockAliasMap
operator|.
name|Writer
argument_list|<
name|FileRegion
argument_list|>
name|blocks
decl_stmt|;
DECL|field|blockIds
specifier|private
specifier|final
name|BlockResolver
name|blockIds
decl_stmt|;
DECL|field|dircache
specifier|private
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|DirEntry
operator|.
name|Builder
argument_list|>
name|dircache
decl_stmt|;
DECL|field|raw
specifier|private
specifier|final
name|TrackedOutputStream
argument_list|<
name|DigestOutputStream
argument_list|>
name|raw
decl_stmt|;
DECL|field|closed
specifier|private
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|field|curSec
specifier|private
name|long
name|curSec
decl_stmt|;
DECL|field|curBlock
specifier|private
name|long
name|curBlock
decl_stmt|;
DECL|field|curInode
specifier|private
specifier|final
name|AtomicLong
name|curInode
decl_stmt|;
DECL|field|summary
specifier|private
specifier|final
name|FileSummary
operator|.
name|Builder
name|summary
init|=
name|FileSummary
operator|.
name|newBuilder
argument_list|()
operator|.
name|setOndiskVersion
argument_list|(
name|ONDISK_VERSION
argument_list|)
operator|.
name|setLayoutVersion
argument_list|(
name|LAYOUT_VERSION
argument_list|)
decl_stmt|;
DECL|field|blockPoolID
specifier|private
specifier|final
name|String
name|blockPoolID
decl_stmt|;
DECL|method|defaults ()
specifier|public
specifier|static
name|Options
name|defaults
parameter_list|()
block|{
return|return
operator|new
name|Options
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|ImageWriter (Options opts)
specifier|public
name|ImageWriter
parameter_list|(
name|Options
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|OutputStream
name|out
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|opts
operator|.
name|outStream
condition|)
block|{
name|FileSystem
name|fs
init|=
name|opts
operator|.
name|outdir
operator|.
name|getFileSystem
argument_list|(
name|opts
operator|.
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|outfs
operator|=
operator|(
name|fs
operator|instanceof
name|LocalFileSystem
operator|)
condition|?
operator|(
operator|(
name|LocalFileSystem
operator|)
name|fs
operator|)
operator|.
name|getRaw
argument_list|()
else|:
name|fs
expr_stmt|;
name|Path
name|tmp
init|=
name|opts
operator|.
name|outdir
decl_stmt|;
if|if
condition|(
operator|!
name|outfs
operator|.
name|mkdirs
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to create output dir: "
operator|+
name|tmp
argument_list|)
throw|;
block|}
try|try
init|(
name|NNStorage
name|stor
init|=
operator|new
name|NNStorage
argument_list|(
name|opts
operator|.
name|getConf
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tmp
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|tmp
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|NamespaceInfo
name|info
init|=
name|NNStorage
operator|.
name|newNamespaceInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getLayoutVersion
argument_list|()
operator|!=
name|LAYOUT_VERSION
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Incompatible layout "
operator|+
name|info
operator|.
name|getLayoutVersion
argument_list|()
operator|+
literal|" (expected "
operator|+
name|LAYOUT_VERSION
operator|+
literal|")"
argument_list|)
throw|;
block|}
comment|// set the cluster id, if given
if|if
condition|(
name|opts
operator|.
name|clusterID
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|info
operator|.
name|setClusterID
argument_list|(
name|opts
operator|.
name|clusterID
argument_list|)
expr_stmt|;
block|}
comment|// if block pool id is given
if|if
condition|(
name|opts
operator|.
name|blockPoolID
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|info
operator|.
name|setBlockPoolID
argument_list|(
name|opts
operator|.
name|blockPoolID
argument_list|)
expr_stmt|;
block|}
name|stor
operator|.
name|format
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|blockPoolID
operator|=
name|info
operator|.
name|getBlockPoolID
argument_list|()
expr_stmt|;
block|}
name|outdir
operator|=
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
literal|"current"
argument_list|)
expr_stmt|;
name|out
operator|=
name|outfs
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|outdir
argument_list|,
literal|"fsimage_0000000000000000000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outdir
operator|=
literal|null
expr_stmt|;
name|outfs
operator|=
literal|null
expr_stmt|;
name|out
operator|=
name|opts
operator|.
name|outStream
expr_stmt|;
name|blockPoolID
operator|=
literal|""
expr_stmt|;
block|}
name|digest
operator|=
name|MD5Hash
operator|.
name|getDigester
argument_list|()
expr_stmt|;
name|raw
operator|=
operator|new
name|TrackedOutputStream
argument_list|<>
argument_list|(
operator|new
name|DigestOutputStream
argument_list|(
operator|new
name|BufferedOutputStream
argument_list|(
name|out
argument_list|)
argument_list|,
name|digest
argument_list|)
argument_list|)
expr_stmt|;
name|compress
operator|=
name|opts
operator|.
name|compress
expr_stmt|;
name|CompressionCodec
name|codec
init|=
name|compress
operator|.
name|getImageCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
name|summary
operator|.
name|setCodec
argument_list|(
name|codec
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startBlock
operator|=
name|opts
operator|.
name|startBlock
expr_stmt|;
name|curBlock
operator|=
name|startBlock
expr_stmt|;
name|startInode
operator|=
name|opts
operator|.
name|startInode
expr_stmt|;
name|curInode
operator|=
operator|new
name|AtomicLong
argument_list|(
name|startInode
argument_list|)
expr_stmt|;
name|dircache
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|DirEntryCache
argument_list|(
name|opts
operator|.
name|maxdircache
argument_list|)
argument_list|)
expr_stmt|;
name|ugis
operator|=
literal|null
operator|==
name|opts
operator|.
name|ugis
condition|?
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|opts
operator|.
name|ugisClass
argument_list|,
name|opts
operator|.
name|getConf
argument_list|()
argument_list|)
else|:
name|opts
operator|.
name|ugis
expr_stmt|;
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|fmt
init|=
literal|null
operator|==
name|opts
operator|.
name|blocks
condition|?
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|opts
operator|.
name|aliasMap
argument_list|,
name|opts
operator|.
name|getConf
argument_list|()
argument_list|)
else|:
name|opts
operator|.
name|blocks
decl_stmt|;
name|blocks
operator|=
name|fmt
operator|.
name|getWriter
argument_list|(
literal|null
argument_list|,
name|blockPoolID
argument_list|)
expr_stmt|;
name|blockIds
operator|=
literal|null
operator|==
name|opts
operator|.
name|blockIds
condition|?
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|opts
operator|.
name|blockIdsClass
argument_list|,
name|opts
operator|.
name|getConf
argument_list|()
argument_list|)
else|:
name|opts
operator|.
name|blockIds
expr_stmt|;
comment|// create directory and inode sections as side-files.
comment|// The details are written to files to avoid keeping them in memory.
name|FileOutputStream
name|dirsTmpStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dirsTmp
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"fsimg_dir"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dirsTmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|dirsTmpStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|dirsTmp
argument_list|)
expr_stmt|;
name|dirs
operator|=
name|beginSection
argument_list|(
name|dirsTmpStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|raw
argument_list|,
name|dirsTmpStream
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
try|try
block|{
name|inodesTmp
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"fsimg_inode"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|inodesTmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|inodes
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|inodesTmp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|raw
argument_list|,
name|dirsTmpStream
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|raw
operator|.
name|write
argument_list|(
name|MAGIC_HEADER
argument_list|)
expr_stmt|;
name|curSec
operator|=
name|raw
operator|.
name|pos
expr_stmt|;
assert|assert
name|raw
operator|.
name|pos
operator|==
name|MAGIC_HEADER
operator|.
name|length
assert|;
block|}
DECL|method|accept (TreePath e)
specifier|public
name|void
name|accept
parameter_list|(
name|TreePath
name|e
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|e
operator|.
name|getParentId
argument_list|()
operator|<
name|curInode
operator|.
name|get
argument_list|()
assert|;
comment|// allocate ID
name|long
name|id
init|=
name|curInode
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|e
operator|.
name|accept
argument_list|(
name|id
argument_list|)
expr_stmt|;
assert|assert
name|e
operator|.
name|getId
argument_list|()
operator|<
name|curInode
operator|.
name|get
argument_list|()
assert|;
name|INode
name|n
init|=
name|e
operator|.
name|toINode
argument_list|(
name|ugis
argument_list|,
name|blockIds
argument_list|,
name|blocks
argument_list|)
decl_stmt|;
name|writeInode
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getParentId
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// add DirEntry to map, which may page out entries
name|DirEntry
operator|.
name|Builder
name|de
init|=
name|DirEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setParent
argument_list|(
name|e
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|.
name|addChildren
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|dircache
operator|.
name|put
argument_list|(
name|e
operator|.
name|getParentId
argument_list|()
argument_list|,
name|de
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|class|DirEntryCache
class|class
name|DirEntryCache
extends|extends
name|LinkedHashMap
argument_list|<
name|Long
argument_list|,
name|DirEntry
operator|.
name|Builder
argument_list|>
block|{
comment|// should cache path to root, not evict LRCached
DECL|field|nEntries
specifier|private
specifier|final
name|int
name|nEntries
decl_stmt|;
DECL|method|DirEntryCache (int nEntries)
name|DirEntryCache
parameter_list|(
name|int
name|nEntries
parameter_list|)
block|{
name|this
operator|.
name|nEntries
operator|=
name|nEntries
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|put (Long p, DirEntry.Builder b)
specifier|public
name|DirEntry
operator|.
name|Builder
name|put
parameter_list|(
name|Long
name|p
parameter_list|,
name|DirEntry
operator|.
name|Builder
name|b
parameter_list|)
block|{
name|DirEntry
operator|.
name|Builder
name|e
init|=
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|e
condition|)
block|{
return|return
name|super
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|// merge
name|e
operator|.
name|addAllChildren
argument_list|(
name|b
operator|.
name|getChildrenList
argument_list|()
argument_list|)
expr_stmt|;
comment|// not strictly conforming
return|return
name|e
return|;
block|}
annotation|@
name|Override
DECL|method|removeEldestEntry (Entry<Long, DirEntry.Builder> be)
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|DirEntry
operator|.
name|Builder
argument_list|>
name|be
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
name|nEntries
condition|)
block|{
name|DirEntry
name|d
init|=
name|be
operator|.
name|getValue
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|writeDirEntry
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|method|writeInode (INode n)
specifier|synchronized
name|void
name|writeInode
parameter_list|(
name|INode
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|n
operator|.
name|writeDelimitedTo
argument_list|(
name|inodes
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDirEntry (DirEntry e)
specifier|synchronized
name|void
name|writeDirEntry
parameter_list|(
name|DirEntry
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|e
operator|.
name|writeDelimitedTo
argument_list|(
name|dirs
argument_list|)
expr_stmt|;
block|}
DECL|method|getOndiskSize (com.google.protobuf.GeneratedMessageV3 s)
specifier|private
specifier|static
name|int
name|getOndiskSize
parameter_list|(
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|GeneratedMessageV3
name|s
parameter_list|)
block|{
return|return
name|CodedOutputStream
operator|.
name|computeUInt32SizeNoTag
argument_list|(
name|s
operator|.
name|getSerializedSize
argument_list|()
argument_list|)
operator|+
name|s
operator|.
name|getSerializedSize
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
for|for
control|(
name|DirEntry
operator|.
name|Builder
name|b
range|:
name|dircache
operator|.
name|values
argument_list|()
control|)
block|{
name|DirEntry
name|e
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeDirEntry
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|dircache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// close side files
name|IOUtils
operator|.
name|cleanupWithLogger
argument_list|(
literal|null
argument_list|,
name|dirs
argument_list|,
name|inodes
argument_list|,
name|blocks
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|dirs
operator|||
literal|null
operator|==
name|inodes
condition|)
block|{
comment|// init failed
if|if
condition|(
name|raw
operator|!=
literal|null
condition|)
block|{
name|raw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
name|writeNameSystemSection
argument_list|()
expr_stmt|;
name|writeINodeSection
argument_list|()
expr_stmt|;
name|writeDirSection
argument_list|()
expr_stmt|;
name|writeStringTableSection
argument_list|()
expr_stmt|;
comment|// write summary directly to raw
name|FileSummary
name|s
init|=
name|summary
operator|.
name|build
argument_list|()
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|raw
argument_list|)
expr_stmt|;
name|int
name|length
init|=
name|getOndiskSize
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|byte
index|[]
name|lengthBytes
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|lengthBytes
argument_list|)
operator|.
name|asIntBuffer
argument_list|()
operator|.
name|put
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|raw
operator|.
name|write
argument_list|(
name|lengthBytes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|raw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|writeMD5
argument_list|(
literal|"fsimage_0000000000000000000"
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Write checksum for image file. Pulled from MD5Utils/internals. Awkward to    * reuse existing tools/utils.    */
DECL|method|writeMD5 (String imagename)
name|void
name|writeMD5
parameter_list|(
name|String
name|imagename
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|outdir
condition|)
block|{
return|return;
block|}
name|MD5Hash
name|md5
init|=
operator|new
name|MD5Hash
argument_list|(
name|digest
operator|.
name|digest
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|digestString
init|=
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|md5
operator|.
name|getDigest
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|chk
init|=
operator|new
name|Path
argument_list|(
name|outdir
argument_list|,
name|imagename
operator|+
literal|".md5"
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|out
init|=
name|outfs
operator|.
name|create
argument_list|(
name|chk
argument_list|)
init|)
block|{
name|String
name|md5Line
init|=
name|digestString
operator|+
literal|" *"
operator|+
name|imagename
operator|+
literal|"\n"
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|md5Line
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|beginSection (OutputStream out)
name|OutputStream
name|beginSection
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|CompressionCodec
name|codec
init|=
name|compress
operator|.
name|getImageCodec
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|codec
condition|)
block|{
return|return
name|out
return|;
block|}
return|return
name|codec
operator|.
name|createOutputStream
argument_list|(
name|out
argument_list|)
return|;
block|}
DECL|method|endSection (OutputStream out, SectionName name)
name|void
name|endSection
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|SectionName
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|CompressionCodec
name|codec
init|=
name|compress
operator|.
name|getImageCodec
argument_list|()
decl_stmt|;
if|if
condition|(
name|codec
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CompressorStream
operator|)
name|out
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|long
name|length
init|=
name|raw
operator|.
name|pos
operator|-
name|curSec
decl_stmt|;
name|summary
operator|.
name|addSections
argument_list|(
name|FileSummary
operator|.
name|Section
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
comment|// not strictly correct, but name not visible
operator|.
name|setOffset
argument_list|(
name|curSec
argument_list|)
operator|.
name|setLength
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|curSec
operator|+=
name|length
expr_stmt|;
block|}
DECL|method|writeNameSystemSection ()
name|void
name|writeNameSystemSection
parameter_list|()
throws|throws
name|IOException
block|{
name|NameSystemSection
operator|.
name|Builder
name|b
init|=
name|NameSystemSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setGenstampV1
argument_list|(
literal|1000
argument_list|)
operator|.
name|setGenstampV1Limit
argument_list|(
literal|0
argument_list|)
operator|.
name|setGenstampV2
argument_list|(
literal|1001
argument_list|)
operator|.
name|setLastAllocatedBlockId
argument_list|(
name|blockIds
operator|.
name|lastId
argument_list|()
argument_list|)
operator|.
name|setTransactionId
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NameSystemSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|sec
init|=
name|beginSection
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|NS_INFO
argument_list|)
expr_stmt|;
block|}
DECL|method|writeINodeSection ()
name|void
name|writeINodeSection
parameter_list|()
throws|throws
name|IOException
block|{
comment|// could reset dict to avoid compression cost in close
name|INodeSection
operator|.
name|Builder
name|b
init|=
name|INodeSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNumInodes
argument_list|(
name|curInode
operator|.
name|get
argument_list|()
operator|-
name|startInode
argument_list|)
operator|.
name|setLastInodeId
argument_list|(
name|curInode
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|INodeSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|sec
init|=
name|beginSection
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
comment|// copy inodes
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|inodesTmp
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|sec
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|INODE
argument_list|)
expr_stmt|;
block|}
DECL|method|writeDirSection ()
name|void
name|writeDirSection
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No header, so dirs can be written/compressed independently
name|OutputStream
name|sec
init|=
name|raw
decl_stmt|;
comment|// copy dirs
try|try
init|(
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|dirsTmp
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|copyBytes
argument_list|(
name|in
argument_list|,
name|sec
argument_list|,
literal|4096
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|INODE_DIR
argument_list|)
expr_stmt|;
block|}
DECL|method|writeFilesUCSection ()
name|void
name|writeFilesUCSection
parameter_list|()
throws|throws
name|IOException
block|{
name|FilesUnderConstructionSection
operator|.
name|Builder
name|b
init|=
name|FilesUnderConstructionSection
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|FilesUnderConstructionSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|sec
init|=
name|beginSection
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|FILES_UNDERCONSTRUCTION
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSnapshotDiffSection ()
name|void
name|writeSnapshotDiffSection
parameter_list|()
throws|throws
name|IOException
block|{
name|SnapshotDiffSection
operator|.
name|Builder
name|b
init|=
name|SnapshotDiffSection
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SnapshotDiffSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|sec
init|=
name|beginSection
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|SNAPSHOT_DIFF
argument_list|)
expr_stmt|;
block|}
DECL|method|writeSecretManagerSection ()
name|void
name|writeSecretManagerSection
parameter_list|()
throws|throws
name|IOException
block|{
name|SecretManagerSection
operator|.
name|Builder
name|b
init|=
name|SecretManagerSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCurrentId
argument_list|(
literal|0
argument_list|)
operator|.
name|setTokenSequenceNumber
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SecretManagerSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|sec
init|=
name|beginSection
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|SECRET_MANAGER
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCacheManagerSection ()
name|void
name|writeCacheManagerSection
parameter_list|()
throws|throws
name|IOException
block|{
name|CacheManagerSection
operator|.
name|Builder
name|b
init|=
name|CacheManagerSection
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNumPools
argument_list|(
literal|0
argument_list|)
operator|.
name|setNumDirectives
argument_list|(
literal|0
argument_list|)
operator|.
name|setNextDirectiveId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CacheManagerSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|sec
init|=
name|beginSection
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|CACHE_MANAGER
argument_list|)
expr_stmt|;
block|}
DECL|method|writeStringTableSection ()
name|void
name|writeStringTableSection
parameter_list|()
throws|throws
name|IOException
block|{
name|StringTableSection
operator|.
name|Builder
name|b
init|=
name|StringTableSection
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|u
init|=
name|ugis
operator|.
name|ugiMap
argument_list|()
decl_stmt|;
name|b
operator|.
name|setNumEntry
argument_list|(
name|u
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StringTableSection
name|s
init|=
name|b
operator|.
name|build
argument_list|()
decl_stmt|;
name|OutputStream
name|sec
init|=
name|beginSection
argument_list|(
name|raw
argument_list|)
decl_stmt|;
name|s
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|e
range|:
name|u
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringTableSection
operator|.
name|Entry
operator|.
name|Builder
name|x
init|=
name|StringTableSection
operator|.
name|Entry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setId
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setStr
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|x
operator|.
name|build
argument_list|()
operator|.
name|writeDelimitedTo
argument_list|(
name|sec
argument_list|)
expr_stmt|;
block|}
name|endSection
argument_list|(
name|sec
argument_list|,
name|SectionName
operator|.
name|STRING_TABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ codec=\""
argument_list|)
operator|.
name|append
argument_list|(
name|compress
operator|.
name|getImageCodec
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\", startBlock="
argument_list|)
operator|.
name|append
argument_list|(
name|startBlock
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", curBlock="
argument_list|)
operator|.
name|append
argument_list|(
name|curBlock
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", startInode="
argument_list|)
operator|.
name|append
argument_list|(
name|startInode
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", curInode="
argument_list|)
operator|.
name|append
argument_list|(
name|curInode
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", ugi="
argument_list|)
operator|.
name|append
argument_list|(
name|ugis
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", blockIds="
argument_list|)
operator|.
name|append
argument_list|(
name|blockIds
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", offset="
argument_list|)
operator|.
name|append
argument_list|(
name|raw
operator|.
name|pos
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|TrackedOutputStream
specifier|static
class|class
name|TrackedOutputStream
parameter_list|<
name|T
extends|extends
name|OutputStream
parameter_list|>
extends|extends
name|FilterOutputStream
block|{
DECL|field|pos
specifier|private
name|long
name|pos
init|=
literal|0L
decl_stmt|;
DECL|method|TrackedOutputStream (T out)
name|TrackedOutputStream
parameter_list|(
name|T
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getInner ()
specifier|public
name|T
name|getInner
parameter_list|()
block|{
return|return
operator|(
name|T
operator|)
name|out
return|;
block|}
annotation|@
name|Override
DECL|method|write (int b)
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (byte[] b, int off, int len)
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush ()
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Configurable options for image generation mapping pluggable components.    */
DECL|class|Options
specifier|public
specifier|static
class|class
name|Options
implements|implements
name|Configurable
block|{
DECL|field|START_INODE
specifier|public
specifier|static
specifier|final
name|String
name|START_INODE
init|=
literal|"hdfs.image.writer.start.inode"
decl_stmt|;
DECL|field|CACHE_ENTRY
specifier|public
specifier|static
specifier|final
name|String
name|CACHE_ENTRY
init|=
literal|"hdfs.image.writer.cache.entries"
decl_stmt|;
DECL|field|UGI_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|UGI_CLASS
init|=
literal|"hdfs.image.writer.ugi.class"
decl_stmt|;
DECL|field|BLOCK_RESOLVER_CLASS
specifier|public
specifier|static
specifier|final
name|String
name|BLOCK_RESOLVER_CLASS
init|=
literal|"hdfs.image.writer.blockresolver.class"
decl_stmt|;
DECL|field|outdir
specifier|private
name|Path
name|outdir
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|outStream
specifier|private
name|OutputStream
name|outStream
decl_stmt|;
DECL|field|maxdircache
specifier|private
name|int
name|maxdircache
decl_stmt|;
DECL|field|startBlock
specifier|private
name|long
name|startBlock
decl_stmt|;
DECL|field|startInode
specifier|private
name|long
name|startInode
decl_stmt|;
DECL|field|ugis
specifier|private
name|UGIResolver
name|ugis
decl_stmt|;
DECL|field|ugisClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|UGIResolver
argument_list|>
name|ugisClass
decl_stmt|;
DECL|field|blocks
specifier|private
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|blocks
decl_stmt|;
DECL|field|clusterID
specifier|private
name|String
name|clusterID
decl_stmt|;
DECL|field|blockPoolID
specifier|private
name|String
name|blockPoolID
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|field|aliasMap
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|BlockAliasMap
argument_list|>
name|aliasMap
decl_stmt|;
DECL|field|blockIds
specifier|private
name|BlockResolver
name|blockIds
decl_stmt|;
DECL|field|blockIdsClass
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|BlockResolver
argument_list|>
name|blockIdsClass
decl_stmt|;
DECL|field|compress
specifier|private
name|FSImageCompression
name|compress
init|=
name|FSImageCompression
operator|.
name|createNoopCompression
argument_list|()
decl_stmt|;
DECL|method|Options ()
specifier|protected
name|Options
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|def
init|=
operator|new
name|File
argument_list|(
literal|"hdfs/name"
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|outdir
operator|=
operator|new
name|Path
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|def
argument_list|)
argument_list|)
expr_stmt|;
name|startBlock
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|FixedBlockResolver
operator|.
name|START_BLOCK
argument_list|,
operator|(
literal|1L
operator|<<
literal|30
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|startInode
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|START_INODE
argument_list|,
operator|(
literal|1L
operator|<<
literal|14
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|maxdircache
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|CACHE_ENTRY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|ugisClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|UGI_CLASS
argument_list|,
name|SingleUGIResolver
operator|.
name|class
argument_list|,
name|UGIResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|aliasMap
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_CLASS
argument_list|,
name|NullBlockAliasMap
operator|.
name|class
argument_list|,
name|BlockAliasMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|blockIdsClass
operator|=
name|conf
operator|.
name|getClass
argument_list|(
name|BLOCK_RESOLVER_CLASS
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|,
name|BlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|clusterID
operator|=
literal|""
expr_stmt|;
name|blockPoolID
operator|=
literal|""
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
DECL|method|output (String out)
specifier|public
name|Options
name|output
parameter_list|(
name|String
name|out
parameter_list|)
block|{
name|this
operator|.
name|outdir
operator|=
operator|new
name|Path
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|outStream (OutputStream outStream)
specifier|public
name|Options
name|outStream
parameter_list|(
name|OutputStream
name|outStream
parameter_list|)
block|{
name|this
operator|.
name|outStream
operator|=
name|outStream
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|codec (String codec)
specifier|public
name|Options
name|codec
parameter_list|(
name|String
name|codec
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|compress
operator|=
name|FSImageCompression
operator|.
name|createCompression
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|codec
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|cache (int nDirEntries)
specifier|public
name|Options
name|cache
parameter_list|(
name|int
name|nDirEntries
parameter_list|)
block|{
name|this
operator|.
name|maxdircache
operator|=
name|nDirEntries
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ugi (UGIResolver ugis)
specifier|public
name|Options
name|ugi
parameter_list|(
name|UGIResolver
name|ugis
parameter_list|)
block|{
name|this
operator|.
name|ugis
operator|=
name|ugis
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|ugi (Class<? extends UGIResolver> ugisClass)
specifier|public
name|Options
name|ugi
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|UGIResolver
argument_list|>
name|ugisClass
parameter_list|)
block|{
name|this
operator|.
name|ugisClass
operator|=
name|ugisClass
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|blockIds (BlockResolver blockIds)
specifier|public
name|Options
name|blockIds
parameter_list|(
name|BlockResolver
name|blockIds
parameter_list|)
block|{
name|this
operator|.
name|blockIds
operator|=
name|blockIds
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|blockIds (Class<? extends BlockResolver> blockIdsClass)
specifier|public
name|Options
name|blockIds
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|BlockResolver
argument_list|>
name|blockIdsClass
parameter_list|)
block|{
name|this
operator|.
name|blockIdsClass
operator|=
name|blockIdsClass
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|blocks (BlockAliasMap<FileRegion> blocks)
specifier|public
name|Options
name|blocks
parameter_list|(
name|BlockAliasMap
argument_list|<
name|FileRegion
argument_list|>
name|blocks
parameter_list|)
block|{
name|this
operator|.
name|blocks
operator|=
name|blocks
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|blocks (Class<? extends BlockAliasMap> blocksClass)
specifier|public
name|Options
name|blocks
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|BlockAliasMap
argument_list|>
name|blocksClass
parameter_list|)
block|{
name|this
operator|.
name|aliasMap
operator|=
name|blocksClass
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|clusterID (String clusterID)
specifier|public
name|Options
name|clusterID
parameter_list|(
name|String
name|clusterID
parameter_list|)
block|{
name|this
operator|.
name|clusterID
operator|=
name|clusterID
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|blockPoolID (String blockPoolID)
specifier|public
name|Options
name|blockPoolID
parameter_list|(
name|String
name|blockPoolID
parameter_list|)
block|{
name|this
operator|.
name|blockPoolID
operator|=
name|blockPoolID
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

