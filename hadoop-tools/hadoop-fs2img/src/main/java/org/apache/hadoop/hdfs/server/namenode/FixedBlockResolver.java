begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_comment
comment|/**  * Resolver mapping all files to a configurable, uniform blocksize.  */
end_comment

begin_class
DECL|class|FixedBlockResolver
specifier|public
class|class
name|FixedBlockResolver
extends|extends
name|BlockResolver
implements|implements
name|Configurable
block|{
DECL|field|BLOCKSIZE
specifier|public
specifier|static
specifier|final
name|String
name|BLOCKSIZE
init|=
literal|"hdfs.image.writer.resolver.fixed.block.size"
decl_stmt|;
DECL|field|START_BLOCK
specifier|public
specifier|static
specifier|final
name|String
name|START_BLOCK
init|=
literal|"hdfs.image.writer.resolver.fixed.block.start"
decl_stmt|;
DECL|field|BLOCKSIZE_DEFAULT
specifier|public
specifier|static
specifier|final
name|long
name|BLOCKSIZE_DEFAULT
init|=
literal|256
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|blocksize
specifier|private
name|long
name|blocksize
init|=
literal|256
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
decl_stmt|;
DECL|field|blockIds
specifier|private
specifier|final
name|AtomicLong
name|blockIds
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|blocksize
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|BLOCKSIZE
argument_list|,
name|BLOCKSIZE_DEFAULT
argument_list|)
expr_stmt|;
name|blockIds
operator|.
name|set
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|START_BLOCK
argument_list|,
operator|(
literal|1L
operator|<<
literal|30
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|blockLengths (FileStatus s)
specifier|protected
name|List
argument_list|<
name|Long
argument_list|>
name|blockLengths
parameter_list|(
name|FileStatus
name|s
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
name|ret
return|;
block|}
if|if
condition|(
literal|0
operator|==
name|s
operator|.
name|getLen
argument_list|()
condition|)
block|{
comment|// the file has length 0; so we will have one block of size 0
name|ret
operator|.
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|int
name|nblocks
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|s
operator|.
name|getLen
argument_list|()
operator|-
literal|1
operator|)
operator|/
name|blocksize
argument_list|)
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nblocks
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|blocksize
argument_list|)
expr_stmt|;
block|}
name|long
name|rem
init|=
name|s
operator|.
name|getLen
argument_list|()
operator|%
name|blocksize
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
literal|0
operator|==
operator|(
name|rem
operator|%
name|blocksize
operator|)
condition|?
name|blocksize
else|:
name|rem
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|nextId ()
specifier|public
name|long
name|nextId
parameter_list|()
block|{
return|return
name|blockIds
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lastId ()
specifier|public
name|long
name|lastId
parameter_list|()
block|{
return|return
name|blockIds
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|preferredBlockSize (FileStatus s)
specifier|public
name|long
name|preferredBlockSize
parameter_list|(
name|FileStatus
name|s
parameter_list|)
block|{
return|return
name|blocksize
return|;
block|}
annotation|@
name|Override
DECL|method|getReplication (FileStatus s)
specifier|public
name|int
name|getReplication
parameter_list|(
name|FileStatus
name|s
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
end_class

end_unit

