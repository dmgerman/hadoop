begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_comment
comment|/**  * Given an external reference, create a sequence of blocks and associated  * metadata.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|BlockResolver
specifier|public
specifier|abstract
class|class
name|BlockResolver
block|{
DECL|method|buildBlock (long blockId, long bytes)
specifier|protected
name|BlockProto
name|buildBlock
parameter_list|(
name|long
name|blockId
parameter_list|,
name|long
name|bytes
parameter_list|)
block|{
return|return
name|buildBlock
argument_list|(
name|blockId
argument_list|,
name|bytes
argument_list|,
literal|1001
argument_list|)
return|;
block|}
DECL|method|buildBlock (long blockId, long bytes, long genstamp)
specifier|protected
name|BlockProto
name|buildBlock
parameter_list|(
name|long
name|blockId
parameter_list|,
name|long
name|bytes
parameter_list|,
name|long
name|genstamp
parameter_list|)
block|{
name|BlockProto
operator|.
name|Builder
name|b
init|=
name|BlockProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBlockId
argument_list|(
name|blockId
argument_list|)
operator|.
name|setNumBytes
argument_list|(
name|bytes
argument_list|)
operator|.
name|setGenStamp
argument_list|(
name|genstamp
argument_list|)
decl_stmt|;
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * @param s the external reference.    * @return sequence of blocks that make up the reference.    */
DECL|method|resolve (FileStatus s)
specifier|public
name|Iterable
argument_list|<
name|BlockProto
argument_list|>
name|resolve
parameter_list|(
name|FileStatus
name|s
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|lengths
init|=
name|blockLengths
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|BlockProto
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|lengths
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|tot
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|l
range|:
name|lengths
control|)
block|{
name|tot
operator|+=
name|l
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|buildBlock
argument_list|(
name|nextId
argument_list|()
argument_list|,
name|l
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tot
operator|!=
name|s
operator|.
name|getLen
argument_list|()
condition|)
block|{
comment|// log a warning?
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Expected "
operator|+
name|s
operator|.
name|getLen
argument_list|()
operator|+
literal|" found "
operator|+
name|tot
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * @return the next block id.    */
DECL|method|nextId ()
specifier|public
specifier|abstract
name|long
name|nextId
parameter_list|()
function_decl|;
comment|/**    * @return the maximum sequentially allocated block ID for this filesystem.    */
DECL|method|lastId ()
specifier|protected
specifier|abstract
name|long
name|lastId
parameter_list|()
function_decl|;
comment|/**    * @param status the external reference.    * @return the lengths of the resultant blocks.    */
DECL|method|blockLengths (FileStatus status)
specifier|protected
specifier|abstract
name|List
argument_list|<
name|Long
argument_list|>
name|blockLengths
parameter_list|(
name|FileStatus
name|status
parameter_list|)
function_decl|;
comment|/**    * @param status the external reference.    * @return the block size to assign to this external reference.    */
DECL|method|preferredBlockSize (FileStatus status)
specifier|public
name|long
name|preferredBlockSize
parameter_list|(
name|FileStatus
name|status
parameter_list|)
block|{
return|return
name|status
operator|.
name|getBlockSize
argument_list|()
return|;
block|}
comment|/**    * @param status the external reference.    * @return the replication to assign to this external reference.    */
DECL|method|getReplication (FileStatus status)
specifier|public
specifier|abstract
name|int
name|getReplication
parameter_list|(
name|FileStatus
name|status
parameter_list|)
function_decl|;
block|}
end_class

end_unit

