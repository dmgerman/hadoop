begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_comment
comment|/**  * Map all owners/groups in external system to a single user in FSImage.  */
end_comment

begin_class
DECL|class|SingleUGIResolver
specifier|public
class|class
name|SingleUGIResolver
extends|extends
name|UGIResolver
implements|implements
name|Configurable
block|{
DECL|field|UID
specifier|public
specifier|static
specifier|final
name|String
name|UID
init|=
literal|"hdfs.image.writer.ugi.single.uid"
decl_stmt|;
DECL|field|USER
specifier|public
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"hdfs.image.writer.ugi.single.user"
decl_stmt|;
DECL|field|GID
specifier|public
specifier|static
specifier|final
name|String
name|GID
init|=
literal|"hdfs.image.writer.ugi.single.gid"
decl_stmt|;
DECL|field|GROUP
specifier|public
specifier|static
specifier|final
name|String
name|GROUP
init|=
literal|"hdfs.image.writer.ugi.single.group"
decl_stmt|;
DECL|field|uid
specifier|private
name|int
name|uid
decl_stmt|;
DECL|field|gid
specifier|private
name|int
name|gid
decl_stmt|;
DECL|field|user
specifier|private
name|String
name|user
decl_stmt|;
DECL|field|group
specifier|private
name|String
name|group
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Override
DECL|method|setConf (Configuration conf)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|uid
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|UID
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|user
operator|=
name|conf
operator|.
name|get
argument_list|(
name|USER
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|user
condition|)
block|{
try|try
block|{
name|user
operator|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|user
operator|=
literal|"hadoop"
expr_stmt|;
block|}
block|}
name|gid
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|GID
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|group
operator|=
name|conf
operator|.
name|get
argument_list|(
name|GROUP
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|group
condition|)
block|{
name|group
operator|=
name|user
expr_stmt|;
block|}
name|resetUGInfo
argument_list|()
expr_stmt|;
name|addUser
argument_list|(
name|user
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|addGroup
argument_list|(
name|group
argument_list|,
name|gid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|user (FileStatus s)
specifier|public
name|String
name|user
parameter_list|(
name|FileStatus
name|s
parameter_list|)
block|{
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|group (FileStatus s)
specifier|public
name|String
name|group
parameter_list|(
name|FileStatus
name|s
parameter_list|)
block|{
return|return
name|group
return|;
block|}
annotation|@
name|Override
DECL|method|addUser (String name)
specifier|public
name|void
name|addUser
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|//do nothing
block|}
annotation|@
name|Override
DECL|method|addGroup (String name)
specifier|public
name|void
name|addGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
comment|//do nothing
block|}
block|}
end_class

end_unit

