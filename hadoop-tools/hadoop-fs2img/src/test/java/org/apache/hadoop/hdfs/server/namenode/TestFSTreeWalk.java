begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|AclStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Validate FSTreeWalk specific behavior.  */
end_comment

begin_class
DECL|class|TestFSTreeWalk
specifier|public
class|class
name|TestFSTreeWalk
block|{
comment|/**    * Verify that the ACLs are fetched when configured.    */
annotation|@
name|Test
DECL|method|testImportAcl ()
specifier|public
name|void
name|testImportAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ACLS_IMPORT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Path
name|root
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Path
argument_list|,
name|FileStatus
argument_list|>
name|expectedChildren
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|FileStatus
name|child1
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
name|child2
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/b"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedChildren
operator|.
name|put
argument_list|(
name|child1
operator|.
name|getPath
argument_list|()
argument_list|,
name|child1
argument_list|)
expr_stmt|;
name|expectedChildren
operator|.
name|put
argument_list|(
name|child2
operator|.
name|getPath
argument_list|()
argument_list|,
name|child2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|root
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedChildren
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|FileStatus
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|AclStatus
name|expectedAcls
init|=
name|mock
argument_list|(
name|AclStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getAclStatus
argument_list|(
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expectedAcls
argument_list|)
expr_stmt|;
name|FSTreeWalk
name|fsTreeWalk
init|=
operator|new
name|FSTreeWalk
argument_list|(
name|root
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|FileStatus
name|rootFileStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|TreePath
name|treePath
init|=
operator|new
name|TreePath
argument_list|(
name|rootFileStatus
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|TreePath
argument_list|>
name|result
init|=
name|fsTreeWalk
operator|.
name|getChildren
argument_list|(
name|treePath
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|TreePath
name|path
range|:
name|result
control|)
block|{
name|FileStatus
name|expectedChildStatus
init|=
name|expectedChildren
operator|.
name|remove
argument_list|(
name|path
operator|.
name|getFileStatus
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|expectedChildStatus
argument_list|)
expr_stmt|;
name|AclStatus
name|childAcl
init|=
name|path
operator|.
name|getAclStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedAcls
argument_list|,
name|childAcl
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expectedChildren
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify ACL enabled TreeWalk iterator throws an error if the external file    * system does not support ACLs.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|testACLNotSupported ()
specifier|public
name|void
name|testACLNotSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ACLS_IMPORT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getAclStatus
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|UnsupportedOperationException
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|root
init|=
name|mock
argument_list|(
name|Path
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|FileStatus
name|rootFileStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|root
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootFileStatus
argument_list|)
expr_stmt|;
name|FSTreeWalk
name|fsTreeWalk
init|=
operator|new
name|FSTreeWalk
argument_list|(
name|root
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|TreeWalk
operator|.
name|TreeIterator
name|iter
init|=
name|fsTreeWalk
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"Unexpected successful creation of iter: "
operator|+
name|iter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify creation of INode for ACL enabled TreePath throws an error.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
DECL|method|testToINodeACLNotSupported ()
specifier|public
name|void
name|testToINodeACLNotSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockResolver
name|blockResolver
init|=
operator|new
name|FixedBlockResolver
argument_list|()
decl_stmt|;
name|Path
name|root
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|FileStatus
name|rootFileStatus
init|=
operator|new
name|FileStatus
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|AclStatus
name|acls
init|=
name|mock
argument_list|(
name|AclStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|TreePath
name|treePath
init|=
operator|new
name|TreePath
argument_list|(
name|rootFileStatus
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|UGIResolver
name|ugiResolver
init|=
name|mock
argument_list|(
name|UGIResolver
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ugiResolver
operator|.
name|getPermissionsProto
argument_list|(
literal|null
argument_list|,
name|acls
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|treePath
operator|.
name|toINode
argument_list|(
name|ugiResolver
argument_list|,
name|blockResolver
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

