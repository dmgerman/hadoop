begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSNNTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|DatanodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|LocatedBlocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockManagerTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|DatanodeStorageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|ProvidedStorageMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|HdfsServerConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|BlockAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
operator|.
name|InMemoryLevelDBAliasMapClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
operator|.
name|LevelDBFileRegionAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
operator|.
name|TextFileRegionAliasMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_BLOCK_REPLICATOR_CLASSNAME_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|FsVolumeSpi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|fsdataset
operator|.
name|impl
operator|.
name|FsVolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|protocol
operator|.
name|StorageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_INMEMORY_ENABLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_BIND_HOST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_LEVELDB_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|Util
operator|.
name|fileAsURI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|blockaliasmap
operator|.
name|impl
operator|.
name|TextFileRegionAliasMap
operator|.
name|fileNameFromBlockPoolID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NodeBase
operator|.
name|PATH_SEPARATOR_STR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Integration tests for the Provided implementation.  */
end_comment

begin_class
DECL|class|ITestProvidedImplementation
specifier|public
class|class
name|ITestProvidedImplementation
block|{
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ITestProvidedImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|fBASE
specifier|private
specifier|final
name|File
name|fBASE
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|pBASE
specifier|private
specifier|final
name|Path
name|pBASE
init|=
operator|new
name|Path
argument_list|(
name|fBASE
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|providedPath
specifier|private
specifier|final
name|Path
name|providedPath
init|=
operator|new
name|Path
argument_list|(
name|pBASE
argument_list|,
literal|"providedDir"
argument_list|)
decl_stmt|;
DECL|field|nnDirPath
specifier|private
specifier|final
name|Path
name|nnDirPath
init|=
operator|new
name|Path
argument_list|(
name|pBASE
argument_list|,
literal|"nnDir"
argument_list|)
decl_stmt|;
DECL|field|singleUser
specifier|private
specifier|final
name|String
name|singleUser
init|=
literal|"usr1"
decl_stmt|;
DECL|field|singleGroup
specifier|private
specifier|final
name|String
name|singleGroup
init|=
literal|"grp1"
decl_stmt|;
DECL|field|numFiles
specifier|private
specifier|final
name|int
name|numFiles
init|=
literal|10
decl_stmt|;
DECL|field|filePrefix
specifier|private
specifier|final
name|String
name|filePrefix
init|=
literal|"file"
decl_stmt|;
DECL|field|fileSuffix
specifier|private
specifier|final
name|String
name|fileSuffix
init|=
literal|".dat"
decl_stmt|;
DECL|field|baseFileLen
specifier|private
specifier|final
name|int
name|baseFileLen
init|=
literal|1024
decl_stmt|;
DECL|field|providedDataSize
specifier|private
name|long
name|providedDataSize
init|=
literal|0
decl_stmt|;
DECL|field|bpid
specifier|private
specifier|final
name|String
name|bpid
init|=
literal|"BP-1234-10.1.1.1-1224"
decl_stmt|;
DECL|field|clusterID
specifier|private
specifier|static
specifier|final
name|String
name|clusterID
init|=
literal|"CID-PROVIDED"
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
specifier|private
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setSeed ()
specifier|public
name|void
name|setSeed
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fBASE
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|fBASE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not fully delete "
operator|+
name|fBASE
argument_list|)
throw|;
block|}
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|" seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SingleUGIResolver
operator|.
name|USER
argument_list|,
name|singleUser
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SingleUGIResolver
operator|.
name|GROUP
argument_list|,
name|singleGroup
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_STORAGEUUID
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_STORAGEUUID_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PROVIDED_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_CLASS
argument_list|,
name|TextFileRegionAliasMap
operator|.
name|class
argument_list|,
name|BlockAliasMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_WRITE_DIR
argument_list|,
name|nnDirPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_READ_FILE
argument_list|,
operator|new
name|Path
argument_list|(
name|nnDirPath
argument_list|,
name|fileNameFromBlockPoolID
argument_list|(
name|bpid
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_TEXT_DELIMITER
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MiniDFSCluster
operator|.
name|HDFS_MINIDFS_BASEDIR_PROVIDED
argument_list|,
operator|new
name|File
argument_list|(
name|providedPath
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|imageDir
init|=
operator|new
name|File
argument_list|(
name|providedPath
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|imageDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating directory: "
operator|+
name|imageDir
argument_list|)
expr_stmt|;
name|imageDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|nnDir
init|=
operator|new
name|File
argument_list|(
name|nnDirPath
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nnDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|nnDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|// create 10 random files under pBASE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|providedPath
argument_list|,
name|filePrefix
operator|+
name|i
operator|+
name|fileSuffix
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|newFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|newFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|baseFileLen
operator|*
name|i
condition|;
name|j
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|providedDataSize
operator|+=
name|newFile
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|createImage (TreeWalk t, Path out, Class<? extends BlockResolver> blockIdsClass)
name|void
name|createImage
parameter_list|(
name|TreeWalk
name|t
parameter_list|,
name|Path
name|out
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BlockResolver
argument_list|>
name|blockIdsClass
parameter_list|)
throws|throws
name|Exception
block|{
name|createImage
argument_list|(
name|t
argument_list|,
name|out
argument_list|,
name|blockIdsClass
argument_list|,
literal|""
argument_list|,
name|TextFileRegionAliasMap
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|createImage (TreeWalk t, Path out, Class<? extends BlockResolver> blockIdsClass, String clusterID, Class<? extends BlockAliasMap> aliasMapClass)
name|void
name|createImage
parameter_list|(
name|TreeWalk
name|t
parameter_list|,
name|Path
name|out
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BlockResolver
argument_list|>
name|blockIdsClass
parameter_list|,
name|String
name|clusterID
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BlockAliasMap
argument_list|>
name|aliasMapClass
parameter_list|)
throws|throws
name|Exception
block|{
name|ImageWriter
operator|.
name|Options
name|opts
init|=
name|ImageWriter
operator|.
name|defaults
argument_list|()
decl_stmt|;
name|opts
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|opts
operator|.
name|output
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|aliasMapClass
argument_list|)
operator|.
name|blockIds
argument_list|(
name|blockIdsClass
argument_list|)
operator|.
name|clusterID
argument_list|(
name|clusterID
argument_list|)
operator|.
name|blockPoolID
argument_list|(
name|bpid
argument_list|)
expr_stmt|;
try|try
init|(
name|ImageWriter
name|w
init|=
operator|new
name|ImageWriter
argument_list|(
name|opts
argument_list|)
init|)
block|{
for|for
control|(
name|TreePath
name|e
range|:
name|t
control|)
block|{
name|w
operator|.
name|accept
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startCluster (Path nspath, int numDatanodes, StorageType[] storageTypes, StorageType[][] storageTypesPerDatanode, boolean doFormat)
name|void
name|startCluster
parameter_list|(
name|Path
name|nspath
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypesPerDatanode
parameter_list|,
name|boolean
name|doFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|startCluster
argument_list|(
name|nspath
argument_list|,
name|numDatanodes
argument_list|,
name|storageTypes
argument_list|,
name|storageTypesPerDatanode
argument_list|,
name|doFormat
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|startCluster (Path nspath, int numDatanodes, StorageType[] storageTypes, StorageType[][] storageTypesPerDatanode, boolean doFormat, String[] racks)
name|void
name|startCluster
parameter_list|(
name|Path
name|nspath
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypesPerDatanode
parameter_list|,
name|boolean
name|doFormat
parameter_list|,
name|String
index|[]
name|racks
parameter_list|)
throws|throws
name|IOException
block|{
name|startCluster
argument_list|(
name|nspath
argument_list|,
name|numDatanodes
argument_list|,
name|storageTypes
argument_list|,
name|storageTypesPerDatanode
argument_list|,
name|doFormat
argument_list|,
name|racks
argument_list|,
literal|null
argument_list|,
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|startCluster (Path nspath, int numDatanodes, StorageType[] storageTypes, StorageType[][] storageTypesPerDatanode, boolean doFormat, String[] racks, MiniDFSNNTopology topo, MiniDFSCluster.Builder builder)
name|void
name|startCluster
parameter_list|(
name|Path
name|nspath
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypesPerDatanode
parameter_list|,
name|boolean
name|doFormat
parameter_list|,
name|String
index|[]
name|racks
parameter_list|,
name|MiniDFSNNTopology
name|topo
parameter_list|,
name|MiniDFSCluster
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nspath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|format
argument_list|(
name|doFormat
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
name|doFormat
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|racks
argument_list|(
name|racks
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageTypesPerDatanode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|storageTypes
argument_list|(
name|storageTypesPerDatanode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storageTypes
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|storagesPerDatanode
argument_list|(
name|storageTypes
operator|.
name|length
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|topo
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|nnTopology
argument_list|(
name|topo
argument_list|)
expr_stmt|;
comment|// If HA or Federation is enabled and formatting is set to false,
comment|// copy the FSImage to all Namenode directories.
if|if
condition|(
operator|(
name|topo
operator|.
name|isHA
argument_list|()
operator|||
name|topo
operator|.
name|isFederated
argument_list|()
operator|)
operator|&&
operator|!
name|doFormat
condition|)
block|{
name|builder
operator|.
name|manageNameDfsDirs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|enableManagedDfsDirsRedundancy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|builder
operator|.
name|manageNameDfsSharedDirs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|nnDirs
init|=
name|getProvidedNamenodeDirs
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|,
name|topo
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|nnDir
range|:
name|nnDirs
control|)
block|{
name|MiniDFSCluster
operator|.
name|copyNameDirs
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|nspath
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|fileAsURI
argument_list|(
name|nnDir
argument_list|)
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|cluster
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
DECL|method|getProvidedNamenodeDirs (String baseDir, MiniDFSNNTopology topo)
specifier|private
specifier|static
name|List
argument_list|<
name|File
argument_list|>
name|getProvidedNamenodeDirs
parameter_list|(
name|String
name|baseDir
parameter_list|,
name|MiniDFSNNTopology
name|topo
parameter_list|)
block|{
name|List
argument_list|<
name|File
argument_list|>
name|nnDirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|nsCounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MiniDFSNNTopology
operator|.
name|NSConf
name|nsConf
range|:
name|topo
operator|.
name|getNameservices
argument_list|()
control|)
block|{
name|int
name|nnCounter
init|=
name|nsCounter
decl_stmt|;
for|for
control|(
name|MiniDFSNNTopology
operator|.
name|NNConf
name|nnConf
range|:
name|nsConf
operator|.
name|getNNs
argument_list|()
control|)
block|{
if|if
condition|(
name|providedNameservice
operator|.
name|equals
argument_list|(
name|nsConf
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
comment|// only add the first one
name|File
index|[]
name|nnFiles
init|=
name|MiniDFSCluster
operator|.
name|getNameNodeDirectory
argument_list|(
name|baseDir
argument_list|,
name|nsCounter
argument_list|,
name|nnCounter
argument_list|)
decl_stmt|;
if|if
condition|(
name|nnFiles
operator|==
literal|null
operator|||
name|nnFiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to get a location for the"
operator|+
literal|"Namenode directory for namespace: "
operator|+
name|nsConf
operator|.
name|getId
argument_list|()
operator|+
literal|" and namenodeId: "
operator|+
name|nnConf
operator|.
name|getNnId
argument_list|()
argument_list|)
throw|;
block|}
name|nnDirs
operator|.
name|add
argument_list|(
name|nnFiles
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|nnCounter
operator|++
expr_stmt|;
block|}
name|nsCounter
operator|=
name|nnCounter
expr_stmt|;
block|}
return|return
name|nnDirs
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testLoadImage ()
specifier|public
name|void
name|testLoadImage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"providedPath: "
operator|+
name|providedPath
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|RandomTreeWalk
argument_list|(
name|seed
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|0
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|TreePath
name|e
range|:
operator|new
name|RandomTreeWalk
argument_list|(
name|seed
argument_list|)
control|)
block|{
name|FileStatus
name|rs
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|hp
init|=
operator|new
name|Path
argument_list|(
name|rs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|hs
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|hs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getPermission
argument_list|()
argument_list|,
name|hs
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getLen
argument_list|()
argument_list|,
name|hs
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleUser
argument_list|,
name|hs
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|singleGroup
argument_list|,
name|hs
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|hs
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|hs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testProvidedReporting ()
specifier|public
name|void
name|testProvidedReporting
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|ImageWriter
operator|.
name|Options
operator|.
name|UGI_CLASS
argument_list|,
name|SingleUGIResolver
operator|.
name|class
argument_list|,
name|UGIResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|numDatanodes
init|=
literal|10
decl_stmt|;
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
name|numDatanodes
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|diskCapacity
init|=
literal|1000
decl_stmt|;
comment|// set the DISK capacity for testing
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
for|for
control|(
name|FsVolumeSpi
name|ref
range|:
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getFsVolumeReferences
argument_list|()
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|getStorageType
argument_list|()
operator|==
name|StorageType
operator|.
name|DISK
condition|)
block|{
operator|(
operator|(
name|FsVolumeImpl
operator|)
name|ref
operator|)
operator|.
name|setCapacityForTesting
argument_list|(
name|diskCapacity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// trigger heartbeats to update the capacities
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// verify namenode stats
name|FSNamesystem
name|namesystem
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
operator|.
name|getNamesystem
argument_list|()
decl_stmt|;
name|DatanodeStatistics
name|dnStats
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getDatanodeManager
argument_list|()
operator|.
name|getDatanodeStatistics
argument_list|()
decl_stmt|;
comment|// total capacity reported includes only the local volumes and
comment|// not the provided capacity
name|assertEquals
argument_list|(
name|diskCapacity
operator|*
name|numDatanodes
argument_list|,
name|namesystem
operator|.
name|getTotal
argument_list|()
argument_list|)
expr_stmt|;
comment|// total storage used should be equal to the totalProvidedStorage
comment|// no capacity should be remaining!
name|assertEquals
argument_list|(
name|providedDataSize
argument_list|,
name|dnStats
operator|.
name|getProvidedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providedDataSize
argument_list|,
name|namesystem
operator|.
name|getProvidedCapacityTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providedDataSize
argument_list|,
name|dnStats
operator|.
name|getStorageTypeStats
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|PROVIDED
argument_list|)
operator|.
name|getCapacityTotal
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providedDataSize
argument_list|,
name|dnStats
operator|.
name|getStorageTypeStats
argument_list|()
operator|.
name|get
argument_list|(
name|StorageType
operator|.
name|PROVIDED
argument_list|)
operator|.
name|getCapacityUsed
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify datanode stats
for|for
control|(
name|DataNode
name|dn
range|:
name|cluster
operator|.
name|getDataNodes
argument_list|()
control|)
block|{
for|for
control|(
name|StorageReport
name|report
range|:
name|dn
operator|.
name|getFSDataset
argument_list|()
operator|.
name|getStorageReports
argument_list|(
name|namesystem
operator|.
name|getBlockPoolId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|report
operator|.
name|getStorage
argument_list|()
operator|.
name|getStorageType
argument_list|()
operator|==
name|StorageType
operator|.
name|PROVIDED
condition|)
block|{
name|assertEquals
argument_list|(
name|providedDataSize
argument_list|,
name|report
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providedDataSize
argument_list|,
name|report
operator|.
name|getDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providedDataSize
argument_list|,
name|report
operator|.
name|getBlockPoolUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getNonDfsUsed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|BlockManager
name|bm
init|=
name|namesystem
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fileId
init|=
literal|0
init|;
name|fileId
operator|<
name|numFiles
condition|;
name|fileId
operator|++
control|)
block|{
name|String
name|filename
init|=
literal|"/"
operator|+
name|filePrefix
operator|+
name|fileId
operator|+
name|fileSuffix
decl_stmt|;
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|filename
argument_list|,
literal|0
argument_list|,
name|baseFileLen
argument_list|)
decl_stmt|;
for|for
control|(
name|LocatedBlock
name|locatedBlock
range|:
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
control|)
block|{
name|BlockInfo
name|blockInfo
init|=
name|bm
operator|.
name|getStoredBlock
argument_list|(
name|locatedBlock
operator|.
name|getBlock
argument_list|()
operator|.
name|getLocalBlock
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|DatanodeStorageInfo
argument_list|>
name|storagesItr
init|=
name|blockInfo
operator|.
name|getStorageInfos
argument_list|()
decl_stmt|;
name|DatanodeStorageInfo
name|info
init|=
name|storagesItr
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|StorageType
operator|.
name|PROVIDED
argument_list|,
name|info
operator|.
name|getStorageType
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeDescriptor
name|dnDesc
init|=
name|info
operator|.
name|getDatanodeDescriptor
argument_list|()
decl_stmt|;
comment|// check the locations that are returned by FSCK have the right name
name|assertEquals
argument_list|(
name|ProvidedStorageMap
operator|.
name|ProvidedDescriptor
operator|.
name|NETWORK_LOCATION
operator|+
name|PATH_SEPARATOR_STR
operator|+
name|ProvidedStorageMap
operator|.
name|ProvidedDescriptor
operator|.
name|NAME
argument_list|,
name|NodeBase
operator|.
name|getPath
argument_list|(
name|dnDesc
argument_list|)
argument_list|)
expr_stmt|;
comment|// no DatanodeStorageInfos should remain
name|assertFalse
argument_list|(
name|storagesItr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500000
argument_list|)
DECL|method|testDefaultReplication ()
specifier|public
name|void
name|testDefaultReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|targetReplication
init|=
literal|2
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FixedBlockMultiReplicaResolver
operator|.
name|REPLICATION
argument_list|,
name|targetReplication
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockMultiReplicaResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// make the last Datanode with only DISK
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait for the replication to finish
name|Thread
operator|.
name|sleep
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TreePath
name|e
range|:
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
control|)
block|{
name|FileStatus
name|rs
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|hp
init|=
name|removePrefix
argument_list|(
name|providedPath
argument_list|,
name|rs
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"path: "
operator|+
name|hp
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|accept
argument_list|(
name|count
operator|++
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|hs
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hp
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|BlockLocation
index|[]
name|bl
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|hs
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|hs
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|bl
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|currentRep
init|=
name|bl
index|[
name|i
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
name|targetReplication
argument_list|,
name|currentRep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|removePrefix (Path base, Path walk)
specifier|static
name|Path
name|removePrefix
parameter_list|(
name|Path
name|base
parameter_list|,
name|Path
name|walk
parameter_list|)
block|{
name|Path
name|wpath
init|=
operator|new
name|Path
argument_list|(
name|walk
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|bpath
init|=
operator|new
name|Path
argument_list|(
name|base
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|ret
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|bpath
operator|.
name|equals
argument_list|(
name|wpath
argument_list|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|wpath
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ret
operator|=
literal|""
operator|.
name|equals
argument_list|(
name|ret
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
name|wpath
operator|.
name|getName
argument_list|()
argument_list|)
else|:
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
name|wpath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wpath
operator|=
name|wpath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bpath
operator|.
name|equals
argument_list|(
name|wpath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|base
operator|+
literal|" not a prefix of "
operator|+
name|walk
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|verifyFileSystemContents (int nnIndex)
specifier|private
name|void
name|verifyFileSystemContents
parameter_list|(
name|int
name|nnIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|(
name|nnIndex
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// read NN metadata, verify contents match
for|for
control|(
name|TreePath
name|e
range|:
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
control|)
block|{
name|FileStatus
name|rs
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|hp
init|=
name|removePrefix
argument_list|(
name|providedPath
argument_list|,
name|rs
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"path: "
operator|+
name|hp
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|accept
argument_list|(
name|count
operator|++
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|hs
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hp
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|hs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getPermission
argument_list|()
argument_list|,
name|hs
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getOwner
argument_list|()
argument_list|,
name|hs
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getGroup
argument_list|()
argument_list|,
name|hs
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rs
operator|.
name|getLen
argument_list|()
argument_list|,
name|hs
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ReadableByteChannel
name|i
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|rs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
try|try
init|(
name|ReadableByteChannel
name|j
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|hs
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|ByteBuffer
name|ib
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|ByteBuffer
name|jb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|il
init|=
name|i
operator|.
name|read
argument_list|(
name|ib
argument_list|)
decl_stmt|;
name|int
name|jl
init|=
name|j
operator|.
name|read
argument_list|(
name|jb
argument_list|)
decl_stmt|;
if|if
condition|(
name|il
operator|<
literal|0
operator|||
name|jl
operator|<
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|il
argument_list|,
name|jl
argument_list|)
expr_stmt|;
break|break;
block|}
name|ib
operator|.
name|flip
argument_list|()
expr_stmt|;
name|jb
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|cmp
init|=
name|Math
operator|.
name|min
argument_list|(
name|ib
operator|.
name|remaining
argument_list|()
argument_list|,
name|jb
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|cmp
condition|;
operator|++
name|k
control|)
block|{
name|assertEquals
argument_list|(
name|ib
operator|.
name|get
argument_list|()
argument_list|,
name|jb
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ib
operator|.
name|compact
argument_list|()
expr_stmt|;
name|jb
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|createFile (Path path, short replication, long fileLen, long blockLen)
specifier|private
name|BlockLocation
index|[]
name|createFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|long
name|blockLen
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// create a file that is not provided
name|DFSTestUtil
operator|.
name|createFile
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|blockLen
argument_list|,
name|fileLen
argument_list|,
name|blockLen
argument_list|,
name|replication
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testClusterWithEmptyImage ()
specifier|public
name|void
name|testClusterWithEmptyImage
parameter_list|()
throws|throws
name|IOException
block|{
comment|// start a cluster with 2 datanodes without any provided storage
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|isDataNodeUp
argument_list|()
argument_list|)
expr_stmt|;
name|BlockLocation
index|[]
name|locations
init|=
name|createFile
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/testFile1.dat"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locations
index|[
literal|0
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getAndCheckBlockLocations (DFSClient client, String filename, long fileLen, long expectedBlocks, int expectedLocations)
specifier|private
name|DatanodeInfo
index|[]
name|getAndCheckBlockLocations
parameter_list|(
name|DFSClient
name|client
parameter_list|,
name|String
name|filename
parameter_list|,
name|long
name|fileLen
parameter_list|,
name|long
name|expectedBlocks
parameter_list|,
name|int
name|expectedLocations
parameter_list|)
throws|throws
name|IOException
block|{
name|LocatedBlocks
name|locatedBlocks
init|=
name|client
operator|.
name|getLocatedBlocks
argument_list|(
name|filename
argument_list|,
literal|0
argument_list|,
name|fileLen
argument_list|)
decl_stmt|;
comment|// given the start and length in the above call,
comment|// only one LocatedBlock in LocatedBlocks
name|assertEquals
argument_list|(
name|expectedBlocks
argument_list|,
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DatanodeInfo
index|[]
name|locations
init|=
name|locatedBlocks
operator|.
name|getLocatedBlocks
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLocations
argument_list|,
name|locations
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkUniqueness
argument_list|(
name|locations
argument_list|)
expr_stmt|;
return|return
name|locations
return|;
block|}
comment|/**    * verify that the given locations are all unique.    * @param locations    */
DECL|method|checkUniqueness (DatanodeInfo[] locations)
specifier|private
name|void
name|checkUniqueness
parameter_list|(
name|DatanodeInfo
index|[]
name|locations
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatanodeInfo
name|info
range|:
name|locations
control|)
block|{
name|assertFalse
argument_list|(
literal|"All locations should be unique"
argument_list|,
name|set
operator|.
name|contains
argument_list|(
name|info
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|info
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests setting replication of provided files.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testSetReplicationForProvidedFiles ()
specifier|public
name|void
name|testSetReplicationForProvidedFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// 10 Datanodes with both DISK and PROVIDED storage
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|10
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setAndUnsetReplication
argument_list|(
literal|"/"
operator|+
name|filePrefix
operator|+
operator|(
name|numFiles
operator|-
literal|1
operator|)
operator|+
name|fileSuffix
argument_list|)
expr_stmt|;
block|}
DECL|method|setAndUnsetReplication (String filename)
specifier|private
name|void
name|setAndUnsetReplication
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// set the replication to 4, and test that the file has
comment|// the required replication.
name|short
name|newReplication
init|=
literal|4
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting replication of file {} to {}"
argument_list|,
name|filename
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|file
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
argument_list|,
name|file
argument_list|,
name|newReplication
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|getAndCheckBlockLocations
argument_list|(
name|client
argument_list|,
name|filename
argument_list|,
name|baseFileLen
argument_list|,
literal|1
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
comment|// set the replication back to 1
name|newReplication
operator|=
literal|1
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting replication of file {} back to {}"
argument_list|,
name|filename
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setReplication
argument_list|(
name|file
argument_list|,
name|newReplication
argument_list|)
expr_stmt|;
comment|// defaultReplication number of replicas should be returned
name|int
name|defaultReplication
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_DEFAULT
argument_list|)
decl_stmt|;
name|DFSTestUtil
operator|.
name|waitForReplication
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|fs
argument_list|,
name|file
argument_list|,
operator|(
name|short
operator|)
name|defaultReplication
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|getAndCheckBlockLocations
argument_list|(
name|client
argument_list|,
name|filename
argument_list|,
name|baseFileLen
argument_list|,
literal|1
argument_list|,
name|defaultReplication
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testProvidedDatanodeFailures ()
specifier|public
name|void
name|testProvidedDatanodeFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DataNode
name|providedDatanode1
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DataNode
name|providedDatanode2
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|DatanodeStorageInfo
name|providedDNInfo
init|=
name|getProvidedDatanodeStorageInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|numFiles
operator|>=
literal|1
condition|)
block|{
name|String
name|filename
init|=
literal|"/"
operator|+
name|filePrefix
operator|+
operator|(
name|numFiles
operator|-
literal|1
operator|)
operator|+
name|fileSuffix
decl_stmt|;
comment|// 2 locations returned as there are 2 PROVIDED datanodes
name|DatanodeInfo
index|[]
name|dnInfos
init|=
name|getAndCheckBlockLocations
argument_list|(
name|client
argument_list|,
name|filename
argument_list|,
name|baseFileLen
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// the location should be one of the provided DNs available
name|assertTrue
argument_list|(
name|dnInfos
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|providedDatanode1
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
operator|||
name|dnInfos
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
operator|.
name|equals
argument_list|(
name|providedDatanode2
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// stop the 1st provided datanode
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|providedDNProperties1
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// make NameNode detect that datanode is down
name|BlockManagerTestUtil
operator|.
name|noticeDeadDatanode
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|providedDatanode1
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
comment|// should find the block on the 2nd provided datanode
name|dnInfos
operator|=
name|getAndCheckBlockLocations
argument_list|(
name|client
argument_list|,
name|filename
argument_list|,
name|baseFileLen
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providedDatanode2
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|,
name|dnInfos
index|[
literal|0
index|]
operator|.
name|getDatanodeUuid
argument_list|()
argument_list|)
expr_stmt|;
comment|// stop the 2nd provided datanode
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|providedDNProperties2
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// make NameNode detect that datanode is down
name|BlockManagerTestUtil
operator|.
name|noticeDeadDatanode
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|providedDatanode2
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|getAndCheckBlockLocations
argument_list|(
name|client
argument_list|,
name|filename
argument_list|,
name|baseFileLen
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// BR count for the provided ProvidedDatanodeStorageInfo should reset to
comment|// 0, when all DNs with PROVIDED storage fail.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|providedDNInfo
operator|.
name|getBlockReportCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart the provided datanode
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|providedDNProperties1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|providedDNInfo
operator|.
name|getBlockReportCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// should find the block on the 1st provided datanode now
name|dnInfos
operator|=
name|getAndCheckBlockLocations
argument_list|(
name|client
argument_list|,
name|filename
argument_list|,
name|baseFileLen
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// not comparing UUIDs as the datanode can now have a different one.
name|assertEquals
argument_list|(
name|providedDatanode1
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|,
name|dnInfos
index|[
literal|0
index|]
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTransientDeadDatanodes ()
specifier|public
name|void
name|testTransientDeadDatanodes
parameter_list|()
throws|throws
name|Exception
block|{
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// 3 Datanodes, 2 PROVIDED and other DISK
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|DataNode
name|providedDatanode
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DatanodeStorageInfo
name|providedDNInfo
init|=
name|getProvidedDatanodeStorageInfo
argument_list|()
decl_stmt|;
name|int
name|initialBRCount
init|=
name|providedDNInfo
operator|.
name|getBlockReportCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
comment|// expect to have 2 locations as we have 2 provided Datanodes.
name|verifyFileLocation
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// NameNode thinks the datanode is down
name|BlockManagerTestUtil
operator|.
name|noticeDeadDatanode
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|providedDatanode
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// the report count should just continue to increase.
name|assertEquals
argument_list|(
name|initialBRCount
operator|+
name|i
operator|+
literal|1
argument_list|,
name|providedDNInfo
operator|.
name|getBlockReportCount
argument_list|()
argument_list|)
expr_stmt|;
name|verifyFileLocation
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getProvidedDatanodeStorageInfo ()
specifier|private
name|DatanodeStorageInfo
name|getProvidedDatanodeStorageInfo
parameter_list|()
block|{
name|ProvidedStorageMap
name|providedStorageMap
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
operator|.
name|getProvidedStorageMap
argument_list|()
decl_stmt|;
return|return
name|providedStorageMap
operator|.
name|getProvidedStorageInfo
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNamenodeRestart ()
specifier|public
name|void
name|testNamenodeRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// 3 Datanodes, 2 PROVIDED and other DISK
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyFileLocation
argument_list|(
name|numFiles
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartNameNodes
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|verifyFileLocation
argument_list|(
name|numFiles
operator|-
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * verify that the specified file has a valid provided location.    * @param fileIndex the index of the file to verify.    * @throws Exception    */
DECL|method|verifyFileLocation (int fileIndex, int replication)
specifier|private
name|void
name|verifyFileLocation
parameter_list|(
name|int
name|fileIndex
parameter_list|,
name|int
name|replication
parameter_list|)
throws|throws
name|Exception
block|{
name|DFSClient
name|client
init|=
operator|new
name|DFSClient
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
name|cluster
operator|.
name|getNameNodePort
argument_list|()
argument_list|)
argument_list|,
name|cluster
operator|.
name|getConfiguration
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileIndex
operator|<
name|numFiles
operator|&&
name|fileIndex
operator|>=
literal|0
condition|)
block|{
name|String
name|filename
init|=
name|filePrefix
operator|+
name|fileIndex
operator|+
name|fileSuffix
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|providedPath
argument_list|,
name|filename
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|fileLen
init|=
name|file
operator|.
name|length
argument_list|()
decl_stmt|;
name|long
name|blockSize
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|FixedBlockResolver
operator|.
name|BLOCKSIZE
argument_list|,
name|FixedBlockResolver
operator|.
name|BLOCKSIZE_DEFAULT
argument_list|)
decl_stmt|;
name|long
name|numLocatedBlocks
init|=
name|fileLen
operator|==
literal|0
condition|?
literal|1
else|:
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|fileLen
operator|*
literal|1.0
operator|/
name|blockSize
argument_list|)
decl_stmt|;
name|getAndCheckBlockLocations
argument_list|(
name|client
argument_list|,
literal|"/"
operator|+
name|filename
argument_list|,
name|fileLen
argument_list|,
name|numLocatedBlocks
argument_list|,
name|replication
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSetClusterID ()
specifier|public
name|void
name|testSetClusterID
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clusterID
init|=
literal|"PROVIDED-CLUSTER"
decl_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|,
name|clusterID
argument_list|,
name|TextFileRegionAliasMap
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// 2 Datanodes, 1 PROVIDED and other DISK
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|NameNode
name|nn
init|=
name|cluster
operator|.
name|getNameNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|clusterID
argument_list|,
name|nn
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getClusterId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNumberOfProvidedLocations ()
specifier|public
name|void
name|testNumberOfProvidedLocations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set default replication to 4
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// start with 4 PROVIDED location
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|4
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|expectedLocations
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|verifyFileLocation
argument_list|(
name|i
argument_list|,
name|expectedLocations
argument_list|)
expr_stmt|;
block|}
comment|// stop 2 datanodes, one after the other and verify number of locations.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|DataNode
name|dn
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// make NameNode detect that datanode is down
name|BlockManagerTestUtil
operator|.
name|noticeDeadDatanode
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|dn
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
name|expectedLocations
operator|=
literal|4
operator|-
name|i
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numFiles
condition|;
name|j
operator|++
control|)
block|{
name|verifyFileLocation
argument_list|(
name|j
argument_list|,
name|expectedLocations
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNumberOfProvidedLocationsManyBlocks ()
specifier|public
name|void
name|testNumberOfProvidedLocationsManyBlocks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// increase number of blocks per file to at least 10 blocks per file
name|conf
operator|.
name|setLong
argument_list|(
name|FixedBlockResolver
operator|.
name|BLOCKSIZE
argument_list|,
name|baseFileLen
operator|/
literal|10
argument_list|)
expr_stmt|;
comment|// set default replication to 4
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_REPLICATION_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// start with 4 PROVIDED location
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|4
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|expectedLocations
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFiles
condition|;
name|i
operator|++
control|)
block|{
name|verifyFileLocation
argument_list|(
name|i
argument_list|,
name|expectedLocations
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createInMemoryAliasMapImage ()
specifier|private
name|File
name|createInMemoryAliasMapImage
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|ImageWriter
operator|.
name|Options
operator|.
name|UGI_CLASS
argument_list|,
name|FsUGIResolver
operator|.
name|class
argument_list|,
name|UGIResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_CLASS
argument_list|,
name|InMemoryLevelDBAliasMapClient
operator|.
name|class
argument_list|,
name|BlockAliasMap
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
argument_list|,
literal|"localhost:32445"
argument_list|)
expr_stmt|;
name|File
name|tempDirectory
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|nnDirPath
argument_list|,
literal|"in-memory-alias-map"
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|levelDBDir
init|=
operator|new
name|File
argument_list|(
name|tempDirectory
argument_list|,
name|bpid
argument_list|)
decl_stmt|;
name|levelDBDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR
argument_list|,
name|tempDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_LOAD_RETRIES
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_PROVIDED_ALIASMAP_LEVELDB_PATH
argument_list|,
name|tempDirectory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|,
name|clusterID
argument_list|,
name|LevelDBFileRegionAliasMap
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|tempDirectory
return|;
block|}
annotation|@
name|Test
DECL|method|testInMemoryAliasMap ()
specifier|public
name|void
name|testInMemoryAliasMap
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|aliasMapImage
init|=
name|createInMemoryAliasMapImage
argument_list|()
decl_stmt|;
comment|// start cluster with two datanodes,
comment|// each with 1 PROVIDED volume and other DISK volume
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_LOAD_RETRIES
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|2
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyFileSystemContents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|aliasMapImage
argument_list|)
expr_stmt|;
block|}
comment|/**    * Find a free port that hasn't been assigned yet.    *    * @param usedPorts set of ports that have already been assigned.    * @param maxTrials maximum number of random ports to try before failure.    * @return an unassigned port.    */
DECL|method|getUnAssignedPort (Set<Integer> usedPorts, int maxTrials)
specifier|private
name|int
name|getUnAssignedPort
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|usedPorts
parameter_list|,
name|int
name|maxTrials
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|maxTrials
condition|)
block|{
name|int
name|port
init|=
name|NetUtils
operator|.
name|getFreeSocketPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|usedPorts
operator|.
name|contains
argument_list|(
name|port
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
return|return
name|port
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|field|providedNameservice
specifier|private
specifier|static
name|String
name|providedNameservice
decl_stmt|;
comment|/**    * Extends the {@link MiniDFSCluster.Builder} to create instances of    * {@link MiniDFSClusterBuilderAliasMap}.    */
DECL|class|MiniDFSClusterBuilderAliasMap
specifier|private
specifier|static
class|class
name|MiniDFSClusterBuilderAliasMap
extends|extends
name|MiniDFSCluster
operator|.
name|Builder
block|{
DECL|method|MiniDFSClusterBuilderAliasMap (Configuration conf)
name|MiniDFSClusterBuilderAliasMap
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|build ()
specifier|public
name|MiniDFSCluster
name|build
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|MiniDFSClusterAliasMap
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * Extends {@link MiniDFSCluster} to correctly configure the InMemoryAliasMap.    */
DECL|class|MiniDFSClusterAliasMap
specifier|private
specifier|static
class|class
name|MiniDFSClusterAliasMap
extends|extends
name|MiniDFSCluster
block|{
DECL|field|formattedDirsByNamespaceId
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|URI
argument_list|>
argument_list|>
name|formattedDirsByNamespaceId
decl_stmt|;
DECL|field|completedNNs
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|completedNNs
decl_stmt|;
DECL|method|MiniDFSClusterAliasMap (MiniDFSCluster.Builder builder)
name|MiniDFSClusterAliasMap
parameter_list|(
name|MiniDFSCluster
operator|.
name|Builder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initNameNodeConf (Configuration conf, String nameserviceId, int nsIndex, String nnId, boolean manageNameDfsDirs, boolean enableManagedDfsDirsRedundancy, int nnIndex)
specifier|protected
name|void
name|initNameNodeConf
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|nameserviceId
parameter_list|,
name|int
name|nsIndex
parameter_list|,
name|String
name|nnId
parameter_list|,
name|boolean
name|manageNameDfsDirs
parameter_list|,
name|boolean
name|enableManagedDfsDirsRedundancy
parameter_list|,
name|int
name|nnIndex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|formattedDirsByNamespaceId
operator|==
literal|null
condition|)
block|{
name|formattedDirsByNamespaceId
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|completedNNs
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|initNameNodeConf
argument_list|(
name|conf
argument_list|,
name|nameserviceId
argument_list|,
name|nsIndex
argument_list|,
name|nnId
argument_list|,
name|manageNameDfsDirs
argument_list|,
name|enableManagedDfsDirsRedundancy
argument_list|,
name|nnIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|providedNameservice
operator|.
name|equals
argument_list|(
name|nameserviceId
argument_list|)
condition|)
block|{
comment|// configure the InMemoryAliasMp.
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|directory
init|=
name|conf
operator|.
name|get
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"In-memory alias map configured"
operator|+
literal|"with the proper location; Set "
operator|+
name|DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR
argument_list|)
throw|;
block|}
comment|// get the name of the directory (final component in path) used for map.
comment|// Assume that the aliasmap configured with the same final component
comment|// name in all Namenodes but is located in the path specified by
comment|// DFS_NAMENODE_NAME_DIR_KEY
name|String
name|dirName
init|=
operator|new
name|Path
argument_list|(
name|directory
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|nnDir
init|=
name|conf
operator|.
name|getTrimmedStringCollection
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_LEVELDB_DIR
argument_list|,
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|nnDir
argument_list|,
name|dirName
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PROVIDED_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|completedNNs
operator|.
name|contains
argument_list|(
name|nnIndex
argument_list|)
condition|)
block|{
comment|// format the NN directories for non-provided namespaces
comment|// if the directory for a namespace has been formatted, copy it over.
name|Collection
argument_list|<
name|URI
argument_list|>
name|namespaceDirs
init|=
name|FSNamesystem
operator|.
name|getNamespaceDirs
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|formattedDirsByNamespaceId
operator|.
name|containsKey
argument_list|(
name|nameserviceId
argument_list|)
condition|)
block|{
name|copyNameDirs
argument_list|(
name|formattedDirsByNamespaceId
operator|.
name|get
argument_list|(
name|nameserviceId
argument_list|)
argument_list|,
name|namespaceDirs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|URI
name|nameDirUri
range|:
name|namespaceDirs
control|)
block|{
name|File
name|nameDir
init|=
operator|new
name|File
argument_list|(
name|nameDirUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameDir
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|nameDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not fully delete "
operator|+
name|nameDir
argument_list|)
throw|;
block|}
block|}
name|HdfsServerConstants
operator|.
name|StartupOption
operator|.
name|FORMAT
operator|.
name|setClusterId
argument_list|(
name|clusterID
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|formatNameNode
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|formattedDirsByNamespaceId
operator|.
name|put
argument_list|(
name|nameserviceId
argument_list|,
name|namespaceDirs
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PROVIDED_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|completedNNs
operator|.
name|add
argument_list|(
name|nnIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Configures the addresseses of the InMemoryAliasMap.    *    * @param topology the MiniDFS topology to use.    * @param providedNameservice the nameservice id that supports provided.    */
DECL|method|configureAliasMapAddresses (MiniDFSNNTopology topology, String providedNameservice)
specifier|private
name|void
name|configureAliasMapAddresses
parameter_list|(
name|MiniDFSNNTopology
name|topology
parameter_list|,
name|String
name|providedNameservice
parameter_list|)
block|{
name|conf
operator|.
name|unset
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|assignedPorts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MiniDFSNNTopology
operator|.
name|NSConf
name|nsConf
range|:
name|topology
operator|.
name|getNameservices
argument_list|()
control|)
block|{
for|for
control|(
name|MiniDFSNNTopology
operator|.
name|NNConf
name|nnConf
range|:
name|nsConf
operator|.
name|getNNs
argument_list|()
control|)
block|{
if|if
condition|(
name|providedNameservice
operator|.
name|equals
argument_list|(
name|nsConf
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_ADDRESS
argument_list|,
name|nsConf
operator|.
name|getId
argument_list|()
argument_list|,
name|nnConf
operator|.
name|getNnId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|getUnAssignedPort
argument_list|(
name|assignedPorts
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No free ports available"
argument_list|)
throw|;
block|}
name|assignedPorts
operator|.
name|add
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|key
argument_list|,
literal|"127.0.0.1:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|String
name|binHostKey
init|=
name|DFSUtil
operator|.
name|addKeySuffixes
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_RPC_BIND_HOST
argument_list|,
name|nsConf
operator|.
name|getId
argument_list|()
argument_list|,
name|nnConf
operator|.
name|getNnId
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|binHostKey
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Verify the mounted contents of the Filesystem.    *    * @param topology the topology of the cluster.    * @param providedNameservice the namespace id of the provided namenodes.    * @throws Exception    */
DECL|method|verifyPathsWithHAFailoverIfNecessary (MiniDFSNNTopology topology, String providedNameservice)
specifier|private
name|void
name|verifyPathsWithHAFailoverIfNecessary
parameter_list|(
name|MiniDFSNNTopology
name|topology
parameter_list|,
name|String
name|providedNameservice
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|nnIndexes
init|=
name|cluster
operator|.
name|getNNIndexes
argument_list|(
name|providedNameservice
argument_list|)
decl_stmt|;
if|if
condition|(
name|topology
operator|.
name|isHA
argument_list|()
condition|)
block|{
name|int
name|nn1
init|=
name|nnIndexes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|nn2
init|=
name|nnIndexes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|verifyFileSystemContents
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Read operation should fail as no Namenode is active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyPaths failed!. Expected exception: {}"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying data from NN with index = {}"
argument_list|,
name|nn1
argument_list|)
expr_stmt|;
name|verifyFileSystemContents
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
comment|// transition to the second namenode.
name|cluster
operator|.
name|transitionToStandby
argument_list|(
name|nn1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|transitionToActive
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying data from NN with index = {}"
argument_list|,
name|nn2
argument_list|)
expr_stmt|;
name|verifyFileSystemContents
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdownNameNodes
argument_list|()
expr_stmt|;
try|try
block|{
name|verifyFileSystemContents
argument_list|(
name|nn2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Read operation should fail as no Namenode is active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"verifyPaths failed!. Expected exception: {}"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|verifyFileSystemContents
argument_list|(
name|nnIndexes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInMemoryAliasMapMultiTopologies ()
specifier|public
name|void
name|testInMemoryAliasMapMultiTopologies
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniDFSNNTopology
index|[]
name|topologies
init|=
operator|new
name|MiniDFSNNTopology
index|[]
block|{
name|MiniDFSNNTopology
operator|.
name|simpleHATopology
argument_list|()
block|,
name|MiniDFSNNTopology
operator|.
name|simpleFederatedTopology
argument_list|(
literal|3
argument_list|)
block|,
name|MiniDFSNNTopology
operator|.
name|simpleHAFederatedTopology
argument_list|(
literal|3
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|MiniDFSNNTopology
name|topology
range|:
name|topologies
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting test with topology with HA = {}, federation = {}"
argument_list|,
name|topology
operator|.
name|isHA
argument_list|()
argument_list|,
name|topology
operator|.
name|isFederated
argument_list|()
argument_list|)
expr_stmt|;
name|setSeed
argument_list|()
expr_stmt|;
name|createInMemoryAliasMapImage
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFS_PROVIDED_ALIASMAP_INMEMORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_ALIASMAP_LOAD_RETRIES
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|providedNameservice
operator|=
name|topology
operator|.
name|getNameservices
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
comment|// configure the AliasMap addresses
name|configureAliasMapAddresses
argument_list|(
name|topology
argument_list|,
name|providedNameservice
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|2
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|topology
argument_list|,
operator|new
name|MiniDFSClusterBuilderAliasMap
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|verifyPathsWithHAFailoverIfNecessary
argument_list|(
name|topology
argument_list|,
name|providedNameservice
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getDatanodeDescriptor (DatanodeManager dnm, int dnIndex)
specifier|private
name|DatanodeDescriptor
name|getDatanodeDescriptor
parameter_list|(
name|DatanodeManager
name|dnm
parameter_list|,
name|int
name|dnIndex
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|dnm
operator|.
name|getDatanode
argument_list|(
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
name|dnIndex
argument_list|)
operator|.
name|getDatanodeId
argument_list|()
argument_list|)
return|;
block|}
DECL|method|startDecommission (FSNamesystem namesystem, DatanodeManager dnm, int dnIndex)
specifier|private
name|void
name|startDecommission
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|DatanodeManager
name|dnm
parameter_list|,
name|int
name|dnIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|DatanodeDescriptor
name|dnDesc
init|=
name|getDatanodeDescriptor
argument_list|(
name|dnm
argument_list|,
name|dnIndex
argument_list|)
decl_stmt|;
name|dnm
operator|.
name|getDatanodeAdminManager
argument_list|()
operator|.
name|startDecommission
argument_list|(
name|dnDesc
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
DECL|method|startMaintenance (FSNamesystem namesystem, DatanodeManager dnm, int dnIndex)
specifier|private
name|void
name|startMaintenance
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|DatanodeManager
name|dnm
parameter_list|,
name|int
name|dnIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|DatanodeDescriptor
name|dnDesc
init|=
name|getDatanodeDescriptor
argument_list|(
name|dnm
argument_list|,
name|dnIndex
argument_list|)
decl_stmt|;
name|dnm
operator|.
name|getDatanodeAdminManager
argument_list|()
operator|.
name|startMaintenance
argument_list|(
name|dnDesc
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
DECL|method|stopMaintenance (FSNamesystem namesystem, DatanodeManager dnm, int dnIndex)
specifier|private
name|void
name|stopMaintenance
parameter_list|(
name|FSNamesystem
name|namesystem
parameter_list|,
name|DatanodeManager
name|dnm
parameter_list|,
name|int
name|dnIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|namesystem
operator|.
name|writeLock
argument_list|()
expr_stmt|;
name|DatanodeDescriptor
name|dnDesc
init|=
name|getDatanodeDescriptor
argument_list|(
name|dnm
argument_list|,
name|dnIndex
argument_list|)
decl_stmt|;
name|dnm
operator|.
name|getDatanodeAdminManager
argument_list|()
operator|.
name|stopMaintenance
argument_list|(
name|dnDesc
argument_list|)
expr_stmt|;
name|namesystem
operator|.
name|writeUnlock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatanodeLifeCycle ()
specifier|public
name|void
name|testDatanodeLifeCycle
parameter_list|()
throws|throws
name|Exception
block|{
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
literal|3
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|fileIndex
init|=
name|numFiles
operator|-
literal|1
decl_stmt|;
specifier|final
name|BlockManager
name|blockManager
init|=
name|cluster
operator|.
name|getNamesystem
argument_list|()
operator|.
name|getBlockManager
argument_list|()
decl_stmt|;
specifier|final
name|DatanodeManager
name|dnm
init|=
name|blockManager
operator|.
name|getDatanodeManager
argument_list|()
decl_stmt|;
comment|// to start, all 3 DNs are live in ProvidedDatanodeDescriptor.
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// de-commision first DN; still get 3 replicas.
name|startDecommission
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|dnm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// remains the same even after heartbeats.
name|cluster
operator|.
name|triggerHeartbeats
argument_list|()
expr_stmt|;
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// start maintenance for 2nd DN; still get 3 replicas.
name|startMaintenance
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|dnm
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|DataNode
name|dn1
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DataNode
name|dn2
init|=
name|cluster
operator|.
name|getDataNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// stop the 1st DN while being decomissioned.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dn1Properties
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BlockManagerTestUtil
operator|.
name|noticeDeadDatanode
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|dn1
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
comment|// get 2 locations
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// stop dn2 while in maintenance.
name|MiniDFSCluster
operator|.
name|DataNodeProperties
name|dn2Properties
init|=
name|cluster
operator|.
name|stopDataNode
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|BlockManagerTestUtil
operator|.
name|noticeDeadDatanode
argument_list|(
name|cluster
operator|.
name|getNameNode
argument_list|()
argument_list|,
name|dn2
operator|.
name|getDatanodeId
argument_list|()
operator|.
name|getXferAddr
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 valid locations will be found as blocks on nodes that die during
comment|// maintenance are not marked for removal.
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// stop the maintenance; get only 1 replicas
name|stopMaintenance
argument_list|(
name|cluster
operator|.
name|getNamesystem
argument_list|()
argument_list|,
name|dnm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// restart the stopped DN.
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dn1Properties
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// reports all 3 replicas
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|restartDataNode
argument_list|(
name|dn2Properties
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
comment|// reports all 3 replicas
name|verifyFileLocation
argument_list|(
name|fileIndex
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProvidedWithHierarchicalTopology ()
specifier|public
name|void
name|testProvidedWithHierarchicalTopology
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|ImageWriter
operator|.
name|Options
operator|.
name|UGI_CLASS
argument_list|,
name|FsUGIResolver
operator|.
name|class
argument_list|,
name|UGIResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|packageName
init|=
literal|"org.apache.hadoop.hdfs.server.blockmanagement"
decl_stmt|;
name|String
index|[]
name|policies
init|=
operator|new
name|String
index|[]
block|{
literal|"BlockPlacementPolicyDefault"
block|,
literal|"BlockPlacementPolicyRackFaultTolerant"
block|,
literal|"BlockPlacementPolicyWithNodeGroup"
block|,
literal|"BlockPlacementPolicyWithUpgradeDomain"
block|}
decl_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|providedPath
argument_list|,
name|conf
argument_list|)
argument_list|,
name|nnDirPath
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
index|[]
name|racks
init|=
block|{
literal|"/pod0/rack0"
block|,
literal|"/pod0/rack0"
block|,
literal|"/pod0/rack1"
block|,
literal|"/pod0/rack1"
block|,
literal|"/pod1/rack0"
block|,
literal|"/pod1/rack0"
block|,
literal|"/pod1/rack1"
block|,
literal|"/pod1/rack1"
block|}
decl_stmt|;
for|for
control|(
name|String
name|policy
range|:
name|policies
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using policy: "
operator|+
name|packageName
operator|+
literal|"."
operator|+
name|policy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFS_BLOCK_REPLICATOR_CLASSNAME_KEY
argument_list|,
name|packageName
operator|+
literal|"."
operator|+
name|policy
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|nnDirPath
argument_list|,
name|racks
operator|.
name|length
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|,
name|StorageType
operator|.
name|DISK
block|}
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|racks
argument_list|)
expr_stmt|;
name|verifyFileSystemContents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|setAndUnsetReplication
argument_list|(
literal|"/"
operator|+
name|filePrefix
operator|+
operator|(
name|numFiles
operator|-
literal|1
operator|)
operator|+
name|fileSuffix
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

