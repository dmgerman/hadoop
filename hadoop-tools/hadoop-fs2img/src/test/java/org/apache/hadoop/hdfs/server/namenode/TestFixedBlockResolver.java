begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|proto
operator|.
name|HdfsProtos
operator|.
name|BlockProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Validate fixed-size block partitioning.  */
end_comment

begin_class
DECL|class|TestFixedBlockResolver
specifier|public
class|class
name|TestFixedBlockResolver
block|{
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|blockId
specifier|private
specifier|final
name|FixedBlockResolver
name|blockId
init|=
operator|new
name|FixedBlockResolver
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FixedBlockResolver
operator|.
name|BLOCKSIZE
argument_list|,
literal|512L
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FixedBlockResolver
operator|.
name|START_BLOCK
argument_list|,
literal|512L
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
argument_list|)
expr_stmt|;
name|blockId
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExactBlock ()
specifier|public
name|void
name|testExactBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
name|f
init|=
name|file
argument_list|(
literal|512
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|int
name|nblocks
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockProto
name|b
range|:
name|blockId
operator|.
name|resolve
argument_list|(
name|f
argument_list|)
control|)
block|{
operator|++
name|nblocks
expr_stmt|;
name|assertEquals
argument_list|(
literal|512L
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nblocks
argument_list|)
expr_stmt|;
name|FileStatus
name|g
init|=
name|file
argument_list|(
literal|1024
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|nblocks
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|BlockProto
name|b
range|:
name|blockId
operator|.
name|resolve
argument_list|(
name|g
argument_list|)
control|)
block|{
operator|++
name|nblocks
expr_stmt|;
name|assertEquals
argument_list|(
literal|512L
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nblocks
argument_list|)
expr_stmt|;
name|FileStatus
name|h
init|=
name|file
argument_list|(
literal|5120
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|nblocks
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|BlockProto
name|b
range|:
name|blockId
operator|.
name|resolve
argument_list|(
name|h
argument_list|)
control|)
block|{
operator|++
name|nblocks
expr_stmt|;
name|assertEquals
argument_list|(
literal|512L
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
argument_list|,
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|nblocks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
name|f
init|=
name|file
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|BlockProto
argument_list|>
name|b
init|=
name|blockId
operator|.
name|resolve
argument_list|(
name|f
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|b
operator|.
name|next
argument_list|()
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|b
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomFile ()
specifier|public
name|void
name|testRandomFile
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|int
name|len
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|4096
argument_list|)
operator|+
literal|512
decl_stmt|;
name|int
name|blk
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|len
operator|-
literal|128
argument_list|)
operator|+
literal|128
decl_stmt|;
name|FileStatus
name|s
init|=
name|file
argument_list|(
name|len
argument_list|,
name|blk
argument_list|)
decl_stmt|;
name|long
name|nbytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BlockProto
name|b
range|:
name|blockId
operator|.
name|resolve
argument_list|(
name|s
argument_list|)
control|)
block|{
name|nbytes
operator|+=
name|b
operator|.
name|getNumBytes
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|512L
operator|*
operator|(
literal|1L
operator|<<
literal|20
operator|)
operator|>=
name|b
operator|.
name|getNumBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|s
operator|.
name|getLen
argument_list|()
argument_list|,
name|nbytes
argument_list|)
expr_stmt|;
block|}
DECL|method|file (long lenMB, long blocksizeMB)
name|FileStatus
name|file
parameter_list|(
name|long
name|lenMB
parameter_list|,
name|long
name|blocksizeMB
parameter_list|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"foo://bar:4344/baz/dingo"
argument_list|)
decl_stmt|;
return|return
operator|new
name|FileStatus
argument_list|(
name|lenMB
operator|*
operator|(
literal|1
operator|<<
literal|20
operator|)
argument_list|,
comment|/* long length,             */
literal|false
argument_list|,
comment|/* boolean isdir,           */
literal|1
argument_list|,
comment|/* int block_replication,   */
name|blocksizeMB
operator|*
operator|(
literal|1
operator|<<
literal|20
operator|)
argument_list|,
comment|/* long blocksize,          */
literal|0L
argument_list|,
comment|/* long modification_time,  */
literal|0L
argument_list|,
comment|/* long access_time,        */
literal|null
argument_list|,
comment|/* FsPermission permission, */
literal|"hadoop"
argument_list|,
comment|/* String owner,            */
literal|"hadoop"
argument_list|,
comment|/* String group,            */
name|p
argument_list|)
return|;
comment|/* Path path                */
block|}
block|}
end_class

end_unit

