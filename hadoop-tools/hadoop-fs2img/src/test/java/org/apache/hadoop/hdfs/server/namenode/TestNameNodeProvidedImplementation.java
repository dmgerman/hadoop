begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.hdfs.server.namenode
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ReadableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|BlockLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|StorageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockFormatProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|blockmanagement
operator|.
name|BlockProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|BlockFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|FileRegionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|TextFileRegionFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|common
operator|.
name|TextFileRegionProvider
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_NAME_DIR_KEY
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestNameNodeProvidedImplementation
specifier|public
class|class
name|TestNameNodeProvidedImplementation
block|{
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNameNodeProvidedImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|r
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|fBASE
specifier|final
name|File
name|fBASE
init|=
operator|new
name|File
argument_list|(
name|MiniDFSCluster
operator|.
name|getBaseDirectory
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|BASE
specifier|final
name|Path
name|BASE
init|=
operator|new
name|Path
argument_list|(
name|fBASE
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|NAMEPATH
specifier|final
name|Path
name|NAMEPATH
init|=
operator|new
name|Path
argument_list|(
name|BASE
argument_list|,
literal|"providedDir"
argument_list|)
decl_stmt|;
empty_stmt|;
DECL|field|NNDIRPATH
specifier|final
name|Path
name|NNDIRPATH
init|=
operator|new
name|Path
argument_list|(
name|BASE
argument_list|,
literal|"nnDir"
argument_list|)
decl_stmt|;
DECL|field|BLOCKFILE
specifier|final
name|Path
name|BLOCKFILE
init|=
operator|new
name|Path
argument_list|(
name|NNDIRPATH
argument_list|,
literal|"blocks.csv"
argument_list|)
decl_stmt|;
DECL|field|SINGLEUSER
specifier|final
name|String
name|SINGLEUSER
init|=
literal|"usr1"
decl_stmt|;
DECL|field|SINGLEGROUP
specifier|final
name|String
name|SINGLEGROUP
init|=
literal|"grp1"
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setSeed ()
specifier|public
name|void
name|setSeed
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|fBASE
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|fBASE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not fully delete "
operator|+
name|fBASE
argument_list|)
throw|;
block|}
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|" seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|HdfsConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SingleUGIResolver
operator|.
name|USER
argument_list|,
name|SINGLEUSER
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SingleUGIResolver
operator|.
name|GROUP
argument_list|,
name|SINGLEGROUP
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_STORAGEUUID
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_STORAGEUUID_DEFAULT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_PROVIDED_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_BLOCK_PROVIDER_CLASS
argument_list|,
name|BlockFormatProvider
operator|.
name|class
argument_list|,
name|BlockProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_CLASS
argument_list|,
name|TextFileRegionProvider
operator|.
name|class
argument_list|,
name|FileRegionProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDER_BLK_FORMAT_CLASS
argument_list|,
name|TextFileRegionFormat
operator|.
name|class
argument_list|,
name|BlockFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_BLOCK_MAP_WRITE_PATH
argument_list|,
name|BLOCKFILE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_BLOCK_MAP_READ_PATH
argument_list|,
name|BLOCKFILE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_PROVIDED_BLOCK_MAP_DELIMITER
argument_list|,
literal|","
argument_list|)
expr_stmt|;
name|File
name|imageDir
init|=
operator|new
name|File
argument_list|(
name|NAMEPATH
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|imageDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating directory: "
operator|+
name|imageDir
argument_list|)
expr_stmt|;
name|imageDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
name|File
name|nnDir
init|=
operator|new
name|File
argument_list|(
name|NNDIRPATH
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nnDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|nnDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
block|}
comment|// create 10 random files under BASE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|File
name|newFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|Path
argument_list|(
name|NAMEPATH
argument_list|,
literal|"file"
operator|+
name|i
argument_list|)
operator|.
name|toUri
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|newFile
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating "
operator|+
name|newFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|newFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|"utf-8"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
operator|*
name|i
condition|;
name|j
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|After
DECL|method|shutdown ()
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cluster
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|createImage (TreeWalk t, Path out, Class<? extends BlockResolver> blockIdsClass)
name|void
name|createImage
parameter_list|(
name|TreeWalk
name|t
parameter_list|,
name|Path
name|out
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|BlockResolver
argument_list|>
name|blockIdsClass
parameter_list|)
throws|throws
name|Exception
block|{
name|ImageWriter
operator|.
name|Options
name|opts
init|=
name|ImageWriter
operator|.
name|defaults
argument_list|()
decl_stmt|;
name|opts
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|opts
operator|.
name|output
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|blocks
argument_list|(
name|TextFileRegionFormat
operator|.
name|class
argument_list|)
operator|.
name|blockIds
argument_list|(
name|blockIdsClass
argument_list|)
expr_stmt|;
try|try
init|(
name|ImageWriter
name|w
init|=
operator|new
name|ImageWriter
argument_list|(
name|opts
argument_list|)
init|)
block|{
for|for
control|(
name|TreePath
name|e
range|:
name|t
control|)
block|{
name|w
operator|.
name|accept
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|startCluster (Path nspath, int numDatanodes, StorageType[] storageTypes, StorageType[][] storageTypesPerDatanode)
name|void
name|startCluster
parameter_list|(
name|Path
name|nspath
parameter_list|,
name|int
name|numDatanodes
parameter_list|,
name|StorageType
index|[]
name|storageTypes
parameter_list|,
name|StorageType
index|[]
index|[]
name|storageTypesPerDatanode
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|DFS_NAMENODE_NAME_DIR_KEY
argument_list|,
name|nspath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|storageTypesPerDatanode
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypesPerDatanode
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|storageTypes
operator|!=
literal|null
condition|)
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|storagesPerDatanode
argument_list|(
name|storageTypes
operator|.
name|length
argument_list|)
operator|.
name|storageTypes
argument_list|(
name|storageTypes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cluster
operator|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|format
argument_list|(
literal|false
argument_list|)
operator|.
name|manageNameDfsDirs
argument_list|(
literal|false
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|numDatanodes
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testLoadImage ()
specifier|public
name|void
name|testLoadImage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"NAMEPATH: "
operator|+
name|NAMEPATH
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|RandomTreeWalk
argument_list|(
name|seed
argument_list|)
argument_list|,
name|NNDIRPATH
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|NNDIRPATH
argument_list|,
literal|0
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
for|for
control|(
name|TreePath
name|e
range|:
operator|new
name|RandomTreeWalk
argument_list|(
name|seed
argument_list|)
control|)
block|{
name|FileStatus
name|rs
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|hp
init|=
operator|new
name|Path
argument_list|(
name|rs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|hs
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|hs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getPermission
argument_list|()
argument_list|,
name|hs
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getLen
argument_list|()
argument_list|,
name|hs
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SINGLEUSER
argument_list|,
name|hs
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SINGLEGROUP
argument_list|,
name|hs
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getAccessTime
argument_list|()
argument_list|,
name|hs
operator|.
name|getAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getModificationTime
argument_list|()
argument_list|,
name|hs
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testBlockLoad ()
specifier|public
name|void
name|testBlockLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|ImageWriter
operator|.
name|Options
operator|.
name|UGI_CLASS
argument_list|,
name|SingleUGIResolver
operator|.
name|class
argument_list|,
name|UGIResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|NAMEPATH
argument_list|,
name|conf
argument_list|)
argument_list|,
name|NNDIRPATH
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|NNDIRPATH
argument_list|,
literal|1
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500000
argument_list|)
DECL|method|testDefaultReplication ()
specifier|public
name|void
name|testDefaultReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|targetReplication
init|=
literal|2
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FixedBlockMultiReplicaResolver
operator|.
name|REPLICATION
argument_list|,
name|targetReplication
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|NAMEPATH
argument_list|,
name|conf
argument_list|)
argument_list|,
name|NNDIRPATH
argument_list|,
name|FixedBlockMultiReplicaResolver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// make the last Datanode with only DISK
name|startCluster
argument_list|(
name|NNDIRPATH
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
operator|new
name|StorageType
index|[]
index|[]
block|{
block|{
name|StorageType
operator|.
name|PROVIDED
block|}
block|,
block|{
name|StorageType
operator|.
name|PROVIDED
block|}
block|,
block|{
name|StorageType
operator|.
name|DISK
block|}
block|}
argument_list|)
expr_stmt|;
comment|// wait for the replication to finish
name|Thread
operator|.
name|sleep
argument_list|(
literal|50000
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TreePath
name|e
range|:
operator|new
name|FSTreeWalk
argument_list|(
name|NAMEPATH
argument_list|,
name|conf
argument_list|)
control|)
block|{
name|FileStatus
name|rs
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|hp
init|=
name|removePrefix
argument_list|(
name|NAMEPATH
argument_list|,
name|rs
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hp "
operator|+
name|hp
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip HDFS specific files, which may have been created later on.
if|if
condition|(
name|hp
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"in_use.lock"
argument_list|)
operator|||
name|hp
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"current"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|e
operator|.
name|accept
argument_list|(
name|count
operator|++
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|hs
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hp
argument_list|)
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|BlockLocation
index|[]
name|bl
init|=
name|fs
operator|.
name|getFileBlockLocations
argument_list|(
name|hs
operator|.
name|getPath
argument_list|()
argument_list|,
literal|0
argument_list|,
name|hs
operator|.
name|getLen
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|bl
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|currentRep
init|=
name|bl
index|[
name|i
index|]
operator|.
name|getHosts
argument_list|()
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
name|targetReplication
argument_list|,
name|currentRep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|removePrefix (Path base, Path walk)
specifier|static
name|Path
name|removePrefix
parameter_list|(
name|Path
name|base
parameter_list|,
name|Path
name|walk
parameter_list|)
block|{
name|Path
name|wpath
init|=
operator|new
name|Path
argument_list|(
name|walk
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|bpath
init|=
operator|new
name|Path
argument_list|(
name|base
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|ret
init|=
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|bpath
operator|.
name|equals
argument_list|(
name|wpath
argument_list|)
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|wpath
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|ret
operator|=
literal|""
operator|.
name|equals
argument_list|(
name|ret
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
name|wpath
operator|.
name|getName
argument_list|()
argument_list|)
else|:
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|,
name|wpath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|wpath
operator|=
name|wpath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bpath
operator|.
name|equals
argument_list|(
name|wpath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|base
operator|+
literal|" not a prefix of "
operator|+
name|walk
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testBlockRead ()
specifier|public
name|void
name|testBlockRead
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|ImageWriter
operator|.
name|Options
operator|.
name|UGI_CLASS
argument_list|,
name|FsUGIResolver
operator|.
name|class
argument_list|,
name|UGIResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|createImage
argument_list|(
operator|new
name|FSTreeWalk
argument_list|(
name|NAMEPATH
argument_list|,
name|conf
argument_list|)
argument_list|,
name|NNDIRPATH
argument_list|,
name|FixedBlockResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|startCluster
argument_list|(
name|NNDIRPATH
argument_list|,
literal|3
argument_list|,
operator|new
name|StorageType
index|[]
block|{
name|StorageType
operator|.
name|PROVIDED
block|}
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// read NN metadata, verify contents match
for|for
control|(
name|TreePath
name|e
range|:
operator|new
name|FSTreeWalk
argument_list|(
name|NAMEPATH
argument_list|,
name|conf
argument_list|)
control|)
block|{
name|FileStatus
name|rs
init|=
name|e
operator|.
name|getFileStatus
argument_list|()
decl_stmt|;
name|Path
name|hp
init|=
name|removePrefix
argument_list|(
name|NAMEPATH
argument_list|,
name|rs
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hp "
operator|+
name|hp
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|//skip HDFS specific files, which may have been created later on.
if|if
condition|(
name|hp
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"in_use.lock"
argument_list|)
operator|||
name|hp
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"current"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|e
operator|.
name|accept
argument_list|(
name|count
operator|++
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|hp
argument_list|)
argument_list|)
expr_stmt|;
name|FileStatus
name|hs
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hp
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hp
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|,
name|hs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getPermission
argument_list|()
argument_list|,
name|hs
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getOwner
argument_list|()
argument_list|,
name|hs
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rs
operator|.
name|getGroup
argument_list|()
argument_list|,
name|hs
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|rs
operator|.
name|getLen
argument_list|()
argument_list|,
name|hs
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ReadableByteChannel
name|i
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|rs
operator|.
name|getPath
argument_list|()
operator|.
name|toUri
argument_list|()
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
try|try
init|(
name|ReadableByteChannel
name|j
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|hs
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|ByteBuffer
name|ib
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
name|ByteBuffer
name|jb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4096
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|il
init|=
name|i
operator|.
name|read
argument_list|(
name|ib
argument_list|)
decl_stmt|;
name|int
name|jl
init|=
name|j
operator|.
name|read
argument_list|(
name|jb
argument_list|)
decl_stmt|;
if|if
condition|(
name|il
operator|<
literal|0
operator|||
name|jl
operator|<
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|il
argument_list|,
name|jl
argument_list|)
expr_stmt|;
break|break;
block|}
name|ib
operator|.
name|flip
argument_list|()
expr_stmt|;
name|jb
operator|.
name|flip
argument_list|()
expr_stmt|;
name|int
name|cmp
init|=
name|Math
operator|.
name|min
argument_list|(
name|ib
operator|.
name|remaining
argument_list|()
argument_list|,
name|jb
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|cmp
condition|;
operator|++
name|k
control|)
block|{
name|assertEquals
argument_list|(
name|ib
operator|.
name|get
argument_list|()
argument_list|,
name|jb
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ib
operator|.
name|compact
argument_list|()
expr_stmt|;
name|jb
operator|.
name|compact
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

