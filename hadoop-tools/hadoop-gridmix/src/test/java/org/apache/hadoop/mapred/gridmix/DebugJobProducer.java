begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|TaskStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|MapTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|ReduceTaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|TaskAttemptInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|Pre21JobHistoryConstants
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|JobID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|MRJobConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|TaskType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|InputSplit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
DECL|class|DebugJobProducer
specifier|public
class|class
name|DebugJobProducer
implements|implements
name|JobStoryProducer
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DebugJobProducer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|submitted
specifier|final
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
name|submitted
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|numJobs
specifier|private
specifier|final
name|AtomicInteger
name|numJobs
decl_stmt|;
DECL|method|DebugJobProducer (int numJobs, Configuration conf)
specifier|public
name|DebugJobProducer
parameter_list|(
name|int
name|numJobs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|MockJob
operator|.
name|reset
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|numJobs
operator|=
operator|new
name|AtomicInteger
argument_list|(
name|numJobs
argument_list|)
expr_stmt|;
name|this
operator|.
name|submitted
operator|=
operator|new
name|ArrayList
argument_list|<
name|JobStory
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNextJob ()
specifier|public
name|JobStory
name|getNextJob
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|numJobs
operator|.
name|getAndDecrement
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|MockJob
name|ret
init|=
operator|new
name|MockJob
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|submitted
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{   }
DECL|method|getDistr (Random r, double mindist, int size)
specifier|static
name|double
index|[]
name|getDistr
parameter_list|(
name|Random
name|r
parameter_list|,
name|double
name|mindist
parameter_list|,
name|int
name|size
parameter_list|)
block|{
assert|assert
literal|0.0
operator|<=
name|mindist
operator|&&
name|mindist
operator|<=
literal|1.0
assert|;
specifier|final
name|double
name|min
init|=
name|mindist
operator|/
name|size
decl_stmt|;
specifier|final
name|double
name|rem
init|=
literal|1.0
operator|-
name|min
operator|*
name|size
decl_stmt|;
specifier|final
name|double
index|[]
name|tmp
init|=
operator|new
name|double
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|tmp
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextDouble
argument_list|()
operator|*
name|rem
expr_stmt|;
block|}
name|tmp
index|[
name|tmp
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|rem
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
specifier|final
name|double
index|[]
name|ret
init|=
operator|new
name|double
index|[
name|size
index|]
decl_stmt|;
name|ret
index|[
literal|0
index|]
operator|=
name|tmp
index|[
literal|0
index|]
operator|+
name|min
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|tmp
index|[
name|i
index|]
operator|-
name|tmp
index|[
name|i
operator|-
literal|1
index|]
operator|+
name|min
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Generate random task data for a synthetic job.    */
DECL|class|MockJob
specifier|static
class|class
name|MockJob
implements|implements
name|JobStory
block|{
DECL|field|MIN_REC
specifier|static
specifier|final
name|int
name|MIN_REC
init|=
literal|1
operator|<<
literal|14
decl_stmt|;
DECL|field|MIN_BYTES
specifier|static
specifier|final
name|int
name|MIN_BYTES
init|=
literal|1
operator|<<
literal|20
decl_stmt|;
DECL|field|VAR_REC
specifier|static
specifier|final
name|int
name|VAR_REC
init|=
literal|1
operator|<<
literal|14
decl_stmt|;
DECL|field|VAR_BYTES
specifier|static
specifier|final
name|int
name|VAR_BYTES
init|=
literal|4
operator|<<
literal|20
decl_stmt|;
DECL|field|MAX_MAP
specifier|static
specifier|final
name|int
name|MAX_MAP
init|=
literal|5
decl_stmt|;
DECL|field|MAX_RED
specifier|static
specifier|final
name|int
name|MAX_RED
init|=
literal|3
decl_stmt|;
DECL|field|conf
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|method|initDist ( Random r, double min, int[] recs, long[] bytes, long tot_recs, long tot_bytes)
specifier|static
name|void
name|initDist
parameter_list|(
name|Random
name|r
parameter_list|,
name|double
name|min
parameter_list|,
name|int
index|[]
name|recs
parameter_list|,
name|long
index|[]
name|bytes
parameter_list|,
name|long
name|tot_recs
parameter_list|,
name|long
name|tot_bytes
parameter_list|)
block|{
specifier|final
name|double
index|[]
name|recs_dist
init|=
name|getDistr
argument_list|(
name|r
argument_list|,
name|min
argument_list|,
name|recs
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|double
index|[]
name|bytes_dist
init|=
name|getDistr
argument_list|(
name|r
argument_list|,
name|min
argument_list|,
name|recs
operator|.
name|length
argument_list|)
decl_stmt|;
name|long
name|totalbytes
init|=
literal|0L
decl_stmt|;
name|int
name|totalrecs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|recs
index|[
name|i
index|]
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|tot_recs
operator|*
name|recs_dist
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|bytes
index|[
name|i
index|]
operator|=
name|Math
operator|.
name|round
argument_list|(
name|tot_bytes
operator|*
name|bytes_dist
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|totalrecs
operator|+=
name|recs
index|[
name|i
index|]
expr_stmt|;
name|totalbytes
operator|+=
name|bytes
index|[
name|i
index|]
expr_stmt|;
block|}
comment|// Add/remove excess
name|recs
index|[
literal|0
index|]
operator|+=
name|totalrecs
operator|-
name|tot_recs
expr_stmt|;
name|bytes
index|[
literal|0
index|]
operator|+=
name|totalbytes
operator|-
name|tot_bytes
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"DIST: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|recs
argument_list|)
operator|+
literal|" "
operator|+
name|tot_recs
operator|+
literal|"/"
operator|+
name|totalrecs
operator|+
literal|" "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|bytes
argument_list|)
operator|+
literal|" "
operator|+
name|tot_bytes
operator|+
literal|"/"
operator|+
name|totalbytes
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|seq
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|seq
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// set timestamp in the past
DECL|field|timestamp
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|timestamp
init|=
operator|new
name|AtomicLong
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|m_recsIn
DECL|field|m_recsOut
DECL|field|r_recsIn
DECL|field|r_recsOut
specifier|private
specifier|final
name|int
index|[]
name|m_recsIn
decl_stmt|,
name|m_recsOut
decl_stmt|,
name|r_recsIn
decl_stmt|,
name|r_recsOut
decl_stmt|;
DECL|field|m_bytesIn
DECL|field|m_bytesOut
DECL|field|r_bytesIn
DECL|field|r_bytesOut
specifier|private
specifier|final
name|long
index|[]
name|m_bytesIn
decl_stmt|,
name|m_bytesOut
decl_stmt|,
name|r_bytesIn
decl_stmt|,
name|r_bytesOut
decl_stmt|;
DECL|field|submitTime
specifier|private
specifier|final
name|long
name|submitTime
decl_stmt|;
DECL|method|MockJob (Configuration conf)
specifier|public
name|MockJob
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|id
operator|=
name|seq
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
name|name
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"MOCKJOB%06d"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|+
literal|" ("
operator|+
name|seed
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|submitTime
operator|=
name|timestamp
operator|.
name|addAndGet
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|m_recsIn
operator|=
operator|new
name|int
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|MAX_MAP
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
name|m_bytesIn
operator|=
operator|new
name|long
index|[
name|m_recsIn
operator|.
name|length
index|]
expr_stmt|;
name|m_recsOut
operator|=
operator|new
name|int
index|[
name|m_recsIn
operator|.
name|length
index|]
expr_stmt|;
name|m_bytesOut
operator|=
operator|new
name|long
index|[
name|m_recsIn
operator|.
name|length
index|]
expr_stmt|;
name|r_recsIn
operator|=
operator|new
name|int
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|MAX_RED
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
name|r_bytesIn
operator|=
operator|new
name|long
index|[
name|r_recsIn
operator|.
name|length
index|]
expr_stmt|;
name|r_recsOut
operator|=
operator|new
name|int
index|[
name|r_recsIn
operator|.
name|length
index|]
expr_stmt|;
name|r_bytesOut
operator|=
operator|new
name|long
index|[
name|r_recsIn
operator|.
name|length
index|]
expr_stmt|;
comment|// map input
specifier|final
name|long
name|map_recs
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|VAR_REC
argument_list|)
operator|+
name|MIN_REC
decl_stmt|;
specifier|final
name|long
name|map_bytes
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|VAR_BYTES
argument_list|)
operator|+
name|MIN_BYTES
decl_stmt|;
name|initDist
argument_list|(
name|r
argument_list|,
literal|0.5
argument_list|,
name|m_recsIn
argument_list|,
name|m_bytesIn
argument_list|,
name|map_recs
argument_list|,
name|map_bytes
argument_list|)
expr_stmt|;
comment|// shuffle
specifier|final
name|long
name|shuffle_recs
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|VAR_REC
argument_list|)
operator|+
name|MIN_REC
decl_stmt|;
specifier|final
name|long
name|shuffle_bytes
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|VAR_BYTES
argument_list|)
operator|+
name|MIN_BYTES
decl_stmt|;
name|initDist
argument_list|(
name|r
argument_list|,
literal|0.5
argument_list|,
name|m_recsOut
argument_list|,
name|m_bytesOut
argument_list|,
name|shuffle_recs
argument_list|,
name|shuffle_bytes
argument_list|)
expr_stmt|;
name|initDist
argument_list|(
name|r
argument_list|,
literal|0.8
argument_list|,
name|r_recsIn
argument_list|,
name|r_bytesIn
argument_list|,
name|shuffle_recs
argument_list|,
name|shuffle_bytes
argument_list|)
expr_stmt|;
comment|// reduce output
specifier|final
name|long
name|red_recs
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|VAR_REC
argument_list|)
operator|+
name|MIN_REC
decl_stmt|;
specifier|final
name|long
name|red_bytes
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|VAR_BYTES
argument_list|)
operator|+
name|MIN_BYTES
decl_stmt|;
name|initDist
argument_list|(
name|r
argument_list|,
literal|0.5
argument_list|,
name|r_recsOut
argument_list|,
name|r_bytesOut
argument_list|,
name|red_recs
argument_list|,
name|red_bytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|int
name|iMapBTotal
init|=
literal|0
decl_stmt|,
name|oMapBTotal
init|=
literal|0
decl_stmt|,
name|iRedBTotal
init|=
literal|0
decl_stmt|,
name|oRedBTotal
init|=
literal|0
decl_stmt|;
name|int
name|iMapRTotal
init|=
literal|0
decl_stmt|,
name|oMapRTotal
init|=
literal|0
decl_stmt|,
name|iRedRTotal
init|=
literal|0
decl_stmt|,
name|oRedRTotal
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_recsIn
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|iMapRTotal
operator|+=
name|m_recsIn
index|[
name|i
index|]
expr_stmt|;
name|iMapBTotal
operator|+=
name|m_bytesIn
index|[
name|i
index|]
expr_stmt|;
name|oMapRTotal
operator|+=
name|m_recsOut
index|[
name|i
index|]
expr_stmt|;
name|oMapBTotal
operator|+=
name|m_bytesOut
index|[
name|i
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r_recsIn
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|iRedRTotal
operator|+=
name|r_recsIn
index|[
name|i
index|]
expr_stmt|;
name|iRedBTotal
operator|+=
name|r_bytesIn
index|[
name|i
index|]
expr_stmt|;
name|oRedRTotal
operator|+=
name|r_recsOut
index|[
name|i
index|]
expr_stmt|;
name|oRedBTotal
operator|+=
name|r_bytesOut
index|[
name|i
index|]
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%s: M (%03d) %6d/%10d -> %6d/%10d"
operator|+
literal|" R (%03d) %6d/%10d -> %6d/%10d @%d"
argument_list|,
name|name
argument_list|,
name|m_bytesIn
operator|.
name|length
argument_list|,
name|iMapRTotal
argument_list|,
name|iMapBTotal
argument_list|,
name|oMapRTotal
argument_list|,
name|oMapBTotal
argument_list|,
name|r_bytesIn
operator|.
name|length
argument_list|,
name|iRedRTotal
argument_list|,
name|iRedBTotal
argument_list|,
name|oRedRTotal
argument_list|,
name|oRedBTotal
argument_list|,
name|submitTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
comment|// Obtain user name from job configuration, if available.
comment|// Otherwise use dummy user names.
name|String
name|user
init|=
name|conf
operator|.
name|get
argument_list|(
name|MRJobConfig
operator|.
name|USER_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"foobar%d"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|GridmixTestUtils
operator|.
name|createHomeAndStagingDirectory
argument_list|(
name|user
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|user
return|;
block|}
annotation|@
name|Override
DECL|method|getJobID ()
specifier|public
name|JobID
name|getJobID
parameter_list|()
block|{
return|return
operator|new
name|JobID
argument_list|(
literal|"job_mock_"
operator|+
name|name
argument_list|,
name|id
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getOutcome ()
specifier|public
name|Values
name|getOutcome
parameter_list|()
block|{
return|return
name|Values
operator|.
name|SUCCESS
return|;
block|}
annotation|@
name|Override
DECL|method|getSubmissionTime ()
specifier|public
name|long
name|getSubmissionTime
parameter_list|()
block|{
return|return
name|submitTime
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberMaps ()
specifier|public
name|int
name|getNumberMaps
parameter_list|()
block|{
return|return
name|m_bytesIn
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|getNumberReduces ()
specifier|public
name|int
name|getNumberReduces
parameter_list|()
block|{
return|return
name|r_bytesIn
operator|.
name|length
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskInfo (TaskType taskType, int taskNumber)
specifier|public
name|TaskInfo
name|getTaskInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|)
block|{
switch|switch
condition|(
name|taskType
condition|)
block|{
case|case
name|MAP
case|:
return|return
operator|new
name|TaskInfo
argument_list|(
name|m_bytesIn
index|[
name|taskNumber
index|]
argument_list|,
name|m_recsIn
index|[
name|taskNumber
index|]
argument_list|,
name|m_bytesOut
index|[
name|taskNumber
index|]
argument_list|,
name|m_recsOut
index|[
name|taskNumber
index|]
argument_list|,
operator|-
literal|1
argument_list|)
return|;
case|case
name|REDUCE
case|:
return|return
operator|new
name|TaskInfo
argument_list|(
name|r_bytesIn
index|[
name|taskNumber
index|]
argument_list|,
name|r_recsIn
index|[
name|taskNumber
index|]
argument_list|,
name|r_bytesOut
index|[
name|taskNumber
index|]
argument_list|,
name|r_recsOut
index|[
name|taskNumber
index|]
argument_list|,
operator|-
literal|1
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not interested"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInputSplits ()
specifier|public
name|InputSplit
index|[]
name|getInputSplits
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getTaskAttemptInfo ( TaskType taskType, int taskNumber, int taskAttemptNumber)
specifier|public
name|TaskAttemptInfo
name|getTaskAttemptInfo
parameter_list|(
name|TaskType
name|taskType
parameter_list|,
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|)
block|{
switch|switch
condition|(
name|taskType
condition|)
block|{
case|case
name|MAP
case|:
return|return
operator|new
name|MapTaskAttemptInfo
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
operator|new
name|TaskInfo
argument_list|(
name|m_bytesIn
index|[
name|taskNumber
index|]
argument_list|,
name|m_recsIn
index|[
name|taskNumber
index|]
argument_list|,
name|m_bytesOut
index|[
name|taskNumber
index|]
argument_list|,
name|m_recsOut
index|[
name|taskNumber
index|]
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|100
argument_list|)
return|;
case|case
name|REDUCE
case|:
return|return
operator|new
name|ReduceTaskAttemptInfo
argument_list|(
name|State
operator|.
name|SUCCEEDED
argument_list|,
operator|new
name|TaskInfo
argument_list|(
name|r_bytesIn
index|[
name|taskNumber
index|]
argument_list|,
name|r_recsIn
index|[
name|taskNumber
index|]
argument_list|,
name|r_bytesOut
index|[
name|taskNumber
index|]
argument_list|,
name|r_recsOut
index|[
name|taskNumber
index|]
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getMapTaskAttemptInfoAdjusted ( int taskNumber, int taskAttemptNumber, int locality)
specifier|public
name|TaskAttemptInfo
name|getMapTaskAttemptInfoAdjusted
parameter_list|(
name|int
name|taskNumber
parameter_list|,
name|int
name|taskAttemptNumber
parameter_list|,
name|int
name|locality
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getJobConf ()
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobConf
name|getJobConf
parameter_list|()
block|{
return|return
operator|new
name|JobConf
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQueueName ()
specifier|public
name|String
name|getQueueName
parameter_list|()
block|{
name|String
name|qName
init|=
literal|"default"
decl_stmt|;
return|return
name|qName
return|;
block|}
DECL|method|reset ()
specifier|public
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|seq
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|timestamp
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

