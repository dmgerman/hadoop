begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the basic functionality of PseudoLocalFs  */
end_comment

begin_class
DECL|class|TestPseudoLocalFs
specifier|public
class|class
name|TestPseudoLocalFs
block|{
comment|/**    * Test if a file on PseudoLocalFs of a specific size can be opened and read.    * Validate the size of the data read.    * Test the read methods of {@link PseudoLocalFs.RandomInputStream}.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testPseudoLocalFsFileSize ()
specifier|public
name|void
name|testPseudoLocalFsFileSize
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|fileSize
init|=
literal|10000
decl_stmt|;
name|Path
name|path
init|=
name|PseudoLocalFs
operator|.
name|generateFilePath
argument_list|(
literal|"myPsedoFile"
argument_list|,
name|fileSize
argument_list|)
decl_stmt|;
name|PseudoLocalFs
name|pfs
init|=
operator|new
name|PseudoLocalFs
argument_list|()
decl_stmt|;
name|pfs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Read 1 byte at a time and validate file size.
name|InputStream
name|in
init|=
name|pfs
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|read
argument_list|()
operator|>=
literal|0
condition|)
block|{
operator|++
name|totalSize
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"File size mismatch with read()."
argument_list|,
name|fileSize
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
comment|// Read data from PseudoLocalFs-based file into buffer to
comment|// validate read(byte[]) and file size.
name|in
operator|=
name|pfs
operator|.
name|open
argument_list|(
name|path
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|totalSize
operator|=
literal|0
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|bytesRead
init|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|)
decl_stmt|;
while|while
condition|(
name|bytesRead
operator|>=
literal|0
condition|)
block|{
name|totalSize
operator|+=
name|bytesRead
expr_stmt|;
name|bytesRead
operator|=
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"File size mismatch with read(byte[])."
argument_list|,
name|fileSize
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate if file status is obtained for correctly formed file paths on    * PseudoLocalFs and also verify if appropriate exception is thrown for    * invalid file paths.    * @param pfs Pseudo Local File System    * @param path file path for which getFileStatus() is to be called    * @param shouldSucceed<code>true</code> if getFileStatus() should succeed    * @throws IOException    */
DECL|method|validateGetFileStatus (FileSystem pfs, Path path, boolean shouldSucceed)
specifier|private
name|void
name|validateGetFileStatus
parameter_list|(
name|FileSystem
name|pfs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|expectedExceptionSeen
init|=
literal|false
decl_stmt|;
name|FileStatus
name|stat
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stat
operator|=
name|pfs
operator|.
name|getFileStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|expectedExceptionSeen
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertFalse
argument_list|(
literal|"getFileStatus() has thrown Exception for valid file name "
operator|+
name|path
argument_list|,
name|expectedExceptionSeen
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing file status for a valid file."
argument_list|,
name|stat
argument_list|)
expr_stmt|;
comment|// validate fileSize
name|String
index|[]
name|parts
init|=
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|long
name|expectedFileSize
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|parts
index|[
name|parts
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid file size."
argument_list|,
name|expectedFileSize
argument_list|,
name|stat
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"getFileStatus() did not throw Exception for invalid file "
operator|+
literal|" name "
operator|+
name|path
argument_list|,
name|expectedExceptionSeen
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate if file creation succeeds for correctly formed file paths on    * PseudoLocalFs and also verify if appropriate exception is thrown for    * invalid file paths.    * @param pfs Pseudo Local File System    * @param path file path for which create() is to be called    * @param shouldSucceed<code>true</code> if create() should succeed    * @throws IOException    */
DECL|method|validateCreate (FileSystem pfs, Path path, boolean shouldSucceed)
specifier|private
name|void
name|validateCreate
parameter_list|(
name|FileSystem
name|pfs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|expectedExceptionSeen
init|=
literal|false
decl_stmt|;
try|try
block|{
name|pfs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|expectedExceptionSeen
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertFalse
argument_list|(
literal|"create() has thrown Exception for valid file name "
operator|+
name|path
argument_list|,
name|expectedExceptionSeen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"create() did not throw Exception for invalid file name "
operator|+
name|path
argument_list|,
name|expectedExceptionSeen
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate if opening of file succeeds for correctly formed file paths on    * PseudoLocalFs and also verify if appropriate exception is thrown for    * invalid file paths.    * @param pfs Pseudo Local File System    * @param path file path for which open() is to be called    * @param shouldSucceed<code>true</code> if open() should succeed    * @throws IOException    */
DECL|method|validateOpen (FileSystem pfs, Path path, boolean shouldSucceed)
specifier|private
name|void
name|validateOpen
parameter_list|(
name|FileSystem
name|pfs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|expectedExceptionSeen
init|=
literal|false
decl_stmt|;
try|try
block|{
name|pfs
operator|.
name|open
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|expectedExceptionSeen
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertFalse
argument_list|(
literal|"open() has thrown Exception for valid file name "
operator|+
name|path
argument_list|,
name|expectedExceptionSeen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"open() did not throw Exception for invalid file name "
operator|+
name|path
argument_list|,
name|expectedExceptionSeen
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate if exists() returns<code>true</code> for correctly formed file    * paths on PseudoLocalFs and returns<code>false</code> for improperly    * formed file paths.    * @param pfs Pseudo Local File System    * @param path file path for which exists() is to be called    * @param shouldSucceed expected return value of exists(&lt;path&gt;)    * @throws IOException    */
DECL|method|validateExists (FileSystem pfs, Path path, boolean shouldSucceed)
specifier|private
name|void
name|validateExists
parameter_list|(
name|FileSystem
name|pfs
parameter_list|,
name|Path
name|path
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|ret
init|=
name|pfs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|assertTrue
argument_list|(
literal|"exists() returned false for valid file name "
operator|+
name|path
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"exists() returned true for invalid file name "
operator|+
name|path
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    *  Test Pseudo Local File System methods like getFileStatus(), create(),    *  open(), exists() for<li> valid file paths and<li> invalid file paths.    * @throws IOException    */
annotation|@
name|Test
DECL|method|testPseudoLocalFsFileNames ()
specifier|public
name|void
name|testPseudoLocalFsFileNames
parameter_list|()
throws|throws
name|IOException
block|{
name|PseudoLocalFs
name|pfs
init|=
operator|new
name|PseudoLocalFs
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.pseudo.impl"
argument_list|,
name|PseudoLocalFs
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
literal|"pseudo:///myPsedoFile.1234"
argument_list|)
decl_stmt|;
name|FileSystem
name|testFs
init|=
name|path
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to obtain a pseudo local file system object from path"
argument_list|,
name|pfs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|,
name|testFs
operator|.
name|getUri
argument_list|()
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate PseudoLocalFS operations on URI of some other file system
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"file:///myPsedoFile.12345"
argument_list|)
expr_stmt|;
name|validateGetFileStatus
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateCreate
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateOpen
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateExists
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"pseudo:///myPsedoFile"
argument_list|)
expr_stmt|;
comment|//.<fileSize> missing
name|validateGetFileStatus
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateCreate
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateOpen
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateExists
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// thing after final '.' is not a number
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"pseudo:///myPsedoFile.txt"
argument_list|)
expr_stmt|;
name|validateGetFileStatus
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateCreate
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateOpen
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|validateExists
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Generate valid file name(relative path) and validate operations on it
name|long
name|fileSize
init|=
literal|231456
decl_stmt|;
name|path
operator|=
name|PseudoLocalFs
operator|.
name|generateFilePath
argument_list|(
literal|"my.Psedo.File"
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
comment|// Validate the above generateFilePath()
name|assertEquals
argument_list|(
literal|"generateFilePath() failed."
argument_list|,
name|fileSize
argument_list|,
name|pfs
operator|.
name|validateFileNameFormat
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|validateGetFileStatus
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateCreate
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateOpen
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateExists
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Validate operations on valid qualified path
name|path
operator|=
operator|new
name|Path
argument_list|(
literal|"myPsedoFile.1237"
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|makeQualified
argument_list|(
name|pfs
argument_list|)
expr_stmt|;
name|validateGetFileStatus
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateCreate
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateOpen
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|validateExists
argument_list|(
name|pfs
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

