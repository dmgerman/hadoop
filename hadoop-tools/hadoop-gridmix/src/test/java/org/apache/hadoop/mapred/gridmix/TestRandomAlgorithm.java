begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRandomAlgorithm
specifier|public
class|class
name|TestRandomAlgorithm
block|{
DECL|field|parameters
specifier|private
specifier|static
specifier|final
name|int
index|[]
index|[]
name|parameters
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|5
block|,
literal|1
block|,
literal|1
block|}
block|,
block|{
literal|10
block|,
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|10
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|20
block|,
literal|1
block|,
literal|3
block|}
block|,
block|{
literal|20
block|,
literal|2
block|,
literal|3
block|}
block|,
block|{
literal|20
block|,
literal|3
block|,
literal|3
block|}
block|,
block|{
literal|100
block|,
literal|3
block|,
literal|10
block|}
block|,
block|{
literal|100
block|,
literal|3
block|,
literal|100
block|}
block|,
block|{
literal|100
block|,
literal|3
block|,
literal|1000
block|}
block|,
block|{
literal|100
block|,
literal|3
block|,
literal|10000
block|}
block|,
block|{
literal|100
block|,
literal|3
block|,
literal|100000
block|}
block|,
block|{
literal|100
block|,
literal|3
block|,
literal|1000000
block|}
block|}
decl_stmt|;
DECL|method|convertIntArray (int[] from)
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|convertIntArray
parameter_list|(
name|int
index|[]
name|from
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|from
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|v
range|:
name|from
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|testRandomSelectSelector (int niter, int m, int n)
specifier|private
name|void
name|testRandomSelectSelector
parameter_list|(
name|int
name|niter
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|RandomAlgorithms
operator|.
name|Selector
name|selector
init|=
operator|new
name|RandomAlgorithms
operator|.
name|Selector
argument_list|(
name|n
argument_list|,
operator|(
name|double
operator|)
name|m
operator|/
name|n
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|niter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|niter
condition|;
operator|++
name|i
operator|,
name|selector
operator|.
name|reset
argument_list|()
control|)
block|{
name|int
index|[]
name|result
init|=
operator|new
name|int
index|[
name|m
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
condition|;
operator|++
name|j
control|)
block|{
name|int
name|v
init|=
name|selector
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|<
literal|0
condition|)
break|break;
name|result
index|[
name|j
index|]
operator|=
name|v
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|resultAsList
init|=
name|convertIntArray
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|Integer
name|count
init|=
name|results
operator|.
name|get
argument_list|(
name|resultAsList
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
name|resultAsList
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|put
argument_list|(
name|resultAsList
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyResults
argument_list|(
name|results
argument_list|,
name|m
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomSelect (int niter, int m, int n)
specifier|private
name|void
name|testRandomSelect
parameter_list|(
name|int
name|niter
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|niter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|niter
condition|;
operator|++
name|i
control|)
block|{
name|int
index|[]
name|result
init|=
name|RandomAlgorithms
operator|.
name|select
argument_list|(
name|m
argument_list|,
name|n
argument_list|,
name|random
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|resultAsList
init|=
name|convertIntArray
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|Integer
name|count
init|=
name|results
operator|.
name|get
argument_list|(
name|resultAsList
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|results
operator|.
name|put
argument_list|(
name|resultAsList
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|put
argument_list|(
name|resultAsList
argument_list|,
operator|++
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyResults
argument_list|(
name|results
argument_list|,
name|m
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyResults (Map<List<Integer>, Integer> results, int m, int n)
specifier|private
name|void
name|verifyResults
parameter_list|(
name|Map
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|results
parameter_list|,
name|int
name|m
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>=
literal|10
condition|)
block|{
name|assertTrue
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|>=
name|Math
operator|.
name|min
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|Integer
argument_list|>
name|result
range|:
name|results
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|m
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|seen
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|v
range|:
name|result
control|)
block|{
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"%d "
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|v
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|v
operator|<
name|n
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seen
operator|.
name|add
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|" ==> %d\n"
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"===="
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomSelect ()
specifier|public
name|void
name|testRandomSelect
parameter_list|()
block|{
for|for
control|(
name|int
index|[]
name|param
range|:
name|parameters
control|)
block|{
name|testRandomSelect
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|,
name|param
index|[
literal|1
index|]
argument_list|,
name|param
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomSelectSelector ()
specifier|public
name|void
name|testRandomSelectSelector
parameter_list|()
block|{
for|for
control|(
name|int
index|[]
name|param
range|:
name|parameters
control|)
block|{
name|testRandomSelectSelector
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|,
name|param
index|[
literal|1
index|]
argument_list|,
name|param
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

