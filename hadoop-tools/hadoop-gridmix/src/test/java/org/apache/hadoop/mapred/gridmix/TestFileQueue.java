begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|CombineFileSplit
import|;
end_import

begin_class
DECL|class|TestFileQueue
specifier|public
class|class
name|TestFileQueue
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFileQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NFILES
specifier|static
specifier|final
name|int
name|NFILES
init|=
literal|4
decl_stmt|;
DECL|field|BLOCK
specifier|static
specifier|final
name|int
name|BLOCK
init|=
literal|256
decl_stmt|;
DECL|field|paths
specifier|static
specifier|final
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[
name|NFILES
index|]
decl_stmt|;
DECL|field|loc
specifier|static
specifier|final
name|String
index|[]
name|loc
init|=
operator|new
name|String
index|[
name|NFILES
index|]
decl_stmt|;
DECL|field|start
specifier|static
specifier|final
name|long
index|[]
name|start
init|=
operator|new
name|long
index|[
name|NFILES
index|]
decl_stmt|;
DECL|field|len
specifier|static
specifier|final
name|long
index|[]
name|len
init|=
operator|new
name|long
index|[
name|NFILES
index|]
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"testFileQueue"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|BLOCK
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NFILES
condition|;
operator|++
name|i
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
call|(
name|byte
call|)
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|paths
index|[
name|i
index|]
operator|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
literal|""
operator|+
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|OutputStream
name|f
init|=
literal|null
decl_stmt|;
try|try
block|{
name|f
operator|=
name|fs
operator|.
name|create
argument_list|(
name|paths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|f
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|AfterClass
DECL|method|cleanup ()
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
operator|.
name|getRaw
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|p
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"testFileQueue"
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|fillVerif ()
specifier|static
name|ByteArrayOutputStream
name|fillVerif
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|BLOCK
index|]
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NFILES
condition|;
operator|++
name|i
control|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|b
argument_list|,
call|(
name|byte
call|)
argument_list|(
literal|'A'
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|len
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
annotation|@
name|Test
DECL|method|testRepeat ()
specifier|public
name|void
name|testRepeat
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|loc
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|start
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|len
argument_list|,
name|BLOCK
argument_list|)
expr_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
name|fillVerif
argument_list|()
decl_stmt|;
specifier|final
name|FileQueue
name|q
init|=
operator|new
name|FileQueue
argument_list|(
operator|new
name|CombineFileSplit
argument_list|(
name|paths
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|loc
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|verif
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|check
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|NFILES
operator|*
name|BLOCK
index|]
decl_stmt|;
name|q
operator|.
name|read
argument_list|(
name|check
argument_list|,
literal|0
argument_list|,
name|NFILES
operator|*
name|BLOCK
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|verif
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|check
argument_list|,
name|NFILES
operator|*
name|BLOCK
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|verif2
init|=
operator|new
name|byte
index|[
literal|2
operator|*
name|NFILES
operator|*
name|BLOCK
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|verif
argument_list|,
literal|0
argument_list|,
name|verif2
argument_list|,
literal|0
argument_list|,
name|verif
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|verif
argument_list|,
literal|0
argument_list|,
name|verif2
argument_list|,
name|verif
operator|.
name|length
argument_list|,
name|verif
operator|.
name|length
argument_list|)
expr_stmt|;
name|q
operator|.
name|read
argument_list|(
name|check
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
name|NFILES
operator|*
name|BLOCK
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|verif2
argument_list|,
name|check
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUneven ()
specifier|public
name|void
name|testUneven
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|loc
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|start
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|len
argument_list|,
name|BLOCK
argument_list|)
expr_stmt|;
specifier|final
name|int
name|B2
init|=
name|BLOCK
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NFILES
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|start
index|[
name|i
index|]
operator|+=
name|B2
expr_stmt|;
name|len
index|[
name|i
index|]
operator|-=
name|B2
expr_stmt|;
block|}
specifier|final
name|FileQueue
name|q
init|=
operator|new
name|FileQueue
argument_list|(
operator|new
name|CombineFileSplit
argument_list|(
name|paths
argument_list|,
name|start
argument_list|,
name|len
argument_list|,
name|loc
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|out
init|=
name|fillVerif
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|verif
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|check
init|=
operator|new
name|byte
index|[
name|NFILES
operator|/
literal|2
operator|*
name|BLOCK
operator|+
name|NFILES
operator|/
literal|2
operator|*
name|B2
index|]
decl_stmt|;
name|q
operator|.
name|read
argument_list|(
name|check
argument_list|,
literal|0
argument_list|,
name|verif
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|verif
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|check
argument_list|,
name|verif
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|.
name|read
argument_list|(
name|check
argument_list|,
literal|0
argument_list|,
name|verif
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|verif
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|check
argument_list|,
name|verif
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmpty ()
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// verify OK if unused
specifier|final
name|FileQueue
name|q
init|=
operator|new
name|FileQueue
argument_list|(
operator|new
name|CombineFileSplit
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|,
operator|new
name|long
index|[
literal|0
index|]
argument_list|,
operator|new
name|long
index|[
literal|0
index|]
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
block|}
block|}
end_class

end_unit

