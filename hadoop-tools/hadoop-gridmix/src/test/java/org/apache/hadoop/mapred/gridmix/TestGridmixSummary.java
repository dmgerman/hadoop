begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|JobClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|UtilsForTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|GenerateData
operator|.
name|DataStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Statistics
operator|.
name|ClusterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
operator|.
name|Statistics
operator|.
name|JobStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|server
operator|.
name|jobtracker
operator|.
name|JTConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test {@link ExecutionSummarizer} and {@link ClusterSummarizer}.  */
end_comment

begin_class
DECL|class|TestGridmixSummary
specifier|public
class|class
name|TestGridmixSummary
block|{
comment|/**    * Test {@link DataStatistics}.    */
annotation|@
name|Test
DECL|method|testDataStatistics ()
specifier|public
name|void
name|testDataStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test data-statistics getters with compression enabled
name|DataStatistics
name|stats
init|=
operator|new
name|DataStatistics
argument_list|(
literal|10
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Data size mismatch"
argument_list|,
literal|10
argument_list|,
name|stats
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num files mismatch"
argument_list|,
literal|2
argument_list|,
name|stats
operator|.
name|getNumFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Compression configuration mismatch"
argument_list|,
name|stats
operator|.
name|isDataCompressed
argument_list|()
argument_list|)
expr_stmt|;
comment|// test data-statistics getters with compression disabled
name|stats
operator|=
operator|new
name|DataStatistics
argument_list|(
literal|100
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data size mismatch"
argument_list|,
literal|100
argument_list|,
name|stats
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num files mismatch"
argument_list|,
literal|5
argument_list|,
name|stats
operator|.
name|getNumFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Compression configuration mismatch"
argument_list|,
name|stats
operator|.
name|isDataCompressed
argument_list|()
argument_list|)
expr_stmt|;
comment|// test publish data stats
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testDataStatistics"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|testInputDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testInputDir
argument_list|)
expr_stmt|;
comment|// test empty folder (compression = true)
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Boolean
name|failed
init|=
literal|null
decl_stmt|;
try|try
block|{
name|GenerateData
operator|.
name|publishDataStatistics
argument_list|(
name|testInputDir
argument_list|,
literal|1024L
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Expected failure!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Compression data publishing error"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
comment|// test with empty folder (compression = off)
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|stats
operator|=
name|GenerateData
operator|.
name|publishDataStatistics
argument_list|(
name|testInputDir
argument_list|,
literal|1024L
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data size mismatch"
argument_list|,
literal|0
argument_list|,
name|stats
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num files mismatch"
argument_list|,
literal|0
argument_list|,
name|stats
operator|.
name|getNumFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Compression configuration mismatch"
argument_list|,
name|stats
operator|.
name|isDataCompressed
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with some plain input data (compression = off)
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|inputDataFile
init|=
operator|new
name|Path
argument_list|(
name|testInputDir
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|UtilsForTests
operator|.
name|createTmpFileDFS
argument_list|(
name|fs
argument_list|,
name|inputDataFile
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|"hi hello bye"
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|stats
operator|=
name|GenerateData
operator|.
name|publishDataStatistics
argument_list|(
name|testInputDir
argument_list|,
operator|-
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data size mismatch"
argument_list|,
name|size
argument_list|,
name|stats
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num files mismatch"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|getNumFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Compression configuration mismatch"
argument_list|,
name|stats
operator|.
name|isDataCompressed
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with some plain input data (compression = on)
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|GenerateData
operator|.
name|publishDataStatistics
argument_list|(
name|testInputDir
argument_list|,
literal|1234L
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"Expected failure!"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Compression data publishing error"
argument_list|,
name|failed
argument_list|)
expr_stmt|;
comment|// test with some compressed input data (compression = off)
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|inputDataFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|inputDataFile
operator|=
operator|new
name|Path
argument_list|(
name|testInputDir
argument_list|,
literal|"test.gz"
argument_list|)
expr_stmt|;
name|size
operator|=
name|UtilsForTests
operator|.
name|createTmpFileDFS
argument_list|(
name|fs
argument_list|,
name|inputDataFile
argument_list|,
name|FsPermission
operator|.
name|createImmutable
argument_list|(
operator|(
name|short
operator|)
literal|777
argument_list|)
argument_list|,
literal|"hi hello"
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|stats
operator|=
name|GenerateData
operator|.
name|publishDataStatistics
argument_list|(
name|testInputDir
argument_list|,
literal|1234L
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data size mismatch"
argument_list|,
name|size
argument_list|,
name|stats
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num files mismatch"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|getNumFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Compression configuration mismatch"
argument_list|,
name|stats
operator|.
name|isDataCompressed
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with some compressed input data (compression = on)
name|CompressionEmulationUtil
operator|.
name|setCompressionEmulationEnabled
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|=
name|GenerateData
operator|.
name|publishDataStatistics
argument_list|(
name|testInputDir
argument_list|,
literal|1234L
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Data size mismatch"
argument_list|,
name|size
argument_list|,
name|stats
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Num files mismatch"
argument_list|,
literal|1
argument_list|,
name|stats
operator|.
name|getNumFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Compression configuration mismatch"
argument_list|,
name|stats
operator|.
name|isDataCompressed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A fake {@link JobFactory}.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|FakeJobFactory
specifier|private
specifier|static
class|class
name|FakeJobFactory
extends|extends
name|JobFactory
block|{
comment|/**      * A fake {@link JobStoryProducer} for {@link FakeJobFactory}.      */
DECL|class|FakeJobStoryProducer
specifier|private
specifier|static
class|class
name|FakeJobStoryProducer
implements|implements
name|JobStoryProducer
block|{
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{       }
annotation|@
name|Override
DECL|method|getNextJob ()
specifier|public
name|JobStory
name|getNextJob
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|FakeJobFactory (Configuration conf)
name|FakeJobFactory
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
operator|new
name|FakeJobStoryProducer
argument_list|()
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|update (Object item)
specifier|public
name|void
name|update
parameter_list|(
name|Object
name|item
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|createReaderThread ()
specifier|protected
name|Thread
name|createReaderThread
parameter_list|()
block|{
return|return
operator|new
name|Thread
argument_list|()
return|;
block|}
block|}
comment|/**    * Test {@link ExecutionSummarizer}.    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|testExecutionSummarizer ()
specifier|public
name|void
name|testExecutionSummarizer
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ExecutionSummarizer
name|es
init|=
operator|new
name|ExecutionSummarizer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer init failed"
argument_list|,
name|Summarizer
operator|.
name|NA
argument_list|,
name|es
operator|.
name|getCommandLineArgsString
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// test configuration parameters
name|String
index|[]
name|initArgs
init|=
operator|new
name|String
index|[]
block|{
literal|"-Xmx20m"
block|,
literal|"-Dtest.args='test'"
block|}
decl_stmt|;
name|es
operator|=
operator|new
name|ExecutionSummarizer
argument_list|(
name|initArgs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer init failed"
argument_list|,
literal|"-Xmx20m -Dtest.args='test'"
argument_list|,
name|es
operator|.
name|getCommandLineArgsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// test start time
name|assertTrue
argument_list|(
literal|"Start time mismatch"
argument_list|,
name|es
operator|.
name|getStartTime
argument_list|()
operator|>=
name|startTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Start time mismatch"
argument_list|,
name|es
operator|.
name|getStartTime
argument_list|()
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// test start() of ExecutionSummarizer
name|es
operator|.
name|update
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer init failed"
argument_list|,
literal|0
argument_list|,
name|es
operator|.
name|getSimulationStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|testExecutionSummarizer
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|es
argument_list|)
expr_stmt|;
name|long
name|simStartTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|es
operator|.
name|start
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Simulation start time mismatch"
argument_list|,
name|es
operator|.
name|getSimulationStartTime
argument_list|()
operator|>=
name|simStartTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Simulation start time mismatch"
argument_list|,
name|es
operator|.
name|getSimulationStartTime
argument_list|()
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with job stats
name|JobStats
name|stats
init|=
name|generateFakeJobStats
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|es
operator|.
name|update
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|testExecutionSummarizer
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|es
argument_list|)
expr_stmt|;
comment|// test with failed job
name|stats
operator|=
name|generateFakeJobStats
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|es
operator|.
name|update
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|testExecutionSummarizer
argument_list|(
literal|6
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|es
argument_list|)
expr_stmt|;
comment|// test with successful but lost job
name|stats
operator|=
name|generateFakeJobStats
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|es
operator|.
name|update
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|testExecutionSummarizer
argument_list|(
literal|7
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|es
argument_list|)
expr_stmt|;
comment|// test with failed but lost job
name|stats
operator|=
name|generateFakeJobStats
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|es
operator|.
name|update
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|testExecutionSummarizer
argument_list|(
literal|9
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|es
argument_list|)
expr_stmt|;
comment|// test finalize
comment|//  define a fake job factory
name|JobFactory
name|factory
init|=
operator|new
name|FakeJobFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// fake the num jobs in trace
name|factory
operator|.
name|numJobsInTrace
operator|=
literal|3
expr_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"testGridmixSummary"
argument_list|)
decl_stmt|;
name|Path
name|testTraceFile
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"test-trace.json"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|testTraceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// finalize the summarizer
name|UserResolver
name|resolver
init|=
operator|new
name|RoundRobinUserResolver
argument_list|()
decl_stmt|;
name|DataStatistics
name|dataStats
init|=
operator|new
name|DataStatistics
argument_list|(
literal|100
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|policy
init|=
name|GridmixJobSubmissionPolicy
operator|.
name|REPLAY
operator|.
name|name
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|GridmixJobSubmissionPolicy
operator|.
name|JOB_SUBMISSION_POLICY
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|es
operator|.
name|finalize
argument_list|(
name|factory
argument_list|,
name|testTraceFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|1024L
argument_list|,
name|resolver
argument_list|,
name|dataStats
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test num jobs in trace
name|assertEquals
argument_list|(
literal|"Mismtach in num jobs in trace"
argument_list|,
literal|3
argument_list|,
name|es
operator|.
name|getNumJobsInTrace
argument_list|()
argument_list|)
expr_stmt|;
comment|// test trace signature
name|String
name|tid
init|=
name|ExecutionSummarizer
operator|.
name|getTraceSignature
argument_list|(
name|testTraceFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in trace signature"
argument_list|,
name|tid
argument_list|,
name|es
operator|.
name|getInputTraceSignature
argument_list|()
argument_list|)
expr_stmt|;
comment|// test trace location
name|Path
name|qPath
init|=
name|fs
operator|.
name|makeQualified
argument_list|(
name|testTraceFile
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in trace filename"
argument_list|,
name|qPath
operator|.
name|toString
argument_list|()
argument_list|,
name|es
operator|.
name|getInputTraceLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// test expected data size
name|assertEquals
argument_list|(
literal|"Mismatch in expected data size"
argument_list|,
literal|"1 K"
argument_list|,
name|es
operator|.
name|getExpectedDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// test input data statistics
name|assertEquals
argument_list|(
literal|"Mismatch in input data statistics"
argument_list|,
name|ExecutionSummarizer
operator|.
name|stringifyDataStatistics
argument_list|(
name|dataStats
argument_list|)
argument_list|,
name|es
operator|.
name|getInputDataStatistics
argument_list|()
argument_list|)
expr_stmt|;
comment|// test user resolver
name|assertEquals
argument_list|(
literal|"Mismatch in user resolver"
argument_list|,
name|resolver
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|es
operator|.
name|getUserResolver
argument_list|()
argument_list|)
expr_stmt|;
comment|// test policy
name|assertEquals
argument_list|(
literal|"Mismatch in policy"
argument_list|,
name|policy
argument_list|,
name|es
operator|.
name|getJobSubmissionPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// test data stringification using large data
name|es
operator|.
name|finalize
argument_list|(
name|factory
argument_list|,
name|testTraceFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|10L
argument_list|,
name|resolver
argument_list|,
name|dataStats
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in expected data size"
argument_list|,
literal|"10 G"
argument_list|,
name|es
operator|.
name|getExpectedDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// test trace signature uniqueness
comment|//  touch the trace file
name|fs
operator|.
name|delete
argument_list|(
name|testTraceFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//  sleep for 1 sec
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{}
name|fs
operator|.
name|create
argument_list|(
name|testTraceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|es
operator|.
name|finalize
argument_list|(
name|factory
argument_list|,
name|testTraceFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0L
argument_list|,
name|resolver
argument_list|,
name|dataStats
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// test missing expected data size
name|assertEquals
argument_list|(
literal|"Mismatch in trace data size"
argument_list|,
name|Summarizer
operator|.
name|NA
argument_list|,
name|es
operator|.
name|getExpectedDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Mismatch in trace signature"
argument_list|,
name|tid
operator|.
name|equals
argument_list|(
name|es
operator|.
name|getInputTraceSignature
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the new identifier
name|tid
operator|=
name|ExecutionSummarizer
operator|.
name|getTraceSignature
argument_list|(
name|testTraceFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in trace signature"
argument_list|,
name|tid
argument_list|,
name|es
operator|.
name|getInputTraceSignature
argument_list|()
argument_list|)
expr_stmt|;
name|testTraceFile
operator|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"test-trace2.json"
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|testTraceFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|es
operator|.
name|finalize
argument_list|(
name|factory
argument_list|,
name|testTraceFile
operator|.
name|toString
argument_list|()
argument_list|,
literal|0L
argument_list|,
name|resolver
argument_list|,
name|dataStats
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Mismatch in trace signature"
argument_list|,
name|tid
operator|.
name|equals
argument_list|(
name|es
operator|.
name|getInputTraceSignature
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the new identifier
name|tid
operator|=
name|ExecutionSummarizer
operator|.
name|getTraceSignature
argument_list|(
name|testTraceFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in trace signature"
argument_list|,
name|tid
argument_list|,
name|es
operator|.
name|getInputTraceSignature
argument_list|()
argument_list|)
expr_stmt|;
comment|// finalize trace identifier '-' input
name|es
operator|.
name|finalize
argument_list|(
name|factory
argument_list|,
literal|"-"
argument_list|,
literal|0L
argument_list|,
name|resolver
argument_list|,
name|dataStats
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in trace signature"
argument_list|,
name|Summarizer
operator|.
name|NA
argument_list|,
name|es
operator|.
name|getInputTraceSignature
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Mismatch in trace file location"
argument_list|,
name|Summarizer
operator|.
name|NA
argument_list|,
name|es
operator|.
name|getInputTraceLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test the ExecutionSummarizer
DECL|method|testExecutionSummarizer (int numMaps, int numReds, int totalJobsInTrace, int totalJobSubmitted, int numSuccessfulJob, int numFailedJobs, int numLostJobs, ExecutionSummarizer es)
specifier|private
specifier|static
name|void
name|testExecutionSummarizer
parameter_list|(
name|int
name|numMaps
parameter_list|,
name|int
name|numReds
parameter_list|,
name|int
name|totalJobsInTrace
parameter_list|,
name|int
name|totalJobSubmitted
parameter_list|,
name|int
name|numSuccessfulJob
parameter_list|,
name|int
name|numFailedJobs
parameter_list|,
name|int
name|numLostJobs
parameter_list|,
name|ExecutionSummarizer
name|es
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer test failed [num-maps]"
argument_list|,
name|numMaps
argument_list|,
name|es
operator|.
name|getNumMapTasksLaunched
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer test failed [num-reducers]"
argument_list|,
name|numReds
argument_list|,
name|es
operator|.
name|getNumReduceTasksLaunched
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer test failed [num-jobs-in-trace]"
argument_list|,
name|totalJobsInTrace
argument_list|,
name|es
operator|.
name|getNumJobsInTrace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer test failed [num-submitted jobs]"
argument_list|,
name|totalJobSubmitted
argument_list|,
name|es
operator|.
name|getNumSubmittedJobs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer test failed [num-successful-jobs]"
argument_list|,
name|numSuccessfulJob
argument_list|,
name|es
operator|.
name|getNumSuccessfulJobs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer test failed [num-failed jobs]"
argument_list|,
name|numFailedJobs
argument_list|,
name|es
operator|.
name|getNumFailedJobs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ExecutionSummarizer test failed [num-lost jobs]"
argument_list|,
name|numLostJobs
argument_list|,
name|es
operator|.
name|getNumLostJobs
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// generate fake job stats
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|generateFakeJobStats (final int numMaps, final int numReds, final boolean isSuccessful, final boolean lost)
specifier|private
specifier|static
name|JobStats
name|generateFakeJobStats
parameter_list|(
specifier|final
name|int
name|numMaps
parameter_list|,
specifier|final
name|int
name|numReds
parameter_list|,
specifier|final
name|boolean
name|isSuccessful
parameter_list|,
specifier|final
name|boolean
name|lost
parameter_list|)
throws|throws
name|IOException
block|{
comment|// A fake job
name|Job
name|fakeJob
init|=
operator|new
name|Job
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getNumReduceTasks
parameter_list|()
block|{
return|return
name|numReds
return|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isSuccessful
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lost
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Test failure!"
argument_list|)
throw|;
block|}
return|return
name|isSuccessful
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
return|return
operator|new
name|JobStats
argument_list|(
name|numMaps
argument_list|,
name|numReds
argument_list|,
name|fakeJob
argument_list|)
return|;
block|}
comment|/**    * Test {@link ClusterSummarizer}.    */
annotation|@
name|Test
DECL|method|testClusterSummarizer ()
specifier|public
name|void
name|testClusterSummarizer
parameter_list|()
throws|throws
name|IOException
block|{
name|ClusterSummarizer
name|cs
init|=
operator|new
name|ClusterSummarizer
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|jt
init|=
literal|"test-jt:1234"
decl_stmt|;
name|String
name|nn
init|=
literal|"test-nn:5678"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
name|jt
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
name|nn
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JT name mismatch"
argument_list|,
name|jt
argument_list|,
name|cs
operator|.
name|getJobTrackerInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NN name mismatch"
argument_list|,
name|nn
argument_list|,
name|cs
operator|.
name|getNamenodeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterStats
name|cStats
init|=
name|ClusterStats
operator|.
name|getClusterStats
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|JTConfig
operator|.
name|JT_IPC_ADDRESS
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|FS_DEFAULT_NAME_KEY
argument_list|,
literal|"local"
argument_list|)
expr_stmt|;
name|JobClient
name|jc
init|=
operator|new
name|JobClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cStats
operator|.
name|setClusterMetric
argument_list|(
name|jc
operator|.
name|getClusterStatus
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|update
argument_list|(
name|cStats
argument_list|)
expr_stmt|;
comment|// test
name|assertEquals
argument_list|(
literal|"Cluster summary test failed!"
argument_list|,
literal|1
argument_list|,
name|cs
operator|.
name|getMaxMapTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cluster summary test failed!"
argument_list|,
literal|1
argument_list|,
name|cs
operator|.
name|getMaxReduceTasks
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cluster summary test failed!"
argument_list|,
literal|1
argument_list|,
name|cs
operator|.
name|getNumActiveTrackers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cluster summary test failed!"
argument_list|,
literal|0
argument_list|,
name|cs
operator|.
name|getNumBlacklistedTrackers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

