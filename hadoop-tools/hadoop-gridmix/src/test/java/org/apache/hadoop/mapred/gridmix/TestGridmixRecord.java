begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_class
DECL|class|TestGridmixRecord
specifier|public
class|class
name|TestGridmixRecord
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestGridmixRecord
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|lengthTest (GridmixRecord x, GridmixRecord y, int min, int max)
specifier|static
name|void
name|lengthTest
parameter_list|(
name|GridmixRecord
name|x
parameter_list|,
name|GridmixRecord
name|y
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"length: "
operator|+
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out1
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out2
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
name|setSerialize
argument_list|(
name|x
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|,
name|i
argument_list|,
name|out1
argument_list|)
expr_stmt|;
comment|// check write
name|assertEquals
argument_list|(
name|i
argument_list|,
name|out1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// write to stream
name|x
operator|.
name|write
argument_list|(
name|out2
argument_list|)
expr_stmt|;
comment|// check read
name|in
operator|.
name|reset
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|y
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|x
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|y
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check stream read
name|in
operator|.
name|reset
argument_list|(
name|out2
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out2
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
name|y
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|y
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomReplayTest (GridmixRecord x, GridmixRecord y, int min, int max)
specifier|static
name|void
name|randomReplayTest
parameter_list|(
name|GridmixRecord
name|x
parameter_list|,
name|GridmixRecord
name|y
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"randReplay: "
operator|+
name|seed
argument_list|)
expr_stmt|;
specifier|final
name|DataOutputBuffer
name|out1
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|s
init|=
name|out1
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|x
operator|.
name|setSeed
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setSize
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|out1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|out1
operator|.
name|getLength
argument_list|()
operator|-
name|s
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out1
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DataOutputBuffer
name|out2
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
comment|// deserialize written records, write to separate buffer
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|s
init|=
name|in
operator|.
name|getPosition
argument_list|()
decl_stmt|;
name|y
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|in
operator|.
name|getPosition
argument_list|()
operator|-
name|s
argument_list|)
expr_stmt|;
name|y
operator|.
name|write
argument_list|(
name|out2
argument_list|)
expr_stmt|;
block|}
comment|// verify written contents match
name|assertEquals
argument_list|(
name|out1
operator|.
name|getLength
argument_list|()
argument_list|,
name|out2
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// assumes that writes will grow buffer deterministically
name|assertEquals
argument_list|(
literal|"Bad test"
argument_list|,
name|out1
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|eqSeedTest (GridmixRecord x, GridmixRecord y, int max)
specifier|static
name|void
name|eqSeedTest
parameter_list|(
name|GridmixRecord
name|x
parameter_list|,
name|GridmixRecord
name|y
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|s
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"eqSeed: "
operator|+
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|x
operator|.
name|fixedBytes
argument_list|()
argument_list|,
name|y
operator|.
name|fixedBytes
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|min
init|=
name|x
operator|.
name|fixedBytes
argument_list|()
operator|+
literal|1
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out1
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out2
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|seed
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|setSerialize
argument_list|(
name|x
argument_list|,
name|seed
argument_list|,
name|i
argument_list|,
name|out1
argument_list|)
expr_stmt|;
name|setSerialize
argument_list|(
name|y
argument_list|,
name|seed
argument_list|,
name|i
argument_list|,
name|out2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|x
operator|.
name|hashCode
argument_list|()
argument_list|,
name|y
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify written contents match
name|assertEquals
argument_list|(
name|out1
operator|.
name|getLength
argument_list|()
argument_list|,
name|out2
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// assumes that writes will grow buffer deterministically
name|assertEquals
argument_list|(
literal|"Bad test"
argument_list|,
name|out1
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|binSortTest (GridmixRecord x, GridmixRecord y, int min, int max, WritableComparator cmp)
specifier|static
name|void
name|binSortTest
parameter_list|(
name|GridmixRecord
name|x
parameter_list|,
name|GridmixRecord
name|y
parameter_list|,
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|,
name|WritableComparator
name|cmp
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|s
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sort: "
operator|+
name|s
argument_list|)
expr_stmt|;
specifier|final
name|DataOutputBuffer
name|out1
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out2
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|min
init|;
name|i
operator|<
name|max
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|seed1
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|setSerialize
argument_list|(
name|x
argument_list|,
name|seed1
argument_list|,
name|i
argument_list|,
name|out1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|x
operator|.
name|compareSeed
argument_list|(
name|seed1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|i
operator|-
name|x
operator|.
name|fixedBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|seed2
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|setSerialize
argument_list|(
name|y
argument_list|,
name|seed2
argument_list|,
name|i
argument_list|,
name|out2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|y
operator|.
name|compareSeed
argument_list|(
name|seed2
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|i
operator|-
name|x
operator|.
name|fixedBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// for eq sized records, ensure byte cmp where req
specifier|final
name|int
name|chk
init|=
name|WritableComparator
operator|.
name|compareBytes
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out1
operator|.
name|getLength
argument_list|()
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out2
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|chk
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|x
operator|.
name|compareTo
argument_list|(
name|y
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|chk
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|cmp
operator|.
name|compare
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out1
operator|.
name|getLength
argument_list|()
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out2
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// write second copy, compare eq
specifier|final
name|int
name|s1
init|=
name|out1
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|x
operator|.
name|write
argument_list|(
name|out1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
operator|.
name|compare
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s1
argument_list|,
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
name|s1
argument_list|,
name|out1
operator|.
name|getLength
argument_list|()
operator|-
name|s1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|s2
init|=
name|out2
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|y
operator|.
name|write
argument_list|(
name|out2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cmp
operator|.
name|compare
argument_list|(
name|out2
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s2
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
argument_list|,
name|s2
argument_list|,
name|out2
operator|.
name|getLength
argument_list|()
operator|-
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|signum
argument_list|(
name|chk
argument_list|)
argument_list|,
name|Integer
operator|.
name|signum
argument_list|(
name|cmp
operator|.
name|compare
argument_list|(
name|out1
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s1
argument_list|,
name|out2
operator|.
name|getData
argument_list|()
argument_list|,
name|s2
argument_list|,
name|out2
operator|.
name|getLength
argument_list|()
operator|-
name|s2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkSpec (GridmixKey a, GridmixKey b)
specifier|static
name|void
name|checkSpec
parameter_list|(
name|GridmixKey
name|a
parameter_list|,
name|GridmixKey
name|b
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|long
name|s
init|=
name|r
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|r
operator|.
name|setSeed
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"spec: "
operator|+
name|s
argument_list|)
expr_stmt|;
specifier|final
name|DataInputBuffer
name|in
init|=
operator|new
name|DataInputBuffer
argument_list|()
decl_stmt|;
specifier|final
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|a
operator|.
name|setType
argument_list|(
name|GridmixKey
operator|.
name|REDUCE_SPEC
argument_list|)
expr_stmt|;
name|b
operator|.
name|setType
argument_list|(
name|GridmixKey
operator|.
name|REDUCE_SPEC
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|int
name|in_rec
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|a
operator|.
name|setReduceInputRecords
argument_list|(
name|in_rec
argument_list|)
expr_stmt|;
specifier|final
name|int
name|out_rec
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|a
operator|.
name|setReduceOutputRecords
argument_list|(
name|out_rec
argument_list|)
expr_stmt|;
specifier|final
name|int
name|out_bytes
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|a
operator|.
name|setReduceOutputBytes
argument_list|(
name|out_bytes
argument_list|)
expr_stmt|;
specifier|final
name|int
name|min
init|=
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|in_rec
argument_list|)
operator|+
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|out_rec
argument_list|)
operator|+
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
name|out_bytes
argument_list|)
operator|+
name|WritableUtils
operator|.
name|getVIntSize
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|min
operator|+
literal|2
argument_list|,
name|a
operator|.
name|fixedBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// meta + vint min
specifier|final
name|int
name|size
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|1024
argument_list|)
operator|+
name|a
operator|.
name|fixedBytes
argument_list|()
operator|+
literal|1
decl_stmt|;
name|setSerialize
argument_list|(
name|a
argument_list|,
name|r
operator|.
name|nextLong
argument_list|()
argument_list|,
name|size
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|compareTo
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|reset
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|b
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|in_rec
argument_list|,
name|b
operator|.
name|getReduceInputRecords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out_rec
argument_list|,
name|b
operator|.
name|getReduceOutputRecords
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|out_bytes
argument_list|,
name|b
operator|.
name|getReduceOutputBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|hashCode
argument_list|()
argument_list|,
name|b
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setSerialize (GridmixRecord x, long seed, int size, DataOutputBuffer out)
specifier|static
name|void
name|setSerialize
parameter_list|(
name|GridmixRecord
name|x
parameter_list|,
name|long
name|seed
parameter_list|,
name|int
name|size
parameter_list|,
name|DataOutputBuffer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|x
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|x
operator|.
name|setSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeySpec ()
specifier|public
name|void
name|testKeySpec
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|min
init|=
literal|6
decl_stmt|;
specifier|final
name|int
name|max
init|=
literal|300
decl_stmt|;
specifier|final
name|GridmixKey
name|a
init|=
operator|new
name|GridmixKey
argument_list|(
name|GridmixKey
operator|.
name|REDUCE_SPEC
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
specifier|final
name|GridmixKey
name|b
init|=
operator|new
name|GridmixKey
argument_list|(
name|GridmixKey
operator|.
name|REDUCE_SPEC
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|lengthTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|randomReplayTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|binSortTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
operator|new
name|GridmixKey
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 fixed GR bytes, 1 type, 3 spec
name|eqSeedTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|checkSpec
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKeyData ()
specifier|public
name|void
name|testKeyData
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|min
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|max
init|=
literal|300
decl_stmt|;
specifier|final
name|GridmixKey
name|a
init|=
operator|new
name|GridmixKey
argument_list|(
name|GridmixKey
operator|.
name|DATA
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
specifier|final
name|GridmixKey
name|b
init|=
operator|new
name|GridmixKey
argument_list|(
name|GridmixKey
operator|.
name|DATA
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
name|lengthTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|randomReplayTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|binSortTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
operator|new
name|GridmixKey
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 fixed GR bytes, 1 type
name|eqSeedTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|300
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBaseRecord ()
specifier|public
name|void
name|testBaseRecord
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|min
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|max
init|=
literal|300
decl_stmt|;
specifier|final
name|GridmixRecord
name|a
init|=
operator|new
name|GridmixRecord
argument_list|()
decl_stmt|;
specifier|final
name|GridmixRecord
name|b
init|=
operator|new
name|GridmixRecord
argument_list|()
decl_stmt|;
name|lengthTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|randomReplayTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|binSortTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
operator|new
name|GridmixRecord
operator|.
name|Comparator
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 fixed GR bytes
name|eqSeedTest
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
literal|300
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
specifier|final
name|TestGridmixRecord
name|test
init|=
operator|new
name|TestGridmixRecord
argument_list|()
decl_stmt|;
try|try
block|{
name|test
operator|.
name|testKeySpec
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|test
operator|.
name|testKeyData
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|test
operator|.
name|testBaseRecord
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|fail
condition|?
operator|-
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|printDebug (GridmixRecord a, GridmixRecord b)
specifier|static
name|void
name|printDebug
parameter_list|(
name|GridmixRecord
name|a
parameter_list|,
name|GridmixRecord
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|a
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"A "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|b
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"B "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

