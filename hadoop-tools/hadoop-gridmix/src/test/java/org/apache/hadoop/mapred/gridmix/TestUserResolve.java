begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_class
DECL|class|TestUserResolve
specifier|public
class|class
name|TestUserResolve
block|{
DECL|field|rootDir
specifier|private
specifier|static
name|Path
name|rootDir
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
specifier|static
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createRootDir ()
specifier|public
specifier|static
name|void
name|createRootDir
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rootDir
operator|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"gridmixUserResolve"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates users file with the content as the String usersFileContent.    * @param usersFilePath    the path to the file that is to be created    * @param usersFileContent Content of users file    * @throws IOException    */
DECL|method|writeUserList (Path usersFilePath, String usersFileContent)
specifier|private
specifier|static
name|void
name|writeUserList
parameter_list|(
name|Path
name|usersFilePath
parameter_list|,
name|String
name|usersFileContent
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|usersFilePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|usersFileContent
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Validate RoundRobinUserResolver's behavior for bad user resource file.    * RoundRobinUserResolver.setTargetUsers() should throw proper Exception for    * the cases like    *<li> non existent user resource file and    *<li> empty user resource file    *     * @param rslv              The RoundRobinUserResolver object    * @param userRsrc          users file    * @param expectedErrorMsg  expected error message    */
DECL|method|validateBadUsersFile (UserResolver rslv, URI userRsrc, String expectedErrorMsg)
specifier|private
name|void
name|validateBadUsersFile
parameter_list|(
name|UserResolver
name|rslv
parameter_list|,
name|URI
name|userRsrc
parameter_list|,
name|String
name|expectedErrorMsg
parameter_list|)
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|rslv
operator|.
name|setTargetUsers
argument_list|(
name|userRsrc
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Exception message from RoundRobinUserResolver is wrong"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedErrorMsg
argument_list|)
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"User list required for RoundRobinUserResolver"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate the behavior of {@link RoundRobinUserResolver} for different    * user resource files like    *<li> Empty user resource file    *<li> Non existent user resource file    *<li> User resource file with valid content    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRoundRobinResolver ()
specifier|public
name|void
name|testRoundRobinResolver
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserResolver
name|rslv
init|=
operator|new
name|RoundRobinUserResolver
argument_list|()
decl_stmt|;
name|Path
name|usersFilePath
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"users"
argument_list|)
decl_stmt|;
name|URI
name|userRsrc
init|=
operator|new
name|URI
argument_list|(
name|usersFilePath
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if the error message is as expected for non existent
comment|// user resource file.
name|fs
operator|.
name|delete
argument_list|(
name|usersFilePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|expectedErrorMsg
init|=
literal|"File "
operator|+
name|userRsrc
operator|+
literal|" does not exist"
decl_stmt|;
name|validateBadUsersFile
argument_list|(
name|rslv
argument_list|,
name|userRsrc
argument_list|,
name|expectedErrorMsg
argument_list|)
expr_stmt|;
comment|// Check if the error message is as expected for empty user resource file
name|writeUserList
argument_list|(
name|usersFilePath
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// creates empty users file
name|expectedErrorMsg
operator|=
name|RoundRobinUserResolver
operator|.
name|buildEmptyUsersErrorMsg
argument_list|(
name|userRsrc
argument_list|)
expr_stmt|;
name|validateBadUsersFile
argument_list|(
name|rslv
argument_list|,
name|userRsrc
argument_list|,
name|expectedErrorMsg
argument_list|)
expr_stmt|;
comment|// Create user resource file with valid content like older users list file
comment|// with usernames and groups
name|writeUserList
argument_list|(
name|usersFilePath
argument_list|,
literal|"user0,groupA,groupB,groupC\nuser1,groupA,groupC\n"
argument_list|)
expr_stmt|;
name|validateValidUsersFile
argument_list|(
name|rslv
argument_list|,
name|userRsrc
argument_list|)
expr_stmt|;
comment|// Create user resource file with valid content with
comment|// usernames with groups and without groups
name|writeUserList
argument_list|(
name|usersFilePath
argument_list|,
literal|"user0,groupA,groupB\nuser1,"
argument_list|)
expr_stmt|;
name|validateValidUsersFile
argument_list|(
name|rslv
argument_list|,
name|userRsrc
argument_list|)
expr_stmt|;
comment|// Create user resource file with valid content with
comment|// usernames without groups
name|writeUserList
argument_list|(
name|usersFilePath
argument_list|,
literal|"user0\nuser1"
argument_list|)
expr_stmt|;
name|validateValidUsersFile
argument_list|(
name|rslv
argument_list|,
name|userRsrc
argument_list|)
expr_stmt|;
block|}
comment|// Validate RoundRobinUserResolver for the case of
comment|// user resource file with valid content.
DECL|method|validateValidUsersFile (UserResolver rslv, URI userRsrc)
specifier|private
name|void
name|validateValidUsersFile
parameter_list|(
name|UserResolver
name|rslv
parameter_list|,
name|URI
name|userRsrc
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|rslv
operator|.
name|setTargetUsers
argument_list|(
name|userRsrc
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi1
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"hfre0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"user0"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|ugi1
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user1"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"hfre1"
argument_list|)
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user0"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"hfre2"
argument_list|)
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user0"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|ugi1
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user1"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"hfre3"
argument_list|)
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify if same user comes again, its mapped user name should be
comment|// correct even though UGI is constructed again.
name|assertEquals
argument_list|(
literal|"user0"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"hfre0"
argument_list|)
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user0"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"hfre5"
argument_list|)
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user0"
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"hfre0"
argument_list|)
argument_list|)
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitterResolver ()
specifier|public
name|void
name|testSubmitterResolver
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|UserResolver
name|rslv
init|=
operator|new
name|SubmitterUserResolver
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rslv
operator|.
name|needsTargetUsersList
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ugi
argument_list|,
name|rslv
operator|.
name|getTargetUgi
argument_list|(
operator|(
name|UserGroupInformation
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

