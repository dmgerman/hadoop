begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.mapred.gridmix
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapred
operator|.
name|gridmix
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|tools
operator|.
name|rumen
operator|.
name|JobStoryProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestGridmixSubmission
specifier|public
class|class
name|TestGridmixSubmission
extends|extends
name|CommonJobTest
block|{
DECL|field|inSpace
specifier|private
specifier|static
name|File
name|inSpace
init|=
operator|new
name|File
argument_list|(
literal|"src"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"test"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"resources"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"data"
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.mapred.gridmix"
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|init ()
specifier|public
specifier|static
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|GridmixTestUtils
operator|.
name|initCluster
argument_list|(
name|TestGridmixSubmission
operator|.
name|class
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"src.test.data"
argument_list|,
name|inSpace
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|shutDown ()
specifier|public
specifier|static
name|void
name|shutDown
parameter_list|()
throws|throws
name|IOException
block|{
name|GridmixTestUtils
operator|.
name|shutdownCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verifies that the given {@code JobStory} corresponds to the checked-in    * WordCount {@code JobStory}. The verification is effected via JUnit    * assertions.    *    * @param js the candidate JobStory.    */
DECL|method|verifyWordCountJobStory (JobStory js)
specifier|private
name|void
name|verifyWordCountJobStory
parameter_list|(
name|JobStory
name|js
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Null JobStory"
argument_list|,
name|js
argument_list|)
expr_stmt|;
name|String
name|expectedJobStory
init|=
literal|"WordCount:johndoe:default:1285322645148:3:1"
decl_stmt|;
name|String
name|actualJobStory
init|=
name|js
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getUser
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getQueueName
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getSubmissionTime
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getNumberMaps
argument_list|()
operator|+
literal|":"
operator|+
name|js
operator|.
name|getNumberReduces
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected JobStory"
argument_list|,
name|expectedJobStory
argument_list|,
name|actualJobStory
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expands a file compressed using {@code gzip}.    *    * @param fs  the {@code FileSystem} corresponding to the given file.    * @param in  the path to the compressed file.    * @param out the path to the uncompressed output.    * @throws Exception if there was an error during the operation.    */
DECL|method|expandGzippedTrace (FileSystem fs, Path in, Path out)
specifier|private
name|void
name|expandGzippedTrace
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|in
parameter_list|,
name|Path
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|GZIPInputStream
name|gis
init|=
operator|new
name|GZIPInputStream
argument_list|(
name|fs
operator|.
name|open
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fsdOs
init|=
name|fs
operator|.
name|create
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|int
name|numRead
decl_stmt|;
while|while
condition|(
operator|(
name|numRead
operator|=
name|gis
operator|.
name|read
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|buff
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|fsdOs
operator|.
name|write
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|numRead
argument_list|)
expr_stmt|;
block|}
name|gis
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsdOs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the reading of traces in GridMix3. These traces are generated by    * Rumen and are in the JSON format. The traces can optionally be compressed    * and uncompressed traces can also be passed to GridMix3 via its standard    * input stream. The testing is effected via JUnit assertions.    *    * @throws Exception if there was an error.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testTraceReader ()
specifier|public
name|void
name|testTraceReader
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|FileSystem
name|lfs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootInputDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"src.test.data"
argument_list|)
argument_list|)
decl_stmt|;
name|rootInputDir
operator|=
name|rootInputDir
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootTempDir
init|=
operator|new
name|Path
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
literal|"testTraceReader"
argument_list|)
decl_stmt|;
name|rootTempDir
operator|=
name|rootTempDir
operator|.
name|makeQualified
argument_list|(
name|lfs
operator|.
name|getUri
argument_list|()
argument_list|,
name|lfs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|rootInputDir
argument_list|,
literal|"wordcount.json.gz"
argument_list|)
decl_stmt|;
name|Path
name|tempFile
init|=
operator|new
name|Path
argument_list|(
name|rootTempDir
argument_list|,
literal|"gridmix3-wc.json"
argument_list|)
decl_stmt|;
name|InputStream
name|origStdIn
init|=
name|System
operator|.
name|in
decl_stmt|;
name|InputStream
name|tmpIs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DebugGridmix
name|dgm
init|=
operator|new
name|DebugGridmix
argument_list|()
decl_stmt|;
name|JobStoryProducer
name|jsp
init|=
name|dgm
operator|.
name|createJobStoryProducer
argument_list|(
name|inputFile
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying JobStory from compressed trace..."
argument_list|)
expr_stmt|;
name|verifyWordCountJobStory
argument_list|(
name|jsp
operator|.
name|getNextJob
argument_list|()
argument_list|)
expr_stmt|;
name|expandGzippedTrace
argument_list|(
name|lfs
argument_list|,
name|inputFile
argument_list|,
name|tempFile
argument_list|)
expr_stmt|;
name|jsp
operator|=
name|dgm
operator|.
name|createJobStoryProducer
argument_list|(
name|tempFile
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying JobStory from uncompressed trace..."
argument_list|)
expr_stmt|;
name|verifyWordCountJobStory
argument_list|(
name|jsp
operator|.
name|getNextJob
argument_list|()
argument_list|)
expr_stmt|;
name|tmpIs
operator|=
name|lfs
operator|.
name|open
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
name|System
operator|.
name|setIn
argument_list|(
name|tmpIs
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying JobStory from trace in standard input..."
argument_list|)
expr_stmt|;
name|jsp
operator|=
name|dgm
operator|.
name|createJobStoryProducer
argument_list|(
literal|"-"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|verifyWordCountJobStory
argument_list|(
name|jsp
operator|.
name|getNextJob
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setIn
argument_list|(
name|origStdIn
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpIs
operator|!=
literal|null
condition|)
block|{
name|tmpIs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|lfs
operator|.
name|delete
argument_list|(
name|rootTempDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500000
argument_list|)
DECL|method|testReplaySubmit ()
specifier|public
name|void
name|testReplaySubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|=
name|GridmixJobSubmissionPolicy
operator|.
name|REPLAY
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Replay started at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|doSubmission
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Replay ended at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500000
argument_list|)
DECL|method|testStressSubmit ()
specifier|public
name|void
name|testStressSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|policy
operator|=
name|GridmixJobSubmissionPolicy
operator|.
name|STRESS
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Stress started at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|doSubmission
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Stress ended at "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test empty request should be hint message
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testMain ()
specifier|public
name|void
name|testMain
parameter_list|()
throws|throws
name|Exception
block|{
name|SecurityManager
name|securityManager
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|final
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|oldOut
init|=
name|System
operator|.
name|out
decl_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
try|try
block|{
name|String
index|[]
name|argv
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
name|DebugGridmix
operator|.
name|main
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExitUtil
operator|.
name|ExitException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"ExitException"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|resetFirstExitException
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|setErr
argument_list|(
name|oldOut
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
block|}
name|String
name|print
init|=
name|bytes
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// should be printed tip in std error stream
name|assertTrue
argument_list|(
name|print
operator|.
name|contains
argument_list|(
literal|"Usage: gridmix [-generate<MiB>] [-users URI] [-Dname=value ...]<iopath><trace>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|print
operator|.
name|contains
argument_list|(
literal|"e.g. gridmix -generate 100m foo -"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

